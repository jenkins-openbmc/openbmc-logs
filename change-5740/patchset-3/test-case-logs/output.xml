<?xml version="1.0" encoding="UTF-8"?>
<robot generated="20170803 18:41:07.659" generator="Robot 3.0.2 (Python 2.7.12 on linux2)">
<suite name="Tests" source="/tmp/fspcibld/16652/obmc-robot/tests" id="s1">
<kw type="setup" name="System Driver Data">
<doc>System driver information.</doc>
<kw library="connection_client" name="Open Connection And Log In">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170803 18:41:08.146" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status endtime="20170803 18:41:08.146" status="FAIL" starttime="20170803 18:41:08.145"></status>
</kw>
<msg timestamp="20170803 18:41:08.146" level="INFO">${has_host} = False</msg>
<status endtime="20170803 18:41:08.146" status="PASS" starttime="20170803 18:41:08.145"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status endtime="20170803 18:41:08.147" status="PASS" starttime="20170803 18:41:08.147"></status>
</kw>
<status endtime="20170803 18:41:08.147" status="PASS" starttime="20170803 18:41:08.146"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw library="connection_client" name="User input SSH and HTTPs Ports">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg timestamp="20170803 18:41:08.149" level="INFO">${port_num} = 22</msg>
<status endtime="20170803 18:41:08.149" status="PASS" starttime="20170803 18:41:08.148"></status>
</kw>
<kw library="BuiltIn" name="Replace Variables">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg timestamp="20170803 18:41:08.149" level="INFO">${SSH_PORT} = 22</msg>
<status endtime="20170803 18:41:08.149" status="PASS" starttime="20170803 18:41:08.149"></status>
</kw>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg timestamp="20170803 18:41:08.150" level="INFO">${https_num} = 443</msg>
<status endtime="20170803 18:41:08.150" status="PASS" starttime="20170803 18:41:08.149"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg timestamp="20170803 18:41:08.150" level="INFO">${AUTH_URI} = https://9.3.21.61:443</msg>
<status endtime="20170803 18:41:08.150" status="PASS" starttime="20170803 18:41:08.150"></status>
</kw>
<status endtime="20170803 18:41:08.151" status="PASS" starttime="20170803 18:41:08.148"></status>
</kw>
<status endtime="20170803 18:41:08.151" status="PASS" starttime="20170803 18:41:08.147"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170803 18:41:08.152" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status endtime="20170803 18:41:08.152" status="FAIL" starttime="20170803 18:41:08.151"></status>
</kw>
<msg timestamp="20170803 18:41:08.152" level="INFO">${has_port} = False</msg>
<status endtime="20170803 18:41:08.152" status="PASS" starttime="20170803 18:41:08.151"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keywords">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status endtime="20170803 18:41:08.153" status="PASS" starttime="20170803 18:41:08.153"></status>
</kw>
<kw library="SSHLibrary" name="Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status endtime="20170803 18:41:08.154" status="PASS" starttime="20170803 18:41:08.154"></status>
</kw>
<status endtime="20170803 18:41:08.154" status="PASS" starttime="20170803 18:41:08.153"></status>
</kw>
<status endtime="20170803 18:41:08.154" status="PASS" starttime="20170803 18:41:08.152"></status>
</kw>
<kw library="SSHLibrary" name="Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170803 18:41:08.155" level="INFO">Logging into '9.3.21.61:22' as 'root'.</msg>
<msg timestamp="20170803 18:41:09.876" level="INFO">Read output: root@witherspoon:~#</msg>
<status endtime="20170803 18:41:09.877" status="PASS" starttime="20170803 18:41:08.154"></status>
</kw>
<status endtime="20170803 18:41:09.877" status="PASS" starttime="20170803 18:41:08.144"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log BMC Driver Details</arg>
</arguments>
<kw name="Log BMC Driver Details">
<doc>Get BMC driver details and log.</doc>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${DRIVER_CMD}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${output}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170803 18:41:09.878" level="INFO">Executing command 'cat /etc/os-release | grep ^VERSION_ID='.</msg>
<msg timestamp="20170803 18:41:09.955" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170803 18:41:09.955" level="INFO">${output} = VERSION_ID="v1.99.8-182-g631adef"</msg>
<msg timestamp="20170803 18:41:09.955" level="INFO">${stderr} = </msg>
<status endtime="20170803 18:41:09.956" status="PASS" starttime="20170803 18:41:09.878"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170803 18:41:09.957" level="INFO">Length is 0</msg>
<status endtime="20170803 18:41:09.957" status="PASS" starttime="20170803 18:41:09.956"></status>
</kw>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20170803 18:41:09.957" level="INFO">VERSION_ID="v1.99.8-182-g631adef"</msg>
<status endtime="20170803 18:41:09.957" status="PASS" starttime="20170803 18:41:09.957"></status>
</kw>
<status endtime="20170803 18:41:09.957" status="PASS" starttime="20170803 18:41:09.877"></status>
</kw>
<status endtime="20170803 18:41:09.957" status="PASS" starttime="20170803 18:41:09.877"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log PNOR Driver Details</arg>
</arguments>
<kw name="Log PNOR Driver Details">
<doc>Get PNOR driver details and log.</doc>
<kw library="utils" name="Execute Command On BMC">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>${PNOR_CMD}</arg>
</arguments>
<assign>
<var>${pnor_details}</var>
</assign>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170803 18:41:09.959" level="INFO">Executing command '/usr/sbin/pflash -r /tmp/out.txt -P VERSION; cat /tmp/out.txt'.</msg>
<msg timestamp="20170803 18:41:10.157" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20170803 18:41:10.157" level="INFO">${stdout} = FFS: Flash header not found. Code: 100</msg>
<msg timestamp="20170803 18:41:10.157" level="INFO">${stderr} = Error 100 opening ffs !
cat: can't open '/tmp/out.txt': No such file or directory</msg>
<status endtime="20170803 18:41:10.157" status="PASS" starttime="20170803 18:41:09.959"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170803 18:41:10.158" level="INFO">Length is 81</msg>
<msg timestamp="20170803 18:41:10.158" level="FAIL">'Error 100 opening ffs !
cat: can't open '/tmp/out.txt': No such file or directory' should be empty.</msg>
<status endtime="20170803 18:41:10.159" status="FAIL" starttime="20170803 18:41:10.158"></status>
</kw>
<status endtime="20170803 18:41:10.159" status="FAIL" starttime="20170803 18:41:09.958"></status>
</kw>
<status endtime="20170803 18:41:10.159" status="FAIL" starttime="20170803 18:41:09.958"></status>
</kw>
<status endtime="20170803 18:41:10.159" status="PASS" starttime="20170803 18:41:09.958"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log BMC Model</arg>
</arguments>
<kw name="Log BMC Model">
<doc>Fetch BMC Model name from system and log.</doc>
<kw library="utils" name="Get BMC System Model">
<doc>Get the BMC model from the device tree.</doc>
<assign>
<var>${bmc_model}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20170803 18:41:10.342" level="INFO">index=1
host=9.3.21.61
newline=

encoding=UTF-8
term_type=vt100
height=24
path_separator=/
width=80
alias=bmc_connection
timeout=25 seconds
prompt=# 
port=22</msg>
<msg timestamp="20170803 18:41:10.342" level="INFO">Logging into '9.3.21.61:22' as 'root'.</msg>
<msg timestamp="20170803 18:41:11.081" level="INFO">Read output: root@witherspoon:~#</msg>
<msg timestamp="20170803 18:41:11.082" level="INFO">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg timestamp="20170803 18:41:11.159" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170803 18:41:11.169" level="INFO">${bmc_model} = Witherspoon</msg>
<msg timestamp="20170803 18:41:11.169" level="INFO">${stderr} = </msg>
<msg timestamp="20170803 18:41:11.169" level="INFO">${rc} = 0</msg>
<status endtime="20170803 18:41:11.169" status="PASS" starttime="20170803 18:41:10.161"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170803 18:41:11.170" level="INFO">Length is 0</msg>
<status endtime="20170803 18:41:11.170" status="PASS" starttime="20170803 18:41:11.169"></status>
</kw>
<kw library="BuiltIn" name="Should Not Be Empty">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg timestamp="20170803 18:41:11.171" level="INFO">Length is 11</msg>
<status endtime="20170803 18:41:11.171" status="PASS" starttime="20170803 18:41:11.170"></status>
</kw>
<msg timestamp="20170803 18:41:11.171" level="INFO">${bmc_model} = Witherspoon</msg>
<status endtime="20170803 18:41:11.171" status="PASS" starttime="20170803 18:41:10.160"></status>
</kw>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>BMC Model=${bmc_model}</arg>
</arguments>
<msg timestamp="20170803 18:41:11.172" level="INFO">BMC Model=Witherspoon</msg>
<status endtime="20170803 18:41:11.172" status="PASS" starttime="20170803 18:41:11.171"></status>
</kw>
<status endtime="20170803 18:41:11.172" status="PASS" starttime="20170803 18:41:10.160"></status>
</kw>
<status endtime="20170803 18:41:11.172" status="PASS" starttime="20170803 18:41:10.159"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Enable Core Dump On BMC</arg>
</arguments>
<kw library="utils" name="Enable Core Dump On BMC">
<doc>Enable core dump collection.</doc>
<kw library="connection_client" name="Open Connection And Log In">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170803 18:41:11.175" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status endtime="20170803 18:41:11.175" status="FAIL" starttime="20170803 18:41:11.175"></status>
</kw>
<msg timestamp="20170803 18:41:11.176" level="INFO">${has_host} = False</msg>
<status endtime="20170803 18:41:11.176" status="PASS" starttime="20170803 18:41:11.174"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status endtime="20170803 18:41:11.177" status="PASS" starttime="20170803 18:41:11.177"></status>
</kw>
<status endtime="20170803 18:41:11.177" status="PASS" starttime="20170803 18:41:11.176"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw library="connection_client" name="User input SSH and HTTPs Ports">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg timestamp="20170803 18:41:11.179" level="INFO">${port_num} = 22</msg>
<status endtime="20170803 18:41:11.179" status="PASS" starttime="20170803 18:41:11.178"></status>
</kw>
<kw library="BuiltIn" name="Replace Variables">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg timestamp="20170803 18:41:11.179" level="INFO">${SSH_PORT} = 22</msg>
<status endtime="20170803 18:41:11.179" status="PASS" starttime="20170803 18:41:11.179"></status>
</kw>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg timestamp="20170803 18:41:11.180" level="INFO">${https_num} = 443</msg>
<status endtime="20170803 18:41:11.180" status="PASS" starttime="20170803 18:41:11.180"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg timestamp="20170803 18:41:11.181" level="INFO">${AUTH_URI} = https://9.3.21.61:443</msg>
<status endtime="20170803 18:41:11.181" status="PASS" starttime="20170803 18:41:11.180"></status>
</kw>
<status endtime="20170803 18:41:11.181" status="PASS" starttime="20170803 18:41:11.178"></status>
</kw>
<status endtime="20170803 18:41:11.181" status="PASS" starttime="20170803 18:41:11.178"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170803 18:41:11.182" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status endtime="20170803 18:41:11.182" status="FAIL" starttime="20170803 18:41:11.181"></status>
</kw>
<msg timestamp="20170803 18:41:11.182" level="INFO">${has_port} = False</msg>
<status endtime="20170803 18:41:11.182" status="PASS" starttime="20170803 18:41:11.181"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keywords">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status endtime="20170803 18:41:11.184" status="PASS" starttime="20170803 18:41:11.183"></status>
</kw>
<kw library="SSHLibrary" name="Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status endtime="20170803 18:41:11.184" status="PASS" starttime="20170803 18:41:11.184"></status>
</kw>
<status endtime="20170803 18:41:11.184" status="PASS" starttime="20170803 18:41:11.183"></status>
</kw>
<status endtime="20170803 18:41:11.184" status="PASS" starttime="20170803 18:41:11.182"></status>
</kw>
<kw library="SSHLibrary" name="Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170803 18:41:11.185" level="INFO">Logging into '9.3.21.61:22' as 'root'.</msg>
<msg timestamp="20170803 18:41:12.864" level="INFO">Read output: root@witherspoon:~#</msg>
<status endtime="20170803 18:41:12.865" status="PASS" starttime="20170803 18:41:11.185"></status>
</kw>
<status endtime="20170803 18:41:12.865" status="PASS" starttime="20170803 18:41:11.173"></status>
</kw>
<kw library="utils" name="Execute Command On BMC">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>echo '/tmp/core_%e.%p' | tee /proc/sys/kernel/core_pattern</arg>
</arguments>
<assign>
<var>${core_pattern}</var>
</assign>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170803 18:41:12.866" level="INFO">Executing command 'echo '/tmp/core_%e.%p' | tee /proc/sys/kernel/core_pattern'.</msg>
<msg timestamp="20170803 18:41:12.942" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170803 18:41:12.943" level="INFO">${stdout} = /tmp/core_%e.%p</msg>
<msg timestamp="20170803 18:41:12.943" level="INFO">${stderr} = </msg>
<status endtime="20170803 18:41:12.943" status="PASS" starttime="20170803 18:41:12.865"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170803 18:41:12.943" level="INFO">Length is 0</msg>
<status endtime="20170803 18:41:12.943" status="PASS" starttime="20170803 18:41:12.943"></status>
</kw>
<msg timestamp="20170803 18:41:12.943" level="INFO">${core_pattern} = /tmp/core_%e.%p</msg>
<status endtime="20170803 18:41:12.943" status="PASS" starttime="20170803 18:41:12.865"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${core_pattern}</arg>
<arg>/tmp/core_%e.%p</arg>
</arguments>
<status endtime="20170803 18:41:12.944" status="PASS" starttime="20170803 18:41:12.944"></status>
</kw>
<status endtime="20170803 18:41:12.944" status="PASS" starttime="20170803 18:41:11.173"></status>
</kw>
<status endtime="20170803 18:41:12.944" status="PASS" starttime="20170803 18:41:11.172"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${DEBUG_TARBALL_PATH}' != '${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Install Debug Tarball On BMC</arg>
<arg>${DEBUG_TARBALL_PATH}</arg>
</arguments>
<status endtime="20170803 18:41:12.945" status="PASS" starttime="20170803 18:41:12.944"></status>
</kw>
<status endtime="20170803 18:41:12.945" status="PASS" starttime="20170803 18:41:08.144"></status>
</kw>
<suite name="Security" source="/tmp/fspcibld/16652/obmc-robot/tests/security" id="s1-s1">
<suite name="Test Ssl" source="/tmp/fspcibld/16652/obmc-robot/tests/security/test_ssl.robot" id="s1-s1-s1">
<test name="Test SSL Connection" id="s1-s1-s1-t1">
<kw library="rest_client" name="Initialize OpenBMC">
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170803 18:41:13.025" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=20, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170803 18:41:13.025" status="PASS" starttime="20170803 18:41:13.024"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170803 18:41:13.026" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170803 18:41:13.026" status="PASS" starttime="20170803 18:41:13.025"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170803 18:41:13.026" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170803 18:41:13.027" status="PASS" starttime="20170803 18:41:13.026"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170803 18:41:13.027" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170803 18:41:13.027" status="PASS" starttime="20170803 18:41:13.027"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170803 18:41:13.224" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170803 18:41:13.224" status="PASS" starttime="20170803 18:41:13.028"></status>
</kw>
<msg timestamp="20170803 18:41:13.225" level="INFO">${status} = PASS</msg>
<msg timestamp="20170803 18:41:13.225" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:41:13.225" status="PASS" starttime="20170803 18:41:13.027"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170803 18:41:13.225" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:41:13.225" status="PASS" starttime="20170803 18:41:13.225"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:41:13.226" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:41:13.226" status="PASS" starttime="20170803 18:41:13.226"></status>
</kw>
<status endtime="20170803 18:41:13.226" status="PASS" starttime="20170803 18:41:13.024"></status>
</kw>
<status endtime="20170803 18:41:13.226" status="PASS" starttime="20170803 18:41:13.023"></status>
</kw>
<status endtime="20170803 18:41:13.226" status="PASS" starttime="20170803 18:41:13.023"></status>
</kw>
<kw library="openbmc_ffdc" type="teardown" name="FFDC On Test Case Fail">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw library="state_manager" name="Is Host Quiesced">
<doc>Check if host state is quiesced.</doc>
<assign>
<var>${status}</var>
</assign>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170803 18:41:13.231" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170803 18:41:13.232" status="PASS" starttime="20170803 18:41:13.231"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170803 18:41:13.232" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170803 18:41:13.232" status="PASS" starttime="20170803 18:41:13.232"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170803 18:41:13.233" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170803 18:41:13.233" status="PASS" starttime="20170803 18:41:13.233"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170803 18:41:13.234" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170803 18:41:13.234" status="PASS" starttime="20170803 18:41:13.233"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170803 18:41:13.429" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170803 18:41:13.430" status="PASS" starttime="20170803 18:41:13.234"></status>
</kw>
<msg timestamp="20170803 18:41:13.430" level="INFO">${status} = PASS</msg>
<msg timestamp="20170803 18:41:13.430" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:41:13.430" status="PASS" starttime="20170803 18:41:13.234"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170803 18:41:13.431" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:41:13.431" status="PASS" starttime="20170803 18:41:13.430"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:41:13.431" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:41:13.431" status="PASS" starttime="20170803 18:41:13.431"></status>
</kw>
<status endtime="20170803 18:41:13.431" status="PASS" starttime="20170803 18:41:13.230"></status>
</kw>
<status endtime="20170803 18:41:13.432" status="PASS" starttime="20170803 18:41:13.230"></status>
</kw>
<status endtime="20170803 18:41:13.432" status="PASS" starttime="20170803 18:41:13.229"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170803 18:41:13.432" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170803 18:41:13.432" status="PASS" starttime="20170803 18:41:13.432"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:41:13.434" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170803 18:41:13.434" status="PASS" starttime="20170803 18:41:13.434"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:41:13.435" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170803 18:41:13.435" status="PASS" starttime="20170803 18:41:13.435"></status>
</kw>
<status endtime="20170803 18:41:13.436" status="PASS" starttime="20170803 18:41:13.435"></status>
</kw>
<status endtime="20170803 18:41:13.436" status="PASS" starttime="20170803 18:41:13.433"></status>
</kw>
<status endtime="20170803 18:41:13.436" status="PASS" starttime="20170803 18:41:13.433"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170803 18:41:13.524" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170803 18:41:13.524" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:41:13.524" status="PASS" starttime="20170803 18:41:13.436"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:41:13.526" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:41:13.526" status="PASS" starttime="20170803 18:41:13.526"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:41:13.527" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:41:13.527" status="PASS" starttime="20170803 18:41:13.527"></status>
</kw>
<status endtime="20170803 18:41:13.527" status="PASS" starttime="20170803 18:41:13.526"></status>
</kw>
<status endtime="20170803 18:41:13.527" status="PASS" starttime="20170803 18:41:13.525"></status>
</kw>
<status endtime="20170803 18:41:13.527" status="PASS" starttime="20170803 18:41:13.525"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170803 18:41:13.528" level="INFO">Delete All Sessions</msg>
<status endtime="20170803 18:41:13.528" status="PASS" starttime="20170803 18:41:13.528"></status>
</kw>
<msg timestamp="20170803 18:41:13.528" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:41:13.528" status="PASS" starttime="20170803 18:41:13.229"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:41:13.529" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:41:13.529" status="PASS" starttime="20170803 18:41:13.528"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170803 18:41:13.529" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170803 18:41:13.529" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170803 18:41:13.530" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Off'}</msg>
<status endtime="20170803 18:41:13.530" status="PASS" starttime="20170803 18:41:13.529"></status>
</kw>
<msg timestamp="20170803 18:41:13.530" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status endtime="20170803 18:41:13.530" status="PASS" starttime="20170803 18:41:13.228"></status>
</kw>
<msg timestamp="20170803 18:41:13.530" level="INFO">${host_state} = Off</msg>
<status endtime="20170803 18:41:13.530" status="PASS" starttime="20170803 18:41:13.228"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<msg timestamp="20170803 18:41:13.531" level="FAIL">Off != Quiesced</msg>
<status endtime="20170803 18:41:13.531" status="FAIL" starttime="20170803 18:41:13.531"></status>
</kw>
<msg timestamp="20170803 18:41:13.532" level="INFO">${status} = False</msg>
<status endtime="20170803 18:41:13.532" status="PASS" starttime="20170803 18:41:13.531"></status>
</kw>
<msg timestamp="20170803 18:41:13.532" level="INFO">${status} = False</msg>
<status endtime="20170803 18:41:13.532" status="PASS" starttime="20170803 18:41:13.227"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL' or '${status}'=='True'</arg>
<arg>FFDC</arg>
</arguments>
<status endtime="20170803 18:41:13.532" status="PASS" starttime="20170803 18:41:13.532"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}'=='True'</arg>
<arg>Recover Quiesced Host</arg>
</arguments>
<status endtime="20170803 18:41:13.533" status="PASS" starttime="20170803 18:41:13.533"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Log Test Case Status">
<doc>Test case execution result history.</doc>
<kw library="BuiltIn" name="Get Variable Value">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH_STYLE}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH_STYLE}</var>
</assign>
<msg timestamp="20170803 18:41:13.543" level="INFO">${FFDC_DIR_PATH_STYLE} = </msg>
<status endtime="20170803 18:41:13.543" status="PASS" starttime="20170803 18:41:13.534"></status>
</kw>
<kw library="BuiltIn" name="Get Variable Value">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH}</var>
</assign>
<msg timestamp="20170803 18:41:13.557" level="INFO">${FFDC_DIR_PATH} = </msg>
<status endtime="20170803 18:41:13.558" status="PASS" starttime="20170803 18:41:13.544"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH}' == '${EMPTY}'</arg>
<arg>Set FFDC Defaults</arg>
</arguments>
<kw library="openbmc_ffdc" name="Set Ffdc Defaults">
<doc>Set a default value for ffdc_dir_path and ffdc_prefix if they don't</doc>
<kw library="openbmc_ffdc_utils" name="Get Current Time Stamp">
<doc>Get the current time stamp data</doc>
<kw library="DateTime" name="Get Current Date">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170803 18:41:13.560" level="INFO">${cur_time} = 2017-08-03 18:41:13:560089</msg>
<status endtime="20170803 18:41:13.560" status="PASS" starttime="20170803 18:41:13.560"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170803 18:41:13.561" level="INFO">${cur_time} = 20170803184113560089</msg>
<status endtime="20170803 18:41:13.561" status="PASS" starttime="20170803 18:41:13.561"></status>
</kw>
<status endtime="20170803 18:41:13.562" status="PASS" starttime="20170803 18:41:13.559"></status>
</kw>
<msg timestamp="20170803 18:41:13.568" level="INFO">${FFDC_TIME} = 20170803184113560089</msg>
<kw library="openbmc_ffdc_utils" name="Get Test Dir and Name">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20170803 18:41:13.569" level="INFO">${suite_name} = TestsSecurityTestSsl</msg>
<status endtime="20170803 18:41:13.569" status="PASS" starttime="20170803 18:41:13.569"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20170803 18:41:13.570" level="INFO">${suite_name} = 20170803184113560089_TestsSecurityTestSsl</msg>
<status endtime="20170803 18:41:13.570" status="PASS" starttime="20170803 18:41:13.570"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20170803 18:41:13.570" level="INFO">${test_name} = TestSSLConnection</msg>
<status endtime="20170803 18:41:13.571" status="PASS" starttime="20170803 18:41:13.570"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20170803 18:41:13.571" level="INFO">${test_name} = 20170803184113560089_TestSSLConnection</msg>
<status endtime="20170803 18:41:13.571" status="PASS" starttime="20170803 18:41:13.571"></status>
</kw>
<status endtime="20170803 18:41:13.571" status="PASS" starttime="20170803 18:41:13.569"></status>
</kw>
<msg timestamp="20170803 18:41:13.572" level="INFO">${FFDC_DIR_PATH} = /tmp/fspcibld/16652/obmc-robot/logs/20170803184113560089_TestsSecurityTestSsl/20170803184113560089_TestSSLConnection/</msg>
<msg timestamp="20170803 18:41:13.576" level="INFO">${FFDC_PREFIX} = 20170803184113560089_</msg>
<status endtime="20170803 18:41:13.576" status="PASS" starttime="20170803 18:41:13.559"></status>
</kw>
<status endtime="20170803 18:41:13.576" status="PASS" starttime="20170803 18:41:13.558"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH_STYLE}' == '${1}'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${FFDC_LOG_PATH}</arg>
<arg>${FFDC_DIR_PATH}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${TEST_HISTORY}</arg>
<arg>${FFDC_DIR_PATH}test_history.txt</arg>
</arguments>
<status endtime="20170803 18:41:13.577" status="PASS" starttime="20170803 18:41:13.576"></status>
</kw>
<kw library="OperatingSystem" name="Create Directory">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg html="yes" timestamp="20170803 18:41:13.577" level="INFO">Created directory '&lt;a href="file:///tmp/fspcibld/16652/obmc-robot/logs"&gt;/tmp/fspcibld/16652/obmc-robot/logs&lt;/a&gt;'.</msg>
<status endtime="20170803 18:41:13.578" status="PASS" starttime="20170803 18:41:13.577"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw library="OperatingSystem" name="File Should Exist">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg timestamp="20170803 18:41:13.579" level="FAIL">File '/tmp/fspcibld/16652/obmc-robot/logs/test_history.txt' does not exist.</msg>
<status endtime="20170803 18:41:13.579" status="FAIL" starttime="20170803 18:41:13.578"></status>
</kw>
<msg timestamp="20170803 18:41:13.579" level="INFO">${exist} = False</msg>
<status endtime="20170803 18:41:13.579" status="PASS" starttime="20170803 18:41:13.578"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<kw library="OperatingSystem" name="Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg html="yes" timestamp="20170803 18:41:13.580" level="INFO">Created file '&lt;a href="file:///tmp/fspcibld/16652/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/16652/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status endtime="20170803 18:41:13.580" status="PASS" starttime="20170803 18:41:13.580"></status>
</kw>
<status endtime="20170803 18:41:13.580" status="PASS" starttime="20170803 18:41:13.579"></status>
</kw>
<kw library="gen_robot_print" name="Rpvars">
<arguments>
<arg>TEST_HISTORY</arg>
</arguments>
<status endtime="20170803 18:41:13.581" status="PASS" starttime="20170803 18:41:13.580"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Get Current Time Stamp">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw library="DateTime" name="Get Current Date">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170803 18:41:13.582" level="INFO">${cur_time} = 2017-08-03 18:41:13:581430</msg>
<status endtime="20170803 18:41:13.582" status="PASS" starttime="20170803 18:41:13.581"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170803 18:41:13.582" level="INFO">${cur_time} = 20170803184113581430</msg>
<status endtime="20170803 18:41:13.582" status="PASS" starttime="20170803 18:41:13.582"></status>
</kw>
<msg timestamp="20170803 18:41:13.582" level="INFO">${cur_time} = 20170803184113581430</msg>
<status endtime="20170803 18:41:13.583" status="PASS" starttime="20170803 18:41:13.581"></status>
</kw>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg html="yes" timestamp="20170803 18:41:13.584" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/16652/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/16652/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status endtime="20170803 18:41:13.584" status="PASS" starttime="20170803 18:41:13.583"></status>
</kw>
<status endtime="20170803 18:41:13.584" status="PASS" starttime="20170803 18:41:13.533"></status>
</kw>
<status endtime="20170803 18:41:13.584" status="PASS" starttime="20170803 18:41:13.227"></status>
</kw>
<doc>This testcase is for testing the SSL connection to the
OpenBMC machine.</doc>
<tags>
<tag>Test_SSL_Connection</tag>
</tags>
<status endtime="20170803 18:41:13.584" status="PASS" starttime="20170803 18:41:13.022" critical="yes"></status>
</test>
<kw library="RequestsLibrary.RequestsKeywords" type="teardown" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170803 18:41:13.585" level="INFO">Delete All Sessions</msg>
<status endtime="20170803 18:41:13.585" status="PASS" starttime="20170803 18:41:13.585"></status>
</kw>
<doc>This testsuite is for testing SSL connection to OpenBMC</doc>
<status endtime="20170803 18:41:13.585" status="PASS" starttime="20170803 18:41:12.947"></status>
</suite>
<status endtime="20170803 18:41:13.587" status="PASS" starttime="20170803 18:41:12.945"></status>
</suite>
<suite name="Test Basic Poweron" source="/tmp/fspcibld/16652/obmc-robot/tests/test_basic_poweron.robot" id="s1-s2">
<test name="Power On Test" id="s1-s2-t1">
<kw library="utils" type="setup" name="Start SOL Console Logging">
<doc>Start system console log to file.</doc>
<kw library="utils" name="Create OS Console File Path">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg timestamp="20170803 18:41:13.622" level="INFO">${default_file_path} = /tmp/9.3.21.61_os_console</msg>
<status endtime="20170803 18:41:13.622" status="PASS" starttime="20170803 18:41:13.622"></status>
</kw>
<kw library="BuiltIn" name="Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg timestamp="20170803 18:41:13.623" level="INFO">${log_file_path} = /tmp/9.3.21.61_os_console</msg>
<status endtime="20170803 18:41:13.623" status="PASS" starttime="20170803 18:41:13.622"></status>
</kw>
<msg timestamp="20170803 18:41:13.623" level="INFO">${log_file_path} = /tmp/9.3.21.61_os_console</msg>
<status endtime="20170803 18:41:13.623" status="PASS" starttime="20170803 18:41:13.621"></status>
</kw>
<kw library="utils" name="Stop SOL Console Logging">
<doc>Stop system console logging and return log output.</doc>
<arguments>
<arg>${log_file_path}</arg>
<arg>return_data=${return_data}</arg>
</arguments>
<assign>
<var>${log_output}</var>
</assign>
<kw library="utils" name="Create OS Console File Path">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg timestamp="20170803 18:41:13.624" level="INFO">${default_file_path} = /tmp/9.3.21.61_os_console</msg>
<status endtime="20170803 18:41:13.625" status="PASS" starttime="20170803 18:41:13.624"></status>
</kw>
<kw library="BuiltIn" name="Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg timestamp="20170803 18:41:13.625" level="INFO">${log_file_path} = /tmp/9.3.21.61_os_console</msg>
<status endtime="20170803 18:41:13.625" status="PASS" starttime="20170803 18:41:13.625"></status>
</kw>
<msg timestamp="20170803 18:41:13.625" level="INFO">${log_file_path} = /tmp/9.3.21.61_os_console</msg>
<status endtime="20170803 18:41:13.625" status="PASS" starttime="20170803 18:41:13.624"></status>
</kw>
<kw library="utils" name="Create OS Console Command String">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${search_string}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170803 18:41:13.626" level="INFO">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status endtime="20170803 18:41:13.626" status="PASS" starttime="20170803 18:41:13.626"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170803 18:41:13.627" status="PASS" starttime="20170803 18:41:13.627"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170803 18:41:13.633" level="INFO">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg timestamp="20170803 18:41:13.636" level="INFO">${rc} = 0</msg>
<msg timestamp="20170803 18:41:13.636" level="INFO">${output} = /tmp/fspcibld/16652/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status endtime="20170803 18:41:13.636" status="PASS" starttime="20170803 18:41:13.627"></status>
</kw>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status endtime="20170803 18:41:13.639" status="PASS" starttime="20170803 18:41:13.638"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${output}\n</arg>
</arguments>
<status endtime="20170803 18:41:13.640" status="PASS" starttime="20170803 18:41:13.639"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>ssh_pw ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>-o "StrictHostKeyChecking no" ${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170803 18:41:13.640" level="INFO">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.21.61</msg>
<status endtime="20170803 18:41:13.640" status="PASS" starttime="20170803 18:41:13.640"></status>
</kw>
<msg timestamp="20170803 18:41:13.641" level="INFO">${search_string} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.21.61</msg>
<status endtime="20170803 18:41:13.641" status="PASS" starttime="20170803 18:41:13.626"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>echo $(ps -ef | egrep '${search_string}'</arg>
<arg>| egrep -v grep | cut -c10-14)</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170803 18:41:13.642" level="INFO">${cmd_buf} = echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.21.61' | egrep -v grep | cut -c10-14)</msg>
<status endtime="20170803 18:41:13.642" status="PASS" starttime="20170803 18:41:13.641"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170803 18:41:13.642" status="PASS" starttime="20170803 18:41:13.642"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${os_con_pid}</var>
</assign>
<msg timestamp="20170803 18:41:13.647" level="INFO">Running command 'echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.21.61' | egrep -v grep | cut -c10-14) 2&gt;&amp;1'.</msg>
<msg timestamp="20170803 18:41:13.661" level="INFO">${rc} = 0</msg>
<msg timestamp="20170803 18:41:13.661" level="INFO">${os_con_pid} = </msg>
<status endtime="20170803 18:41:13.661" status="PASS" starttime="20170803 18:41:13.642"></status>
</kw>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>os_con_pid</arg>
</arguments>
<status endtime="20170803 18:41:13.674" status="PASS" starttime="20170803 18:41:13.671"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>kill -9 ${os_con_pid}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170803 18:41:13.675" level="INFO">${cmd_buf} = kill -9 </msg>
<status endtime="20170803 18:41:13.675" status="PASS" starttime="20170803 18:41:13.674"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpissuing</arg>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170803 18:41:13.678" status="PASS" starttime="20170803 18:41:13.676"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Run And Return Rc And Output</arg>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170803 18:41:13.679" level="INFO">${rc} = None</msg>
<msg timestamp="20170803 18:41:13.679" level="INFO">${output} = None</msg>
<status endtime="20170803 18:41:13.679" status="PASS" starttime="20170803 18:41:13.678"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpvars</arg>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status endtime="20170803 18:41:13.681" status="PASS" starttime="20170803 18:41:13.680"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${targ_file_path}' != '${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw library="OperatingSystem" name="Copy File">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<msg timestamp="20170803 18:41:13.688" level="FAIL">Source file '/tmp/9.3.21.61_os_console' does not exist.</msg>
<status endtime="20170803 18:41:13.688" status="FAIL" starttime="20170803 18:41:13.683"></status>
</kw>
<status endtime="20170803 18:41:13.688" status="PASS" starttime="20170803 18:41:13.683"></status>
</kw>
<status endtime="20170803 18:41:13.688" status="PASS" starttime="20170803 18:41:13.681"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20170803 18:41:13.689" level="INFO">${output} = </msg>
<status endtime="20170803 18:41:13.689" status="PASS" starttime="20170803 18:41:13.688"></status>
</kw>
<kw library="BuiltIn" name="Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${debug}^1</arg>
</arguments>
<assign>
<var>${loc_quiet}</var>
</assign>
<msg timestamp="20170803 18:41:13.689" level="INFO">${loc_quiet} = 1</msg>
<status endtime="20170803 18:41:13.689" status="PASS" starttime="20170803 18:41:13.689"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return_data}' == '${1}'</arg>
<arg>Cmd Fnc</arg>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<kw library="gen_cmd" name="Cmd Fnc">
<doc>Run the given command in a shell and return the shell return code.</doc>
<arguments>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<status endtime="20170803 18:41:13.731" status="PASS" starttime="20170803 18:41:13.690"></status>
</kw>
<msg timestamp="20170803 18:41:13.732" level="INFO">${rc} = 1</msg>
<msg timestamp="20170803 18:41:13.732" level="INFO">${output} = cat: /tmp/9.3.21.61_os_console: No such file or directory
</msg>
<status endtime="20170803 18:41:13.732" status="PASS" starttime="20170803 18:41:13.689"></status>
</kw>
<msg timestamp="20170803 18:41:13.733" level="INFO">${log_output} = cat: /tmp/9.3.21.61_os_console: No such file or directory
</msg>
<status endtime="20170803 18:41:13.733" status="PASS" starttime="20170803 18:41:13.623"></status>
</kw>
<kw library="OperatingSystem" name="Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<msg html="yes" timestamp="20170803 18:41:13.734" level="INFO">Created file '&lt;a href="file:///tmp/9.3.21.61_os_console"&gt;/tmp/9.3.21.61_os_console&lt;/a&gt;'.</msg>
<status endtime="20170803 18:41:13.734" status="PASS" starttime="20170803 18:41:13.734"></status>
</kw>
<kw library="utils" name="Create OS Console Command String">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${sub_cmd_buf}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170803 18:41:13.736" level="INFO">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status endtime="20170803 18:41:13.736" status="PASS" starttime="20170803 18:41:13.735"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170803 18:41:13.736" status="PASS" starttime="20170803 18:41:13.736"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170803 18:41:13.740" level="INFO">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg timestamp="20170803 18:41:13.742" level="INFO">${rc} = 0</msg>
<msg timestamp="20170803 18:41:13.742" level="INFO">${output} = /tmp/fspcibld/16652/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status endtime="20170803 18:41:13.742" status="PASS" starttime="20170803 18:41:13.737"></status>
</kw>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status endtime="20170803 18:41:13.745" status="PASS" starttime="20170803 18:41:13.744"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${output}\n</arg>
</arguments>
<status endtime="20170803 18:41:13.746" status="PASS" starttime="20170803 18:41:13.745"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>ssh_pw ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>-o "StrictHostKeyChecking no" ${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170803 18:41:13.746" level="INFO">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.21.61</msg>
<status endtime="20170803 18:41:13.746" status="PASS" starttime="20170803 18:41:13.746"></status>
</kw>
<msg timestamp="20170803 18:41:13.747" level="INFO">${sub_cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.21.61</msg>
<status endtime="20170803 18:41:13.747" status="PASS" starttime="20170803 18:41:13.735"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${sub_cmd_buf} &gt; ${log_file_path} 2&gt;&amp;1 &amp;</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170803 18:41:13.748" level="INFO">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.21.61 &gt; /tmp/9.3.21.61_os_console 2&gt;&amp;1 &amp;</msg>
<status endtime="20170803 18:41:13.748" status="PASS" starttime="20170803 18:41:13.747"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170803 18:41:13.748" status="PASS" starttime="20170803 18:41:13.748"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170803 18:41:13.751" level="INFO">Running command 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.21.61 &gt; /tmp/9.3.21.61_os_console 2&gt;&amp;1 &amp;'.</msg>
<msg timestamp="20170803 18:41:13.754" level="INFO">${rc} = 0</msg>
<msg timestamp="20170803 18:41:13.754" level="INFO">${output} = </msg>
<status endtime="20170803 18:41:13.754" status="PASS" starttime="20170803 18:41:13.748"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
</arguments>
<status endtime="20170803 18:41:13.757" status="PASS" starttime="20170803 18:41:13.756"></status>
</kw>
<status endtime="20170803 18:41:13.757" status="PASS" starttime="20170803 18:41:13.621"></status>
</kw>
<kw library="BuiltIn" name="Repeat Keyword">
<doc>Executes the specified keyword multiple times.</doc>
<arguments>
<arg>${LOOP_COUNT} times</arg>
<arg>Host Off And On</arg>
</arguments>
<msg timestamp="20170803 18:41:13.758" level="INFO">Repeating keyword, round 1/2.</msg>
<kw name="Host Off And On">
<doc>Verify power off and on.</doc>
<kw library="state_manager" name="Initiate Host PowerOff">
<doc>Initiate host power off.</doc>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${HOST_POWEROFF_TRANS}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20170803 18:41:13.759" level="INFO">${args} = {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}</msg>
<status endtime="20170803 18:41:13.759" status="PASS" starttime="20170803 18:41:13.759"></status>
</kw>
<kw library="rest_client" name="Write Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>RequestedHostTransition</arg>
<arg>data=${args}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170803 18:41:13.761" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0/</msg>
<status endtime="20170803 18:41:13.761" status="PASS" starttime="20170803 18:41:13.760"></status>
</kw>
<kw library="rest_client" name="OpenBMC Put Request">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170803 18:41:13.768" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170803 18:41:13.769" status="PASS" starttime="20170803 18:41:13.768"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170803 18:41:13.769" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170803 18:41:13.769" status="PASS" starttime="20170803 18:41:13.769"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170803 18:41:13.770" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170803 18:41:13.770" status="PASS" starttime="20170803 18:41:13.770"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170803 18:41:13.771" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170803 18:41:13.771" status="PASS" starttime="20170803 18:41:13.770"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170803 18:41:14.218" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170803 18:41:14.218" status="PASS" starttime="20170803 18:41:13.771"></status>
</kw>
<msg timestamp="20170803 18:41:14.219" level="INFO">${status} = PASS</msg>
<msg timestamp="20170803 18:41:14.219" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:41:14.219" status="PASS" starttime="20170803 18:41:13.771"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170803 18:41:14.219" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:41:14.219" status="PASS" starttime="20170803 18:41:14.219"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:41:14.220" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:41:14.220" status="PASS" starttime="20170803 18:41:14.220"></status>
</kw>
<status endtime="20170803 18:41:14.220" status="PASS" starttime="20170803 18:41:13.767"></status>
</kw>
<status endtime="20170803 18:41:14.220" status="PASS" starttime="20170803 18:41:13.767"></status>
</kw>
<status endtime="20170803 18:41:14.221" status="PASS" starttime="20170803 18:41:13.762"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170803 18:41:14.221" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/RequestedHostTransition</msg>
<status endtime="20170803 18:41:14.221" status="PASS" starttime="20170803 18:41:14.221"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170803 18:41:14.222" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170803 18:41:14.222" status="PASS" starttime="20170803 18:41:14.221"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20170803 18:41:14.222" status="PASS" starttime="20170803 18:41:14.222"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:41:14.224" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-T...</msg>
<status endtime="20170803 18:41:14.224" status="PASS" starttime="20170803 18:41:14.223"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:41:14.225" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20170803 18:41:14.225" status="PASS" starttime="20170803 18:41:14.225"></status>
</kw>
<status endtime="20170803 18:41:14.225" status="PASS" starttime="20170803 18:41:14.224"></status>
</kw>
<status endtime="20170803 18:41:14.225" status="PASS" starttime="20170803 18:41:14.222"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Put Request">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170803 18:41:15.619" level="INFO">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, data={"data": "xyz.openbmc_project.State.Host.Transition.Off"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg timestamp="20170803 18:41:15.620" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:41:15.620" status="PASS" starttime="20170803 18:41:14.225"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:41:15.621" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:41:15.621" status="PASS" starttime="20170803 18:41:15.620"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:41:15.622" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:41:15.622" status="PASS" starttime="20170803 18:41:15.622"></status>
</kw>
<status endtime="20170803 18:41:15.622" status="PASS" starttime="20170803 18:41:15.621"></status>
</kw>
<status endtime="20170803 18:41:15.622" status="PASS" starttime="20170803 18:41:15.620"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170803 18:41:15.623" level="INFO">Delete All Sessions</msg>
<status endtime="20170803 18:41:15.623" status="PASS" starttime="20170803 18:41:15.623"></status>
</kw>
<msg timestamp="20170803 18:41:15.623" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:41:15.623" status="PASS" starttime="20170803 18:41:13.761"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:41:15.624" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:41:15.624" status="PASS" starttime="20170803 18:41:15.623"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20170803 18:41:15.624" level="INFO">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170803 18:41:15.624" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170803 18:41:15.624" level="INFO">${json} = {u'message': u'200 OK', u'status': u'ok', u'data': None}</msg>
<status endtime="20170803 18:41:15.624" status="PASS" starttime="20170803 18:41:15.624"></status>
</kw>
<status endtime="20170803 18:41:15.625" status="PASS" starttime="20170803 18:41:13.760"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${wait}' == '${0}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<status endtime="20170803 18:41:15.625" status="PASS" starttime="20170803 18:41:15.625"></status>
</kw>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>6 min</arg>
<arg>10 sec</arg>
<arg>Is Host Off</arg>
</arguments>
<kw library="state_manager" name="Is Host Off">
<doc>Check if host state is "Off".</doc>
<kw library="state_manager" name="Is Chassis Off">
<doc>Check if chassis state is "Off".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170803 18:41:15.630" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170803 18:41:15.630" status="PASS" starttime="20170803 18:41:15.630"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170803 18:41:15.631" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170803 18:41:15.631" status="PASS" starttime="20170803 18:41:15.631"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170803 18:41:15.631" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170803 18:41:15.631" status="PASS" starttime="20170803 18:41:15.631"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170803 18:41:15.632" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170803 18:41:15.632" status="PASS" starttime="20170803 18:41:15.632"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170803 18:41:16.219" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170803 18:41:16.219" status="PASS" starttime="20170803 18:41:15.633"></status>
</kw>
<msg timestamp="20170803 18:41:16.219" level="INFO">${status} = PASS</msg>
<msg timestamp="20170803 18:41:16.219" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:41:16.219" status="PASS" starttime="20170803 18:41:15.633"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170803 18:41:16.220" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:41:16.220" status="PASS" starttime="20170803 18:41:16.220"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:41:16.221" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:41:16.221" status="PASS" starttime="20170803 18:41:16.220"></status>
</kw>
<status endtime="20170803 18:41:16.221" status="PASS" starttime="20170803 18:41:15.629"></status>
</kw>
<status endtime="20170803 18:41:16.221" status="PASS" starttime="20170803 18:41:15.629"></status>
</kw>
<status endtime="20170803 18:41:16.221" status="PASS" starttime="20170803 18:41:15.628"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170803 18:41:16.222" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170803 18:41:16.222" status="PASS" starttime="20170803 18:41:16.222"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:41:16.224" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170803 18:41:16.224" status="PASS" starttime="20170803 18:41:16.223"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:41:16.225" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170803 18:41:16.225" status="PASS" starttime="20170803 18:41:16.225"></status>
</kw>
<status endtime="20170803 18:41:16.225" status="PASS" starttime="20170803 18:41:16.224"></status>
</kw>
<status endtime="20170803 18:41:16.225" status="PASS" starttime="20170803 18:41:16.223"></status>
</kw>
<status endtime="20170803 18:41:16.225" status="PASS" starttime="20170803 18:41:16.222"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170803 18:41:19.546" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170803 18:41:19.546" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:41:19.546" status="PASS" starttime="20170803 18:41:16.226"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:41:19.548" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:41:19.548" status="PASS" starttime="20170803 18:41:19.548"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:41:19.549" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:41:19.549" status="PASS" starttime="20170803 18:41:19.549"></status>
</kw>
<status endtime="20170803 18:41:19.549" status="PASS" starttime="20170803 18:41:19.548"></status>
</kw>
<status endtime="20170803 18:41:19.549" status="PASS" starttime="20170803 18:41:19.547"></status>
</kw>
<status endtime="20170803 18:41:19.550" status="PASS" starttime="20170803 18:41:19.547"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170803 18:41:19.550" level="INFO">Delete All Sessions</msg>
<status endtime="20170803 18:41:19.550" status="PASS" starttime="20170803 18:41:19.550"></status>
</kw>
<msg timestamp="20170803 18:41:19.550" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:41:19.550" status="PASS" starttime="20170803 18:41:15.627"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:41:19.551" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:41:19.551" status="PASS" starttime="20170803 18:41:19.550"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170803 18:41:19.551" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170803 18:41:19.551" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170803 18:41:19.552" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20170803 18:41:19.552" status="PASS" starttime="20170803 18:41:19.551"></status>
</kw>
<msg timestamp="20170803 18:41:19.552" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170803 18:41:19.552" status="PASS" starttime="20170803 18:41:15.627"></status>
</kw>
<msg timestamp="20170803 18:41:19.552" level="INFO">${power_state} = Off</msg>
<status endtime="20170803 18:41:19.552" status="PASS" starttime="20170803 18:41:15.626"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170803 18:41:19.553" status="PASS" starttime="20170803 18:41:19.553"></status>
</kw>
<status endtime="20170803 18:41:19.553" status="PASS" starttime="20170803 18:41:15.626"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170803 18:41:19.557" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170803 18:41:19.557" status="PASS" starttime="20170803 18:41:19.557"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170803 18:41:19.558" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170803 18:41:19.558" status="PASS" starttime="20170803 18:41:19.558"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170803 18:41:19.559" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170803 18:41:19.559" status="PASS" starttime="20170803 18:41:19.558"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170803 18:41:19.559" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170803 18:41:19.559" status="PASS" starttime="20170803 18:41:19.559"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170803 18:41:19.940" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170803 18:41:19.940" status="PASS" starttime="20170803 18:41:19.560"></status>
</kw>
<msg timestamp="20170803 18:41:19.940" level="INFO">${status} = PASS</msg>
<msg timestamp="20170803 18:41:19.940" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:41:19.940" status="PASS" starttime="20170803 18:41:19.560"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170803 18:41:19.941" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:41:19.941" status="PASS" starttime="20170803 18:41:19.941"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:41:19.942" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:41:19.942" status="PASS" starttime="20170803 18:41:19.941"></status>
</kw>
<status endtime="20170803 18:41:19.942" status="PASS" starttime="20170803 18:41:19.556"></status>
</kw>
<status endtime="20170803 18:41:19.942" status="PASS" starttime="20170803 18:41:19.555"></status>
</kw>
<status endtime="20170803 18:41:19.942" status="PASS" starttime="20170803 18:41:19.555"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170803 18:41:19.943" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170803 18:41:19.943" status="PASS" starttime="20170803 18:41:19.942"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:41:19.945" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170803 18:41:19.945" status="PASS" starttime="20170803 18:41:19.944"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:41:19.946" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170803 18:41:19.946" status="PASS" starttime="20170803 18:41:19.945"></status>
</kw>
<status endtime="20170803 18:41:19.946" status="PASS" starttime="20170803 18:41:19.945"></status>
</kw>
<status endtime="20170803 18:41:19.946" status="PASS" starttime="20170803 18:41:19.943"></status>
</kw>
<status endtime="20170803 18:41:19.946" status="PASS" starttime="20170803 18:41:19.943"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170803 18:41:20.961" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170803 18:41:20.961" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:41:20.961" status="PASS" starttime="20170803 18:41:19.946"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:41:20.963" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:41:20.963" status="PASS" starttime="20170803 18:41:20.963"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:41:20.964" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:41:20.964" status="PASS" starttime="20170803 18:41:20.964"></status>
</kw>
<status endtime="20170803 18:41:20.965" status="PASS" starttime="20170803 18:41:20.963"></status>
</kw>
<status endtime="20170803 18:41:20.965" status="PASS" starttime="20170803 18:41:20.962"></status>
</kw>
<status endtime="20170803 18:41:20.965" status="PASS" starttime="20170803 18:41:20.961"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170803 18:41:20.965" level="INFO">Delete All Sessions</msg>
<status endtime="20170803 18:41:20.965" status="PASS" starttime="20170803 18:41:20.965"></status>
</kw>
<msg timestamp="20170803 18:41:20.965" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:41:20.965" status="PASS" starttime="20170803 18:41:19.554"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:41:20.966" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:41:20.966" status="PASS" starttime="20170803 18:41:20.966"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170803 18:41:20.967" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170803 18:41:20.967" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170803 18:41:20.967" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Off'}</msg>
<status endtime="20170803 18:41:20.967" status="PASS" starttime="20170803 18:41:20.966"></status>
</kw>
<msg timestamp="20170803 18:41:20.967" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status endtime="20170803 18:41:20.967" status="PASS" starttime="20170803 18:41:19.553"></status>
</kw>
<msg timestamp="20170803 18:41:20.967" level="INFO">${host_state} = Off</msg>
<status endtime="20170803 18:41:20.967" status="PASS" starttime="20170803 18:41:19.553"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170803 18:41:20.968" status="PASS" starttime="20170803 18:41:20.968"></status>
</kw>
<status endtime="20170803 18:41:20.968" status="PASS" starttime="20170803 18:41:15.626"></status>
</kw>
<status endtime="20170803 18:41:20.968" status="PASS" starttime="20170803 18:41:15.625"></status>
</kw>
<status endtime="20170803 18:41:20.968" status="PASS" starttime="20170803 18:41:13.758"></status>
</kw>
<kw library="state_manager" name="Initiate Host Boot">
<doc>Initiate host power on.</doc>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${HOST_POWERON_TRANS}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20170803 18:41:20.969" level="INFO">${args} = {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}</msg>
<status endtime="20170803 18:41:20.969" status="PASS" starttime="20170803 18:41:20.969"></status>
</kw>
<kw library="rest_client" name="Write Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>RequestedHostTransition</arg>
<arg>data=${args}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170803 18:41:20.970" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0/</msg>
<status endtime="20170803 18:41:20.971" status="PASS" starttime="20170803 18:41:20.970"></status>
</kw>
<kw library="rest_client" name="OpenBMC Put Request">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170803 18:41:20.973" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170803 18:41:20.974" status="PASS" starttime="20170803 18:41:20.973"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170803 18:41:20.974" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170803 18:41:20.974" status="PASS" starttime="20170803 18:41:20.974"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170803 18:41:20.975" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170803 18:41:20.975" status="PASS" starttime="20170803 18:41:20.974"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170803 18:41:20.975" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170803 18:41:20.975" status="PASS" starttime="20170803 18:41:20.975"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170803 18:41:21.577" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170803 18:41:21.578" status="PASS" starttime="20170803 18:41:20.976"></status>
</kw>
<msg timestamp="20170803 18:41:21.578" level="INFO">${status} = PASS</msg>
<msg timestamp="20170803 18:41:21.578" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:41:21.578" status="PASS" starttime="20170803 18:41:20.976"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170803 18:41:21.579" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:41:21.579" status="PASS" starttime="20170803 18:41:21.578"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:41:21.579" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:41:21.579" status="PASS" starttime="20170803 18:41:21.579"></status>
</kw>
<status endtime="20170803 18:41:21.580" status="PASS" starttime="20170803 18:41:20.972"></status>
</kw>
<status endtime="20170803 18:41:21.580" status="PASS" starttime="20170803 18:41:20.972"></status>
</kw>
<status endtime="20170803 18:41:21.580" status="PASS" starttime="20170803 18:41:20.971"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170803 18:41:21.580" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/RequestedHostTransition</msg>
<status endtime="20170803 18:41:21.580" status="PASS" starttime="20170803 18:41:21.580"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170803 18:41:21.581" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170803 18:41:21.581" status="PASS" starttime="20170803 18:41:21.581"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20170803 18:41:21.582" status="PASS" starttime="20170803 18:41:21.581"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:41:21.584" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}, u'headers': {u'Content-Ty...</msg>
<status endtime="20170803 18:41:21.584" status="PASS" starttime="20170803 18:41:21.583"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:41:21.585" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20170803 18:41:21.585" status="PASS" starttime="20170803 18:41:21.584"></status>
</kw>
<status endtime="20170803 18:41:21.585" status="PASS" starttime="20170803 18:41:21.584"></status>
</kw>
<status endtime="20170803 18:41:21.585" status="PASS" starttime="20170803 18:41:21.582"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Put Request">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170803 18:41:22.301" level="INFO">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, data={"data": "xyz.openbmc_project.State.Host.Transition.On"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg timestamp="20170803 18:41:22.301" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:41:22.302" status="PASS" starttime="20170803 18:41:21.585"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:41:22.303" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:41:22.303" status="PASS" starttime="20170803 18:41:22.302"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:41:22.304" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:41:22.304" status="PASS" starttime="20170803 18:41:22.304"></status>
</kw>
<status endtime="20170803 18:41:22.304" status="PASS" starttime="20170803 18:41:22.303"></status>
</kw>
<status endtime="20170803 18:41:22.304" status="PASS" starttime="20170803 18:41:22.302"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170803 18:41:22.305" level="INFO">Delete All Sessions</msg>
<status endtime="20170803 18:41:22.305" status="PASS" starttime="20170803 18:41:22.304"></status>
</kw>
<msg timestamp="20170803 18:41:22.305" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:41:22.305" status="PASS" starttime="20170803 18:41:20.971"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:41:22.306" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:41:22.306" status="PASS" starttime="20170803 18:41:22.305"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20170803 18:41:22.306" level="INFO">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170803 18:41:22.306" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170803 18:41:22.306" level="INFO">${json} = {u'message': u'200 OK', u'status': u'ok', u'data': None}</msg>
<status endtime="20170803 18:41:22.306" status="PASS" starttime="20170803 18:41:22.306"></status>
</kw>
<status endtime="20170803 18:41:22.307" status="PASS" starttime="20170803 18:41:20.970"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${wait}' == '${0}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<status endtime="20170803 18:41:22.307" status="PASS" starttime="20170803 18:41:22.307"></status>
</kw>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>10 min</arg>
<arg>10 sec</arg>
<arg>Is Host Running</arg>
</arguments>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170803 18:41:22.314" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170803 18:41:22.315" status="PASS" starttime="20170803 18:41:22.313"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170803 18:41:22.315" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170803 18:41:22.315" status="PASS" starttime="20170803 18:41:22.315"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170803 18:41:22.316" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170803 18:41:22.316" status="PASS" starttime="20170803 18:41:22.315"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170803 18:41:22.316" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170803 18:41:22.317" status="PASS" starttime="20170803 18:41:22.316"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170803 18:41:24.396" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170803 18:41:24.396" status="PASS" starttime="20170803 18:41:22.317"></status>
</kw>
<msg timestamp="20170803 18:41:24.396" level="INFO">${status} = PASS</msg>
<msg timestamp="20170803 18:41:24.397" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:41:24.397" status="PASS" starttime="20170803 18:41:22.317"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170803 18:41:24.397" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:41:24.397" status="PASS" starttime="20170803 18:41:24.397"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:41:24.398" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:41:24.398" status="PASS" starttime="20170803 18:41:24.398"></status>
</kw>
<status endtime="20170803 18:41:24.398" status="PASS" starttime="20170803 18:41:22.313"></status>
</kw>
<status endtime="20170803 18:41:24.398" status="PASS" starttime="20170803 18:41:22.313"></status>
</kw>
<status endtime="20170803 18:41:24.398" status="PASS" starttime="20170803 18:41:22.312"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170803 18:41:24.399" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170803 18:41:24.399" status="PASS" starttime="20170803 18:41:24.399"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:41:24.402" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170803 18:41:24.402" status="PASS" starttime="20170803 18:41:24.401"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:41:24.403" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170803 18:41:24.403" status="PASS" starttime="20170803 18:41:24.402"></status>
</kw>
<status endtime="20170803 18:41:24.403" status="PASS" starttime="20170803 18:41:24.402"></status>
</kw>
<status endtime="20170803 18:41:24.403" status="PASS" starttime="20170803 18:41:24.400"></status>
</kw>
<status endtime="20170803 18:41:24.403" status="PASS" starttime="20170803 18:41:24.399"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170803 18:41:27.119" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170803 18:41:27.119" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:41:27.119" status="PASS" starttime="20170803 18:41:24.403"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:41:27.121" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:41:27.121" status="PASS" starttime="20170803 18:41:27.121"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:41:27.122" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:41:27.122" status="PASS" starttime="20170803 18:41:27.122"></status>
</kw>
<status endtime="20170803 18:41:27.122" status="PASS" starttime="20170803 18:41:27.121"></status>
</kw>
<status endtime="20170803 18:41:27.122" status="PASS" starttime="20170803 18:41:27.120"></status>
</kw>
<status endtime="20170803 18:41:27.123" status="PASS" starttime="20170803 18:41:27.120"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170803 18:41:27.123" level="INFO">Delete All Sessions</msg>
<status endtime="20170803 18:41:27.123" status="PASS" starttime="20170803 18:41:27.123"></status>
</kw>
<msg timestamp="20170803 18:41:27.123" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:41:27.123" status="PASS" starttime="20170803 18:41:22.311"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:41:27.124" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:41:27.124" status="PASS" starttime="20170803 18:41:27.123"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170803 18:41:27.124" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170803 18:41:27.125" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170803 18:41:27.125" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20170803 18:41:27.125" status="PASS" starttime="20170803 18:41:27.124"></status>
</kw>
<msg timestamp="20170803 18:41:27.125" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170803 18:41:27.125" status="PASS" starttime="20170803 18:41:22.311"></status>
</kw>
<msg timestamp="20170803 18:41:27.125" level="INFO">${power_state} = Off</msg>
<status endtime="20170803 18:41:27.125" status="PASS" starttime="20170803 18:41:22.309"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20170803 18:41:27.126" level="FAIL">On != Off</msg>
<status endtime="20170803 18:41:27.126" status="FAIL" starttime="20170803 18:41:27.126"></status>
</kw>
<status endtime="20170803 18:41:27.126" status="FAIL" starttime="20170803 18:41:22.308"></status>
</kw>
<status endtime="20170803 18:41:27.126" status="FAIL" starttime="20170803 18:41:22.308"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170803 18:41:37.132" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170803 18:41:37.132" status="PASS" starttime="20170803 18:41:37.132"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170803 18:41:37.133" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170803 18:41:37.133" status="PASS" starttime="20170803 18:41:37.133"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170803 18:41:37.134" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170803 18:41:37.134" status="PASS" starttime="20170803 18:41:37.133"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170803 18:41:37.134" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170803 18:41:37.134" status="PASS" starttime="20170803 18:41:37.134"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170803 18:41:37.311" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170803 18:41:37.311" status="PASS" starttime="20170803 18:41:37.135"></status>
</kw>
<msg timestamp="20170803 18:41:37.311" level="INFO">${status} = PASS</msg>
<msg timestamp="20170803 18:41:37.311" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:41:37.311" status="PASS" starttime="20170803 18:41:37.135"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170803 18:41:37.312" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:41:37.312" status="PASS" starttime="20170803 18:41:37.312"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:41:37.313" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:41:37.313" status="PASS" starttime="20170803 18:41:37.312"></status>
</kw>
<status endtime="20170803 18:41:37.313" status="PASS" starttime="20170803 18:41:37.131"></status>
</kw>
<status endtime="20170803 18:41:37.313" status="PASS" starttime="20170803 18:41:37.131"></status>
</kw>
<status endtime="20170803 18:41:37.313" status="PASS" starttime="20170803 18:41:37.130"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170803 18:41:37.314" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170803 18:41:37.314" status="PASS" starttime="20170803 18:41:37.313"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:41:37.316" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170803 18:41:37.316" status="PASS" starttime="20170803 18:41:37.315"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:41:37.317" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170803 18:41:37.317" status="PASS" starttime="20170803 18:41:37.317"></status>
</kw>
<status endtime="20170803 18:41:37.317" status="PASS" starttime="20170803 18:41:37.316"></status>
</kw>
<status endtime="20170803 18:41:37.317" status="PASS" starttime="20170803 18:41:37.314"></status>
</kw>
<status endtime="20170803 18:41:37.317" status="PASS" starttime="20170803 18:41:37.314"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170803 18:41:37.427" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170803 18:41:37.428" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:41:37.428" status="PASS" starttime="20170803 18:41:37.318"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:41:37.430" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:41:37.430" status="PASS" starttime="20170803 18:41:37.429"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:41:37.431" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:41:37.431" status="PASS" starttime="20170803 18:41:37.431"></status>
</kw>
<status endtime="20170803 18:41:37.431" status="PASS" starttime="20170803 18:41:37.430"></status>
</kw>
<status endtime="20170803 18:41:37.431" status="PASS" starttime="20170803 18:41:37.429"></status>
</kw>
<status endtime="20170803 18:41:37.431" status="PASS" starttime="20170803 18:41:37.428"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170803 18:41:37.432" level="INFO">Delete All Sessions</msg>
<status endtime="20170803 18:41:37.432" status="PASS" starttime="20170803 18:41:37.432"></status>
</kw>
<msg timestamp="20170803 18:41:37.432" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:41:37.432" status="PASS" starttime="20170803 18:41:37.129"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:41:37.433" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:41:37.433" status="PASS" starttime="20170803 18:41:37.432"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170803 18:41:37.433" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170803 18:41:37.433" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170803 18:41:37.433" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20170803 18:41:37.433" status="PASS" starttime="20170803 18:41:37.433"></status>
</kw>
<msg timestamp="20170803 18:41:37.434" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170803 18:41:37.434" status="PASS" starttime="20170803 18:41:37.129"></status>
</kw>
<msg timestamp="20170803 18:41:37.434" level="INFO">${power_state} = Off</msg>
<status endtime="20170803 18:41:37.434" status="PASS" starttime="20170803 18:41:37.128"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20170803 18:41:37.435" level="FAIL">On != Off</msg>
<status endtime="20170803 18:41:37.435" status="FAIL" starttime="20170803 18:41:37.434"></status>
</kw>
<status endtime="20170803 18:41:37.435" status="FAIL" starttime="20170803 18:41:37.128"></status>
</kw>
<status endtime="20170803 18:41:37.435" status="FAIL" starttime="20170803 18:41:37.127"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170803 18:41:47.441" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170803 18:41:47.441" status="PASS" starttime="20170803 18:41:47.440"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170803 18:41:47.441" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170803 18:41:47.442" status="PASS" starttime="20170803 18:41:47.441"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170803 18:41:47.442" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170803 18:41:47.442" status="PASS" starttime="20170803 18:41:47.442"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170803 18:41:47.443" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170803 18:41:47.443" status="PASS" starttime="20170803 18:41:47.442"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170803 18:41:47.620" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170803 18:41:47.620" status="PASS" starttime="20170803 18:41:47.444"></status>
</kw>
<msg timestamp="20170803 18:41:47.621" level="INFO">${status} = PASS</msg>
<msg timestamp="20170803 18:41:47.621" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:41:47.621" status="PASS" starttime="20170803 18:41:47.444"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170803 18:41:47.621" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:41:47.621" status="PASS" starttime="20170803 18:41:47.621"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:41:47.622" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:41:47.622" status="PASS" starttime="20170803 18:41:47.622"></status>
</kw>
<status endtime="20170803 18:41:47.622" status="PASS" starttime="20170803 18:41:47.440"></status>
</kw>
<status endtime="20170803 18:41:47.622" status="PASS" starttime="20170803 18:41:47.439"></status>
</kw>
<status endtime="20170803 18:41:47.623" status="PASS" starttime="20170803 18:41:47.438"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170803 18:41:47.623" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170803 18:41:47.623" status="PASS" starttime="20170803 18:41:47.623"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:41:47.626" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170803 18:41:47.626" status="PASS" starttime="20170803 18:41:47.625"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:41:47.628" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170803 18:41:47.628" status="PASS" starttime="20170803 18:41:47.628"></status>
</kw>
<status endtime="20170803 18:41:47.628" status="PASS" starttime="20170803 18:41:47.626"></status>
</kw>
<status endtime="20170803 18:41:47.628" status="PASS" starttime="20170803 18:41:47.624"></status>
</kw>
<status endtime="20170803 18:41:47.628" status="PASS" starttime="20170803 18:41:47.623"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170803 18:41:47.691" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170803 18:41:47.692" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:41:47.692" status="PASS" starttime="20170803 18:41:47.629"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:41:47.694" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:41:47.694" status="PASS" starttime="20170803 18:41:47.693"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:41:47.695" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:41:47.695" status="PASS" starttime="20170803 18:41:47.694"></status>
</kw>
<status endtime="20170803 18:41:47.695" status="PASS" starttime="20170803 18:41:47.694"></status>
</kw>
<status endtime="20170803 18:41:47.695" status="PASS" starttime="20170803 18:41:47.693"></status>
</kw>
<status endtime="20170803 18:41:47.695" status="PASS" starttime="20170803 18:41:47.692"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170803 18:41:47.695" level="INFO">Delete All Sessions</msg>
<status endtime="20170803 18:41:47.696" status="PASS" starttime="20170803 18:41:47.695"></status>
</kw>
<msg timestamp="20170803 18:41:47.696" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:41:47.696" status="PASS" starttime="20170803 18:41:47.438"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:41:47.696" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:41:47.696" status="PASS" starttime="20170803 18:41:47.696"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170803 18:41:47.697" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170803 18:41:47.697" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170803 18:41:47.697" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170803 18:41:47.697" status="PASS" starttime="20170803 18:41:47.697"></status>
</kw>
<msg timestamp="20170803 18:41:47.697" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170803 18:41:47.697" status="PASS" starttime="20170803 18:41:47.437"></status>
</kw>
<msg timestamp="20170803 18:41:47.698" level="INFO">${power_state} = On</msg>
<status endtime="20170803 18:41:47.698" status="PASS" starttime="20170803 18:41:47.437"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170803 18:41:47.698" status="PASS" starttime="20170803 18:41:47.698"></status>
</kw>
<status endtime="20170803 18:41:47.698" status="PASS" starttime="20170803 18:41:47.436"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170803 18:41:47.703" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170803 18:41:47.703" status="PASS" starttime="20170803 18:41:47.703"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170803 18:41:47.704" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170803 18:41:47.704" status="PASS" starttime="20170803 18:41:47.704"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170803 18:41:47.705" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170803 18:41:47.705" status="PASS" starttime="20170803 18:41:47.704"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170803 18:41:47.705" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170803 18:41:47.705" status="PASS" starttime="20170803 18:41:47.705"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170803 18:41:47.907" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170803 18:41:47.907" status="PASS" starttime="20170803 18:41:47.706"></status>
</kw>
<msg timestamp="20170803 18:41:47.907" level="INFO">${status} = PASS</msg>
<msg timestamp="20170803 18:41:47.907" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:41:47.907" status="PASS" starttime="20170803 18:41:47.706"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170803 18:41:47.908" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:41:47.908" status="PASS" starttime="20170803 18:41:47.907"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:41:47.908" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:41:47.909" status="PASS" starttime="20170803 18:41:47.908"></status>
</kw>
<status endtime="20170803 18:41:47.909" status="PASS" starttime="20170803 18:41:47.702"></status>
</kw>
<status endtime="20170803 18:41:47.909" status="PASS" starttime="20170803 18:41:47.701"></status>
</kw>
<status endtime="20170803 18:41:47.909" status="PASS" starttime="20170803 18:41:47.701"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170803 18:41:47.909" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170803 18:41:47.909" status="PASS" starttime="20170803 18:41:47.909"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:41:47.912" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170803 18:41:47.912" status="PASS" starttime="20170803 18:41:47.911"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:41:47.913" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170803 18:41:47.913" status="PASS" starttime="20170803 18:41:47.912"></status>
</kw>
<status endtime="20170803 18:41:47.913" status="PASS" starttime="20170803 18:41:47.912"></status>
</kw>
<status endtime="20170803 18:41:47.913" status="PASS" starttime="20170803 18:41:47.910"></status>
</kw>
<status endtime="20170803 18:41:47.913" status="PASS" starttime="20170803 18:41:47.910"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170803 18:41:48.001" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170803 18:41:48.001" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:41:48.001" status="PASS" starttime="20170803 18:41:47.913"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:41:48.004" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:41:48.004" status="PASS" starttime="20170803 18:41:48.003"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:41:48.005" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:41:48.005" status="PASS" starttime="20170803 18:41:48.004"></status>
</kw>
<status endtime="20170803 18:41:48.005" status="PASS" starttime="20170803 18:41:48.004"></status>
</kw>
<status endtime="20170803 18:41:48.005" status="PASS" starttime="20170803 18:41:48.002"></status>
</kw>
<status endtime="20170803 18:41:48.005" status="PASS" starttime="20170803 18:41:48.002"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170803 18:41:48.005" level="INFO">Delete All Sessions</msg>
<status endtime="20170803 18:41:48.005" status="PASS" starttime="20170803 18:41:48.005"></status>
</kw>
<msg timestamp="20170803 18:41:48.006" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:41:48.006" status="PASS" starttime="20170803 18:41:47.700"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:41:48.006" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:41:48.006" status="PASS" starttime="20170803 18:41:48.006"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170803 18:41:48.007" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170803 18:41:48.007" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170803 18:41:48.007" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170803 18:41:48.007" status="PASS" starttime="20170803 18:41:48.007"></status>
</kw>
<msg timestamp="20170803 18:41:48.007" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170803 18:41:48.007" status="PASS" starttime="20170803 18:41:47.699"></status>
</kw>
<msg timestamp="20170803 18:41:48.008" level="INFO">${host_state} = Running</msg>
<status endtime="20170803 18:41:48.008" status="PASS" starttime="20170803 18:41:47.699"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170803 18:41:48.008" status="PASS" starttime="20170803 18:41:48.008"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170803 18:41:48.012" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170803 18:41:48.013" status="PASS" starttime="20170803 18:41:48.012"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170803 18:41:48.013" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170803 18:41:48.013" status="PASS" starttime="20170803 18:41:48.013"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170803 18:41:48.014" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170803 18:41:48.014" status="PASS" starttime="20170803 18:41:48.013"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170803 18:41:48.014" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170803 18:41:48.015" status="PASS" starttime="20170803 18:41:48.014"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170803 18:41:48.290" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170803 18:41:48.290" status="PASS" starttime="20170803 18:41:48.015"></status>
</kw>
<msg timestamp="20170803 18:41:48.290" level="INFO">${status} = PASS</msg>
<msg timestamp="20170803 18:41:48.290" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:41:48.290" status="PASS" starttime="20170803 18:41:48.015"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170803 18:41:48.291" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:41:48.291" status="PASS" starttime="20170803 18:41:48.290"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:41:48.291" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:41:48.292" status="PASS" starttime="20170803 18:41:48.291"></status>
</kw>
<status endtime="20170803 18:41:48.292" status="PASS" starttime="20170803 18:41:48.011"></status>
</kw>
<status endtime="20170803 18:41:48.292" status="PASS" starttime="20170803 18:41:48.011"></status>
</kw>
<status endtime="20170803 18:41:48.292" status="PASS" starttime="20170803 18:41:48.010"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170803 18:41:48.292" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170803 18:41:48.292" status="PASS" starttime="20170803 18:41:48.292"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:41:48.294" level="INFO">${msg} = URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170803 18:41:48.295" status="PASS" starttime="20170803 18:41:48.294"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:41:48.295" level="INFO">URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170803 18:41:48.296" status="PASS" starttime="20170803 18:41:48.295"></status>
</kw>
<status endtime="20170803 18:41:48.296" status="PASS" starttime="20170803 18:41:48.295"></status>
</kw>
<status endtime="20170803 18:41:48.296" status="PASS" starttime="20170803 18:41:48.293"></status>
</kw>
<status endtime="20170803 18:41:48.296" status="PASS" starttime="20170803 18:41:48.293"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170803 18:41:48.379" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170803 18:41:48.379" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:41:48.379" status="PASS" starttime="20170803 18:41:48.296"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:41:48.381" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:41:48.381" status="PASS" starttime="20170803 18:41:48.380"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:41:48.382" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:41:48.382" status="PASS" starttime="20170803 18:41:48.381"></status>
</kw>
<status endtime="20170803 18:41:48.382" status="PASS" starttime="20170803 18:41:48.381"></status>
</kw>
<status endtime="20170803 18:41:48.382" status="PASS" starttime="20170803 18:41:48.380"></status>
</kw>
<status endtime="20170803 18:41:48.382" status="PASS" starttime="20170803 18:41:48.379"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170803 18:41:48.382" level="INFO">Delete All Sessions</msg>
<status endtime="20170803 18:41:48.383" status="PASS" starttime="20170803 18:41:48.382"></status>
</kw>
<msg timestamp="20170803 18:41:48.383" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:41:48.383" status="PASS" starttime="20170803 18:41:48.010"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:41:48.383" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:41:48.383" status="PASS" starttime="20170803 18:41:48.383"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170803 18:41:48.384" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170803 18:41:48.384" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170803 18:41:48.384" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'Off'}</msg>
<status endtime="20170803 18:41:48.384" status="PASS" starttime="20170803 18:41:48.384"></status>
</kw>
<msg timestamp="20170803 18:41:48.384" level="INFO">${state} = Off</msg>
<status endtime="20170803 18:41:48.384" status="PASS" starttime="20170803 18:41:48.009"></status>
</kw>
<msg timestamp="20170803 18:41:48.385" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170803 18:41:48.385" status="PASS" starttime="20170803 18:41:48.009"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170803 18:41:48.385" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170803 18:41:48.385" status="FAIL" starttime="20170803 18:41:48.385"></status>
</kw>
<status endtime="20170803 18:41:48.386" status="FAIL" starttime="20170803 18:41:48.009"></status>
</kw>
<status endtime="20170803 18:41:48.386" status="FAIL" starttime="20170803 18:41:47.436"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170803 18:41:58.391" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170803 18:41:58.392" status="PASS" starttime="20170803 18:41:58.391"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170803 18:41:58.392" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170803 18:41:58.392" status="PASS" starttime="20170803 18:41:58.392"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170803 18:41:58.393" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170803 18:41:58.393" status="PASS" starttime="20170803 18:41:58.393"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170803 18:41:58.394" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170803 18:41:58.394" status="PASS" starttime="20170803 18:41:58.393"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170803 18:41:58.666" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170803 18:41:58.666" status="PASS" starttime="20170803 18:41:58.394"></status>
</kw>
<msg timestamp="20170803 18:41:58.666" level="INFO">${status} = PASS</msg>
<msg timestamp="20170803 18:41:58.666" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:41:58.666" status="PASS" starttime="20170803 18:41:58.394"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170803 18:41:58.667" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:41:58.667" status="PASS" starttime="20170803 18:41:58.666"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:41:58.667" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:41:58.668" status="PASS" starttime="20170803 18:41:58.667"></status>
</kw>
<status endtime="20170803 18:41:58.668" status="PASS" starttime="20170803 18:41:58.390"></status>
</kw>
<status endtime="20170803 18:41:58.668" status="PASS" starttime="20170803 18:41:58.390"></status>
</kw>
<status endtime="20170803 18:41:58.668" status="PASS" starttime="20170803 18:41:58.389"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170803 18:41:58.668" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170803 18:41:58.669" status="PASS" starttime="20170803 18:41:58.668"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:41:58.671" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170803 18:41:58.671" status="PASS" starttime="20170803 18:41:58.670"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:41:58.672" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170803 18:41:58.672" status="PASS" starttime="20170803 18:41:58.671"></status>
</kw>
<status endtime="20170803 18:41:58.672" status="PASS" starttime="20170803 18:41:58.671"></status>
</kw>
<status endtime="20170803 18:41:58.672" status="PASS" starttime="20170803 18:41:58.669"></status>
</kw>
<status endtime="20170803 18:41:58.672" status="PASS" starttime="20170803 18:41:58.669"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170803 18:41:58.734" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170803 18:41:58.734" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:41:58.734" status="PASS" starttime="20170803 18:41:58.672"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:41:58.736" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:41:58.736" status="PASS" starttime="20170803 18:41:58.735"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:41:58.737" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:41:58.737" status="PASS" starttime="20170803 18:41:58.736"></status>
</kw>
<status endtime="20170803 18:41:58.737" status="PASS" starttime="20170803 18:41:58.736"></status>
</kw>
<status endtime="20170803 18:41:58.737" status="PASS" starttime="20170803 18:41:58.735"></status>
</kw>
<status endtime="20170803 18:41:58.737" status="PASS" starttime="20170803 18:41:58.734"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170803 18:41:58.738" level="INFO">Delete All Sessions</msg>
<status endtime="20170803 18:41:58.738" status="PASS" starttime="20170803 18:41:58.738"></status>
</kw>
<msg timestamp="20170803 18:41:58.738" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:41:58.738" status="PASS" starttime="20170803 18:41:58.388"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:41:58.739" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:41:58.739" status="PASS" starttime="20170803 18:41:58.738"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170803 18:41:58.739" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170803 18:41:58.739" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170803 18:41:58.739" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170803 18:41:58.739" status="PASS" starttime="20170803 18:41:58.739"></status>
</kw>
<msg timestamp="20170803 18:41:58.740" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170803 18:41:58.740" status="PASS" starttime="20170803 18:41:58.388"></status>
</kw>
<msg timestamp="20170803 18:41:58.740" level="INFO">${power_state} = On</msg>
<status endtime="20170803 18:41:58.740" status="PASS" starttime="20170803 18:41:58.387"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170803 18:41:58.741" status="PASS" starttime="20170803 18:41:58.740"></status>
</kw>
<status endtime="20170803 18:41:58.741" status="PASS" starttime="20170803 18:41:58.387"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170803 18:41:58.745" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170803 18:41:58.745" status="PASS" starttime="20170803 18:41:58.744"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170803 18:41:58.746" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170803 18:41:58.746" status="PASS" starttime="20170803 18:41:58.746"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170803 18:41:58.747" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170803 18:41:58.747" status="PASS" starttime="20170803 18:41:58.747"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170803 18:41:58.748" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170803 18:41:58.748" status="PASS" starttime="20170803 18:41:58.748"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170803 18:41:58.936" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170803 18:41:58.936" status="PASS" starttime="20170803 18:41:58.749"></status>
</kw>
<msg timestamp="20170803 18:41:58.936" level="INFO">${status} = PASS</msg>
<msg timestamp="20170803 18:41:58.937" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:41:58.937" status="PASS" starttime="20170803 18:41:58.749"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170803 18:41:58.937" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:41:58.937" status="PASS" starttime="20170803 18:41:58.937"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:41:58.938" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:41:58.938" status="PASS" starttime="20170803 18:41:58.938"></status>
</kw>
<status endtime="20170803 18:41:58.938" status="PASS" starttime="20170803 18:41:58.743"></status>
</kw>
<status endtime="20170803 18:41:58.938" status="PASS" starttime="20170803 18:41:58.743"></status>
</kw>
<status endtime="20170803 18:41:58.938" status="PASS" starttime="20170803 18:41:58.742"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170803 18:41:58.939" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170803 18:41:58.939" status="PASS" starttime="20170803 18:41:58.939"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:41:58.941" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170803 18:41:58.941" status="PASS" starttime="20170803 18:41:58.940"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:41:58.942" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170803 18:41:58.942" status="PASS" starttime="20170803 18:41:58.942"></status>
</kw>
<status endtime="20170803 18:41:58.943" status="PASS" starttime="20170803 18:41:58.942"></status>
</kw>
<status endtime="20170803 18:41:58.943" status="PASS" starttime="20170803 18:41:58.940"></status>
</kw>
<status endtime="20170803 18:41:58.943" status="PASS" starttime="20170803 18:41:58.939"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170803 18:41:59.031" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170803 18:41:59.031" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:41:59.032" status="PASS" starttime="20170803 18:41:58.943"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:41:59.033" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:41:59.033" status="PASS" starttime="20170803 18:41:59.033"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:41:59.034" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:41:59.034" status="PASS" starttime="20170803 18:41:59.034"></status>
</kw>
<status endtime="20170803 18:41:59.034" status="PASS" starttime="20170803 18:41:59.033"></status>
</kw>
<status endtime="20170803 18:41:59.035" status="PASS" starttime="20170803 18:41:59.032"></status>
</kw>
<status endtime="20170803 18:41:59.035" status="PASS" starttime="20170803 18:41:59.032"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170803 18:41:59.035" level="INFO">Delete All Sessions</msg>
<status endtime="20170803 18:41:59.035" status="PASS" starttime="20170803 18:41:59.035"></status>
</kw>
<msg timestamp="20170803 18:41:59.035" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:41:59.035" status="PASS" starttime="20170803 18:41:58.742"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:41:59.036" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:41:59.036" status="PASS" starttime="20170803 18:41:59.036"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170803 18:41:59.036" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170803 18:41:59.037" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170803 18:41:59.037" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170803 18:41:59.037" status="PASS" starttime="20170803 18:41:59.036"></status>
</kw>
<msg timestamp="20170803 18:41:59.037" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170803 18:41:59.037" status="PASS" starttime="20170803 18:41:58.741"></status>
</kw>
<msg timestamp="20170803 18:41:59.038" level="INFO">${host_state} = Running</msg>
<status endtime="20170803 18:41:59.038" status="PASS" starttime="20170803 18:41:58.741"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170803 18:41:59.038" status="PASS" starttime="20170803 18:41:59.038"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170803 18:41:59.042" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170803 18:41:59.042" status="PASS" starttime="20170803 18:41:59.042"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170803 18:41:59.043" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170803 18:41:59.043" status="PASS" starttime="20170803 18:41:59.043"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170803 18:41:59.044" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170803 18:41:59.044" status="PASS" starttime="20170803 18:41:59.043"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170803 18:41:59.044" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170803 18:41:59.044" status="PASS" starttime="20170803 18:41:59.044"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170803 18:41:59.254" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170803 18:41:59.254" status="PASS" starttime="20170803 18:41:59.045"></status>
</kw>
<msg timestamp="20170803 18:41:59.254" level="INFO">${status} = PASS</msg>
<msg timestamp="20170803 18:41:59.255" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:41:59.255" status="PASS" starttime="20170803 18:41:59.044"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170803 18:41:59.255" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:41:59.255" status="PASS" starttime="20170803 18:41:59.255"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:41:59.256" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:41:59.256" status="PASS" starttime="20170803 18:41:59.256"></status>
</kw>
<status endtime="20170803 18:41:59.256" status="PASS" starttime="20170803 18:41:59.041"></status>
</kw>
<status endtime="20170803 18:41:59.256" status="PASS" starttime="20170803 18:41:59.041"></status>
</kw>
<status endtime="20170803 18:41:59.256" status="PASS" starttime="20170803 18:41:59.040"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170803 18:41:59.257" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170803 18:41:59.257" status="PASS" starttime="20170803 18:41:59.257"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:41:59.259" level="INFO">${msg} = URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170803 18:41:59.259" status="PASS" starttime="20170803 18:41:59.258"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:41:59.260" level="INFO">URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170803 18:41:59.260" status="PASS" starttime="20170803 18:41:59.260"></status>
</kw>
<status endtime="20170803 18:41:59.260" status="PASS" starttime="20170803 18:41:59.259"></status>
</kw>
<status endtime="20170803 18:41:59.260" status="PASS" starttime="20170803 18:41:59.258"></status>
</kw>
<status endtime="20170803 18:41:59.261" status="PASS" starttime="20170803 18:41:59.257"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170803 18:41:59.327" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170803 18:41:59.327" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:41:59.327" status="PASS" starttime="20170803 18:41:59.261"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:41:59.329" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:41:59.329" status="PASS" starttime="20170803 18:41:59.329"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:41:59.330" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:41:59.330" status="PASS" starttime="20170803 18:41:59.330"></status>
</kw>
<status endtime="20170803 18:41:59.330" status="PASS" starttime="20170803 18:41:59.329"></status>
</kw>
<status endtime="20170803 18:41:59.330" status="PASS" starttime="20170803 18:41:59.328"></status>
</kw>
<status endtime="20170803 18:41:59.330" status="PASS" starttime="20170803 18:41:59.328"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170803 18:41:59.331" level="INFO">Delete All Sessions</msg>
<status endtime="20170803 18:41:59.331" status="PASS" starttime="20170803 18:41:59.331"></status>
</kw>
<msg timestamp="20170803 18:41:59.331" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:41:59.331" status="PASS" starttime="20170803 18:41:59.040"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:41:59.332" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:41:59.332" status="PASS" starttime="20170803 18:41:59.331"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170803 18:41:59.332" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170803 18:41:59.332" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170803 18:41:59.332" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'Off'}</msg>
<status endtime="20170803 18:41:59.332" status="PASS" starttime="20170803 18:41:59.332"></status>
</kw>
<msg timestamp="20170803 18:41:59.333" level="INFO">${state} = Off</msg>
<status endtime="20170803 18:41:59.333" status="PASS" starttime="20170803 18:41:59.039"></status>
</kw>
<msg timestamp="20170803 18:41:59.333" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170803 18:41:59.333" status="PASS" starttime="20170803 18:41:59.039"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170803 18:41:59.334" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170803 18:41:59.334" status="FAIL" starttime="20170803 18:41:59.333"></status>
</kw>
<status endtime="20170803 18:41:59.334" status="FAIL" starttime="20170803 18:41:59.038"></status>
</kw>
<status endtime="20170803 18:41:59.334" status="FAIL" starttime="20170803 18:41:58.386"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170803 18:42:09.340" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170803 18:42:09.340" status="PASS" starttime="20170803 18:42:09.339"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170803 18:42:09.341" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170803 18:42:09.341" status="PASS" starttime="20170803 18:42:09.341"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170803 18:42:09.341" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170803 18:42:09.342" status="PASS" starttime="20170803 18:42:09.341"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170803 18:42:09.342" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170803 18:42:09.342" status="PASS" starttime="20170803 18:42:09.342"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170803 18:42:09.541" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170803 18:42:09.541" status="PASS" starttime="20170803 18:42:09.343"></status>
</kw>
<msg timestamp="20170803 18:42:09.541" level="INFO">${status} = PASS</msg>
<msg timestamp="20170803 18:42:09.542" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:42:09.542" status="PASS" starttime="20170803 18:42:09.343"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170803 18:42:09.542" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:42:09.542" status="PASS" starttime="20170803 18:42:09.542"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:42:09.543" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:42:09.543" status="PASS" starttime="20170803 18:42:09.543"></status>
</kw>
<status endtime="20170803 18:42:09.543" status="PASS" starttime="20170803 18:42:09.339"></status>
</kw>
<status endtime="20170803 18:42:09.543" status="PASS" starttime="20170803 18:42:09.338"></status>
</kw>
<status endtime="20170803 18:42:09.543" status="PASS" starttime="20170803 18:42:09.337"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170803 18:42:09.544" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170803 18:42:09.544" status="PASS" starttime="20170803 18:42:09.544"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:42:09.546" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170803 18:42:09.546" status="PASS" starttime="20170803 18:42:09.545"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:42:09.547" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170803 18:42:09.547" status="PASS" starttime="20170803 18:42:09.547"></status>
</kw>
<status endtime="20170803 18:42:09.547" status="PASS" starttime="20170803 18:42:09.546"></status>
</kw>
<status endtime="20170803 18:42:09.547" status="PASS" starttime="20170803 18:42:09.545"></status>
</kw>
<status endtime="20170803 18:42:09.548" status="PASS" starttime="20170803 18:42:09.544"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170803 18:42:09.617" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170803 18:42:09.617" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:42:09.617" status="PASS" starttime="20170803 18:42:09.548"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:42:09.619" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:42:09.619" status="PASS" starttime="20170803 18:42:09.618"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:42:09.620" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:42:09.620" status="PASS" starttime="20170803 18:42:09.620"></status>
</kw>
<status endtime="20170803 18:42:09.620" status="PASS" starttime="20170803 18:42:09.619"></status>
</kw>
<status endtime="20170803 18:42:09.621" status="PASS" starttime="20170803 18:42:09.618"></status>
</kw>
<status endtime="20170803 18:42:09.621" status="PASS" starttime="20170803 18:42:09.617"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170803 18:42:09.621" level="INFO">Delete All Sessions</msg>
<status endtime="20170803 18:42:09.621" status="PASS" starttime="20170803 18:42:09.621"></status>
</kw>
<msg timestamp="20170803 18:42:09.621" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:42:09.621" status="PASS" starttime="20170803 18:42:09.337"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:42:09.622" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:42:09.622" status="PASS" starttime="20170803 18:42:09.622"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170803 18:42:09.623" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170803 18:42:09.623" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170803 18:42:09.623" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170803 18:42:09.623" status="PASS" starttime="20170803 18:42:09.622"></status>
</kw>
<msg timestamp="20170803 18:42:09.623" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170803 18:42:09.623" status="PASS" starttime="20170803 18:42:09.336"></status>
</kw>
<msg timestamp="20170803 18:42:09.623" level="INFO">${power_state} = On</msg>
<status endtime="20170803 18:42:09.623" status="PASS" starttime="20170803 18:42:09.336"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170803 18:42:09.624" status="PASS" starttime="20170803 18:42:09.624"></status>
</kw>
<status endtime="20170803 18:42:09.624" status="PASS" starttime="20170803 18:42:09.335"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170803 18:42:09.628" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170803 18:42:09.628" status="PASS" starttime="20170803 18:42:09.627"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170803 18:42:09.629" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170803 18:42:09.629" status="PASS" starttime="20170803 18:42:09.628"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170803 18:42:09.629" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170803 18:42:09.629" status="PASS" starttime="20170803 18:42:09.629"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170803 18:42:09.630" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170803 18:42:09.630" status="PASS" starttime="20170803 18:42:09.629"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170803 18:42:09.807" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170803 18:42:09.807" status="PASS" starttime="20170803 18:42:09.630"></status>
</kw>
<msg timestamp="20170803 18:42:09.807" level="INFO">${status} = PASS</msg>
<msg timestamp="20170803 18:42:09.807" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:42:09.807" status="PASS" starttime="20170803 18:42:09.630"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170803 18:42:09.808" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:42:09.808" status="PASS" starttime="20170803 18:42:09.807"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:42:09.808" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:42:09.809" status="PASS" starttime="20170803 18:42:09.808"></status>
</kw>
<status endtime="20170803 18:42:09.809" status="PASS" starttime="20170803 18:42:09.627"></status>
</kw>
<status endtime="20170803 18:42:09.809" status="PASS" starttime="20170803 18:42:09.626"></status>
</kw>
<status endtime="20170803 18:42:09.809" status="PASS" starttime="20170803 18:42:09.626"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170803 18:42:09.809" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170803 18:42:09.809" status="PASS" starttime="20170803 18:42:09.809"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:42:09.812" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170803 18:42:09.812" status="PASS" starttime="20170803 18:42:09.811"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:42:09.813" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170803 18:42:09.813" status="PASS" starttime="20170803 18:42:09.813"></status>
</kw>
<status endtime="20170803 18:42:09.813" status="PASS" starttime="20170803 18:42:09.812"></status>
</kw>
<status endtime="20170803 18:42:09.813" status="PASS" starttime="20170803 18:42:09.810"></status>
</kw>
<status endtime="20170803 18:42:09.813" status="PASS" starttime="20170803 18:42:09.810"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170803 18:42:09.902" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170803 18:42:09.903" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:42:09.903" status="PASS" starttime="20170803 18:42:09.814"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:42:09.905" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:42:09.905" status="PASS" starttime="20170803 18:42:09.904"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:42:09.905" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:42:09.906" status="PASS" starttime="20170803 18:42:09.905"></status>
</kw>
<status endtime="20170803 18:42:09.906" status="PASS" starttime="20170803 18:42:09.905"></status>
</kw>
<status endtime="20170803 18:42:09.906" status="PASS" starttime="20170803 18:42:09.903"></status>
</kw>
<status endtime="20170803 18:42:09.906" status="PASS" starttime="20170803 18:42:09.903"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170803 18:42:09.906" level="INFO">Delete All Sessions</msg>
<status endtime="20170803 18:42:09.906" status="PASS" starttime="20170803 18:42:09.906"></status>
</kw>
<msg timestamp="20170803 18:42:09.907" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:42:09.907" status="PASS" starttime="20170803 18:42:09.625"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:42:09.907" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:42:09.907" status="PASS" starttime="20170803 18:42:09.907"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170803 18:42:09.908" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170803 18:42:09.908" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170803 18:42:09.908" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170803 18:42:09.908" status="PASS" starttime="20170803 18:42:09.907"></status>
</kw>
<msg timestamp="20170803 18:42:09.908" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170803 18:42:09.908" status="PASS" starttime="20170803 18:42:09.625"></status>
</kw>
<msg timestamp="20170803 18:42:09.909" level="INFO">${host_state} = Running</msg>
<status endtime="20170803 18:42:09.909" status="PASS" starttime="20170803 18:42:09.624"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170803 18:42:09.909" status="PASS" starttime="20170803 18:42:09.909"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170803 18:42:09.913" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170803 18:42:09.913" status="PASS" starttime="20170803 18:42:09.913"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170803 18:42:09.914" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170803 18:42:09.914" status="PASS" starttime="20170803 18:42:09.914"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170803 18:42:09.915" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170803 18:42:09.915" status="PASS" starttime="20170803 18:42:09.914"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170803 18:42:09.915" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170803 18:42:09.915" status="PASS" starttime="20170803 18:42:09.915"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170803 18:42:10.122" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170803 18:42:10.122" status="PASS" starttime="20170803 18:42:09.916"></status>
</kw>
<msg timestamp="20170803 18:42:10.123" level="INFO">${status} = PASS</msg>
<msg timestamp="20170803 18:42:10.123" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:42:10.123" status="PASS" starttime="20170803 18:42:09.916"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170803 18:42:10.123" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:42:10.124" status="PASS" starttime="20170803 18:42:10.123"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:42:10.124" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:42:10.124" status="PASS" starttime="20170803 18:42:10.124"></status>
</kw>
<status endtime="20170803 18:42:10.124" status="PASS" starttime="20170803 18:42:09.912"></status>
</kw>
<status endtime="20170803 18:42:10.124" status="PASS" starttime="20170803 18:42:09.912"></status>
</kw>
<status endtime="20170803 18:42:10.125" status="PASS" starttime="20170803 18:42:09.911"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170803 18:42:10.125" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170803 18:42:10.125" status="PASS" starttime="20170803 18:42:10.125"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:42:10.127" level="INFO">${msg} = URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170803 18:42:10.127" status="PASS" starttime="20170803 18:42:10.127"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:42:10.128" level="INFO">URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170803 18:42:10.128" status="PASS" starttime="20170803 18:42:10.128"></status>
</kw>
<status endtime="20170803 18:42:10.128" status="PASS" starttime="20170803 18:42:10.127"></status>
</kw>
<status endtime="20170803 18:42:10.128" status="PASS" starttime="20170803 18:42:10.126"></status>
</kw>
<status endtime="20170803 18:42:10.129" status="PASS" starttime="20170803 18:42:10.125"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170803 18:42:10.203" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170803 18:42:10.203" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:42:10.203" status="PASS" starttime="20170803 18:42:10.129"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:42:10.205" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:42:10.205" status="PASS" starttime="20170803 18:42:10.204"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:42:10.206" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:42:10.206" status="PASS" starttime="20170803 18:42:10.206"></status>
</kw>
<status endtime="20170803 18:42:10.206" status="PASS" starttime="20170803 18:42:10.205"></status>
</kw>
<status endtime="20170803 18:42:10.206" status="PASS" starttime="20170803 18:42:10.204"></status>
</kw>
<status endtime="20170803 18:42:10.206" status="PASS" starttime="20170803 18:42:10.203"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170803 18:42:10.207" level="INFO">Delete All Sessions</msg>
<status endtime="20170803 18:42:10.207" status="PASS" starttime="20170803 18:42:10.206"></status>
</kw>
<msg timestamp="20170803 18:42:10.207" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:42:10.207" status="PASS" starttime="20170803 18:42:09.910"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:42:10.208" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:42:10.208" status="PASS" starttime="20170803 18:42:10.207"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170803 18:42:10.208" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170803 18:42:10.208" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170803 18:42:10.208" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'Off'}</msg>
<status endtime="20170803 18:42:10.208" status="PASS" starttime="20170803 18:42:10.208"></status>
</kw>
<msg timestamp="20170803 18:42:10.209" level="INFO">${state} = Off</msg>
<status endtime="20170803 18:42:10.209" status="PASS" starttime="20170803 18:42:09.910"></status>
</kw>
<msg timestamp="20170803 18:42:10.209" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170803 18:42:10.209" status="PASS" starttime="20170803 18:42:09.910"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170803 18:42:10.210" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170803 18:42:10.210" status="FAIL" starttime="20170803 18:42:10.209"></status>
</kw>
<status endtime="20170803 18:42:10.210" status="FAIL" starttime="20170803 18:42:09.909"></status>
</kw>
<status endtime="20170803 18:42:10.210" status="FAIL" starttime="20170803 18:42:09.335"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170803 18:42:20.216" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170803 18:42:20.216" status="PASS" starttime="20170803 18:42:20.216"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170803 18:42:20.217" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170803 18:42:20.217" status="PASS" starttime="20170803 18:42:20.217"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170803 18:42:20.218" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170803 18:42:20.218" status="PASS" starttime="20170803 18:42:20.217"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170803 18:42:20.218" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170803 18:42:20.218" status="PASS" starttime="20170803 18:42:20.218"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170803 18:42:20.559" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170803 18:42:20.559" status="PASS" starttime="20170803 18:42:20.219"></status>
</kw>
<msg timestamp="20170803 18:42:20.560" level="INFO">${status} = PASS</msg>
<msg timestamp="20170803 18:42:20.560" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:42:20.560" status="PASS" starttime="20170803 18:42:20.219"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170803 18:42:20.560" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:42:20.561" status="PASS" starttime="20170803 18:42:20.560"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:42:20.561" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:42:20.561" status="PASS" starttime="20170803 18:42:20.561"></status>
</kw>
<status endtime="20170803 18:42:20.561" status="PASS" starttime="20170803 18:42:20.215"></status>
</kw>
<status endtime="20170803 18:42:20.561" status="PASS" starttime="20170803 18:42:20.214"></status>
</kw>
<status endtime="20170803 18:42:20.562" status="PASS" starttime="20170803 18:42:20.213"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170803 18:42:20.562" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170803 18:42:20.562" status="PASS" starttime="20170803 18:42:20.562"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:42:20.564" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170803 18:42:20.564" status="PASS" starttime="20170803 18:42:20.564"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:42:20.565" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170803 18:42:20.565" status="PASS" starttime="20170803 18:42:20.565"></status>
</kw>
<status endtime="20170803 18:42:20.566" status="PASS" starttime="20170803 18:42:20.565"></status>
</kw>
<status endtime="20170803 18:42:20.566" status="PASS" starttime="20170803 18:42:20.563"></status>
</kw>
<status endtime="20170803 18:42:20.566" status="PASS" starttime="20170803 18:42:20.563"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170803 18:42:21.184" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170803 18:42:21.184" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:42:21.184" status="PASS" starttime="20170803 18:42:20.566"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:42:21.186" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:42:21.186" status="PASS" starttime="20170803 18:42:21.185"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:42:21.187" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:42:21.187" status="PASS" starttime="20170803 18:42:21.187"></status>
</kw>
<status endtime="20170803 18:42:21.188" status="PASS" starttime="20170803 18:42:21.187"></status>
</kw>
<status endtime="20170803 18:42:21.188" status="PASS" starttime="20170803 18:42:21.185"></status>
</kw>
<status endtime="20170803 18:42:21.188" status="PASS" starttime="20170803 18:42:21.184"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170803 18:42:21.188" level="INFO">Delete All Sessions</msg>
<status endtime="20170803 18:42:21.188" status="PASS" starttime="20170803 18:42:21.188"></status>
</kw>
<msg timestamp="20170803 18:42:21.188" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:42:21.188" status="PASS" starttime="20170803 18:42:20.213"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:42:21.189" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:42:21.189" status="PASS" starttime="20170803 18:42:21.189"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170803 18:42:21.190" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170803 18:42:21.190" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170803 18:42:21.190" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170803 18:42:21.190" status="PASS" starttime="20170803 18:42:21.189"></status>
</kw>
<msg timestamp="20170803 18:42:21.190" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170803 18:42:21.190" status="PASS" starttime="20170803 18:42:20.212"></status>
</kw>
<msg timestamp="20170803 18:42:21.190" level="INFO">${power_state} = On</msg>
<status endtime="20170803 18:42:21.190" status="PASS" starttime="20170803 18:42:20.211"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170803 18:42:21.191" status="PASS" starttime="20170803 18:42:21.191"></status>
</kw>
<status endtime="20170803 18:42:21.191" status="PASS" starttime="20170803 18:42:20.211"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170803 18:42:21.195" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170803 18:42:21.195" status="PASS" starttime="20170803 18:42:21.194"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170803 18:42:21.196" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170803 18:42:21.196" status="PASS" starttime="20170803 18:42:21.195"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170803 18:42:21.196" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170803 18:42:21.196" status="PASS" starttime="20170803 18:42:21.196"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170803 18:42:21.197" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170803 18:42:21.197" status="PASS" starttime="20170803 18:42:21.197"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170803 18:42:21.566" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170803 18:42:21.566" status="PASS" starttime="20170803 18:42:21.198"></status>
</kw>
<msg timestamp="20170803 18:42:21.566" level="INFO">${status} = PASS</msg>
<msg timestamp="20170803 18:42:21.566" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:42:21.567" status="PASS" starttime="20170803 18:42:21.197"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170803 18:42:21.567" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:42:21.567" status="PASS" starttime="20170803 18:42:21.567"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:42:21.568" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:42:21.568" status="PASS" starttime="20170803 18:42:21.568"></status>
</kw>
<status endtime="20170803 18:42:21.568" status="PASS" starttime="20170803 18:42:21.194"></status>
</kw>
<status endtime="20170803 18:42:21.568" status="PASS" starttime="20170803 18:42:21.194"></status>
</kw>
<status endtime="20170803 18:42:21.568" status="PASS" starttime="20170803 18:42:21.193"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170803 18:42:21.569" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170803 18:42:21.569" status="PASS" starttime="20170803 18:42:21.569"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:42:21.571" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170803 18:42:21.571" status="PASS" starttime="20170803 18:42:21.570"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:42:21.572" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170803 18:42:21.573" status="PASS" starttime="20170803 18:42:21.572"></status>
</kw>
<status endtime="20170803 18:42:21.573" status="PASS" starttime="20170803 18:42:21.572"></status>
</kw>
<status endtime="20170803 18:42:21.573" status="PASS" starttime="20170803 18:42:21.570"></status>
</kw>
<status endtime="20170803 18:42:21.573" status="PASS" starttime="20170803 18:42:21.569"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170803 18:42:22.380" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170803 18:42:22.381" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:42:22.381" status="PASS" starttime="20170803 18:42:21.573"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:42:22.383" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:42:22.383" status="PASS" starttime="20170803 18:42:22.382"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:42:22.384" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:42:22.384" status="PASS" starttime="20170803 18:42:22.384"></status>
</kw>
<status endtime="20170803 18:42:22.384" status="PASS" starttime="20170803 18:42:22.383"></status>
</kw>
<status endtime="20170803 18:42:22.384" status="PASS" starttime="20170803 18:42:22.382"></status>
</kw>
<status endtime="20170803 18:42:22.384" status="PASS" starttime="20170803 18:42:22.381"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170803 18:42:22.385" level="INFO">Delete All Sessions</msg>
<status endtime="20170803 18:42:22.385" status="PASS" starttime="20170803 18:42:22.385"></status>
</kw>
<msg timestamp="20170803 18:42:22.385" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:42:22.385" status="PASS" starttime="20170803 18:42:21.192"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:42:22.386" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:42:22.386" status="PASS" starttime="20170803 18:42:22.385"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170803 18:42:22.387" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170803 18:42:22.387" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170803 18:42:22.387" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170803 18:42:22.387" status="PASS" starttime="20170803 18:42:22.386"></status>
</kw>
<msg timestamp="20170803 18:42:22.387" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170803 18:42:22.387" status="PASS" starttime="20170803 18:42:21.192"></status>
</kw>
<msg timestamp="20170803 18:42:22.388" level="INFO">${host_state} = Running</msg>
<status endtime="20170803 18:42:22.388" status="PASS" starttime="20170803 18:42:21.191"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170803 18:42:22.389" status="PASS" starttime="20170803 18:42:22.388"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170803 18:42:22.394" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170803 18:42:22.395" status="PASS" starttime="20170803 18:42:22.394"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170803 18:42:22.396" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170803 18:42:22.396" status="PASS" starttime="20170803 18:42:22.395"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170803 18:42:22.397" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170803 18:42:22.397" status="PASS" starttime="20170803 18:42:22.396"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170803 18:42:22.398" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170803 18:42:22.398" status="PASS" starttime="20170803 18:42:22.397"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170803 18:42:22.669" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170803 18:42:22.670" status="PASS" starttime="20170803 18:42:22.402"></status>
</kw>
<msg timestamp="20170803 18:42:22.670" level="INFO">${status} = PASS</msg>
<msg timestamp="20170803 18:42:22.670" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:42:22.670" status="PASS" starttime="20170803 18:42:22.398"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170803 18:42:22.671" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:42:22.671" status="PASS" starttime="20170803 18:42:22.670"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:42:22.671" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:42:22.671" status="PASS" starttime="20170803 18:42:22.671"></status>
</kw>
<status endtime="20170803 18:42:22.671" status="PASS" starttime="20170803 18:42:22.393"></status>
</kw>
<status endtime="20170803 18:42:22.672" status="PASS" starttime="20170803 18:42:22.393"></status>
</kw>
<status endtime="20170803 18:42:22.672" status="PASS" starttime="20170803 18:42:22.392"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170803 18:42:22.672" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170803 18:42:22.672" status="PASS" starttime="20170803 18:42:22.672"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:42:22.674" level="INFO">${msg} = URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170803 18:42:22.675" status="PASS" starttime="20170803 18:42:22.674"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:42:22.675" level="INFO">URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170803 18:42:22.675" status="PASS" starttime="20170803 18:42:22.675"></status>
</kw>
<status endtime="20170803 18:42:22.676" status="PASS" starttime="20170803 18:42:22.675"></status>
</kw>
<status endtime="20170803 18:42:22.676" status="PASS" starttime="20170803 18:42:22.673"></status>
</kw>
<status endtime="20170803 18:42:22.676" status="PASS" starttime="20170803 18:42:22.673"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170803 18:42:22.742" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170803 18:42:22.742" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:42:22.742" status="PASS" starttime="20170803 18:42:22.676"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:42:22.744" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:42:22.744" status="PASS" starttime="20170803 18:42:22.743"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:42:22.745" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:42:22.745" status="PASS" starttime="20170803 18:42:22.744"></status>
</kw>
<status endtime="20170803 18:42:22.745" status="PASS" starttime="20170803 18:42:22.744"></status>
</kw>
<status endtime="20170803 18:42:22.745" status="PASS" starttime="20170803 18:42:22.743"></status>
</kw>
<status endtime="20170803 18:42:22.745" status="PASS" starttime="20170803 18:42:22.742"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170803 18:42:22.745" level="INFO">Delete All Sessions</msg>
<status endtime="20170803 18:42:22.745" status="PASS" starttime="20170803 18:42:22.745"></status>
</kw>
<msg timestamp="20170803 18:42:22.746" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:42:22.746" status="PASS" starttime="20170803 18:42:22.391"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:42:22.746" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:42:22.746" status="PASS" starttime="20170803 18:42:22.746"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170803 18:42:22.747" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170803 18:42:22.747" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170803 18:42:22.747" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'Off'}</msg>
<status endtime="20170803 18:42:22.747" status="PASS" starttime="20170803 18:42:22.747"></status>
</kw>
<msg timestamp="20170803 18:42:22.747" level="INFO">${state} = Off</msg>
<status endtime="20170803 18:42:22.747" status="PASS" starttime="20170803 18:42:22.390"></status>
</kw>
<msg timestamp="20170803 18:42:22.748" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170803 18:42:22.748" status="PASS" starttime="20170803 18:42:22.389"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170803 18:42:22.748" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170803 18:42:22.748" status="FAIL" starttime="20170803 18:42:22.748"></status>
</kw>
<status endtime="20170803 18:42:22.748" status="FAIL" starttime="20170803 18:42:22.389"></status>
</kw>
<status endtime="20170803 18:42:22.749" status="FAIL" starttime="20170803 18:42:20.210"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170803 18:42:32.785" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170803 18:42:32.786" status="PASS" starttime="20170803 18:42:32.785"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170803 18:42:32.786" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170803 18:42:32.786" status="PASS" starttime="20170803 18:42:32.786"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170803 18:42:32.787" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170803 18:42:32.787" status="PASS" starttime="20170803 18:42:32.787"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170803 18:42:32.788" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170803 18:42:32.788" status="PASS" starttime="20170803 18:42:32.787"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170803 18:42:33.164" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170803 18:42:33.164" status="PASS" starttime="20170803 18:42:32.789"></status>
</kw>
<msg timestamp="20170803 18:42:33.164" level="INFO">${status} = PASS</msg>
<msg timestamp="20170803 18:42:33.164" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:42:33.164" status="PASS" starttime="20170803 18:42:32.788"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170803 18:42:33.165" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:42:33.165" status="PASS" starttime="20170803 18:42:33.164"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:42:33.165" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:42:33.166" status="PASS" starttime="20170803 18:42:33.165"></status>
</kw>
<status endtime="20170803 18:42:33.166" status="PASS" starttime="20170803 18:42:32.784"></status>
</kw>
<status endtime="20170803 18:42:33.166" status="PASS" starttime="20170803 18:42:32.784"></status>
</kw>
<status endtime="20170803 18:42:33.166" status="PASS" starttime="20170803 18:42:32.752"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170803 18:42:33.166" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170803 18:42:33.166" status="PASS" starttime="20170803 18:42:33.166"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:42:33.169" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170803 18:42:33.169" status="PASS" starttime="20170803 18:42:33.168"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:42:33.170" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170803 18:42:33.170" status="PASS" starttime="20170803 18:42:33.169"></status>
</kw>
<status endtime="20170803 18:42:33.170" status="PASS" starttime="20170803 18:42:33.169"></status>
</kw>
<status endtime="20170803 18:42:33.170" status="PASS" starttime="20170803 18:42:33.167"></status>
</kw>
<status endtime="20170803 18:42:33.170" status="PASS" starttime="20170803 18:42:33.167"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170803 18:42:33.583" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170803 18:42:33.584" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:42:33.584" status="PASS" starttime="20170803 18:42:33.170"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:42:33.586" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:42:33.586" status="PASS" starttime="20170803 18:42:33.585"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:42:33.587" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:42:33.587" status="PASS" starttime="20170803 18:42:33.586"></status>
</kw>
<status endtime="20170803 18:42:33.587" status="PASS" starttime="20170803 18:42:33.586"></status>
</kw>
<status endtime="20170803 18:42:33.587" status="PASS" starttime="20170803 18:42:33.585"></status>
</kw>
<status endtime="20170803 18:42:33.587" status="PASS" starttime="20170803 18:42:33.584"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170803 18:42:33.587" level="INFO">Delete All Sessions</msg>
<status endtime="20170803 18:42:33.588" status="PASS" starttime="20170803 18:42:33.587"></status>
</kw>
<msg timestamp="20170803 18:42:33.588" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:42:33.588" status="PASS" starttime="20170803 18:42:32.751"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:42:33.588" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:42:33.588" status="PASS" starttime="20170803 18:42:33.588"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170803 18:42:33.589" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170803 18:42:33.589" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170803 18:42:33.589" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20170803 18:42:33.589" status="PASS" starttime="20170803 18:42:33.589"></status>
</kw>
<msg timestamp="20170803 18:42:33.589" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170803 18:42:33.589" status="PASS" starttime="20170803 18:42:32.751"></status>
</kw>
<msg timestamp="20170803 18:42:33.590" level="INFO">${power_state} = Off</msg>
<status endtime="20170803 18:42:33.590" status="PASS" starttime="20170803 18:42:32.750"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20170803 18:42:33.590" level="FAIL">On != Off</msg>
<status endtime="20170803 18:42:33.590" status="FAIL" starttime="20170803 18:42:33.590"></status>
</kw>
<status endtime="20170803 18:42:33.591" status="FAIL" starttime="20170803 18:42:32.750"></status>
</kw>
<status endtime="20170803 18:42:33.591" status="FAIL" starttime="20170803 18:42:32.749"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170803 18:42:43.596" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170803 18:42:43.597" status="PASS" starttime="20170803 18:42:43.596"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170803 18:42:43.597" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170803 18:42:43.597" status="PASS" starttime="20170803 18:42:43.597"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170803 18:42:43.598" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170803 18:42:43.598" status="PASS" starttime="20170803 18:42:43.597"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170803 18:42:43.599" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170803 18:42:43.599" status="PASS" starttime="20170803 18:42:43.598"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170803 18:42:44.403" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170803 18:42:44.403" status="PASS" starttime="20170803 18:42:43.600"></status>
</kw>
<msg timestamp="20170803 18:42:44.403" level="INFO">${status} = PASS</msg>
<msg timestamp="20170803 18:42:44.403" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:42:44.403" status="PASS" starttime="20170803 18:42:43.599"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170803 18:42:44.404" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:42:44.404" status="PASS" starttime="20170803 18:42:44.404"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:42:44.405" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:42:44.405" status="PASS" starttime="20170803 18:42:44.404"></status>
</kw>
<status endtime="20170803 18:42:44.405" status="PASS" starttime="20170803 18:42:43.595"></status>
</kw>
<status endtime="20170803 18:42:44.405" status="PASS" starttime="20170803 18:42:43.595"></status>
</kw>
<status endtime="20170803 18:42:44.405" status="PASS" starttime="20170803 18:42:43.594"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170803 18:42:44.406" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170803 18:42:44.406" status="PASS" starttime="20170803 18:42:44.405"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:42:44.408" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170803 18:42:44.408" status="PASS" starttime="20170803 18:42:44.407"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:42:44.409" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170803 18:42:44.409" status="PASS" starttime="20170803 18:42:44.408"></status>
</kw>
<status endtime="20170803 18:42:44.409" status="PASS" starttime="20170803 18:42:44.408"></status>
</kw>
<status endtime="20170803 18:42:44.409" status="PASS" starttime="20170803 18:42:44.406"></status>
</kw>
<status endtime="20170803 18:42:44.409" status="PASS" starttime="20170803 18:42:44.406"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170803 18:42:45.172" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170803 18:42:45.172" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:42:45.172" status="PASS" starttime="20170803 18:42:44.409"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:42:45.174" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:42:45.174" status="PASS" starttime="20170803 18:42:45.174"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:42:45.175" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:42:45.175" status="PASS" starttime="20170803 18:42:45.175"></status>
</kw>
<status endtime="20170803 18:42:45.175" status="PASS" starttime="20170803 18:42:45.174"></status>
</kw>
<status endtime="20170803 18:42:45.176" status="PASS" starttime="20170803 18:42:45.173"></status>
</kw>
<status endtime="20170803 18:42:45.176" status="PASS" starttime="20170803 18:42:45.173"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170803 18:42:45.176" level="INFO">Delete All Sessions</msg>
<status endtime="20170803 18:42:45.176" status="PASS" starttime="20170803 18:42:45.176"></status>
</kw>
<msg timestamp="20170803 18:42:45.176" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:42:45.176" status="PASS" starttime="20170803 18:42:43.593"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:42:45.177" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:42:45.177" status="PASS" starttime="20170803 18:42:45.177"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170803 18:42:45.177" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170803 18:42:45.178" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170803 18:42:45.178" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170803 18:42:45.178" status="PASS" starttime="20170803 18:42:45.177"></status>
</kw>
<msg timestamp="20170803 18:42:45.178" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170803 18:42:45.178" status="PASS" starttime="20170803 18:42:43.593"></status>
</kw>
<msg timestamp="20170803 18:42:45.178" level="INFO">${power_state} = On</msg>
<status endtime="20170803 18:42:45.178" status="PASS" starttime="20170803 18:42:43.592"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170803 18:42:45.179" status="PASS" starttime="20170803 18:42:45.179"></status>
</kw>
<status endtime="20170803 18:42:45.179" status="PASS" starttime="20170803 18:42:43.592"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170803 18:42:45.183" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170803 18:42:45.183" status="PASS" starttime="20170803 18:42:45.183"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170803 18:42:45.184" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170803 18:42:45.184" status="PASS" starttime="20170803 18:42:45.184"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170803 18:42:45.184" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170803 18:42:45.185" status="PASS" starttime="20170803 18:42:45.184"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170803 18:42:45.185" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170803 18:42:45.185" status="PASS" starttime="20170803 18:42:45.185"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170803 18:42:45.749" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170803 18:42:45.750" status="PASS" starttime="20170803 18:42:45.186"></status>
</kw>
<msg timestamp="20170803 18:42:45.750" level="INFO">${status} = PASS</msg>
<msg timestamp="20170803 18:42:45.750" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:42:45.750" status="PASS" starttime="20170803 18:42:45.185"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170803 18:42:45.751" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:42:45.751" status="PASS" starttime="20170803 18:42:45.750"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:42:45.751" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:42:45.751" status="PASS" starttime="20170803 18:42:45.751"></status>
</kw>
<status endtime="20170803 18:42:45.751" status="PASS" starttime="20170803 18:42:45.182"></status>
</kw>
<status endtime="20170803 18:42:45.752" status="PASS" starttime="20170803 18:42:45.182"></status>
</kw>
<status endtime="20170803 18:42:45.752" status="PASS" starttime="20170803 18:42:45.181"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170803 18:42:45.752" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170803 18:42:45.752" status="PASS" starttime="20170803 18:42:45.752"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:42:45.754" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170803 18:42:45.754" status="PASS" starttime="20170803 18:42:45.754"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:42:45.755" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170803 18:42:45.755" status="PASS" starttime="20170803 18:42:45.755"></status>
</kw>
<status endtime="20170803 18:42:45.756" status="PASS" starttime="20170803 18:42:45.755"></status>
</kw>
<status endtime="20170803 18:42:45.756" status="PASS" starttime="20170803 18:42:45.753"></status>
</kw>
<status endtime="20170803 18:42:45.756" status="PASS" starttime="20170803 18:42:45.753"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170803 18:42:46.122" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170803 18:42:46.122" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:42:46.123" status="PASS" starttime="20170803 18:42:45.756"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:42:46.125" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:42:46.125" status="PASS" starttime="20170803 18:42:46.124"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:42:46.126" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:42:46.126" status="PASS" starttime="20170803 18:42:46.126"></status>
</kw>
<status endtime="20170803 18:42:46.126" status="PASS" starttime="20170803 18:42:46.125"></status>
</kw>
<status endtime="20170803 18:42:46.126" status="PASS" starttime="20170803 18:42:46.123"></status>
</kw>
<status endtime="20170803 18:42:46.126" status="PASS" starttime="20170803 18:42:46.123"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170803 18:42:46.127" level="INFO">Delete All Sessions</msg>
<status endtime="20170803 18:42:46.127" status="PASS" starttime="20170803 18:42:46.127"></status>
</kw>
<msg timestamp="20170803 18:42:46.127" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:42:46.127" status="PASS" starttime="20170803 18:42:45.180"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:42:46.128" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:42:46.128" status="PASS" starttime="20170803 18:42:46.127"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170803 18:42:46.128" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170803 18:42:46.128" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170803 18:42:46.128" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170803 18:42:46.128" status="PASS" starttime="20170803 18:42:46.128"></status>
</kw>
<msg timestamp="20170803 18:42:46.129" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170803 18:42:46.129" status="PASS" starttime="20170803 18:42:45.180"></status>
</kw>
<msg timestamp="20170803 18:42:46.129" level="INFO">${host_state} = Running</msg>
<status endtime="20170803 18:42:46.129" status="PASS" starttime="20170803 18:42:45.179"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170803 18:42:46.130" status="PASS" starttime="20170803 18:42:46.129"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170803 18:42:46.133" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170803 18:42:46.134" status="PASS" starttime="20170803 18:42:46.133"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170803 18:42:46.134" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170803 18:42:46.134" status="PASS" starttime="20170803 18:42:46.134"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170803 18:42:46.135" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170803 18:42:46.135" status="PASS" starttime="20170803 18:42:46.135"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170803 18:42:46.135" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170803 18:42:46.136" status="PASS" starttime="20170803 18:42:46.135"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170803 18:42:46.544" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170803 18:42:46.544" status="PASS" starttime="20170803 18:42:46.136"></status>
</kw>
<msg timestamp="20170803 18:42:46.545" level="INFO">${status} = PASS</msg>
<msg timestamp="20170803 18:42:46.545" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:42:46.545" status="PASS" starttime="20170803 18:42:46.136"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170803 18:42:46.545" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:42:46.545" status="PASS" starttime="20170803 18:42:46.545"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:42:46.546" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:42:46.546" status="PASS" starttime="20170803 18:42:46.546"></status>
</kw>
<status endtime="20170803 18:42:46.546" status="PASS" starttime="20170803 18:42:46.132"></status>
</kw>
<status endtime="20170803 18:42:46.546" status="PASS" starttime="20170803 18:42:46.132"></status>
</kw>
<status endtime="20170803 18:42:46.546" status="PASS" starttime="20170803 18:42:46.131"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170803 18:42:46.547" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170803 18:42:46.547" status="PASS" starttime="20170803 18:42:46.547"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:42:46.549" level="INFO">${msg} = URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170803 18:42:46.549" status="PASS" starttime="20170803 18:42:46.548"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:42:46.550" level="INFO">URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170803 18:42:46.550" status="PASS" starttime="20170803 18:42:46.550"></status>
</kw>
<status endtime="20170803 18:42:46.550" status="PASS" starttime="20170803 18:42:46.549"></status>
</kw>
<status endtime="20170803 18:42:46.550" status="PASS" starttime="20170803 18:42:46.548"></status>
</kw>
<status endtime="20170803 18:42:46.550" status="PASS" starttime="20170803 18:42:46.547"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170803 18:42:46.883" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170803 18:42:46.883" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:42:46.883" status="PASS" starttime="20170803 18:42:46.551"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:42:46.885" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:42:46.885" status="PASS" starttime="20170803 18:42:46.885"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:42:46.886" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:42:46.886" status="PASS" starttime="20170803 18:42:46.886"></status>
</kw>
<status endtime="20170803 18:42:46.886" status="PASS" starttime="20170803 18:42:46.885"></status>
</kw>
<status endtime="20170803 18:42:46.887" status="PASS" starttime="20170803 18:42:46.884"></status>
</kw>
<status endtime="20170803 18:42:46.887" status="PASS" starttime="20170803 18:42:46.884"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170803 18:42:46.887" level="INFO">Delete All Sessions</msg>
<status endtime="20170803 18:42:46.887" status="PASS" starttime="20170803 18:42:46.887"></status>
</kw>
<msg timestamp="20170803 18:42:46.887" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:42:46.887" status="PASS" starttime="20170803 18:42:46.131"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:42:46.888" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:42:46.888" status="PASS" starttime="20170803 18:42:46.888"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170803 18:42:46.889" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170803 18:42:46.889" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170803 18:42:46.889" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'Off'}</msg>
<status endtime="20170803 18:42:46.889" status="PASS" starttime="20170803 18:42:46.888"></status>
</kw>
<msg timestamp="20170803 18:42:46.889" level="INFO">${state} = Off</msg>
<status endtime="20170803 18:42:46.889" status="PASS" starttime="20170803 18:42:46.130"></status>
</kw>
<msg timestamp="20170803 18:42:46.889" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170803 18:42:46.889" status="PASS" starttime="20170803 18:42:46.130"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170803 18:42:46.890" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170803 18:42:46.890" status="FAIL" starttime="20170803 18:42:46.890"></status>
</kw>
<status endtime="20170803 18:42:46.890" status="FAIL" starttime="20170803 18:42:46.130"></status>
</kw>
<status endtime="20170803 18:42:46.890" status="FAIL" starttime="20170803 18:42:43.591"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170803 18:42:56.896" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170803 18:42:56.897" status="PASS" starttime="20170803 18:42:56.896"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170803 18:42:56.897" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170803 18:42:56.897" status="PASS" starttime="20170803 18:42:56.897"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170803 18:42:56.898" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170803 18:42:56.898" status="PASS" starttime="20170803 18:42:56.897"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170803 18:42:56.899" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170803 18:42:56.899" status="PASS" starttime="20170803 18:42:56.898"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170803 18:42:57.273" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170803 18:42:57.274" status="PASS" starttime="20170803 18:42:56.899"></status>
</kw>
<msg timestamp="20170803 18:42:57.274" level="INFO">${status} = PASS</msg>
<msg timestamp="20170803 18:42:57.274" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:42:57.274" status="PASS" starttime="20170803 18:42:56.899"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170803 18:42:57.274" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:42:57.275" status="PASS" starttime="20170803 18:42:57.274"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:42:57.275" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:42:57.275" status="PASS" starttime="20170803 18:42:57.275"></status>
</kw>
<status endtime="20170803 18:42:57.275" status="PASS" starttime="20170803 18:42:56.895"></status>
</kw>
<status endtime="20170803 18:42:57.275" status="PASS" starttime="20170803 18:42:56.894"></status>
</kw>
<status endtime="20170803 18:42:57.276" status="PASS" starttime="20170803 18:42:56.893"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170803 18:42:57.276" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170803 18:42:57.276" status="PASS" starttime="20170803 18:42:57.276"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:42:57.278" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170803 18:42:57.278" status="PASS" starttime="20170803 18:42:57.278"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:42:57.279" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170803 18:42:57.279" status="PASS" starttime="20170803 18:42:57.279"></status>
</kw>
<status endtime="20170803 18:42:57.279" status="PASS" starttime="20170803 18:42:57.278"></status>
</kw>
<status endtime="20170803 18:42:57.280" status="PASS" starttime="20170803 18:42:57.277"></status>
</kw>
<status endtime="20170803 18:42:57.280" status="PASS" starttime="20170803 18:42:57.276"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170803 18:42:57.476" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170803 18:42:57.476" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:42:57.476" status="PASS" starttime="20170803 18:42:57.280"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:42:57.478" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:42:57.478" status="PASS" starttime="20170803 18:42:57.478"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:42:57.479" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:42:57.479" status="PASS" starttime="20170803 18:42:57.479"></status>
</kw>
<status endtime="20170803 18:42:57.480" status="PASS" starttime="20170803 18:42:57.478"></status>
</kw>
<status endtime="20170803 18:42:57.480" status="PASS" starttime="20170803 18:42:57.477"></status>
</kw>
<status endtime="20170803 18:42:57.480" status="PASS" starttime="20170803 18:42:57.477"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170803 18:42:57.480" level="INFO">Delete All Sessions</msg>
<status endtime="20170803 18:42:57.480" status="PASS" starttime="20170803 18:42:57.480"></status>
</kw>
<msg timestamp="20170803 18:42:57.480" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:42:57.480" status="PASS" starttime="20170803 18:42:56.893"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:42:57.481" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:42:57.481" status="PASS" starttime="20170803 18:42:57.481"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170803 18:42:57.482" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170803 18:42:57.482" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170803 18:42:57.482" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170803 18:42:57.482" status="PASS" starttime="20170803 18:42:57.481"></status>
</kw>
<msg timestamp="20170803 18:42:57.482" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170803 18:42:57.482" status="PASS" starttime="20170803 18:42:56.892"></status>
</kw>
<msg timestamp="20170803 18:42:57.482" level="INFO">${power_state} = On</msg>
<status endtime="20170803 18:42:57.482" status="PASS" starttime="20170803 18:42:56.892"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170803 18:42:57.483" status="PASS" starttime="20170803 18:42:57.483"></status>
</kw>
<status endtime="20170803 18:42:57.483" status="PASS" starttime="20170803 18:42:56.892"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170803 18:42:57.487" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170803 18:42:57.487" status="PASS" starttime="20170803 18:42:57.486"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170803 18:42:57.488" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170803 18:42:57.488" status="PASS" starttime="20170803 18:42:57.487"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170803 18:42:57.488" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170803 18:42:57.488" status="PASS" starttime="20170803 18:42:57.488"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170803 18:42:57.489" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170803 18:42:57.489" status="PASS" starttime="20170803 18:42:57.488"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170803 18:42:57.670" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170803 18:42:57.670" status="PASS" starttime="20170803 18:42:57.490"></status>
</kw>
<msg timestamp="20170803 18:42:57.670" level="INFO">${status} = PASS</msg>
<msg timestamp="20170803 18:42:57.670" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:42:57.670" status="PASS" starttime="20170803 18:42:57.489"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170803 18:42:57.671" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:42:57.671" status="PASS" starttime="20170803 18:42:57.670"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:42:57.671" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:42:57.671" status="PASS" starttime="20170803 18:42:57.671"></status>
</kw>
<status endtime="20170803 18:42:57.672" status="PASS" starttime="20170803 18:42:57.486"></status>
</kw>
<status endtime="20170803 18:42:57.672" status="PASS" starttime="20170803 18:42:57.485"></status>
</kw>
<status endtime="20170803 18:42:57.672" status="PASS" starttime="20170803 18:42:57.485"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170803 18:42:57.672" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170803 18:42:57.672" status="PASS" starttime="20170803 18:42:57.672"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:42:57.675" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170803 18:42:57.675" status="PASS" starttime="20170803 18:42:57.674"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:42:57.676" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170803 18:42:57.676" status="PASS" starttime="20170803 18:42:57.676"></status>
</kw>
<status endtime="20170803 18:42:57.676" status="PASS" starttime="20170803 18:42:57.675"></status>
</kw>
<status endtime="20170803 18:42:57.676" status="PASS" starttime="20170803 18:42:57.673"></status>
</kw>
<status endtime="20170803 18:42:57.676" status="PASS" starttime="20170803 18:42:57.673"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170803 18:42:57.764" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170803 18:42:57.764" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:42:57.764" status="PASS" starttime="20170803 18:42:57.676"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:42:57.766" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:42:57.766" status="PASS" starttime="20170803 18:42:57.765"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:42:57.767" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:42:57.767" status="PASS" starttime="20170803 18:42:57.767"></status>
</kw>
<status endtime="20170803 18:42:57.767" status="PASS" starttime="20170803 18:42:57.766"></status>
</kw>
<status endtime="20170803 18:42:57.767" status="PASS" starttime="20170803 18:42:57.765"></status>
</kw>
<status endtime="20170803 18:42:57.767" status="PASS" starttime="20170803 18:42:57.764"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170803 18:42:57.768" level="INFO">Delete All Sessions</msg>
<status endtime="20170803 18:42:57.768" status="PASS" starttime="20170803 18:42:57.767"></status>
</kw>
<msg timestamp="20170803 18:42:57.768" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:42:57.768" status="PASS" starttime="20170803 18:42:57.484"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:42:57.768" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:42:57.769" status="PASS" starttime="20170803 18:42:57.768"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170803 18:42:57.769" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170803 18:42:57.769" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170803 18:42:57.769" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170803 18:42:57.769" status="PASS" starttime="20170803 18:42:57.769"></status>
</kw>
<msg timestamp="20170803 18:42:57.770" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170803 18:42:57.770" status="PASS" starttime="20170803 18:42:57.484"></status>
</kw>
<msg timestamp="20170803 18:42:57.770" level="INFO">${host_state} = Running</msg>
<status endtime="20170803 18:42:57.770" status="PASS" starttime="20170803 18:42:57.483"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170803 18:42:57.770" status="PASS" starttime="20170803 18:42:57.770"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170803 18:42:57.774" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170803 18:42:57.775" status="PASS" starttime="20170803 18:42:57.774"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170803 18:42:57.775" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170803 18:42:57.775" status="PASS" starttime="20170803 18:42:57.775"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170803 18:42:57.776" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170803 18:42:57.776" status="PASS" starttime="20170803 18:42:57.775"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170803 18:42:57.777" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170803 18:42:57.777" status="PASS" starttime="20170803 18:42:57.776"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170803 18:42:58.046" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170803 18:42:58.047" status="PASS" starttime="20170803 18:42:57.777"></status>
</kw>
<msg timestamp="20170803 18:42:58.047" level="INFO">${status} = PASS</msg>
<msg timestamp="20170803 18:42:58.047" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:42:58.047" status="PASS" starttime="20170803 18:42:57.777"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170803 18:42:58.047" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:42:58.048" status="PASS" starttime="20170803 18:42:58.047"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:42:58.048" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:42:58.048" status="PASS" starttime="20170803 18:42:58.048"></status>
</kw>
<status endtime="20170803 18:42:58.048" status="PASS" starttime="20170803 18:42:57.773"></status>
</kw>
<status endtime="20170803 18:42:58.048" status="PASS" starttime="20170803 18:42:57.773"></status>
</kw>
<status endtime="20170803 18:42:58.049" status="PASS" starttime="20170803 18:42:57.772"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170803 18:42:58.049" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170803 18:42:58.049" status="PASS" starttime="20170803 18:42:58.049"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:42:58.051" level="INFO">${msg} = URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170803 18:42:58.051" status="PASS" starttime="20170803 18:42:58.051"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:42:58.052" level="INFO">URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170803 18:42:58.052" status="PASS" starttime="20170803 18:42:58.052"></status>
</kw>
<status endtime="20170803 18:42:58.052" status="PASS" starttime="20170803 18:42:58.051"></status>
</kw>
<status endtime="20170803 18:42:58.053" status="PASS" starttime="20170803 18:42:58.050"></status>
</kw>
<status endtime="20170803 18:42:58.053" status="PASS" starttime="20170803 18:42:58.049"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170803 18:42:58.120" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170803 18:42:58.120" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:42:58.120" status="PASS" starttime="20170803 18:42:58.053"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:42:58.122" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:42:58.122" status="PASS" starttime="20170803 18:42:58.121"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:42:58.122" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:42:58.123" status="PASS" starttime="20170803 18:42:58.122"></status>
</kw>
<status endtime="20170803 18:42:58.123" status="PASS" starttime="20170803 18:42:58.122"></status>
</kw>
<status endtime="20170803 18:42:58.123" status="PASS" starttime="20170803 18:42:58.121"></status>
</kw>
<status endtime="20170803 18:42:58.123" status="PASS" starttime="20170803 18:42:58.120"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170803 18:42:58.123" level="INFO">Delete All Sessions</msg>
<status endtime="20170803 18:42:58.123" status="PASS" starttime="20170803 18:42:58.123"></status>
</kw>
<msg timestamp="20170803 18:42:58.124" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:42:58.124" status="PASS" starttime="20170803 18:42:57.772"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:42:58.124" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:42:58.124" status="PASS" starttime="20170803 18:42:58.124"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170803 18:42:58.125" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170803 18:42:58.125" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170803 18:42:58.125" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'Off'}</msg>
<status endtime="20170803 18:42:58.125" status="PASS" starttime="20170803 18:42:58.124"></status>
</kw>
<msg timestamp="20170803 18:42:58.125" level="INFO">${state} = Off</msg>
<status endtime="20170803 18:42:58.125" status="PASS" starttime="20170803 18:42:57.771"></status>
</kw>
<msg timestamp="20170803 18:42:58.126" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170803 18:42:58.126" status="PASS" starttime="20170803 18:42:57.771"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170803 18:42:58.126" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170803 18:42:58.126" status="FAIL" starttime="20170803 18:42:58.126"></status>
</kw>
<status endtime="20170803 18:42:58.126" status="FAIL" starttime="20170803 18:42:57.771"></status>
</kw>
<status endtime="20170803 18:42:58.127" status="FAIL" starttime="20170803 18:42:56.891"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170803 18:43:08.132" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170803 18:43:08.133" status="PASS" starttime="20170803 18:43:08.132"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170803 18:43:08.133" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170803 18:43:08.133" status="PASS" starttime="20170803 18:43:08.133"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170803 18:43:08.134" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170803 18:43:08.134" status="PASS" starttime="20170803 18:43:08.134"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170803 18:43:08.135" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170803 18:43:08.135" status="PASS" starttime="20170803 18:43:08.134"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170803 18:43:08.320" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170803 18:43:08.320" status="PASS" starttime="20170803 18:43:08.135"></status>
</kw>
<msg timestamp="20170803 18:43:08.320" level="INFO">${status} = PASS</msg>
<msg timestamp="20170803 18:43:08.320" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:43:08.320" status="PASS" starttime="20170803 18:43:08.135"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170803 18:43:08.321" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:43:08.321" status="PASS" starttime="20170803 18:43:08.321"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:43:08.322" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:43:08.322" status="PASS" starttime="20170803 18:43:08.321"></status>
</kw>
<status endtime="20170803 18:43:08.322" status="PASS" starttime="20170803 18:43:08.131"></status>
</kw>
<status endtime="20170803 18:43:08.322" status="PASS" starttime="20170803 18:43:08.131"></status>
</kw>
<status endtime="20170803 18:43:08.322" status="PASS" starttime="20170803 18:43:08.130"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170803 18:43:08.323" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170803 18:43:08.323" status="PASS" starttime="20170803 18:43:08.322"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:43:08.325" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170803 18:43:08.325" status="PASS" starttime="20170803 18:43:08.324"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:43:08.326" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170803 18:43:08.326" status="PASS" starttime="20170803 18:43:08.326"></status>
</kw>
<status endtime="20170803 18:43:08.326" status="PASS" starttime="20170803 18:43:08.325"></status>
</kw>
<status endtime="20170803 18:43:08.326" status="PASS" starttime="20170803 18:43:08.324"></status>
</kw>
<status endtime="20170803 18:43:08.326" status="PASS" starttime="20170803 18:43:08.323"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170803 18:43:08.392" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170803 18:43:08.392" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:43:08.392" status="PASS" starttime="20170803 18:43:08.326"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:43:08.394" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:43:08.394" status="PASS" starttime="20170803 18:43:08.393"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:43:08.395" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:43:08.395" status="PASS" starttime="20170803 18:43:08.394"></status>
</kw>
<status endtime="20170803 18:43:08.395" status="PASS" starttime="20170803 18:43:08.394"></status>
</kw>
<status endtime="20170803 18:43:08.395" status="PASS" starttime="20170803 18:43:08.393"></status>
</kw>
<status endtime="20170803 18:43:08.395" status="PASS" starttime="20170803 18:43:08.392"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170803 18:43:08.395" level="INFO">Delete All Sessions</msg>
<status endtime="20170803 18:43:08.396" status="PASS" starttime="20170803 18:43:08.395"></status>
</kw>
<msg timestamp="20170803 18:43:08.396" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:43:08.396" status="PASS" starttime="20170803 18:43:08.129"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:43:08.396" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:43:08.396" status="PASS" starttime="20170803 18:43:08.396"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170803 18:43:08.397" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170803 18:43:08.397" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170803 18:43:08.397" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170803 18:43:08.397" status="PASS" starttime="20170803 18:43:08.397"></status>
</kw>
<msg timestamp="20170803 18:43:08.397" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170803 18:43:08.398" status="PASS" starttime="20170803 18:43:08.129"></status>
</kw>
<msg timestamp="20170803 18:43:08.398" level="INFO">${power_state} = On</msg>
<status endtime="20170803 18:43:08.398" status="PASS" starttime="20170803 18:43:08.128"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170803 18:43:08.398" status="PASS" starttime="20170803 18:43:08.398"></status>
</kw>
<status endtime="20170803 18:43:08.398" status="PASS" starttime="20170803 18:43:08.128"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170803 18:43:08.402" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170803 18:43:08.402" status="PASS" starttime="20170803 18:43:08.402"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170803 18:43:08.403" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170803 18:43:08.403" status="PASS" starttime="20170803 18:43:08.403"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170803 18:43:08.404" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170803 18:43:08.404" status="PASS" starttime="20170803 18:43:08.403"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170803 18:43:08.404" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170803 18:43:08.404" status="PASS" starttime="20170803 18:43:08.404"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170803 18:43:08.625" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170803 18:43:08.625" status="PASS" starttime="20170803 18:43:08.405"></status>
</kw>
<msg timestamp="20170803 18:43:08.625" level="INFO">${status} = PASS</msg>
<msg timestamp="20170803 18:43:08.625" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:43:08.625" status="PASS" starttime="20170803 18:43:08.405"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170803 18:43:08.626" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:43:08.626" status="PASS" starttime="20170803 18:43:08.626"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:43:08.627" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:43:08.627" status="PASS" starttime="20170803 18:43:08.626"></status>
</kw>
<status endtime="20170803 18:43:08.627" status="PASS" starttime="20170803 18:43:08.401"></status>
</kw>
<status endtime="20170803 18:43:08.627" status="PASS" starttime="20170803 18:43:08.401"></status>
</kw>
<status endtime="20170803 18:43:08.627" status="PASS" starttime="20170803 18:43:08.400"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170803 18:43:08.628" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170803 18:43:08.628" status="PASS" starttime="20170803 18:43:08.627"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:43:08.630" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170803 18:43:08.630" status="PASS" starttime="20170803 18:43:08.629"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:43:08.631" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170803 18:43:08.631" status="PASS" starttime="20170803 18:43:08.631"></status>
</kw>
<status endtime="20170803 18:43:08.631" status="PASS" starttime="20170803 18:43:08.630"></status>
</kw>
<status endtime="20170803 18:43:08.631" status="PASS" starttime="20170803 18:43:08.629"></status>
</kw>
<status endtime="20170803 18:43:08.631" status="PASS" starttime="20170803 18:43:08.628"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170803 18:43:08.854" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170803 18:43:08.855" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:43:08.855" status="PASS" starttime="20170803 18:43:08.632"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:43:08.856" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:43:08.856" status="PASS" starttime="20170803 18:43:08.856"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:43:08.857" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:43:08.857" status="PASS" starttime="20170803 18:43:08.857"></status>
</kw>
<status endtime="20170803 18:43:08.858" status="PASS" starttime="20170803 18:43:08.857"></status>
</kw>
<status endtime="20170803 18:43:08.858" status="PASS" starttime="20170803 18:43:08.855"></status>
</kw>
<status endtime="20170803 18:43:08.858" status="PASS" starttime="20170803 18:43:08.855"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170803 18:43:08.858" level="INFO">Delete All Sessions</msg>
<status endtime="20170803 18:43:08.858" status="PASS" starttime="20170803 18:43:08.858"></status>
</kw>
<msg timestamp="20170803 18:43:08.858" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:43:08.858" status="PASS" starttime="20170803 18:43:08.399"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:43:08.859" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:43:08.859" status="PASS" starttime="20170803 18:43:08.859"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170803 18:43:08.860" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170803 18:43:08.860" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170803 18:43:08.860" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170803 18:43:08.860" status="PASS" starttime="20170803 18:43:08.859"></status>
</kw>
<msg timestamp="20170803 18:43:08.860" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170803 18:43:08.860" status="PASS" starttime="20170803 18:43:08.399"></status>
</kw>
<msg timestamp="20170803 18:43:08.860" level="INFO">${host_state} = Running</msg>
<status endtime="20170803 18:43:08.860" status="PASS" starttime="20170803 18:43:08.399"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170803 18:43:08.861" status="PASS" starttime="20170803 18:43:08.861"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170803 18:43:08.865" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170803 18:43:08.866" status="PASS" starttime="20170803 18:43:08.865"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170803 18:43:08.866" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170803 18:43:08.866" status="PASS" starttime="20170803 18:43:08.866"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170803 18:43:08.867" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170803 18:43:08.867" status="PASS" starttime="20170803 18:43:08.866"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170803 18:43:08.867" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170803 18:43:08.867" status="PASS" starttime="20170803 18:43:08.867"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170803 18:43:09.122" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170803 18:43:09.122" status="PASS" starttime="20170803 18:43:08.868"></status>
</kw>
<msg timestamp="20170803 18:43:09.123" level="INFO">${status} = PASS</msg>
<msg timestamp="20170803 18:43:09.123" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:43:09.123" status="PASS" starttime="20170803 18:43:08.868"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170803 18:43:09.123" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:43:09.123" status="PASS" starttime="20170803 18:43:09.123"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:43:09.124" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:43:09.124" status="PASS" starttime="20170803 18:43:09.124"></status>
</kw>
<status endtime="20170803 18:43:09.124" status="PASS" starttime="20170803 18:43:08.864"></status>
</kw>
<status endtime="20170803 18:43:09.124" status="PASS" starttime="20170803 18:43:08.863"></status>
</kw>
<status endtime="20170803 18:43:09.124" status="PASS" starttime="20170803 18:43:08.863"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170803 18:43:09.125" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170803 18:43:09.125" status="PASS" starttime="20170803 18:43:09.125"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:43:09.127" level="INFO">${msg} = URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170803 18:43:09.127" status="PASS" starttime="20170803 18:43:09.126"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:43:09.128" level="INFO">URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170803 18:43:09.128" status="PASS" starttime="20170803 18:43:09.128"></status>
</kw>
<status endtime="20170803 18:43:09.128" status="PASS" starttime="20170803 18:43:09.127"></status>
</kw>
<status endtime="20170803 18:43:09.128" status="PASS" starttime="20170803 18:43:09.126"></status>
</kw>
<status endtime="20170803 18:43:09.128" status="PASS" starttime="20170803 18:43:09.125"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170803 18:43:09.205" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170803 18:43:09.205" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:43:09.205" status="PASS" starttime="20170803 18:43:09.129"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:43:09.207" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:43:09.207" status="PASS" starttime="20170803 18:43:09.206"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:43:09.208" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:43:09.208" status="PASS" starttime="20170803 18:43:09.208"></status>
</kw>
<status endtime="20170803 18:43:09.208" status="PASS" starttime="20170803 18:43:09.207"></status>
</kw>
<status endtime="20170803 18:43:09.208" status="PASS" starttime="20170803 18:43:09.206"></status>
</kw>
<status endtime="20170803 18:43:09.208" status="PASS" starttime="20170803 18:43:09.205"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170803 18:43:09.209" level="INFO">Delete All Sessions</msg>
<status endtime="20170803 18:43:09.209" status="PASS" starttime="20170803 18:43:09.208"></status>
</kw>
<msg timestamp="20170803 18:43:09.209" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:43:09.209" status="PASS" starttime="20170803 18:43:08.862"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:43:09.210" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:43:09.210" status="PASS" starttime="20170803 18:43:09.209"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170803 18:43:09.210" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170803 18:43:09.210" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170803 18:43:09.210" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'Off'}</msg>
<status endtime="20170803 18:43:09.210" status="PASS" starttime="20170803 18:43:09.210"></status>
</kw>
<msg timestamp="20170803 18:43:09.211" level="INFO">${state} = Off</msg>
<status endtime="20170803 18:43:09.211" status="PASS" starttime="20170803 18:43:08.862"></status>
</kw>
<msg timestamp="20170803 18:43:09.211" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170803 18:43:09.211" status="PASS" starttime="20170803 18:43:08.861"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170803 18:43:09.211" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170803 18:43:09.212" status="FAIL" starttime="20170803 18:43:09.211"></status>
</kw>
<status endtime="20170803 18:43:09.212" status="FAIL" starttime="20170803 18:43:08.861"></status>
</kw>
<status endtime="20170803 18:43:09.212" status="FAIL" starttime="20170803 18:43:08.127"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170803 18:43:19.217" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170803 18:43:19.218" status="PASS" starttime="20170803 18:43:19.217"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170803 18:43:19.218" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170803 18:43:19.218" status="PASS" starttime="20170803 18:43:19.218"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170803 18:43:19.219" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170803 18:43:19.219" status="PASS" starttime="20170803 18:43:19.219"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170803 18:43:19.220" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170803 18:43:19.220" status="PASS" starttime="20170803 18:43:19.219"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170803 18:43:19.637" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170803 18:43:19.637" status="PASS" starttime="20170803 18:43:19.220"></status>
</kw>
<msg timestamp="20170803 18:43:19.637" level="INFO">${status} = PASS</msg>
<msg timestamp="20170803 18:43:19.637" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:43:19.637" status="PASS" starttime="20170803 18:43:19.220"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170803 18:43:19.638" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:43:19.638" status="PASS" starttime="20170803 18:43:19.637"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:43:19.638" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:43:19.638" status="PASS" starttime="20170803 18:43:19.638"></status>
</kw>
<status endtime="20170803 18:43:19.639" status="PASS" starttime="20170803 18:43:19.217"></status>
</kw>
<status endtime="20170803 18:43:19.639" status="PASS" starttime="20170803 18:43:19.216"></status>
</kw>
<status endtime="20170803 18:43:19.639" status="PASS" starttime="20170803 18:43:19.215"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170803 18:43:19.639" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170803 18:43:19.639" status="PASS" starttime="20170803 18:43:19.639"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:43:19.642" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170803 18:43:19.642" status="PASS" starttime="20170803 18:43:19.641"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:43:19.643" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170803 18:43:19.643" status="PASS" starttime="20170803 18:43:19.642"></status>
</kw>
<status endtime="20170803 18:43:19.643" status="PASS" starttime="20170803 18:43:19.642"></status>
</kw>
<status endtime="20170803 18:43:19.643" status="PASS" starttime="20170803 18:43:19.640"></status>
</kw>
<status endtime="20170803 18:43:19.643" status="PASS" starttime="20170803 18:43:19.640"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170803 18:43:23.412" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170803 18:43:23.413" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:43:23.413" status="PASS" starttime="20170803 18:43:19.643"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:43:23.415" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:43:23.415" status="PASS" starttime="20170803 18:43:23.414"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:43:23.415" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:43:23.416" status="PASS" starttime="20170803 18:43:23.415"></status>
</kw>
<status endtime="20170803 18:43:23.416" status="PASS" starttime="20170803 18:43:23.415"></status>
</kw>
<status endtime="20170803 18:43:23.416" status="PASS" starttime="20170803 18:43:23.414"></status>
</kw>
<status endtime="20170803 18:43:23.416" status="PASS" starttime="20170803 18:43:23.413"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170803 18:43:23.416" level="INFO">Delete All Sessions</msg>
<status endtime="20170803 18:43:23.416" status="PASS" starttime="20170803 18:43:23.416"></status>
</kw>
<msg timestamp="20170803 18:43:23.417" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:43:23.417" status="PASS" starttime="20170803 18:43:19.215"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:43:23.417" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:43:23.417" status="PASS" starttime="20170803 18:43:23.417"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170803 18:43:23.418" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170803 18:43:23.418" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170803 18:43:23.418" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170803 18:43:23.418" status="PASS" starttime="20170803 18:43:23.418"></status>
</kw>
<msg timestamp="20170803 18:43:23.418" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170803 18:43:23.418" status="PASS" starttime="20170803 18:43:19.214"></status>
</kw>
<msg timestamp="20170803 18:43:23.419" level="INFO">${power_state} = On</msg>
<status endtime="20170803 18:43:23.419" status="PASS" starttime="20170803 18:43:19.214"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170803 18:43:23.419" status="PASS" starttime="20170803 18:43:23.419"></status>
</kw>
<status endtime="20170803 18:43:23.419" status="PASS" starttime="20170803 18:43:19.213"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170803 18:43:23.423" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170803 18:43:23.423" status="PASS" starttime="20170803 18:43:23.423"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170803 18:43:23.424" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170803 18:43:23.424" status="PASS" starttime="20170803 18:43:23.423"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170803 18:43:23.424" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170803 18:43:23.424" status="PASS" starttime="20170803 18:43:23.424"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170803 18:43:23.425" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170803 18:43:23.425" status="PASS" starttime="20170803 18:43:23.425"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170803 18:43:24.055" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170803 18:43:24.056" status="PASS" starttime="20170803 18:43:23.426"></status>
</kw>
<msg timestamp="20170803 18:43:24.056" level="INFO">${status} = PASS</msg>
<msg timestamp="20170803 18:43:24.056" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:43:24.056" status="PASS" starttime="20170803 18:43:23.425"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170803 18:43:24.057" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:43:24.057" status="PASS" starttime="20170803 18:43:24.056"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:43:24.057" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:43:24.057" status="PASS" starttime="20170803 18:43:24.057"></status>
</kw>
<status endtime="20170803 18:43:24.057" status="PASS" starttime="20170803 18:43:23.422"></status>
</kw>
<status endtime="20170803 18:43:24.057" status="PASS" starttime="20170803 18:43:23.422"></status>
</kw>
<status endtime="20170803 18:43:24.058" status="PASS" starttime="20170803 18:43:23.421"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170803 18:43:24.058" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170803 18:43:24.058" status="PASS" starttime="20170803 18:43:24.058"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:43:24.060" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170803 18:43:24.060" status="PASS" starttime="20170803 18:43:24.060"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:43:24.061" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170803 18:43:24.061" status="PASS" starttime="20170803 18:43:24.061"></status>
</kw>
<status endtime="20170803 18:43:24.062" status="PASS" starttime="20170803 18:43:24.061"></status>
</kw>
<status endtime="20170803 18:43:24.062" status="PASS" starttime="20170803 18:43:24.059"></status>
</kw>
<status endtime="20170803 18:43:24.062" status="PASS" starttime="20170803 18:43:24.058"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170803 18:43:25.151" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170803 18:43:25.151" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:43:25.151" status="PASS" starttime="20170803 18:43:24.062"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:43:25.153" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:43:25.153" status="PASS" starttime="20170803 18:43:25.153"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:43:25.154" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:43:25.154" status="PASS" starttime="20170803 18:43:25.154"></status>
</kw>
<status endtime="20170803 18:43:25.154" status="PASS" starttime="20170803 18:43:25.153"></status>
</kw>
<status endtime="20170803 18:43:25.154" status="PASS" starttime="20170803 18:43:25.152"></status>
</kw>
<status endtime="20170803 18:43:25.154" status="PASS" starttime="20170803 18:43:25.151"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170803 18:43:25.155" level="INFO">Delete All Sessions</msg>
<status endtime="20170803 18:43:25.155" status="PASS" starttime="20170803 18:43:25.155"></status>
</kw>
<msg timestamp="20170803 18:43:25.155" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:43:25.155" status="PASS" starttime="20170803 18:43:23.420"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:43:25.156" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:43:25.156" status="PASS" starttime="20170803 18:43:25.155"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170803 18:43:25.156" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170803 18:43:25.156" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170803 18:43:25.156" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170803 18:43:25.157" status="PASS" starttime="20170803 18:43:25.156"></status>
</kw>
<msg timestamp="20170803 18:43:25.157" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170803 18:43:25.157" status="PASS" starttime="20170803 18:43:23.420"></status>
</kw>
<msg timestamp="20170803 18:43:25.157" level="INFO">${host_state} = Running</msg>
<status endtime="20170803 18:43:25.157" status="PASS" starttime="20170803 18:43:23.419"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170803 18:43:25.158" status="PASS" starttime="20170803 18:43:25.157"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170803 18:43:25.162" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170803 18:43:25.162" status="PASS" starttime="20170803 18:43:25.162"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170803 18:43:25.163" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170803 18:43:25.163" status="PASS" starttime="20170803 18:43:25.162"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170803 18:43:25.163" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170803 18:43:25.163" status="PASS" starttime="20170803 18:43:25.163"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170803 18:43:25.164" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170803 18:43:25.164" status="PASS" starttime="20170803 18:43:25.164"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170803 18:43:25.461" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170803 18:43:25.461" status="PASS" starttime="20170803 18:43:25.165"></status>
</kw>
<msg timestamp="20170803 18:43:25.462" level="INFO">${status} = PASS</msg>
<msg timestamp="20170803 18:43:25.462" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:43:25.462" status="PASS" starttime="20170803 18:43:25.164"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170803 18:43:25.462" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:43:25.462" status="PASS" starttime="20170803 18:43:25.462"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:43:25.463" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:43:25.463" status="PASS" starttime="20170803 18:43:25.463"></status>
</kw>
<status endtime="20170803 18:43:25.463" status="PASS" starttime="20170803 18:43:25.161"></status>
</kw>
<status endtime="20170803 18:43:25.463" status="PASS" starttime="20170803 18:43:25.160"></status>
</kw>
<status endtime="20170803 18:43:25.463" status="PASS" starttime="20170803 18:43:25.160"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170803 18:43:25.464" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170803 18:43:25.464" status="PASS" starttime="20170803 18:43:25.464"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:43:25.466" level="INFO">${msg} = URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170803 18:43:25.466" status="PASS" starttime="20170803 18:43:25.465"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:43:25.467" level="INFO">URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170803 18:43:25.467" status="PASS" starttime="20170803 18:43:25.467"></status>
</kw>
<status endtime="20170803 18:43:25.467" status="PASS" starttime="20170803 18:43:25.466"></status>
</kw>
<status endtime="20170803 18:43:25.467" status="PASS" starttime="20170803 18:43:25.465"></status>
</kw>
<status endtime="20170803 18:43:25.468" status="PASS" starttime="20170803 18:43:25.464"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170803 18:43:25.542" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170803 18:43:25.542" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:43:25.542" status="PASS" starttime="20170803 18:43:25.468"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:43:25.544" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:43:25.544" status="PASS" starttime="20170803 18:43:25.544"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:43:25.545" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:43:25.545" status="PASS" starttime="20170803 18:43:25.545"></status>
</kw>
<status endtime="20170803 18:43:25.545" status="PASS" starttime="20170803 18:43:25.544"></status>
</kw>
<status endtime="20170803 18:43:25.545" status="PASS" starttime="20170803 18:43:25.543"></status>
</kw>
<status endtime="20170803 18:43:25.545" status="PASS" starttime="20170803 18:43:25.543"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170803 18:43:25.546" level="INFO">Delete All Sessions</msg>
<status endtime="20170803 18:43:25.546" status="PASS" starttime="20170803 18:43:25.546"></status>
</kw>
<msg timestamp="20170803 18:43:25.546" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:43:25.546" status="PASS" starttime="20170803 18:43:25.159"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:43:25.547" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:43:25.547" status="PASS" starttime="20170803 18:43:25.546"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170803 18:43:25.547" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170803 18:43:25.547" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170803 18:43:25.547" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'Off'}</msg>
<status endtime="20170803 18:43:25.548" status="PASS" starttime="20170803 18:43:25.547"></status>
</kw>
<msg timestamp="20170803 18:43:25.548" level="INFO">${state} = Off</msg>
<status endtime="20170803 18:43:25.548" status="PASS" starttime="20170803 18:43:25.158"></status>
</kw>
<msg timestamp="20170803 18:43:25.548" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170803 18:43:25.548" status="PASS" starttime="20170803 18:43:25.158"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170803 18:43:25.549" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170803 18:43:25.549" status="FAIL" starttime="20170803 18:43:25.548"></status>
</kw>
<status endtime="20170803 18:43:25.549" status="FAIL" starttime="20170803 18:43:25.158"></status>
</kw>
<status endtime="20170803 18:43:25.549" status="FAIL" starttime="20170803 18:43:19.212"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170803 18:43:35.555" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170803 18:43:35.555" status="PASS" starttime="20170803 18:43:35.554"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170803 18:43:35.556" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170803 18:43:35.556" status="PASS" starttime="20170803 18:43:35.555"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170803 18:43:35.556" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170803 18:43:35.556" status="PASS" starttime="20170803 18:43:35.556"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170803 18:43:35.557" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170803 18:43:35.557" status="PASS" starttime="20170803 18:43:35.556"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170803 18:43:36.101" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170803 18:43:36.101" status="PASS" starttime="20170803 18:43:35.558"></status>
</kw>
<msg timestamp="20170803 18:43:36.101" level="INFO">${status} = PASS</msg>
<msg timestamp="20170803 18:43:36.101" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:43:36.101" status="PASS" starttime="20170803 18:43:35.557"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170803 18:43:36.102" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:43:36.102" status="PASS" starttime="20170803 18:43:36.102"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:43:36.103" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:43:36.103" status="PASS" starttime="20170803 18:43:36.102"></status>
</kw>
<status endtime="20170803 18:43:36.103" status="PASS" starttime="20170803 18:43:35.554"></status>
</kw>
<status endtime="20170803 18:43:36.103" status="PASS" starttime="20170803 18:43:35.553"></status>
</kw>
<status endtime="20170803 18:43:36.103" status="PASS" starttime="20170803 18:43:35.553"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170803 18:43:36.104" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170803 18:43:36.104" status="PASS" starttime="20170803 18:43:36.103"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:43:36.106" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170803 18:43:36.106" status="PASS" starttime="20170803 18:43:36.105"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:43:36.107" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170803 18:43:36.107" status="PASS" starttime="20170803 18:43:36.107"></status>
</kw>
<status endtime="20170803 18:43:36.108" status="PASS" starttime="20170803 18:43:36.106"></status>
</kw>
<status endtime="20170803 18:43:36.108" status="PASS" starttime="20170803 18:43:36.105"></status>
</kw>
<status endtime="20170803 18:43:36.108" status="PASS" starttime="20170803 18:43:36.104"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170803 18:43:39.499" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170803 18:43:39.499" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:43:39.499" status="PASS" starttime="20170803 18:43:36.108"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:43:39.501" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:43:39.501" status="PASS" starttime="20170803 18:43:39.501"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:43:39.502" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:43:39.502" status="PASS" starttime="20170803 18:43:39.502"></status>
</kw>
<status endtime="20170803 18:43:39.503" status="PASS" starttime="20170803 18:43:39.502"></status>
</kw>
<status endtime="20170803 18:43:39.503" status="PASS" starttime="20170803 18:43:39.500"></status>
</kw>
<status endtime="20170803 18:43:39.503" status="PASS" starttime="20170803 18:43:39.500"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170803 18:43:39.503" level="INFO">Delete All Sessions</msg>
<status endtime="20170803 18:43:39.503" status="PASS" starttime="20170803 18:43:39.503"></status>
</kw>
<msg timestamp="20170803 18:43:39.503" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:43:39.503" status="PASS" starttime="20170803 18:43:35.552"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:43:39.504" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:43:39.504" status="PASS" starttime="20170803 18:43:39.504"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170803 18:43:39.505" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170803 18:43:39.505" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170803 18:43:39.505" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20170803 18:43:39.505" status="PASS" starttime="20170803 18:43:39.504"></status>
</kw>
<msg timestamp="20170803 18:43:39.505" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170803 18:43:39.505" status="PASS" starttime="20170803 18:43:35.552"></status>
</kw>
<msg timestamp="20170803 18:43:39.505" level="INFO">${power_state} = Off</msg>
<status endtime="20170803 18:43:39.505" status="PASS" starttime="20170803 18:43:35.551"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20170803 18:43:39.506" level="FAIL">On != Off</msg>
<status endtime="20170803 18:43:39.506" status="FAIL" starttime="20170803 18:43:39.506"></status>
</kw>
<status endtime="20170803 18:43:39.506" status="FAIL" starttime="20170803 18:43:35.550"></status>
</kw>
<status endtime="20170803 18:43:39.506" status="FAIL" starttime="20170803 18:43:35.550"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170803 18:43:49.512" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170803 18:43:49.512" status="PASS" starttime="20170803 18:43:49.511"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170803 18:43:49.513" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170803 18:43:49.513" status="PASS" starttime="20170803 18:43:49.512"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170803 18:43:49.513" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170803 18:43:49.513" status="PASS" starttime="20170803 18:43:49.513"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170803 18:43:49.514" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170803 18:43:49.514" status="PASS" starttime="20170803 18:43:49.514"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170803 18:43:50.303" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170803 18:43:50.303" status="PASS" starttime="20170803 18:43:49.515"></status>
</kw>
<msg timestamp="20170803 18:43:50.303" level="INFO">${status} = PASS</msg>
<msg timestamp="20170803 18:43:50.303" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:43:50.303" status="PASS" starttime="20170803 18:43:49.514"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170803 18:43:50.304" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:43:50.304" status="PASS" starttime="20170803 18:43:50.304"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:43:50.305" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:43:50.305" status="PASS" starttime="20170803 18:43:50.304"></status>
</kw>
<status endtime="20170803 18:43:50.305" status="PASS" starttime="20170803 18:43:49.511"></status>
</kw>
<status endtime="20170803 18:43:50.305" status="PASS" starttime="20170803 18:43:49.510"></status>
</kw>
<status endtime="20170803 18:43:50.305" status="PASS" starttime="20170803 18:43:49.510"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170803 18:43:50.306" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170803 18:43:50.306" status="PASS" starttime="20170803 18:43:50.305"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:43:50.308" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170803 18:43:50.308" status="PASS" starttime="20170803 18:43:50.307"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:43:50.309" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170803 18:43:50.309" status="PASS" starttime="20170803 18:43:50.309"></status>
</kw>
<status endtime="20170803 18:43:50.309" status="PASS" starttime="20170803 18:43:50.308"></status>
</kw>
<status endtime="20170803 18:43:50.309" status="PASS" starttime="20170803 18:43:50.306"></status>
</kw>
<status endtime="20170803 18:43:50.309" status="PASS" starttime="20170803 18:43:50.306"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170803 18:43:50.908" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170803 18:43:50.908" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:43:50.908" status="PASS" starttime="20170803 18:43:50.310"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:43:50.910" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:43:50.910" status="PASS" starttime="20170803 18:43:50.909"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:43:50.911" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:43:50.911" status="PASS" starttime="20170803 18:43:50.911"></status>
</kw>
<status endtime="20170803 18:43:50.911" status="PASS" starttime="20170803 18:43:50.910"></status>
</kw>
<status endtime="20170803 18:43:50.911" status="PASS" starttime="20170803 18:43:50.909"></status>
</kw>
<status endtime="20170803 18:43:50.911" status="PASS" starttime="20170803 18:43:50.908"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170803 18:43:50.912" level="INFO">Delete All Sessions</msg>
<status endtime="20170803 18:43:50.912" status="PASS" starttime="20170803 18:43:50.911"></status>
</kw>
<msg timestamp="20170803 18:43:50.912" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:43:50.912" status="PASS" starttime="20170803 18:43:49.509"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:43:50.912" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:43:50.913" status="PASS" starttime="20170803 18:43:50.912"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170803 18:43:50.913" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170803 18:43:50.913" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170803 18:43:50.913" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170803 18:43:50.913" status="PASS" starttime="20170803 18:43:50.913"></status>
</kw>
<msg timestamp="20170803 18:43:50.914" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170803 18:43:50.914" status="PASS" starttime="20170803 18:43:49.508"></status>
</kw>
<msg timestamp="20170803 18:43:50.914" level="INFO">${power_state} = On</msg>
<status endtime="20170803 18:43:50.914" status="PASS" starttime="20170803 18:43:49.508"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170803 18:43:50.915" status="PASS" starttime="20170803 18:43:50.914"></status>
</kw>
<status endtime="20170803 18:43:50.915" status="PASS" starttime="20170803 18:43:49.508"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170803 18:43:50.919" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170803 18:43:50.919" status="PASS" starttime="20170803 18:43:50.918"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170803 18:43:50.919" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170803 18:43:50.920" status="PASS" starttime="20170803 18:43:50.919"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170803 18:43:50.920" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170803 18:43:50.920" status="PASS" starttime="20170803 18:43:50.920"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170803 18:43:50.921" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170803 18:43:50.921" status="PASS" starttime="20170803 18:43:50.920"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170803 18:43:52.018" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170803 18:43:52.018" status="PASS" starttime="20170803 18:43:50.921"></status>
</kw>
<msg timestamp="20170803 18:43:52.018" level="INFO">${status} = PASS</msg>
<msg timestamp="20170803 18:43:52.018" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:43:52.018" status="PASS" starttime="20170803 18:43:50.921"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170803 18:43:52.019" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:43:52.019" status="PASS" starttime="20170803 18:43:52.019"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:43:52.020" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:43:52.020" status="PASS" starttime="20170803 18:43:52.019"></status>
</kw>
<status endtime="20170803 18:43:52.020" status="PASS" starttime="20170803 18:43:50.917"></status>
</kw>
<status endtime="20170803 18:43:52.020" status="PASS" starttime="20170803 18:43:50.917"></status>
</kw>
<status endtime="20170803 18:43:52.020" status="PASS" starttime="20170803 18:43:50.916"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170803 18:43:52.021" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170803 18:43:52.021" status="PASS" starttime="20170803 18:43:52.020"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:43:52.023" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170803 18:43:52.023" status="PASS" starttime="20170803 18:43:52.022"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:43:52.024" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170803 18:43:52.024" status="PASS" starttime="20170803 18:43:52.024"></status>
</kw>
<status endtime="20170803 18:43:52.024" status="PASS" starttime="20170803 18:43:52.023"></status>
</kw>
<status endtime="20170803 18:43:52.024" status="PASS" starttime="20170803 18:43:52.022"></status>
</kw>
<status endtime="20170803 18:43:52.024" status="PASS" starttime="20170803 18:43:52.021"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170803 18:43:52.583" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170803 18:43:52.583" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:43:52.583" status="PASS" starttime="20170803 18:43:52.024"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:43:52.585" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:43:52.585" status="PASS" starttime="20170803 18:43:52.584"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:43:52.586" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:43:52.586" status="PASS" starttime="20170803 18:43:52.586"></status>
</kw>
<status endtime="20170803 18:43:52.586" status="PASS" starttime="20170803 18:43:52.585"></status>
</kw>
<status endtime="20170803 18:43:52.586" status="PASS" starttime="20170803 18:43:52.584"></status>
</kw>
<status endtime="20170803 18:43:52.587" status="PASS" starttime="20170803 18:43:52.583"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170803 18:43:52.587" level="INFO">Delete All Sessions</msg>
<status endtime="20170803 18:43:52.587" status="PASS" starttime="20170803 18:43:52.587"></status>
</kw>
<msg timestamp="20170803 18:43:52.587" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:43:52.587" status="PASS" starttime="20170803 18:43:50.916"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:43:52.589" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:43:52.589" status="PASS" starttime="20170803 18:43:52.587"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170803 18:43:52.590" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170803 18:43:52.590" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170803 18:43:52.590" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170803 18:43:52.590" status="PASS" starttime="20170803 18:43:52.589"></status>
</kw>
<msg timestamp="20170803 18:43:52.590" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170803 18:43:52.590" status="PASS" starttime="20170803 18:43:50.915"></status>
</kw>
<msg timestamp="20170803 18:43:52.590" level="INFO">${host_state} = Running</msg>
<status endtime="20170803 18:43:52.590" status="PASS" starttime="20170803 18:43:50.915"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170803 18:43:52.591" status="PASS" starttime="20170803 18:43:52.591"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170803 18:43:52.595" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170803 18:43:52.595" status="PASS" starttime="20170803 18:43:52.595"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170803 18:43:52.596" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170803 18:43:52.596" status="PASS" starttime="20170803 18:43:52.596"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170803 18:43:52.597" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170803 18:43:52.597" status="PASS" starttime="20170803 18:43:52.596"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170803 18:43:52.597" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170803 18:43:52.597" status="PASS" starttime="20170803 18:43:52.597"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170803 18:43:52.973" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170803 18:43:52.973" status="PASS" starttime="20170803 18:43:52.598"></status>
</kw>
<msg timestamp="20170803 18:43:52.973" level="INFO">${status} = PASS</msg>
<msg timestamp="20170803 18:43:52.973" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:43:52.973" status="PASS" starttime="20170803 18:43:52.598"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170803 18:43:52.974" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:43:52.974" status="PASS" starttime="20170803 18:43:52.974"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:43:52.975" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:43:52.975" status="PASS" starttime="20170803 18:43:52.975"></status>
</kw>
<status endtime="20170803 18:43:52.975" status="PASS" starttime="20170803 18:43:52.594"></status>
</kw>
<status endtime="20170803 18:43:52.975" status="PASS" starttime="20170803 18:43:52.594"></status>
</kw>
<status endtime="20170803 18:43:52.975" status="PASS" starttime="20170803 18:43:52.593"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170803 18:43:52.976" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170803 18:43:52.976" status="PASS" starttime="20170803 18:43:52.976"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:43:52.978" level="INFO">${msg} = URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170803 18:43:52.978" status="PASS" starttime="20170803 18:43:52.977"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:43:52.979" level="INFO">URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170803 18:43:52.979" status="PASS" starttime="20170803 18:43:52.979"></status>
</kw>
<status endtime="20170803 18:43:52.979" status="PASS" starttime="20170803 18:43:52.978"></status>
</kw>
<status endtime="20170803 18:43:52.979" status="PASS" starttime="20170803 18:43:52.977"></status>
</kw>
<status endtime="20170803 18:43:52.979" status="PASS" starttime="20170803 18:43:52.976"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170803 18:43:53.615" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170803 18:43:53.616" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:43:53.616" status="PASS" starttime="20170803 18:43:52.980"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:43:53.618" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:43:53.618" status="PASS" starttime="20170803 18:43:53.617"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:43:53.619" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:43:53.619" status="PASS" starttime="20170803 18:43:53.618"></status>
</kw>
<status endtime="20170803 18:43:53.619" status="PASS" starttime="20170803 18:43:53.618"></status>
</kw>
<status endtime="20170803 18:43:53.619" status="PASS" starttime="20170803 18:43:53.617"></status>
</kw>
<status endtime="20170803 18:43:53.619" status="PASS" starttime="20170803 18:43:53.616"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170803 18:43:53.619" level="INFO">Delete All Sessions</msg>
<status endtime="20170803 18:43:53.619" status="PASS" starttime="20170803 18:43:53.619"></status>
</kw>
<msg timestamp="20170803 18:43:53.620" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:43:53.620" status="PASS" starttime="20170803 18:43:52.592"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:43:53.620" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:43:53.620" status="PASS" starttime="20170803 18:43:53.620"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170803 18:43:53.621" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170803 18:43:53.621" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170803 18:43:53.621" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'Off'}</msg>
<status endtime="20170803 18:43:53.621" status="PASS" starttime="20170803 18:43:53.621"></status>
</kw>
<msg timestamp="20170803 18:43:53.621" level="INFO">${state} = Off</msg>
<status endtime="20170803 18:43:53.621" status="PASS" starttime="20170803 18:43:52.592"></status>
</kw>
<msg timestamp="20170803 18:43:53.622" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170803 18:43:53.622" status="PASS" starttime="20170803 18:43:52.591"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170803 18:43:53.622" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170803 18:43:53.622" status="FAIL" starttime="20170803 18:43:53.622"></status>
</kw>
<status endtime="20170803 18:43:53.623" status="FAIL" starttime="20170803 18:43:52.591"></status>
</kw>
<status endtime="20170803 18:43:53.623" status="FAIL" starttime="20170803 18:43:49.507"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170803 18:44:03.631" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170803 18:44:03.632" status="PASS" starttime="20170803 18:44:03.631"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170803 18:44:03.632" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170803 18:44:03.632" status="PASS" starttime="20170803 18:44:03.632"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170803 18:44:03.633" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170803 18:44:03.633" status="PASS" starttime="20170803 18:44:03.633"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170803 18:44:03.634" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170803 18:44:03.634" status="PASS" starttime="20170803 18:44:03.633"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170803 18:44:03.932" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170803 18:44:03.932" status="PASS" starttime="20170803 18:44:03.634"></status>
</kw>
<msg timestamp="20170803 18:44:03.932" level="INFO">${status} = PASS</msg>
<msg timestamp="20170803 18:44:03.932" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:44:03.932" status="PASS" starttime="20170803 18:44:03.634"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170803 18:44:03.933" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:44:03.933" status="PASS" starttime="20170803 18:44:03.932"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:44:03.933" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:44:03.934" status="PASS" starttime="20170803 18:44:03.933"></status>
</kw>
<status endtime="20170803 18:44:03.934" status="PASS" starttime="20170803 18:44:03.627"></status>
</kw>
<status endtime="20170803 18:44:03.934" status="PASS" starttime="20170803 18:44:03.627"></status>
</kw>
<status endtime="20170803 18:44:03.934" status="PASS" starttime="20170803 18:44:03.626"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170803 18:44:03.934" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170803 18:44:03.934" status="PASS" starttime="20170803 18:44:03.934"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:44:03.937" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170803 18:44:03.937" status="PASS" starttime="20170803 18:44:03.936"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:44:03.938" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170803 18:44:03.938" status="PASS" starttime="20170803 18:44:03.937"></status>
</kw>
<status endtime="20170803 18:44:03.938" status="PASS" starttime="20170803 18:44:03.937"></status>
</kw>
<status endtime="20170803 18:44:03.938" status="PASS" starttime="20170803 18:44:03.935"></status>
</kw>
<status endtime="20170803 18:44:03.938" status="PASS" starttime="20170803 18:44:03.935"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170803 18:44:04.032" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170803 18:44:04.033" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:44:04.033" status="PASS" starttime="20170803 18:44:03.938"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:44:04.034" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:44:04.034" status="PASS" starttime="20170803 18:44:04.034"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:44:04.036" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:44:04.036" status="PASS" starttime="20170803 18:44:04.035"></status>
</kw>
<status endtime="20170803 18:44:04.036" status="PASS" starttime="20170803 18:44:04.034"></status>
</kw>
<status endtime="20170803 18:44:04.036" status="PASS" starttime="20170803 18:44:04.033"></status>
</kw>
<status endtime="20170803 18:44:04.036" status="PASS" starttime="20170803 18:44:04.033"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170803 18:44:04.036" level="INFO">Delete All Sessions</msg>
<status endtime="20170803 18:44:04.036" status="PASS" starttime="20170803 18:44:04.036"></status>
</kw>
<msg timestamp="20170803 18:44:04.037" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:44:04.037" status="PASS" starttime="20170803 18:44:03.625"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:44:04.037" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:44:04.037" status="PASS" starttime="20170803 18:44:04.037"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170803 18:44:04.038" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170803 18:44:04.038" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170803 18:44:04.038" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170803 18:44:04.038" status="PASS" starttime="20170803 18:44:04.038"></status>
</kw>
<msg timestamp="20170803 18:44:04.038" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170803 18:44:04.038" status="PASS" starttime="20170803 18:44:03.625"></status>
</kw>
<msg timestamp="20170803 18:44:04.039" level="INFO">${power_state} = On</msg>
<status endtime="20170803 18:44:04.039" status="PASS" starttime="20170803 18:44:03.624"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170803 18:44:04.039" status="PASS" starttime="20170803 18:44:04.039"></status>
</kw>
<status endtime="20170803 18:44:04.039" status="PASS" starttime="20170803 18:44:03.624"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170803 18:44:04.043" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170803 18:44:04.043" status="PASS" starttime="20170803 18:44:04.043"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170803 18:44:04.044" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170803 18:44:04.044" status="PASS" starttime="20170803 18:44:04.044"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170803 18:44:04.044" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170803 18:44:04.045" status="PASS" starttime="20170803 18:44:04.044"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170803 18:44:04.045" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170803 18:44:04.045" status="PASS" starttime="20170803 18:44:04.045"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170803 18:44:04.239" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170803 18:44:04.239" status="PASS" starttime="20170803 18:44:04.046"></status>
</kw>
<msg timestamp="20170803 18:44:04.239" level="INFO">${status} = PASS</msg>
<msg timestamp="20170803 18:44:04.239" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:44:04.239" status="PASS" starttime="20170803 18:44:04.045"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170803 18:44:04.240" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:44:04.240" status="PASS" starttime="20170803 18:44:04.240"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:44:04.241" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:44:04.241" status="PASS" starttime="20170803 18:44:04.240"></status>
</kw>
<status endtime="20170803 18:44:04.241" status="PASS" starttime="20170803 18:44:04.042"></status>
</kw>
<status endtime="20170803 18:44:04.241" status="PASS" starttime="20170803 18:44:04.042"></status>
</kw>
<status endtime="20170803 18:44:04.241" status="PASS" starttime="20170803 18:44:04.041"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170803 18:44:04.242" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170803 18:44:04.242" status="PASS" starttime="20170803 18:44:04.241"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:44:04.244" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170803 18:44:04.244" status="PASS" starttime="20170803 18:44:04.243"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:44:04.245" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170803 18:44:04.245" status="PASS" starttime="20170803 18:44:04.245"></status>
</kw>
<status endtime="20170803 18:44:04.245" status="PASS" starttime="20170803 18:44:04.244"></status>
</kw>
<status endtime="20170803 18:44:04.245" status="PASS" starttime="20170803 18:44:04.242"></status>
</kw>
<status endtime="20170803 18:44:04.245" status="PASS" starttime="20170803 18:44:04.242"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170803 18:44:04.342" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170803 18:44:04.342" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:44:04.342" status="PASS" starttime="20170803 18:44:04.246"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:44:04.344" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:44:04.344" status="PASS" starttime="20170803 18:44:04.343"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:44:04.344" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:44:04.345" status="PASS" starttime="20170803 18:44:04.344"></status>
</kw>
<status endtime="20170803 18:44:04.345" status="PASS" starttime="20170803 18:44:04.344"></status>
</kw>
<status endtime="20170803 18:44:04.345" status="PASS" starttime="20170803 18:44:04.343"></status>
</kw>
<status endtime="20170803 18:44:04.345" status="PASS" starttime="20170803 18:44:04.342"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170803 18:44:04.345" level="INFO">Delete All Sessions</msg>
<status endtime="20170803 18:44:04.345" status="PASS" starttime="20170803 18:44:04.345"></status>
</kw>
<msg timestamp="20170803 18:44:04.346" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:44:04.346" status="PASS" starttime="20170803 18:44:04.040"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:44:04.346" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:44:04.346" status="PASS" starttime="20170803 18:44:04.346"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170803 18:44:04.347" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170803 18:44:04.347" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170803 18:44:04.347" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170803 18:44:04.347" status="PASS" starttime="20170803 18:44:04.347"></status>
</kw>
<msg timestamp="20170803 18:44:04.347" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170803 18:44:04.347" status="PASS" starttime="20170803 18:44:04.040"></status>
</kw>
<msg timestamp="20170803 18:44:04.348" level="INFO">${host_state} = Running</msg>
<status endtime="20170803 18:44:04.348" status="PASS" starttime="20170803 18:44:04.040"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170803 18:44:04.348" status="PASS" starttime="20170803 18:44:04.348"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170803 18:44:04.352" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170803 18:44:04.352" status="PASS" starttime="20170803 18:44:04.352"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170803 18:44:04.353" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170803 18:44:04.353" status="PASS" starttime="20170803 18:44:04.353"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170803 18:44:04.354" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170803 18:44:04.354" status="PASS" starttime="20170803 18:44:04.353"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170803 18:44:04.354" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170803 18:44:04.354" status="PASS" starttime="20170803 18:44:04.354"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170803 18:44:04.546" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170803 18:44:04.546" status="PASS" starttime="20170803 18:44:04.355"></status>
</kw>
<msg timestamp="20170803 18:44:04.546" level="INFO">${status} = PASS</msg>
<msg timestamp="20170803 18:44:04.547" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:44:04.547" status="PASS" starttime="20170803 18:44:04.355"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170803 18:44:04.547" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:44:04.547" status="PASS" starttime="20170803 18:44:04.547"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:44:04.548" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:44:04.548" status="PASS" starttime="20170803 18:44:04.548"></status>
</kw>
<status endtime="20170803 18:44:04.548" status="PASS" starttime="20170803 18:44:04.351"></status>
</kw>
<status endtime="20170803 18:44:04.548" status="PASS" starttime="20170803 18:44:04.351"></status>
</kw>
<status endtime="20170803 18:44:04.548" status="PASS" starttime="20170803 18:44:04.350"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170803 18:44:04.549" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170803 18:44:04.549" status="PASS" starttime="20170803 18:44:04.549"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:44:04.551" level="INFO">${msg} = URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170803 18:44:04.551" status="PASS" starttime="20170803 18:44:04.551"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:44:04.552" level="INFO">URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170803 18:44:04.552" status="PASS" starttime="20170803 18:44:04.552"></status>
</kw>
<status endtime="20170803 18:44:04.552" status="PASS" starttime="20170803 18:44:04.551"></status>
</kw>
<status endtime="20170803 18:44:04.553" status="PASS" starttime="20170803 18:44:04.550"></status>
</kw>
<status endtime="20170803 18:44:04.553" status="PASS" starttime="20170803 18:44:04.549"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170803 18:44:04.635" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170803 18:44:04.635" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:44:04.635" status="PASS" starttime="20170803 18:44:04.553"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:44:04.637" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:44:04.637" status="PASS" starttime="20170803 18:44:04.636"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:44:04.638" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:44:04.638" status="PASS" starttime="20170803 18:44:04.638"></status>
</kw>
<status endtime="20170803 18:44:04.638" status="PASS" starttime="20170803 18:44:04.637"></status>
</kw>
<status endtime="20170803 18:44:04.638" status="PASS" starttime="20170803 18:44:04.636"></status>
</kw>
<status endtime="20170803 18:44:04.638" status="PASS" starttime="20170803 18:44:04.636"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170803 18:44:04.639" level="INFO">Delete All Sessions</msg>
<status endtime="20170803 18:44:04.639" status="PASS" starttime="20170803 18:44:04.639"></status>
</kw>
<msg timestamp="20170803 18:44:04.639" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:44:04.639" status="PASS" starttime="20170803 18:44:04.350"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:44:04.640" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:44:04.640" status="PASS" starttime="20170803 18:44:04.639"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170803 18:44:04.640" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170803 18:44:04.640" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170803 18:44:04.640" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'Off'}</msg>
<status endtime="20170803 18:44:04.640" status="PASS" starttime="20170803 18:44:04.640"></status>
</kw>
<msg timestamp="20170803 18:44:04.641" level="INFO">${state} = Off</msg>
<status endtime="20170803 18:44:04.641" status="PASS" starttime="20170803 18:44:04.349"></status>
</kw>
<msg timestamp="20170803 18:44:04.641" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170803 18:44:04.641" status="PASS" starttime="20170803 18:44:04.349"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170803 18:44:04.642" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170803 18:44:04.642" status="FAIL" starttime="20170803 18:44:04.641"></status>
</kw>
<status endtime="20170803 18:44:04.642" status="FAIL" starttime="20170803 18:44:04.348"></status>
</kw>
<status endtime="20170803 18:44:04.642" status="FAIL" starttime="20170803 18:44:03.623"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170803 18:44:14.648" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170803 18:44:14.648" status="PASS" starttime="20170803 18:44:14.647"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170803 18:44:14.649" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170803 18:44:14.649" status="PASS" starttime="20170803 18:44:14.648"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170803 18:44:14.649" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170803 18:44:14.649" status="PASS" starttime="20170803 18:44:14.649"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170803 18:44:14.650" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170803 18:44:14.650" status="PASS" starttime="20170803 18:44:14.650"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170803 18:44:14.863" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170803 18:44:14.863" status="PASS" starttime="20170803 18:44:14.651"></status>
</kw>
<msg timestamp="20170803 18:44:14.863" level="INFO">${status} = PASS</msg>
<msg timestamp="20170803 18:44:14.863" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:44:14.863" status="PASS" starttime="20170803 18:44:14.650"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170803 18:44:14.864" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:44:14.864" status="PASS" starttime="20170803 18:44:14.864"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:44:14.865" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:44:14.865" status="PASS" starttime="20170803 18:44:14.864"></status>
</kw>
<status endtime="20170803 18:44:14.865" status="PASS" starttime="20170803 18:44:14.647"></status>
</kw>
<status endtime="20170803 18:44:14.865" status="PASS" starttime="20170803 18:44:14.646"></status>
</kw>
<status endtime="20170803 18:44:14.865" status="PASS" starttime="20170803 18:44:14.645"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170803 18:44:14.866" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170803 18:44:14.866" status="PASS" starttime="20170803 18:44:14.865"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:44:14.868" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170803 18:44:14.868" status="PASS" starttime="20170803 18:44:14.867"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:44:14.869" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170803 18:44:14.869" status="PASS" starttime="20170803 18:44:14.868"></status>
</kw>
<status endtime="20170803 18:44:14.869" status="PASS" starttime="20170803 18:44:14.868"></status>
</kw>
<status endtime="20170803 18:44:14.869" status="PASS" starttime="20170803 18:44:14.866"></status>
</kw>
<status endtime="20170803 18:44:14.869" status="PASS" starttime="20170803 18:44:14.866"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170803 18:44:14.933" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170803 18:44:14.933" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:44:14.933" status="PASS" starttime="20170803 18:44:14.869"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:44:14.935" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:44:14.935" status="PASS" starttime="20170803 18:44:14.934"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:44:14.936" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:44:14.936" status="PASS" starttime="20170803 18:44:14.936"></status>
</kw>
<status endtime="20170803 18:44:14.937" status="PASS" starttime="20170803 18:44:14.936"></status>
</kw>
<status endtime="20170803 18:44:14.937" status="PASS" starttime="20170803 18:44:14.934"></status>
</kw>
<status endtime="20170803 18:44:14.937" status="PASS" starttime="20170803 18:44:14.933"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170803 18:44:14.937" level="INFO">Delete All Sessions</msg>
<status endtime="20170803 18:44:14.937" status="PASS" starttime="20170803 18:44:14.937"></status>
</kw>
<msg timestamp="20170803 18:44:14.937" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:44:14.937" status="PASS" starttime="20170803 18:44:14.644"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:44:14.938" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:44:14.938" status="PASS" starttime="20170803 18:44:14.938"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170803 18:44:14.939" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170803 18:44:14.939" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170803 18:44:14.939" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170803 18:44:14.939" status="PASS" starttime="20170803 18:44:14.938"></status>
</kw>
<msg timestamp="20170803 18:44:14.939" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170803 18:44:14.939" status="PASS" starttime="20170803 18:44:14.644"></status>
</kw>
<msg timestamp="20170803 18:44:14.939" level="INFO">${power_state} = On</msg>
<status endtime="20170803 18:44:14.939" status="PASS" starttime="20170803 18:44:14.643"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170803 18:44:14.940" status="PASS" starttime="20170803 18:44:14.940"></status>
</kw>
<status endtime="20170803 18:44:14.940" status="PASS" starttime="20170803 18:44:14.643"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170803 18:44:14.944" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170803 18:44:14.944" status="PASS" starttime="20170803 18:44:14.943"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170803 18:44:14.944" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170803 18:44:14.945" status="PASS" starttime="20170803 18:44:14.944"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170803 18:44:14.945" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170803 18:44:14.945" status="PASS" starttime="20170803 18:44:14.945"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170803 18:44:14.946" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170803 18:44:14.946" status="PASS" starttime="20170803 18:44:14.945"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170803 18:44:15.127" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170803 18:44:15.127" status="PASS" starttime="20170803 18:44:14.946"></status>
</kw>
<msg timestamp="20170803 18:44:15.127" level="INFO">${status} = PASS</msg>
<msg timestamp="20170803 18:44:15.127" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:44:15.128" status="PASS" starttime="20170803 18:44:14.946"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170803 18:44:15.128" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:44:15.128" status="PASS" starttime="20170803 18:44:15.128"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:44:15.129" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:44:15.129" status="PASS" starttime="20170803 18:44:15.129"></status>
</kw>
<status endtime="20170803 18:44:15.129" status="PASS" starttime="20170803 18:44:14.943"></status>
</kw>
<status endtime="20170803 18:44:15.129" status="PASS" starttime="20170803 18:44:14.942"></status>
</kw>
<status endtime="20170803 18:44:15.129" status="PASS" starttime="20170803 18:44:14.942"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170803 18:44:15.130" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170803 18:44:15.130" status="PASS" starttime="20170803 18:44:15.130"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:44:15.132" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170803 18:44:15.132" status="PASS" starttime="20170803 18:44:15.131"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:44:15.133" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170803 18:44:15.133" status="PASS" starttime="20170803 18:44:15.133"></status>
</kw>
<status endtime="20170803 18:44:15.134" status="PASS" starttime="20170803 18:44:15.133"></status>
</kw>
<status endtime="20170803 18:44:15.134" status="PASS" starttime="20170803 18:44:15.131"></status>
</kw>
<status endtime="20170803 18:44:15.134" status="PASS" starttime="20170803 18:44:15.130"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170803 18:44:15.223" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170803 18:44:15.223" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:44:15.223" status="PASS" starttime="20170803 18:44:15.134"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:44:15.225" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:44:15.225" status="PASS" starttime="20170803 18:44:15.224"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:44:15.225" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:44:15.226" status="PASS" starttime="20170803 18:44:15.225"></status>
</kw>
<status endtime="20170803 18:44:15.226" status="PASS" starttime="20170803 18:44:15.225"></status>
</kw>
<status endtime="20170803 18:44:15.226" status="PASS" starttime="20170803 18:44:15.224"></status>
</kw>
<status endtime="20170803 18:44:15.226" status="PASS" starttime="20170803 18:44:15.223"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170803 18:44:15.226" level="INFO">Delete All Sessions</msg>
<status endtime="20170803 18:44:15.226" status="PASS" starttime="20170803 18:44:15.226"></status>
</kw>
<msg timestamp="20170803 18:44:15.227" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:44:15.227" status="PASS" starttime="20170803 18:44:14.941"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:44:15.227" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:44:15.227" status="PASS" starttime="20170803 18:44:15.227"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170803 18:44:15.228" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170803 18:44:15.228" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170803 18:44:15.228" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170803 18:44:15.228" status="PASS" starttime="20170803 18:44:15.227"></status>
</kw>
<msg timestamp="20170803 18:44:15.228" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170803 18:44:15.228" status="PASS" starttime="20170803 18:44:14.941"></status>
</kw>
<msg timestamp="20170803 18:44:15.229" level="INFO">${host_state} = Running</msg>
<status endtime="20170803 18:44:15.229" status="PASS" starttime="20170803 18:44:14.940"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170803 18:44:15.229" status="PASS" starttime="20170803 18:44:15.229"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170803 18:44:15.233" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170803 18:44:15.233" status="PASS" starttime="20170803 18:44:15.233"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170803 18:44:15.234" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170803 18:44:15.234" status="PASS" starttime="20170803 18:44:15.234"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170803 18:44:15.235" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170803 18:44:15.235" status="PASS" starttime="20170803 18:44:15.234"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170803 18:44:15.235" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170803 18:44:15.235" status="PASS" starttime="20170803 18:44:15.235"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170803 18:44:15.446" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170803 18:44:15.446" status="PASS" starttime="20170803 18:44:15.236"></status>
</kw>
<msg timestamp="20170803 18:44:15.446" level="INFO">${status} = PASS</msg>
<msg timestamp="20170803 18:44:15.447" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:44:15.447" status="PASS" starttime="20170803 18:44:15.235"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170803 18:44:15.447" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:44:15.447" status="PASS" starttime="20170803 18:44:15.447"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:44:15.448" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:44:15.448" status="PASS" starttime="20170803 18:44:15.448"></status>
</kw>
<status endtime="20170803 18:44:15.448" status="PASS" starttime="20170803 18:44:15.232"></status>
</kw>
<status endtime="20170803 18:44:15.448" status="PASS" starttime="20170803 18:44:15.232"></status>
</kw>
<status endtime="20170803 18:44:15.448" status="PASS" starttime="20170803 18:44:15.231"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170803 18:44:15.449" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170803 18:44:15.449" status="PASS" starttime="20170803 18:44:15.449"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:44:15.451" level="INFO">${msg} = URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170803 18:44:15.451" status="PASS" starttime="20170803 18:44:15.450"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:44:15.452" level="INFO">URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170803 18:44:15.452" status="PASS" starttime="20170803 18:44:15.452"></status>
</kw>
<status endtime="20170803 18:44:15.452" status="PASS" starttime="20170803 18:44:15.451"></status>
</kw>
<status endtime="20170803 18:44:15.452" status="PASS" starttime="20170803 18:44:15.450"></status>
</kw>
<status endtime="20170803 18:44:15.452" status="PASS" starttime="20170803 18:44:15.449"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170803 18:44:15.545" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170803 18:44:15.545" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:44:15.545" status="PASS" starttime="20170803 18:44:15.453"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:44:15.547" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:44:15.547" status="PASS" starttime="20170803 18:44:15.547"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:44:15.548" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:44:15.548" status="PASS" starttime="20170803 18:44:15.548"></status>
</kw>
<status endtime="20170803 18:44:15.548" status="PASS" starttime="20170803 18:44:15.547"></status>
</kw>
<status endtime="20170803 18:44:15.548" status="PASS" starttime="20170803 18:44:15.546"></status>
</kw>
<status endtime="20170803 18:44:15.548" status="PASS" starttime="20170803 18:44:15.546"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170803 18:44:15.549" level="INFO">Delete All Sessions</msg>
<status endtime="20170803 18:44:15.549" status="PASS" starttime="20170803 18:44:15.549"></status>
</kw>
<msg timestamp="20170803 18:44:15.549" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:44:15.549" status="PASS" starttime="20170803 18:44:15.231"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:44:15.550" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:44:15.550" status="PASS" starttime="20170803 18:44:15.549"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170803 18:44:15.550" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170803 18:44:15.550" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170803 18:44:15.550" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'Off'}</msg>
<status endtime="20170803 18:44:15.551" status="PASS" starttime="20170803 18:44:15.550"></status>
</kw>
<msg timestamp="20170803 18:44:15.551" level="INFO">${state} = Off</msg>
<status endtime="20170803 18:44:15.551" status="PASS" starttime="20170803 18:44:15.230"></status>
</kw>
<msg timestamp="20170803 18:44:15.551" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170803 18:44:15.551" status="PASS" starttime="20170803 18:44:15.230"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170803 18:44:15.552" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170803 18:44:15.552" status="FAIL" starttime="20170803 18:44:15.551"></status>
</kw>
<status endtime="20170803 18:44:15.552" status="FAIL" starttime="20170803 18:44:15.229"></status>
</kw>
<status endtime="20170803 18:44:15.552" status="FAIL" starttime="20170803 18:44:14.642"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170803 18:44:25.557" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170803 18:44:25.558" status="PASS" starttime="20170803 18:44:25.557"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170803 18:44:25.558" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170803 18:44:25.558" status="PASS" starttime="20170803 18:44:25.558"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170803 18:44:25.559" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170803 18:44:25.559" status="PASS" starttime="20170803 18:44:25.559"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170803 18:44:25.560" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170803 18:44:25.560" status="PASS" starttime="20170803 18:44:25.559"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170803 18:44:26.575" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170803 18:44:26.575" status="PASS" starttime="20170803 18:44:25.561"></status>
</kw>
<msg timestamp="20170803 18:44:26.575" level="INFO">${status} = PASS</msg>
<msg timestamp="20170803 18:44:26.575" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:44:26.575" status="PASS" starttime="20170803 18:44:25.560"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170803 18:44:26.576" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:44:26.576" status="PASS" starttime="20170803 18:44:26.576"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:44:26.577" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:44:26.577" status="PASS" starttime="20170803 18:44:26.577"></status>
</kw>
<status endtime="20170803 18:44:26.577" status="PASS" starttime="20170803 18:44:25.557"></status>
</kw>
<status endtime="20170803 18:44:26.577" status="PASS" starttime="20170803 18:44:25.556"></status>
</kw>
<status endtime="20170803 18:44:26.577" status="PASS" starttime="20170803 18:44:25.555"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170803 18:44:26.578" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170803 18:44:26.578" status="PASS" starttime="20170803 18:44:26.578"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:44:26.580" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170803 18:44:26.580" status="PASS" starttime="20170803 18:44:26.579"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:44:26.581" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170803 18:44:26.581" status="PASS" starttime="20170803 18:44:26.581"></status>
</kw>
<status endtime="20170803 18:44:26.581" status="PASS" starttime="20170803 18:44:26.580"></status>
</kw>
<status endtime="20170803 18:44:26.581" status="PASS" starttime="20170803 18:44:26.579"></status>
</kw>
<status endtime="20170803 18:44:26.581" status="PASS" starttime="20170803 18:44:26.578"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170803 18:44:30.155" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170803 18:44:30.155" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:44:30.156" status="PASS" starttime="20170803 18:44:26.582"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:44:30.158" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:44:30.158" status="PASS" starttime="20170803 18:44:30.157"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:44:30.159" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:44:30.159" status="PASS" starttime="20170803 18:44:30.159"></status>
</kw>
<status endtime="20170803 18:44:30.159" status="PASS" starttime="20170803 18:44:30.158"></status>
</kw>
<status endtime="20170803 18:44:30.159" status="PASS" starttime="20170803 18:44:30.157"></status>
</kw>
<status endtime="20170803 18:44:30.159" status="PASS" starttime="20170803 18:44:30.156"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170803 18:44:30.160" level="INFO">Delete All Sessions</msg>
<status endtime="20170803 18:44:30.160" status="PASS" starttime="20170803 18:44:30.160"></status>
</kw>
<msg timestamp="20170803 18:44:30.160" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:44:30.160" status="PASS" starttime="20170803 18:44:25.554"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:44:30.161" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:44:30.161" status="PASS" starttime="20170803 18:44:30.160"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170803 18:44:30.161" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170803 18:44:30.161" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170803 18:44:30.162" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170803 18:44:30.162" status="PASS" starttime="20170803 18:44:30.161"></status>
</kw>
<msg timestamp="20170803 18:44:30.162" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170803 18:44:30.162" status="PASS" starttime="20170803 18:44:25.554"></status>
</kw>
<msg timestamp="20170803 18:44:30.162" level="INFO">${power_state} = On</msg>
<status endtime="20170803 18:44:30.162" status="PASS" starttime="20170803 18:44:25.553"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170803 18:44:30.163" status="PASS" starttime="20170803 18:44:30.163"></status>
</kw>
<status endtime="20170803 18:44:30.163" status="PASS" starttime="20170803 18:44:25.553"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170803 18:44:30.166" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170803 18:44:30.167" status="PASS" starttime="20170803 18:44:30.166"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170803 18:44:30.167" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170803 18:44:30.167" status="PASS" starttime="20170803 18:44:30.167"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170803 18:44:30.168" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170803 18:44:30.168" status="PASS" starttime="20170803 18:44:30.168"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170803 18:44:30.169" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170803 18:44:30.169" status="PASS" starttime="20170803 18:44:30.168"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170803 18:44:30.815" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170803 18:44:30.815" status="PASS" starttime="20170803 18:44:30.169"></status>
</kw>
<msg timestamp="20170803 18:44:30.815" level="INFO">${status} = PASS</msg>
<msg timestamp="20170803 18:44:30.815" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:44:30.815" status="PASS" starttime="20170803 18:44:30.169"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170803 18:44:30.816" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:44:30.816" status="PASS" starttime="20170803 18:44:30.816"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:44:30.817" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:44:30.817" status="PASS" starttime="20170803 18:44:30.816"></status>
</kw>
<status endtime="20170803 18:44:30.817" status="PASS" starttime="20170803 18:44:30.166"></status>
</kw>
<status endtime="20170803 18:44:30.817" status="PASS" starttime="20170803 18:44:30.165"></status>
</kw>
<status endtime="20170803 18:44:30.817" status="PASS" starttime="20170803 18:44:30.165"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170803 18:44:30.818" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170803 18:44:30.818" status="PASS" starttime="20170803 18:44:30.817"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:44:30.820" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170803 18:44:30.820" status="PASS" starttime="20170803 18:44:30.819"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:44:30.821" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170803 18:44:30.821" status="PASS" starttime="20170803 18:44:30.821"></status>
</kw>
<status endtime="20170803 18:44:30.821" status="PASS" starttime="20170803 18:44:30.821"></status>
</kw>
<status endtime="20170803 18:44:30.822" status="PASS" starttime="20170803 18:44:30.819"></status>
</kw>
<status endtime="20170803 18:44:30.822" status="PASS" starttime="20170803 18:44:30.818"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170803 18:44:31.065" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170803 18:44:31.065" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:44:31.065" status="PASS" starttime="20170803 18:44:30.822"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:44:31.067" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:44:31.067" status="PASS" starttime="20170803 18:44:31.066"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:44:31.067" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:44:31.068" status="PASS" starttime="20170803 18:44:31.067"></status>
</kw>
<status endtime="20170803 18:44:31.068" status="PASS" starttime="20170803 18:44:31.067"></status>
</kw>
<status endtime="20170803 18:44:31.068" status="PASS" starttime="20170803 18:44:31.066"></status>
</kw>
<status endtime="20170803 18:44:31.068" status="PASS" starttime="20170803 18:44:31.065"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170803 18:44:31.068" level="INFO">Delete All Sessions</msg>
<status endtime="20170803 18:44:31.068" status="PASS" starttime="20170803 18:44:31.068"></status>
</kw>
<msg timestamp="20170803 18:44:31.069" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:44:31.069" status="PASS" starttime="20170803 18:44:30.164"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:44:31.069" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:44:31.069" status="PASS" starttime="20170803 18:44:31.069"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170803 18:44:31.070" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170803 18:44:31.070" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170803 18:44:31.070" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170803 18:44:31.070" status="PASS" starttime="20170803 18:44:31.070"></status>
</kw>
<msg timestamp="20170803 18:44:31.070" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170803 18:44:31.070" status="PASS" starttime="20170803 18:44:30.163"></status>
</kw>
<msg timestamp="20170803 18:44:31.071" level="INFO">${host_state} = Running</msg>
<status endtime="20170803 18:44:31.071" status="PASS" starttime="20170803 18:44:30.163"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170803 18:44:31.071" status="PASS" starttime="20170803 18:44:31.071"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170803 18:44:31.075" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170803 18:44:31.075" status="PASS" starttime="20170803 18:44:31.075"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170803 18:44:31.076" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170803 18:44:31.076" status="PASS" starttime="20170803 18:44:31.076"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170803 18:44:31.077" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170803 18:44:31.077" status="PASS" starttime="20170803 18:44:31.076"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170803 18:44:31.077" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170803 18:44:31.077" status="PASS" starttime="20170803 18:44:31.077"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170803 18:44:31.521" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170803 18:44:31.522" status="PASS" starttime="20170803 18:44:31.078"></status>
</kw>
<msg timestamp="20170803 18:44:31.522" level="INFO">${status} = PASS</msg>
<msg timestamp="20170803 18:44:31.522" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:44:31.522" status="PASS" starttime="20170803 18:44:31.078"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170803 18:44:31.522" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:44:31.522" status="PASS" starttime="20170803 18:44:31.522"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:44:31.523" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:44:31.523" status="PASS" starttime="20170803 18:44:31.523"></status>
</kw>
<status endtime="20170803 18:44:31.523" status="PASS" starttime="20170803 18:44:31.074"></status>
</kw>
<status endtime="20170803 18:44:31.523" status="PASS" starttime="20170803 18:44:31.074"></status>
</kw>
<status endtime="20170803 18:44:31.523" status="PASS" starttime="20170803 18:44:31.073"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170803 18:44:31.524" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170803 18:44:31.524" status="PASS" starttime="20170803 18:44:31.524"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:44:31.526" level="INFO">${msg} = URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170803 18:44:31.526" status="PASS" starttime="20170803 18:44:31.525"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:44:31.527" level="INFO">URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170803 18:44:31.527" status="PASS" starttime="20170803 18:44:31.527"></status>
</kw>
<status endtime="20170803 18:44:31.527" status="PASS" starttime="20170803 18:44:31.526"></status>
</kw>
<status endtime="20170803 18:44:31.527" status="PASS" starttime="20170803 18:44:31.525"></status>
</kw>
<status endtime="20170803 18:44:31.527" status="PASS" starttime="20170803 18:44:31.524"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170803 18:44:31.635" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170803 18:44:31.635" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:44:31.635" status="PASS" starttime="20170803 18:44:31.528"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:44:31.637" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:44:31.637" status="PASS" starttime="20170803 18:44:31.636"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:44:31.638" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:44:31.638" status="PASS" starttime="20170803 18:44:31.637"></status>
</kw>
<status endtime="20170803 18:44:31.638" status="PASS" starttime="20170803 18:44:31.637"></status>
</kw>
<status endtime="20170803 18:44:31.638" status="PASS" starttime="20170803 18:44:31.636"></status>
</kw>
<status endtime="20170803 18:44:31.638" status="PASS" starttime="20170803 18:44:31.635"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170803 18:44:31.638" level="INFO">Delete All Sessions</msg>
<status endtime="20170803 18:44:31.638" status="PASS" starttime="20170803 18:44:31.638"></status>
</kw>
<msg timestamp="20170803 18:44:31.639" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:44:31.639" status="PASS" starttime="20170803 18:44:31.073"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:44:31.639" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:44:31.639" status="PASS" starttime="20170803 18:44:31.639"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170803 18:44:31.640" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170803 18:44:31.640" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170803 18:44:31.640" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'Off'}</msg>
<status endtime="20170803 18:44:31.640" status="PASS" starttime="20170803 18:44:31.640"></status>
</kw>
<msg timestamp="20170803 18:44:31.640" level="INFO">${state} = Off</msg>
<status endtime="20170803 18:44:31.640" status="PASS" starttime="20170803 18:44:31.072"></status>
</kw>
<msg timestamp="20170803 18:44:31.641" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170803 18:44:31.641" status="PASS" starttime="20170803 18:44:31.072"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170803 18:44:31.641" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170803 18:44:31.641" status="FAIL" starttime="20170803 18:44:31.641"></status>
</kw>
<status endtime="20170803 18:44:31.642" status="FAIL" starttime="20170803 18:44:31.071"></status>
</kw>
<status endtime="20170803 18:44:31.642" status="FAIL" starttime="20170803 18:44:25.552"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170803 18:44:41.650" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170803 18:44:41.650" status="PASS" starttime="20170803 18:44:41.649"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170803 18:44:41.651" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170803 18:44:41.651" status="PASS" starttime="20170803 18:44:41.651"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170803 18:44:41.652" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170803 18:44:41.652" status="PASS" starttime="20170803 18:44:41.651"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170803 18:44:41.652" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170803 18:44:41.653" status="PASS" starttime="20170803 18:44:41.652"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170803 18:44:42.660" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170803 18:44:42.660" status="PASS" starttime="20170803 18:44:41.653"></status>
</kw>
<msg timestamp="20170803 18:44:42.660" level="INFO">${status} = PASS</msg>
<msg timestamp="20170803 18:44:42.660" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:44:42.660" status="PASS" starttime="20170803 18:44:41.653"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170803 18:44:42.661" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:44:42.661" status="PASS" starttime="20170803 18:44:42.660"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:44:42.661" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:44:42.662" status="PASS" starttime="20170803 18:44:42.661"></status>
</kw>
<status endtime="20170803 18:44:42.662" status="PASS" starttime="20170803 18:44:41.649"></status>
</kw>
<status endtime="20170803 18:44:42.662" status="PASS" starttime="20170803 18:44:41.648"></status>
</kw>
<status endtime="20170803 18:44:42.662" status="PASS" starttime="20170803 18:44:41.645"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170803 18:44:42.662" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170803 18:44:42.663" status="PASS" starttime="20170803 18:44:42.662"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:44:42.665" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170803 18:44:42.665" status="PASS" starttime="20170803 18:44:42.664"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:44:42.666" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170803 18:44:42.666" status="PASS" starttime="20170803 18:44:42.665"></status>
</kw>
<status endtime="20170803 18:44:42.666" status="PASS" starttime="20170803 18:44:42.665"></status>
</kw>
<status endtime="20170803 18:44:42.666" status="PASS" starttime="20170803 18:44:42.663"></status>
</kw>
<status endtime="20170803 18:44:42.666" status="PASS" starttime="20170803 18:44:42.663"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170803 18:44:48.982" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170803 18:44:48.982" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:44:48.982" status="PASS" starttime="20170803 18:44:42.666"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:44:48.984" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:44:48.984" status="PASS" starttime="20170803 18:44:48.983"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:44:48.985" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:44:48.985" status="PASS" starttime="20170803 18:44:48.985"></status>
</kw>
<status endtime="20170803 18:44:48.986" status="PASS" starttime="20170803 18:44:48.985"></status>
</kw>
<status endtime="20170803 18:44:48.986" status="PASS" starttime="20170803 18:44:48.983"></status>
</kw>
<status endtime="20170803 18:44:48.986" status="PASS" starttime="20170803 18:44:48.982"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170803 18:44:48.986" level="INFO">Delete All Sessions</msg>
<status endtime="20170803 18:44:48.986" status="PASS" starttime="20170803 18:44:48.986"></status>
</kw>
<msg timestamp="20170803 18:44:48.986" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:44:48.986" status="PASS" starttime="20170803 18:44:41.644"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:44:48.987" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:44:48.987" status="PASS" starttime="20170803 18:44:48.987"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170803 18:44:48.988" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170803 18:44:48.988" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170803 18:44:48.988" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20170803 18:44:48.988" status="PASS" starttime="20170803 18:44:48.987"></status>
</kw>
<msg timestamp="20170803 18:44:48.988" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170803 18:44:48.988" status="PASS" starttime="20170803 18:44:41.644"></status>
</kw>
<msg timestamp="20170803 18:44:48.988" level="INFO">${power_state} = Off</msg>
<status endtime="20170803 18:44:48.988" status="PASS" starttime="20170803 18:44:41.643"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20170803 18:44:48.989" level="FAIL">On != Off</msg>
<status endtime="20170803 18:44:48.989" status="FAIL" starttime="20170803 18:44:48.989"></status>
</kw>
<status endtime="20170803 18:44:48.989" status="FAIL" starttime="20170803 18:44:41.643"></status>
</kw>
<status endtime="20170803 18:44:48.989" status="FAIL" starttime="20170803 18:44:41.642"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170803 18:44:58.995" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170803 18:44:58.995" status="PASS" starttime="20170803 18:44:58.994"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170803 18:44:58.996" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170803 18:44:58.996" status="PASS" starttime="20170803 18:44:58.995"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170803 18:44:58.997" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170803 18:44:58.997" status="PASS" starttime="20170803 18:44:58.996"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170803 18:44:58.997" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170803 18:44:58.997" status="PASS" starttime="20170803 18:44:58.997"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170803 18:44:59.430" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170803 18:44:59.430" status="PASS" starttime="20170803 18:44:58.998"></status>
</kw>
<msg timestamp="20170803 18:44:59.430" level="INFO">${status} = PASS</msg>
<msg timestamp="20170803 18:44:59.430" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:44:59.430" status="PASS" starttime="20170803 18:44:58.998"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170803 18:44:59.431" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:44:59.431" status="PASS" starttime="20170803 18:44:59.430"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:44:59.431" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:44:59.431" status="PASS" starttime="20170803 18:44:59.431"></status>
</kw>
<status endtime="20170803 18:44:59.432" status="PASS" starttime="20170803 18:44:58.994"></status>
</kw>
<status endtime="20170803 18:44:59.432" status="PASS" starttime="20170803 18:44:58.994"></status>
</kw>
<status endtime="20170803 18:44:59.432" status="PASS" starttime="20170803 18:44:58.993"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170803 18:44:59.432" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170803 18:44:59.433" status="PASS" starttime="20170803 18:44:59.432"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:44:59.435" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170803 18:44:59.435" status="PASS" starttime="20170803 18:44:59.434"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:44:59.435" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170803 18:44:59.436" status="PASS" starttime="20170803 18:44:59.435"></status>
</kw>
<status endtime="20170803 18:44:59.436" status="PASS" starttime="20170803 18:44:59.435"></status>
</kw>
<status endtime="20170803 18:44:59.436" status="PASS" starttime="20170803 18:44:59.433"></status>
</kw>
<status endtime="20170803 18:44:59.436" status="PASS" starttime="20170803 18:44:59.433"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170803 18:44:59.543" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170803 18:44:59.543" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:44:59.543" status="PASS" starttime="20170803 18:44:59.436"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:44:59.545" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:44:59.545" status="PASS" starttime="20170803 18:44:59.545"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:44:59.546" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:44:59.547" status="PASS" starttime="20170803 18:44:59.546"></status>
</kw>
<status endtime="20170803 18:44:59.547" status="PASS" starttime="20170803 18:44:59.546"></status>
</kw>
<status endtime="20170803 18:44:59.547" status="PASS" starttime="20170803 18:44:59.544"></status>
</kw>
<status endtime="20170803 18:44:59.547" status="PASS" starttime="20170803 18:44:59.544"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170803 18:44:59.547" level="INFO">Delete All Sessions</msg>
<status endtime="20170803 18:44:59.547" status="PASS" starttime="20170803 18:44:59.547"></status>
</kw>
<msg timestamp="20170803 18:44:59.548" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:44:59.548" status="PASS" starttime="20170803 18:44:58.992"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:44:59.548" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:44:59.548" status="PASS" starttime="20170803 18:44:59.548"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170803 18:44:59.549" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170803 18:44:59.549" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170803 18:44:59.549" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20170803 18:44:59.549" status="PASS" starttime="20170803 18:44:59.549"></status>
</kw>
<msg timestamp="20170803 18:44:59.549" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170803 18:44:59.549" status="PASS" starttime="20170803 18:44:58.992"></status>
</kw>
<msg timestamp="20170803 18:44:59.550" level="INFO">${power_state} = Off</msg>
<status endtime="20170803 18:44:59.550" status="PASS" starttime="20170803 18:44:58.991"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20170803 18:44:59.550" level="FAIL">On != Off</msg>
<status endtime="20170803 18:44:59.550" status="FAIL" starttime="20170803 18:44:59.550"></status>
</kw>
<status endtime="20170803 18:44:59.551" status="FAIL" starttime="20170803 18:44:58.991"></status>
</kw>
<status endtime="20170803 18:44:59.551" status="FAIL" starttime="20170803 18:44:58.990"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170803 18:45:09.556" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170803 18:45:09.557" status="PASS" starttime="20170803 18:45:09.556"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170803 18:45:09.558" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170803 18:45:09.558" status="PASS" starttime="20170803 18:45:09.557"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170803 18:45:09.559" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170803 18:45:09.559" status="PASS" starttime="20170803 18:45:09.558"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170803 18:45:09.560" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170803 18:45:09.560" status="PASS" starttime="20170803 18:45:09.559"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170803 18:45:09.772" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170803 18:45:09.772" status="PASS" starttime="20170803 18:45:09.561"></status>
</kw>
<msg timestamp="20170803 18:45:09.772" level="INFO">${status} = PASS</msg>
<msg timestamp="20170803 18:45:09.772" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:45:09.772" status="PASS" starttime="20170803 18:45:09.560"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170803 18:45:09.773" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:45:09.773" status="PASS" starttime="20170803 18:45:09.773"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:45:09.774" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:45:09.774" status="PASS" starttime="20170803 18:45:09.773"></status>
</kw>
<status endtime="20170803 18:45:09.774" status="PASS" starttime="20170803 18:45:09.555"></status>
</kw>
<status endtime="20170803 18:45:09.774" status="PASS" starttime="20170803 18:45:09.554"></status>
</kw>
<status endtime="20170803 18:45:09.774" status="PASS" starttime="20170803 18:45:09.554"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170803 18:45:09.775" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170803 18:45:09.775" status="PASS" starttime="20170803 18:45:09.774"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:45:09.777" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170803 18:45:09.777" status="PASS" starttime="20170803 18:45:09.776"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:45:09.778" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170803 18:45:09.778" status="PASS" starttime="20170803 18:45:09.778"></status>
</kw>
<status endtime="20170803 18:45:09.778" status="PASS" starttime="20170803 18:45:09.777"></status>
</kw>
<status endtime="20170803 18:45:09.778" status="PASS" starttime="20170803 18:45:09.776"></status>
</kw>
<status endtime="20170803 18:45:09.778" status="PASS" starttime="20170803 18:45:09.775"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170803 18:45:09.842" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170803 18:45:09.842" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:45:09.842" status="PASS" starttime="20170803 18:45:09.779"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:45:09.844" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:45:09.844" status="PASS" starttime="20170803 18:45:09.843"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:45:09.845" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:45:09.845" status="PASS" starttime="20170803 18:45:09.844"></status>
</kw>
<status endtime="20170803 18:45:09.845" status="PASS" starttime="20170803 18:45:09.844"></status>
</kw>
<status endtime="20170803 18:45:09.845" status="PASS" starttime="20170803 18:45:09.843"></status>
</kw>
<status endtime="20170803 18:45:09.845" status="PASS" starttime="20170803 18:45:09.842"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170803 18:45:09.846" level="INFO">Delete All Sessions</msg>
<status endtime="20170803 18:45:09.846" status="PASS" starttime="20170803 18:45:09.846"></status>
</kw>
<msg timestamp="20170803 18:45:09.846" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:45:09.846" status="PASS" starttime="20170803 18:45:09.553"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:45:09.847" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:45:09.847" status="PASS" starttime="20170803 18:45:09.846"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170803 18:45:09.847" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170803 18:45:09.847" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170803 18:45:09.847" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170803 18:45:09.847" status="PASS" starttime="20170803 18:45:09.847"></status>
</kw>
<msg timestamp="20170803 18:45:09.848" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170803 18:45:09.848" status="PASS" starttime="20170803 18:45:09.553"></status>
</kw>
<msg timestamp="20170803 18:45:09.848" level="INFO">${power_state} = On</msg>
<status endtime="20170803 18:45:09.848" status="PASS" starttime="20170803 18:45:09.552"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170803 18:45:09.849" status="PASS" starttime="20170803 18:45:09.848"></status>
</kw>
<status endtime="20170803 18:45:09.849" status="PASS" starttime="20170803 18:45:09.552"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170803 18:45:09.852" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170803 18:45:09.853" status="PASS" starttime="20170803 18:45:09.852"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170803 18:45:09.853" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170803 18:45:09.853" status="PASS" starttime="20170803 18:45:09.853"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170803 18:45:09.854" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170803 18:45:09.854" status="PASS" starttime="20170803 18:45:09.853"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170803 18:45:09.854" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170803 18:45:09.854" status="PASS" starttime="20170803 18:45:09.854"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170803 18:45:10.117" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170803 18:45:10.117" status="PASS" starttime="20170803 18:45:09.855"></status>
</kw>
<msg timestamp="20170803 18:45:10.117" level="INFO">${status} = PASS</msg>
<msg timestamp="20170803 18:45:10.117" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:45:10.117" status="PASS" starttime="20170803 18:45:09.855"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170803 18:45:10.118" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:45:10.118" status="PASS" starttime="20170803 18:45:10.118"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:45:10.119" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:45:10.119" status="PASS" starttime="20170803 18:45:10.118"></status>
</kw>
<status endtime="20170803 18:45:10.119" status="PASS" starttime="20170803 18:45:09.851"></status>
</kw>
<status endtime="20170803 18:45:10.119" status="PASS" starttime="20170803 18:45:09.851"></status>
</kw>
<status endtime="20170803 18:45:10.119" status="PASS" starttime="20170803 18:45:09.850"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170803 18:45:10.120" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170803 18:45:10.120" status="PASS" starttime="20170803 18:45:10.119"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:45:10.122" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170803 18:45:10.122" status="PASS" starttime="20170803 18:45:10.121"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:45:10.123" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170803 18:45:10.123" status="PASS" starttime="20170803 18:45:10.123"></status>
</kw>
<status endtime="20170803 18:45:10.123" status="PASS" starttime="20170803 18:45:10.122"></status>
</kw>
<status endtime="20170803 18:45:10.123" status="PASS" starttime="20170803 18:45:10.120"></status>
</kw>
<status endtime="20170803 18:45:10.124" status="PASS" starttime="20170803 18:45:10.120"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170803 18:45:10.245" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170803 18:45:10.245" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:45:10.245" status="PASS" starttime="20170803 18:45:10.124"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:45:10.247" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:45:10.247" status="PASS" starttime="20170803 18:45:10.246"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:45:10.248" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:45:10.248" status="PASS" starttime="20170803 18:45:10.248"></status>
</kw>
<status endtime="20170803 18:45:10.248" status="PASS" starttime="20170803 18:45:10.247"></status>
</kw>
<status endtime="20170803 18:45:10.248" status="PASS" starttime="20170803 18:45:10.246"></status>
</kw>
<status endtime="20170803 18:45:10.248" status="PASS" starttime="20170803 18:45:10.245"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170803 18:45:10.249" level="INFO">Delete All Sessions</msg>
<status endtime="20170803 18:45:10.249" status="PASS" starttime="20170803 18:45:10.248"></status>
</kw>
<msg timestamp="20170803 18:45:10.249" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:45:10.249" status="PASS" starttime="20170803 18:45:09.850"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:45:10.250" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:45:10.250" status="PASS" starttime="20170803 18:45:10.249"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170803 18:45:10.250" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170803 18:45:10.250" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170803 18:45:10.250" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170803 18:45:10.250" status="PASS" starttime="20170803 18:45:10.250"></status>
</kw>
<msg timestamp="20170803 18:45:10.251" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170803 18:45:10.251" status="PASS" starttime="20170803 18:45:09.849"></status>
</kw>
<msg timestamp="20170803 18:45:10.251" level="INFO">${host_state} = Running</msg>
<status endtime="20170803 18:45:10.251" status="PASS" starttime="20170803 18:45:09.849"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170803 18:45:10.251" status="PASS" starttime="20170803 18:45:10.251"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170803 18:45:10.255" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170803 18:45:10.256" status="PASS" starttime="20170803 18:45:10.255"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170803 18:45:10.256" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170803 18:45:10.256" status="PASS" starttime="20170803 18:45:10.256"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170803 18:45:10.257" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170803 18:45:10.257" status="PASS" starttime="20170803 18:45:10.257"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170803 18:45:10.258" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170803 18:45:10.258" status="PASS" starttime="20170803 18:45:10.257"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170803 18:45:10.481" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170803 18:45:10.481" status="PASS" starttime="20170803 18:45:10.259"></status>
</kw>
<msg timestamp="20170803 18:45:10.481" level="INFO">${status} = PASS</msg>
<msg timestamp="20170803 18:45:10.481" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:45:10.481" status="PASS" starttime="20170803 18:45:10.258"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170803 18:45:10.482" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:45:10.482" status="PASS" starttime="20170803 18:45:10.482"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:45:10.483" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:45:10.483" status="PASS" starttime="20170803 18:45:10.482"></status>
</kw>
<status endtime="20170803 18:45:10.483" status="PASS" starttime="20170803 18:45:10.254"></status>
</kw>
<status endtime="20170803 18:45:10.483" status="PASS" starttime="20170803 18:45:10.254"></status>
</kw>
<status endtime="20170803 18:45:10.483" status="PASS" starttime="20170803 18:45:10.254"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170803 18:45:10.484" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170803 18:45:10.484" status="PASS" starttime="20170803 18:45:10.483"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:45:10.486" level="INFO">${msg} = URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170803 18:45:10.486" status="PASS" starttime="20170803 18:45:10.485"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:45:10.487" level="INFO">URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170803 18:45:10.487" status="PASS" starttime="20170803 18:45:10.486"></status>
</kw>
<status endtime="20170803 18:45:10.487" status="PASS" starttime="20170803 18:45:10.486"></status>
</kw>
<status endtime="20170803 18:45:10.487" status="PASS" starttime="20170803 18:45:10.484"></status>
</kw>
<status endtime="20170803 18:45:10.487" status="PASS" starttime="20170803 18:45:10.484"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170803 18:45:10.561" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170803 18:45:10.561" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:45:10.561" status="PASS" starttime="20170803 18:45:10.487"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:45:10.563" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:45:10.563" status="PASS" starttime="20170803 18:45:10.563"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:45:10.564" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:45:10.565" status="PASS" starttime="20170803 18:45:10.564"></status>
</kw>
<status endtime="20170803 18:45:10.565" status="PASS" starttime="20170803 18:45:10.563"></status>
</kw>
<status endtime="20170803 18:45:10.565" status="PASS" starttime="20170803 18:45:10.562"></status>
</kw>
<status endtime="20170803 18:45:10.565" status="PASS" starttime="20170803 18:45:10.562"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170803 18:45:10.565" level="INFO">Delete All Sessions</msg>
<status endtime="20170803 18:45:10.565" status="PASS" starttime="20170803 18:45:10.565"></status>
</kw>
<msg timestamp="20170803 18:45:10.566" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:45:10.566" status="PASS" starttime="20170803 18:45:10.253"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:45:10.566" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:45:10.566" status="PASS" starttime="20170803 18:45:10.566"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170803 18:45:10.567" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170803 18:45:10.567" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170803 18:45:10.567" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'Off'}</msg>
<status endtime="20170803 18:45:10.567" status="PASS" starttime="20170803 18:45:10.566"></status>
</kw>
<msg timestamp="20170803 18:45:10.567" level="INFO">${state} = Off</msg>
<status endtime="20170803 18:45:10.567" status="PASS" starttime="20170803 18:45:10.252"></status>
</kw>
<msg timestamp="20170803 18:45:10.567" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170803 18:45:10.567" status="PASS" starttime="20170803 18:45:10.252"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170803 18:45:10.568" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170803 18:45:10.568" status="FAIL" starttime="20170803 18:45:10.568"></status>
</kw>
<status endtime="20170803 18:45:10.568" status="FAIL" starttime="20170803 18:45:10.252"></status>
</kw>
<status endtime="20170803 18:45:10.568" status="FAIL" starttime="20170803 18:45:09.551"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170803 18:45:20.574" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170803 18:45:20.575" status="PASS" starttime="20170803 18:45:20.574"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170803 18:45:20.576" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170803 18:45:20.576" status="PASS" starttime="20170803 18:45:20.575"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170803 18:45:20.577" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170803 18:45:20.577" status="PASS" starttime="20170803 18:45:20.576"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170803 18:45:20.578" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170803 18:45:20.578" status="PASS" starttime="20170803 18:45:20.577"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170803 18:45:20.776" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170803 18:45:20.776" status="PASS" starttime="20170803 18:45:20.579"></status>
</kw>
<msg timestamp="20170803 18:45:20.776" level="INFO">${status} = PASS</msg>
<msg timestamp="20170803 18:45:20.776" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:45:20.776" status="PASS" starttime="20170803 18:45:20.578"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170803 18:45:20.777" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:45:20.777" status="PASS" starttime="20170803 18:45:20.777"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:45:20.778" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:45:20.778" status="PASS" starttime="20170803 18:45:20.777"></status>
</kw>
<status endtime="20170803 18:45:20.778" status="PASS" starttime="20170803 18:45:20.573"></status>
</kw>
<status endtime="20170803 18:45:20.778" status="PASS" starttime="20170803 18:45:20.572"></status>
</kw>
<status endtime="20170803 18:45:20.778" status="PASS" starttime="20170803 18:45:20.572"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170803 18:45:20.779" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170803 18:45:20.779" status="PASS" starttime="20170803 18:45:20.778"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:45:20.782" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170803 18:45:20.782" status="PASS" starttime="20170803 18:45:20.781"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:45:20.783" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170803 18:45:20.784" status="PASS" starttime="20170803 18:45:20.783"></status>
</kw>
<status endtime="20170803 18:45:20.784" status="PASS" starttime="20170803 18:45:20.782"></status>
</kw>
<status endtime="20170803 18:45:20.784" status="PASS" starttime="20170803 18:45:20.780"></status>
</kw>
<status endtime="20170803 18:45:20.784" status="PASS" starttime="20170803 18:45:20.779"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170803 18:45:20.861" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170803 18:45:20.861" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:45:20.861" status="PASS" starttime="20170803 18:45:20.784"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:45:20.863" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:45:20.863" status="PASS" starttime="20170803 18:45:20.863"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:45:20.864" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:45:20.864" status="PASS" starttime="20170803 18:45:20.864"></status>
</kw>
<status endtime="20170803 18:45:20.865" status="PASS" starttime="20170803 18:45:20.864"></status>
</kw>
<status endtime="20170803 18:45:20.865" status="PASS" starttime="20170803 18:45:20.862"></status>
</kw>
<status endtime="20170803 18:45:20.865" status="PASS" starttime="20170803 18:45:20.862"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170803 18:45:20.865" level="INFO">Delete All Sessions</msg>
<status endtime="20170803 18:45:20.865" status="PASS" starttime="20170803 18:45:20.865"></status>
</kw>
<msg timestamp="20170803 18:45:20.865" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:45:20.865" status="PASS" starttime="20170803 18:45:20.571"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:45:20.866" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:45:20.866" status="PASS" starttime="20170803 18:45:20.866"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170803 18:45:20.867" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170803 18:45:20.867" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170803 18:45:20.867" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170803 18:45:20.867" status="PASS" starttime="20170803 18:45:20.866"></status>
</kw>
<msg timestamp="20170803 18:45:20.867" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170803 18:45:20.867" status="PASS" starttime="20170803 18:45:20.570"></status>
</kw>
<msg timestamp="20170803 18:45:20.867" level="INFO">${power_state} = On</msg>
<status endtime="20170803 18:45:20.867" status="PASS" starttime="20170803 18:45:20.570"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170803 18:45:20.868" status="PASS" starttime="20170803 18:45:20.868"></status>
</kw>
<status endtime="20170803 18:45:20.868" status="PASS" starttime="20170803 18:45:20.570"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170803 18:45:20.871" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170803 18:45:20.872" status="PASS" starttime="20170803 18:45:20.871"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170803 18:45:20.872" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170803 18:45:20.872" status="PASS" starttime="20170803 18:45:20.872"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170803 18:45:20.873" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170803 18:45:20.873" status="PASS" starttime="20170803 18:45:20.873"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170803 18:45:20.874" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170803 18:45:20.874" status="PASS" starttime="20170803 18:45:20.873"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170803 18:45:21.156" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170803 18:45:21.156" status="PASS" starttime="20170803 18:45:20.874"></status>
</kw>
<msg timestamp="20170803 18:45:21.156" level="INFO">${status} = PASS</msg>
<msg timestamp="20170803 18:45:21.156" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:45:21.156" status="PASS" starttime="20170803 18:45:20.874"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170803 18:45:21.157" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:45:21.157" status="PASS" starttime="20170803 18:45:21.157"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:45:21.158" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:45:21.158" status="PASS" starttime="20170803 18:45:21.157"></status>
</kw>
<status endtime="20170803 18:45:21.158" status="PASS" starttime="20170803 18:45:20.871"></status>
</kw>
<status endtime="20170803 18:45:21.158" status="PASS" starttime="20170803 18:45:20.870"></status>
</kw>
<status endtime="20170803 18:45:21.158" status="PASS" starttime="20170803 18:45:20.870"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170803 18:45:21.159" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170803 18:45:21.159" status="PASS" starttime="20170803 18:45:21.158"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:45:21.161" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170803 18:45:21.161" status="PASS" starttime="20170803 18:45:21.160"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:45:21.162" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170803 18:45:21.162" status="PASS" starttime="20170803 18:45:21.162"></status>
</kw>
<status endtime="20170803 18:45:21.162" status="PASS" starttime="20170803 18:45:21.161"></status>
</kw>
<status endtime="20170803 18:45:21.162" status="PASS" starttime="20170803 18:45:21.159"></status>
</kw>
<status endtime="20170803 18:45:21.162" status="PASS" starttime="20170803 18:45:21.159"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170803 18:45:21.280" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170803 18:45:21.280" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:45:21.280" status="PASS" starttime="20170803 18:45:21.163"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:45:21.282" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:45:21.282" status="PASS" starttime="20170803 18:45:21.281"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:45:21.283" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:45:21.283" status="PASS" starttime="20170803 18:45:21.282"></status>
</kw>
<status endtime="20170803 18:45:21.283" status="PASS" starttime="20170803 18:45:21.282"></status>
</kw>
<status endtime="20170803 18:45:21.283" status="PASS" starttime="20170803 18:45:21.281"></status>
</kw>
<status endtime="20170803 18:45:21.283" status="PASS" starttime="20170803 18:45:21.280"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170803 18:45:21.283" level="INFO">Delete All Sessions</msg>
<status endtime="20170803 18:45:21.284" status="PASS" starttime="20170803 18:45:21.283"></status>
</kw>
<msg timestamp="20170803 18:45:21.284" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:45:21.284" status="PASS" starttime="20170803 18:45:20.869"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:45:21.285" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:45:21.285" status="PASS" starttime="20170803 18:45:21.284"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170803 18:45:21.285" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170803 18:45:21.285" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170803 18:45:21.286" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170803 18:45:21.286" status="PASS" starttime="20170803 18:45:21.285"></status>
</kw>
<msg timestamp="20170803 18:45:21.286" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170803 18:45:21.286" status="PASS" starttime="20170803 18:45:20.869"></status>
</kw>
<msg timestamp="20170803 18:45:21.287" level="INFO">${host_state} = Running</msg>
<status endtime="20170803 18:45:21.287" status="PASS" starttime="20170803 18:45:20.868"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170803 18:45:21.287" status="PASS" starttime="20170803 18:45:21.287"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170803 18:45:21.291" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170803 18:45:21.292" status="PASS" starttime="20170803 18:45:21.291"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170803 18:45:21.292" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170803 18:45:21.292" status="PASS" starttime="20170803 18:45:21.292"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170803 18:45:21.293" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170803 18:45:21.293" status="PASS" starttime="20170803 18:45:21.293"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170803 18:45:21.294" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170803 18:45:21.294" status="PASS" starttime="20170803 18:45:21.293"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170803 18:45:21.473" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170803 18:45:21.473" status="PASS" starttime="20170803 18:45:21.294"></status>
</kw>
<msg timestamp="20170803 18:45:21.474" level="INFO">${status} = PASS</msg>
<msg timestamp="20170803 18:45:21.474" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:45:21.474" status="PASS" starttime="20170803 18:45:21.294"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170803 18:45:21.474" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:45:21.474" status="PASS" starttime="20170803 18:45:21.474"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:45:21.475" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:45:21.475" status="PASS" starttime="20170803 18:45:21.475"></status>
</kw>
<status endtime="20170803 18:45:21.475" status="PASS" starttime="20170803 18:45:21.291"></status>
</kw>
<status endtime="20170803 18:45:21.475" status="PASS" starttime="20170803 18:45:21.290"></status>
</kw>
<status endtime="20170803 18:45:21.476" status="PASS" starttime="20170803 18:45:21.290"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170803 18:45:21.476" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170803 18:45:21.476" status="PASS" starttime="20170803 18:45:21.476"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:45:21.478" level="INFO">${msg} = URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170803 18:45:21.478" status="PASS" starttime="20170803 18:45:21.478"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:45:21.479" level="INFO">URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170803 18:45:21.479" status="PASS" starttime="20170803 18:45:21.479"></status>
</kw>
<status endtime="20170803 18:45:21.479" status="PASS" starttime="20170803 18:45:21.478"></status>
</kw>
<status endtime="20170803 18:45:21.479" status="PASS" starttime="20170803 18:45:21.477"></status>
</kw>
<status endtime="20170803 18:45:21.479" status="PASS" starttime="20170803 18:45:21.476"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170803 18:45:21.545" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170803 18:45:21.545" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:45:21.546" status="PASS" starttime="20170803 18:45:21.480"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:45:21.547" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:45:21.547" status="PASS" starttime="20170803 18:45:21.547"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:45:21.548" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:45:21.548" status="PASS" starttime="20170803 18:45:21.548"></status>
</kw>
<status endtime="20170803 18:45:21.548" status="PASS" starttime="20170803 18:45:21.547"></status>
</kw>
<status endtime="20170803 18:45:21.549" status="PASS" starttime="20170803 18:45:21.546"></status>
</kw>
<status endtime="20170803 18:45:21.549" status="PASS" starttime="20170803 18:45:21.546"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170803 18:45:21.549" level="INFO">Delete All Sessions</msg>
<status endtime="20170803 18:45:21.549" status="PASS" starttime="20170803 18:45:21.549"></status>
</kw>
<msg timestamp="20170803 18:45:21.549" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:45:21.549" status="PASS" starttime="20170803 18:45:21.289"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:45:21.550" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:45:21.550" status="PASS" starttime="20170803 18:45:21.550"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170803 18:45:21.550" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170803 18:45:21.551" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170803 18:45:21.551" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'Off'}</msg>
<status endtime="20170803 18:45:21.551" status="PASS" starttime="20170803 18:45:21.550"></status>
</kw>
<msg timestamp="20170803 18:45:21.551" level="INFO">${state} = Off</msg>
<status endtime="20170803 18:45:21.551" status="PASS" starttime="20170803 18:45:21.288"></status>
</kw>
<msg timestamp="20170803 18:45:21.551" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170803 18:45:21.551" status="PASS" starttime="20170803 18:45:21.288"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170803 18:45:21.552" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170803 18:45:21.552" status="FAIL" starttime="20170803 18:45:21.551"></status>
</kw>
<status endtime="20170803 18:45:21.552" status="FAIL" starttime="20170803 18:45:21.288"></status>
</kw>
<status endtime="20170803 18:45:21.552" status="FAIL" starttime="20170803 18:45:20.569"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170803 18:45:31.558" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170803 18:45:31.559" status="PASS" starttime="20170803 18:45:31.558"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170803 18:45:31.559" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170803 18:45:31.559" status="PASS" starttime="20170803 18:45:31.559"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170803 18:45:31.560" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170803 18:45:31.560" status="PASS" starttime="20170803 18:45:31.559"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170803 18:45:31.560" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170803 18:45:31.560" status="PASS" starttime="20170803 18:45:31.560"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170803 18:45:31.771" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170803 18:45:31.771" status="PASS" starttime="20170803 18:45:31.561"></status>
</kw>
<msg timestamp="20170803 18:45:31.771" level="INFO">${status} = PASS</msg>
<msg timestamp="20170803 18:45:31.771" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:45:31.771" status="PASS" starttime="20170803 18:45:31.561"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170803 18:45:31.772" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:45:31.772" status="PASS" starttime="20170803 18:45:31.771"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:45:31.772" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:45:31.773" status="PASS" starttime="20170803 18:45:31.772"></status>
</kw>
<status endtime="20170803 18:45:31.773" status="PASS" starttime="20170803 18:45:31.557"></status>
</kw>
<status endtime="20170803 18:45:31.773" status="PASS" starttime="20170803 18:45:31.557"></status>
</kw>
<status endtime="20170803 18:45:31.773" status="PASS" starttime="20170803 18:45:31.556"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170803 18:45:31.774" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170803 18:45:31.774" status="PASS" starttime="20170803 18:45:31.773"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:45:31.776" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170803 18:45:31.776" status="PASS" starttime="20170803 18:45:31.775"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:45:31.777" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170803 18:45:31.777" status="PASS" starttime="20170803 18:45:31.776"></status>
</kw>
<status endtime="20170803 18:45:31.777" status="PASS" starttime="20170803 18:45:31.776"></status>
</kw>
<status endtime="20170803 18:45:31.777" status="PASS" starttime="20170803 18:45:31.774"></status>
</kw>
<status endtime="20170803 18:45:31.777" status="PASS" starttime="20170803 18:45:31.774"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170803 18:45:31.867" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170803 18:45:31.867" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:45:31.867" status="PASS" starttime="20170803 18:45:31.777"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:45:31.872" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:45:31.872" status="PASS" starttime="20170803 18:45:31.868"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:45:31.873" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:45:31.873" status="PASS" starttime="20170803 18:45:31.872"></status>
</kw>
<status endtime="20170803 18:45:31.873" status="PASS" starttime="20170803 18:45:31.872"></status>
</kw>
<status endtime="20170803 18:45:31.873" status="PASS" starttime="20170803 18:45:31.868"></status>
</kw>
<status endtime="20170803 18:45:31.873" status="PASS" starttime="20170803 18:45:31.867"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170803 18:45:31.874" level="INFO">Delete All Sessions</msg>
<status endtime="20170803 18:45:31.874" status="PASS" starttime="20170803 18:45:31.873"></status>
</kw>
<msg timestamp="20170803 18:45:31.874" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:45:31.874" status="PASS" starttime="20170803 18:45:31.555"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:45:31.874" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:45:31.875" status="PASS" starttime="20170803 18:45:31.874"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170803 18:45:31.875" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170803 18:45:31.875" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170803 18:45:31.875" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170803 18:45:31.875" status="PASS" starttime="20170803 18:45:31.875"></status>
</kw>
<msg timestamp="20170803 18:45:31.876" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170803 18:45:31.876" status="PASS" starttime="20170803 18:45:31.554"></status>
</kw>
<msg timestamp="20170803 18:45:31.876" level="INFO">${power_state} = On</msg>
<status endtime="20170803 18:45:31.876" status="PASS" starttime="20170803 18:45:31.554"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170803 18:45:31.877" status="PASS" starttime="20170803 18:45:31.876"></status>
</kw>
<status endtime="20170803 18:45:31.877" status="PASS" starttime="20170803 18:45:31.554"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170803 18:45:31.880" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170803 18:45:31.881" status="PASS" starttime="20170803 18:45:31.880"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170803 18:45:31.881" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170803 18:45:31.881" status="PASS" starttime="20170803 18:45:31.881"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170803 18:45:31.882" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170803 18:45:31.882" status="PASS" starttime="20170803 18:45:31.882"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170803 18:45:31.883" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170803 18:45:31.883" status="PASS" starttime="20170803 18:45:31.882"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170803 18:45:32.168" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170803 18:45:32.169" status="PASS" starttime="20170803 18:45:31.883"></status>
</kw>
<msg timestamp="20170803 18:45:32.169" level="INFO">${status} = PASS</msg>
<msg timestamp="20170803 18:45:32.169" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:45:32.169" status="PASS" starttime="20170803 18:45:31.883"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170803 18:45:32.170" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:45:32.170" status="PASS" starttime="20170803 18:45:32.169"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:45:32.170" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:45:32.170" status="PASS" starttime="20170803 18:45:32.170"></status>
</kw>
<status endtime="20170803 18:45:32.170" status="PASS" starttime="20170803 18:45:31.879"></status>
</kw>
<status endtime="20170803 18:45:32.171" status="PASS" starttime="20170803 18:45:31.879"></status>
</kw>
<status endtime="20170803 18:45:32.171" status="PASS" starttime="20170803 18:45:31.878"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170803 18:45:32.171" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170803 18:45:32.171" status="PASS" starttime="20170803 18:45:32.171"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:45:32.174" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170803 18:45:32.174" status="PASS" starttime="20170803 18:45:32.173"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:45:32.175" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170803 18:45:32.175" status="PASS" starttime="20170803 18:45:32.175"></status>
</kw>
<status endtime="20170803 18:45:32.175" status="PASS" starttime="20170803 18:45:32.174"></status>
</kw>
<status endtime="20170803 18:45:32.175" status="PASS" starttime="20170803 18:45:32.172"></status>
</kw>
<status endtime="20170803 18:45:32.175" status="PASS" starttime="20170803 18:45:32.172"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170803 18:45:32.286" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170803 18:45:32.286" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:45:32.286" status="PASS" starttime="20170803 18:45:32.175"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:45:32.288" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:45:32.288" status="PASS" starttime="20170803 18:45:32.288"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:45:32.289" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:45:32.289" status="PASS" starttime="20170803 18:45:32.289"></status>
</kw>
<status endtime="20170803 18:45:32.290" status="PASS" starttime="20170803 18:45:32.288"></status>
</kw>
<status endtime="20170803 18:45:32.290" status="PASS" starttime="20170803 18:45:32.287"></status>
</kw>
<status endtime="20170803 18:45:32.290" status="PASS" starttime="20170803 18:45:32.287"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170803 18:45:32.290" level="INFO">Delete All Sessions</msg>
<status endtime="20170803 18:45:32.290" status="PASS" starttime="20170803 18:45:32.290"></status>
</kw>
<msg timestamp="20170803 18:45:32.290" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:45:32.290" status="PASS" starttime="20170803 18:45:31.878"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:45:32.291" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:45:32.291" status="PASS" starttime="20170803 18:45:32.291"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170803 18:45:32.292" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170803 18:45:32.292" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170803 18:45:32.292" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170803 18:45:32.292" status="PASS" starttime="20170803 18:45:32.291"></status>
</kw>
<msg timestamp="20170803 18:45:32.292" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170803 18:45:32.292" status="PASS" starttime="20170803 18:45:31.877"></status>
</kw>
<msg timestamp="20170803 18:45:32.292" level="INFO">${host_state} = Running</msg>
<status endtime="20170803 18:45:32.292" status="PASS" starttime="20170803 18:45:31.877"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170803 18:45:32.293" status="PASS" starttime="20170803 18:45:32.293"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170803 18:45:32.297" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170803 18:45:32.297" status="PASS" starttime="20170803 18:45:32.296"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170803 18:45:32.298" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170803 18:45:32.298" status="PASS" starttime="20170803 18:45:32.297"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170803 18:45:32.298" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170803 18:45:32.298" status="PASS" starttime="20170803 18:45:32.298"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170803 18:45:32.299" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170803 18:45:32.299" status="PASS" starttime="20170803 18:45:32.299"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170803 18:45:32.835" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170803 18:45:32.836" status="PASS" starttime="20170803 18:45:32.300"></status>
</kw>
<msg timestamp="20170803 18:45:32.836" level="INFO">${status} = PASS</msg>
<msg timestamp="20170803 18:45:32.836" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:45:32.836" status="PASS" starttime="20170803 18:45:32.299"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170803 18:45:32.836" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:45:32.837" status="PASS" starttime="20170803 18:45:32.836"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:45:32.837" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:45:32.837" status="PASS" starttime="20170803 18:45:32.837"></status>
</kw>
<status endtime="20170803 18:45:32.837" status="PASS" starttime="20170803 18:45:32.296"></status>
</kw>
<status endtime="20170803 18:45:32.837" status="PASS" starttime="20170803 18:45:32.296"></status>
</kw>
<status endtime="20170803 18:45:32.838" status="PASS" starttime="20170803 18:45:32.295"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170803 18:45:32.838" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170803 18:45:32.838" status="PASS" starttime="20170803 18:45:32.838"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:45:32.840" level="INFO">${msg} = URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170803 18:45:32.840" status="PASS" starttime="20170803 18:45:32.840"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:45:32.841" level="INFO">URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170803 18:45:32.841" status="PASS" starttime="20170803 18:45:32.841"></status>
</kw>
<status endtime="20170803 18:45:32.841" status="PASS" starttime="20170803 18:45:32.840"></status>
</kw>
<status endtime="20170803 18:45:32.841" status="PASS" starttime="20170803 18:45:32.839"></status>
</kw>
<status endtime="20170803 18:45:32.842" status="PASS" starttime="20170803 18:45:32.838"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170803 18:45:33.811" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170803 18:45:33.812" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:45:33.812" status="PASS" starttime="20170803 18:45:32.842"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:45:33.814" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:45:33.814" status="PASS" starttime="20170803 18:45:33.813"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:45:33.814" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:45:33.815" status="PASS" starttime="20170803 18:45:33.814"></status>
</kw>
<status endtime="20170803 18:45:33.815" status="PASS" starttime="20170803 18:45:33.814"></status>
</kw>
<status endtime="20170803 18:45:33.815" status="PASS" starttime="20170803 18:45:33.813"></status>
</kw>
<status endtime="20170803 18:45:33.815" status="PASS" starttime="20170803 18:45:33.812"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170803 18:45:33.815" level="INFO">Delete All Sessions</msg>
<status endtime="20170803 18:45:33.816" status="PASS" starttime="20170803 18:45:33.815"></status>
</kw>
<msg timestamp="20170803 18:45:33.816" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:45:33.816" status="PASS" starttime="20170803 18:45:32.294"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:45:33.817" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:45:33.817" status="PASS" starttime="20170803 18:45:33.816"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170803 18:45:33.817" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170803 18:45:33.817" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170803 18:45:33.817" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'Off'}</msg>
<status endtime="20170803 18:45:33.817" status="PASS" starttime="20170803 18:45:33.817"></status>
</kw>
<msg timestamp="20170803 18:45:33.818" level="INFO">${state} = Off</msg>
<status endtime="20170803 18:45:33.818" status="PASS" starttime="20170803 18:45:32.294"></status>
</kw>
<msg timestamp="20170803 18:45:33.818" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170803 18:45:33.818" status="PASS" starttime="20170803 18:45:32.293"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170803 18:45:33.819" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170803 18:45:33.819" status="FAIL" starttime="20170803 18:45:33.818"></status>
</kw>
<status endtime="20170803 18:45:33.819" status="FAIL" starttime="20170803 18:45:32.293"></status>
</kw>
<status endtime="20170803 18:45:33.819" status="FAIL" starttime="20170803 18:45:31.553"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170803 18:45:43.825" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170803 18:45:43.825" status="PASS" starttime="20170803 18:45:43.824"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170803 18:45:43.826" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170803 18:45:43.826" status="PASS" starttime="20170803 18:45:43.825"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170803 18:45:43.826" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170803 18:45:43.826" status="PASS" starttime="20170803 18:45:43.826"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170803 18:45:43.827" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170803 18:45:43.827" status="PASS" starttime="20170803 18:45:43.826"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170803 18:45:44.081" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170803 18:45:44.081" status="PASS" starttime="20170803 18:45:43.828"></status>
</kw>
<msg timestamp="20170803 18:45:44.081" level="INFO">${status} = PASS</msg>
<msg timestamp="20170803 18:45:44.081" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:45:44.082" status="PASS" starttime="20170803 18:45:43.827"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170803 18:45:44.082" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:45:44.082" status="PASS" starttime="20170803 18:45:44.082"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:45:44.083" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:45:44.083" status="PASS" starttime="20170803 18:45:44.083"></status>
</kw>
<status endtime="20170803 18:45:44.083" status="PASS" starttime="20170803 18:45:43.824"></status>
</kw>
<status endtime="20170803 18:45:44.083" status="PASS" starttime="20170803 18:45:43.823"></status>
</kw>
<status endtime="20170803 18:45:44.083" status="PASS" starttime="20170803 18:45:43.822"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170803 18:45:44.084" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170803 18:45:44.084" status="PASS" starttime="20170803 18:45:44.084"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:45:44.086" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170803 18:45:44.086" status="PASS" starttime="20170803 18:45:44.086"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:45:44.087" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170803 18:45:44.087" status="PASS" starttime="20170803 18:45:44.087"></status>
</kw>
<status endtime="20170803 18:45:44.087" status="PASS" starttime="20170803 18:45:44.086"></status>
</kw>
<status endtime="20170803 18:45:44.087" status="PASS" starttime="20170803 18:45:44.085"></status>
</kw>
<status endtime="20170803 18:45:44.088" status="PASS" starttime="20170803 18:45:44.084"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170803 18:45:44.166" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170803 18:45:44.166" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:45:44.166" status="PASS" starttime="20170803 18:45:44.088"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:45:44.168" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:45:44.168" status="PASS" starttime="20170803 18:45:44.167"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:45:44.169" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:45:44.169" status="PASS" starttime="20170803 18:45:44.169"></status>
</kw>
<status endtime="20170803 18:45:44.169" status="PASS" starttime="20170803 18:45:44.168"></status>
</kw>
<status endtime="20170803 18:45:44.169" status="PASS" starttime="20170803 18:45:44.167"></status>
</kw>
<status endtime="20170803 18:45:44.169" status="PASS" starttime="20170803 18:45:44.166"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170803 18:45:44.170" level="INFO">Delete All Sessions</msg>
<status endtime="20170803 18:45:44.170" status="PASS" starttime="20170803 18:45:44.170"></status>
</kw>
<msg timestamp="20170803 18:45:44.170" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:45:44.170" status="PASS" starttime="20170803 18:45:43.821"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:45:44.171" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:45:44.171" status="PASS" starttime="20170803 18:45:44.170"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170803 18:45:44.171" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170803 18:45:44.171" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170803 18:45:44.171" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170803 18:45:44.172" status="PASS" starttime="20170803 18:45:44.171"></status>
</kw>
<msg timestamp="20170803 18:45:44.172" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170803 18:45:44.172" status="PASS" starttime="20170803 18:45:43.821"></status>
</kw>
<msg timestamp="20170803 18:45:44.172" level="INFO">${power_state} = On</msg>
<status endtime="20170803 18:45:44.172" status="PASS" starttime="20170803 18:45:43.820"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170803 18:45:44.173" status="PASS" starttime="20170803 18:45:44.172"></status>
</kw>
<status endtime="20170803 18:45:44.173" status="PASS" starttime="20170803 18:45:43.820"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170803 18:45:44.176" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170803 18:45:44.177" status="PASS" starttime="20170803 18:45:44.176"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170803 18:45:44.177" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170803 18:45:44.177" status="PASS" starttime="20170803 18:45:44.177"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170803 18:45:44.178" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170803 18:45:44.178" status="PASS" starttime="20170803 18:45:44.178"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170803 18:45:44.179" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170803 18:45:44.179" status="PASS" starttime="20170803 18:45:44.178"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170803 18:45:44.356" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170803 18:45:44.356" status="PASS" starttime="20170803 18:45:44.179"></status>
</kw>
<msg timestamp="20170803 18:45:44.356" level="INFO">${status} = PASS</msg>
<msg timestamp="20170803 18:45:44.356" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:45:44.357" status="PASS" starttime="20170803 18:45:44.179"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170803 18:45:44.357" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:45:44.357" status="PASS" starttime="20170803 18:45:44.357"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:45:44.358" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:45:44.358" status="PASS" starttime="20170803 18:45:44.357"></status>
</kw>
<status endtime="20170803 18:45:44.358" status="PASS" starttime="20170803 18:45:44.175"></status>
</kw>
<status endtime="20170803 18:45:44.358" status="PASS" starttime="20170803 18:45:44.175"></status>
</kw>
<status endtime="20170803 18:45:44.358" status="PASS" starttime="20170803 18:45:44.175"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170803 18:45:44.359" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170803 18:45:44.359" status="PASS" starttime="20170803 18:45:44.358"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:45:44.361" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170803 18:45:44.361" status="PASS" starttime="20170803 18:45:44.360"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:45:44.362" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170803 18:45:44.362" status="PASS" starttime="20170803 18:45:44.362"></status>
</kw>
<status endtime="20170803 18:45:44.362" status="PASS" starttime="20170803 18:45:44.361"></status>
</kw>
<status endtime="20170803 18:45:44.363" status="PASS" starttime="20170803 18:45:44.360"></status>
</kw>
<status endtime="20170803 18:45:44.363" status="PASS" starttime="20170803 18:45:44.359"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170803 18:45:44.451" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170803 18:45:44.452" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:45:44.452" status="PASS" starttime="20170803 18:45:44.363"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:45:44.453" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:45:44.454" status="PASS" starttime="20170803 18:45:44.453"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:45:44.454" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:45:44.454" status="PASS" starttime="20170803 18:45:44.454"></status>
</kw>
<status endtime="20170803 18:45:44.455" status="PASS" starttime="20170803 18:45:44.454"></status>
</kw>
<status endtime="20170803 18:45:44.455" status="PASS" starttime="20170803 18:45:44.452"></status>
</kw>
<status endtime="20170803 18:45:44.455" status="PASS" starttime="20170803 18:45:44.452"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170803 18:45:44.455" level="INFO">Delete All Sessions</msg>
<status endtime="20170803 18:45:44.455" status="PASS" starttime="20170803 18:45:44.455"></status>
</kw>
<msg timestamp="20170803 18:45:44.456" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:45:44.456" status="PASS" starttime="20170803 18:45:44.174"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:45:44.456" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:45:44.456" status="PASS" starttime="20170803 18:45:44.456"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170803 18:45:44.457" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170803 18:45:44.457" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170803 18:45:44.457" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status endtime="20170803 18:45:44.457" status="PASS" starttime="20170803 18:45:44.456"></status>
</kw>
<msg timestamp="20170803 18:45:44.457" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status endtime="20170803 18:45:44.457" status="PASS" starttime="20170803 18:45:44.173"></status>
</kw>
<msg timestamp="20170803 18:45:44.458" level="INFO">${host_state} = Quiesced</msg>
<status endtime="20170803 18:45:44.458" status="PASS" starttime="20170803 18:45:44.173"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170803 18:45:44.458" level="FAIL">Running != Quiesced</msg>
<status endtime="20170803 18:45:44.458" status="FAIL" starttime="20170803 18:45:44.458"></status>
</kw>
<status endtime="20170803 18:45:44.458" status="FAIL" starttime="20170803 18:45:43.819"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170803 18:45:54.463" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170803 18:45:54.464" status="PASS" starttime="20170803 18:45:54.463"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170803 18:45:54.465" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170803 18:45:54.465" status="PASS" starttime="20170803 18:45:54.464"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170803 18:45:54.465" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170803 18:45:54.465" status="PASS" starttime="20170803 18:45:54.465"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170803 18:45:54.466" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170803 18:45:54.466" status="PASS" starttime="20170803 18:45:54.465"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170803 18:45:54.657" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170803 18:45:54.657" status="PASS" starttime="20170803 18:45:54.467"></status>
</kw>
<msg timestamp="20170803 18:45:54.657" level="INFO">${status} = PASS</msg>
<msg timestamp="20170803 18:45:54.657" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:45:54.657" status="PASS" starttime="20170803 18:45:54.467"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170803 18:45:54.658" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:45:54.658" status="PASS" starttime="20170803 18:45:54.657"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:45:54.658" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:45:54.659" status="PASS" starttime="20170803 18:45:54.658"></status>
</kw>
<status endtime="20170803 18:45:54.659" status="PASS" starttime="20170803 18:45:54.463"></status>
</kw>
<status endtime="20170803 18:45:54.659" status="PASS" starttime="20170803 18:45:54.462"></status>
</kw>
<status endtime="20170803 18:45:54.659" status="PASS" starttime="20170803 18:45:54.462"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170803 18:45:54.660" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170803 18:45:54.660" status="PASS" starttime="20170803 18:45:54.659"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:45:54.662" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170803 18:45:54.662" status="PASS" starttime="20170803 18:45:54.661"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:45:54.663" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170803 18:45:54.663" status="PASS" starttime="20170803 18:45:54.662"></status>
</kw>
<status endtime="20170803 18:45:54.663" status="PASS" starttime="20170803 18:45:54.662"></status>
</kw>
<status endtime="20170803 18:45:54.663" status="PASS" starttime="20170803 18:45:54.660"></status>
</kw>
<status endtime="20170803 18:45:54.663" status="PASS" starttime="20170803 18:45:54.660"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170803 18:45:54.726" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170803 18:45:54.726" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:45:54.726" status="PASS" starttime="20170803 18:45:54.663"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:45:54.728" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:45:54.728" status="PASS" starttime="20170803 18:45:54.727"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:45:54.729" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:45:54.729" status="PASS" starttime="20170803 18:45:54.729"></status>
</kw>
<status endtime="20170803 18:45:54.729" status="PASS" starttime="20170803 18:45:54.728"></status>
</kw>
<status endtime="20170803 18:45:54.729" status="PASS" starttime="20170803 18:45:54.727"></status>
</kw>
<status endtime="20170803 18:45:54.729" status="PASS" starttime="20170803 18:45:54.726"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170803 18:45:54.730" level="INFO">Delete All Sessions</msg>
<status endtime="20170803 18:45:54.730" status="PASS" starttime="20170803 18:45:54.729"></status>
</kw>
<msg timestamp="20170803 18:45:54.730" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:45:54.730" status="PASS" starttime="20170803 18:45:54.461"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:45:54.731" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:45:54.731" status="PASS" starttime="20170803 18:45:54.730"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170803 18:45:54.731" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170803 18:45:54.731" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170803 18:45:54.731" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170803 18:45:54.731" status="PASS" starttime="20170803 18:45:54.731"></status>
</kw>
<msg timestamp="20170803 18:45:54.732" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170803 18:45:54.732" status="PASS" starttime="20170803 18:45:54.460"></status>
</kw>
<msg timestamp="20170803 18:45:54.732" level="INFO">${power_state} = On</msg>
<status endtime="20170803 18:45:54.732" status="PASS" starttime="20170803 18:45:54.460"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170803 18:45:54.732" status="PASS" starttime="20170803 18:45:54.732"></status>
</kw>
<status endtime="20170803 18:45:54.733" status="PASS" starttime="20170803 18:45:54.460"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170803 18:45:54.737" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170803 18:45:54.738" status="PASS" starttime="20170803 18:45:54.737"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170803 18:45:54.739" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170803 18:45:54.739" status="PASS" starttime="20170803 18:45:54.738"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170803 18:45:54.740" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170803 18:45:54.740" status="PASS" starttime="20170803 18:45:54.739"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170803 18:45:54.741" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170803 18:45:54.741" status="PASS" starttime="20170803 18:45:54.740"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170803 18:45:54.964" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170803 18:45:54.964" status="PASS" starttime="20170803 18:45:54.742"></status>
</kw>
<msg timestamp="20170803 18:45:54.964" level="INFO">${status} = PASS</msg>
<msg timestamp="20170803 18:45:54.964" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:45:54.964" status="PASS" starttime="20170803 18:45:54.741"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170803 18:45:54.965" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:45:54.965" status="PASS" starttime="20170803 18:45:54.964"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:45:54.965" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:45:54.965" status="PASS" starttime="20170803 18:45:54.965"></status>
</kw>
<status endtime="20170803 18:45:54.966" status="PASS" starttime="20170803 18:45:54.736"></status>
</kw>
<status endtime="20170803 18:45:54.966" status="PASS" starttime="20170803 18:45:54.735"></status>
</kw>
<status endtime="20170803 18:45:54.966" status="PASS" starttime="20170803 18:45:54.734"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170803 18:45:54.966" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170803 18:45:54.966" status="PASS" starttime="20170803 18:45:54.966"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:45:54.968" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170803 18:45:54.969" status="PASS" starttime="20170803 18:45:54.968"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:45:54.969" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170803 18:45:54.969" status="PASS" starttime="20170803 18:45:54.969"></status>
</kw>
<status endtime="20170803 18:45:54.970" status="PASS" starttime="20170803 18:45:54.969"></status>
</kw>
<status endtime="20170803 18:45:54.970" status="PASS" starttime="20170803 18:45:54.967"></status>
</kw>
<status endtime="20170803 18:45:54.970" status="PASS" starttime="20170803 18:45:54.967"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170803 18:45:55.088" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170803 18:45:55.088" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:45:55.088" status="PASS" starttime="20170803 18:45:54.970"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:45:55.090" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:45:55.090" status="PASS" starttime="20170803 18:45:55.090"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:45:55.091" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:45:55.092" status="PASS" starttime="20170803 18:45:55.091"></status>
</kw>
<status endtime="20170803 18:45:55.092" status="PASS" starttime="20170803 18:45:55.090"></status>
</kw>
<status endtime="20170803 18:45:55.092" status="PASS" starttime="20170803 18:45:55.089"></status>
</kw>
<status endtime="20170803 18:45:55.092" status="PASS" starttime="20170803 18:45:55.089"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170803 18:45:55.092" level="INFO">Delete All Sessions</msg>
<status endtime="20170803 18:45:55.092" status="PASS" starttime="20170803 18:45:55.092"></status>
</kw>
<msg timestamp="20170803 18:45:55.093" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:45:55.093" status="PASS" starttime="20170803 18:45:54.734"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:45:55.093" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:45:55.093" status="PASS" starttime="20170803 18:45:55.093"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170803 18:45:55.094" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170803 18:45:55.094" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170803 18:45:55.094" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status endtime="20170803 18:45:55.094" status="PASS" starttime="20170803 18:45:55.093"></status>
</kw>
<msg timestamp="20170803 18:45:55.094" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status endtime="20170803 18:45:55.094" status="PASS" starttime="20170803 18:45:54.733"></status>
</kw>
<msg timestamp="20170803 18:45:55.095" level="INFO">${host_state} = Quiesced</msg>
<status endtime="20170803 18:45:55.095" status="PASS" starttime="20170803 18:45:54.733"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170803 18:45:55.095" level="FAIL">Running != Quiesced</msg>
<status endtime="20170803 18:45:55.095" status="FAIL" starttime="20170803 18:45:55.095"></status>
</kw>
<status endtime="20170803 18:45:55.095" status="FAIL" starttime="20170803 18:45:54.459"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170803 18:46:05.101" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170803 18:46:05.101" status="PASS" starttime="20170803 18:46:05.100"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170803 18:46:05.102" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170803 18:46:05.102" status="PASS" starttime="20170803 18:46:05.101"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170803 18:46:05.102" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170803 18:46:05.102" status="PASS" starttime="20170803 18:46:05.102"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170803 18:46:05.103" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170803 18:46:05.103" status="PASS" starttime="20170803 18:46:05.103"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170803 18:46:05.309" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170803 18:46:05.309" status="PASS" starttime="20170803 18:46:05.104"></status>
</kw>
<msg timestamp="20170803 18:46:05.310" level="INFO">${status} = PASS</msg>
<msg timestamp="20170803 18:46:05.310" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:46:05.310" status="PASS" starttime="20170803 18:46:05.103"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170803 18:46:05.311" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:46:05.311" status="PASS" starttime="20170803 18:46:05.310"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:46:05.311" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:46:05.311" status="PASS" starttime="20170803 18:46:05.311"></status>
</kw>
<status endtime="20170803 18:46:05.312" status="PASS" starttime="20170803 18:46:05.100"></status>
</kw>
<status endtime="20170803 18:46:05.312" status="PASS" starttime="20170803 18:46:05.099"></status>
</kw>
<status endtime="20170803 18:46:05.312" status="PASS" starttime="20170803 18:46:05.099"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170803 18:46:05.312" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170803 18:46:05.312" status="PASS" starttime="20170803 18:46:05.312"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:46:05.314" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170803 18:46:05.314" status="PASS" starttime="20170803 18:46:05.314"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:46:05.315" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170803 18:46:05.315" status="PASS" starttime="20170803 18:46:05.315"></status>
</kw>
<status endtime="20170803 18:46:05.316" status="PASS" starttime="20170803 18:46:05.315"></status>
</kw>
<status endtime="20170803 18:46:05.316" status="PASS" starttime="20170803 18:46:05.313"></status>
</kw>
<status endtime="20170803 18:46:05.316" status="PASS" starttime="20170803 18:46:05.313"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170803 18:46:05.378" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170803 18:46:05.379" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:46:05.379" status="PASS" starttime="20170803 18:46:05.316"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:46:05.381" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:46:05.381" status="PASS" starttime="20170803 18:46:05.380"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:46:05.382" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:46:05.382" status="PASS" starttime="20170803 18:46:05.381"></status>
</kw>
<status endtime="20170803 18:46:05.382" status="PASS" starttime="20170803 18:46:05.381"></status>
</kw>
<status endtime="20170803 18:46:05.382" status="PASS" starttime="20170803 18:46:05.380"></status>
</kw>
<status endtime="20170803 18:46:05.382" status="PASS" starttime="20170803 18:46:05.379"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170803 18:46:05.382" level="INFO">Delete All Sessions</msg>
<status endtime="20170803 18:46:05.383" status="PASS" starttime="20170803 18:46:05.382"></status>
</kw>
<msg timestamp="20170803 18:46:05.383" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:46:05.383" status="PASS" starttime="20170803 18:46:05.098"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:46:05.383" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:46:05.384" status="PASS" starttime="20170803 18:46:05.383"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170803 18:46:05.384" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170803 18:46:05.384" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170803 18:46:05.384" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170803 18:46:05.384" status="PASS" starttime="20170803 18:46:05.384"></status>
</kw>
<msg timestamp="20170803 18:46:05.385" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170803 18:46:05.385" status="PASS" starttime="20170803 18:46:05.097"></status>
</kw>
<msg timestamp="20170803 18:46:05.385" level="INFO">${power_state} = On</msg>
<status endtime="20170803 18:46:05.385" status="PASS" starttime="20170803 18:46:05.097"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170803 18:46:05.386" status="PASS" starttime="20170803 18:46:05.385"></status>
</kw>
<status endtime="20170803 18:46:05.386" status="PASS" starttime="20170803 18:46:05.097"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170803 18:46:05.390" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170803 18:46:05.390" status="PASS" starttime="20170803 18:46:05.389"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170803 18:46:05.391" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170803 18:46:05.391" status="PASS" starttime="20170803 18:46:05.391"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170803 18:46:05.392" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170803 18:46:05.392" status="PASS" starttime="20170803 18:46:05.391"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170803 18:46:05.392" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170803 18:46:05.392" status="PASS" starttime="20170803 18:46:05.392"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170803 18:46:05.590" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170803 18:46:05.590" status="PASS" starttime="20170803 18:46:05.393"></status>
</kw>
<msg timestamp="20170803 18:46:05.591" level="INFO">${status} = PASS</msg>
<msg timestamp="20170803 18:46:05.591" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:46:05.591" status="PASS" starttime="20170803 18:46:05.392"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170803 18:46:05.591" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:46:05.591" status="PASS" starttime="20170803 18:46:05.591"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:46:05.592" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:46:05.592" status="PASS" starttime="20170803 18:46:05.592"></status>
</kw>
<status endtime="20170803 18:46:05.592" status="PASS" starttime="20170803 18:46:05.389"></status>
</kw>
<status endtime="20170803 18:46:05.592" status="PASS" starttime="20170803 18:46:05.388"></status>
</kw>
<status endtime="20170803 18:46:05.592" status="PASS" starttime="20170803 18:46:05.388"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170803 18:46:05.593" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170803 18:46:05.593" status="PASS" starttime="20170803 18:46:05.593"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:46:05.595" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170803 18:46:05.595" status="PASS" starttime="20170803 18:46:05.594"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:46:05.596" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170803 18:46:05.596" status="PASS" starttime="20170803 18:46:05.596"></status>
</kw>
<status endtime="20170803 18:46:05.596" status="PASS" starttime="20170803 18:46:05.595"></status>
</kw>
<status endtime="20170803 18:46:05.596" status="PASS" starttime="20170803 18:46:05.594"></status>
</kw>
<status endtime="20170803 18:46:05.596" status="PASS" starttime="20170803 18:46:05.593"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170803 18:46:05.687" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170803 18:46:05.687" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:46:05.687" status="PASS" starttime="20170803 18:46:05.597"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:46:05.689" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:46:05.689" status="PASS" starttime="20170803 18:46:05.688"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:46:05.690" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:46:05.690" status="PASS" starttime="20170803 18:46:05.689"></status>
</kw>
<status endtime="20170803 18:46:05.690" status="PASS" starttime="20170803 18:46:05.689"></status>
</kw>
<status endtime="20170803 18:46:05.690" status="PASS" starttime="20170803 18:46:05.688"></status>
</kw>
<status endtime="20170803 18:46:05.690" status="PASS" starttime="20170803 18:46:05.687"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170803 18:46:05.690" level="INFO">Delete All Sessions</msg>
<status endtime="20170803 18:46:05.691" status="PASS" starttime="20170803 18:46:05.690"></status>
</kw>
<msg timestamp="20170803 18:46:05.691" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:46:05.691" status="PASS" starttime="20170803 18:46:05.387"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:46:05.691" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:46:05.691" status="PASS" starttime="20170803 18:46:05.691"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170803 18:46:05.692" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170803 18:46:05.692" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170803 18:46:05.692" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status endtime="20170803 18:46:05.692" status="PASS" starttime="20170803 18:46:05.692"></status>
</kw>
<msg timestamp="20170803 18:46:05.692" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status endtime="20170803 18:46:05.693" status="PASS" starttime="20170803 18:46:05.386"></status>
</kw>
<msg timestamp="20170803 18:46:05.693" level="INFO">${host_state} = Quiesced</msg>
<status endtime="20170803 18:46:05.693" status="PASS" starttime="20170803 18:46:05.386"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170803 18:46:05.693" level="FAIL">Running != Quiesced</msg>
<status endtime="20170803 18:46:05.694" status="FAIL" starttime="20170803 18:46:05.693"></status>
</kw>
<status endtime="20170803 18:46:05.694" status="FAIL" starttime="20170803 18:46:05.096"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170803 18:46:15.699" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170803 18:46:15.700" status="PASS" starttime="20170803 18:46:15.699"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170803 18:46:15.700" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170803 18:46:15.700" status="PASS" starttime="20170803 18:46:15.700"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170803 18:46:15.701" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170803 18:46:15.701" status="PASS" starttime="20170803 18:46:15.700"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170803 18:46:15.701" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170803 18:46:15.702" status="PASS" starttime="20170803 18:46:15.701"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170803 18:46:16.038" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170803 18:46:16.038" status="PASS" starttime="20170803 18:46:15.702"></status>
</kw>
<msg timestamp="20170803 18:46:16.038" level="INFO">${status} = PASS</msg>
<msg timestamp="20170803 18:46:16.038" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:46:16.038" status="PASS" starttime="20170803 18:46:15.702"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170803 18:46:16.039" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:46:16.039" status="PASS" starttime="20170803 18:46:16.038"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:46:16.039" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:46:16.039" status="PASS" starttime="20170803 18:46:16.039"></status>
</kw>
<status endtime="20170803 18:46:16.039" status="PASS" starttime="20170803 18:46:15.698"></status>
</kw>
<status endtime="20170803 18:46:16.040" status="PASS" starttime="20170803 18:46:15.698"></status>
</kw>
<status endtime="20170803 18:46:16.040" status="PASS" starttime="20170803 18:46:15.697"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170803 18:46:16.040" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170803 18:46:16.040" status="PASS" starttime="20170803 18:46:16.040"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:46:16.042" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170803 18:46:16.042" status="PASS" starttime="20170803 18:46:16.042"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:46:16.046" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170803 18:46:16.047" status="PASS" starttime="20170803 18:46:16.046"></status>
</kw>
<status endtime="20170803 18:46:16.047" status="PASS" starttime="20170803 18:46:16.043"></status>
</kw>
<status endtime="20170803 18:46:16.047" status="PASS" starttime="20170803 18:46:16.041"></status>
</kw>
<status endtime="20170803 18:46:16.047" status="PASS" starttime="20170803 18:46:16.041"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170803 18:46:16.140" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170803 18:46:16.140" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:46:16.140" status="PASS" starttime="20170803 18:46:16.047"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:46:16.142" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:46:16.142" status="PASS" starttime="20170803 18:46:16.142"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:46:16.143" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:46:16.143" status="PASS" starttime="20170803 18:46:16.143"></status>
</kw>
<status endtime="20170803 18:46:16.143" status="PASS" starttime="20170803 18:46:16.142"></status>
</kw>
<status endtime="20170803 18:46:16.143" status="PASS" starttime="20170803 18:46:16.141"></status>
</kw>
<status endtime="20170803 18:46:16.143" status="PASS" starttime="20170803 18:46:16.141"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170803 18:46:16.144" level="INFO">Delete All Sessions</msg>
<status endtime="20170803 18:46:16.144" status="PASS" starttime="20170803 18:46:16.144"></status>
</kw>
<msg timestamp="20170803 18:46:16.144" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:46:16.144" status="PASS" starttime="20170803 18:46:15.697"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:46:16.145" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:46:16.145" status="PASS" starttime="20170803 18:46:16.144"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170803 18:46:16.145" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170803 18:46:16.146" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170803 18:46:16.146" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170803 18:46:16.146" status="PASS" starttime="20170803 18:46:16.145"></status>
</kw>
<msg timestamp="20170803 18:46:16.146" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170803 18:46:16.146" status="PASS" starttime="20170803 18:46:15.696"></status>
</kw>
<msg timestamp="20170803 18:46:16.146" level="INFO">${power_state} = On</msg>
<status endtime="20170803 18:46:16.146" status="PASS" starttime="20170803 18:46:15.695"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170803 18:46:16.147" status="PASS" starttime="20170803 18:46:16.147"></status>
</kw>
<status endtime="20170803 18:46:16.147" status="PASS" starttime="20170803 18:46:15.695"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170803 18:46:16.150" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170803 18:46:16.151" status="PASS" starttime="20170803 18:46:16.150"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170803 18:46:16.151" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170803 18:46:16.151" status="PASS" starttime="20170803 18:46:16.151"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170803 18:46:16.152" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170803 18:46:16.152" status="PASS" starttime="20170803 18:46:16.152"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170803 18:46:16.153" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170803 18:46:16.153" status="PASS" starttime="20170803 18:46:16.152"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170803 18:46:16.333" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170803 18:46:16.333" status="PASS" starttime="20170803 18:46:16.153"></status>
</kw>
<msg timestamp="20170803 18:46:16.334" level="INFO">${status} = PASS</msg>
<msg timestamp="20170803 18:46:16.334" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:46:16.334" status="PASS" starttime="20170803 18:46:16.153"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170803 18:46:16.334" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:46:16.334" status="PASS" starttime="20170803 18:46:16.334"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:46:16.335" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:46:16.335" status="PASS" starttime="20170803 18:46:16.335"></status>
</kw>
<status endtime="20170803 18:46:16.335" status="PASS" starttime="20170803 18:46:16.150"></status>
</kw>
<status endtime="20170803 18:46:16.335" status="PASS" starttime="20170803 18:46:16.149"></status>
</kw>
<status endtime="20170803 18:46:16.336" status="PASS" starttime="20170803 18:46:16.149"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170803 18:46:16.336" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170803 18:46:16.336" status="PASS" starttime="20170803 18:46:16.336"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:46:16.338" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170803 18:46:16.338" status="PASS" starttime="20170803 18:46:16.338"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:46:16.339" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170803 18:46:16.339" status="PASS" starttime="20170803 18:46:16.339"></status>
</kw>
<status endtime="20170803 18:46:16.339" status="PASS" starttime="20170803 18:46:16.338"></status>
</kw>
<status endtime="20170803 18:46:16.340" status="PASS" starttime="20170803 18:46:16.337"></status>
</kw>
<status endtime="20170803 18:46:16.340" status="PASS" starttime="20170803 18:46:16.336"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170803 18:46:16.428" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170803 18:46:16.428" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:46:16.428" status="PASS" starttime="20170803 18:46:16.340"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:46:16.430" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:46:16.430" status="PASS" starttime="20170803 18:46:16.429"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:46:16.431" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:46:16.431" status="PASS" starttime="20170803 18:46:16.431"></status>
</kw>
<status endtime="20170803 18:46:16.431" status="PASS" starttime="20170803 18:46:16.430"></status>
</kw>
<status endtime="20170803 18:46:16.431" status="PASS" starttime="20170803 18:46:16.429"></status>
</kw>
<status endtime="20170803 18:46:16.431" status="PASS" starttime="20170803 18:46:16.428"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170803 18:46:16.432" level="INFO">Delete All Sessions</msg>
<status endtime="20170803 18:46:16.432" status="PASS" starttime="20170803 18:46:16.431"></status>
</kw>
<msg timestamp="20170803 18:46:16.432" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:46:16.432" status="PASS" starttime="20170803 18:46:16.148"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:46:16.432" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:46:16.433" status="PASS" starttime="20170803 18:46:16.432"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170803 18:46:16.433" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170803 18:46:16.433" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170803 18:46:16.433" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status endtime="20170803 18:46:16.433" status="PASS" starttime="20170803 18:46:16.433"></status>
</kw>
<msg timestamp="20170803 18:46:16.434" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status endtime="20170803 18:46:16.434" status="PASS" starttime="20170803 18:46:16.148"></status>
</kw>
<msg timestamp="20170803 18:46:16.434" level="INFO">${host_state} = Quiesced</msg>
<status endtime="20170803 18:46:16.434" status="PASS" starttime="20170803 18:46:16.147"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170803 18:46:16.435" level="FAIL">Running != Quiesced</msg>
<status endtime="20170803 18:46:16.435" status="FAIL" starttime="20170803 18:46:16.434"></status>
</kw>
<status endtime="20170803 18:46:16.435" status="FAIL" starttime="20170803 18:46:15.694"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170803 18:46:26.441" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170803 18:46:26.441" status="PASS" starttime="20170803 18:46:26.440"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170803 18:46:26.441" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170803 18:46:26.442" status="PASS" starttime="20170803 18:46:26.441"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170803 18:46:26.442" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170803 18:46:26.442" status="PASS" starttime="20170803 18:46:26.442"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170803 18:46:26.443" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170803 18:46:26.443" status="PASS" starttime="20170803 18:46:26.443"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170803 18:46:26.653" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170803 18:46:26.653" status="PASS" starttime="20170803 18:46:26.444"></status>
</kw>
<msg timestamp="20170803 18:46:26.653" level="INFO">${status} = PASS</msg>
<msg timestamp="20170803 18:46:26.653" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:46:26.653" status="PASS" starttime="20170803 18:46:26.443"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170803 18:46:26.654" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:46:26.654" status="PASS" starttime="20170803 18:46:26.653"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:46:26.654" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:46:26.654" status="PASS" starttime="20170803 18:46:26.654"></status>
</kw>
<status endtime="20170803 18:46:26.654" status="PASS" starttime="20170803 18:46:26.439"></status>
</kw>
<status endtime="20170803 18:46:26.655" status="PASS" starttime="20170803 18:46:26.439"></status>
</kw>
<status endtime="20170803 18:46:26.655" status="PASS" starttime="20170803 18:46:26.438"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170803 18:46:26.655" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170803 18:46:26.655" status="PASS" starttime="20170803 18:46:26.655"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:46:26.657" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170803 18:46:26.657" status="PASS" starttime="20170803 18:46:26.657"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:46:26.658" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170803 18:46:26.658" status="PASS" starttime="20170803 18:46:26.658"></status>
</kw>
<status endtime="20170803 18:46:26.659" status="PASS" starttime="20170803 18:46:26.658"></status>
</kw>
<status endtime="20170803 18:46:26.659" status="PASS" starttime="20170803 18:46:26.656"></status>
</kw>
<status endtime="20170803 18:46:26.659" status="PASS" starttime="20170803 18:46:26.656"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170803 18:46:26.748" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170803 18:46:26.748" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:46:26.748" status="PASS" starttime="20170803 18:46:26.659"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:46:26.750" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:46:26.750" status="PASS" starttime="20170803 18:46:26.749"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:46:26.751" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:46:26.751" status="PASS" starttime="20170803 18:46:26.751"></status>
</kw>
<status endtime="20170803 18:46:26.751" status="PASS" starttime="20170803 18:46:26.750"></status>
</kw>
<status endtime="20170803 18:46:26.752" status="PASS" starttime="20170803 18:46:26.749"></status>
</kw>
<status endtime="20170803 18:46:26.752" status="PASS" starttime="20170803 18:46:26.748"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170803 18:46:26.752" level="INFO">Delete All Sessions</msg>
<status endtime="20170803 18:46:26.752" status="PASS" starttime="20170803 18:46:26.752"></status>
</kw>
<msg timestamp="20170803 18:46:26.752" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:46:26.752" status="PASS" starttime="20170803 18:46:26.437"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:46:26.753" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:46:26.753" status="PASS" starttime="20170803 18:46:26.753"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170803 18:46:26.754" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170803 18:46:26.754" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170803 18:46:26.754" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170803 18:46:26.754" status="PASS" starttime="20170803 18:46:26.753"></status>
</kw>
<msg timestamp="20170803 18:46:26.754" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170803 18:46:26.754" status="PASS" starttime="20170803 18:46:26.437"></status>
</kw>
<msg timestamp="20170803 18:46:26.754" level="INFO">${power_state} = On</msg>
<status endtime="20170803 18:46:26.754" status="PASS" starttime="20170803 18:46:26.436"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170803 18:46:26.755" status="PASS" starttime="20170803 18:46:26.755"></status>
</kw>
<status endtime="20170803 18:46:26.755" status="PASS" starttime="20170803 18:46:26.436"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170803 18:46:26.759" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170803 18:46:26.759" status="PASS" starttime="20170803 18:46:26.758"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170803 18:46:26.760" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170803 18:46:26.760" status="PASS" starttime="20170803 18:46:26.759"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170803 18:46:26.760" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170803 18:46:26.760" status="PASS" starttime="20170803 18:46:26.760"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170803 18:46:26.761" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170803 18:46:26.761" status="PASS" starttime="20170803 18:46:26.761"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170803 18:46:27.044" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170803 18:46:27.045" status="PASS" starttime="20170803 18:46:26.762"></status>
</kw>
<msg timestamp="20170803 18:46:27.045" level="INFO">${status} = PASS</msg>
<msg timestamp="20170803 18:46:27.045" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:46:27.045" status="PASS" starttime="20170803 18:46:26.761"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170803 18:46:27.046" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:46:27.046" status="PASS" starttime="20170803 18:46:27.045"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:46:27.046" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:46:27.046" status="PASS" starttime="20170803 18:46:27.046"></status>
</kw>
<status endtime="20170803 18:46:27.046" status="PASS" starttime="20170803 18:46:26.758"></status>
</kw>
<status endtime="20170803 18:46:27.046" status="PASS" starttime="20170803 18:46:26.757"></status>
</kw>
<status endtime="20170803 18:46:27.047" status="PASS" starttime="20170803 18:46:26.757"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170803 18:46:27.047" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170803 18:46:27.047" status="PASS" starttime="20170803 18:46:27.047"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:46:27.050" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170803 18:46:27.050" status="PASS" starttime="20170803 18:46:27.049"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:46:27.051" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170803 18:46:27.051" status="PASS" starttime="20170803 18:46:27.050"></status>
</kw>
<status endtime="20170803 18:46:27.051" status="PASS" starttime="20170803 18:46:27.050"></status>
</kw>
<status endtime="20170803 18:46:27.051" status="PASS" starttime="20170803 18:46:27.048"></status>
</kw>
<status endtime="20170803 18:46:27.051" status="PASS" starttime="20170803 18:46:27.047"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170803 18:46:27.161" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170803 18:46:27.161" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:46:27.161" status="PASS" starttime="20170803 18:46:27.052"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:46:27.163" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:46:27.163" status="PASS" starttime="20170803 18:46:27.163"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:46:27.165" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:46:27.165" status="PASS" starttime="20170803 18:46:27.165"></status>
</kw>
<status endtime="20170803 18:46:27.165" status="PASS" starttime="20170803 18:46:27.164"></status>
</kw>
<status endtime="20170803 18:46:27.165" status="PASS" starttime="20170803 18:46:27.162"></status>
</kw>
<status endtime="20170803 18:46:27.165" status="PASS" starttime="20170803 18:46:27.162"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170803 18:46:27.166" level="INFO">Delete All Sessions</msg>
<status endtime="20170803 18:46:27.166" status="PASS" starttime="20170803 18:46:27.165"></status>
</kw>
<msg timestamp="20170803 18:46:27.166" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:46:27.166" status="PASS" starttime="20170803 18:46:26.756"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:46:27.166" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:46:27.167" status="PASS" starttime="20170803 18:46:27.166"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170803 18:46:27.167" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170803 18:46:27.167" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170803 18:46:27.167" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status endtime="20170803 18:46:27.167" status="PASS" starttime="20170803 18:46:27.167"></status>
</kw>
<msg timestamp="20170803 18:46:27.168" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status endtime="20170803 18:46:27.168" status="PASS" starttime="20170803 18:46:26.756"></status>
</kw>
<msg timestamp="20170803 18:46:27.168" level="INFO">${host_state} = Quiesced</msg>
<status endtime="20170803 18:46:27.168" status="PASS" starttime="20170803 18:46:26.755"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170803 18:46:27.169" level="FAIL">Running != Quiesced</msg>
<status endtime="20170803 18:46:27.169" status="FAIL" starttime="20170803 18:46:27.168"></status>
</kw>
<status endtime="20170803 18:46:27.169" status="FAIL" starttime="20170803 18:46:26.435"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170803 18:46:37.174" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170803 18:46:37.175" status="PASS" starttime="20170803 18:46:37.174"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170803 18:46:37.175" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170803 18:46:37.175" status="PASS" starttime="20170803 18:46:37.175"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170803 18:46:37.176" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170803 18:46:37.176" status="PASS" starttime="20170803 18:46:37.175"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170803 18:46:37.177" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170803 18:46:37.177" status="PASS" starttime="20170803 18:46:37.176"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170803 18:46:37.372" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170803 18:46:37.372" status="PASS" starttime="20170803 18:46:37.178"></status>
</kw>
<msg timestamp="20170803 18:46:37.372" level="INFO">${status} = PASS</msg>
<msg timestamp="20170803 18:46:37.372" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:46:37.372" status="PASS" starttime="20170803 18:46:37.177"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170803 18:46:37.373" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:46:37.373" status="PASS" starttime="20170803 18:46:37.372"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:46:37.373" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:46:37.373" status="PASS" starttime="20170803 18:46:37.373"></status>
</kw>
<status endtime="20170803 18:46:37.374" status="PASS" starttime="20170803 18:46:37.173"></status>
</kw>
<status endtime="20170803 18:46:37.374" status="PASS" starttime="20170803 18:46:37.173"></status>
</kw>
<status endtime="20170803 18:46:37.374" status="PASS" starttime="20170803 18:46:37.172"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170803 18:46:37.374" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170803 18:46:37.374" status="PASS" starttime="20170803 18:46:37.374"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:46:37.376" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170803 18:46:37.377" status="PASS" starttime="20170803 18:46:37.376"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:46:37.377" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170803 18:46:37.378" status="PASS" starttime="20170803 18:46:37.377"></status>
</kw>
<status endtime="20170803 18:46:37.378" status="PASS" starttime="20170803 18:46:37.377"></status>
</kw>
<status endtime="20170803 18:46:37.378" status="PASS" starttime="20170803 18:46:37.375"></status>
</kw>
<status endtime="20170803 18:46:37.378" status="PASS" starttime="20170803 18:46:37.375"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170803 18:46:37.465" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170803 18:46:37.465" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:46:37.465" status="PASS" starttime="20170803 18:46:37.378"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:46:37.467" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:46:37.467" status="PASS" starttime="20170803 18:46:37.466"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:46:37.468" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:46:37.468" status="PASS" starttime="20170803 18:46:37.468"></status>
</kw>
<status endtime="20170803 18:46:37.468" status="PASS" starttime="20170803 18:46:37.467"></status>
</kw>
<status endtime="20170803 18:46:37.468" status="PASS" starttime="20170803 18:46:37.466"></status>
</kw>
<status endtime="20170803 18:46:37.468" status="PASS" starttime="20170803 18:46:37.465"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170803 18:46:37.469" level="INFO">Delete All Sessions</msg>
<status endtime="20170803 18:46:37.469" status="PASS" starttime="20170803 18:46:37.468"></status>
</kw>
<msg timestamp="20170803 18:46:37.469" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:46:37.469" status="PASS" starttime="20170803 18:46:37.171"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:46:37.469" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:46:37.470" status="PASS" starttime="20170803 18:46:37.469"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170803 18:46:37.470" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170803 18:46:37.470" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170803 18:46:37.470" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170803 18:46:37.470" status="PASS" starttime="20170803 18:46:37.470"></status>
</kw>
<msg timestamp="20170803 18:46:37.471" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170803 18:46:37.471" status="PASS" starttime="20170803 18:46:37.171"></status>
</kw>
<msg timestamp="20170803 18:46:37.471" level="INFO">${power_state} = On</msg>
<status endtime="20170803 18:46:37.471" status="PASS" starttime="20170803 18:46:37.170"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170803 18:46:37.471" status="PASS" starttime="20170803 18:46:37.471"></status>
</kw>
<status endtime="20170803 18:46:37.472" status="PASS" starttime="20170803 18:46:37.170"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170803 18:46:37.475" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170803 18:46:37.476" status="PASS" starttime="20170803 18:46:37.475"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170803 18:46:37.476" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170803 18:46:37.476" status="PASS" starttime="20170803 18:46:37.476"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170803 18:46:37.477" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170803 18:46:37.477" status="PASS" starttime="20170803 18:46:37.477"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170803 18:46:37.478" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170803 18:46:37.478" status="PASS" starttime="20170803 18:46:37.477"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170803 18:46:37.794" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170803 18:46:37.794" status="PASS" starttime="20170803 18:46:37.478"></status>
</kw>
<msg timestamp="20170803 18:46:37.794" level="INFO">${status} = PASS</msg>
<msg timestamp="20170803 18:46:37.794" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:46:37.794" status="PASS" starttime="20170803 18:46:37.478"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170803 18:46:37.795" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:46:37.795" status="PASS" starttime="20170803 18:46:37.794"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:46:37.795" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:46:37.795" status="PASS" starttime="20170803 18:46:37.795"></status>
</kw>
<status endtime="20170803 18:46:37.796" status="PASS" starttime="20170803 18:46:37.475"></status>
</kw>
<status endtime="20170803 18:46:37.796" status="PASS" starttime="20170803 18:46:37.474"></status>
</kw>
<status endtime="20170803 18:46:37.796" status="PASS" starttime="20170803 18:46:37.473"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170803 18:46:37.797" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170803 18:46:37.797" status="PASS" starttime="20170803 18:46:37.796"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:46:37.799" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170803 18:46:37.799" status="PASS" starttime="20170803 18:46:37.798"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:46:37.800" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170803 18:46:37.800" status="PASS" starttime="20170803 18:46:37.799"></status>
</kw>
<status endtime="20170803 18:46:37.800" status="PASS" starttime="20170803 18:46:37.799"></status>
</kw>
<status endtime="20170803 18:46:37.800" status="PASS" starttime="20170803 18:46:37.797"></status>
</kw>
<status endtime="20170803 18:46:37.800" status="PASS" starttime="20170803 18:46:37.797"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170803 18:46:37.905" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170803 18:46:37.905" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:46:37.905" status="PASS" starttime="20170803 18:46:37.800"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:46:37.907" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:46:37.907" status="PASS" starttime="20170803 18:46:37.907"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:46:37.908" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:46:37.909" status="PASS" starttime="20170803 18:46:37.908"></status>
</kw>
<status endtime="20170803 18:46:37.909" status="PASS" starttime="20170803 18:46:37.907"></status>
</kw>
<status endtime="20170803 18:46:37.909" status="PASS" starttime="20170803 18:46:37.906"></status>
</kw>
<status endtime="20170803 18:46:37.909" status="PASS" starttime="20170803 18:46:37.906"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170803 18:46:37.909" level="INFO">Delete All Sessions</msg>
<status endtime="20170803 18:46:37.909" status="PASS" starttime="20170803 18:46:37.909"></status>
</kw>
<msg timestamp="20170803 18:46:37.910" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:46:37.910" status="PASS" starttime="20170803 18:46:37.473"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:46:37.910" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:46:37.910" status="PASS" starttime="20170803 18:46:37.910"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170803 18:46:37.911" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170803 18:46:37.911" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170803 18:46:37.911" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status endtime="20170803 18:46:37.911" status="PASS" starttime="20170803 18:46:37.910"></status>
</kw>
<msg timestamp="20170803 18:46:37.911" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status endtime="20170803 18:46:37.911" status="PASS" starttime="20170803 18:46:37.472"></status>
</kw>
<msg timestamp="20170803 18:46:37.912" level="INFO">${host_state} = Quiesced</msg>
<status endtime="20170803 18:46:37.912" status="PASS" starttime="20170803 18:46:37.472"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170803 18:46:37.912" level="FAIL">Running != Quiesced</msg>
<status endtime="20170803 18:46:37.912" status="FAIL" starttime="20170803 18:46:37.912"></status>
</kw>
<status endtime="20170803 18:46:37.912" status="FAIL" starttime="20170803 18:46:37.169"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170803 18:46:47.918" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170803 18:46:47.919" status="PASS" starttime="20170803 18:46:47.917"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170803 18:46:47.919" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170803 18:46:47.919" status="PASS" starttime="20170803 18:46:47.919"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170803 18:46:47.920" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170803 18:46:47.920" status="PASS" starttime="20170803 18:46:47.920"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170803 18:46:47.921" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170803 18:46:47.921" status="PASS" starttime="20170803 18:46:47.921"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170803 18:46:48.101" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170803 18:46:48.101" status="PASS" starttime="20170803 18:46:47.922"></status>
</kw>
<msg timestamp="20170803 18:46:48.102" level="INFO">${status} = PASS</msg>
<msg timestamp="20170803 18:46:48.102" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:46:48.102" status="PASS" starttime="20170803 18:46:47.922"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170803 18:46:48.102" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:46:48.102" status="PASS" starttime="20170803 18:46:48.102"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:46:48.103" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:46:48.103" status="PASS" starttime="20170803 18:46:48.103"></status>
</kw>
<status endtime="20170803 18:46:48.103" status="PASS" starttime="20170803 18:46:47.917"></status>
</kw>
<status endtime="20170803 18:46:48.103" status="PASS" starttime="20170803 18:46:47.916"></status>
</kw>
<status endtime="20170803 18:46:48.103" status="PASS" starttime="20170803 18:46:47.916"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170803 18:46:48.104" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170803 18:46:48.104" status="PASS" starttime="20170803 18:46:48.104"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:46:48.106" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170803 18:46:48.106" status="PASS" starttime="20170803 18:46:48.105"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:46:48.107" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170803 18:46:48.107" status="PASS" starttime="20170803 18:46:48.107"></status>
</kw>
<status endtime="20170803 18:46:48.107" status="PASS" starttime="20170803 18:46:48.106"></status>
</kw>
<status endtime="20170803 18:46:48.108" status="PASS" starttime="20170803 18:46:48.105"></status>
</kw>
<status endtime="20170803 18:46:48.108" status="PASS" starttime="20170803 18:46:48.104"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170803 18:46:48.170" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170803 18:46:48.170" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:46:48.170" status="PASS" starttime="20170803 18:46:48.108"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:46:48.172" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:46:48.172" status="PASS" starttime="20170803 18:46:48.172"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:46:48.173" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:46:48.173" status="PASS" starttime="20170803 18:46:48.173"></status>
</kw>
<status endtime="20170803 18:46:48.173" status="PASS" starttime="20170803 18:46:48.172"></status>
</kw>
<status endtime="20170803 18:46:48.173" status="PASS" starttime="20170803 18:46:48.171"></status>
</kw>
<status endtime="20170803 18:46:48.173" status="PASS" starttime="20170803 18:46:48.171"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170803 18:46:48.174" level="INFO">Delete All Sessions</msg>
<status endtime="20170803 18:46:48.174" status="PASS" starttime="20170803 18:46:48.174"></status>
</kw>
<msg timestamp="20170803 18:46:48.174" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:46:48.174" status="PASS" starttime="20170803 18:46:47.915"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:46:48.175" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:46:48.175" status="PASS" starttime="20170803 18:46:48.174"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170803 18:46:48.175" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170803 18:46:48.175" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170803 18:46:48.176" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170803 18:46:48.176" status="PASS" starttime="20170803 18:46:48.175"></status>
</kw>
<msg timestamp="20170803 18:46:48.176" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170803 18:46:48.176" status="PASS" starttime="20170803 18:46:47.914"></status>
</kw>
<msg timestamp="20170803 18:46:48.176" level="INFO">${power_state} = On</msg>
<status endtime="20170803 18:46:48.176" status="PASS" starttime="20170803 18:46:47.914"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170803 18:46:48.177" status="PASS" starttime="20170803 18:46:48.177"></status>
</kw>
<status endtime="20170803 18:46:48.177" status="PASS" starttime="20170803 18:46:47.914"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170803 18:46:48.180" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170803 18:46:48.181" status="PASS" starttime="20170803 18:46:48.180"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170803 18:46:48.182" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170803 18:46:48.182" status="PASS" starttime="20170803 18:46:48.181"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170803 18:46:48.182" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170803 18:46:48.182" status="PASS" starttime="20170803 18:46:48.182"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170803 18:46:48.183" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170803 18:46:48.183" status="PASS" starttime="20170803 18:46:48.183"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170803 18:46:48.386" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170803 18:46:48.386" status="PASS" starttime="20170803 18:46:48.184"></status>
</kw>
<msg timestamp="20170803 18:46:48.386" level="INFO">${status} = PASS</msg>
<msg timestamp="20170803 18:46:48.386" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:46:48.386" status="PASS" starttime="20170803 18:46:48.183"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170803 18:46:48.387" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:46:48.387" status="PASS" starttime="20170803 18:46:48.387"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:46:48.388" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:46:48.388" status="PASS" starttime="20170803 18:46:48.387"></status>
</kw>
<status endtime="20170803 18:46:48.388" status="PASS" starttime="20170803 18:46:48.180"></status>
</kw>
<status endtime="20170803 18:46:48.388" status="PASS" starttime="20170803 18:46:48.179"></status>
</kw>
<status endtime="20170803 18:46:48.388" status="PASS" starttime="20170803 18:46:48.179"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170803 18:46:48.389" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170803 18:46:48.389" status="PASS" starttime="20170803 18:46:48.388"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:46:48.391" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170803 18:46:48.391" status="PASS" starttime="20170803 18:46:48.390"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:46:48.392" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170803 18:46:48.392" status="PASS" starttime="20170803 18:46:48.391"></status>
</kw>
<status endtime="20170803 18:46:48.392" status="PASS" starttime="20170803 18:46:48.391"></status>
</kw>
<status endtime="20170803 18:46:48.392" status="PASS" starttime="20170803 18:46:48.389"></status>
</kw>
<status endtime="20170803 18:46:48.392" status="PASS" starttime="20170803 18:46:48.389"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170803 18:46:48.482" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170803 18:46:48.482" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:46:48.482" status="PASS" starttime="20170803 18:46:48.392"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:46:48.483" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:46:48.483" status="PASS" starttime="20170803 18:46:48.483"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:46:48.484" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:46:48.484" status="PASS" starttime="20170803 18:46:48.484"></status>
</kw>
<status endtime="20170803 18:46:48.485" status="PASS" starttime="20170803 18:46:48.484"></status>
</kw>
<status endtime="20170803 18:46:48.485" status="PASS" starttime="20170803 18:46:48.482"></status>
</kw>
<status endtime="20170803 18:46:48.485" status="PASS" starttime="20170803 18:46:48.482"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170803 18:46:48.485" level="INFO">Delete All Sessions</msg>
<status endtime="20170803 18:46:48.485" status="PASS" starttime="20170803 18:46:48.485"></status>
</kw>
<msg timestamp="20170803 18:46:48.485" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:46:48.485" status="PASS" starttime="20170803 18:46:48.178"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:46:48.486" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:46:48.486" status="PASS" starttime="20170803 18:46:48.486"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170803 18:46:48.487" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170803 18:46:48.487" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170803 18:46:48.487" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status endtime="20170803 18:46:48.487" status="PASS" starttime="20170803 18:46:48.486"></status>
</kw>
<msg timestamp="20170803 18:46:48.487" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status endtime="20170803 18:46:48.487" status="PASS" starttime="20170803 18:46:48.177"></status>
</kw>
<msg timestamp="20170803 18:46:48.488" level="INFO">${host_state} = Quiesced</msg>
<status endtime="20170803 18:46:48.488" status="PASS" starttime="20170803 18:46:48.177"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170803 18:46:48.489" level="FAIL">Running != Quiesced</msg>
<status endtime="20170803 18:46:48.489" status="FAIL" starttime="20170803 18:46:48.488"></status>
</kw>
<status endtime="20170803 18:46:48.489" status="FAIL" starttime="20170803 18:46:47.913"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170803 18:46:58.494" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170803 18:46:58.495" status="PASS" starttime="20170803 18:46:58.494"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170803 18:46:58.495" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170803 18:46:58.495" status="PASS" starttime="20170803 18:46:58.495"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170803 18:46:58.496" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170803 18:46:58.496" status="PASS" starttime="20170803 18:46:58.496"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170803 18:46:58.497" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170803 18:46:58.497" status="PASS" starttime="20170803 18:46:58.496"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170803 18:46:58.674" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170803 18:46:58.674" status="PASS" starttime="20170803 18:46:58.497"></status>
</kw>
<msg timestamp="20170803 18:46:58.674" level="INFO">${status} = PASS</msg>
<msg timestamp="20170803 18:46:58.674" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:46:58.675" status="PASS" starttime="20170803 18:46:58.497"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170803 18:46:58.675" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:46:58.675" status="PASS" starttime="20170803 18:46:58.675"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:46:58.676" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:46:58.676" status="PASS" starttime="20170803 18:46:58.676"></status>
</kw>
<status endtime="20170803 18:46:58.676" status="PASS" starttime="20170803 18:46:58.494"></status>
</kw>
<status endtime="20170803 18:46:58.676" status="PASS" starttime="20170803 18:46:58.493"></status>
</kw>
<status endtime="20170803 18:46:58.676" status="PASS" starttime="20170803 18:46:58.492"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170803 18:46:58.677" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170803 18:46:58.677" status="PASS" starttime="20170803 18:46:58.677"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:46:58.679" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170803 18:46:58.679" status="PASS" starttime="20170803 18:46:58.678"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:46:58.680" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170803 18:46:58.680" status="PASS" starttime="20170803 18:46:58.680"></status>
</kw>
<status endtime="20170803 18:46:58.681" status="PASS" starttime="20170803 18:46:58.679"></status>
</kw>
<status endtime="20170803 18:46:58.681" status="PASS" starttime="20170803 18:46:58.678"></status>
</kw>
<status endtime="20170803 18:46:58.681" status="PASS" starttime="20170803 18:46:58.677"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170803 18:46:58.758" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170803 18:46:58.758" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:46:58.758" status="PASS" starttime="20170803 18:46:58.681"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:46:58.760" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:46:58.760" status="PASS" starttime="20170803 18:46:58.759"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:46:58.761" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:46:58.761" status="PASS" starttime="20170803 18:46:58.760"></status>
</kw>
<status endtime="20170803 18:46:58.761" status="PASS" starttime="20170803 18:46:58.760"></status>
</kw>
<status endtime="20170803 18:46:58.761" status="PASS" starttime="20170803 18:46:58.759"></status>
</kw>
<status endtime="20170803 18:46:58.761" status="PASS" starttime="20170803 18:46:58.758"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170803 18:46:58.761" level="INFO">Delete All Sessions</msg>
<status endtime="20170803 18:46:58.762" status="PASS" starttime="20170803 18:46:58.761"></status>
</kw>
<msg timestamp="20170803 18:46:58.762" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:46:58.762" status="PASS" starttime="20170803 18:46:58.492"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:46:58.762" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:46:58.762" status="PASS" starttime="20170803 18:46:58.762"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170803 18:46:58.763" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170803 18:46:58.763" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170803 18:46:58.763" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170803 18:46:58.763" status="PASS" starttime="20170803 18:46:58.763"></status>
</kw>
<msg timestamp="20170803 18:46:58.764" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170803 18:46:58.764" status="PASS" starttime="20170803 18:46:58.491"></status>
</kw>
<msg timestamp="20170803 18:46:58.764" level="INFO">${power_state} = On</msg>
<status endtime="20170803 18:46:58.764" status="PASS" starttime="20170803 18:46:58.490"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170803 18:46:58.764" status="PASS" starttime="20170803 18:46:58.764"></status>
</kw>
<status endtime="20170803 18:46:58.765" status="PASS" starttime="20170803 18:46:58.490"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170803 18:46:58.768" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170803 18:46:58.769" status="PASS" starttime="20170803 18:46:58.768"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170803 18:46:58.769" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170803 18:46:58.769" status="PASS" starttime="20170803 18:46:58.769"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170803 18:46:58.770" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170803 18:46:58.770" status="PASS" starttime="20170803 18:46:58.769"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170803 18:46:58.770" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170803 18:46:58.770" status="PASS" starttime="20170803 18:46:58.770"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170803 18:46:58.976" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170803 18:46:58.976" status="PASS" starttime="20170803 18:46:58.771"></status>
</kw>
<msg timestamp="20170803 18:46:58.976" level="INFO">${status} = PASS</msg>
<msg timestamp="20170803 18:46:58.976" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:46:58.976" status="PASS" starttime="20170803 18:46:58.771"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170803 18:46:58.977" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:46:58.977" status="PASS" starttime="20170803 18:46:58.976"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:46:58.977" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:46:58.977" status="PASS" starttime="20170803 18:46:58.977"></status>
</kw>
<status endtime="20170803 18:46:58.978" status="PASS" starttime="20170803 18:46:58.767"></status>
</kw>
<status endtime="20170803 18:46:58.978" status="PASS" starttime="20170803 18:46:58.767"></status>
</kw>
<status endtime="20170803 18:46:58.978" status="PASS" starttime="20170803 18:46:58.766"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170803 18:46:58.978" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170803 18:46:58.978" status="PASS" starttime="20170803 18:46:58.978"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:46:58.980" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170803 18:46:58.980" status="PASS" starttime="20170803 18:46:58.980"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:46:58.981" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170803 18:46:58.981" status="PASS" starttime="20170803 18:46:58.981"></status>
</kw>
<status endtime="20170803 18:46:58.982" status="PASS" starttime="20170803 18:46:58.981"></status>
</kw>
<status endtime="20170803 18:46:58.982" status="PASS" starttime="20170803 18:46:58.979"></status>
</kw>
<status endtime="20170803 18:46:58.982" status="PASS" starttime="20170803 18:46:58.979"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170803 18:46:59.070" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170803 18:46:59.070" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:46:59.070" status="PASS" starttime="20170803 18:46:58.982"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:46:59.072" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:46:59.072" status="PASS" starttime="20170803 18:46:59.071"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:46:59.073" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:46:59.073" status="PASS" starttime="20170803 18:46:59.072"></status>
</kw>
<status endtime="20170803 18:46:59.073" status="PASS" starttime="20170803 18:46:59.072"></status>
</kw>
<status endtime="20170803 18:46:59.073" status="PASS" starttime="20170803 18:46:59.071"></status>
</kw>
<status endtime="20170803 18:46:59.073" status="PASS" starttime="20170803 18:46:59.070"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170803 18:46:59.073" level="INFO">Delete All Sessions</msg>
<status endtime="20170803 18:46:59.074" status="PASS" starttime="20170803 18:46:59.073"></status>
</kw>
<msg timestamp="20170803 18:46:59.074" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:46:59.074" status="PASS" starttime="20170803 18:46:58.766"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:46:59.074" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:46:59.074" status="PASS" starttime="20170803 18:46:59.074"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170803 18:46:59.075" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170803 18:46:59.075" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170803 18:46:59.075" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status endtime="20170803 18:46:59.075" status="PASS" starttime="20170803 18:46:59.075"></status>
</kw>
<msg timestamp="20170803 18:46:59.075" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status endtime="20170803 18:46:59.076" status="PASS" starttime="20170803 18:46:58.765"></status>
</kw>
<msg timestamp="20170803 18:46:59.076" level="INFO">${host_state} = Quiesced</msg>
<status endtime="20170803 18:46:59.076" status="PASS" starttime="20170803 18:46:58.765"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170803 18:46:59.076" level="FAIL">Running != Quiesced</msg>
<status endtime="20170803 18:46:59.077" status="FAIL" starttime="20170803 18:46:59.076"></status>
</kw>
<status endtime="20170803 18:46:59.077" status="FAIL" starttime="20170803 18:46:58.489"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170803 18:47:09.082" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170803 18:47:09.083" status="PASS" starttime="20170803 18:47:09.082"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170803 18:47:09.083" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170803 18:47:09.083" status="PASS" starttime="20170803 18:47:09.083"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170803 18:47:09.084" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170803 18:47:09.084" status="PASS" starttime="20170803 18:47:09.084"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170803 18:47:09.085" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170803 18:47:09.085" status="PASS" starttime="20170803 18:47:09.084"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170803 18:47:09.273" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170803 18:47:09.273" status="PASS" starttime="20170803 18:47:09.085"></status>
</kw>
<msg timestamp="20170803 18:47:09.273" level="INFO">${status} = PASS</msg>
<msg timestamp="20170803 18:47:09.273" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:47:09.273" status="PASS" starttime="20170803 18:47:09.085"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170803 18:47:09.273" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:47:09.274" status="PASS" starttime="20170803 18:47:09.273"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:47:09.274" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:47:09.274" status="PASS" starttime="20170803 18:47:09.274"></status>
</kw>
<status endtime="20170803 18:47:09.274" status="PASS" starttime="20170803 18:47:09.081"></status>
</kw>
<status endtime="20170803 18:47:09.274" status="PASS" starttime="20170803 18:47:09.081"></status>
</kw>
<status endtime="20170803 18:47:09.275" status="PASS" starttime="20170803 18:47:09.080"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170803 18:47:09.275" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170803 18:47:09.275" status="PASS" starttime="20170803 18:47:09.275"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:47:09.278" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170803 18:47:09.278" status="PASS" starttime="20170803 18:47:09.277"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:47:09.278" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170803 18:47:09.279" status="PASS" starttime="20170803 18:47:09.278"></status>
</kw>
<status endtime="20170803 18:47:09.279" status="PASS" starttime="20170803 18:47:09.278"></status>
</kw>
<status endtime="20170803 18:47:09.279" status="PASS" starttime="20170803 18:47:09.276"></status>
</kw>
<status endtime="20170803 18:47:09.279" status="PASS" starttime="20170803 18:47:09.276"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170803 18:47:09.358" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170803 18:47:09.359" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:47:09.359" status="PASS" starttime="20170803 18:47:09.279"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:47:09.360" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:47:09.360" status="PASS" starttime="20170803 18:47:09.360"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:47:09.362" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:47:09.362" status="PASS" starttime="20170803 18:47:09.361"></status>
</kw>
<status endtime="20170803 18:47:09.362" status="PASS" starttime="20170803 18:47:09.360"></status>
</kw>
<status endtime="20170803 18:47:09.362" status="PASS" starttime="20170803 18:47:09.359"></status>
</kw>
<status endtime="20170803 18:47:09.362" status="PASS" starttime="20170803 18:47:09.359"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170803 18:47:09.362" level="INFO">Delete All Sessions</msg>
<status endtime="20170803 18:47:09.362" status="PASS" starttime="20170803 18:47:09.362"></status>
</kw>
<msg timestamp="20170803 18:47:09.363" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:47:09.363" status="PASS" starttime="20170803 18:47:09.079"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:47:09.363" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:47:09.363" status="PASS" starttime="20170803 18:47:09.363"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170803 18:47:09.364" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170803 18:47:09.364" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170803 18:47:09.364" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170803 18:47:09.364" status="PASS" starttime="20170803 18:47:09.364"></status>
</kw>
<msg timestamp="20170803 18:47:09.364" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170803 18:47:09.364" status="PASS" starttime="20170803 18:47:09.079"></status>
</kw>
<msg timestamp="20170803 18:47:09.365" level="INFO">${power_state} = On</msg>
<status endtime="20170803 18:47:09.365" status="PASS" starttime="20170803 18:47:09.078"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170803 18:47:09.365" status="PASS" starttime="20170803 18:47:09.365"></status>
</kw>
<status endtime="20170803 18:47:09.365" status="PASS" starttime="20170803 18:47:09.078"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170803 18:47:09.369" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170803 18:47:09.369" status="PASS" starttime="20170803 18:47:09.369"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170803 18:47:09.370" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170803 18:47:09.370" status="PASS" starttime="20170803 18:47:09.369"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170803 18:47:09.370" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170803 18:47:09.371" status="PASS" starttime="20170803 18:47:09.370"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170803 18:47:09.371" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170803 18:47:09.371" status="PASS" starttime="20170803 18:47:09.371"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170803 18:47:09.575" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170803 18:47:09.575" status="PASS" starttime="20170803 18:47:09.372"></status>
</kw>
<msg timestamp="20170803 18:47:09.576" level="INFO">${status} = PASS</msg>
<msg timestamp="20170803 18:47:09.576" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:47:09.576" status="PASS" starttime="20170803 18:47:09.371"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170803 18:47:09.576" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:47:09.576" status="PASS" starttime="20170803 18:47:09.576"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:47:09.577" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:47:09.577" status="PASS" starttime="20170803 18:47:09.577"></status>
</kw>
<status endtime="20170803 18:47:09.577" status="PASS" starttime="20170803 18:47:09.368"></status>
</kw>
<status endtime="20170803 18:47:09.577" status="PASS" starttime="20170803 18:47:09.368"></status>
</kw>
<status endtime="20170803 18:47:09.577" status="PASS" starttime="20170803 18:47:09.367"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170803 18:47:09.578" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170803 18:47:09.578" status="PASS" starttime="20170803 18:47:09.578"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:47:09.580" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170803 18:47:09.581" status="PASS" starttime="20170803 18:47:09.579"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:47:09.581" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170803 18:47:09.582" status="PASS" starttime="20170803 18:47:09.581"></status>
</kw>
<status endtime="20170803 18:47:09.582" status="PASS" starttime="20170803 18:47:09.581"></status>
</kw>
<status endtime="20170803 18:47:09.582" status="PASS" starttime="20170803 18:47:09.579"></status>
</kw>
<status endtime="20170803 18:47:09.582" status="PASS" starttime="20170803 18:47:09.578"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170803 18:47:09.685" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170803 18:47:09.685" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:47:09.685" status="PASS" starttime="20170803 18:47:09.582"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:47:09.687" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:47:09.687" status="PASS" starttime="20170803 18:47:09.687"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:47:09.688" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:47:09.688" status="PASS" starttime="20170803 18:47:09.688"></status>
</kw>
<status endtime="20170803 18:47:09.688" status="PASS" starttime="20170803 18:47:09.687"></status>
</kw>
<status endtime="20170803 18:47:09.688" status="PASS" starttime="20170803 18:47:09.686"></status>
</kw>
<status endtime="20170803 18:47:09.688" status="PASS" starttime="20170803 18:47:09.685"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170803 18:47:09.689" level="INFO">Delete All Sessions</msg>
<status endtime="20170803 18:47:09.689" status="PASS" starttime="20170803 18:47:09.689"></status>
</kw>
<msg timestamp="20170803 18:47:09.689" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:47:09.689" status="PASS" starttime="20170803 18:47:09.366"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:47:09.690" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:47:09.690" status="PASS" starttime="20170803 18:47:09.689"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170803 18:47:09.690" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170803 18:47:09.690" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170803 18:47:09.691" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status endtime="20170803 18:47:09.691" status="PASS" starttime="20170803 18:47:09.690"></status>
</kw>
<msg timestamp="20170803 18:47:09.691" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status endtime="20170803 18:47:09.691" status="PASS" starttime="20170803 18:47:09.366"></status>
</kw>
<msg timestamp="20170803 18:47:09.691" level="INFO">${host_state} = Quiesced</msg>
<status endtime="20170803 18:47:09.691" status="PASS" starttime="20170803 18:47:09.365"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170803 18:47:09.692" level="FAIL">Running != Quiesced</msg>
<status endtime="20170803 18:47:09.692" status="FAIL" starttime="20170803 18:47:09.691"></status>
</kw>
<status endtime="20170803 18:47:09.692" status="FAIL" starttime="20170803 18:47:09.077"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170803 18:47:19.697" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170803 18:47:19.697" status="PASS" starttime="20170803 18:47:19.697"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170803 18:47:19.698" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170803 18:47:19.698" status="PASS" starttime="20170803 18:47:19.698"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170803 18:47:19.699" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170803 18:47:19.699" status="PASS" starttime="20170803 18:47:19.698"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170803 18:47:19.700" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170803 18:47:19.700" status="PASS" starttime="20170803 18:47:19.699"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170803 18:47:19.909" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170803 18:47:19.909" status="PASS" starttime="20170803 18:47:19.701"></status>
</kw>
<msg timestamp="20170803 18:47:19.909" level="INFO">${status} = PASS</msg>
<msg timestamp="20170803 18:47:19.909" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:47:19.909" status="PASS" starttime="20170803 18:47:19.700"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170803 18:47:19.910" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:47:19.910" status="PASS" starttime="20170803 18:47:19.910"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:47:19.911" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:47:19.911" status="PASS" starttime="20170803 18:47:19.910"></status>
</kw>
<status endtime="20170803 18:47:19.911" status="PASS" starttime="20170803 18:47:19.696"></status>
</kw>
<status endtime="20170803 18:47:19.911" status="PASS" starttime="20170803 18:47:19.696"></status>
</kw>
<status endtime="20170803 18:47:19.911" status="PASS" starttime="20170803 18:47:19.695"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170803 18:47:19.912" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170803 18:47:19.912" status="PASS" starttime="20170803 18:47:19.911"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:47:19.914" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170803 18:47:19.914" status="PASS" starttime="20170803 18:47:19.913"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:47:19.915" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170803 18:47:19.915" status="PASS" starttime="20170803 18:47:19.915"></status>
</kw>
<status endtime="20170803 18:47:19.915" status="PASS" starttime="20170803 18:47:19.914"></status>
</kw>
<status endtime="20170803 18:47:19.915" status="PASS" starttime="20170803 18:47:19.913"></status>
</kw>
<status endtime="20170803 18:47:19.915" status="PASS" starttime="20170803 18:47:19.912"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170803 18:47:20.012" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170803 18:47:20.012" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:47:20.012" status="PASS" starttime="20170803 18:47:19.916"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:47:20.014" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:47:20.014" status="PASS" starttime="20170803 18:47:20.013"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:47:20.015" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:47:20.015" status="PASS" starttime="20170803 18:47:20.015"></status>
</kw>
<status endtime="20170803 18:47:20.015" status="PASS" starttime="20170803 18:47:20.014"></status>
</kw>
<status endtime="20170803 18:47:20.015" status="PASS" starttime="20170803 18:47:20.013"></status>
</kw>
<status endtime="20170803 18:47:20.015" status="PASS" starttime="20170803 18:47:20.012"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170803 18:47:20.016" level="INFO">Delete All Sessions</msg>
<status endtime="20170803 18:47:20.016" status="PASS" starttime="20170803 18:47:20.016"></status>
</kw>
<msg timestamp="20170803 18:47:20.016" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:47:20.016" status="PASS" starttime="20170803 18:47:19.694"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:47:20.017" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:47:20.017" status="PASS" starttime="20170803 18:47:20.016"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170803 18:47:20.017" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170803 18:47:20.017" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170803 18:47:20.017" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170803 18:47:20.017" status="PASS" starttime="20170803 18:47:20.017"></status>
</kw>
<msg timestamp="20170803 18:47:20.018" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170803 18:47:20.018" status="PASS" starttime="20170803 18:47:19.694"></status>
</kw>
<msg timestamp="20170803 18:47:20.018" level="INFO">${power_state} = On</msg>
<status endtime="20170803 18:47:20.018" status="PASS" starttime="20170803 18:47:19.693"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170803 18:47:20.019" status="PASS" starttime="20170803 18:47:20.018"></status>
</kw>
<status endtime="20170803 18:47:20.019" status="PASS" starttime="20170803 18:47:19.693"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170803 18:47:20.023" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170803 18:47:20.023" status="PASS" starttime="20170803 18:47:20.022"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170803 18:47:20.024" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170803 18:47:20.024" status="PASS" starttime="20170803 18:47:20.023"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170803 18:47:20.024" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170803 18:47:20.024" status="PASS" starttime="20170803 18:47:20.024"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170803 18:47:20.025" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170803 18:47:20.025" status="PASS" starttime="20170803 18:47:20.025"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170803 18:47:20.319" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170803 18:47:20.319" status="PASS" starttime="20170803 18:47:20.026"></status>
</kw>
<msg timestamp="20170803 18:47:20.319" level="INFO">${status} = PASS</msg>
<msg timestamp="20170803 18:47:20.319" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:47:20.319" status="PASS" starttime="20170803 18:47:20.025"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170803 18:47:20.320" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:47:20.320" status="PASS" starttime="20170803 18:47:20.319"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:47:20.320" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:47:20.321" status="PASS" starttime="20170803 18:47:20.320"></status>
</kw>
<status endtime="20170803 18:47:20.321" status="PASS" starttime="20170803 18:47:20.022"></status>
</kw>
<status endtime="20170803 18:47:20.321" status="PASS" starttime="20170803 18:47:20.021"></status>
</kw>
<status endtime="20170803 18:47:20.321" status="PASS" starttime="20170803 18:47:20.020"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170803 18:47:20.321" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170803 18:47:20.321" status="PASS" starttime="20170803 18:47:20.321"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:47:20.324" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170803 18:47:20.324" status="PASS" starttime="20170803 18:47:20.323"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:47:20.324" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170803 18:47:20.325" status="PASS" starttime="20170803 18:47:20.324"></status>
</kw>
<status endtime="20170803 18:47:20.325" status="PASS" starttime="20170803 18:47:20.324"></status>
</kw>
<status endtime="20170803 18:47:20.325" status="PASS" starttime="20170803 18:47:20.322"></status>
</kw>
<status endtime="20170803 18:47:20.325" status="PASS" starttime="20170803 18:47:20.322"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170803 18:47:20.626" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170803 18:47:20.626" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:47:20.626" status="PASS" starttime="20170803 18:47:20.325"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:47:20.628" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:47:20.628" status="PASS" starttime="20170803 18:47:20.628"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:47:20.630" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:47:20.630" status="PASS" starttime="20170803 18:47:20.629"></status>
</kw>
<status endtime="20170803 18:47:20.630" status="PASS" starttime="20170803 18:47:20.628"></status>
</kw>
<status endtime="20170803 18:47:20.630" status="PASS" starttime="20170803 18:47:20.627"></status>
</kw>
<status endtime="20170803 18:47:20.630" status="PASS" starttime="20170803 18:47:20.627"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170803 18:47:20.630" level="INFO">Delete All Sessions</msg>
<status endtime="20170803 18:47:20.630" status="PASS" starttime="20170803 18:47:20.630"></status>
</kw>
<msg timestamp="20170803 18:47:20.631" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:47:20.631" status="PASS" starttime="20170803 18:47:20.020"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:47:20.631" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:47:20.631" status="PASS" starttime="20170803 18:47:20.631"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170803 18:47:20.632" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170803 18:47:20.632" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170803 18:47:20.632" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status endtime="20170803 18:47:20.632" status="PASS" starttime="20170803 18:47:20.632"></status>
</kw>
<msg timestamp="20170803 18:47:20.632" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status endtime="20170803 18:47:20.633" status="PASS" starttime="20170803 18:47:20.019"></status>
</kw>
<msg timestamp="20170803 18:47:20.633" level="INFO">${host_state} = Quiesced</msg>
<status endtime="20170803 18:47:20.633" status="PASS" starttime="20170803 18:47:20.019"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170803 18:47:20.633" level="FAIL">Running != Quiesced</msg>
<status endtime="20170803 18:47:20.634" status="FAIL" starttime="20170803 18:47:20.633"></status>
</kw>
<status endtime="20170803 18:47:20.634" status="FAIL" starttime="20170803 18:47:19.693"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170803 18:47:30.639" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170803 18:47:30.639" status="PASS" starttime="20170803 18:47:30.638"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170803 18:47:30.640" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170803 18:47:30.640" status="PASS" starttime="20170803 18:47:30.639"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170803 18:47:30.640" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170803 18:47:30.640" status="PASS" starttime="20170803 18:47:30.640"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170803 18:47:30.641" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170803 18:47:30.641" status="PASS" starttime="20170803 18:47:30.641"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170803 18:47:30.865" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170803 18:47:30.866" status="PASS" starttime="20170803 18:47:30.642"></status>
</kw>
<msg timestamp="20170803 18:47:30.866" level="INFO">${status} = PASS</msg>
<msg timestamp="20170803 18:47:30.866" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:47:30.866" status="PASS" starttime="20170803 18:47:30.641"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170803 18:47:30.866" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:47:30.867" status="PASS" starttime="20170803 18:47:30.866"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:47:30.867" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:47:30.867" status="PASS" starttime="20170803 18:47:30.867"></status>
</kw>
<status endtime="20170803 18:47:30.867" status="PASS" starttime="20170803 18:47:30.638"></status>
</kw>
<status endtime="20170803 18:47:30.868" status="PASS" starttime="20170803 18:47:30.637"></status>
</kw>
<status endtime="20170803 18:47:30.868" status="PASS" starttime="20170803 18:47:30.637"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170803 18:47:30.868" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170803 18:47:30.868" status="PASS" starttime="20170803 18:47:30.868"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:47:30.870" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170803 18:47:30.870" status="PASS" starttime="20170803 18:47:30.870"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:47:30.871" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170803 18:47:30.871" status="PASS" starttime="20170803 18:47:30.871"></status>
</kw>
<status endtime="20170803 18:47:30.871" status="PASS" starttime="20170803 18:47:30.871"></status>
</kw>
<status endtime="20170803 18:47:30.872" status="PASS" starttime="20170803 18:47:30.869"></status>
</kw>
<status endtime="20170803 18:47:30.872" status="PASS" starttime="20170803 18:47:30.869"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170803 18:47:30.934" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170803 18:47:30.935" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:47:30.935" status="PASS" starttime="20170803 18:47:30.872"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:47:30.936" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:47:30.936" status="PASS" starttime="20170803 18:47:30.936"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:47:30.937" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:47:30.937" status="PASS" starttime="20170803 18:47:30.937"></status>
</kw>
<status endtime="20170803 18:47:30.937" status="PASS" starttime="20170803 18:47:30.937"></status>
</kw>
<status endtime="20170803 18:47:30.938" status="PASS" starttime="20170803 18:47:30.935"></status>
</kw>
<status endtime="20170803 18:47:30.938" status="PASS" starttime="20170803 18:47:30.935"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170803 18:47:30.938" level="INFO">Delete All Sessions</msg>
<status endtime="20170803 18:47:30.938" status="PASS" starttime="20170803 18:47:30.938"></status>
</kw>
<msg timestamp="20170803 18:47:30.938" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:47:30.938" status="PASS" starttime="20170803 18:47:30.636"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:47:30.939" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:47:30.939" status="PASS" starttime="20170803 18:47:30.939"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170803 18:47:30.940" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170803 18:47:30.940" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170803 18:47:30.940" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170803 18:47:30.940" status="PASS" starttime="20170803 18:47:30.939"></status>
</kw>
<msg timestamp="20170803 18:47:30.940" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170803 18:47:30.940" status="PASS" starttime="20170803 18:47:30.636"></status>
</kw>
<msg timestamp="20170803 18:47:30.941" level="INFO">${power_state} = On</msg>
<status endtime="20170803 18:47:30.941" status="PASS" starttime="20170803 18:47:30.635"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170803 18:47:30.941" status="PASS" starttime="20170803 18:47:30.941"></status>
</kw>
<status endtime="20170803 18:47:30.941" status="PASS" starttime="20170803 18:47:30.635"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170803 18:47:30.945" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170803 18:47:30.945" status="PASS" starttime="20170803 18:47:30.944"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170803 18:47:30.946" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170803 18:47:30.946" status="PASS" starttime="20170803 18:47:30.946"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170803 18:47:30.947" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170803 18:47:30.947" status="PASS" starttime="20170803 18:47:30.946"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170803 18:47:30.947" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170803 18:47:30.947" status="PASS" starttime="20170803 18:47:30.947"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170803 18:47:31.124" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170803 18:47:31.124" status="PASS" starttime="20170803 18:47:30.948"></status>
</kw>
<msg timestamp="20170803 18:47:31.124" level="INFO">${status} = PASS</msg>
<msg timestamp="20170803 18:47:31.124" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:47:31.125" status="PASS" starttime="20170803 18:47:30.948"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170803 18:47:31.125" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:47:31.125" status="PASS" starttime="20170803 18:47:31.125"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:47:31.126" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:47:31.126" status="PASS" starttime="20170803 18:47:31.125"></status>
</kw>
<status endtime="20170803 18:47:31.126" status="PASS" starttime="20170803 18:47:30.944"></status>
</kw>
<status endtime="20170803 18:47:31.126" status="PASS" starttime="20170803 18:47:30.943"></status>
</kw>
<status endtime="20170803 18:47:31.126" status="PASS" starttime="20170803 18:47:30.943"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170803 18:47:31.127" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170803 18:47:31.127" status="PASS" starttime="20170803 18:47:31.126"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:47:31.129" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170803 18:47:31.129" status="PASS" starttime="20170803 18:47:31.128"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:47:31.130" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170803 18:47:31.130" status="PASS" starttime="20170803 18:47:31.130"></status>
</kw>
<status endtime="20170803 18:47:31.130" status="PASS" starttime="20170803 18:47:31.129"></status>
</kw>
<status endtime="20170803 18:47:31.130" status="PASS" starttime="20170803 18:47:31.128"></status>
</kw>
<status endtime="20170803 18:47:31.130" status="PASS" starttime="20170803 18:47:31.127"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170803 18:47:31.243" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170803 18:47:31.243" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:47:31.243" status="PASS" starttime="20170803 18:47:31.130"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:47:31.245" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:47:31.245" status="PASS" starttime="20170803 18:47:31.244"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:47:31.246" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:47:31.246" status="PASS" starttime="20170803 18:47:31.246"></status>
</kw>
<status endtime="20170803 18:47:31.246" status="PASS" starttime="20170803 18:47:31.245"></status>
</kw>
<status endtime="20170803 18:47:31.246" status="PASS" starttime="20170803 18:47:31.244"></status>
</kw>
<status endtime="20170803 18:47:31.246" status="PASS" starttime="20170803 18:47:31.244"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170803 18:47:31.247" level="INFO">Delete All Sessions</msg>
<status endtime="20170803 18:47:31.247" status="PASS" starttime="20170803 18:47:31.247"></status>
</kw>
<msg timestamp="20170803 18:47:31.247" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:47:31.247" status="PASS" starttime="20170803 18:47:30.942"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:47:31.248" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:47:31.248" status="PASS" starttime="20170803 18:47:31.247"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170803 18:47:31.248" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170803 18:47:31.248" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170803 18:47:31.249" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status endtime="20170803 18:47:31.249" status="PASS" starttime="20170803 18:47:31.248"></status>
</kw>
<msg timestamp="20170803 18:47:31.249" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status endtime="20170803 18:47:31.249" status="PASS" starttime="20170803 18:47:30.942"></status>
</kw>
<msg timestamp="20170803 18:47:31.249" level="INFO">${host_state} = Quiesced</msg>
<status endtime="20170803 18:47:31.249" status="PASS" starttime="20170803 18:47:30.941"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170803 18:47:31.250" level="FAIL">Running != Quiesced</msg>
<status endtime="20170803 18:47:31.250" status="FAIL" starttime="20170803 18:47:31.249"></status>
</kw>
<status endtime="20170803 18:47:31.250" status="FAIL" starttime="20170803 18:47:30.634"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170803 18:47:41.256" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170803 18:47:41.256" status="PASS" starttime="20170803 18:47:41.255"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170803 18:47:41.257" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170803 18:47:41.257" status="PASS" starttime="20170803 18:47:41.256"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170803 18:47:41.257" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170803 18:47:41.257" status="PASS" starttime="20170803 18:47:41.257"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170803 18:47:41.258" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170803 18:47:41.258" status="PASS" starttime="20170803 18:47:41.258"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170803 18:47:41.531" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170803 18:47:41.531" status="PASS" starttime="20170803 18:47:41.259"></status>
</kw>
<msg timestamp="20170803 18:47:41.532" level="INFO">${status} = PASS</msg>
<msg timestamp="20170803 18:47:41.532" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:47:41.532" status="PASS" starttime="20170803 18:47:41.258"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170803 18:47:41.532" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:47:41.532" status="PASS" starttime="20170803 18:47:41.532"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:47:41.533" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:47:41.533" status="PASS" starttime="20170803 18:47:41.533"></status>
</kw>
<status endtime="20170803 18:47:41.533" status="PASS" starttime="20170803 18:47:41.255"></status>
</kw>
<status endtime="20170803 18:47:41.533" status="PASS" starttime="20170803 18:47:41.254"></status>
</kw>
<status endtime="20170803 18:47:41.533" status="PASS" starttime="20170803 18:47:41.254"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170803 18:47:41.534" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170803 18:47:41.534" status="PASS" starttime="20170803 18:47:41.534"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:47:41.536" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170803 18:47:41.536" status="PASS" starttime="20170803 18:47:41.535"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:47:41.537" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170803 18:47:41.538" status="PASS" starttime="20170803 18:47:41.537"></status>
</kw>
<status endtime="20170803 18:47:41.538" status="PASS" starttime="20170803 18:47:41.536"></status>
</kw>
<status endtime="20170803 18:47:41.538" status="PASS" starttime="20170803 18:47:41.535"></status>
</kw>
<status endtime="20170803 18:47:41.538" status="PASS" starttime="20170803 18:47:41.534"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170803 18:47:41.612" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170803 18:47:41.612" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:47:41.612" status="PASS" starttime="20170803 18:47:41.538"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:47:41.614" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:47:41.614" status="PASS" starttime="20170803 18:47:41.613"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:47:41.614" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:47:41.615" status="PASS" starttime="20170803 18:47:41.614"></status>
</kw>
<status endtime="20170803 18:47:41.615" status="PASS" starttime="20170803 18:47:41.614"></status>
</kw>
<status endtime="20170803 18:47:41.615" status="PASS" starttime="20170803 18:47:41.613"></status>
</kw>
<status endtime="20170803 18:47:41.615" status="PASS" starttime="20170803 18:47:41.612"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170803 18:47:41.615" level="INFO">Delete All Sessions</msg>
<status endtime="20170803 18:47:41.615" status="PASS" starttime="20170803 18:47:41.615"></status>
</kw>
<msg timestamp="20170803 18:47:41.616" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:47:41.616" status="PASS" starttime="20170803 18:47:41.253"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:47:41.616" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:47:41.616" status="PASS" starttime="20170803 18:47:41.616"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170803 18:47:41.617" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170803 18:47:41.617" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170803 18:47:41.617" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170803 18:47:41.617" status="PASS" starttime="20170803 18:47:41.616"></status>
</kw>
<msg timestamp="20170803 18:47:41.617" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170803 18:47:41.617" status="PASS" starttime="20170803 18:47:41.252"></status>
</kw>
<msg timestamp="20170803 18:47:41.618" level="INFO">${power_state} = On</msg>
<status endtime="20170803 18:47:41.618" status="PASS" starttime="20170803 18:47:41.252"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170803 18:47:41.618" status="PASS" starttime="20170803 18:47:41.618"></status>
</kw>
<status endtime="20170803 18:47:41.618" status="PASS" starttime="20170803 18:47:41.251"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170803 18:47:41.622" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170803 18:47:41.622" status="PASS" starttime="20170803 18:47:41.622"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170803 18:47:41.623" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170803 18:47:41.623" status="PASS" starttime="20170803 18:47:41.622"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170803 18:47:41.623" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170803 18:47:41.623" status="PASS" starttime="20170803 18:47:41.623"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170803 18:47:41.624" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170803 18:47:41.624" status="PASS" starttime="20170803 18:47:41.624"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170803 18:47:41.837" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170803 18:47:41.837" status="PASS" starttime="20170803 18:47:41.625"></status>
</kw>
<msg timestamp="20170803 18:47:41.837" level="INFO">${status} = PASS</msg>
<msg timestamp="20170803 18:47:41.837" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:47:41.837" status="PASS" starttime="20170803 18:47:41.624"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170803 18:47:41.838" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:47:41.838" status="PASS" starttime="20170803 18:47:41.837"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:47:41.838" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:47:41.838" status="PASS" starttime="20170803 18:47:41.838"></status>
</kw>
<status endtime="20170803 18:47:41.839" status="PASS" starttime="20170803 18:47:41.621"></status>
</kw>
<status endtime="20170803 18:47:41.839" status="PASS" starttime="20170803 18:47:41.621"></status>
</kw>
<status endtime="20170803 18:47:41.839" status="PASS" starttime="20170803 18:47:41.620"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170803 18:47:41.839" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170803 18:47:41.839" status="PASS" starttime="20170803 18:47:41.839"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:47:41.842" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170803 18:47:41.842" status="PASS" starttime="20170803 18:47:41.841"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:47:41.842" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170803 18:47:41.843" status="PASS" starttime="20170803 18:47:41.842"></status>
</kw>
<status endtime="20170803 18:47:41.843" status="PASS" starttime="20170803 18:47:41.842"></status>
</kw>
<status endtime="20170803 18:47:41.843" status="PASS" starttime="20170803 18:47:41.840"></status>
</kw>
<status endtime="20170803 18:47:41.843" status="PASS" starttime="20170803 18:47:41.840"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170803 18:47:41.932" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170803 18:47:41.932" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:47:41.932" status="PASS" starttime="20170803 18:47:41.843"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:47:41.934" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:47:41.934" status="PASS" starttime="20170803 18:47:41.933"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:47:41.935" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:47:41.935" status="PASS" starttime="20170803 18:47:41.935"></status>
</kw>
<status endtime="20170803 18:47:41.935" status="PASS" starttime="20170803 18:47:41.934"></status>
</kw>
<status endtime="20170803 18:47:41.935" status="PASS" starttime="20170803 18:47:41.933"></status>
</kw>
<status endtime="20170803 18:47:41.935" status="PASS" starttime="20170803 18:47:41.932"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170803 18:47:41.936" level="INFO">Delete All Sessions</msg>
<status endtime="20170803 18:47:41.936" status="PASS" starttime="20170803 18:47:41.935"></status>
</kw>
<msg timestamp="20170803 18:47:41.936" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:47:41.936" status="PASS" starttime="20170803 18:47:41.619"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:47:41.936" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:47:41.937" status="PASS" starttime="20170803 18:47:41.936"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170803 18:47:41.937" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170803 18:47:41.937" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170803 18:47:41.937" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status endtime="20170803 18:47:41.937" status="PASS" starttime="20170803 18:47:41.937"></status>
</kw>
<msg timestamp="20170803 18:47:41.938" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status endtime="20170803 18:47:41.938" status="PASS" starttime="20170803 18:47:41.619"></status>
</kw>
<msg timestamp="20170803 18:47:41.938" level="INFO">${host_state} = Quiesced</msg>
<status endtime="20170803 18:47:41.938" status="PASS" starttime="20170803 18:47:41.618"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170803 18:47:41.939" level="FAIL">Running != Quiesced</msg>
<status endtime="20170803 18:47:41.939" status="FAIL" starttime="20170803 18:47:41.938"></status>
</kw>
<status endtime="20170803 18:47:41.939" status="FAIL" starttime="20170803 18:47:41.251"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170803 18:47:51.947" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170803 18:47:51.947" status="PASS" starttime="20170803 18:47:51.947"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170803 18:47:51.948" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170803 18:47:51.948" status="PASS" starttime="20170803 18:47:51.948"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170803 18:47:51.949" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170803 18:47:51.949" status="PASS" starttime="20170803 18:47:51.948"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170803 18:47:51.949" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170803 18:47:51.949" status="PASS" starttime="20170803 18:47:51.949"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170803 18:47:52.179" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170803 18:47:52.179" status="PASS" starttime="20170803 18:47:51.950"></status>
</kw>
<msg timestamp="20170803 18:47:52.179" level="INFO">${status} = PASS</msg>
<msg timestamp="20170803 18:47:52.179" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:47:52.179" status="PASS" starttime="20170803 18:47:51.950"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170803 18:47:52.180" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:47:52.180" status="PASS" starttime="20170803 18:47:52.179"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:47:52.180" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:47:52.181" status="PASS" starttime="20170803 18:47:52.180"></status>
</kw>
<status endtime="20170803 18:47:52.181" status="PASS" starttime="20170803 18:47:51.946"></status>
</kw>
<status endtime="20170803 18:47:52.181" status="PASS" starttime="20170803 18:47:51.942"></status>
</kw>
<status endtime="20170803 18:47:52.181" status="PASS" starttime="20170803 18:47:51.942"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170803 18:47:52.181" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170803 18:47:52.182" status="PASS" starttime="20170803 18:47:52.181"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:47:52.184" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170803 18:47:52.184" status="PASS" starttime="20170803 18:47:52.183"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:47:52.185" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170803 18:47:52.185" status="PASS" starttime="20170803 18:47:52.184"></status>
</kw>
<status endtime="20170803 18:47:52.185" status="PASS" starttime="20170803 18:47:52.184"></status>
</kw>
<status endtime="20170803 18:47:52.185" status="PASS" starttime="20170803 18:47:52.182"></status>
</kw>
<status endtime="20170803 18:47:52.185" status="PASS" starttime="20170803 18:47:52.182"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170803 18:47:52.248" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170803 18:47:52.248" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:47:52.248" status="PASS" starttime="20170803 18:47:52.185"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:47:52.250" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:47:52.250" status="PASS" starttime="20170803 18:47:52.250"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:47:52.251" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:47:52.251" status="PASS" starttime="20170803 18:47:52.251"></status>
</kw>
<status endtime="20170803 18:47:52.252" status="PASS" starttime="20170803 18:47:52.250"></status>
</kw>
<status endtime="20170803 18:47:52.252" status="PASS" starttime="20170803 18:47:52.249"></status>
</kw>
<status endtime="20170803 18:47:52.252" status="PASS" starttime="20170803 18:47:52.249"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170803 18:47:52.252" level="INFO">Delete All Sessions</msg>
<status endtime="20170803 18:47:52.252" status="PASS" starttime="20170803 18:47:52.252"></status>
</kw>
<msg timestamp="20170803 18:47:52.252" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:47:52.253" status="PASS" starttime="20170803 18:47:51.941"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:47:52.253" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:47:52.253" status="PASS" starttime="20170803 18:47:52.253"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170803 18:47:52.254" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170803 18:47:52.254" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170803 18:47:52.254" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170803 18:47:52.254" status="PASS" starttime="20170803 18:47:52.253"></status>
</kw>
<msg timestamp="20170803 18:47:52.254" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170803 18:47:52.254" status="PASS" starttime="20170803 18:47:51.941"></status>
</kw>
<msg timestamp="20170803 18:47:52.255" level="INFO">${power_state} = On</msg>
<status endtime="20170803 18:47:52.255" status="PASS" starttime="20170803 18:47:51.940"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170803 18:47:52.255" status="PASS" starttime="20170803 18:47:52.255"></status>
</kw>
<status endtime="20170803 18:47:52.255" status="PASS" starttime="20170803 18:47:51.940"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170803 18:47:52.259" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170803 18:47:52.259" status="PASS" starttime="20170803 18:47:52.258"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170803 18:47:52.260" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170803 18:47:52.260" status="PASS" starttime="20170803 18:47:52.259"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170803 18:47:52.260" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170803 18:47:52.260" status="PASS" starttime="20170803 18:47:52.260"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170803 18:47:52.261" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170803 18:47:52.261" status="PASS" starttime="20170803 18:47:52.261"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170803 18:47:52.445" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170803 18:47:52.446" status="PASS" starttime="20170803 18:47:52.262"></status>
</kw>
<msg timestamp="20170803 18:47:52.446" level="INFO">${status} = PASS</msg>
<msg timestamp="20170803 18:47:52.446" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:47:52.446" status="PASS" starttime="20170803 18:47:52.261"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170803 18:47:52.446" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:47:52.446" status="PASS" starttime="20170803 18:47:52.446"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:47:52.447" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:47:52.447" status="PASS" starttime="20170803 18:47:52.447"></status>
</kw>
<status endtime="20170803 18:47:52.447" status="PASS" starttime="20170803 18:47:52.258"></status>
</kw>
<status endtime="20170803 18:47:52.447" status="PASS" starttime="20170803 18:47:52.257"></status>
</kw>
<status endtime="20170803 18:47:52.447" status="PASS" starttime="20170803 18:47:52.257"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170803 18:47:52.448" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170803 18:47:52.448" status="PASS" starttime="20170803 18:47:52.448"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:47:52.451" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170803 18:47:52.451" status="PASS" starttime="20170803 18:47:52.449"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:47:52.452" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170803 18:47:52.452" status="PASS" starttime="20170803 18:47:52.451"></status>
</kw>
<status endtime="20170803 18:47:52.452" status="PASS" starttime="20170803 18:47:52.451"></status>
</kw>
<status endtime="20170803 18:47:52.452" status="PASS" starttime="20170803 18:47:52.449"></status>
</kw>
<status endtime="20170803 18:47:52.452" status="PASS" starttime="20170803 18:47:52.448"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170803 18:47:52.558" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170803 18:47:52.558" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:47:52.558" status="PASS" starttime="20170803 18:47:52.452"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:47:52.560" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:47:52.560" status="PASS" starttime="20170803 18:47:52.559"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:47:52.561" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:47:52.561" status="PASS" starttime="20170803 18:47:52.561"></status>
</kw>
<status endtime="20170803 18:47:52.561" status="PASS" starttime="20170803 18:47:52.560"></status>
</kw>
<status endtime="20170803 18:47:52.561" status="PASS" starttime="20170803 18:47:52.559"></status>
</kw>
<status endtime="20170803 18:47:52.561" status="PASS" starttime="20170803 18:47:52.558"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170803 18:47:52.562" level="INFO">Delete All Sessions</msg>
<status endtime="20170803 18:47:52.562" status="PASS" starttime="20170803 18:47:52.562"></status>
</kw>
<msg timestamp="20170803 18:47:52.562" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:47:52.562" status="PASS" starttime="20170803 18:47:52.256"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:47:52.563" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:47:52.563" status="PASS" starttime="20170803 18:47:52.562"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170803 18:47:52.563" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170803 18:47:52.563" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170803 18:47:52.563" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status endtime="20170803 18:47:52.563" status="PASS" starttime="20170803 18:47:52.563"></status>
</kw>
<msg timestamp="20170803 18:47:52.564" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status endtime="20170803 18:47:52.564" status="PASS" starttime="20170803 18:47:52.256"></status>
</kw>
<msg timestamp="20170803 18:47:52.564" level="INFO">${host_state} = Quiesced</msg>
<status endtime="20170803 18:47:52.564" status="PASS" starttime="20170803 18:47:52.255"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170803 18:47:52.565" level="FAIL">Running != Quiesced</msg>
<status endtime="20170803 18:47:52.565" status="FAIL" starttime="20170803 18:47:52.564"></status>
</kw>
<status endtime="20170803 18:47:52.565" status="FAIL" starttime="20170803 18:47:51.939"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170803 18:48:02.570" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170803 18:48:02.571" status="PASS" starttime="20170803 18:48:02.570"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170803 18:48:02.571" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170803 18:48:02.571" status="PASS" starttime="20170803 18:48:02.571"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170803 18:48:02.573" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170803 18:48:02.573" status="PASS" starttime="20170803 18:48:02.572"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170803 18:48:02.574" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170803 18:48:02.574" status="PASS" starttime="20170803 18:48:02.573"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170803 18:48:02.760" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170803 18:48:02.760" status="PASS" starttime="20170803 18:48:02.574"></status>
</kw>
<msg timestamp="20170803 18:48:02.760" level="INFO">${status} = PASS</msg>
<msg timestamp="20170803 18:48:02.760" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:48:02.760" status="PASS" starttime="20170803 18:48:02.574"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170803 18:48:02.761" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:48:02.761" status="PASS" starttime="20170803 18:48:02.760"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:48:02.761" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:48:02.761" status="PASS" starttime="20170803 18:48:02.761"></status>
</kw>
<status endtime="20170803 18:48:02.762" status="PASS" starttime="20170803 18:48:02.569"></status>
</kw>
<status endtime="20170803 18:48:02.762" status="PASS" starttime="20170803 18:48:02.569"></status>
</kw>
<status endtime="20170803 18:48:02.762" status="PASS" starttime="20170803 18:48:02.568"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170803 18:48:02.762" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170803 18:48:02.762" status="PASS" starttime="20170803 18:48:02.762"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:48:02.764" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170803 18:48:02.765" status="PASS" starttime="20170803 18:48:02.764"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:48:02.765" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170803 18:48:02.765" status="PASS" starttime="20170803 18:48:02.765"></status>
</kw>
<status endtime="20170803 18:48:02.766" status="PASS" starttime="20170803 18:48:02.765"></status>
</kw>
<status endtime="20170803 18:48:02.766" status="PASS" starttime="20170803 18:48:02.763"></status>
</kw>
<status endtime="20170803 18:48:02.766" status="PASS" starttime="20170803 18:48:02.763"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170803 18:48:02.830" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170803 18:48:02.830" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:48:02.830" status="PASS" starttime="20170803 18:48:02.766"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:48:02.833" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:48:02.833" status="PASS" starttime="20170803 18:48:02.832"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:48:02.834" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:48:02.834" status="PASS" starttime="20170803 18:48:02.834"></status>
</kw>
<status endtime="20170803 18:48:02.834" status="PASS" starttime="20170803 18:48:02.833"></status>
</kw>
<status endtime="20170803 18:48:02.834" status="PASS" starttime="20170803 18:48:02.831"></status>
</kw>
<status endtime="20170803 18:48:02.834" status="PASS" starttime="20170803 18:48:02.831"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170803 18:48:02.835" level="INFO">Delete All Sessions</msg>
<status endtime="20170803 18:48:02.835" status="PASS" starttime="20170803 18:48:02.835"></status>
</kw>
<msg timestamp="20170803 18:48:02.835" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:48:02.835" status="PASS" starttime="20170803 18:48:02.567"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:48:02.836" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:48:02.836" status="PASS" starttime="20170803 18:48:02.835"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170803 18:48:02.836" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170803 18:48:02.836" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170803 18:48:02.837" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170803 18:48:02.837" status="PASS" starttime="20170803 18:48:02.836"></status>
</kw>
<msg timestamp="20170803 18:48:02.837" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170803 18:48:02.837" status="PASS" starttime="20170803 18:48:02.567"></status>
</kw>
<msg timestamp="20170803 18:48:02.837" level="INFO">${power_state} = On</msg>
<status endtime="20170803 18:48:02.837" status="PASS" starttime="20170803 18:48:02.566"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170803 18:48:02.838" status="PASS" starttime="20170803 18:48:02.837"></status>
</kw>
<status endtime="20170803 18:48:02.838" status="PASS" starttime="20170803 18:48:02.566"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170803 18:48:02.842" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170803 18:48:02.842" status="PASS" starttime="20170803 18:48:02.841"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170803 18:48:02.843" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170803 18:48:02.843" status="PASS" starttime="20170803 18:48:02.842"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170803 18:48:02.843" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170803 18:48:02.843" status="PASS" starttime="20170803 18:48:02.843"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170803 18:48:02.844" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170803 18:48:02.844" status="PASS" starttime="20170803 18:48:02.844"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170803 18:48:03.046" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170803 18:48:03.046" status="PASS" starttime="20170803 18:48:02.845"></status>
</kw>
<msg timestamp="20170803 18:48:03.046" level="INFO">${status} = PASS</msg>
<msg timestamp="20170803 18:48:03.046" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:48:03.046" status="PASS" starttime="20170803 18:48:02.844"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170803 18:48:03.047" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:48:03.047" status="PASS" starttime="20170803 18:48:03.047"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:48:03.048" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:48:03.048" status="PASS" starttime="20170803 18:48:03.047"></status>
</kw>
<status endtime="20170803 18:48:03.048" status="PASS" starttime="20170803 18:48:02.841"></status>
</kw>
<status endtime="20170803 18:48:03.048" status="PASS" starttime="20170803 18:48:02.840"></status>
</kw>
<status endtime="20170803 18:48:03.048" status="PASS" starttime="20170803 18:48:02.839"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170803 18:48:03.049" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170803 18:48:03.049" status="PASS" starttime="20170803 18:48:03.048"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:48:03.051" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170803 18:48:03.051" status="PASS" starttime="20170803 18:48:03.050"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:48:03.052" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170803 18:48:03.052" status="PASS" starttime="20170803 18:48:03.052"></status>
</kw>
<status endtime="20170803 18:48:03.052" status="PASS" starttime="20170803 18:48:03.051"></status>
</kw>
<status endtime="20170803 18:48:03.052" status="PASS" starttime="20170803 18:48:03.050"></status>
</kw>
<status endtime="20170803 18:48:03.052" status="PASS" starttime="20170803 18:48:03.049"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170803 18:48:03.141" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170803 18:48:03.141" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:48:03.141" status="PASS" starttime="20170803 18:48:03.053"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:48:03.142" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:48:03.143" status="PASS" starttime="20170803 18:48:03.142"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:48:03.144" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:48:03.144" status="PASS" starttime="20170803 18:48:03.144"></status>
</kw>
<status endtime="20170803 18:48:03.144" status="PASS" starttime="20170803 18:48:03.143"></status>
</kw>
<status endtime="20170803 18:48:03.144" status="PASS" starttime="20170803 18:48:03.141"></status>
</kw>
<status endtime="20170803 18:48:03.144" status="PASS" starttime="20170803 18:48:03.141"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170803 18:48:03.145" level="INFO">Delete All Sessions</msg>
<status endtime="20170803 18:48:03.145" status="PASS" starttime="20170803 18:48:03.144"></status>
</kw>
<msg timestamp="20170803 18:48:03.145" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:48:03.145" status="PASS" starttime="20170803 18:48:02.839"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:48:03.145" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:48:03.146" status="PASS" starttime="20170803 18:48:03.145"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170803 18:48:03.146" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170803 18:48:03.146" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170803 18:48:03.146" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status endtime="20170803 18:48:03.146" status="PASS" starttime="20170803 18:48:03.146"></status>
</kw>
<msg timestamp="20170803 18:48:03.147" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status endtime="20170803 18:48:03.147" status="PASS" starttime="20170803 18:48:02.838"></status>
</kw>
<msg timestamp="20170803 18:48:03.147" level="INFO">${host_state} = Quiesced</msg>
<status endtime="20170803 18:48:03.147" status="PASS" starttime="20170803 18:48:02.838"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170803 18:48:03.147" level="FAIL">Running != Quiesced</msg>
<status endtime="20170803 18:48:03.148" status="FAIL" starttime="20170803 18:48:03.147"></status>
</kw>
<status endtime="20170803 18:48:03.148" status="FAIL" starttime="20170803 18:48:02.565"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170803 18:48:13.155" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170803 18:48:13.155" status="PASS" starttime="20170803 18:48:13.154"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170803 18:48:13.156" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170803 18:48:13.156" status="PASS" starttime="20170803 18:48:13.155"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170803 18:48:13.156" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170803 18:48:13.156" status="PASS" starttime="20170803 18:48:13.156"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170803 18:48:13.157" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170803 18:48:13.157" status="PASS" starttime="20170803 18:48:13.157"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170803 18:48:13.357" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170803 18:48:13.358" status="PASS" starttime="20170803 18:48:13.158"></status>
</kw>
<msg timestamp="20170803 18:48:13.358" level="INFO">${status} = PASS</msg>
<msg timestamp="20170803 18:48:13.358" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:48:13.358" status="PASS" starttime="20170803 18:48:13.157"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170803 18:48:13.358" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:48:13.359" status="PASS" starttime="20170803 18:48:13.358"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:48:13.359" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:48:13.359" status="PASS" starttime="20170803 18:48:13.359"></status>
</kw>
<status endtime="20170803 18:48:13.359" status="PASS" starttime="20170803 18:48:13.153"></status>
</kw>
<status endtime="20170803 18:48:13.359" status="PASS" starttime="20170803 18:48:13.153"></status>
</kw>
<status endtime="20170803 18:48:13.360" status="PASS" starttime="20170803 18:48:13.152"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170803 18:48:13.360" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170803 18:48:13.360" status="PASS" starttime="20170803 18:48:13.360"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:48:13.362" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170803 18:48:13.362" status="PASS" starttime="20170803 18:48:13.362"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:48:13.363" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170803 18:48:13.363" status="PASS" starttime="20170803 18:48:13.363"></status>
</kw>
<status endtime="20170803 18:48:13.363" status="PASS" starttime="20170803 18:48:13.362"></status>
</kw>
<status endtime="20170803 18:48:13.363" status="PASS" starttime="20170803 18:48:13.361"></status>
</kw>
<status endtime="20170803 18:48:13.364" status="PASS" starttime="20170803 18:48:13.360"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170803 18:48:13.427" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170803 18:48:13.427" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:48:13.427" status="PASS" starttime="20170803 18:48:13.364"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:48:13.429" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:48:13.429" status="PASS" starttime="20170803 18:48:13.428"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:48:13.430" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:48:13.430" status="PASS" starttime="20170803 18:48:13.430"></status>
</kw>
<status endtime="20170803 18:48:13.430" status="PASS" starttime="20170803 18:48:13.429"></status>
</kw>
<status endtime="20170803 18:48:13.430" status="PASS" starttime="20170803 18:48:13.428"></status>
</kw>
<status endtime="20170803 18:48:13.430" status="PASS" starttime="20170803 18:48:13.427"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170803 18:48:13.431" level="INFO">Delete All Sessions</msg>
<status endtime="20170803 18:48:13.431" status="PASS" starttime="20170803 18:48:13.431"></status>
</kw>
<msg timestamp="20170803 18:48:13.431" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:48:13.431" status="PASS" starttime="20170803 18:48:13.151"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:48:13.432" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:48:13.432" status="PASS" starttime="20170803 18:48:13.431"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170803 18:48:13.432" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170803 18:48:13.432" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170803 18:48:13.432" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170803 18:48:13.432" status="PASS" starttime="20170803 18:48:13.432"></status>
</kw>
<msg timestamp="20170803 18:48:13.433" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170803 18:48:13.433" status="PASS" starttime="20170803 18:48:13.150"></status>
</kw>
<msg timestamp="20170803 18:48:13.433" level="INFO">${power_state} = On</msg>
<status endtime="20170803 18:48:13.433" status="PASS" starttime="20170803 18:48:13.149"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170803 18:48:13.434" status="PASS" starttime="20170803 18:48:13.433"></status>
</kw>
<status endtime="20170803 18:48:13.434" status="PASS" starttime="20170803 18:48:13.149"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170803 18:48:13.437" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170803 18:48:13.438" status="PASS" starttime="20170803 18:48:13.437"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170803 18:48:13.439" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170803 18:48:13.439" status="PASS" starttime="20170803 18:48:13.439"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170803 18:48:13.440" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170803 18:48:13.440" status="PASS" starttime="20170803 18:48:13.440"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170803 18:48:13.441" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170803 18:48:13.441" status="PASS" starttime="20170803 18:48:13.440"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170803 18:48:13.617" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170803 18:48:13.617" status="PASS" starttime="20170803 18:48:13.441"></status>
</kw>
<msg timestamp="20170803 18:48:13.617" level="INFO">${status} = PASS</msg>
<msg timestamp="20170803 18:48:13.617" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:48:13.617" status="PASS" starttime="20170803 18:48:13.441"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170803 18:48:13.618" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:48:13.618" status="PASS" starttime="20170803 18:48:13.618"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:48:13.619" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:48:13.619" status="PASS" starttime="20170803 18:48:13.618"></status>
</kw>
<status endtime="20170803 18:48:13.619" status="PASS" starttime="20170803 18:48:13.436"></status>
</kw>
<status endtime="20170803 18:48:13.619" status="PASS" starttime="20170803 18:48:13.436"></status>
</kw>
<status endtime="20170803 18:48:13.619" status="PASS" starttime="20170803 18:48:13.435"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170803 18:48:13.620" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170803 18:48:13.620" status="PASS" starttime="20170803 18:48:13.619"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:48:13.622" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170803 18:48:13.622" status="PASS" starttime="20170803 18:48:13.621"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:48:13.623" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170803 18:48:13.623" status="PASS" starttime="20170803 18:48:13.622"></status>
</kw>
<status endtime="20170803 18:48:13.623" status="PASS" starttime="20170803 18:48:13.622"></status>
</kw>
<status endtime="20170803 18:48:13.623" status="PASS" starttime="20170803 18:48:13.621"></status>
</kw>
<status endtime="20170803 18:48:13.623" status="PASS" starttime="20170803 18:48:13.620"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170803 18:48:13.711" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170803 18:48:13.711" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:48:13.711" status="PASS" starttime="20170803 18:48:13.623"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:48:13.713" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:48:13.713" status="PASS" starttime="20170803 18:48:13.712"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:48:13.714" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:48:13.714" status="PASS" starttime="20170803 18:48:13.714"></status>
</kw>
<status endtime="20170803 18:48:13.714" status="PASS" starttime="20170803 18:48:13.713"></status>
</kw>
<status endtime="20170803 18:48:13.714" status="PASS" starttime="20170803 18:48:13.712"></status>
</kw>
<status endtime="20170803 18:48:13.714" status="PASS" starttime="20170803 18:48:13.712"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170803 18:48:13.715" level="INFO">Delete All Sessions</msg>
<status endtime="20170803 18:48:13.715" status="PASS" starttime="20170803 18:48:13.715"></status>
</kw>
<msg timestamp="20170803 18:48:13.715" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:48:13.715" status="PASS" starttime="20170803 18:48:13.435"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:48:13.716" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:48:13.716" status="PASS" starttime="20170803 18:48:13.715"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170803 18:48:13.716" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170803 18:48:13.716" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170803 18:48:13.716" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status endtime="20170803 18:48:13.716" status="PASS" starttime="20170803 18:48:13.716"></status>
</kw>
<msg timestamp="20170803 18:48:13.717" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status endtime="20170803 18:48:13.717" status="PASS" starttime="20170803 18:48:13.434"></status>
</kw>
<msg timestamp="20170803 18:48:13.717" level="INFO">${host_state} = Quiesced</msg>
<status endtime="20170803 18:48:13.717" status="PASS" starttime="20170803 18:48:13.434"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170803 18:48:13.718" level="FAIL">Running != Quiesced</msg>
<status endtime="20170803 18:48:13.718" status="FAIL" starttime="20170803 18:48:13.717"></status>
</kw>
<status endtime="20170803 18:48:13.718" status="FAIL" starttime="20170803 18:48:13.148"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170803 18:48:23.723" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170803 18:48:23.724" status="PASS" starttime="20170803 18:48:23.723"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170803 18:48:23.724" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170803 18:48:23.724" status="PASS" starttime="20170803 18:48:23.724"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170803 18:48:23.725" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170803 18:48:23.725" status="PASS" starttime="20170803 18:48:23.725"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170803 18:48:23.726" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170803 18:48:23.726" status="PASS" starttime="20170803 18:48:23.725"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170803 18:48:24.000" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170803 18:48:24.000" status="PASS" starttime="20170803 18:48:23.726"></status>
</kw>
<msg timestamp="20170803 18:48:24.000" level="INFO">${status} = PASS</msg>
<msg timestamp="20170803 18:48:24.000" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:48:24.000" status="PASS" starttime="20170803 18:48:23.726"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170803 18:48:24.001" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:48:24.001" status="PASS" starttime="20170803 18:48:24.001"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:48:24.002" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:48:24.002" status="PASS" starttime="20170803 18:48:24.001"></status>
</kw>
<status endtime="20170803 18:48:24.002" status="PASS" starttime="20170803 18:48:23.723"></status>
</kw>
<status endtime="20170803 18:48:24.002" status="PASS" starttime="20170803 18:48:23.722"></status>
</kw>
<status endtime="20170803 18:48:24.002" status="PASS" starttime="20170803 18:48:23.722"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170803 18:48:24.003" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170803 18:48:24.003" status="PASS" starttime="20170803 18:48:24.002"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:48:24.005" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170803 18:48:24.005" status="PASS" starttime="20170803 18:48:24.004"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:48:24.006" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170803 18:48:24.006" status="PASS" starttime="20170803 18:48:24.006"></status>
</kw>
<status endtime="20170803 18:48:24.006" status="PASS" starttime="20170803 18:48:24.005"></status>
</kw>
<status endtime="20170803 18:48:24.006" status="PASS" starttime="20170803 18:48:24.003"></status>
</kw>
<status endtime="20170803 18:48:24.006" status="PASS" starttime="20170803 18:48:24.003"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170803 18:48:24.086" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170803 18:48:24.086" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:48:24.086" status="PASS" starttime="20170803 18:48:24.007"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:48:24.088" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:48:24.088" status="PASS" starttime="20170803 18:48:24.088"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:48:24.089" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:48:24.089" status="PASS" starttime="20170803 18:48:24.089"></status>
</kw>
<status endtime="20170803 18:48:24.089" status="PASS" starttime="20170803 18:48:24.088"></status>
</kw>
<status endtime="20170803 18:48:24.089" status="PASS" starttime="20170803 18:48:24.087"></status>
</kw>
<status endtime="20170803 18:48:24.089" status="PASS" starttime="20170803 18:48:24.087"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170803 18:48:24.090" level="INFO">Delete All Sessions</msg>
<status endtime="20170803 18:48:24.090" status="PASS" starttime="20170803 18:48:24.090"></status>
</kw>
<msg timestamp="20170803 18:48:24.090" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:48:24.090" status="PASS" starttime="20170803 18:48:23.721"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:48:24.091" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:48:24.091" status="PASS" starttime="20170803 18:48:24.090"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170803 18:48:24.091" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170803 18:48:24.091" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170803 18:48:24.091" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170803 18:48:24.091" status="PASS" starttime="20170803 18:48:24.091"></status>
</kw>
<msg timestamp="20170803 18:48:24.092" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170803 18:48:24.092" status="PASS" starttime="20170803 18:48:23.720"></status>
</kw>
<msg timestamp="20170803 18:48:24.092" level="INFO">${power_state} = On</msg>
<status endtime="20170803 18:48:24.092" status="PASS" starttime="20170803 18:48:23.719"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170803 18:48:24.093" status="PASS" starttime="20170803 18:48:24.092"></status>
</kw>
<status endtime="20170803 18:48:24.093" status="PASS" starttime="20170803 18:48:23.719"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170803 18:48:24.096" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170803 18:48:24.097" status="PASS" starttime="20170803 18:48:24.096"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170803 18:48:24.097" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170803 18:48:24.097" status="PASS" starttime="20170803 18:48:24.097"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170803 18:48:24.098" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170803 18:48:24.098" status="PASS" starttime="20170803 18:48:24.097"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170803 18:48:24.098" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170803 18:48:24.098" status="PASS" starttime="20170803 18:48:24.098"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170803 18:48:24.313" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170803 18:48:24.313" status="PASS" starttime="20170803 18:48:24.099"></status>
</kw>
<msg timestamp="20170803 18:48:24.314" level="INFO">${status} = PASS</msg>
<msg timestamp="20170803 18:48:24.314" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:48:24.314" status="PASS" starttime="20170803 18:48:24.099"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170803 18:48:24.314" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:48:24.315" status="PASS" starttime="20170803 18:48:24.314"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:48:24.315" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:48:24.315" status="PASS" starttime="20170803 18:48:24.315"></status>
</kw>
<status endtime="20170803 18:48:24.315" status="PASS" starttime="20170803 18:48:24.095"></status>
</kw>
<status endtime="20170803 18:48:24.315" status="PASS" starttime="20170803 18:48:24.095"></status>
</kw>
<status endtime="20170803 18:48:24.315" status="PASS" starttime="20170803 18:48:24.094"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170803 18:48:24.316" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170803 18:48:24.316" status="PASS" starttime="20170803 18:48:24.316"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:48:24.318" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170803 18:48:24.318" status="PASS" starttime="20170803 18:48:24.317"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:48:24.319" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170803 18:48:24.319" status="PASS" starttime="20170803 18:48:24.319"></status>
</kw>
<status endtime="20170803 18:48:24.319" status="PASS" starttime="20170803 18:48:24.318"></status>
</kw>
<status endtime="20170803 18:48:24.320" status="PASS" starttime="20170803 18:48:24.317"></status>
</kw>
<status endtime="20170803 18:48:24.320" status="PASS" starttime="20170803 18:48:24.316"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170803 18:48:24.408" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170803 18:48:24.408" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:48:24.408" status="PASS" starttime="20170803 18:48:24.320"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:48:24.410" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:48:24.410" status="PASS" starttime="20170803 18:48:24.409"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:48:24.410" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:48:24.411" status="PASS" starttime="20170803 18:48:24.410"></status>
</kw>
<status endtime="20170803 18:48:24.411" status="PASS" starttime="20170803 18:48:24.410"></status>
</kw>
<status endtime="20170803 18:48:24.411" status="PASS" starttime="20170803 18:48:24.409"></status>
</kw>
<status endtime="20170803 18:48:24.411" status="PASS" starttime="20170803 18:48:24.408"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170803 18:48:24.411" level="INFO">Delete All Sessions</msg>
<status endtime="20170803 18:48:24.411" status="PASS" starttime="20170803 18:48:24.411"></status>
</kw>
<msg timestamp="20170803 18:48:24.412" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:48:24.412" status="PASS" starttime="20170803 18:48:24.094"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:48:24.412" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:48:24.412" status="PASS" starttime="20170803 18:48:24.412"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170803 18:48:24.413" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170803 18:48:24.413" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170803 18:48:24.413" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status endtime="20170803 18:48:24.413" status="PASS" starttime="20170803 18:48:24.412"></status>
</kw>
<msg timestamp="20170803 18:48:24.413" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status endtime="20170803 18:48:24.413" status="PASS" starttime="20170803 18:48:24.093"></status>
</kw>
<msg timestamp="20170803 18:48:24.414" level="INFO">${host_state} = Quiesced</msg>
<status endtime="20170803 18:48:24.414" status="PASS" starttime="20170803 18:48:24.093"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170803 18:48:24.414" level="FAIL">Running != Quiesced</msg>
<status endtime="20170803 18:48:24.414" status="FAIL" starttime="20170803 18:48:24.414"></status>
</kw>
<status endtime="20170803 18:48:24.415" status="FAIL" starttime="20170803 18:48:23.718"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170803 18:48:34.420" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170803 18:48:34.421" status="PASS" starttime="20170803 18:48:34.420"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170803 18:48:34.421" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170803 18:48:34.421" status="PASS" starttime="20170803 18:48:34.421"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170803 18:48:34.422" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170803 18:48:34.422" status="PASS" starttime="20170803 18:48:34.422"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170803 18:48:34.423" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170803 18:48:34.423" status="PASS" starttime="20170803 18:48:34.422"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170803 18:48:34.675" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170803 18:48:34.676" status="PASS" starttime="20170803 18:48:34.423"></status>
</kw>
<msg timestamp="20170803 18:48:34.676" level="INFO">${status} = PASS</msg>
<msg timestamp="20170803 18:48:34.676" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:48:34.676" status="PASS" starttime="20170803 18:48:34.423"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170803 18:48:34.676" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:48:34.677" status="PASS" starttime="20170803 18:48:34.676"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:48:34.677" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:48:34.677" status="PASS" starttime="20170803 18:48:34.677"></status>
</kw>
<status endtime="20170803 18:48:34.677" status="PASS" starttime="20170803 18:48:34.419"></status>
</kw>
<status endtime="20170803 18:48:34.677" status="PASS" starttime="20170803 18:48:34.418"></status>
</kw>
<status endtime="20170803 18:48:34.678" status="PASS" starttime="20170803 18:48:34.418"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170803 18:48:34.678" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170803 18:48:34.678" status="PASS" starttime="20170803 18:48:34.678"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:48:34.680" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170803 18:48:34.680" status="PASS" starttime="20170803 18:48:34.680"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:48:34.681" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170803 18:48:34.681" status="PASS" starttime="20170803 18:48:34.681"></status>
</kw>
<status endtime="20170803 18:48:34.682" status="PASS" starttime="20170803 18:48:34.680"></status>
</kw>
<status endtime="20170803 18:48:34.682" status="PASS" starttime="20170803 18:48:34.679"></status>
</kw>
<status endtime="20170803 18:48:34.682" status="PASS" starttime="20170803 18:48:34.678"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170803 18:48:34.776" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170803 18:48:34.776" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:48:34.776" status="PASS" starttime="20170803 18:48:34.682"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:48:34.778" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:48:34.778" status="PASS" starttime="20170803 18:48:34.777"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:48:34.782" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:48:34.782" status="PASS" starttime="20170803 18:48:34.782"></status>
</kw>
<status endtime="20170803 18:48:34.782" status="PASS" starttime="20170803 18:48:34.778"></status>
</kw>
<status endtime="20170803 18:48:34.783" status="PASS" starttime="20170803 18:48:34.777"></status>
</kw>
<status endtime="20170803 18:48:34.783" status="PASS" starttime="20170803 18:48:34.776"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170803 18:48:34.783" level="INFO">Delete All Sessions</msg>
<status endtime="20170803 18:48:34.783" status="PASS" starttime="20170803 18:48:34.783"></status>
</kw>
<msg timestamp="20170803 18:48:34.783" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:48:34.783" status="PASS" starttime="20170803 18:48:34.417"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:48:34.784" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:48:34.784" status="PASS" starttime="20170803 18:48:34.784"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170803 18:48:34.785" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170803 18:48:34.785" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170803 18:48:34.785" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170803 18:48:34.785" status="PASS" starttime="20170803 18:48:34.784"></status>
</kw>
<msg timestamp="20170803 18:48:34.785" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170803 18:48:34.786" status="PASS" starttime="20170803 18:48:34.416"></status>
</kw>
<msg timestamp="20170803 18:48:34.786" level="INFO">${power_state} = On</msg>
<status endtime="20170803 18:48:34.786" status="PASS" starttime="20170803 18:48:34.416"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170803 18:48:34.787" status="PASS" starttime="20170803 18:48:34.787"></status>
</kw>
<status endtime="20170803 18:48:34.787" status="PASS" starttime="20170803 18:48:34.416"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170803 18:48:34.791" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170803 18:48:34.792" status="PASS" starttime="20170803 18:48:34.791"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170803 18:48:34.792" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170803 18:48:34.792" status="PASS" starttime="20170803 18:48:34.792"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170803 18:48:34.793" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170803 18:48:34.793" status="PASS" starttime="20170803 18:48:34.793"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170803 18:48:34.794" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170803 18:48:34.794" status="PASS" starttime="20170803 18:48:34.793"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170803 18:48:34.983" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170803 18:48:34.983" status="PASS" starttime="20170803 18:48:34.795"></status>
</kw>
<msg timestamp="20170803 18:48:34.983" level="INFO">${status} = PASS</msg>
<msg timestamp="20170803 18:48:34.983" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:48:34.983" status="PASS" starttime="20170803 18:48:34.794"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170803 18:48:34.984" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:48:34.984" status="PASS" starttime="20170803 18:48:34.984"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:48:34.985" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:48:34.985" status="PASS" starttime="20170803 18:48:34.984"></status>
</kw>
<status endtime="20170803 18:48:34.985" status="PASS" starttime="20170803 18:48:34.790"></status>
</kw>
<status endtime="20170803 18:48:34.985" status="PASS" starttime="20170803 18:48:34.790"></status>
</kw>
<status endtime="20170803 18:48:34.985" status="PASS" starttime="20170803 18:48:34.789"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170803 18:48:34.986" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170803 18:48:34.986" status="PASS" starttime="20170803 18:48:34.985"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:48:34.988" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170803 18:48:34.988" status="PASS" starttime="20170803 18:48:34.987"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:48:34.989" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170803 18:48:34.990" status="PASS" starttime="20170803 18:48:34.989"></status>
</kw>
<status endtime="20170803 18:48:34.990" status="PASS" starttime="20170803 18:48:34.988"></status>
</kw>
<status endtime="20170803 18:48:34.990" status="PASS" starttime="20170803 18:48:34.986"></status>
</kw>
<status endtime="20170803 18:48:34.990" status="PASS" starttime="20170803 18:48:34.986"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170803 18:48:35.096" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170803 18:48:35.096" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:48:35.097" status="PASS" starttime="20170803 18:48:34.990"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:48:35.098" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:48:35.098" status="PASS" starttime="20170803 18:48:35.098"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:48:35.099" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:48:35.099" status="PASS" starttime="20170803 18:48:35.099"></status>
</kw>
<status endtime="20170803 18:48:35.099" status="PASS" starttime="20170803 18:48:35.098"></status>
</kw>
<status endtime="20170803 18:48:35.099" status="PASS" starttime="20170803 18:48:35.097"></status>
</kw>
<status endtime="20170803 18:48:35.100" status="PASS" starttime="20170803 18:48:35.097"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170803 18:48:35.100" level="INFO">Delete All Sessions</msg>
<status endtime="20170803 18:48:35.100" status="PASS" starttime="20170803 18:48:35.100"></status>
</kw>
<msg timestamp="20170803 18:48:35.100" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:48:35.100" status="PASS" starttime="20170803 18:48:34.789"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:48:35.101" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:48:35.101" status="PASS" starttime="20170803 18:48:35.100"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170803 18:48:35.102" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170803 18:48:35.102" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170803 18:48:35.102" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status endtime="20170803 18:48:35.102" status="PASS" starttime="20170803 18:48:35.101"></status>
</kw>
<msg timestamp="20170803 18:48:35.102" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status endtime="20170803 18:48:35.102" status="PASS" starttime="20170803 18:48:34.788"></status>
</kw>
<msg timestamp="20170803 18:48:35.102" level="INFO">${host_state} = Quiesced</msg>
<status endtime="20170803 18:48:35.102" status="PASS" starttime="20170803 18:48:34.787"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170803 18:48:35.103" level="FAIL">Running != Quiesced</msg>
<status endtime="20170803 18:48:35.103" status="FAIL" starttime="20170803 18:48:35.103"></status>
</kw>
<status endtime="20170803 18:48:35.103" status="FAIL" starttime="20170803 18:48:34.415"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170803 18:48:45.108" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170803 18:48:45.109" status="PASS" starttime="20170803 18:48:45.108"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170803 18:48:45.109" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170803 18:48:45.109" status="PASS" starttime="20170803 18:48:45.109"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170803 18:48:45.110" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170803 18:48:45.110" status="PASS" starttime="20170803 18:48:45.110"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170803 18:48:45.111" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170803 18:48:45.111" status="PASS" starttime="20170803 18:48:45.110"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170803 18:48:45.301" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170803 18:48:45.302" status="PASS" starttime="20170803 18:48:45.112"></status>
</kw>
<msg timestamp="20170803 18:48:45.302" level="INFO">${status} = PASS</msg>
<msg timestamp="20170803 18:48:45.302" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:48:45.302" status="PASS" starttime="20170803 18:48:45.111"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170803 18:48:45.302" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:48:45.303" status="PASS" starttime="20170803 18:48:45.302"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:48:45.303" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:48:45.303" status="PASS" starttime="20170803 18:48:45.303"></status>
</kw>
<status endtime="20170803 18:48:45.303" status="PASS" starttime="20170803 18:48:45.107"></status>
</kw>
<status endtime="20170803 18:48:45.303" status="PASS" starttime="20170803 18:48:45.107"></status>
</kw>
<status endtime="20170803 18:48:45.304" status="PASS" starttime="20170803 18:48:45.106"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170803 18:48:45.304" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170803 18:48:45.305" status="PASS" starttime="20170803 18:48:45.304"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:48:45.307" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170803 18:48:45.307" status="PASS" starttime="20170803 18:48:45.307"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:48:45.308" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170803 18:48:45.308" status="PASS" starttime="20170803 18:48:45.308"></status>
</kw>
<status endtime="20170803 18:48:45.309" status="PASS" starttime="20170803 18:48:45.308"></status>
</kw>
<status endtime="20170803 18:48:45.309" status="PASS" starttime="20170803 18:48:45.306"></status>
</kw>
<status endtime="20170803 18:48:45.309" status="PASS" starttime="20170803 18:48:45.305"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170803 18:48:45.407" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170803 18:48:45.407" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:48:45.407" status="PASS" starttime="20170803 18:48:45.309"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:48:45.409" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:48:45.409" status="PASS" starttime="20170803 18:48:45.409"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:48:45.410" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:48:45.410" status="PASS" starttime="20170803 18:48:45.410"></status>
</kw>
<status endtime="20170803 18:48:45.410" status="PASS" starttime="20170803 18:48:45.409"></status>
</kw>
<status endtime="20170803 18:48:45.410" status="PASS" starttime="20170803 18:48:45.408"></status>
</kw>
<status endtime="20170803 18:48:45.410" status="PASS" starttime="20170803 18:48:45.408"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170803 18:48:45.411" level="INFO">Delete All Sessions</msg>
<status endtime="20170803 18:48:45.411" status="PASS" starttime="20170803 18:48:45.411"></status>
</kw>
<msg timestamp="20170803 18:48:45.411" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:48:45.411" status="PASS" starttime="20170803 18:48:45.106"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:48:45.412" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:48:45.412" status="PASS" starttime="20170803 18:48:45.411"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170803 18:48:45.412" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170803 18:48:45.412" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170803 18:48:45.413" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170803 18:48:45.413" status="PASS" starttime="20170803 18:48:45.412"></status>
</kw>
<msg timestamp="20170803 18:48:45.413" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170803 18:48:45.413" status="PASS" starttime="20170803 18:48:45.105"></status>
</kw>
<msg timestamp="20170803 18:48:45.413" level="INFO">${power_state} = On</msg>
<status endtime="20170803 18:48:45.413" status="PASS" starttime="20170803 18:48:45.105"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170803 18:48:45.414" status="PASS" starttime="20170803 18:48:45.413"></status>
</kw>
<status endtime="20170803 18:48:45.414" status="PASS" starttime="20170803 18:48:45.104"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170803 18:48:45.418" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170803 18:48:45.418" status="PASS" starttime="20170803 18:48:45.417"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170803 18:48:45.419" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170803 18:48:45.419" status="PASS" starttime="20170803 18:48:45.418"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170803 18:48:45.419" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170803 18:48:45.419" status="PASS" starttime="20170803 18:48:45.419"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170803 18:48:45.420" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170803 18:48:45.420" status="PASS" starttime="20170803 18:48:45.420"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170803 18:48:45.626" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170803 18:48:45.626" status="PASS" starttime="20170803 18:48:45.421"></status>
</kw>
<msg timestamp="20170803 18:48:45.626" level="INFO">${status} = PASS</msg>
<msg timestamp="20170803 18:48:45.626" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:48:45.626" status="PASS" starttime="20170803 18:48:45.420"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170803 18:48:45.627" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:48:45.627" status="PASS" starttime="20170803 18:48:45.627"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:48:45.628" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:48:45.628" status="PASS" starttime="20170803 18:48:45.627"></status>
</kw>
<status endtime="20170803 18:48:45.628" status="PASS" starttime="20170803 18:48:45.417"></status>
</kw>
<status endtime="20170803 18:48:45.628" status="PASS" starttime="20170803 18:48:45.416"></status>
</kw>
<status endtime="20170803 18:48:45.628" status="PASS" starttime="20170803 18:48:45.415"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170803 18:48:45.629" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170803 18:48:45.629" status="PASS" starttime="20170803 18:48:45.628"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:48:45.631" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170803 18:48:45.631" status="PASS" starttime="20170803 18:48:45.630"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:48:45.632" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170803 18:48:45.632" status="PASS" starttime="20170803 18:48:45.631"></status>
</kw>
<status endtime="20170803 18:48:45.632" status="PASS" starttime="20170803 18:48:45.631"></status>
</kw>
<status endtime="20170803 18:48:45.632" status="PASS" starttime="20170803 18:48:45.629"></status>
</kw>
<status endtime="20170803 18:48:45.632" status="PASS" starttime="20170803 18:48:45.629"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170803 18:48:45.721" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170803 18:48:45.721" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:48:45.721" status="PASS" starttime="20170803 18:48:45.632"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:48:45.723" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:48:45.723" status="PASS" starttime="20170803 18:48:45.722"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:48:45.724" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:48:45.724" status="PASS" starttime="20170803 18:48:45.724"></status>
</kw>
<status endtime="20170803 18:48:45.724" status="PASS" starttime="20170803 18:48:45.723"></status>
</kw>
<status endtime="20170803 18:48:45.724" status="PASS" starttime="20170803 18:48:45.721"></status>
</kw>
<status endtime="20170803 18:48:45.724" status="PASS" starttime="20170803 18:48:45.721"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170803 18:48:45.725" level="INFO">Delete All Sessions</msg>
<status endtime="20170803 18:48:45.725" status="PASS" starttime="20170803 18:48:45.725"></status>
</kw>
<msg timestamp="20170803 18:48:45.725" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:48:45.725" status="PASS" starttime="20170803 18:48:45.415"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:48:45.726" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:48:45.726" status="PASS" starttime="20170803 18:48:45.725"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170803 18:48:45.726" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170803 18:48:45.726" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170803 18:48:45.726" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status endtime="20170803 18:48:45.726" status="PASS" starttime="20170803 18:48:45.726"></status>
</kw>
<msg timestamp="20170803 18:48:45.727" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status endtime="20170803 18:48:45.727" status="PASS" starttime="20170803 18:48:45.414"></status>
</kw>
<msg timestamp="20170803 18:48:45.727" level="INFO">${host_state} = Quiesced</msg>
<status endtime="20170803 18:48:45.727" status="PASS" starttime="20170803 18:48:45.414"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170803 18:48:45.728" level="FAIL">Running != Quiesced</msg>
<status endtime="20170803 18:48:45.728" status="FAIL" starttime="20170803 18:48:45.727"></status>
</kw>
<status endtime="20170803 18:48:45.728" status="FAIL" starttime="20170803 18:48:45.104"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170803 18:48:55.733" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170803 18:48:55.734" status="PASS" starttime="20170803 18:48:55.733"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170803 18:48:55.734" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170803 18:48:55.734" status="PASS" starttime="20170803 18:48:55.734"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170803 18:48:55.735" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170803 18:48:55.735" status="PASS" starttime="20170803 18:48:55.734"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170803 18:48:55.735" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170803 18:48:55.735" status="PASS" starttime="20170803 18:48:55.735"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170803 18:48:55.915" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170803 18:48:55.915" status="PASS" starttime="20170803 18:48:55.736"></status>
</kw>
<msg timestamp="20170803 18:48:55.915" level="INFO">${status} = PASS</msg>
<msg timestamp="20170803 18:48:55.915" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:48:55.915" status="PASS" starttime="20170803 18:48:55.736"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170803 18:48:55.916" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:48:55.916" status="PASS" starttime="20170803 18:48:55.915"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:48:55.916" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:48:55.917" status="PASS" starttime="20170803 18:48:55.916"></status>
</kw>
<status endtime="20170803 18:48:55.917" status="PASS" starttime="20170803 18:48:55.732"></status>
</kw>
<status endtime="20170803 18:48:55.917" status="PASS" starttime="20170803 18:48:55.732"></status>
</kw>
<status endtime="20170803 18:48:55.917" status="PASS" starttime="20170803 18:48:55.731"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170803 18:48:55.918" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170803 18:48:55.918" status="PASS" starttime="20170803 18:48:55.917"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:48:55.920" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170803 18:48:55.920" status="PASS" starttime="20170803 18:48:55.919"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:48:55.921" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170803 18:48:55.921" status="PASS" starttime="20170803 18:48:55.920"></status>
</kw>
<status endtime="20170803 18:48:55.921" status="PASS" starttime="20170803 18:48:55.920"></status>
</kw>
<status endtime="20170803 18:48:55.921" status="PASS" starttime="20170803 18:48:55.918"></status>
</kw>
<status endtime="20170803 18:48:55.921" status="PASS" starttime="20170803 18:48:55.918"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170803 18:48:55.983" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170803 18:48:55.983" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:48:55.983" status="PASS" starttime="20170803 18:48:55.921"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:48:55.985" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:48:55.985" status="PASS" starttime="20170803 18:48:55.985"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:48:55.986" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:48:55.986" status="PASS" starttime="20170803 18:48:55.986"></status>
</kw>
<status endtime="20170803 18:48:55.986" status="PASS" starttime="20170803 18:48:55.985"></status>
</kw>
<status endtime="20170803 18:48:55.986" status="PASS" starttime="20170803 18:48:55.984"></status>
</kw>
<status endtime="20170803 18:48:55.986" status="PASS" starttime="20170803 18:48:55.984"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170803 18:48:55.987" level="INFO">Delete All Sessions</msg>
<status endtime="20170803 18:48:55.987" status="PASS" starttime="20170803 18:48:55.987"></status>
</kw>
<msg timestamp="20170803 18:48:55.987" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:48:55.987" status="PASS" starttime="20170803 18:48:55.730"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:48:55.988" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:48:55.988" status="PASS" starttime="20170803 18:48:55.987"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170803 18:48:55.988" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170803 18:48:55.988" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170803 18:48:55.988" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170803 18:48:55.989" status="PASS" starttime="20170803 18:48:55.988"></status>
</kw>
<msg timestamp="20170803 18:48:55.989" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170803 18:48:55.989" status="PASS" starttime="20170803 18:48:55.730"></status>
</kw>
<msg timestamp="20170803 18:48:55.989" level="INFO">${power_state} = On</msg>
<status endtime="20170803 18:48:55.989" status="PASS" starttime="20170803 18:48:55.730"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170803 18:48:55.990" status="PASS" starttime="20170803 18:48:55.989"></status>
</kw>
<status endtime="20170803 18:48:55.990" status="PASS" starttime="20170803 18:48:55.729"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170803 18:48:55.993" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170803 18:48:55.994" status="PASS" starttime="20170803 18:48:55.993"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170803 18:48:55.995" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170803 18:48:55.995" status="PASS" starttime="20170803 18:48:55.994"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170803 18:48:55.995" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170803 18:48:55.995" status="PASS" starttime="20170803 18:48:55.995"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170803 18:48:55.996" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170803 18:48:55.996" status="PASS" starttime="20170803 18:48:55.996"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170803 18:48:56.196" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170803 18:48:56.196" status="PASS" starttime="20170803 18:48:55.997"></status>
</kw>
<msg timestamp="20170803 18:48:56.196" level="INFO">${status} = PASS</msg>
<msg timestamp="20170803 18:48:56.196" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:48:56.196" status="PASS" starttime="20170803 18:48:55.996"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170803 18:48:56.197" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:48:56.197" status="PASS" starttime="20170803 18:48:56.197"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:48:56.198" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:48:56.198" status="PASS" starttime="20170803 18:48:56.197"></status>
</kw>
<status endtime="20170803 18:48:56.198" status="PASS" starttime="20170803 18:48:55.992"></status>
</kw>
<status endtime="20170803 18:48:56.198" status="PASS" starttime="20170803 18:48:55.992"></status>
</kw>
<status endtime="20170803 18:48:56.198" status="PASS" starttime="20170803 18:48:55.991"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170803 18:48:56.199" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170803 18:48:56.199" status="PASS" starttime="20170803 18:48:56.198"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:48:56.202" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170803 18:48:56.202" status="PASS" starttime="20170803 18:48:56.201"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:48:56.204" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170803 18:48:56.204" status="PASS" starttime="20170803 18:48:56.203"></status>
</kw>
<status endtime="20170803 18:48:56.204" status="PASS" starttime="20170803 18:48:56.203"></status>
</kw>
<status endtime="20170803 18:48:56.204" status="PASS" starttime="20170803 18:48:56.200"></status>
</kw>
<status endtime="20170803 18:48:56.204" status="PASS" starttime="20170803 18:48:56.199"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170803 18:48:56.317" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170803 18:48:56.317" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:48:56.317" status="PASS" starttime="20170803 18:48:56.204"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:48:56.319" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:48:56.319" status="PASS" starttime="20170803 18:48:56.318"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:48:56.320" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:48:56.320" status="PASS" starttime="20170803 18:48:56.320"></status>
</kw>
<status endtime="20170803 18:48:56.320" status="PASS" starttime="20170803 18:48:56.319"></status>
</kw>
<status endtime="20170803 18:48:56.320" status="PASS" starttime="20170803 18:48:56.318"></status>
</kw>
<status endtime="20170803 18:48:56.320" status="PASS" starttime="20170803 18:48:56.317"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170803 18:48:56.321" level="INFO">Delete All Sessions</msg>
<status endtime="20170803 18:48:56.321" status="PASS" starttime="20170803 18:48:56.321"></status>
</kw>
<msg timestamp="20170803 18:48:56.321" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:48:56.321" status="PASS" starttime="20170803 18:48:55.991"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:48:56.322" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:48:56.322" status="PASS" starttime="20170803 18:48:56.321"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170803 18:48:56.322" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170803 18:48:56.322" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170803 18:48:56.322" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status endtime="20170803 18:48:56.322" status="PASS" starttime="20170803 18:48:56.322"></status>
</kw>
<msg timestamp="20170803 18:48:56.323" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status endtime="20170803 18:48:56.323" status="PASS" starttime="20170803 18:48:55.990"></status>
</kw>
<msg timestamp="20170803 18:48:56.323" level="INFO">${host_state} = Quiesced</msg>
<status endtime="20170803 18:48:56.323" status="PASS" starttime="20170803 18:48:55.990"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170803 18:48:56.324" level="FAIL">Running != Quiesced</msg>
<status endtime="20170803 18:48:56.324" status="FAIL" starttime="20170803 18:48:56.324"></status>
</kw>
<status endtime="20170803 18:48:56.325" status="FAIL" starttime="20170803 18:48:55.728"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170803 18:49:06.330" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170803 18:49:06.330" status="PASS" starttime="20170803 18:49:06.330"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170803 18:49:06.331" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170803 18:49:06.331" status="PASS" starttime="20170803 18:49:06.331"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170803 18:49:06.332" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170803 18:49:06.332" status="PASS" starttime="20170803 18:49:06.331"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170803 18:49:06.332" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170803 18:49:06.332" status="PASS" starttime="20170803 18:49:06.332"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170803 18:49:06.512" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170803 18:49:06.512" status="PASS" starttime="20170803 18:49:06.333"></status>
</kw>
<msg timestamp="20170803 18:49:06.512" level="INFO">${status} = PASS</msg>
<msg timestamp="20170803 18:49:06.512" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:49:06.512" status="PASS" starttime="20170803 18:49:06.333"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170803 18:49:06.513" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:49:06.513" status="PASS" starttime="20170803 18:49:06.513"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:49:06.514" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:49:06.514" status="PASS" starttime="20170803 18:49:06.513"></status>
</kw>
<status endtime="20170803 18:49:06.514" status="PASS" starttime="20170803 18:49:06.329"></status>
</kw>
<status endtime="20170803 18:49:06.514" status="PASS" starttime="20170803 18:49:06.329"></status>
</kw>
<status endtime="20170803 18:49:06.514" status="PASS" starttime="20170803 18:49:06.328"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170803 18:49:06.515" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170803 18:49:06.515" status="PASS" starttime="20170803 18:49:06.514"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:49:06.517" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170803 18:49:06.517" status="PASS" starttime="20170803 18:49:06.516"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:49:06.518" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170803 18:49:06.518" status="PASS" starttime="20170803 18:49:06.517"></status>
</kw>
<status endtime="20170803 18:49:06.518" status="PASS" starttime="20170803 18:49:06.517"></status>
</kw>
<status endtime="20170803 18:49:06.518" status="PASS" starttime="20170803 18:49:06.515"></status>
</kw>
<status endtime="20170803 18:49:06.519" status="PASS" starttime="20170803 18:49:06.515"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170803 18:49:06.607" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170803 18:49:06.607" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:49:06.607" status="PASS" starttime="20170803 18:49:06.519"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:49:06.609" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:49:06.609" status="PASS" starttime="20170803 18:49:06.608"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:49:06.610" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:49:06.610" status="PASS" starttime="20170803 18:49:06.609"></status>
</kw>
<status endtime="20170803 18:49:06.610" status="PASS" starttime="20170803 18:49:06.609"></status>
</kw>
<status endtime="20170803 18:49:06.610" status="PASS" starttime="20170803 18:49:06.608"></status>
</kw>
<status endtime="20170803 18:49:06.610" status="PASS" starttime="20170803 18:49:06.607"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170803 18:49:06.610" level="INFO">Delete All Sessions</msg>
<status endtime="20170803 18:49:06.611" status="PASS" starttime="20170803 18:49:06.610"></status>
</kw>
<msg timestamp="20170803 18:49:06.611" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:49:06.611" status="PASS" starttime="20170803 18:49:06.327"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:49:06.611" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:49:06.611" status="PASS" starttime="20170803 18:49:06.611"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170803 18:49:06.612" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170803 18:49:06.612" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170803 18:49:06.612" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170803 18:49:06.612" status="PASS" starttime="20170803 18:49:06.612"></status>
</kw>
<msg timestamp="20170803 18:49:06.612" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170803 18:49:06.612" status="PASS" starttime="20170803 18:49:06.326"></status>
</kw>
<msg timestamp="20170803 18:49:06.613" level="INFO">${power_state} = On</msg>
<status endtime="20170803 18:49:06.613" status="PASS" starttime="20170803 18:49:06.326"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170803 18:49:06.613" status="PASS" starttime="20170803 18:49:06.613"></status>
</kw>
<status endtime="20170803 18:49:06.614" status="PASS" starttime="20170803 18:49:06.326"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170803 18:49:06.617" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170803 18:49:06.617" status="PASS" starttime="20170803 18:49:06.617"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170803 18:49:06.618" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170803 18:49:06.618" status="PASS" starttime="20170803 18:49:06.618"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170803 18:49:06.619" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170803 18:49:06.619" status="PASS" starttime="20170803 18:49:06.618"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170803 18:49:06.620" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170803 18:49:06.620" status="PASS" starttime="20170803 18:49:06.619"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170803 18:49:06.839" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170803 18:49:06.839" status="PASS" starttime="20170803 18:49:06.621"></status>
</kw>
<msg timestamp="20170803 18:49:06.839" level="INFO">${status} = PASS</msg>
<msg timestamp="20170803 18:49:06.839" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:49:06.839" status="PASS" starttime="20170803 18:49:06.620"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170803 18:49:06.840" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:49:06.840" status="PASS" starttime="20170803 18:49:06.840"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:49:06.841" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:49:06.841" status="PASS" starttime="20170803 18:49:06.841"></status>
</kw>
<status endtime="20170803 18:49:06.841" status="PASS" starttime="20170803 18:49:06.616"></status>
</kw>
<status endtime="20170803 18:49:06.841" status="PASS" starttime="20170803 18:49:06.616"></status>
</kw>
<status endtime="20170803 18:49:06.842" status="PASS" starttime="20170803 18:49:06.615"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170803 18:49:06.843" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170803 18:49:06.843" status="PASS" starttime="20170803 18:49:06.842"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:49:06.846" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170803 18:49:06.846" status="PASS" starttime="20170803 18:49:06.845"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:49:06.847" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170803 18:49:06.847" status="PASS" starttime="20170803 18:49:06.847"></status>
</kw>
<status endtime="20170803 18:49:06.847" status="PASS" starttime="20170803 18:49:06.846"></status>
</kw>
<status endtime="20170803 18:49:06.847" status="PASS" starttime="20170803 18:49:06.844"></status>
</kw>
<status endtime="20170803 18:49:06.847" status="PASS" starttime="20170803 18:49:06.843"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170803 18:49:06.938" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170803 18:49:06.938" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:49:06.938" status="PASS" starttime="20170803 18:49:06.848"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:49:06.940" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:49:06.940" status="PASS" starttime="20170803 18:49:06.940"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:49:06.941" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:49:06.942" status="PASS" starttime="20170803 18:49:06.941"></status>
</kw>
<status endtime="20170803 18:49:06.942" status="PASS" starttime="20170803 18:49:06.941"></status>
</kw>
<status endtime="20170803 18:49:06.942" status="PASS" starttime="20170803 18:49:06.939"></status>
</kw>
<status endtime="20170803 18:49:06.942" status="PASS" starttime="20170803 18:49:06.939"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170803 18:49:06.942" level="INFO">Delete All Sessions</msg>
<status endtime="20170803 18:49:06.942" status="PASS" starttime="20170803 18:49:06.942"></status>
</kw>
<msg timestamp="20170803 18:49:06.942" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:49:06.943" status="PASS" starttime="20170803 18:49:06.615"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:49:06.943" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:49:06.943" status="PASS" starttime="20170803 18:49:06.943"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170803 18:49:06.944" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170803 18:49:06.944" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170803 18:49:06.944" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status endtime="20170803 18:49:06.944" status="PASS" starttime="20170803 18:49:06.943"></status>
</kw>
<msg timestamp="20170803 18:49:06.944" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status endtime="20170803 18:49:06.944" status="PASS" starttime="20170803 18:49:06.614"></status>
</kw>
<msg timestamp="20170803 18:49:06.945" level="INFO">${host_state} = Quiesced</msg>
<status endtime="20170803 18:49:06.945" status="PASS" starttime="20170803 18:49:06.614"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170803 18:49:06.945" level="FAIL">Running != Quiesced</msg>
<status endtime="20170803 18:49:06.945" status="FAIL" starttime="20170803 18:49:06.945"></status>
</kw>
<status endtime="20170803 18:49:06.945" status="FAIL" starttime="20170803 18:49:06.325"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170803 18:49:16.951" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170803 18:49:16.951" status="PASS" starttime="20170803 18:49:16.951"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170803 18:49:16.952" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170803 18:49:16.952" status="PASS" starttime="20170803 18:49:16.952"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170803 18:49:16.953" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170803 18:49:16.953" status="PASS" starttime="20170803 18:49:16.952"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170803 18:49:16.953" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170803 18:49:16.953" status="PASS" starttime="20170803 18:49:16.953"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170803 18:49:17.169" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170803 18:49:17.169" status="PASS" starttime="20170803 18:49:16.954"></status>
</kw>
<msg timestamp="20170803 18:49:17.169" level="INFO">${status} = PASS</msg>
<msg timestamp="20170803 18:49:17.170" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:49:17.170" status="PASS" starttime="20170803 18:49:16.954"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170803 18:49:17.170" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:49:17.170" status="PASS" starttime="20170803 18:49:17.170"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:49:17.171" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:49:17.171" status="PASS" starttime="20170803 18:49:17.171"></status>
</kw>
<status endtime="20170803 18:49:17.171" status="PASS" starttime="20170803 18:49:16.950"></status>
</kw>
<status endtime="20170803 18:49:17.171" status="PASS" starttime="20170803 18:49:16.949"></status>
</kw>
<status endtime="20170803 18:49:17.171" status="PASS" starttime="20170803 18:49:16.949"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170803 18:49:17.172" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170803 18:49:17.172" status="PASS" starttime="20170803 18:49:17.172"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:49:17.174" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170803 18:49:17.174" status="PASS" starttime="20170803 18:49:17.173"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:49:17.175" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170803 18:49:17.175" status="PASS" starttime="20170803 18:49:17.175"></status>
</kw>
<status endtime="20170803 18:49:17.175" status="PASS" starttime="20170803 18:49:17.174"></status>
</kw>
<status endtime="20170803 18:49:17.175" status="PASS" starttime="20170803 18:49:17.173"></status>
</kw>
<status endtime="20170803 18:49:17.175" status="PASS" starttime="20170803 18:49:17.172"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170803 18:49:17.314" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170803 18:49:17.314" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:49:17.315" status="PASS" starttime="20170803 18:49:17.176"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:49:17.316" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:49:17.316" status="PASS" starttime="20170803 18:49:17.316"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:49:17.318" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:49:17.318" status="PASS" starttime="20170803 18:49:17.317"></status>
</kw>
<status endtime="20170803 18:49:17.318" status="PASS" starttime="20170803 18:49:17.317"></status>
</kw>
<status endtime="20170803 18:49:17.318" status="PASS" starttime="20170803 18:49:17.315"></status>
</kw>
<status endtime="20170803 18:49:17.318" status="PASS" starttime="20170803 18:49:17.315"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170803 18:49:17.318" level="INFO">Delete All Sessions</msg>
<status endtime="20170803 18:49:17.319" status="PASS" starttime="20170803 18:49:17.318"></status>
</kw>
<msg timestamp="20170803 18:49:17.319" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:49:17.319" status="PASS" starttime="20170803 18:49:16.948"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:49:17.319" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:49:17.319" status="PASS" starttime="20170803 18:49:17.319"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170803 18:49:17.320" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170803 18:49:17.320" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170803 18:49:17.320" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170803 18:49:17.320" status="PASS" starttime="20170803 18:49:17.320"></status>
</kw>
<msg timestamp="20170803 18:49:17.320" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170803 18:49:17.321" status="PASS" starttime="20170803 18:49:16.947"></status>
</kw>
<msg timestamp="20170803 18:49:17.321" level="INFO">${power_state} = On</msg>
<status endtime="20170803 18:49:17.321" status="PASS" starttime="20170803 18:49:16.947"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170803 18:49:17.321" status="PASS" starttime="20170803 18:49:17.321"></status>
</kw>
<status endtime="20170803 18:49:17.322" status="PASS" starttime="20170803 18:49:16.947"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170803 18:49:17.325" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170803 18:49:17.325" status="PASS" starttime="20170803 18:49:17.325"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170803 18:49:17.326" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170803 18:49:17.326" status="PASS" starttime="20170803 18:49:17.326"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170803 18:49:17.327" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170803 18:49:17.327" status="PASS" starttime="20170803 18:49:17.326"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170803 18:49:17.327" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170803 18:49:17.327" status="PASS" starttime="20170803 18:49:17.327"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170803 18:49:17.504" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170803 18:49:17.504" status="PASS" starttime="20170803 18:49:17.328"></status>
</kw>
<msg timestamp="20170803 18:49:17.504" level="INFO">${status} = PASS</msg>
<msg timestamp="20170803 18:49:17.505" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:49:17.505" status="PASS" starttime="20170803 18:49:17.328"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170803 18:49:17.505" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:49:17.505" status="PASS" starttime="20170803 18:49:17.505"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:49:17.506" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:49:17.506" status="PASS" starttime="20170803 18:49:17.506"></status>
</kw>
<status endtime="20170803 18:49:17.506" status="PASS" starttime="20170803 18:49:17.324"></status>
</kw>
<status endtime="20170803 18:49:17.506" status="PASS" starttime="20170803 18:49:17.324"></status>
</kw>
<status endtime="20170803 18:49:17.506" status="PASS" starttime="20170803 18:49:17.323"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170803 18:49:17.507" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170803 18:49:17.507" status="PASS" starttime="20170803 18:49:17.507"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:49:17.512" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170803 18:49:17.512" status="PASS" starttime="20170803 18:49:17.508"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:49:17.513" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170803 18:49:17.513" status="PASS" starttime="20170803 18:49:17.513"></status>
</kw>
<status endtime="20170803 18:49:17.514" status="PASS" starttime="20170803 18:49:17.512"></status>
</kw>
<status endtime="20170803 18:49:17.514" status="PASS" starttime="20170803 18:49:17.508"></status>
</kw>
<status endtime="20170803 18:49:17.514" status="PASS" starttime="20170803 18:49:17.507"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170803 18:49:17.624" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170803 18:49:17.624" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:49:17.624" status="PASS" starttime="20170803 18:49:17.514"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:49:17.626" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:49:17.626" status="PASS" starttime="20170803 18:49:17.625"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:49:17.627" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:49:17.627" status="PASS" starttime="20170803 18:49:17.626"></status>
</kw>
<status endtime="20170803 18:49:17.627" status="PASS" starttime="20170803 18:49:17.626"></status>
</kw>
<status endtime="20170803 18:49:17.627" status="PASS" starttime="20170803 18:49:17.625"></status>
</kw>
<status endtime="20170803 18:49:17.627" status="PASS" starttime="20170803 18:49:17.624"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170803 18:49:17.627" level="INFO">Delete All Sessions</msg>
<status endtime="20170803 18:49:17.628" status="PASS" starttime="20170803 18:49:17.627"></status>
</kw>
<msg timestamp="20170803 18:49:17.628" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:49:17.628" status="PASS" starttime="20170803 18:49:17.323"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:49:17.628" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:49:17.628" status="PASS" starttime="20170803 18:49:17.628"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170803 18:49:17.629" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170803 18:49:17.629" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170803 18:49:17.629" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status endtime="20170803 18:49:17.629" status="PASS" starttime="20170803 18:49:17.629"></status>
</kw>
<msg timestamp="20170803 18:49:17.629" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status endtime="20170803 18:49:17.629" status="PASS" starttime="20170803 18:49:17.322"></status>
</kw>
<msg timestamp="20170803 18:49:17.630" level="INFO">${host_state} = Quiesced</msg>
<status endtime="20170803 18:49:17.630" status="PASS" starttime="20170803 18:49:17.322"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170803 18:49:17.630" level="FAIL">Running != Quiesced</msg>
<status endtime="20170803 18:49:17.630" status="FAIL" starttime="20170803 18:49:17.630"></status>
</kw>
<status endtime="20170803 18:49:17.631" status="FAIL" starttime="20170803 18:49:16.946"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170803 18:49:27.636" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170803 18:49:27.636" status="PASS" starttime="20170803 18:49:27.635"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170803 18:49:27.637" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170803 18:49:27.637" status="PASS" starttime="20170803 18:49:27.636"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170803 18:49:27.637" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170803 18:49:27.637" status="PASS" starttime="20170803 18:49:27.637"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170803 18:49:27.638" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170803 18:49:27.638" status="PASS" starttime="20170803 18:49:27.638"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170803 18:49:27.915" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170803 18:49:27.915" status="PASS" starttime="20170803 18:49:27.639"></status>
</kw>
<msg timestamp="20170803 18:49:27.915" level="INFO">${status} = PASS</msg>
<msg timestamp="20170803 18:49:27.915" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:49:27.915" status="PASS" starttime="20170803 18:49:27.639"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170803 18:49:27.916" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:49:27.916" status="PASS" starttime="20170803 18:49:27.916"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:49:27.917" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:49:27.917" status="PASS" starttime="20170803 18:49:27.916"></status>
</kw>
<status endtime="20170803 18:49:27.917" status="PASS" starttime="20170803 18:49:27.635"></status>
</kw>
<status endtime="20170803 18:49:27.917" status="PASS" starttime="20170803 18:49:27.634"></status>
</kw>
<status endtime="20170803 18:49:27.917" status="PASS" starttime="20170803 18:49:27.634"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170803 18:49:27.918" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170803 18:49:27.918" status="PASS" starttime="20170803 18:49:27.917"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:49:27.920" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170803 18:49:27.920" status="PASS" starttime="20170803 18:49:27.919"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:49:27.921" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170803 18:49:27.921" status="PASS" starttime="20170803 18:49:27.920"></status>
</kw>
<status endtime="20170803 18:49:27.921" status="PASS" starttime="20170803 18:49:27.920"></status>
</kw>
<status endtime="20170803 18:49:27.921" status="PASS" starttime="20170803 18:49:27.918"></status>
</kw>
<status endtime="20170803 18:49:27.921" status="PASS" starttime="20170803 18:49:27.918"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170803 18:49:27.984" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170803 18:49:27.984" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:49:27.984" status="PASS" starttime="20170803 18:49:27.921"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:49:27.986" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:49:27.986" status="PASS" starttime="20170803 18:49:27.986"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:49:27.987" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:49:27.987" status="PASS" starttime="20170803 18:49:27.987"></status>
</kw>
<status endtime="20170803 18:49:27.987" status="PASS" starttime="20170803 18:49:27.986"></status>
</kw>
<status endtime="20170803 18:49:27.987" status="PASS" starttime="20170803 18:49:27.985"></status>
</kw>
<status endtime="20170803 18:49:27.987" status="PASS" starttime="20170803 18:49:27.985"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170803 18:49:27.988" level="INFO">Delete All Sessions</msg>
<status endtime="20170803 18:49:27.988" status="PASS" starttime="20170803 18:49:27.988"></status>
</kw>
<msg timestamp="20170803 18:49:27.988" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:49:27.988" status="PASS" starttime="20170803 18:49:27.633"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:49:27.989" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:49:27.989" status="PASS" starttime="20170803 18:49:27.988"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170803 18:49:27.989" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170803 18:49:27.989" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170803 18:49:27.990" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170803 18:49:27.990" status="PASS" starttime="20170803 18:49:27.989"></status>
</kw>
<msg timestamp="20170803 18:49:27.990" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170803 18:49:27.990" status="PASS" starttime="20170803 18:49:27.632"></status>
</kw>
<msg timestamp="20170803 18:49:27.990" level="INFO">${power_state} = On</msg>
<status endtime="20170803 18:49:27.990" status="PASS" starttime="20170803 18:49:27.632"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170803 18:49:27.991" status="PASS" starttime="20170803 18:49:27.991"></status>
</kw>
<status endtime="20170803 18:49:27.991" status="PASS" starttime="20170803 18:49:27.632"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170803 18:49:27.995" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170803 18:49:27.995" status="PASS" starttime="20170803 18:49:27.995"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170803 18:49:27.996" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170803 18:49:27.996" status="PASS" starttime="20170803 18:49:27.995"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170803 18:49:27.996" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170803 18:49:27.996" status="PASS" starttime="20170803 18:49:27.996"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170803 18:49:27.997" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170803 18:49:27.997" status="PASS" starttime="20170803 18:49:27.997"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170803 18:49:28.178" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170803 18:49:28.178" status="PASS" starttime="20170803 18:49:27.998"></status>
</kw>
<msg timestamp="20170803 18:49:28.178" level="INFO">${status} = PASS</msg>
<msg timestamp="20170803 18:49:28.178" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:49:28.178" status="PASS" starttime="20170803 18:49:27.997"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170803 18:49:28.179" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:49:28.179" status="PASS" starttime="20170803 18:49:28.179"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:49:28.180" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:49:28.181" status="PASS" starttime="20170803 18:49:28.180"></status>
</kw>
<status endtime="20170803 18:49:28.181" status="PASS" starttime="20170803 18:49:27.994"></status>
</kw>
<status endtime="20170803 18:49:28.181" status="PASS" starttime="20170803 18:49:27.993"></status>
</kw>
<status endtime="20170803 18:49:28.181" status="PASS" starttime="20170803 18:49:27.993"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170803 18:49:28.182" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170803 18:49:28.182" status="PASS" starttime="20170803 18:49:28.181"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:49:28.185" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170803 18:49:28.185" status="PASS" starttime="20170803 18:49:28.184"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:49:28.186" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170803 18:49:28.186" status="PASS" starttime="20170803 18:49:28.186"></status>
</kw>
<status endtime="20170803 18:49:28.186" status="PASS" starttime="20170803 18:49:28.185"></status>
</kw>
<status endtime="20170803 18:49:28.186" status="PASS" starttime="20170803 18:49:28.183"></status>
</kw>
<status endtime="20170803 18:49:28.187" status="PASS" starttime="20170803 18:49:28.182"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170803 18:49:28.301" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170803 18:49:28.301" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:49:28.301" status="PASS" starttime="20170803 18:49:28.187"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:49:28.303" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:49:28.303" status="PASS" starttime="20170803 18:49:28.302"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:49:28.304" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:49:28.304" status="PASS" starttime="20170803 18:49:28.304"></status>
</kw>
<status endtime="20170803 18:49:28.304" status="PASS" starttime="20170803 18:49:28.303"></status>
</kw>
<status endtime="20170803 18:49:28.304" status="PASS" starttime="20170803 18:49:28.302"></status>
</kw>
<status endtime="20170803 18:49:28.305" status="PASS" starttime="20170803 18:49:28.301"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170803 18:49:28.305" level="INFO">Delete All Sessions</msg>
<status endtime="20170803 18:49:28.305" status="PASS" starttime="20170803 18:49:28.305"></status>
</kw>
<msg timestamp="20170803 18:49:28.305" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:49:28.305" status="PASS" starttime="20170803 18:49:27.992"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:49:28.306" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:49:28.306" status="PASS" starttime="20170803 18:49:28.306"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170803 18:49:28.307" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170803 18:49:28.307" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170803 18:49:28.307" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status endtime="20170803 18:49:28.307" status="PASS" starttime="20170803 18:49:28.306"></status>
</kw>
<msg timestamp="20170803 18:49:28.307" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status endtime="20170803 18:49:28.307" status="PASS" starttime="20170803 18:49:27.991"></status>
</kw>
<msg timestamp="20170803 18:49:28.307" level="INFO">${host_state} = Quiesced</msg>
<status endtime="20170803 18:49:28.307" status="PASS" starttime="20170803 18:49:27.991"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170803 18:49:28.308" level="FAIL">Running != Quiesced</msg>
<status endtime="20170803 18:49:28.308" status="FAIL" starttime="20170803 18:49:28.308"></status>
</kw>
<status endtime="20170803 18:49:28.308" status="FAIL" starttime="20170803 18:49:27.631"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170803 18:49:38.314" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170803 18:49:38.314" status="PASS" starttime="20170803 18:49:38.313"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170803 18:49:38.315" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170803 18:49:38.315" status="PASS" starttime="20170803 18:49:38.314"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170803 18:49:38.316" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170803 18:49:38.316" status="PASS" starttime="20170803 18:49:38.315"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170803 18:49:38.316" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170803 18:49:38.316" status="PASS" starttime="20170803 18:49:38.316"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170803 18:49:38.595" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170803 18:49:38.595" status="PASS" starttime="20170803 18:49:38.317"></status>
</kw>
<msg timestamp="20170803 18:49:38.595" level="INFO">${status} = PASS</msg>
<msg timestamp="20170803 18:49:38.595" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:49:38.595" status="PASS" starttime="20170803 18:49:38.316"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170803 18:49:38.596" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:49:38.596" status="PASS" starttime="20170803 18:49:38.596"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:49:38.597" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:49:38.597" status="PASS" starttime="20170803 18:49:38.596"></status>
</kw>
<status endtime="20170803 18:49:38.597" status="PASS" starttime="20170803 18:49:38.313"></status>
</kw>
<status endtime="20170803 18:49:38.597" status="PASS" starttime="20170803 18:49:38.312"></status>
</kw>
<status endtime="20170803 18:49:38.597" status="PASS" starttime="20170803 18:49:38.312"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170803 18:49:38.598" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170803 18:49:38.598" status="PASS" starttime="20170803 18:49:38.597"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:49:38.600" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170803 18:49:38.600" status="PASS" starttime="20170803 18:49:38.599"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:49:38.602" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170803 18:49:38.602" status="PASS" starttime="20170803 18:49:38.601"></status>
</kw>
<status endtime="20170803 18:49:38.602" status="PASS" starttime="20170803 18:49:38.601"></status>
</kw>
<status endtime="20170803 18:49:38.602" status="PASS" starttime="20170803 18:49:38.598"></status>
</kw>
<status endtime="20170803 18:49:38.602" status="PASS" starttime="20170803 18:49:38.598"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170803 18:49:38.701" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170803 18:49:38.701" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:49:38.701" status="PASS" starttime="20170803 18:49:38.602"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:49:38.703" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:49:38.703" status="PASS" starttime="20170803 18:49:38.702"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:49:38.705" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:49:38.705" status="PASS" starttime="20170803 18:49:38.704"></status>
</kw>
<status endtime="20170803 18:49:38.705" status="PASS" starttime="20170803 18:49:38.703"></status>
</kw>
<status endtime="20170803 18:49:38.705" status="PASS" starttime="20170803 18:49:38.702"></status>
</kw>
<status endtime="20170803 18:49:38.705" status="PASS" starttime="20170803 18:49:38.701"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170803 18:49:38.706" level="INFO">Delete All Sessions</msg>
<status endtime="20170803 18:49:38.706" status="PASS" starttime="20170803 18:49:38.705"></status>
</kw>
<msg timestamp="20170803 18:49:38.706" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:49:38.706" status="PASS" starttime="20170803 18:49:38.311"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:49:38.706" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:49:38.707" status="PASS" starttime="20170803 18:49:38.706"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170803 18:49:38.707" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170803 18:49:38.707" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170803 18:49:38.707" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170803 18:49:38.707" status="PASS" starttime="20170803 18:49:38.707"></status>
</kw>
<msg timestamp="20170803 18:49:38.708" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170803 18:49:38.708" status="PASS" starttime="20170803 18:49:38.310"></status>
</kw>
<msg timestamp="20170803 18:49:38.708" level="INFO">${power_state} = On</msg>
<status endtime="20170803 18:49:38.708" status="PASS" starttime="20170803 18:49:38.310"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170803 18:49:38.708" status="PASS" starttime="20170803 18:49:38.708"></status>
</kw>
<status endtime="20170803 18:49:38.709" status="PASS" starttime="20170803 18:49:38.310"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170803 18:49:38.712" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170803 18:49:38.713" status="PASS" starttime="20170803 18:49:38.712"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170803 18:49:38.713" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170803 18:49:38.713" status="PASS" starttime="20170803 18:49:38.713"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170803 18:49:38.714" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170803 18:49:38.714" status="PASS" starttime="20170803 18:49:38.714"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170803 18:49:38.715" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170803 18:49:38.715" status="PASS" starttime="20170803 18:49:38.714"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170803 18:49:38.924" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170803 18:49:38.924" status="PASS" starttime="20170803 18:49:38.716"></status>
</kw>
<msg timestamp="20170803 18:49:38.924" level="INFO">${status} = PASS</msg>
<msg timestamp="20170803 18:49:38.924" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:49:38.924" status="PASS" starttime="20170803 18:49:38.715"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170803 18:49:38.925" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:49:38.925" status="PASS" starttime="20170803 18:49:38.924"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:49:38.925" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:49:38.925" status="PASS" starttime="20170803 18:49:38.925"></status>
</kw>
<status endtime="20170803 18:49:38.926" status="PASS" starttime="20170803 18:49:38.711"></status>
</kw>
<status endtime="20170803 18:49:38.926" status="PASS" starttime="20170803 18:49:38.711"></status>
</kw>
<status endtime="20170803 18:49:38.926" status="PASS" starttime="20170803 18:49:38.710"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170803 18:49:38.926" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170803 18:49:38.926" status="PASS" starttime="20170803 18:49:38.926"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:49:38.928" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170803 18:49:38.929" status="PASS" starttime="20170803 18:49:38.928"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:49:38.929" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170803 18:49:38.930" status="PASS" starttime="20170803 18:49:38.929"></status>
</kw>
<status endtime="20170803 18:49:38.930" status="PASS" starttime="20170803 18:49:38.929"></status>
</kw>
<status endtime="20170803 18:49:38.930" status="PASS" starttime="20170803 18:49:38.927"></status>
</kw>
<status endtime="20170803 18:49:38.930" status="PASS" starttime="20170803 18:49:38.927"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170803 18:49:39.019" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170803 18:49:39.019" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:49:39.019" status="PASS" starttime="20170803 18:49:38.930"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:49:39.021" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:49:39.021" status="PASS" starttime="20170803 18:49:39.020"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:49:39.022" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:49:39.022" status="PASS" starttime="20170803 18:49:39.021"></status>
</kw>
<status endtime="20170803 18:49:39.022" status="PASS" starttime="20170803 18:49:39.021"></status>
</kw>
<status endtime="20170803 18:49:39.022" status="PASS" starttime="20170803 18:49:39.020"></status>
</kw>
<status endtime="20170803 18:49:39.022" status="PASS" starttime="20170803 18:49:39.019"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170803 18:49:39.022" level="INFO">Delete All Sessions</msg>
<status endtime="20170803 18:49:39.023" status="PASS" starttime="20170803 18:49:39.022"></status>
</kw>
<msg timestamp="20170803 18:49:39.023" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:49:39.023" status="PASS" starttime="20170803 18:49:38.710"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:49:39.023" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:49:39.023" status="PASS" starttime="20170803 18:49:39.023"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170803 18:49:39.024" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170803 18:49:39.024" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170803 18:49:39.024" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status endtime="20170803 18:49:39.024" status="PASS" starttime="20170803 18:49:39.024"></status>
</kw>
<msg timestamp="20170803 18:49:39.024" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status endtime="20170803 18:49:39.025" status="PASS" starttime="20170803 18:49:38.709"></status>
</kw>
<msg timestamp="20170803 18:49:39.025" level="INFO">${host_state} = Quiesced</msg>
<status endtime="20170803 18:49:39.025" status="PASS" starttime="20170803 18:49:38.709"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170803 18:49:39.025" level="FAIL">Running != Quiesced</msg>
<status endtime="20170803 18:49:39.026" status="FAIL" starttime="20170803 18:49:39.025"></status>
</kw>
<status endtime="20170803 18:49:39.026" status="FAIL" starttime="20170803 18:49:38.309"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170803 18:49:49.032" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170803 18:49:49.032" status="PASS" starttime="20170803 18:49:49.031"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170803 18:49:49.033" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170803 18:49:49.033" status="PASS" starttime="20170803 18:49:49.032"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170803 18:49:49.033" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170803 18:49:49.033" status="PASS" starttime="20170803 18:49:49.033"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170803 18:49:49.034" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170803 18:49:49.034" status="PASS" starttime="20170803 18:49:49.033"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170803 18:49:49.273" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170803 18:49:49.273" status="PASS" starttime="20170803 18:49:49.035"></status>
</kw>
<msg timestamp="20170803 18:49:49.274" level="INFO">${status} = PASS</msg>
<msg timestamp="20170803 18:49:49.274" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:49:49.274" status="PASS" starttime="20170803 18:49:49.034"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170803 18:49:49.274" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:49:49.275" status="PASS" starttime="20170803 18:49:49.274"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:49:49.275" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:49:49.275" status="PASS" starttime="20170803 18:49:49.275"></status>
</kw>
<status endtime="20170803 18:49:49.275" status="PASS" starttime="20170803 18:49:49.031"></status>
</kw>
<status endtime="20170803 18:49:49.276" status="PASS" starttime="20170803 18:49:49.030"></status>
</kw>
<status endtime="20170803 18:49:49.276" status="PASS" starttime="20170803 18:49:49.030"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170803 18:49:49.276" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170803 18:49:49.276" status="PASS" starttime="20170803 18:49:49.276"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:49:49.278" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170803 18:49:49.278" status="PASS" starttime="20170803 18:49:49.278"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:49:49.279" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170803 18:49:49.280" status="PASS" starttime="20170803 18:49:49.279"></status>
</kw>
<status endtime="20170803 18:49:49.280" status="PASS" starttime="20170803 18:49:49.279"></status>
</kw>
<status endtime="20170803 18:49:49.280" status="PASS" starttime="20170803 18:49:49.277"></status>
</kw>
<status endtime="20170803 18:49:49.280" status="PASS" starttime="20170803 18:49:49.277"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170803 18:49:49.343" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170803 18:49:49.343" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:49:49.343" status="PASS" starttime="20170803 18:49:49.280"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:49:49.345" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:49:49.345" status="PASS" starttime="20170803 18:49:49.344"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:49:49.346" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:49:49.346" status="PASS" starttime="20170803 18:49:49.346"></status>
</kw>
<status endtime="20170803 18:49:49.346" status="PASS" starttime="20170803 18:49:49.345"></status>
</kw>
<status endtime="20170803 18:49:49.346" status="PASS" starttime="20170803 18:49:49.344"></status>
</kw>
<status endtime="20170803 18:49:49.346" status="PASS" starttime="20170803 18:49:49.343"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170803 18:49:49.347" level="INFO">Delete All Sessions</msg>
<status endtime="20170803 18:49:49.347" status="PASS" starttime="20170803 18:49:49.346"></status>
</kw>
<msg timestamp="20170803 18:49:49.347" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:49:49.347" status="PASS" starttime="20170803 18:49:49.029"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:49:49.347" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:49:49.348" status="PASS" starttime="20170803 18:49:49.347"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170803 18:49:49.348" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170803 18:49:49.348" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170803 18:49:49.348" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170803 18:49:49.348" status="PASS" starttime="20170803 18:49:49.348"></status>
</kw>
<msg timestamp="20170803 18:49:49.349" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170803 18:49:49.349" status="PASS" starttime="20170803 18:49:49.028"></status>
</kw>
<msg timestamp="20170803 18:49:49.349" level="INFO">${power_state} = On</msg>
<status endtime="20170803 18:49:49.349" status="PASS" starttime="20170803 18:49:49.027"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170803 18:49:49.349" status="PASS" starttime="20170803 18:49:49.349"></status>
</kw>
<status endtime="20170803 18:49:49.350" status="PASS" starttime="20170803 18:49:49.027"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170803 18:49:49.353" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170803 18:49:49.353" status="PASS" starttime="20170803 18:49:49.353"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170803 18:49:49.354" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170803 18:49:49.354" status="PASS" starttime="20170803 18:49:49.354"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170803 18:49:49.355" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170803 18:49:49.355" status="PASS" starttime="20170803 18:49:49.354"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170803 18:49:49.355" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170803 18:49:49.355" status="PASS" starttime="20170803 18:49:49.355"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170803 18:49:49.545" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170803 18:49:49.546" status="PASS" starttime="20170803 18:49:49.356"></status>
</kw>
<msg timestamp="20170803 18:49:49.546" level="INFO">${status} = PASS</msg>
<msg timestamp="20170803 18:49:49.546" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:49:49.546" status="PASS" starttime="20170803 18:49:49.356"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170803 18:49:49.546" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:49:49.547" status="PASS" starttime="20170803 18:49:49.546"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:49:49.547" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:49:49.547" status="PASS" starttime="20170803 18:49:49.547"></status>
</kw>
<status endtime="20170803 18:49:49.548" status="PASS" starttime="20170803 18:49:49.352"></status>
</kw>
<status endtime="20170803 18:49:49.548" status="PASS" starttime="20170803 18:49:49.352"></status>
</kw>
<status endtime="20170803 18:49:49.548" status="PASS" starttime="20170803 18:49:49.351"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170803 18:49:49.548" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170803 18:49:49.548" status="PASS" starttime="20170803 18:49:49.548"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:49:49.550" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170803 18:49:49.550" status="PASS" starttime="20170803 18:49:49.550"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:49:49.551" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170803 18:49:49.551" status="PASS" starttime="20170803 18:49:49.551"></status>
</kw>
<status endtime="20170803 18:49:49.552" status="PASS" starttime="20170803 18:49:49.551"></status>
</kw>
<status endtime="20170803 18:49:49.552" status="PASS" starttime="20170803 18:49:49.549"></status>
</kw>
<status endtime="20170803 18:49:49.552" status="PASS" starttime="20170803 18:49:49.549"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170803 18:49:49.640" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170803 18:49:49.640" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:49:49.640" status="PASS" starttime="20170803 18:49:49.552"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:49:49.642" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:49:49.642" status="PASS" starttime="20170803 18:49:49.642"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:49:49.643" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:49:49.643" status="PASS" starttime="20170803 18:49:49.643"></status>
</kw>
<status endtime="20170803 18:49:49.643" status="PASS" starttime="20170803 18:49:49.642"></status>
</kw>
<status endtime="20170803 18:49:49.644" status="PASS" starttime="20170803 18:49:49.641"></status>
</kw>
<status endtime="20170803 18:49:49.644" status="PASS" starttime="20170803 18:49:49.641"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170803 18:49:49.644" level="INFO">Delete All Sessions</msg>
<status endtime="20170803 18:49:49.644" status="PASS" starttime="20170803 18:49:49.644"></status>
</kw>
<msg timestamp="20170803 18:49:49.644" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:49:49.644" status="PASS" starttime="20170803 18:49:49.351"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:49:49.645" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:49:49.645" status="PASS" starttime="20170803 18:49:49.645"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170803 18:49:49.646" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170803 18:49:49.646" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170803 18:49:49.646" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status endtime="20170803 18:49:49.646" status="PASS" starttime="20170803 18:49:49.645"></status>
</kw>
<msg timestamp="20170803 18:49:49.646" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status endtime="20170803 18:49:49.646" status="PASS" starttime="20170803 18:49:49.350"></status>
</kw>
<msg timestamp="20170803 18:49:49.646" level="INFO">${host_state} = Quiesced</msg>
<status endtime="20170803 18:49:49.646" status="PASS" starttime="20170803 18:49:49.350"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170803 18:49:49.647" level="FAIL">Running != Quiesced</msg>
<status endtime="20170803 18:49:49.647" status="FAIL" starttime="20170803 18:49:49.647"></status>
</kw>
<status endtime="20170803 18:49:49.647" status="FAIL" starttime="20170803 18:49:49.026"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170803 18:49:59.653" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170803 18:49:59.653" status="PASS" starttime="20170803 18:49:59.652"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170803 18:49:59.654" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170803 18:49:59.654" status="PASS" starttime="20170803 18:49:59.654"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170803 18:49:59.654" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170803 18:49:59.655" status="PASS" starttime="20170803 18:49:59.654"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170803 18:49:59.655" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170803 18:49:59.655" status="PASS" starttime="20170803 18:49:59.655"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170803 18:49:59.833" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170803 18:49:59.833" status="PASS" starttime="20170803 18:49:59.656"></status>
</kw>
<msg timestamp="20170803 18:49:59.833" level="INFO">${status} = PASS</msg>
<msg timestamp="20170803 18:49:59.833" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:49:59.833" status="PASS" starttime="20170803 18:49:59.655"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170803 18:49:59.834" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:49:59.834" status="PASS" starttime="20170803 18:49:59.834"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:49:59.835" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:49:59.835" status="PASS" starttime="20170803 18:49:59.835"></status>
</kw>
<status endtime="20170803 18:49:59.836" status="PASS" starttime="20170803 18:49:59.651"></status>
</kw>
<status endtime="20170803 18:49:59.836" status="PASS" starttime="20170803 18:49:59.651"></status>
</kw>
<status endtime="20170803 18:49:59.836" status="PASS" starttime="20170803 18:49:59.650"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170803 18:49:59.837" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170803 18:49:59.837" status="PASS" starttime="20170803 18:49:59.836"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:49:59.839" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170803 18:49:59.839" status="PASS" starttime="20170803 18:49:59.838"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:49:59.839" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170803 18:49:59.840" status="PASS" starttime="20170803 18:49:59.839"></status>
</kw>
<status endtime="20170803 18:49:59.840" status="PASS" starttime="20170803 18:49:59.839"></status>
</kw>
<status endtime="20170803 18:49:59.840" status="PASS" starttime="20170803 18:49:59.837"></status>
</kw>
<status endtime="20170803 18:49:59.840" status="PASS" starttime="20170803 18:49:59.837"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170803 18:49:59.903" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170803 18:49:59.903" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:49:59.903" status="PASS" starttime="20170803 18:49:59.840"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:49:59.905" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:49:59.905" status="PASS" starttime="20170803 18:49:59.904"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:49:59.906" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:49:59.906" status="PASS" starttime="20170803 18:49:59.906"></status>
</kw>
<status endtime="20170803 18:49:59.907" status="PASS" starttime="20170803 18:49:59.905"></status>
</kw>
<status endtime="20170803 18:49:59.907" status="PASS" starttime="20170803 18:49:59.904"></status>
</kw>
<status endtime="20170803 18:49:59.907" status="PASS" starttime="20170803 18:49:59.903"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170803 18:49:59.907" level="INFO">Delete All Sessions</msg>
<status endtime="20170803 18:49:59.907" status="PASS" starttime="20170803 18:49:59.907"></status>
</kw>
<msg timestamp="20170803 18:49:59.907" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:49:59.907" status="PASS" starttime="20170803 18:49:59.650"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:49:59.908" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:49:59.908" status="PASS" starttime="20170803 18:49:59.908"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170803 18:49:59.909" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170803 18:49:59.909" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170803 18:49:59.909" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170803 18:49:59.909" status="PASS" starttime="20170803 18:49:59.908"></status>
</kw>
<msg timestamp="20170803 18:49:59.909" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170803 18:49:59.909" status="PASS" starttime="20170803 18:49:59.649"></status>
</kw>
<msg timestamp="20170803 18:49:59.909" level="INFO">${power_state} = On</msg>
<status endtime="20170803 18:49:59.909" status="PASS" starttime="20170803 18:49:59.649"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170803 18:49:59.910" status="PASS" starttime="20170803 18:49:59.910"></status>
</kw>
<status endtime="20170803 18:49:59.910" status="PASS" starttime="20170803 18:49:59.648"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170803 18:49:59.913" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170803 18:49:59.914" status="PASS" starttime="20170803 18:49:59.913"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170803 18:49:59.914" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170803 18:49:59.914" status="PASS" starttime="20170803 18:49:59.914"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170803 18:49:59.915" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170803 18:49:59.915" status="PASS" starttime="20170803 18:49:59.915"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170803 18:49:59.916" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170803 18:49:59.916" status="PASS" starttime="20170803 18:49:59.915"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170803 18:50:00.091" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170803 18:50:00.091" status="PASS" starttime="20170803 18:49:59.916"></status>
</kw>
<msg timestamp="20170803 18:50:00.092" level="INFO">${status} = PASS</msg>
<msg timestamp="20170803 18:50:00.092" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:50:00.092" status="PASS" starttime="20170803 18:49:59.916"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170803 18:50:00.092" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:50:00.093" status="PASS" starttime="20170803 18:50:00.092"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:50:00.093" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:50:00.093" status="PASS" starttime="20170803 18:50:00.093"></status>
</kw>
<status endtime="20170803 18:50:00.093" status="PASS" starttime="20170803 18:49:59.913"></status>
</kw>
<status endtime="20170803 18:50:00.093" status="PASS" starttime="20170803 18:49:59.912"></status>
</kw>
<status endtime="20170803 18:50:00.094" status="PASS" starttime="20170803 18:49:59.912"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170803 18:50:00.094" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170803 18:50:00.094" status="PASS" starttime="20170803 18:50:00.094"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:50:00.097" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170803 18:50:00.097" status="PASS" starttime="20170803 18:50:00.096"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:50:00.098" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170803 18:50:00.098" status="PASS" starttime="20170803 18:50:00.097"></status>
</kw>
<status endtime="20170803 18:50:00.098" status="PASS" starttime="20170803 18:50:00.097"></status>
</kw>
<status endtime="20170803 18:50:00.098" status="PASS" starttime="20170803 18:50:00.095"></status>
</kw>
<status endtime="20170803 18:50:00.098" status="PASS" starttime="20170803 18:50:00.094"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170803 18:50:00.188" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170803 18:50:00.188" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:50:00.188" status="PASS" starttime="20170803 18:50:00.098"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:50:00.190" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:50:00.190" status="PASS" starttime="20170803 18:50:00.189"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:50:00.190" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:50:00.191" status="PASS" starttime="20170803 18:50:00.190"></status>
</kw>
<status endtime="20170803 18:50:00.191" status="PASS" starttime="20170803 18:50:00.190"></status>
</kw>
<status endtime="20170803 18:50:00.191" status="PASS" starttime="20170803 18:50:00.189"></status>
</kw>
<status endtime="20170803 18:50:00.191" status="PASS" starttime="20170803 18:50:00.188"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170803 18:50:00.191" level="INFO">Delete All Sessions</msg>
<status endtime="20170803 18:50:00.191" status="PASS" starttime="20170803 18:50:00.191"></status>
</kw>
<msg timestamp="20170803 18:50:00.192" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:50:00.192" status="PASS" starttime="20170803 18:49:59.911"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:50:00.192" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:50:00.192" status="PASS" starttime="20170803 18:50:00.192"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170803 18:50:00.193" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170803 18:50:00.193" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170803 18:50:00.193" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status endtime="20170803 18:50:00.193" status="PASS" starttime="20170803 18:50:00.193"></status>
</kw>
<msg timestamp="20170803 18:50:00.193" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status endtime="20170803 18:50:00.193" status="PASS" starttime="20170803 18:49:59.911"></status>
</kw>
<msg timestamp="20170803 18:50:00.194" level="INFO">${host_state} = Quiesced</msg>
<status endtime="20170803 18:50:00.194" status="PASS" starttime="20170803 18:49:59.910"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170803 18:50:00.195" level="FAIL">Running != Quiesced</msg>
<status endtime="20170803 18:50:00.195" status="FAIL" starttime="20170803 18:50:00.194"></status>
</kw>
<status endtime="20170803 18:50:00.195" status="FAIL" starttime="20170803 18:49:59.648"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170803 18:50:10.200" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170803 18:50:10.200" status="PASS" starttime="20170803 18:50:10.200"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170803 18:50:10.204" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170803 18:50:10.204" status="PASS" starttime="20170803 18:50:10.201"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170803 18:50:10.205" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170803 18:50:10.205" status="PASS" starttime="20170803 18:50:10.204"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170803 18:50:10.205" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170803 18:50:10.205" status="PASS" starttime="20170803 18:50:10.205"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170803 18:50:10.401" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170803 18:50:10.401" status="PASS" starttime="20170803 18:50:10.206"></status>
</kw>
<msg timestamp="20170803 18:50:10.401" level="INFO">${status} = PASS</msg>
<msg timestamp="20170803 18:50:10.401" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:50:10.401" status="PASS" starttime="20170803 18:50:10.206"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170803 18:50:10.402" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:50:10.402" status="PASS" starttime="20170803 18:50:10.402"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:50:10.403" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:50:10.403" status="PASS" starttime="20170803 18:50:10.402"></status>
</kw>
<status endtime="20170803 18:50:10.403" status="PASS" starttime="20170803 18:50:10.199"></status>
</kw>
<status endtime="20170803 18:50:10.403" status="PASS" starttime="20170803 18:50:10.199"></status>
</kw>
<status endtime="20170803 18:50:10.403" status="PASS" starttime="20170803 18:50:10.198"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170803 18:50:10.404" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170803 18:50:10.404" status="PASS" starttime="20170803 18:50:10.403"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:50:10.406" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170803 18:50:10.406" status="PASS" starttime="20170803 18:50:10.405"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:50:10.407" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170803 18:50:10.407" status="PASS" starttime="20170803 18:50:10.407"></status>
</kw>
<status endtime="20170803 18:50:10.407" status="PASS" starttime="20170803 18:50:10.406"></status>
</kw>
<status endtime="20170803 18:50:10.407" status="PASS" starttime="20170803 18:50:10.405"></status>
</kw>
<status endtime="20170803 18:50:10.407" status="PASS" starttime="20170803 18:50:10.404"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170803 18:50:10.470" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170803 18:50:10.470" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:50:10.470" status="PASS" starttime="20170803 18:50:10.408"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:50:10.472" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:50:10.472" status="PASS" starttime="20170803 18:50:10.471"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:50:10.473" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:50:10.473" status="PASS" starttime="20170803 18:50:10.473"></status>
</kw>
<status endtime="20170803 18:50:10.473" status="PASS" starttime="20170803 18:50:10.472"></status>
</kw>
<status endtime="20170803 18:50:10.473" status="PASS" starttime="20170803 18:50:10.471"></status>
</kw>
<status endtime="20170803 18:50:10.473" status="PASS" starttime="20170803 18:50:10.470"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170803 18:50:10.474" level="INFO">Delete All Sessions</msg>
<status endtime="20170803 18:50:10.474" status="PASS" starttime="20170803 18:50:10.474"></status>
</kw>
<msg timestamp="20170803 18:50:10.474" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:50:10.474" status="PASS" starttime="20170803 18:50:10.197"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:50:10.475" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:50:10.475" status="PASS" starttime="20170803 18:50:10.474"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170803 18:50:10.475" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170803 18:50:10.475" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170803 18:50:10.475" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170803 18:50:10.475" status="PASS" starttime="20170803 18:50:10.475"></status>
</kw>
<msg timestamp="20170803 18:50:10.476" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170803 18:50:10.476" status="PASS" starttime="20170803 18:50:10.197"></status>
</kw>
<msg timestamp="20170803 18:50:10.476" level="INFO">${power_state} = On</msg>
<status endtime="20170803 18:50:10.476" status="PASS" starttime="20170803 18:50:10.196"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170803 18:50:10.477" status="PASS" starttime="20170803 18:50:10.476"></status>
</kw>
<status endtime="20170803 18:50:10.477" status="PASS" starttime="20170803 18:50:10.196"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170803 18:50:10.481" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170803 18:50:10.481" status="PASS" starttime="20170803 18:50:10.480"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170803 18:50:10.482" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170803 18:50:10.482" status="PASS" starttime="20170803 18:50:10.481"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170803 18:50:10.482" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170803 18:50:10.482" status="PASS" starttime="20170803 18:50:10.482"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170803 18:50:10.483" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170803 18:50:10.483" status="PASS" starttime="20170803 18:50:10.483"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170803 18:50:10.681" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170803 18:50:10.681" status="PASS" starttime="20170803 18:50:10.484"></status>
</kw>
<msg timestamp="20170803 18:50:10.681" level="INFO">${status} = PASS</msg>
<msg timestamp="20170803 18:50:10.681" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:50:10.681" status="PASS" starttime="20170803 18:50:10.483"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170803 18:50:10.682" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:50:10.682" status="PASS" starttime="20170803 18:50:10.682"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:50:10.683" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:50:10.683" status="PASS" starttime="20170803 18:50:10.682"></status>
</kw>
<status endtime="20170803 18:50:10.683" status="PASS" starttime="20170803 18:50:10.480"></status>
</kw>
<status endtime="20170803 18:50:10.683" status="PASS" starttime="20170803 18:50:10.480"></status>
</kw>
<status endtime="20170803 18:50:10.683" status="PASS" starttime="20170803 18:50:10.479"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170803 18:50:10.684" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170803 18:50:10.684" status="PASS" starttime="20170803 18:50:10.683"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:50:10.686" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170803 18:50:10.686" status="PASS" starttime="20170803 18:50:10.685"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:50:10.687" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170803 18:50:10.687" status="PASS" starttime="20170803 18:50:10.686"></status>
</kw>
<status endtime="20170803 18:50:10.687" status="PASS" starttime="20170803 18:50:10.686"></status>
</kw>
<status endtime="20170803 18:50:10.687" status="PASS" starttime="20170803 18:50:10.684"></status>
</kw>
<status endtime="20170803 18:50:10.687" status="PASS" starttime="20170803 18:50:10.684"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170803 18:50:10.810" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170803 18:50:10.811" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:50:10.811" status="PASS" starttime="20170803 18:50:10.687"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:50:10.813" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:50:10.813" status="PASS" starttime="20170803 18:50:10.812"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:50:10.814" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:50:10.814" status="PASS" starttime="20170803 18:50:10.814"></status>
</kw>
<status endtime="20170803 18:50:10.814" status="PASS" starttime="20170803 18:50:10.813"></status>
</kw>
<status endtime="20170803 18:50:10.814" status="PASS" starttime="20170803 18:50:10.811"></status>
</kw>
<status endtime="20170803 18:50:10.814" status="PASS" starttime="20170803 18:50:10.811"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170803 18:50:10.815" level="INFO">Delete All Sessions</msg>
<status endtime="20170803 18:50:10.815" status="PASS" starttime="20170803 18:50:10.815"></status>
</kw>
<msg timestamp="20170803 18:50:10.815" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:50:10.815" status="PASS" starttime="20170803 18:50:10.478"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:50:10.816" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:50:10.816" status="PASS" starttime="20170803 18:50:10.815"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170803 18:50:10.816" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170803 18:50:10.816" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170803 18:50:10.817" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status endtime="20170803 18:50:10.817" status="PASS" starttime="20170803 18:50:10.816"></status>
</kw>
<msg timestamp="20170803 18:50:10.817" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status endtime="20170803 18:50:10.817" status="PASS" starttime="20170803 18:50:10.477"></status>
</kw>
<msg timestamp="20170803 18:50:10.817" level="INFO">${host_state} = Quiesced</msg>
<status endtime="20170803 18:50:10.817" status="PASS" starttime="20170803 18:50:10.477"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170803 18:50:10.818" level="FAIL">Running != Quiesced</msg>
<status endtime="20170803 18:50:10.818" status="FAIL" starttime="20170803 18:50:10.817"></status>
</kw>
<status endtime="20170803 18:50:10.818" status="FAIL" starttime="20170803 18:50:10.195"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170803 18:50:20.823" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170803 18:50:20.823" status="PASS" starttime="20170803 18:50:20.823"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170803 18:50:20.824" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170803 18:50:20.824" status="PASS" starttime="20170803 18:50:20.824"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170803 18:50:20.825" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170803 18:50:20.825" status="PASS" starttime="20170803 18:50:20.824"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170803 18:50:20.825" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170803 18:50:20.825" status="PASS" starttime="20170803 18:50:20.825"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170803 18:50:21.011" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170803 18:50:21.011" status="PASS" starttime="20170803 18:50:20.826"></status>
</kw>
<msg timestamp="20170803 18:50:21.012" level="INFO">${status} = PASS</msg>
<msg timestamp="20170803 18:50:21.012" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:50:21.012" status="PASS" starttime="20170803 18:50:20.826"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170803 18:50:21.012" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:50:21.012" status="PASS" starttime="20170803 18:50:21.012"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:50:21.013" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:50:21.013" status="PASS" starttime="20170803 18:50:21.013"></status>
</kw>
<status endtime="20170803 18:50:21.013" status="PASS" starttime="20170803 18:50:20.822"></status>
</kw>
<status endtime="20170803 18:50:21.013" status="PASS" starttime="20170803 18:50:20.822"></status>
</kw>
<status endtime="20170803 18:50:21.013" status="PASS" starttime="20170803 18:50:20.821"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170803 18:50:21.014" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170803 18:50:21.014" status="PASS" starttime="20170803 18:50:21.014"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:50:21.016" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170803 18:50:21.016" status="PASS" starttime="20170803 18:50:21.015"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:50:21.017" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170803 18:50:21.017" status="PASS" starttime="20170803 18:50:21.017"></status>
</kw>
<status endtime="20170803 18:50:21.018" status="PASS" starttime="20170803 18:50:21.017"></status>
</kw>
<status endtime="20170803 18:50:21.018" status="PASS" starttime="20170803 18:50:21.015"></status>
</kw>
<status endtime="20170803 18:50:21.018" status="PASS" starttime="20170803 18:50:21.014"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170803 18:50:21.093" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170803 18:50:21.094" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:50:21.094" status="PASS" starttime="20170803 18:50:21.018"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:50:21.095" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:50:21.095" status="PASS" starttime="20170803 18:50:21.095"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:50:21.096" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:50:21.096" status="PASS" starttime="20170803 18:50:21.096"></status>
</kw>
<status endtime="20170803 18:50:21.097" status="PASS" starttime="20170803 18:50:21.096"></status>
</kw>
<status endtime="20170803 18:50:21.097" status="PASS" starttime="20170803 18:50:21.094"></status>
</kw>
<status endtime="20170803 18:50:21.097" status="PASS" starttime="20170803 18:50:21.094"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170803 18:50:21.097" level="INFO">Delete All Sessions</msg>
<status endtime="20170803 18:50:21.097" status="PASS" starttime="20170803 18:50:21.097"></status>
</kw>
<msg timestamp="20170803 18:50:21.097" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:50:21.097" status="PASS" starttime="20170803 18:50:20.820"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:50:21.098" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:50:21.098" status="PASS" starttime="20170803 18:50:21.098"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170803 18:50:21.099" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170803 18:50:21.099" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170803 18:50:21.099" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170803 18:50:21.099" status="PASS" starttime="20170803 18:50:21.098"></status>
</kw>
<msg timestamp="20170803 18:50:21.099" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170803 18:50:21.099" status="PASS" starttime="20170803 18:50:20.820"></status>
</kw>
<msg timestamp="20170803 18:50:21.099" level="INFO">${power_state} = On</msg>
<status endtime="20170803 18:50:21.099" status="PASS" starttime="20170803 18:50:20.819"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170803 18:50:21.100" status="PASS" starttime="20170803 18:50:21.100"></status>
</kw>
<status endtime="20170803 18:50:21.100" status="PASS" starttime="20170803 18:50:20.819"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170803 18:50:21.104" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170803 18:50:21.104" status="PASS" starttime="20170803 18:50:21.103"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170803 18:50:21.105" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170803 18:50:21.105" status="PASS" starttime="20170803 18:50:21.105"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170803 18:50:21.106" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170803 18:50:21.106" status="PASS" starttime="20170803 18:50:21.105"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170803 18:50:21.106" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170803 18:50:21.106" status="PASS" starttime="20170803 18:50:21.106"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170803 18:50:21.397" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170803 18:50:21.397" status="PASS" starttime="20170803 18:50:21.107"></status>
</kw>
<msg timestamp="20170803 18:50:21.398" level="INFO">${status} = PASS</msg>
<msg timestamp="20170803 18:50:21.398" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:50:21.398" status="PASS" starttime="20170803 18:50:21.107"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170803 18:50:21.398" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:50:21.399" status="PASS" starttime="20170803 18:50:21.398"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:50:21.399" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:50:21.399" status="PASS" starttime="20170803 18:50:21.399"></status>
</kw>
<status endtime="20170803 18:50:21.399" status="PASS" starttime="20170803 18:50:21.103"></status>
</kw>
<status endtime="20170803 18:50:21.399" status="PASS" starttime="20170803 18:50:21.102"></status>
</kw>
<status endtime="20170803 18:50:21.400" status="PASS" starttime="20170803 18:50:21.102"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170803 18:50:21.400" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170803 18:50:21.400" status="PASS" starttime="20170803 18:50:21.400"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:50:21.402" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170803 18:50:21.402" status="PASS" starttime="20170803 18:50:21.402"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:50:21.403" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170803 18:50:21.403" status="PASS" starttime="20170803 18:50:21.403"></status>
</kw>
<status endtime="20170803 18:50:21.403" status="PASS" starttime="20170803 18:50:21.402"></status>
</kw>
<status endtime="20170803 18:50:21.403" status="PASS" starttime="20170803 18:50:21.401"></status>
</kw>
<status endtime="20170803 18:50:21.404" status="PASS" starttime="20170803 18:50:21.400"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170803 18:50:21.512" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170803 18:50:21.512" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:50:21.512" status="PASS" starttime="20170803 18:50:21.404"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:50:21.514" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:50:21.514" status="PASS" starttime="20170803 18:50:21.513"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:50:21.515" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:50:21.515" status="PASS" starttime="20170803 18:50:21.514"></status>
</kw>
<status endtime="20170803 18:50:21.515" status="PASS" starttime="20170803 18:50:21.514"></status>
</kw>
<status endtime="20170803 18:50:21.515" status="PASS" starttime="20170803 18:50:21.513"></status>
</kw>
<status endtime="20170803 18:50:21.515" status="PASS" starttime="20170803 18:50:21.512"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170803 18:50:21.515" level="INFO">Delete All Sessions</msg>
<status endtime="20170803 18:50:21.516" status="PASS" starttime="20170803 18:50:21.515"></status>
</kw>
<msg timestamp="20170803 18:50:21.516" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:50:21.516" status="PASS" starttime="20170803 18:50:21.101"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:50:21.516" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:50:21.517" status="PASS" starttime="20170803 18:50:21.516"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170803 18:50:21.517" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170803 18:50:21.517" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170803 18:50:21.517" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status endtime="20170803 18:50:21.517" status="PASS" starttime="20170803 18:50:21.517"></status>
</kw>
<msg timestamp="20170803 18:50:21.518" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status endtime="20170803 18:50:21.518" status="PASS" starttime="20170803 18:50:21.101"></status>
</kw>
<msg timestamp="20170803 18:50:21.518" level="INFO">${host_state} = Quiesced</msg>
<status endtime="20170803 18:50:21.518" status="PASS" starttime="20170803 18:50:21.100"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170803 18:50:21.519" level="FAIL">Running != Quiesced</msg>
<status endtime="20170803 18:50:21.519" status="FAIL" starttime="20170803 18:50:21.518"></status>
</kw>
<status endtime="20170803 18:50:21.519" status="FAIL" starttime="20170803 18:50:20.818"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170803 18:50:31.524" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170803 18:50:31.525" status="PASS" starttime="20170803 18:50:31.524"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170803 18:50:31.525" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170803 18:50:31.525" status="PASS" starttime="20170803 18:50:31.525"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170803 18:50:31.526" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170803 18:50:31.526" status="PASS" starttime="20170803 18:50:31.525"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170803 18:50:31.527" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170803 18:50:31.527" status="PASS" starttime="20170803 18:50:31.526"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170803 18:50:31.736" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170803 18:50:31.736" status="PASS" starttime="20170803 18:50:31.527"></status>
</kw>
<msg timestamp="20170803 18:50:31.736" level="INFO">${status} = PASS</msg>
<msg timestamp="20170803 18:50:31.736" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:50:31.737" status="PASS" starttime="20170803 18:50:31.527"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170803 18:50:31.737" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:50:31.737" status="PASS" starttime="20170803 18:50:31.737"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:50:31.738" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:50:31.738" status="PASS" starttime="20170803 18:50:31.738"></status>
</kw>
<status endtime="20170803 18:50:31.738" status="PASS" starttime="20170803 18:50:31.523"></status>
</kw>
<status endtime="20170803 18:50:31.738" status="PASS" starttime="20170803 18:50:31.523"></status>
</kw>
<status endtime="20170803 18:50:31.738" status="PASS" starttime="20170803 18:50:31.522"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170803 18:50:31.739" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170803 18:50:31.739" status="PASS" starttime="20170803 18:50:31.739"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:50:31.741" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170803 18:50:31.741" status="PASS" starttime="20170803 18:50:31.740"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:50:31.742" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170803 18:50:31.743" status="PASS" starttime="20170803 18:50:31.742"></status>
</kw>
<status endtime="20170803 18:50:31.743" status="PASS" starttime="20170803 18:50:31.741"></status>
</kw>
<status endtime="20170803 18:50:31.743" status="PASS" starttime="20170803 18:50:31.740"></status>
</kw>
<status endtime="20170803 18:50:31.743" status="PASS" starttime="20170803 18:50:31.739"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170803 18:50:31.813" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170803 18:50:31.813" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:50:31.813" status="PASS" starttime="20170803 18:50:31.743"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:50:31.815" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:50:31.815" status="PASS" starttime="20170803 18:50:31.814"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:50:31.816" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:50:31.816" status="PASS" starttime="20170803 18:50:31.815"></status>
</kw>
<status endtime="20170803 18:50:31.816" status="PASS" starttime="20170803 18:50:31.815"></status>
</kw>
<status endtime="20170803 18:50:31.816" status="PASS" starttime="20170803 18:50:31.814"></status>
</kw>
<status endtime="20170803 18:50:31.816" status="PASS" starttime="20170803 18:50:31.813"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170803 18:50:31.816" level="INFO">Delete All Sessions</msg>
<status endtime="20170803 18:50:31.817" status="PASS" starttime="20170803 18:50:31.816"></status>
</kw>
<msg timestamp="20170803 18:50:31.817" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:50:31.817" status="PASS" starttime="20170803 18:50:31.522"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:50:31.817" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:50:31.817" status="PASS" starttime="20170803 18:50:31.817"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170803 18:50:31.818" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170803 18:50:31.818" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170803 18:50:31.818" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170803 18:50:31.818" status="PASS" starttime="20170803 18:50:31.818"></status>
</kw>
<msg timestamp="20170803 18:50:31.818" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170803 18:50:31.818" status="PASS" starttime="20170803 18:50:31.521"></status>
</kw>
<msg timestamp="20170803 18:50:31.819" level="INFO">${power_state} = On</msg>
<status endtime="20170803 18:50:31.819" status="PASS" starttime="20170803 18:50:31.520"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170803 18:50:31.819" status="PASS" starttime="20170803 18:50:31.819"></status>
</kw>
<status endtime="20170803 18:50:31.819" status="PASS" starttime="20170803 18:50:31.520"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170803 18:50:31.823" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170803 18:50:31.823" status="PASS" starttime="20170803 18:50:31.823"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170803 18:50:31.824" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170803 18:50:31.824" status="PASS" starttime="20170803 18:50:31.824"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170803 18:50:31.824" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170803 18:50:31.825" status="PASS" starttime="20170803 18:50:31.824"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170803 18:50:31.825" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170803 18:50:31.825" status="PASS" starttime="20170803 18:50:31.825"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170803 18:50:32.033" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170803 18:50:32.034" status="PASS" starttime="20170803 18:50:31.826"></status>
</kw>
<msg timestamp="20170803 18:50:32.034" level="INFO">${status} = PASS</msg>
<msg timestamp="20170803 18:50:32.034" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:50:32.034" status="PASS" starttime="20170803 18:50:31.825"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170803 18:50:32.034" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:50:32.035" status="PASS" starttime="20170803 18:50:32.034"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:50:32.035" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:50:32.035" status="PASS" starttime="20170803 18:50:32.035"></status>
</kw>
<status endtime="20170803 18:50:32.035" status="PASS" starttime="20170803 18:50:31.822"></status>
</kw>
<status endtime="20170803 18:50:32.035" status="PASS" starttime="20170803 18:50:31.822"></status>
</kw>
<status endtime="20170803 18:50:32.035" status="PASS" starttime="20170803 18:50:31.821"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170803 18:50:32.036" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170803 18:50:32.036" status="PASS" starttime="20170803 18:50:32.036"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:50:32.038" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170803 18:50:32.038" status="PASS" starttime="20170803 18:50:32.038"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:50:32.039" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170803 18:50:32.039" status="PASS" starttime="20170803 18:50:32.039"></status>
</kw>
<status endtime="20170803 18:50:32.039" status="PASS" starttime="20170803 18:50:32.038"></status>
</kw>
<status endtime="20170803 18:50:32.039" status="PASS" starttime="20170803 18:50:32.037"></status>
</kw>
<status endtime="20170803 18:50:32.040" status="PASS" starttime="20170803 18:50:32.036"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170803 18:50:32.219" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170803 18:50:32.220" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:50:32.220" status="PASS" starttime="20170803 18:50:32.040"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:50:32.221" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:50:32.221" status="PASS" starttime="20170803 18:50:32.221"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:50:32.222" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:50:32.222" status="PASS" starttime="20170803 18:50:32.222"></status>
</kw>
<status endtime="20170803 18:50:32.223" status="PASS" starttime="20170803 18:50:32.222"></status>
</kw>
<status endtime="20170803 18:50:32.223" status="PASS" starttime="20170803 18:50:32.220"></status>
</kw>
<status endtime="20170803 18:50:32.223" status="PASS" starttime="20170803 18:50:32.220"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170803 18:50:32.223" level="INFO">Delete All Sessions</msg>
<status endtime="20170803 18:50:32.223" status="PASS" starttime="20170803 18:50:32.223"></status>
</kw>
<msg timestamp="20170803 18:50:32.223" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:50:32.223" status="PASS" starttime="20170803 18:50:31.820"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:50:32.224" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:50:32.224" status="PASS" starttime="20170803 18:50:32.224"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170803 18:50:32.225" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170803 18:50:32.225" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170803 18:50:32.225" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status endtime="20170803 18:50:32.225" status="PASS" starttime="20170803 18:50:32.224"></status>
</kw>
<msg timestamp="20170803 18:50:32.225" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status endtime="20170803 18:50:32.225" status="PASS" starttime="20170803 18:50:31.820"></status>
</kw>
<msg timestamp="20170803 18:50:32.225" level="INFO">${host_state} = Quiesced</msg>
<status endtime="20170803 18:50:32.225" status="PASS" starttime="20170803 18:50:31.820"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170803 18:50:32.226" level="FAIL">Running != Quiesced</msg>
<status endtime="20170803 18:50:32.226" status="FAIL" starttime="20170803 18:50:32.226"></status>
</kw>
<status endtime="20170803 18:50:32.226" status="FAIL" starttime="20170803 18:50:31.519"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170803 18:50:42.232" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170803 18:50:42.232" status="PASS" starttime="20170803 18:50:42.232"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170803 18:50:42.233" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170803 18:50:42.233" status="PASS" starttime="20170803 18:50:42.233"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170803 18:50:42.233" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170803 18:50:42.234" status="PASS" starttime="20170803 18:50:42.233"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170803 18:50:42.234" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170803 18:50:42.234" status="PASS" starttime="20170803 18:50:42.234"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170803 18:50:42.411" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170803 18:50:42.411" status="PASS" starttime="20170803 18:50:42.235"></status>
</kw>
<msg timestamp="20170803 18:50:42.411" level="INFO">${status} = PASS</msg>
<msg timestamp="20170803 18:50:42.411" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:50:42.411" status="PASS" starttime="20170803 18:50:42.234"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170803 18:50:42.412" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:50:42.412" status="PASS" starttime="20170803 18:50:42.411"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:50:42.412" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:50:42.412" status="PASS" starttime="20170803 18:50:42.412"></status>
</kw>
<status endtime="20170803 18:50:42.413" status="PASS" starttime="20170803 18:50:42.231"></status>
</kw>
<status endtime="20170803 18:50:42.413" status="PASS" starttime="20170803 18:50:42.230"></status>
</kw>
<status endtime="20170803 18:50:42.413" status="PASS" starttime="20170803 18:50:42.229"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170803 18:50:42.413" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170803 18:50:42.413" status="PASS" starttime="20170803 18:50:42.413"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:50:42.415" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170803 18:50:42.415" status="PASS" starttime="20170803 18:50:42.415"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:50:42.416" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170803 18:50:42.416" status="PASS" starttime="20170803 18:50:42.416"></status>
</kw>
<status endtime="20170803 18:50:42.417" status="PASS" starttime="20170803 18:50:42.416"></status>
</kw>
<status endtime="20170803 18:50:42.417" status="PASS" starttime="20170803 18:50:42.414"></status>
</kw>
<status endtime="20170803 18:50:42.417" status="PASS" starttime="20170803 18:50:42.414"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170803 18:50:42.486" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170803 18:50:42.486" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:50:42.486" status="PASS" starttime="20170803 18:50:42.417"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:50:42.488" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:50:42.488" status="PASS" starttime="20170803 18:50:42.487"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:50:42.489" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:50:42.489" status="PASS" starttime="20170803 18:50:42.489"></status>
</kw>
<status endtime="20170803 18:50:42.489" status="PASS" starttime="20170803 18:50:42.488"></status>
</kw>
<status endtime="20170803 18:50:42.489" status="PASS" starttime="20170803 18:50:42.487"></status>
</kw>
<status endtime="20170803 18:50:42.489" status="PASS" starttime="20170803 18:50:42.486"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170803 18:50:42.490" level="INFO">Delete All Sessions</msg>
<status endtime="20170803 18:50:42.490" status="PASS" starttime="20170803 18:50:42.490"></status>
</kw>
<msg timestamp="20170803 18:50:42.490" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:50:42.490" status="PASS" starttime="20170803 18:50:42.229"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:50:42.491" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:50:42.491" status="PASS" starttime="20170803 18:50:42.490"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170803 18:50:42.491" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170803 18:50:42.491" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170803 18:50:42.492" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170803 18:50:42.492" status="PASS" starttime="20170803 18:50:42.491"></status>
</kw>
<msg timestamp="20170803 18:50:42.492" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170803 18:50:42.492" status="PASS" starttime="20170803 18:50:42.228"></status>
</kw>
<msg timestamp="20170803 18:50:42.492" level="INFO">${power_state} = On</msg>
<status endtime="20170803 18:50:42.492" status="PASS" starttime="20170803 18:50:42.228"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170803 18:50:42.493" status="PASS" starttime="20170803 18:50:42.492"></status>
</kw>
<status endtime="20170803 18:50:42.493" status="PASS" starttime="20170803 18:50:42.227"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170803 18:50:42.496" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170803 18:50:42.497" status="PASS" starttime="20170803 18:50:42.496"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170803 18:50:42.497" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170803 18:50:42.497" status="PASS" starttime="20170803 18:50:42.497"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170803 18:50:42.498" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170803 18:50:42.498" status="PASS" starttime="20170803 18:50:42.498"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170803 18:50:42.499" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170803 18:50:42.499" status="PASS" starttime="20170803 18:50:42.498"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170803 18:50:42.780" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170803 18:50:42.781" status="PASS" starttime="20170803 18:50:42.499"></status>
</kw>
<msg timestamp="20170803 18:50:42.781" level="INFO">${status} = PASS</msg>
<msg timestamp="20170803 18:50:42.781" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:50:42.781" status="PASS" starttime="20170803 18:50:42.499"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170803 18:50:42.781" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:50:42.781" status="PASS" starttime="20170803 18:50:42.781"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:50:42.782" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:50:42.782" status="PASS" starttime="20170803 18:50:42.782"></status>
</kw>
<status endtime="20170803 18:50:42.782" status="PASS" starttime="20170803 18:50:42.496"></status>
</kw>
<status endtime="20170803 18:50:42.782" status="PASS" starttime="20170803 18:50:42.495"></status>
</kw>
<status endtime="20170803 18:50:42.782" status="PASS" starttime="20170803 18:50:42.495"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170803 18:50:42.783" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170803 18:50:42.783" status="PASS" starttime="20170803 18:50:42.783"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:50:42.786" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170803 18:50:42.786" status="PASS" starttime="20170803 18:50:42.784"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:50:42.786" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170803 18:50:42.787" status="PASS" starttime="20170803 18:50:42.786"></status>
</kw>
<status endtime="20170803 18:50:42.787" status="PASS" starttime="20170803 18:50:42.786"></status>
</kw>
<status endtime="20170803 18:50:42.787" status="PASS" starttime="20170803 18:50:42.784"></status>
</kw>
<status endtime="20170803 18:50:42.787" status="PASS" starttime="20170803 18:50:42.783"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170803 18:50:42.927" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170803 18:50:42.927" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:50:42.927" status="PASS" starttime="20170803 18:50:42.787"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:50:42.929" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:50:42.929" status="PASS" starttime="20170803 18:50:42.928"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:50:42.930" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:50:42.930" status="PASS" starttime="20170803 18:50:42.929"></status>
</kw>
<status endtime="20170803 18:50:42.930" status="PASS" starttime="20170803 18:50:42.929"></status>
</kw>
<status endtime="20170803 18:50:42.930" status="PASS" starttime="20170803 18:50:42.928"></status>
</kw>
<status endtime="20170803 18:50:42.930" status="PASS" starttime="20170803 18:50:42.927"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170803 18:50:42.930" level="INFO">Delete All Sessions</msg>
<status endtime="20170803 18:50:42.931" status="PASS" starttime="20170803 18:50:42.930"></status>
</kw>
<msg timestamp="20170803 18:50:42.931" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:50:42.931" status="PASS" starttime="20170803 18:50:42.494"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:50:42.931" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:50:42.931" status="PASS" starttime="20170803 18:50:42.931"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170803 18:50:42.932" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170803 18:50:42.932" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170803 18:50:42.932" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status endtime="20170803 18:50:42.932" status="PASS" starttime="20170803 18:50:42.932"></status>
</kw>
<msg timestamp="20170803 18:50:42.932" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status endtime="20170803 18:50:42.932" status="PASS" starttime="20170803 18:50:42.493"></status>
</kw>
<msg timestamp="20170803 18:50:42.933" level="INFO">${host_state} = Quiesced</msg>
<status endtime="20170803 18:50:42.933" status="PASS" starttime="20170803 18:50:42.493"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170803 18:50:42.933" level="FAIL">Running != Quiesced</msg>
<status endtime="20170803 18:50:42.933" status="FAIL" starttime="20170803 18:50:42.933"></status>
</kw>
<status endtime="20170803 18:50:42.934" status="FAIL" starttime="20170803 18:50:42.227"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170803 18:50:52.939" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170803 18:50:52.939" status="PASS" starttime="20170803 18:50:52.938"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170803 18:50:52.940" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170803 18:50:52.940" status="PASS" starttime="20170803 18:50:52.939"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170803 18:50:52.940" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170803 18:50:52.940" status="PASS" starttime="20170803 18:50:52.940"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170803 18:50:52.941" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170803 18:50:52.941" status="PASS" starttime="20170803 18:50:52.941"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170803 18:50:53.138" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170803 18:50:53.138" status="PASS" starttime="20170803 18:50:52.942"></status>
</kw>
<msg timestamp="20170803 18:50:53.139" level="INFO">${status} = PASS</msg>
<msg timestamp="20170803 18:50:53.139" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:50:53.139" status="PASS" starttime="20170803 18:50:52.942"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170803 18:50:53.139" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:50:53.139" status="PASS" starttime="20170803 18:50:53.139"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:50:53.140" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:50:53.140" status="PASS" starttime="20170803 18:50:53.140"></status>
</kw>
<status endtime="20170803 18:50:53.140" status="PASS" starttime="20170803 18:50:52.938"></status>
</kw>
<status endtime="20170803 18:50:53.140" status="PASS" starttime="20170803 18:50:52.937"></status>
</kw>
<status endtime="20170803 18:50:53.140" status="PASS" starttime="20170803 18:50:52.937"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170803 18:50:53.141" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170803 18:50:53.141" status="PASS" starttime="20170803 18:50:53.141"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:50:53.143" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170803 18:50:53.143" status="PASS" starttime="20170803 18:50:53.142"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:50:53.144" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170803 18:50:53.144" status="PASS" starttime="20170803 18:50:53.144"></status>
</kw>
<status endtime="20170803 18:50:53.144" status="PASS" starttime="20170803 18:50:53.143"></status>
</kw>
<status endtime="20170803 18:50:53.144" status="PASS" starttime="20170803 18:50:53.142"></status>
</kw>
<status endtime="20170803 18:50:53.144" status="PASS" starttime="20170803 18:50:53.141"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170803 18:50:53.208" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170803 18:50:53.208" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:50:53.208" status="PASS" starttime="20170803 18:50:53.145"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:50:53.210" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:50:53.210" status="PASS" starttime="20170803 18:50:53.209"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:50:53.211" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:50:53.211" status="PASS" starttime="20170803 18:50:53.211"></status>
</kw>
<status endtime="20170803 18:50:53.211" status="PASS" starttime="20170803 18:50:53.210"></status>
</kw>
<status endtime="20170803 18:50:53.211" status="PASS" starttime="20170803 18:50:53.209"></status>
</kw>
<status endtime="20170803 18:50:53.211" status="PASS" starttime="20170803 18:50:53.209"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170803 18:50:53.212" level="INFO">Delete All Sessions</msg>
<status endtime="20170803 18:50:53.212" status="PASS" starttime="20170803 18:50:53.211"></status>
</kw>
<msg timestamp="20170803 18:50:53.212" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:50:53.212" status="PASS" starttime="20170803 18:50:52.936"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:50:53.212" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:50:53.213" status="PASS" starttime="20170803 18:50:53.212"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170803 18:50:53.213" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170803 18:50:53.213" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170803 18:50:53.213" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170803 18:50:53.213" status="PASS" starttime="20170803 18:50:53.213"></status>
</kw>
<msg timestamp="20170803 18:50:53.214" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170803 18:50:53.214" status="PASS" starttime="20170803 18:50:52.935"></status>
</kw>
<msg timestamp="20170803 18:50:53.214" level="INFO">${power_state} = On</msg>
<status endtime="20170803 18:50:53.214" status="PASS" starttime="20170803 18:50:52.935"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170803 18:50:53.215" status="PASS" starttime="20170803 18:50:53.214"></status>
</kw>
<status endtime="20170803 18:50:53.215" status="PASS" starttime="20170803 18:50:52.935"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170803 18:50:53.222" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170803 18:50:53.222" status="PASS" starttime="20170803 18:50:53.221"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170803 18:50:53.223" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170803 18:50:53.223" status="PASS" starttime="20170803 18:50:53.223"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170803 18:50:53.223" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170803 18:50:53.224" status="PASS" starttime="20170803 18:50:53.223"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170803 18:50:53.224" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170803 18:50:53.224" status="PASS" starttime="20170803 18:50:53.224"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170803 18:50:53.438" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170803 18:50:53.438" status="PASS" starttime="20170803 18:50:53.225"></status>
</kw>
<msg timestamp="20170803 18:50:53.439" level="INFO">${status} = PASS</msg>
<msg timestamp="20170803 18:50:53.439" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:50:53.439" status="PASS" starttime="20170803 18:50:53.225"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170803 18:50:53.439" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:50:53.439" status="PASS" starttime="20170803 18:50:53.439"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:50:53.440" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:50:53.440" status="PASS" starttime="20170803 18:50:53.440"></status>
</kw>
<status endtime="20170803 18:50:53.440" status="PASS" starttime="20170803 18:50:53.221"></status>
</kw>
<status endtime="20170803 18:50:53.440" status="PASS" starttime="20170803 18:50:53.217"></status>
</kw>
<status endtime="20170803 18:50:53.440" status="PASS" starttime="20170803 18:50:53.216"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170803 18:50:53.441" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170803 18:50:53.441" status="PASS" starttime="20170803 18:50:53.441"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:50:53.443" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170803 18:50:53.443" status="PASS" starttime="20170803 18:50:53.442"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:50:53.444" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170803 18:50:53.444" status="PASS" starttime="20170803 18:50:53.444"></status>
</kw>
<status endtime="20170803 18:50:53.444" status="PASS" starttime="20170803 18:50:53.443"></status>
</kw>
<status endtime="20170803 18:50:53.444" status="PASS" starttime="20170803 18:50:53.442"></status>
</kw>
<status endtime="20170803 18:50:53.444" status="PASS" starttime="20170803 18:50:53.441"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170803 18:50:53.536" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170803 18:50:53.536" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:50:53.536" status="PASS" starttime="20170803 18:50:53.445"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:50:53.538" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:50:53.538" status="PASS" starttime="20170803 18:50:53.538"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:50:53.539" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:50:53.539" status="PASS" starttime="20170803 18:50:53.539"></status>
</kw>
<status endtime="20170803 18:50:53.540" status="PASS" starttime="20170803 18:50:53.539"></status>
</kw>
<status endtime="20170803 18:50:53.540" status="PASS" starttime="20170803 18:50:53.537"></status>
</kw>
<status endtime="20170803 18:50:53.540" status="PASS" starttime="20170803 18:50:53.537"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170803 18:50:53.540" level="INFO">Delete All Sessions</msg>
<status endtime="20170803 18:50:53.540" status="PASS" starttime="20170803 18:50:53.540"></status>
</kw>
<msg timestamp="20170803 18:50:53.540" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:50:53.540" status="PASS" starttime="20170803 18:50:53.216"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:50:53.541" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:50:53.541" status="PASS" starttime="20170803 18:50:53.541"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170803 18:50:53.542" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170803 18:50:53.542" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170803 18:50:53.542" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status endtime="20170803 18:50:53.542" status="PASS" starttime="20170803 18:50:53.541"></status>
</kw>
<msg timestamp="20170803 18:50:53.542" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status endtime="20170803 18:50:53.542" status="PASS" starttime="20170803 18:50:53.215"></status>
</kw>
<msg timestamp="20170803 18:50:53.542" level="INFO">${host_state} = Quiesced</msg>
<status endtime="20170803 18:50:53.542" status="PASS" starttime="20170803 18:50:53.215"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170803 18:50:53.543" level="FAIL">Running != Quiesced</msg>
<status endtime="20170803 18:50:53.543" status="FAIL" starttime="20170803 18:50:53.543"></status>
</kw>
<status endtime="20170803 18:50:53.543" status="FAIL" starttime="20170803 18:50:52.934"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170803 18:51:03.548" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170803 18:51:03.549" status="PASS" starttime="20170803 18:51:03.548"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170803 18:51:03.549" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170803 18:51:03.549" status="PASS" starttime="20170803 18:51:03.549"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170803 18:51:03.550" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170803 18:51:03.550" status="PASS" starttime="20170803 18:51:03.550"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170803 18:51:03.551" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170803 18:51:03.551" status="PASS" starttime="20170803 18:51:03.550"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170803 18:51:03.726" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170803 18:51:03.726" status="PASS" starttime="20170803 18:51:03.551"></status>
</kw>
<msg timestamp="20170803 18:51:03.726" level="INFO">${status} = PASS</msg>
<msg timestamp="20170803 18:51:03.727" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:51:03.727" status="PASS" starttime="20170803 18:51:03.551"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170803 18:51:03.727" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:51:03.727" status="PASS" starttime="20170803 18:51:03.727"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:51:03.728" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:51:03.728" status="PASS" starttime="20170803 18:51:03.728"></status>
</kw>
<status endtime="20170803 18:51:03.728" status="PASS" starttime="20170803 18:51:03.547"></status>
</kw>
<status endtime="20170803 18:51:03.728" status="PASS" starttime="20170803 18:51:03.547"></status>
</kw>
<status endtime="20170803 18:51:03.728" status="PASS" starttime="20170803 18:51:03.546"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170803 18:51:03.729" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170803 18:51:03.729" status="PASS" starttime="20170803 18:51:03.729"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:51:03.731" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170803 18:51:03.731" status="PASS" starttime="20170803 18:51:03.730"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:51:03.732" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170803 18:51:03.732" status="PASS" starttime="20170803 18:51:03.732"></status>
</kw>
<status endtime="20170803 18:51:03.732" status="PASS" starttime="20170803 18:51:03.731"></status>
</kw>
<status endtime="20170803 18:51:03.732" status="PASS" starttime="20170803 18:51:03.730"></status>
</kw>
<status endtime="20170803 18:51:03.732" status="PASS" starttime="20170803 18:51:03.729"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170803 18:51:03.795" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170803 18:51:03.795" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:51:03.795" status="PASS" starttime="20170803 18:51:03.733"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:51:03.797" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:51:03.797" status="PASS" starttime="20170803 18:51:03.796"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:51:03.798" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:51:03.798" status="PASS" starttime="20170803 18:51:03.798"></status>
</kw>
<status endtime="20170803 18:51:03.798" status="PASS" starttime="20170803 18:51:03.797"></status>
</kw>
<status endtime="20170803 18:51:03.798" status="PASS" starttime="20170803 18:51:03.796"></status>
</kw>
<status endtime="20170803 18:51:03.798" status="PASS" starttime="20170803 18:51:03.795"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170803 18:51:03.799" level="INFO">Delete All Sessions</msg>
<status endtime="20170803 18:51:03.799" status="PASS" starttime="20170803 18:51:03.799"></status>
</kw>
<msg timestamp="20170803 18:51:03.799" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:51:03.799" status="PASS" starttime="20170803 18:51:03.546"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:51:03.800" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:51:03.800" status="PASS" starttime="20170803 18:51:03.799"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170803 18:51:03.800" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170803 18:51:03.800" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170803 18:51:03.800" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170803 18:51:03.800" status="PASS" starttime="20170803 18:51:03.800"></status>
</kw>
<msg timestamp="20170803 18:51:03.801" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170803 18:51:03.801" status="PASS" starttime="20170803 18:51:03.545"></status>
</kw>
<msg timestamp="20170803 18:51:03.801" level="INFO">${power_state} = On</msg>
<status endtime="20170803 18:51:03.801" status="PASS" starttime="20170803 18:51:03.545"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170803 18:51:03.802" status="PASS" starttime="20170803 18:51:03.801"></status>
</kw>
<status endtime="20170803 18:51:03.802" status="PASS" starttime="20170803 18:51:03.544"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170803 18:51:03.805" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170803 18:51:03.806" status="PASS" starttime="20170803 18:51:03.805"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170803 18:51:03.807" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170803 18:51:03.807" status="PASS" starttime="20170803 18:51:03.807"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170803 18:51:03.808" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170803 18:51:03.808" status="PASS" starttime="20170803 18:51:03.807"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170803 18:51:03.809" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170803 18:51:03.809" status="PASS" starttime="20170803 18:51:03.808"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170803 18:51:03.995" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170803 18:51:03.995" status="PASS" starttime="20170803 18:51:03.810"></status>
</kw>
<msg timestamp="20170803 18:51:03.995" level="INFO">${status} = PASS</msg>
<msg timestamp="20170803 18:51:03.995" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:51:03.995" status="PASS" starttime="20170803 18:51:03.809"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170803 18:51:03.996" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:51:03.996" status="PASS" starttime="20170803 18:51:03.995"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:51:03.996" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:51:03.997" status="PASS" starttime="20170803 18:51:03.996"></status>
</kw>
<status endtime="20170803 18:51:03.997" status="PASS" starttime="20170803 18:51:03.804"></status>
</kw>
<status endtime="20170803 18:51:03.997" status="PASS" starttime="20170803 18:51:03.804"></status>
</kw>
<status endtime="20170803 18:51:03.997" status="PASS" starttime="20170803 18:51:03.803"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170803 18:51:03.997" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170803 18:51:03.997" status="PASS" starttime="20170803 18:51:03.997"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:51:04.000" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170803 18:51:04.000" status="PASS" starttime="20170803 18:51:03.999"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:51:04.001" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170803 18:51:04.001" status="PASS" starttime="20170803 18:51:04.000"></status>
</kw>
<status endtime="20170803 18:51:04.001" status="PASS" starttime="20170803 18:51:04.000"></status>
</kw>
<status endtime="20170803 18:51:04.001" status="PASS" starttime="20170803 18:51:03.998"></status>
</kw>
<status endtime="20170803 18:51:04.001" status="PASS" starttime="20170803 18:51:03.998"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170803 18:51:04.123" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170803 18:51:04.124" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:51:04.124" status="PASS" starttime="20170803 18:51:04.001"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:51:04.125" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:51:04.126" status="PASS" starttime="20170803 18:51:04.125"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:51:04.126" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:51:04.126" status="PASS" starttime="20170803 18:51:04.126"></status>
</kw>
<status endtime="20170803 18:51:04.127" status="PASS" starttime="20170803 18:51:04.126"></status>
</kw>
<status endtime="20170803 18:51:04.127" status="PASS" starttime="20170803 18:51:04.124"></status>
</kw>
<status endtime="20170803 18:51:04.127" status="PASS" starttime="20170803 18:51:04.124"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170803 18:51:04.127" level="INFO">Delete All Sessions</msg>
<status endtime="20170803 18:51:04.127" status="PASS" starttime="20170803 18:51:04.127"></status>
</kw>
<msg timestamp="20170803 18:51:04.127" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:51:04.127" status="PASS" starttime="20170803 18:51:03.803"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:51:04.128" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:51:04.128" status="PASS" starttime="20170803 18:51:04.128"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170803 18:51:04.129" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170803 18:51:04.129" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170803 18:51:04.129" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status endtime="20170803 18:51:04.129" status="PASS" starttime="20170803 18:51:04.128"></status>
</kw>
<msg timestamp="20170803 18:51:04.129" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status endtime="20170803 18:51:04.129" status="PASS" starttime="20170803 18:51:03.802"></status>
</kw>
<msg timestamp="20170803 18:51:04.130" level="INFO">${host_state} = Quiesced</msg>
<status endtime="20170803 18:51:04.130" status="PASS" starttime="20170803 18:51:03.802"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170803 18:51:04.130" level="FAIL">Running != Quiesced</msg>
<status endtime="20170803 18:51:04.130" status="FAIL" starttime="20170803 18:51:04.130"></status>
</kw>
<status endtime="20170803 18:51:04.130" status="FAIL" starttime="20170803 18:51:03.544"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170803 18:51:14.137" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170803 18:51:14.137" status="PASS" starttime="20170803 18:51:14.136"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170803 18:51:14.138" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170803 18:51:14.138" status="PASS" starttime="20170803 18:51:14.138"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170803 18:51:14.139" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170803 18:51:14.139" status="PASS" starttime="20170803 18:51:14.139"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170803 18:51:14.140" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170803 18:51:14.140" status="PASS" starttime="20170803 18:51:14.139"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170803 18:51:14.380" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170803 18:51:14.380" status="PASS" starttime="20170803 18:51:14.141"></status>
</kw>
<msg timestamp="20170803 18:51:14.380" level="INFO">${status} = PASS</msg>
<msg timestamp="20170803 18:51:14.381" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:51:14.381" status="PASS" starttime="20170803 18:51:14.140"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170803 18:51:14.381" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:51:14.381" status="PASS" starttime="20170803 18:51:14.381"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:51:14.382" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:51:14.382" status="PASS" starttime="20170803 18:51:14.382"></status>
</kw>
<status endtime="20170803 18:51:14.382" status="PASS" starttime="20170803 18:51:14.136"></status>
</kw>
<status endtime="20170803 18:51:14.382" status="PASS" starttime="20170803 18:51:14.135"></status>
</kw>
<status endtime="20170803 18:51:14.382" status="PASS" starttime="20170803 18:51:14.134"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170803 18:51:14.383" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170803 18:51:14.383" status="PASS" starttime="20170803 18:51:14.383"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:51:14.385" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170803 18:51:14.385" status="PASS" starttime="20170803 18:51:14.384"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:51:14.386" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170803 18:51:14.386" status="PASS" starttime="20170803 18:51:14.386"></status>
</kw>
<status endtime="20170803 18:51:14.387" status="PASS" starttime="20170803 18:51:14.385"></status>
</kw>
<status endtime="20170803 18:51:14.387" status="PASS" starttime="20170803 18:51:14.384"></status>
</kw>
<status endtime="20170803 18:51:14.387" status="PASS" starttime="20170803 18:51:14.383"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170803 18:51:14.451" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170803 18:51:14.451" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:51:14.451" status="PASS" starttime="20170803 18:51:14.387"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:51:14.453" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:51:14.453" status="PASS" starttime="20170803 18:51:14.452"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:51:14.454" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:51:14.454" status="PASS" starttime="20170803 18:51:14.453"></status>
</kw>
<status endtime="20170803 18:51:14.454" status="PASS" starttime="20170803 18:51:14.453"></status>
</kw>
<status endtime="20170803 18:51:14.454" status="PASS" starttime="20170803 18:51:14.452"></status>
</kw>
<status endtime="20170803 18:51:14.454" status="PASS" starttime="20170803 18:51:14.451"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170803 18:51:14.455" level="INFO">Delete All Sessions</msg>
<status endtime="20170803 18:51:14.455" status="PASS" starttime="20170803 18:51:14.454"></status>
</kw>
<msg timestamp="20170803 18:51:14.455" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:51:14.455" status="PASS" starttime="20170803 18:51:14.133"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:51:14.455" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:51:14.456" status="PASS" starttime="20170803 18:51:14.455"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170803 18:51:14.456" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170803 18:51:14.456" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170803 18:51:14.456" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170803 18:51:14.456" status="PASS" starttime="20170803 18:51:14.456"></status>
</kw>
<msg timestamp="20170803 18:51:14.457" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170803 18:51:14.457" status="PASS" starttime="20170803 18:51:14.132"></status>
</kw>
<msg timestamp="20170803 18:51:14.457" level="INFO">${power_state} = On</msg>
<status endtime="20170803 18:51:14.457" status="PASS" starttime="20170803 18:51:14.132"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170803 18:51:14.457" status="PASS" starttime="20170803 18:51:14.457"></status>
</kw>
<status endtime="20170803 18:51:14.458" status="PASS" starttime="20170803 18:51:14.132"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170803 18:51:14.461" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170803 18:51:14.461" status="PASS" starttime="20170803 18:51:14.461"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170803 18:51:14.462" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170803 18:51:14.462" status="PASS" starttime="20170803 18:51:14.462"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170803 18:51:14.463" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170803 18:51:14.463" status="PASS" starttime="20170803 18:51:14.462"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170803 18:51:14.463" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170803 18:51:14.463" status="PASS" starttime="20170803 18:51:14.463"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170803 18:51:14.665" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170803 18:51:14.665" status="PASS" starttime="20170803 18:51:14.464"></status>
</kw>
<msg timestamp="20170803 18:51:14.666" level="INFO">${status} = PASS</msg>
<msg timestamp="20170803 18:51:14.666" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:51:14.666" status="PASS" starttime="20170803 18:51:14.464"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170803 18:51:14.666" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:51:14.666" status="PASS" starttime="20170803 18:51:14.666"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:51:14.667" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:51:14.667" status="PASS" starttime="20170803 18:51:14.667"></status>
</kw>
<status endtime="20170803 18:51:14.667" status="PASS" starttime="20170803 18:51:14.460"></status>
</kw>
<status endtime="20170803 18:51:14.667" status="PASS" starttime="20170803 18:51:14.460"></status>
</kw>
<status endtime="20170803 18:51:14.667" status="PASS" starttime="20170803 18:51:14.459"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170803 18:51:14.668" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170803 18:51:14.668" status="PASS" starttime="20170803 18:51:14.668"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:51:14.670" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170803 18:51:14.670" status="PASS" starttime="20170803 18:51:14.669"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:51:14.671" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170803 18:51:14.671" status="PASS" starttime="20170803 18:51:14.671"></status>
</kw>
<status endtime="20170803 18:51:14.671" status="PASS" starttime="20170803 18:51:14.670"></status>
</kw>
<status endtime="20170803 18:51:14.671" status="PASS" starttime="20170803 18:51:14.669"></status>
</kw>
<status endtime="20170803 18:51:14.671" status="PASS" starttime="20170803 18:51:14.668"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170803 18:51:14.760" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170803 18:51:14.760" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:51:14.760" status="PASS" starttime="20170803 18:51:14.672"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:51:14.762" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:51:14.762" status="PASS" starttime="20170803 18:51:14.761"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:51:14.763" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:51:14.763" status="PASS" starttime="20170803 18:51:14.762"></status>
</kw>
<status endtime="20170803 18:51:14.763" status="PASS" starttime="20170803 18:51:14.762"></status>
</kw>
<status endtime="20170803 18:51:14.763" status="PASS" starttime="20170803 18:51:14.761"></status>
</kw>
<status endtime="20170803 18:51:14.763" status="PASS" starttime="20170803 18:51:14.760"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170803 18:51:14.763" level="INFO">Delete All Sessions</msg>
<status endtime="20170803 18:51:14.763" status="PASS" starttime="20170803 18:51:14.763"></status>
</kw>
<msg timestamp="20170803 18:51:14.764" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:51:14.764" status="PASS" starttime="20170803 18:51:14.459"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:51:14.764" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:51:14.764" status="PASS" starttime="20170803 18:51:14.764"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170803 18:51:14.765" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170803 18:51:14.765" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170803 18:51:14.765" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status endtime="20170803 18:51:14.765" status="PASS" starttime="20170803 18:51:14.765"></status>
</kw>
<msg timestamp="20170803 18:51:14.765" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status endtime="20170803 18:51:14.765" status="PASS" starttime="20170803 18:51:14.458"></status>
</kw>
<msg timestamp="20170803 18:51:14.766" level="INFO">${host_state} = Quiesced</msg>
<status endtime="20170803 18:51:14.766" status="PASS" starttime="20170803 18:51:14.458"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170803 18:51:14.766" level="FAIL">Running != Quiesced</msg>
<status endtime="20170803 18:51:14.766" status="FAIL" starttime="20170803 18:51:14.766"></status>
</kw>
<status endtime="20170803 18:51:14.766" status="FAIL" starttime="20170803 18:51:14.131"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170803 18:51:24.772" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170803 18:51:24.772" status="PASS" starttime="20170803 18:51:24.772"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170803 18:51:24.773" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170803 18:51:24.773" status="PASS" starttime="20170803 18:51:24.773"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170803 18:51:24.774" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170803 18:51:24.774" status="PASS" starttime="20170803 18:51:24.774"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170803 18:51:24.775" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170803 18:51:24.775" status="PASS" starttime="20170803 18:51:24.774"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170803 18:51:24.978" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170803 18:51:24.978" status="PASS" starttime="20170803 18:51:24.775"></status>
</kw>
<msg timestamp="20170803 18:51:24.979" level="INFO">${status} = PASS</msg>
<msg timestamp="20170803 18:51:24.979" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:51:24.979" status="PASS" starttime="20170803 18:51:24.775"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170803 18:51:24.979" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:51:24.979" status="PASS" starttime="20170803 18:51:24.979"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:51:24.980" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:51:24.980" status="PASS" starttime="20170803 18:51:24.980"></status>
</kw>
<status endtime="20170803 18:51:24.980" status="PASS" starttime="20170803 18:51:24.771"></status>
</kw>
<status endtime="20170803 18:51:24.980" status="PASS" starttime="20170803 18:51:24.770"></status>
</kw>
<status endtime="20170803 18:51:24.980" status="PASS" starttime="20170803 18:51:24.770"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170803 18:51:24.981" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170803 18:51:24.981" status="PASS" starttime="20170803 18:51:24.981"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:51:24.983" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170803 18:51:24.983" status="PASS" starttime="20170803 18:51:24.982"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:51:24.984" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170803 18:51:24.984" status="PASS" starttime="20170803 18:51:24.984"></status>
</kw>
<status endtime="20170803 18:51:24.984" status="PASS" starttime="20170803 18:51:24.983"></status>
</kw>
<status endtime="20170803 18:51:24.984" status="PASS" starttime="20170803 18:51:24.982"></status>
</kw>
<status endtime="20170803 18:51:24.984" status="PASS" starttime="20170803 18:51:24.981"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170803 18:51:25.078" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170803 18:51:25.078" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:51:25.078" status="PASS" starttime="20170803 18:51:24.985"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:51:25.080" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:51:25.080" status="PASS" starttime="20170803 18:51:25.080"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:51:25.081" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:51:25.082" status="PASS" starttime="20170803 18:51:25.081"></status>
</kw>
<status endtime="20170803 18:51:25.082" status="PASS" starttime="20170803 18:51:25.080"></status>
</kw>
<status endtime="20170803 18:51:25.082" status="PASS" starttime="20170803 18:51:25.079"></status>
</kw>
<status endtime="20170803 18:51:25.082" status="PASS" starttime="20170803 18:51:25.079"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170803 18:51:25.082" level="INFO">Delete All Sessions</msg>
<status endtime="20170803 18:51:25.082" status="PASS" starttime="20170803 18:51:25.082"></status>
</kw>
<msg timestamp="20170803 18:51:25.082" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:51:25.083" status="PASS" starttime="20170803 18:51:24.769"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:51:25.083" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:51:25.083" status="PASS" starttime="20170803 18:51:25.083"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170803 18:51:25.084" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170803 18:51:25.084" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170803 18:51:25.084" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170803 18:51:25.084" status="PASS" starttime="20170803 18:51:25.083"></status>
</kw>
<msg timestamp="20170803 18:51:25.084" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170803 18:51:25.084" status="PASS" starttime="20170803 18:51:24.768"></status>
</kw>
<msg timestamp="20170803 18:51:25.084" level="INFO">${power_state} = On</msg>
<status endtime="20170803 18:51:25.085" status="PASS" starttime="20170803 18:51:24.768"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170803 18:51:25.085" status="PASS" starttime="20170803 18:51:25.085"></status>
</kw>
<status endtime="20170803 18:51:25.085" status="PASS" starttime="20170803 18:51:24.768"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170803 18:51:25.089" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170803 18:51:25.089" status="PASS" starttime="20170803 18:51:25.088"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170803 18:51:25.090" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170803 18:51:25.090" status="PASS" starttime="20170803 18:51:25.089"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170803 18:51:25.090" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170803 18:51:25.090" status="PASS" starttime="20170803 18:51:25.090"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170803 18:51:25.091" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170803 18:51:25.091" status="PASS" starttime="20170803 18:51:25.091"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170803 18:51:25.356" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170803 18:51:25.356" status="PASS" starttime="20170803 18:51:25.092"></status>
</kw>
<msg timestamp="20170803 18:51:25.357" level="INFO">${status} = PASS</msg>
<msg timestamp="20170803 18:51:25.357" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:51:25.357" status="PASS" starttime="20170803 18:51:25.091"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170803 18:51:25.357" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:51:25.357" status="PASS" starttime="20170803 18:51:25.357"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:51:25.358" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:51:25.358" status="PASS" starttime="20170803 18:51:25.358"></status>
</kw>
<status endtime="20170803 18:51:25.358" status="PASS" starttime="20170803 18:51:25.088"></status>
</kw>
<status endtime="20170803 18:51:25.358" status="PASS" starttime="20170803 18:51:25.087"></status>
</kw>
<status endtime="20170803 18:51:25.359" status="PASS" starttime="20170803 18:51:25.087"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170803 18:51:25.359" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170803 18:51:25.359" status="PASS" starttime="20170803 18:51:25.359"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:51:25.362" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170803 18:51:25.362" status="PASS" starttime="20170803 18:51:25.361"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:51:25.363" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170803 18:51:25.363" status="PASS" starttime="20170803 18:51:25.363"></status>
</kw>
<status endtime="20170803 18:51:25.363" status="PASS" starttime="20170803 18:51:25.362"></status>
</kw>
<status endtime="20170803 18:51:25.363" status="PASS" starttime="20170803 18:51:25.360"></status>
</kw>
<status endtime="20170803 18:51:25.363" status="PASS" starttime="20170803 18:51:25.360"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170803 18:51:25.452" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170803 18:51:25.452" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:51:25.452" status="PASS" starttime="20170803 18:51:25.363"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:51:25.454" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:51:25.454" status="PASS" starttime="20170803 18:51:25.454"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:51:25.455" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:51:25.455" status="PASS" starttime="20170803 18:51:25.455"></status>
</kw>
<status endtime="20170803 18:51:25.455" status="PASS" starttime="20170803 18:51:25.454"></status>
</kw>
<status endtime="20170803 18:51:25.456" status="PASS" starttime="20170803 18:51:25.453"></status>
</kw>
<status endtime="20170803 18:51:25.456" status="PASS" starttime="20170803 18:51:25.453"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170803 18:51:25.456" level="INFO">Delete All Sessions</msg>
<status endtime="20170803 18:51:25.456" status="PASS" starttime="20170803 18:51:25.456"></status>
</kw>
<msg timestamp="20170803 18:51:25.456" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:51:25.456" status="PASS" starttime="20170803 18:51:25.086"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:51:25.457" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:51:25.457" status="PASS" starttime="20170803 18:51:25.457"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170803 18:51:25.458" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170803 18:51:25.458" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170803 18:51:25.458" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status endtime="20170803 18:51:25.458" status="PASS" starttime="20170803 18:51:25.458"></status>
</kw>
<msg timestamp="20170803 18:51:25.459" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status endtime="20170803 18:51:25.459" status="PASS" starttime="20170803 18:51:25.086"></status>
</kw>
<msg timestamp="20170803 18:51:25.459" level="INFO">${host_state} = Quiesced</msg>
<status endtime="20170803 18:51:25.459" status="PASS" starttime="20170803 18:51:25.085"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170803 18:51:25.460" level="FAIL">Running != Quiesced</msg>
<status endtime="20170803 18:51:25.460" status="FAIL" starttime="20170803 18:51:25.460"></status>
</kw>
<status endtime="20170803 18:51:25.461" status="FAIL" starttime="20170803 18:51:24.767"></status>
</kw>
<msg timestamp="20170803 18:51:25.461" level="FAIL">Keyword 'Is Host Running' failed after retrying for 10 minutes. The last error was: Running != Quiesced</msg>
<status endtime="20170803 18:51:25.461" status="FAIL" starttime="20170803 18:41:22.307"></status>
</kw>
<status endtime="20170803 18:51:25.461" status="FAIL" starttime="20170803 18:41:20.968"></status>
</kw>
<status endtime="20170803 18:51:25.462" status="FAIL" starttime="20170803 18:41:13.758"></status>
</kw>
<status endtime="20170803 18:51:25.462" status="FAIL" starttime="20170803 18:41:13.757"></status>
</kw>
<kw type="teardown" name="Test Exit Logs">
<doc>Collect FFDC and SOL log.</doc>
<kw library="openbmc_ffdc" name="FFDC On Test Case Fail">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw library="state_manager" name="Is Host Quiesced">
<doc>Check if host state is quiesced.</doc>
<assign>
<var>${status}</var>
</assign>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170803 18:51:25.466" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170803 18:51:25.467" status="PASS" starttime="20170803 18:51:25.466"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170803 18:51:25.467" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170803 18:51:25.467" status="PASS" starttime="20170803 18:51:25.467"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170803 18:51:25.468" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170803 18:51:25.468" status="PASS" starttime="20170803 18:51:25.468"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170803 18:51:25.469" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170803 18:51:25.469" status="PASS" starttime="20170803 18:51:25.468"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170803 18:51:25.652" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170803 18:51:25.653" status="PASS" starttime="20170803 18:51:25.469"></status>
</kw>
<msg timestamp="20170803 18:51:25.653" level="INFO">${status} = PASS</msg>
<msg timestamp="20170803 18:51:25.653" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:51:25.653" status="PASS" starttime="20170803 18:51:25.469"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170803 18:51:25.653" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:51:25.653" status="PASS" starttime="20170803 18:51:25.653"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:51:25.654" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:51:25.654" status="PASS" starttime="20170803 18:51:25.654"></status>
</kw>
<status endtime="20170803 18:51:25.654" status="PASS" starttime="20170803 18:51:25.466"></status>
</kw>
<status endtime="20170803 18:51:25.654" status="PASS" starttime="20170803 18:51:25.465"></status>
</kw>
<status endtime="20170803 18:51:25.654" status="PASS" starttime="20170803 18:51:25.465"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170803 18:51:25.655" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170803 18:51:25.655" status="PASS" starttime="20170803 18:51:25.655"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:51:25.657" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170803 18:51:25.657" status="PASS" starttime="20170803 18:51:25.656"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:51:25.658" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170803 18:51:25.658" status="PASS" starttime="20170803 18:51:25.658"></status>
</kw>
<status endtime="20170803 18:51:25.658" status="PASS" starttime="20170803 18:51:25.657"></status>
</kw>
<status endtime="20170803 18:51:25.658" status="PASS" starttime="20170803 18:51:25.656"></status>
</kw>
<status endtime="20170803 18:51:25.658" status="PASS" starttime="20170803 18:51:25.655"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170803 18:51:25.776" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170803 18:51:25.776" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:51:25.776" status="PASS" starttime="20170803 18:51:25.659"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:51:25.778" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:51:25.778" status="PASS" starttime="20170803 18:51:25.778"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:51:25.779" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:51:25.779" status="PASS" starttime="20170803 18:51:25.779"></status>
</kw>
<status endtime="20170803 18:51:25.780" status="PASS" starttime="20170803 18:51:25.778"></status>
</kw>
<status endtime="20170803 18:51:25.780" status="PASS" starttime="20170803 18:51:25.777"></status>
</kw>
<status endtime="20170803 18:51:25.780" status="PASS" starttime="20170803 18:51:25.777"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170803 18:51:25.780" level="INFO">Delete All Sessions</msg>
<status endtime="20170803 18:51:25.780" status="PASS" starttime="20170803 18:51:25.780"></status>
</kw>
<msg timestamp="20170803 18:51:25.780" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:51:25.780" status="PASS" starttime="20170803 18:51:25.464"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:51:25.781" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:51:25.781" status="PASS" starttime="20170803 18:51:25.781"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170803 18:51:25.782" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170803 18:51:25.782" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170803 18:51:25.782" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status endtime="20170803 18:51:25.782" status="PASS" starttime="20170803 18:51:25.781"></status>
</kw>
<msg timestamp="20170803 18:51:25.782" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status endtime="20170803 18:51:25.782" status="PASS" starttime="20170803 18:51:25.463"></status>
</kw>
<msg timestamp="20170803 18:51:25.782" level="INFO">${host_state} = Quiesced</msg>
<status endtime="20170803 18:51:25.782" status="PASS" starttime="20170803 18:51:25.463"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<status endtime="20170803 18:51:25.783" status="PASS" starttime="20170803 18:51:25.783"></status>
</kw>
<msg timestamp="20170803 18:51:25.783" level="INFO">${status} = True</msg>
<status endtime="20170803 18:51:25.783" status="PASS" starttime="20170803 18:51:25.783"></status>
</kw>
<msg timestamp="20170803 18:51:25.784" level="INFO">${status} = True</msg>
<status endtime="20170803 18:51:25.784" status="PASS" starttime="20170803 18:51:25.463"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL' or '${status}'=='True'</arg>
<arg>FFDC</arg>
</arguments>
<kw library="openbmc_ffdc" name="Ffdc">
<doc>Gather First Failure Data Capture (FFDC).</doc>
<kw library="utils" name="Ping Host">
<arguments>
<arg>9.3.21.61</arg>
</arguments>
<kw library="BuiltIn" name="Should Not Be Empty">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170803 18:51:25.811" level="INFO">Length is 9</msg>
<status endtime="20170803 18:51:25.811" status="PASS" starttime="20170803 18:51:25.811"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170803 18:51:25.816" level="INFO">Running command 'ping -c 4 9.3.21.61 2&gt;&amp;1'.</msg>
<msg timestamp="20170803 18:51:28.819" level="INFO">${RC} = 0</msg>
<msg timestamp="20170803 18:51:28.819" level="INFO">${output} = PING 9.3.21.61 (9.3.21.61) 56(84) bytes of data.
64 bytes from 9.3.21.61: icmp_seq=1 ttl=62 time=0.698 ms
64 bytes from 9.3.21.61: icmp_seq=2 ttl=62 time=0.663 ms
64 bytes from 9.3.21.61: icmp_seq=3 t...</msg>
<status endtime="20170803 18:51:28.820" status="PASS" starttime="20170803 18:51:25.812"></status>
</kw>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170803 18:51:28.822" level="INFO">RC: 0
Output:
PING 9.3.21.61 (9.3.21.61) 56(84) bytes of data.
64 bytes from 9.3.21.61: icmp_seq=1 ttl=62 time=0.698 ms
64 bytes from 9.3.21.61: icmp_seq=2 ttl=62 time=0.663 ms
64 bytes from 9.3.21.61: icmp_seq=3 ttl=62 time=0.674 ms
64 bytes from 9.3.21.61: icmp_seq=4 ttl=62 time=0.618 ms

--- 9.3.21.61 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 2997ms
rtt min/avg/max/mdev = 0.618/0.663/0.698/0.034 ms</msg>
<status endtime="20170803 18:51:28.822" status="PASS" starttime="20170803 18:51:28.822"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status endtime="20170803 18:51:28.823" status="PASS" starttime="20170803 18:51:28.823"></status>
</kw>
<status endtime="20170803 18:51:28.824" status="PASS" starttime="20170803 18:51:25.810"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Get Current Time Stamp">
<doc>Get the current time stamp data</doc>
<kw library="DateTime" name="Get Current Date">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170803 18:51:28.839" level="INFO">${cur_time} = 2017-08-03 18:51:28:838414</msg>
<status endtime="20170803 18:51:28.839" status="PASS" starttime="20170803 18:51:28.838"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170803 18:51:28.839" level="INFO">${cur_time} = 20170803185128838414</msg>
<status endtime="20170803 18:51:28.839" status="PASS" starttime="20170803 18:51:28.839"></status>
</kw>
<status endtime="20170803 18:51:28.839" status="PASS" starttime="20170803 18:51:28.837"></status>
</kw>
<msg timestamp="20170803 18:51:28.840" level="INFO">${FFDC_TIME} = 20170803185128838414</msg>
<kw library="openbmc_ffdc_utils" name="Get Test Dir and Name">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20170803 18:51:28.854" level="INFO">${suite_name} = TestsTestBasicPoweron</msg>
<status endtime="20170803 18:51:28.854" status="PASS" starttime="20170803 18:51:28.854"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20170803 18:51:28.855" level="INFO">${suite_name} = 20170803185128838414_TestsTestBasicPoweron</msg>
<status endtime="20170803 18:51:28.855" status="PASS" starttime="20170803 18:51:28.854"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20170803 18:51:28.855" level="INFO">${test_name} = PowerOnTest</msg>
<status endtime="20170803 18:51:28.855" status="PASS" starttime="20170803 18:51:28.855"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20170803 18:51:28.856" level="INFO">${test_name} = 20170803185128838414_PowerOnTest</msg>
<status endtime="20170803 18:51:28.856" status="PASS" starttime="20170803 18:51:28.855"></status>
</kw>
<status endtime="20170803 18:51:28.856" status="PASS" starttime="20170803 18:51:28.853"></status>
</kw>
<msg timestamp="20170803 18:51:28.856" level="INFO">${FFDC_DIR_PATH} = /tmp/fspcibld/16652/obmc-robot/logs/20170803185128838414_TestsTestBasicPoweron/20170803185128838414_PowerOnTest/</msg>
<msg timestamp="20170803 18:51:28.857" level="INFO">${FFDC_PREFIX} = 20170803185128838414_</msg>
<msg timestamp="20170803 18:51:28.878" level="INFO">${LOG_PREFIX} = /tmp/fspcibld/16652/obmc-robot/logs/20170803185128838414_TestsTestBasicPoweron/20170803185128838414_PowerOnTest/20170803185128838414_</msg>
<kw library="OperatingSystem" name="Create Directory">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>/tmp/fspcibld/16652/obmc-robot/logs/20170803185128838414_TestsTestBasicPoweron/20170803185128838414_PowerOnTest/</arg>
</arguments>
<msg html="yes" timestamp="20170803 18:51:28.879" level="INFO">Created directory '&lt;a href="file:///tmp/fspcibld/16652/obmc-robot/logs/20170803185128838414_TestsTestBasicPoweron/20170803185128838414_PowerOnTest"&gt;/tmp/fspcibld/16652/obmc-robot/logs/20170803185128838414_TestsTestBasicPoweron/20170803185128838414_PowerOnTest&lt;/a&gt;'.</msg>
<status endtime="20170803 18:51:28.879" status="PASS" starttime="20170803 18:51:28.878"></status>
</kw>
<msg timestamp="20170803 18:51:28.883" level="INFO">${FFDC_FILE_PATH} = /tmp/fspcibld/16652/obmc-robot/logs/20170803185128838414_TestsTestBasicPoweron/20170803185128838414_PowerOnTest/20170803185128838414_BMC_general.txt</msg>
<kw library="openbmc_ffdc_utils" name="Header Message">
<doc>Write header message to the report document manifest.</doc>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${HEADER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170803 18:51:28.903" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/16652/obmc-robot/logs/20170803185128838414_TestsTestBasicPoweron/20170803185128838414_PowerOnTest/20170803185128838414_BMC_general.txt"&gt;/tmp/fspcibld/16652/obmc-robot/logs/20170803185128838414_TestsTestBasicPoweron/20170803185128838414_PowerOnTest/20170803185128838414_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170803 18:51:28.903" status="PASS" starttime="20170803 18:51:28.903"></status>
</kw>
<status endtime="20170803 18:51:28.904" status="PASS" starttime="20170803 18:51:28.902"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170803 18:51:28.905" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/16652/obmc-robot/logs/20170803185128838414_TestsTestBasicPoweron/20170803185128838414_PowerOnTest/20170803185128838414_BMC_general.txt"&gt;/tmp/fspcibld/16652/obmc-robot/logs/20170803185128838414_TestsTestBasicPoweron/20170803185128838414_PowerOnTest/20170803185128838414_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170803 18:51:28.905" status="PASS" starttime="20170803 18:51:28.904"></status>
</kw>
<status endtime="20170803 18:51:28.905" status="PASS" starttime="20170803 18:51:28.904"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Suite File\t\t: ${SUITE_NAME} ${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170803 18:51:28.906" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/16652/obmc-robot/logs/20170803185128838414_TestsTestBasicPoweron/20170803185128838414_PowerOnTest/20170803185128838414_BMC_general.txt"&gt;/tmp/fspcibld/16652/obmc-robot/logs/20170803185128838414_TestsTestBasicPoweron/20170803185128838414_PowerOnTest/20170803185128838414_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170803 18:51:28.907" status="PASS" starttime="20170803 18:51:28.906"></status>
</kw>
<status endtime="20170803 18:51:28.907" status="PASS" starttime="20170803 18:51:28.905"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Case Name\t\t: ${TEST_NAME}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170803 18:51:28.908" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/16652/obmc-robot/logs/20170803185128838414_TestsTestBasicPoweron/20170803185128838414_PowerOnTest/20170803185128838414_BMC_general.txt"&gt;/tmp/fspcibld/16652/obmc-robot/logs/20170803185128838414_TestsTestBasicPoweron/20170803185128838414_PowerOnTest/20170803185128838414_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170803 18:51:28.908" status="PASS" starttime="20170803 18:51:28.907"></status>
</kw>
<status endtime="20170803 18:51:28.908" status="PASS" starttime="20170803 18:51:28.907"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Source File\t: ${SUITE_SOURCE}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170803 18:51:28.909" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/16652/obmc-robot/logs/20170803185128838414_TestsTestBasicPoweron/20170803185128838414_PowerOnTest/20170803185128838414_BMC_general.txt"&gt;/tmp/fspcibld/16652/obmc-robot/logs/20170803185128838414_TestsTestBasicPoweron/20170803185128838414_PowerOnTest/20170803185128838414_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170803 18:51:28.909" status="PASS" starttime="20170803 18:51:28.909"></status>
</kw>
<status endtime="20170803 18:51:28.909" status="PASS" starttime="20170803 18:51:28.908"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Failure Time Stamp\t: ${FFDC_TIME}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170803 18:51:28.911" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/16652/obmc-robot/logs/20170803185128838414_TestsTestBasicPoweron/20170803185128838414_PowerOnTest/20170803185128838414_BMC_general.txt"&gt;/tmp/fspcibld/16652/obmc-robot/logs/20170803185128838414_TestsTestBasicPoweron/20170803185128838414_PowerOnTest/20170803185128838414_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170803 18:51:28.911" status="PASS" starttime="20170803 18:51:28.910"></status>
</kw>
<status endtime="20170803 18:51:28.911" status="PASS" starttime="20170803 18:51:28.910"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Error Message\t: ${TEST_MESSAGE}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170803 18:51:28.912" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/16652/obmc-robot/logs/20170803185128838414_TestsTestBasicPoweron/20170803185128838414_PowerOnTest/20170803185128838414_BMC_general.txt"&gt;/tmp/fspcibld/16652/obmc-robot/logs/20170803185128838414_TestsTestBasicPoweron/20170803185128838414_PowerOnTest/20170803185128838414_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170803 18:51:28.912" status="PASS" starttime="20170803 18:51:28.911"></status>
</kw>
<status endtime="20170803 18:51:28.912" status="PASS" starttime="20170803 18:51:28.911"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Documentation\t:${\n}${TEST_DOCUMENTATION}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170803 18:51:28.913" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/16652/obmc-robot/logs/20170803185128838414_TestsTestBasicPoweron/20170803185128838414_PowerOnTest/20170803185128838414_BMC_general.txt"&gt;/tmp/fspcibld/16652/obmc-robot/logs/20170803185128838414_TestsTestBasicPoweron/20170803185128838414_PowerOnTest/20170803185128838414_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170803 18:51:28.913" status="PASS" starttime="20170803 18:51:28.913"></status>
</kw>
<status endtime="20170803 18:51:28.913" status="PASS" starttime="20170803 18:51:28.912"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170803 18:51:28.914" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/16652/obmc-robot/logs/20170803185128838414_TestsTestBasicPoweron/20170803185128838414_PowerOnTest/20170803185128838414_BMC_general.txt"&gt;/tmp/fspcibld/16652/obmc-robot/logs/20170803185128838414_TestsTestBasicPoweron/20170803185128838414_PowerOnTest/20170803185128838414_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170803 18:51:28.915" status="PASS" starttime="20170803 18:51:28.914"></status>
</kw>
<status endtime="20170803 18:51:28.915" status="PASS" starttime="20170803 18:51:28.914"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Test Setup Info">
<doc>BMC IP, Model and other information</doc>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170803 18:51:28.916" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/16652/obmc-robot/logs/20170803185128838414_TestsTestBasicPoweron/20170803185128838414_PowerOnTest/20170803185128838414_BMC_general.txt"&gt;/tmp/fspcibld/16652/obmc-robot/logs/20170803185128838414_TestsTestBasicPoweron/20170803185128838414_PowerOnTest/20170803185128838414_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170803 18:51:28.916" status="PASS" starttime="20170803 18:51:28.916"></status>
</kw>
<status endtime="20170803 18:51:28.916" status="PASS" starttime="20170803 18:51:28.915"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Setup Information:</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170803 18:51:28.917" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/16652/obmc-robot/logs/20170803185128838414_TestsTestBasicPoweron/20170803185128838414_PowerOnTest/20170803185128838414_BMC_general.txt"&gt;/tmp/fspcibld/16652/obmc-robot/logs/20170803185128838414_TestsTestBasicPoweron/20170803185128838414_PowerOnTest/20170803185128838414_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170803 18:51:28.917" status="PASS" starttime="20170803 18:51:28.917"></status>
</kw>
<status endtime="20170803 18:51:28.918" status="PASS" starttime="20170803 18:51:28.916"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170803 18:51:28.919" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/16652/obmc-robot/logs/20170803185128838414_TestsTestBasicPoweron/20170803185128838414_PowerOnTest/20170803185128838414_BMC_general.txt"&gt;/tmp/fspcibld/16652/obmc-robot/logs/20170803185128838414_TestsTestBasicPoweron/20170803185128838414_PowerOnTest/20170803185128838414_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170803 18:51:28.919" status="PASS" starttime="20170803 18:51:28.918"></status>
</kw>
<status endtime="20170803 18:51:28.919" status="PASS" starttime="20170803 18:51:28.918"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>OPENBMC HOST \t: ${OPENBMC_HOST}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170803 18:51:28.920" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/16652/obmc-robot/logs/20170803185128838414_TestsTestBasicPoweron/20170803185128838414_PowerOnTest/20170803185128838414_BMC_general.txt"&gt;/tmp/fspcibld/16652/obmc-robot/logs/20170803185128838414_TestsTestBasicPoweron/20170803185128838414_PowerOnTest/20170803185128838414_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170803 18:51:28.920" status="PASS" starttime="20170803 18:51:28.920"></status>
</kw>
<status endtime="20170803 18:51:28.920" status="PASS" starttime="20170803 18:51:28.919"></status>
</kw>
<kw library="utils" name="Get BMC System Model">
<doc>Get the BMC model from the device tree.</doc>
<assign>
<var>${model_name}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20170803 18:51:28.948" level="INFO">index=1
host=9.3.21.61
newline=

encoding=UTF-8
term_type=vt100
height=24
path_separator=/
width=80
alias=bmc_connection
timeout=25 seconds
prompt=# 
port=22</msg>
<msg timestamp="20170803 18:51:28.949" level="INFO">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg timestamp="20170803 18:51:29.026" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170803 18:51:29.036" level="INFO">${bmc_model} = Witherspoon</msg>
<msg timestamp="20170803 18:51:29.036" level="INFO">${stderr} = </msg>
<msg timestamp="20170803 18:51:29.036" level="INFO">${rc} = 0</msg>
<status endtime="20170803 18:51:29.036" status="PASS" starttime="20170803 18:51:28.921"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170803 18:51:29.036" level="INFO">Length is 0</msg>
<status endtime="20170803 18:51:29.037" status="PASS" starttime="20170803 18:51:29.036"></status>
</kw>
<kw library="BuiltIn" name="Should Not Be Empty">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg timestamp="20170803 18:51:29.037" level="INFO">Length is 11</msg>
<status endtime="20170803 18:51:29.037" status="PASS" starttime="20170803 18:51:29.037"></status>
</kw>
<msg timestamp="20170803 18:51:29.037" level="INFO">${model_name} = Witherspoon</msg>
<status endtime="20170803 18:51:29.037" status="PASS" starttime="20170803 18:51:28.920"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>SYSTEM TYPE \t: ${model_name}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170803 18:51:29.039" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/16652/obmc-robot/logs/20170803185128838414_TestsTestBasicPoweron/20170803185128838414_PowerOnTest/20170803185128838414_BMC_general.txt"&gt;/tmp/fspcibld/16652/obmc-robot/logs/20170803185128838414_TestsTestBasicPoweron/20170803185128838414_PowerOnTest/20170803185128838414_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170803 18:51:29.039" status="PASS" starttime="20170803 18:51:29.038"></status>
</kw>
<status endtime="20170803 18:51:29.039" status="PASS" starttime="20170803 18:51:29.037"></status>
</kw>
<status endtime="20170803 18:51:29.039" status="PASS" starttime="20170803 18:51:28.915"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${MSG_INTRO}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170803 18:51:29.040" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/16652/obmc-robot/logs/20170803185128838414_TestsTestBasicPoweron/20170803185128838414_PowerOnTest/20170803185128838414_BMC_general.txt"&gt;/tmp/fspcibld/16652/obmc-robot/logs/20170803185128838414_TestsTestBasicPoweron/20170803185128838414_PowerOnTest/20170803185128838414_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170803 18:51:29.040" status="PASS" starttime="20170803 18:51:29.040"></status>
</kw>
<status endtime="20170803 18:51:29.040" status="PASS" starttime="20170803 18:51:29.039"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Ffdc Cmd Index">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170803 18:51:29.041" level="INFO">@{entries} = [ APPLICATION DATA | BMC DATA | DRIVER INFO ]</msg>
<status endtime="20170803 18:51:29.041" status="PASS" starttime="20170803 18:51:29.041"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = APPLICATION DATA">
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170803 18:51:29.042" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/16652/obmc-robot/logs/20170803185128838414_TestsTestBasicPoweron/20170803185128838414_PowerOnTest/20170803185128838414_BMC_general.txt"&gt;/tmp/fspcibld/16652/obmc-robot/logs/20170803185128838414_TestsTestBasicPoweron/20170803185128838414_PowerOnTest/20170803185128838414_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170803 18:51:29.042" status="PASS" starttime="20170803 18:51:29.042"></status>
</kw>
<status endtime="20170803 18:51:29.042" status="PASS" starttime="20170803 18:51:29.041"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170803 18:51:29.043" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/16652/obmc-robot/logs/20170803185128838414_TestsTestBasicPoweron/20170803185128838414_PowerOnTest/20170803185128838414_BMC_general.txt"&gt;/tmp/fspcibld/16652/obmc-robot/logs/20170803185128838414_TestsTestBasicPoweron/20170803185128838414_PowerOnTest/20170803185128838414_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170803 18:51:29.044" status="PASS" starttime="20170803 18:51:29.043"></status>
</kw>
<status endtime="20170803 18:51:29.044" status="PASS" starttime="20170803 18:51:29.043"></status>
</kw>
<status endtime="20170803 18:51:29.044" status="PASS" starttime="20170803 18:51:29.041"></status>
</kw>
<kw type="foritem" name="${index} = BMC DATA">
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170803 18:51:29.045" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/16652/obmc-robot/logs/20170803185128838414_TestsTestBasicPoweron/20170803185128838414_PowerOnTest/20170803185128838414_BMC_general.txt"&gt;/tmp/fspcibld/16652/obmc-robot/logs/20170803185128838414_TestsTestBasicPoweron/20170803185128838414_PowerOnTest/20170803185128838414_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170803 18:51:29.045" status="PASS" starttime="20170803 18:51:29.045"></status>
</kw>
<status endtime="20170803 18:51:29.045" status="PASS" starttime="20170803 18:51:29.044"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170803 18:51:29.046" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/16652/obmc-robot/logs/20170803185128838414_TestsTestBasicPoweron/20170803185128838414_PowerOnTest/20170803185128838414_BMC_general.txt"&gt;/tmp/fspcibld/16652/obmc-robot/logs/20170803185128838414_TestsTestBasicPoweron/20170803185128838414_PowerOnTest/20170803185128838414_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170803 18:51:29.046" status="PASS" starttime="20170803 18:51:29.046"></status>
</kw>
<status endtime="20170803 18:51:29.046" status="PASS" starttime="20170803 18:51:29.045"></status>
</kw>
<status endtime="20170803 18:51:29.046" status="PASS" starttime="20170803 18:51:29.044"></status>
</kw>
<kw type="foritem" name="${index} = DRIVER INFO">
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170803 18:51:29.048" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/16652/obmc-robot/logs/20170803185128838414_TestsTestBasicPoweron/20170803185128838414_PowerOnTest/20170803185128838414_BMC_general.txt"&gt;/tmp/fspcibld/16652/obmc-robot/logs/20170803185128838414_TestsTestBasicPoweron/20170803185128838414_PowerOnTest/20170803185128838414_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170803 18:51:29.048" status="PASS" starttime="20170803 18:51:29.047"></status>
</kw>
<status endtime="20170803 18:51:29.048" status="PASS" starttime="20170803 18:51:29.047"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170803 18:51:29.049" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/16652/obmc-robot/logs/20170803185128838414_TestsTestBasicPoweron/20170803185128838414_PowerOnTest/20170803185128838414_BMC_general.txt"&gt;/tmp/fspcibld/16652/obmc-robot/logs/20170803185128838414_TestsTestBasicPoweron/20170803185128838414_PowerOnTest/20170803185128838414_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170803 18:51:29.049" status="PASS" starttime="20170803 18:51:29.049"></status>
</kw>
<status endtime="20170803 18:51:29.049" status="PASS" starttime="20170803 18:51:29.048"></status>
</kw>
<status endtime="20170803 18:51:29.049" status="PASS" starttime="20170803 18:51:29.047"></status>
</kw>
<status endtime="20170803 18:51:29.049" status="PASS" starttime="20170803 18:51:29.041"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${MSG_DETAIL}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170803 18:51:29.050" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/16652/obmc-robot/logs/20170803185128838414_TestsTestBasicPoweron/20170803185128838414_PowerOnTest/20170803185128838414_BMC_general.txt"&gt;/tmp/fspcibld/16652/obmc-robot/logs/20170803185128838414_TestsTestBasicPoweron/20170803185128838414_PowerOnTest/20170803185128838414_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170803 18:51:29.050" status="PASS" starttime="20170803 18:51:29.050"></status>
</kw>
<status endtime="20170803 18:51:29.050" status="PASS" starttime="20170803 18:51:29.049"></status>
</kw>
<status endtime="20170803 18:51:29.051" status="PASS" starttime="20170803 18:51:28.902"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Call FFDC Methods">
<doc>Call into FFDC Keyword index list.</doc>
<arguments>
<arg>ffdc_function_list=</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Method Index">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170803 18:51:29.057" level="INFO">@{entries} = [ BMC LOGS ]</msg>
<status endtime="20170803 18:51:29.057" status="PASS" starttime="20170803 18:51:29.057"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC LOGS">
<kw library="openbmc_ffdc_methods" name="Method Call Keyword List">
<doc>Iterate the list through keyword index.</doc>
<arguments>
<arg>${index}</arg>
<arg>${ffdc_function_list}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Method Call">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<assign>
<var>@{method_list}</var>
</assign>
<msg timestamp="20170803 18:51:29.058" level="INFO">@{method_list} = [ ('SEL Log', 'Collect eSEL Log') | ('OS FFDC', 'OS FFDC Files') | ('Core Files', 'SCP Coredump Files') | ('FFDC Generic Report', 'BMC FFDC Manifest') | ('Get Request FFDC', 'BMC FFDC Get Requests') |...</msg>
<status endtime="20170803 18:51:29.058" status="PASS" starttime="20170803 18:51:29.058"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ffdc_function_list}' == '${EMPTY}'</arg>
<arg>Get FFDC Method Desc</arg>
<arg>${index}</arg>
<arg>ELSE</arg>
<arg>Split String</arg>
<arg>${ffdc_function_list}</arg>
<arg>separator=:</arg>
</arguments>
<assign>
<var>@{ffdc_function_list}</var>
</assign>
<kw library="openbmc_ffdc_list" name="Get Ffdc Method Desc">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<status endtime="20170803 18:51:29.060" status="PASS" starttime="20170803 18:51:29.059"></status>
</kw>
<msg timestamp="20170803 18:51:29.060" level="INFO">@{ffdc_function_list} = [ SEL Log | OS FFDC | Core Files | FFDC Generic Report | Get Request FFDC | BMC Specific Files ]</msg>
<status endtime="20170803 18:51:29.060" status="PASS" starttime="20170803 18:51:29.059"></status>
</kw>
<kw type="for" name="${method} IN [ @{method_list} ]">
<kw type="foritem" name="${method} = ('SEL Log', 'Collect eSEL Log')">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="Collections" name="List Should Contain Value">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status endtime="20170803 18:51:29.062" status="PASS" starttime="20170803 18:51:29.062"></status>
</kw>
<msg timestamp="20170803 18:51:29.062" level="INFO">${status} = PASS</msg>
<msg timestamp="20170803 18:51:29.062" level="INFO">${ret_values} = None</msg>
<status endtime="20170803 18:51:29.062" status="PASS" starttime="20170803 18:51:29.061"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status endtime="20170803 18:51:29.063" status="PASS" starttime="20170803 18:51:29.062"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="Collect eSEL Log">
<doc>Collect eSEL log from logging entry and convert eSEL data</doc>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${BMC_LOGGING_ENTRY}/enumerate</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170803 18:51:29.091" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170803 18:51:29.092" status="PASS" starttime="20170803 18:51:29.091"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170803 18:51:29.092" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170803 18:51:29.092" status="PASS" starttime="20170803 18:51:29.092"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170803 18:51:29.093" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170803 18:51:29.093" status="PASS" starttime="20170803 18:51:29.092"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170803 18:51:29.093" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170803 18:51:29.093" status="PASS" starttime="20170803 18:51:29.093"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170803 18:51:29.282" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170803 18:51:29.282" status="PASS" starttime="20170803 18:51:29.094"></status>
</kw>
<msg timestamp="20170803 18:51:29.283" level="INFO">${status} = PASS</msg>
<msg timestamp="20170803 18:51:29.283" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:51:29.283" status="PASS" starttime="20170803 18:51:29.094"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170803 18:51:29.283" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:51:29.283" status="PASS" starttime="20170803 18:51:29.283"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:51:29.284" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:51:29.284" status="PASS" starttime="20170803 18:51:29.284"></status>
</kw>
<status endtime="20170803 18:51:29.284" status="PASS" starttime="20170803 18:51:29.090"></status>
</kw>
<status endtime="20170803 18:51:29.284" status="PASS" starttime="20170803 18:51:29.090"></status>
</kw>
<status endtime="20170803 18:51:29.284" status="PASS" starttime="20170803 18:51:29.089"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170803 18:51:29.285" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry//enumerate</msg>
<status endtime="20170803 18:51:29.285" status="PASS" starttime="20170803 18:51:29.285"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170803 18:51:29.286" status="PASS" starttime="20170803 18:51:29.285"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170803 18:51:29.471" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry//enumerate, headers=None json=None</msg>
<msg timestamp="20170803 18:51:29.471" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:51:29.471" status="PASS" starttime="20170803 18:51:29.286"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170803 18:51:29.471" status="PASS" starttime="20170803 18:51:29.471"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170803 18:51:29.472" level="INFO">Delete All Sessions</msg>
<status endtime="20170803 18:51:29.472" status="PASS" starttime="20170803 18:51:29.472"></status>
</kw>
<msg timestamp="20170803 18:51:29.472" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:51:29.472" status="PASS" starttime="20170803 18:51:29.088"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:51:29.473" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:51:29.473" status="PASS" starttime="20170803 18:51:29.473"></status>
</kw>
<msg timestamp="20170803 18:51:29.473" level="INFO">${status} = True</msg>
<status endtime="20170803 18:51:29.474" status="PASS" starttime="20170803 18:51:29.472"></status>
</kw>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
</arguments>
<status endtime="20170803 18:51:29.474" status="PASS" starttime="20170803 18:51:29.474"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170803 18:51:29.475" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/logging/entry/2": {
      "AdditionalData": [], 
      "Id": 2, 
      "Message": "xyz.openbmc_project.Software.Version.Error.ManifestFileFailure", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1501785156646, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/3": {
      "AdditionalData": [], 
      "Id": 3, 
      "Message": "org.open_power.Host.Error.WatchdogTimedOut", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1501785736225, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/4": {
      "AdditionalData": [], 
      "Id": 4, 
      "Message": "org.open_power.Host.Error.WatchdogTimedOut", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1501785799884, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/5": {
      "AdditionalData": [], 
      "Id": 5, 
      "Message": "org.open_power.Host.Error.WatchdogTimedOut", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1501785866613, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/6": {
      "AdditionalData": [], 
      "Id": 6, 
      "Message": "org.open_power.Host.Error.WatchdogTimedOut", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1501785937252, 
      "associations": []
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170803 18:51:29.475" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170803 18:51:29.475" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': {u'/xyz/openbmc_project/logging/entry/3': {u'Message': u'org.open_power.Host.Error.WatchdogTimedOut', u'associations': [], u'AdditionalData': [], u'I...</msg>
<status endtime="20170803 18:51:29.475" status="PASS" starttime="20170803 18:51:29.474"></status>
</kw>
<kw library="Collections" name="Get Dictionary Keys">
<doc>Returns keys of the given ``dictionary``.</doc>
<arguments>
<arg>${content['data']}</arg>
</arguments>
<assign>
<var>${esel_list}</var>
</assign>
<msg timestamp="20170803 18:51:29.476" level="INFO">${esel_list} = [u'/xyz/openbmc_project/logging/entry/2', u'/xyz/openbmc_project/logging/entry/3', u'/xyz/openbmc_project/logging/entry/4', u'/xyz/openbmc_project/logging/entry/5', u'/xyz/openbmc_project/logging/entr...</msg>
<status endtime="20170803 18:51:29.476" status="PASS" starttime="20170803 18:51:29.475"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>esel</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170803 18:51:29.476" level="INFO">${logpath} = /tmp/fspcibld/16652/obmc-robot/logs/20170803185128838414_TestsTestBasicPoweron/20170803185128838414_PowerOnTest/20170803185128838414_esel</msg>
<status endtime="20170803 18:51:29.476" status="PASS" starttime="20170803 18:51:29.476"></status>
</kw>
<kw library="OperatingSystem" name="Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${logpath}</arg>
</arguments>
<msg html="yes" timestamp="20170803 18:51:29.477" level="INFO">Created file '&lt;a href="file:///tmp/fspcibld/16652/obmc-robot/logs/20170803185128838414_TestsTestBasicPoweron/20170803185128838414_PowerOnTest/20170803185128838414_esel"&gt;/tmp/fspcibld/16652/obmc-robot/logs/20170803185128838414_TestsTestBasicPoweron/20170803185128838414_PowerOnTest/20170803185128838414_esel&lt;/a&gt;'.</msg>
<status endtime="20170803 18:51:29.477" status="PASS" starttime="20170803 18:51:29.476"></status>
</kw>
<kw type="for" name="${entry_path} IN [ @{esel_list} ]">
<kw type="foritem" name="${entry_path} = /xyz/openbmc_project/logging/entry/2">
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status endtime="20170803 18:51:29.478" status="PASS" starttime="20170803 18:51:29.477"></status>
</kw>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170803 18:51:29.482" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170803 18:51:29.482" status="PASS" starttime="20170803 18:51:29.481"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170803 18:51:29.483" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170803 18:51:29.483" status="PASS" starttime="20170803 18:51:29.482"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170803 18:51:29.483" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170803 18:51:29.483" status="PASS" starttime="20170803 18:51:29.483"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170803 18:51:29.484" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170803 18:51:29.484" status="PASS" starttime="20170803 18:51:29.483"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170803 18:51:29.661" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170803 18:51:29.661" status="PASS" starttime="20170803 18:51:29.485"></status>
</kw>
<msg timestamp="20170803 18:51:29.661" level="INFO">${status} = PASS</msg>
<msg timestamp="20170803 18:51:29.661" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:51:29.661" status="PASS" starttime="20170803 18:51:29.484"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170803 18:51:29.662" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:51:29.662" status="PASS" starttime="20170803 18:51:29.662"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:51:29.663" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:51:29.663" status="PASS" starttime="20170803 18:51:29.662"></status>
</kw>
<status endtime="20170803 18:51:29.663" status="PASS" starttime="20170803 18:51:29.480"></status>
</kw>
<status endtime="20170803 18:51:29.663" status="PASS" starttime="20170803 18:51:29.480"></status>
</kw>
<status endtime="20170803 18:51:29.663" status="PASS" starttime="20170803 18:51:29.479"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170803 18:51:29.664" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/2/attr/AdditionalData</msg>
<status endtime="20170803 18:51:29.664" status="PASS" starttime="20170803 18:51:29.663"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170803 18:51:29.664" status="PASS" starttime="20170803 18:51:29.664"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170803 18:51:29.746" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/2/attr/AdditionalData, headers=None json=None</msg>
<msg timestamp="20170803 18:51:29.746" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:51:29.746" status="PASS" starttime="20170803 18:51:29.664"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170803 18:51:29.746" status="PASS" starttime="20170803 18:51:29.746"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170803 18:51:29.747" level="INFO">Delete All Sessions</msg>
<status endtime="20170803 18:51:29.747" status="PASS" starttime="20170803 18:51:29.747"></status>
</kw>
<msg timestamp="20170803 18:51:29.747" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:51:29.747" status="PASS" starttime="20170803 18:51:29.479"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:51:29.748" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:51:29.748" status="PASS" starttime="20170803 18:51:29.747"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170803 18:51:29.748" level="INFO">To JSON using : content={
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170803 18:51:29.748" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170803 18:51:29.748" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': []}</msg>
<status endtime="20170803 18:51:29.748" status="PASS" starttime="20170803 18:51:29.748"></status>
</kw>
<msg timestamp="20170803 18:51:29.749" level="INFO">${esel_data} = []</msg>
<status endtime="20170803 18:51:29.749" status="PASS" starttime="20170803 18:51:29.478"></status>
</kw>
<kw library="BuiltIn" name="Get Length">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg timestamp="20170803 18:51:29.749" level="INFO">Length is 0</msg>
<msg timestamp="20170803 18:51:29.749" level="INFO">${length} = 0</msg>
<status endtime="20170803 18:51:29.749" status="PASS" starttime="20170803 18:51:29.749"></status>
</kw>
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<msg timestamp="20170803 18:51:29.750" level="INFO">Continuing for loop from the next iteration.</msg>
<status endtime="20170803 18:51:29.750" status="PASS" starttime="20170803 18:51:29.750"></status>
</kw>
<status endtime="20170803 18:51:29.750" status="PASS" starttime="20170803 18:51:29.477"></status>
</kw>
<kw type="foritem" name="${entry_path} = /xyz/openbmc_project/logging/entry/3">
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status endtime="20170803 18:51:29.751" status="PASS" starttime="20170803 18:51:29.751"></status>
</kw>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170803 18:51:29.755" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170803 18:51:29.755" status="PASS" starttime="20170803 18:51:29.755"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170803 18:51:29.756" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170803 18:51:29.756" status="PASS" starttime="20170803 18:51:29.756"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170803 18:51:29.756" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170803 18:51:29.756" status="PASS" starttime="20170803 18:51:29.756"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170803 18:51:29.757" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170803 18:51:29.757" status="PASS" starttime="20170803 18:51:29.757"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170803 18:51:30.040" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170803 18:51:30.040" status="PASS" starttime="20170803 18:51:29.758"></status>
</kw>
<msg timestamp="20170803 18:51:30.041" level="INFO">${status} = PASS</msg>
<msg timestamp="20170803 18:51:30.041" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:51:30.041" status="PASS" starttime="20170803 18:51:29.757"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170803 18:51:30.041" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:51:30.041" status="PASS" starttime="20170803 18:51:30.041"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:51:30.042" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:51:30.042" status="PASS" starttime="20170803 18:51:30.042"></status>
</kw>
<status endtime="20170803 18:51:30.042" status="PASS" starttime="20170803 18:51:29.754"></status>
</kw>
<status endtime="20170803 18:51:30.042" status="PASS" starttime="20170803 18:51:29.753"></status>
</kw>
<status endtime="20170803 18:51:30.042" status="PASS" starttime="20170803 18:51:29.752"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170803 18:51:30.043" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/3/attr/AdditionalData</msg>
<status endtime="20170803 18:51:30.043" status="PASS" starttime="20170803 18:51:30.043"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170803 18:51:30.044" status="PASS" starttime="20170803 18:51:30.043"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170803 18:51:30.144" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/3/attr/AdditionalData, headers=None json=None</msg>
<msg timestamp="20170803 18:51:30.144" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:51:30.144" status="PASS" starttime="20170803 18:51:30.044"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170803 18:51:30.145" status="PASS" starttime="20170803 18:51:30.145"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170803 18:51:30.145" level="INFO">Delete All Sessions</msg>
<status endtime="20170803 18:51:30.146" status="PASS" starttime="20170803 18:51:30.145"></status>
</kw>
<msg timestamp="20170803 18:51:30.146" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:51:30.146" status="PASS" starttime="20170803 18:51:29.752"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:51:30.146" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:51:30.146" status="PASS" starttime="20170803 18:51:30.146"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170803 18:51:30.147" level="INFO">To JSON using : content={
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170803 18:51:30.147" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170803 18:51:30.147" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': []}</msg>
<status endtime="20170803 18:51:30.147" status="PASS" starttime="20170803 18:51:30.147"></status>
</kw>
<msg timestamp="20170803 18:51:30.147" level="INFO">${esel_data} = []</msg>
<status endtime="20170803 18:51:30.147" status="PASS" starttime="20170803 18:51:29.751"></status>
</kw>
<kw library="BuiltIn" name="Get Length">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg timestamp="20170803 18:51:30.148" level="INFO">Length is 0</msg>
<msg timestamp="20170803 18:51:30.148" level="INFO">${length} = 0</msg>
<status endtime="20170803 18:51:30.148" status="PASS" starttime="20170803 18:51:30.148"></status>
</kw>
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<msg timestamp="20170803 18:51:30.149" level="INFO">Continuing for loop from the next iteration.</msg>
<status endtime="20170803 18:51:30.149" status="PASS" starttime="20170803 18:51:30.148"></status>
</kw>
<status endtime="20170803 18:51:30.149" status="PASS" starttime="20170803 18:51:29.750"></status>
</kw>
<kw type="foritem" name="${entry_path} = /xyz/openbmc_project/logging/entry/4">
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status endtime="20170803 18:51:30.150" status="PASS" starttime="20170803 18:51:30.149"></status>
</kw>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170803 18:51:30.153" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170803 18:51:30.154" status="PASS" starttime="20170803 18:51:30.153"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170803 18:51:30.154" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170803 18:51:30.154" status="PASS" starttime="20170803 18:51:30.154"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170803 18:51:30.155" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170803 18:51:30.155" status="PASS" starttime="20170803 18:51:30.155"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170803 18:51:30.156" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170803 18:51:30.156" status="PASS" starttime="20170803 18:51:30.155"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170803 18:51:30.342" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170803 18:51:30.342" status="PASS" starttime="20170803 18:51:30.156"></status>
</kw>
<msg timestamp="20170803 18:51:30.343" level="INFO">${status} = PASS</msg>
<msg timestamp="20170803 18:51:30.343" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:51:30.343" status="PASS" starttime="20170803 18:51:30.156"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170803 18:51:30.343" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:51:30.343" status="PASS" starttime="20170803 18:51:30.343"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:51:30.344" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:51:30.344" status="PASS" starttime="20170803 18:51:30.344"></status>
</kw>
<status endtime="20170803 18:51:30.344" status="PASS" starttime="20170803 18:51:30.153"></status>
</kw>
<status endtime="20170803 18:51:30.344" status="PASS" starttime="20170803 18:51:30.152"></status>
</kw>
<status endtime="20170803 18:51:30.344" status="PASS" starttime="20170803 18:51:30.151"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170803 18:51:30.345" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/4/attr/AdditionalData</msg>
<status endtime="20170803 18:51:30.345" status="PASS" starttime="20170803 18:51:30.345"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170803 18:51:30.346" status="PASS" starttime="20170803 18:51:30.345"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170803 18:51:30.427" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/4/attr/AdditionalData, headers=None json=None</msg>
<msg timestamp="20170803 18:51:30.427" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:51:30.427" status="PASS" starttime="20170803 18:51:30.346"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170803 18:51:30.428" status="PASS" starttime="20170803 18:51:30.427"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170803 18:51:30.428" level="INFO">Delete All Sessions</msg>
<status endtime="20170803 18:51:30.428" status="PASS" starttime="20170803 18:51:30.428"></status>
</kw>
<msg timestamp="20170803 18:51:30.429" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:51:30.429" status="PASS" starttime="20170803 18:51:30.151"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:51:30.429" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:51:30.429" status="PASS" starttime="20170803 18:51:30.429"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170803 18:51:30.430" level="INFO">To JSON using : content={
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170803 18:51:30.430" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170803 18:51:30.430" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': []}</msg>
<status endtime="20170803 18:51:30.430" status="PASS" starttime="20170803 18:51:30.430"></status>
</kw>
<msg timestamp="20170803 18:51:30.430" level="INFO">${esel_data} = []</msg>
<status endtime="20170803 18:51:30.430" status="PASS" starttime="20170803 18:51:30.150"></status>
</kw>
<kw library="BuiltIn" name="Get Length">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg timestamp="20170803 18:51:30.431" level="INFO">Length is 0</msg>
<msg timestamp="20170803 18:51:30.431" level="INFO">${length} = 0</msg>
<status endtime="20170803 18:51:30.431" status="PASS" starttime="20170803 18:51:30.431"></status>
</kw>
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<msg timestamp="20170803 18:51:30.432" level="INFO">Continuing for loop from the next iteration.</msg>
<status endtime="20170803 18:51:30.432" status="PASS" starttime="20170803 18:51:30.431"></status>
</kw>
<status endtime="20170803 18:51:30.432" status="PASS" starttime="20170803 18:51:30.149"></status>
</kw>
<kw type="foritem" name="${entry_path} = /xyz/openbmc_project/logging/entry/5">
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status endtime="20170803 18:51:30.433" status="PASS" starttime="20170803 18:51:30.432"></status>
</kw>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170803 18:51:30.436" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170803 18:51:30.436" status="PASS" starttime="20170803 18:51:30.436"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170803 18:51:30.437" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170803 18:51:30.437" status="PASS" starttime="20170803 18:51:30.437"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170803 18:51:30.438" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170803 18:51:30.438" status="PASS" starttime="20170803 18:51:30.437"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170803 18:51:30.438" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170803 18:51:30.438" status="PASS" starttime="20170803 18:51:30.438"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170803 18:51:30.614" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170803 18:51:30.614" status="PASS" starttime="20170803 18:51:30.439"></status>
</kw>
<msg timestamp="20170803 18:51:30.614" level="INFO">${status} = PASS</msg>
<msg timestamp="20170803 18:51:30.614" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:51:30.614" status="PASS" starttime="20170803 18:51:30.439"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170803 18:51:30.615" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:51:30.615" status="PASS" starttime="20170803 18:51:30.615"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:51:30.616" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:51:30.616" status="PASS" starttime="20170803 18:51:30.615"></status>
</kw>
<status endtime="20170803 18:51:30.616" status="PASS" starttime="20170803 18:51:30.435"></status>
</kw>
<status endtime="20170803 18:51:30.616" status="PASS" starttime="20170803 18:51:30.435"></status>
</kw>
<status endtime="20170803 18:51:30.616" status="PASS" starttime="20170803 18:51:30.434"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170803 18:51:30.617" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/5/attr/AdditionalData</msg>
<status endtime="20170803 18:51:30.617" status="PASS" starttime="20170803 18:51:30.617"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170803 18:51:30.617" status="PASS" starttime="20170803 18:51:30.617"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170803 18:51:30.701" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/5/attr/AdditionalData, headers=None json=None</msg>
<msg timestamp="20170803 18:51:30.701" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:51:30.701" status="PASS" starttime="20170803 18:51:30.618"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170803 18:51:30.702" status="PASS" starttime="20170803 18:51:30.702"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170803 18:51:30.702" level="INFO">Delete All Sessions</msg>
<status endtime="20170803 18:51:30.702" status="PASS" starttime="20170803 18:51:30.702"></status>
</kw>
<msg timestamp="20170803 18:51:30.703" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:51:30.703" status="PASS" starttime="20170803 18:51:30.433"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:51:30.703" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:51:30.703" status="PASS" starttime="20170803 18:51:30.703"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170803 18:51:30.704" level="INFO">To JSON using : content={
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170803 18:51:30.704" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170803 18:51:30.704" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': []}</msg>
<status endtime="20170803 18:51:30.704" status="PASS" starttime="20170803 18:51:30.703"></status>
</kw>
<msg timestamp="20170803 18:51:30.704" level="INFO">${esel_data} = []</msg>
<status endtime="20170803 18:51:30.704" status="PASS" starttime="20170803 18:51:30.433"></status>
</kw>
<kw library="BuiltIn" name="Get Length">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg timestamp="20170803 18:51:30.705" level="INFO">Length is 0</msg>
<msg timestamp="20170803 18:51:30.705" level="INFO">${length} = 0</msg>
<status endtime="20170803 18:51:30.705" status="PASS" starttime="20170803 18:51:30.705"></status>
</kw>
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<msg timestamp="20170803 18:51:30.705" level="INFO">Continuing for loop from the next iteration.</msg>
<status endtime="20170803 18:51:30.706" status="PASS" starttime="20170803 18:51:30.705"></status>
</kw>
<status endtime="20170803 18:51:30.706" status="PASS" starttime="20170803 18:51:30.432"></status>
</kw>
<kw type="foritem" name="${entry_path} = /xyz/openbmc_project/logging/entry/6">
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status endtime="20170803 18:51:30.706" status="PASS" starttime="20170803 18:51:30.706"></status>
</kw>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170803 18:51:30.710" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170803 18:51:30.710" status="PASS" starttime="20170803 18:51:30.710"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170803 18:51:30.711" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170803 18:51:30.711" status="PASS" starttime="20170803 18:51:30.711"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170803 18:51:30.712" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170803 18:51:30.712" status="PASS" starttime="20170803 18:51:30.711"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170803 18:51:30.712" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170803 18:51:30.712" status="PASS" starttime="20170803 18:51:30.712"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170803 18:51:31.054" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170803 18:51:31.054" status="PASS" starttime="20170803 18:51:30.713"></status>
</kw>
<msg timestamp="20170803 18:51:31.054" level="INFO">${status} = PASS</msg>
<msg timestamp="20170803 18:51:31.054" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:51:31.054" status="PASS" starttime="20170803 18:51:30.713"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170803 18:51:31.055" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:51:31.055" status="PASS" starttime="20170803 18:51:31.054"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:51:31.055" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:51:31.056" status="PASS" starttime="20170803 18:51:31.055"></status>
</kw>
<status endtime="20170803 18:51:31.056" status="PASS" starttime="20170803 18:51:30.709"></status>
</kw>
<status endtime="20170803 18:51:31.056" status="PASS" starttime="20170803 18:51:30.709"></status>
</kw>
<status endtime="20170803 18:51:31.056" status="PASS" starttime="20170803 18:51:30.708"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170803 18:51:31.056" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/6/attr/AdditionalData</msg>
<status endtime="20170803 18:51:31.056" status="PASS" starttime="20170803 18:51:31.056"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170803 18:51:31.057" status="PASS" starttime="20170803 18:51:31.057"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170803 18:51:31.224" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/6/attr/AdditionalData, headers=None json=None</msg>
<msg timestamp="20170803 18:51:31.224" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:51:31.224" status="PASS" starttime="20170803 18:51:31.058"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170803 18:51:31.224" status="PASS" starttime="20170803 18:51:31.224"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170803 18:51:31.225" level="INFO">Delete All Sessions</msg>
<status endtime="20170803 18:51:31.225" status="PASS" starttime="20170803 18:51:31.225"></status>
</kw>
<msg timestamp="20170803 18:51:31.225" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:51:31.225" status="PASS" starttime="20170803 18:51:30.707"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:51:31.226" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:51:31.226" status="PASS" starttime="20170803 18:51:31.225"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170803 18:51:31.226" level="INFO">To JSON using : content={
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170803 18:51:31.226" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170803 18:51:31.227" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': []}</msg>
<status endtime="20170803 18:51:31.227" status="PASS" starttime="20170803 18:51:31.226"></status>
</kw>
<msg timestamp="20170803 18:51:31.227" level="INFO">${esel_data} = []</msg>
<status endtime="20170803 18:51:31.227" status="PASS" starttime="20170803 18:51:30.707"></status>
</kw>
<kw library="BuiltIn" name="Get Length">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg timestamp="20170803 18:51:31.227" level="INFO">Length is 0</msg>
<msg timestamp="20170803 18:51:31.228" level="INFO">${length} = 0</msg>
<status endtime="20170803 18:51:31.228" status="PASS" starttime="20170803 18:51:31.227"></status>
</kw>
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<msg timestamp="20170803 18:51:31.229" level="INFO">Continuing for loop from the next iteration.</msg>
<status endtime="20170803 18:51:31.229" status="PASS" starttime="20170803 18:51:31.228"></status>
</kw>
<status endtime="20170803 18:51:31.229" status="PASS" starttime="20170803 18:51:30.706"></status>
</kw>
<status endtime="20170803 18:51:31.229" status="PASS" starttime="20170803 18:51:29.477"></status>
</kw>
<kw library="OperatingSystem" name="Run">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>which eSEL.pl</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<msg timestamp="20170803 18:51:31.233" level="INFO">Running command 'which eSEL.pl 2&gt;&amp;1'.</msg>
<msg timestamp="20170803 18:51:31.237" level="INFO">${out} = </msg>
<status endtime="20170803 18:51:31.237" status="PASS" starttime="20170803 18:51:31.230"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${out}</arg>
<arg>eSEL.pl</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Contain">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${out}</arg>
<arg>eSEL.pl</arg>
</arguments>
<msg timestamp="20170803 18:51:31.241" level="FAIL">'' does not contain 'eSEL.pl'</msg>
<status endtime="20170803 18:51:31.241" status="FAIL" starttime="20170803 18:51:31.240"></status>
</kw>
<msg timestamp="20170803 18:51:31.241" level="INFO">${status} = False</msg>
<status endtime="20170803 18:51:31.241" status="PASS" starttime="20170803 18:51:31.239"></status>
</kw>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
</arguments>
<msg timestamp="20170803 18:51:31.242" level="INFO">Returning from the enclosing user keyword.</msg>
<status endtime="20170803 18:51:31.242" status="PASS" starttime="20170803 18:51:31.241"></status>
</kw>
<status endtime="20170803 18:51:31.243" status="PASS" starttime="20170803 18:51:29.088"></status>
</kw>
<status endtime="20170803 18:51:31.243" status="PASS" starttime="20170803 18:51:29.063"></status>
</kw>
<status endtime="20170803 18:51:31.243" status="PASS" starttime="20170803 18:51:29.060"></status>
</kw>
<status endtime="20170803 18:51:31.243" status="PASS" starttime="20170803 18:51:29.060"></status>
</kw>
<kw type="foritem" name="${method} = ('OS FFDC', 'OS FFDC Files')">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="Collections" name="List Should Contain Value">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status endtime="20170803 18:51:31.246" status="PASS" starttime="20170803 18:51:31.246"></status>
</kw>
<msg timestamp="20170803 18:51:31.246" level="INFO">${status} = PASS</msg>
<msg timestamp="20170803 18:51:31.246" level="INFO">${ret_values} = None</msg>
<status endtime="20170803 18:51:31.246" status="PASS" starttime="20170803 18:51:31.245"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status endtime="20170803 18:51:31.247" status="PASS" starttime="20170803 18:51:31.246"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="OS FFDC Files">
<doc>Get the command list and iterate</doc>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${OS_HOST}' == '${EMPTY}'</arg>
<arg>No OS Host Provided</arg>
</arguments>
<msg timestamp="20170803 18:51:31.278" level="INFO">Returning from the enclosing user keyword.</msg>
<status endtime="20170803 18:51:31.278" status="PASS" starttime="20170803 18:51:31.277"></status>
</kw>
<status endtime="20170803 18:51:31.278" status="PASS" starttime="20170803 18:51:31.277"></status>
</kw>
<status endtime="20170803 18:51:31.278" status="PASS" starttime="20170803 18:51:31.247"></status>
</kw>
<status endtime="20170803 18:51:31.278" status="PASS" starttime="20170803 18:51:31.244"></status>
</kw>
<status endtime="20170803 18:51:31.278" status="PASS" starttime="20170803 18:51:31.243"></status>
</kw>
<kw type="foritem" name="${method} = ('Core Files', 'SCP Coredump Files')">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="Collections" name="List Should Contain Value">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status endtime="20170803 18:51:31.280" status="PASS" starttime="20170803 18:51:31.280"></status>
</kw>
<msg timestamp="20170803 18:51:31.280" level="INFO">${status} = PASS</msg>
<msg timestamp="20170803 18:51:31.280" level="INFO">${ret_values} = None</msg>
<status endtime="20170803 18:51:31.280" status="PASS" starttime="20170803 18:51:31.279"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status endtime="20170803 18:51:31.281" status="PASS" starttime="20170803 18:51:31.281"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="SCP Coredump Files">
<doc>Copy core dump file from BMC to local system.</doc>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>ls /tmp/core_*</arg>
</arguments>
<assign>
<var>${core_files}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20170803 18:51:31.342" level="INFO">index=1
host=9.3.21.61
newline=

encoding=UTF-8
term_type=vt100
height=24
path_separator=/
width=80
alias=bmc_connection
timeout=25 seconds
prompt=# 
port=22</msg>
<msg timestamp="20170803 18:51:31.342" level="INFO">Executing command 'ls /tmp/core_*'.</msg>
<msg timestamp="20170803 18:51:31.391" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170803 18:51:31.402" level="INFO">${core_files} = /tmp/core_phosphor-hwmon-.2916</msg>
<msg timestamp="20170803 18:51:31.402" level="INFO">${stderr} = </msg>
<msg timestamp="20170803 18:51:31.402" level="INFO">${rc} = 0</msg>
<status endtime="20170803 18:51:31.402" status="PASS" starttime="20170803 18:51:31.306"></status>
</kw>
<kw library="String" name="Split String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${core_files}</arg>
</arguments>
<assign>
<var>@{core_list}</var>
</assign>
<msg timestamp="20170803 18:51:31.403" level="INFO">@{core_list} = [ /tmp/core_phosphor-hwmon-.2916 ]</msg>
<status endtime="20170803 18:51:31.403" status="PASS" starttime="20170803 18:51:31.402"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key U">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>Open Connection for SCP</arg>
</arguments>
<kw library="connection_client" name="Open Connection for SCP">
<kw library="BuiltIn" name="Import Library">
<doc>Imports a library with the given name and optional arguments.</doc>
<arguments>
<arg>SCPLibrary</arg>
<arg>WITH NAME</arg>
<arg>scp</arg>
</arguments>
<status endtime="20170803 18:51:31.420" status="PASS" starttime="20170803 18:51:31.413"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' == '${EMPTY}'</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw library="scp" name="Open Connection">
<doc>Opens a new SCP connection to the given host.</doc>
<arguments>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<status endtime="20170803 18:51:32.089" status="PASS" starttime="20170803 18:51:31.421"></status>
</kw>
<status endtime="20170803 18:51:32.089" status="PASS" starttime="20170803 18:51:31.421"></status>
</kw>
<status endtime="20170803 18:51:32.089" status="PASS" starttime="20170803 18:51:31.420"></status>
</kw>
<status endtime="20170803 18:51:32.089" status="PASS" starttime="20170803 18:51:31.413"></status>
</kw>
<status endtime="20170803 18:51:32.090" status="PASS" starttime="20170803 18:51:31.403"></status>
</kw>
<kw type="for" name="${index} IN [ @{core_list} ]">
<kw type="foritem" name="${index} = /tmp/core_phosphor-hwmon-.2916">
<kw library="scp" name="Get File">
<doc>Downloads a file from the remote machine to the local machine.</doc>
<arguments>
<arg>${index}</arg>
<arg>${LOG_PREFIX}${index.lstrip("/tmp/")}</arg>
</arguments>
<status endtime="20170803 18:51:32.402" status="PASS" starttime="20170803 18:51:32.090"></status>
</kw>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>rm ${index}</arg>
</arguments>
<msg timestamp="20170803 18:51:32.435" level="INFO">index=1
host=9.3.21.61
newline=

encoding=UTF-8
term_type=vt100
height=24
path_separator=/
width=80
alias=bmc_connection
timeout=25 seconds
prompt=# 
port=22</msg>
<msg timestamp="20170803 18:51:32.435" level="INFO">Executing command 'rm /tmp/core_phosphor-hwmon-.2916'.</msg>
<msg timestamp="20170803 18:51:32.482" level="INFO">Command exited with return code 0.</msg>
<status endtime="20170803 18:51:32.493" status="PASS" starttime="20170803 18:51:32.402"></status>
</kw>
<status endtime="20170803 18:51:32.493" status="PASS" starttime="20170803 18:51:32.090"></status>
</kw>
<status endtime="20170803 18:51:32.493" status="PASS" starttime="20170803 18:51:32.090"></status>
</kw>
<status endtime="20170803 18:51:32.494" status="PASS" starttime="20170803 18:51:31.305"></status>
</kw>
<status endtime="20170803 18:51:32.494" status="PASS" starttime="20170803 18:51:31.281"></status>
</kw>
<status endtime="20170803 18:51:32.494" status="PASS" starttime="20170803 18:51:31.279"></status>
</kw>
<status endtime="20170803 18:51:32.494" status="PASS" starttime="20170803 18:51:31.278"></status>
</kw>
<kw type="foritem" name="${method} = ('FFDC Generic Report', 'BMC FFDC Manifest')">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="Collections" name="List Should Contain Value">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status endtime="20170803 18:51:32.496" status="PASS" starttime="20170803 18:51:32.496"></status>
</kw>
<msg timestamp="20170803 18:51:32.496" level="INFO">${status} = PASS</msg>
<msg timestamp="20170803 18:51:32.496" level="INFO">${ret_values} = None</msg>
<status endtime="20170803 18:51:32.496" status="PASS" starttime="20170803 18:51:32.495"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status endtime="20170803 18:51:32.497" status="PASS" starttime="20170803 18:51:32.496"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="BMC FFDC Manifest">
<doc>Get the commands index for the FFDC_BMC_CMD,</doc>
<kw library="openbmc_ffdc_list" name="Get Ffdc Cmd Index">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170803 18:51:32.522" level="INFO">@{entries} = [ APPLICATION DATA | BMC DATA | DRIVER INFO ]</msg>
<status endtime="20170803 18:51:32.522" status="PASS" starttime="20170803 18:51:32.522"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = APPLICATION DATA">
<kw library="openbmc_ffdc_methods" name="Iterate BMC Command List Pairs">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Bmc Cmd">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170803 18:51:32.523" level="INFO">@{cmd_list} = [ ('BMC state', '/usr/sbin/obmcutil state') ]</msg>
<status endtime="20170803 18:51:32.523" status="PASS" starttime="20170803 18:51:32.523"></status>
</kw>
<kw library="BuiltIn" name="Set Suite Variable">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170803 18:51:32.532" level="INFO">${ENTRY_INDEX} = APPLICATION DATA</msg>
<status endtime="20170803 18:51:32.532" status="PASS" starttime="20170803 18:51:32.523"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC state', '/usr/sbin/obmcutil state')">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170803 18:51:32.535" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/16652/obmc-robot/logs/20170803185128838414_TestsTestBasicPoweron/20170803185128838414_PowerOnTest/20170803185128838414_BMC_general.txt"&gt;/tmp/fspcibld/16652/obmc-robot/logs/20170803185128838414_TestsTestBasicPoweron/20170803185128838414_PowerOnTest/20170803185128838414_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170803 18:51:32.535" status="PASS" starttime="20170803 18:51:32.535"></status>
</kw>
<status endtime="20170803 18:51:32.536" status="PASS" starttime="20170803 18:51:32.534"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170803 18:51:32.537" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/16652/obmc-robot/logs/20170803185128838414_TestsTestBasicPoweron/20170803185128838414_PowerOnTest/20170803185128838414_BMC_general.txt"&gt;/tmp/fspcibld/16652/obmc-robot/logs/20170803185128838414_TestsTestBasicPoweron/20170803185128838414_PowerOnTest/20170803185128838414_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170803 18:51:32.537" status="PASS" starttime="20170803 18:51:32.537"></status>
</kw>
<status endtime="20170803 18:51:32.537" status="PASS" starttime="20170803 18:51:32.536"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170803 18:51:32.538" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/16652/obmc-robot/logs/20170803185128838414_TestsTestBasicPoweron/20170803185128838414_PowerOnTest/20170803185128838414_BMC_general.txt"&gt;/tmp/fspcibld/16652/obmc-robot/logs/20170803185128838414_TestsTestBasicPoweron/20170803185128838414_PowerOnTest/20170803185128838414_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170803 18:51:32.538" status="PASS" starttime="20170803 18:51:32.538"></status>
</kw>
<status endtime="20170803 18:51:32.539" status="PASS" starttime="20170803 18:51:32.537"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170803 18:51:32.540" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/16652/obmc-robot/logs/20170803185128838414_TestsTestBasicPoweron/20170803185128838414_PowerOnTest/20170803185128838414_BMC_general.txt"&gt;/tmp/fspcibld/16652/obmc-robot/logs/20170803185128838414_TestsTestBasicPoweron/20170803185128838414_PowerOnTest/20170803185128838414_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170803 18:51:32.540" status="PASS" starttime="20170803 18:51:32.539"></status>
</kw>
<status endtime="20170803 18:51:32.540" status="PASS" starttime="20170803 18:51:32.539"></status>
</kw>
<status endtime="20170803 18:51:32.540" status="PASS" starttime="20170803 18:51:32.534"></status>
</kw>
<status endtime="20170803 18:51:32.540" status="PASS" starttime="20170803 18:51:32.533"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170803 18:51:32.541" level="INFO">${cmd_buf} = BMC Execute Command  /usr/sbin/obmcutil state  ignore_err=1</msg>
<status endtime="20170803 18:51:32.541" status="PASS" starttime="20170803 18:51:32.540"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>/usr/sbin/obmcutil state</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170803 18:51:32.614" level="INFO">index=1
host=9.3.21.61
newline=

encoding=UTF-8
term_type=vt100
height=24
path_separator=/
width=80
alias=bmc_connection
timeout=25 seconds
prompt=# 
port=22</msg>
<msg timestamp="20170803 18:51:32.614" level="INFO">Executing command '/usr/sbin/obmcutil state'.</msg>
<msg timestamp="20170803 18:51:34.031" level="INFO">Command exited with return code 0.</msg>
<status endtime="20170803 18:51:34.031" status="PASS" starttime="20170803 18:51:32.572"></status>
</kw>
<msg timestamp="20170803 18:51:34.031" level="INFO">${status} = PASS</msg>
<msg timestamp="20170803 18:51:34.031" level="INFO">${ret_values} = (u'CurrentBMCState:    xyz.openbmc_project.State.BMC.BMCState.Ready\nCurrentPowerState:  xyz.openbmc_project.State.Chassis.PowerState.On\nCurrentHostState:   xyz.openbmc_project.State.Host.HostState.Q...</msg>
<status endtime="20170803 18:51:34.032" status="PASS" starttime="20170803 18:51:32.541"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170803 18:51:34.032" level="INFO">${stdout} = CurrentBMCState:    xyz.openbmc_project.State.BMC.BMCState.Ready
CurrentPowerState:  xyz.openbmc_project.State.Chassis.PowerState.On
CurrentHostState:   xyz.openbmc_project.State.Host.HostState.Quiesc...</msg>
<status endtime="20170803 18:51:34.032" status="PASS" starttime="20170803 18:51:34.032"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170803 18:51:34.033" level="INFO">${stderr} = </msg>
<status endtime="20170803 18:51:34.033" status="PASS" starttime="20170803 18:51:34.033"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170803 18:51:34.039" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/16652/obmc-robot/logs/20170803185128838414_TestsTestBasicPoweron/20170803185128838414_PowerOnTest/20170803185128838414_BMC_general.txt"&gt;/tmp/fspcibld/16652/obmc-robot/logs/20170803185128838414_TestsTestBasicPoweron/20170803185128838414_PowerOnTest/20170803185128838414_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170803 18:51:34.039" status="PASS" starttime="20170803 18:51:34.039"></status>
</kw>
<status endtime="20170803 18:51:34.040" status="PASS" starttime="20170803 18:51:34.038"></status>
</kw>
<status endtime="20170803 18:51:34.040" status="PASS" starttime="20170803 18:51:34.033"></status>
</kw>
<status endtime="20170803 18:51:34.040" status="PASS" starttime="20170803 18:51:32.532"></status>
</kw>
<status endtime="20170803 18:51:34.040" status="PASS" starttime="20170803 18:51:32.532"></status>
</kw>
<status endtime="20170803 18:51:34.040" status="PASS" starttime="20170803 18:51:32.532"></status>
</kw>
<status endtime="20170803 18:51:34.040" status="PASS" starttime="20170803 18:51:32.522"></status>
</kw>
<status endtime="20170803 18:51:34.040" status="PASS" starttime="20170803 18:51:32.522"></status>
</kw>
<kw type="foritem" name="${index} = BMC DATA">
<kw library="openbmc_ffdc_methods" name="Iterate BMC Command List Pairs">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Bmc Cmd">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170803 18:51:34.041" level="INFO">@{cmd_list} = [ ('BMC OS', 'uname -a') | ('BMC Uptime', 'uptime') | ('BMC File System Disk Space Usage', 'df -hT') ]</msg>
<status endtime="20170803 18:51:34.041" status="PASS" starttime="20170803 18:51:34.041"></status>
</kw>
<kw library="BuiltIn" name="Set Suite Variable">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170803 18:51:34.042" level="INFO">${ENTRY_INDEX} = BMC DATA</msg>
<status endtime="20170803 18:51:34.042" status="PASS" starttime="20170803 18:51:34.041"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC OS', 'uname -a')">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170803 18:51:34.045" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/16652/obmc-robot/logs/20170803185128838414_TestsTestBasicPoweron/20170803185128838414_PowerOnTest/20170803185128838414_BMC_general.txt"&gt;/tmp/fspcibld/16652/obmc-robot/logs/20170803185128838414_TestsTestBasicPoweron/20170803185128838414_PowerOnTest/20170803185128838414_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170803 18:51:34.045" status="PASS" starttime="20170803 18:51:34.045"></status>
</kw>
<status endtime="20170803 18:51:34.045" status="PASS" starttime="20170803 18:51:34.044"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170803 18:51:34.047" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/16652/obmc-robot/logs/20170803185128838414_TestsTestBasicPoweron/20170803185128838414_PowerOnTest/20170803185128838414_BMC_general.txt"&gt;/tmp/fspcibld/16652/obmc-robot/logs/20170803185128838414_TestsTestBasicPoweron/20170803185128838414_PowerOnTest/20170803185128838414_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170803 18:51:34.047" status="PASS" starttime="20170803 18:51:34.046"></status>
</kw>
<status endtime="20170803 18:51:34.047" status="PASS" starttime="20170803 18:51:34.045"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170803 18:51:34.048" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/16652/obmc-robot/logs/20170803185128838414_TestsTestBasicPoweron/20170803185128838414_PowerOnTest/20170803185128838414_BMC_general.txt"&gt;/tmp/fspcibld/16652/obmc-robot/logs/20170803185128838414_TestsTestBasicPoweron/20170803185128838414_PowerOnTest/20170803185128838414_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170803 18:51:34.048" status="PASS" starttime="20170803 18:51:34.048"></status>
</kw>
<status endtime="20170803 18:51:34.048" status="PASS" starttime="20170803 18:51:34.047"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170803 18:51:34.049" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/16652/obmc-robot/logs/20170803185128838414_TestsTestBasicPoweron/20170803185128838414_PowerOnTest/20170803185128838414_BMC_general.txt"&gt;/tmp/fspcibld/16652/obmc-robot/logs/20170803185128838414_TestsTestBasicPoweron/20170803185128838414_PowerOnTest/20170803185128838414_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170803 18:51:34.050" status="PASS" starttime="20170803 18:51:34.049"></status>
</kw>
<status endtime="20170803 18:51:34.050" status="PASS" starttime="20170803 18:51:34.048"></status>
</kw>
<status endtime="20170803 18:51:34.050" status="PASS" starttime="20170803 18:51:34.044"></status>
</kw>
<status endtime="20170803 18:51:34.050" status="PASS" starttime="20170803 18:51:34.043"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170803 18:51:34.051" level="INFO">${cmd_buf} = BMC Execute Command  uname -a  ignore_err=1</msg>
<status endtime="20170803 18:51:34.051" status="PASS" starttime="20170803 18:51:34.050"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>uname -a</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170803 18:51:34.119" level="INFO">index=1
host=9.3.21.61
newline=

encoding=UTF-8
term_type=vt100
height=24
path_separator=/
width=80
alias=bmc_connection
timeout=25 seconds
prompt=# 
port=22</msg>
<msg timestamp="20170803 18:51:34.120" level="INFO">Executing command 'uname -a'.</msg>
<msg timestamp="20170803 18:51:34.201" level="INFO">Command exited with return code 0.</msg>
<status endtime="20170803 18:51:34.201" status="PASS" starttime="20170803 18:51:34.082"></status>
</kw>
<msg timestamp="20170803 18:51:34.201" level="INFO">${status} = PASS</msg>
<msg timestamp="20170803 18:51:34.201" level="INFO">${ret_values} = (u'Linux witherspoon 4.10.17-03afe5775baf06c3037d62cc2a15628079af38c9 #1 Thu Aug 3 18:18:33 UTC 2017 armv6l GNU/Linux', u'', 0)</msg>
<status endtime="20170803 18:51:34.201" status="PASS" starttime="20170803 18:51:34.051"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170803 18:51:34.202" level="INFO">${stdout} = Linux witherspoon 4.10.17-03afe5775baf06c3037d62cc2a15628079af38c9 #1 Thu Aug 3 18:18:33 UTC 2017 armv6l GNU/Linux</msg>
<status endtime="20170803 18:51:34.202" status="PASS" starttime="20170803 18:51:34.201"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170803 18:51:34.202" level="INFO">${stderr} = </msg>
<status endtime="20170803 18:51:34.202" status="PASS" starttime="20170803 18:51:34.202"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170803 18:51:34.209" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/16652/obmc-robot/logs/20170803185128838414_TestsTestBasicPoweron/20170803185128838414_PowerOnTest/20170803185128838414_BMC_general.txt"&gt;/tmp/fspcibld/16652/obmc-robot/logs/20170803185128838414_TestsTestBasicPoweron/20170803185128838414_PowerOnTest/20170803185128838414_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170803 18:51:34.209" status="PASS" starttime="20170803 18:51:34.208"></status>
</kw>
<status endtime="20170803 18:51:34.209" status="PASS" starttime="20170803 18:51:34.207"></status>
</kw>
<status endtime="20170803 18:51:34.209" status="PASS" starttime="20170803 18:51:34.202"></status>
</kw>
<status endtime="20170803 18:51:34.209" status="PASS" starttime="20170803 18:51:34.042"></status>
</kw>
<status endtime="20170803 18:51:34.209" status="PASS" starttime="20170803 18:51:34.042"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC Uptime', 'uptime')">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170803 18:51:34.212" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/16652/obmc-robot/logs/20170803185128838414_TestsTestBasicPoweron/20170803185128838414_PowerOnTest/20170803185128838414_BMC_general.txt"&gt;/tmp/fspcibld/16652/obmc-robot/logs/20170803185128838414_TestsTestBasicPoweron/20170803185128838414_PowerOnTest/20170803185128838414_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170803 18:51:34.212" status="PASS" starttime="20170803 18:51:34.212"></status>
</kw>
<status endtime="20170803 18:51:34.212" status="PASS" starttime="20170803 18:51:34.211"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170803 18:51:34.213" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/16652/obmc-robot/logs/20170803185128838414_TestsTestBasicPoweron/20170803185128838414_PowerOnTest/20170803185128838414_BMC_general.txt"&gt;/tmp/fspcibld/16652/obmc-robot/logs/20170803185128838414_TestsTestBasicPoweron/20170803185128838414_PowerOnTest/20170803185128838414_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170803 18:51:34.214" status="PASS" starttime="20170803 18:51:34.213"></status>
</kw>
<status endtime="20170803 18:51:34.214" status="PASS" starttime="20170803 18:51:34.212"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170803 18:51:34.215" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/16652/obmc-robot/logs/20170803185128838414_TestsTestBasicPoweron/20170803185128838414_PowerOnTest/20170803185128838414_BMC_general.txt"&gt;/tmp/fspcibld/16652/obmc-robot/logs/20170803185128838414_TestsTestBasicPoweron/20170803185128838414_PowerOnTest/20170803185128838414_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170803 18:51:34.215" status="PASS" starttime="20170803 18:51:34.214"></status>
</kw>
<status endtime="20170803 18:51:34.215" status="PASS" starttime="20170803 18:51:34.214"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170803 18:51:34.216" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/16652/obmc-robot/logs/20170803185128838414_TestsTestBasicPoweron/20170803185128838414_PowerOnTest/20170803185128838414_BMC_general.txt"&gt;/tmp/fspcibld/16652/obmc-robot/logs/20170803185128838414_TestsTestBasicPoweron/20170803185128838414_PowerOnTest/20170803185128838414_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170803 18:51:34.216" status="PASS" starttime="20170803 18:51:34.216"></status>
</kw>
<status endtime="20170803 18:51:34.216" status="PASS" starttime="20170803 18:51:34.215"></status>
</kw>
<status endtime="20170803 18:51:34.216" status="PASS" starttime="20170803 18:51:34.211"></status>
</kw>
<status endtime="20170803 18:51:34.216" status="PASS" starttime="20170803 18:51:34.210"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170803 18:51:34.217" level="INFO">${cmd_buf} = BMC Execute Command  uptime  ignore_err=1</msg>
<status endtime="20170803 18:51:34.217" status="PASS" starttime="20170803 18:51:34.217"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>uptime</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170803 18:51:34.286" level="INFO">index=1
host=9.3.21.61
newline=

encoding=UTF-8
term_type=vt100
height=24
path_separator=/
width=80
alias=bmc_connection
timeout=25 seconds
prompt=# 
port=22</msg>
<msg timestamp="20170803 18:51:34.287" level="INFO">Executing command 'uptime'.</msg>
<msg timestamp="20170803 18:51:34.363" level="INFO">Command exited with return code 0.</msg>
<status endtime="20170803 18:51:34.363" status="PASS" starttime="20170803 18:51:34.249"></status>
</kw>
<msg timestamp="20170803 18:51:34.363" level="INFO">${status} = PASS</msg>
<msg timestamp="20170803 18:51:34.364" level="INFO">${ret_values} = (u' 18:51:37 up 21 min,  load average: 0.43, 0.81, 0.95', u'', 0)</msg>
<status endtime="20170803 18:51:34.364" status="PASS" starttime="20170803 18:51:34.217"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170803 18:51:34.364" level="INFO">${stdout} =  18:51:37 up 21 min,  load average: 0.43, 0.81, 0.95</msg>
<status endtime="20170803 18:51:34.364" status="PASS" starttime="20170803 18:51:34.364"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170803 18:51:34.365" level="INFO">${stderr} = </msg>
<status endtime="20170803 18:51:34.365" status="PASS" starttime="20170803 18:51:34.365"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170803 18:51:34.371" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/16652/obmc-robot/logs/20170803185128838414_TestsTestBasicPoweron/20170803185128838414_PowerOnTest/20170803185128838414_BMC_general.txt"&gt;/tmp/fspcibld/16652/obmc-robot/logs/20170803185128838414_TestsTestBasicPoweron/20170803185128838414_PowerOnTest/20170803185128838414_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170803 18:51:34.371" status="PASS" starttime="20170803 18:51:34.371"></status>
</kw>
<status endtime="20170803 18:51:34.372" status="PASS" starttime="20170803 18:51:34.370"></status>
</kw>
<status endtime="20170803 18:51:34.372" status="PASS" starttime="20170803 18:51:34.365"></status>
</kw>
<status endtime="20170803 18:51:34.372" status="PASS" starttime="20170803 18:51:34.209"></status>
</kw>
<status endtime="20170803 18:51:34.372" status="PASS" starttime="20170803 18:51:34.209"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC File System Disk Space Usage', 'df -hT')">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170803 18:51:34.375" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/16652/obmc-robot/logs/20170803185128838414_TestsTestBasicPoweron/20170803185128838414_PowerOnTest/20170803185128838414_BMC_general.txt"&gt;/tmp/fspcibld/16652/obmc-robot/logs/20170803185128838414_TestsTestBasicPoweron/20170803185128838414_PowerOnTest/20170803185128838414_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170803 18:51:34.375" status="PASS" starttime="20170803 18:51:34.374"></status>
</kw>
<status endtime="20170803 18:51:34.375" status="PASS" starttime="20170803 18:51:34.374"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170803 18:51:34.376" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/16652/obmc-robot/logs/20170803185128838414_TestsTestBasicPoweron/20170803185128838414_PowerOnTest/20170803185128838414_BMC_general.txt"&gt;/tmp/fspcibld/16652/obmc-robot/logs/20170803185128838414_TestsTestBasicPoweron/20170803185128838414_PowerOnTest/20170803185128838414_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170803 18:51:34.376" status="PASS" starttime="20170803 18:51:34.376"></status>
</kw>
<status endtime="20170803 18:51:34.376" status="PASS" starttime="20170803 18:51:34.375"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170803 18:51:34.377" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/16652/obmc-robot/logs/20170803185128838414_TestsTestBasicPoweron/20170803185128838414_PowerOnTest/20170803185128838414_BMC_general.txt"&gt;/tmp/fspcibld/16652/obmc-robot/logs/20170803185128838414_TestsTestBasicPoweron/20170803185128838414_PowerOnTest/20170803185128838414_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170803 18:51:34.377" status="PASS" starttime="20170803 18:51:34.377"></status>
</kw>
<status endtime="20170803 18:51:34.377" status="PASS" starttime="20170803 18:51:34.376"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170803 18:51:34.379" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/16652/obmc-robot/logs/20170803185128838414_TestsTestBasicPoweron/20170803185128838414_PowerOnTest/20170803185128838414_BMC_general.txt"&gt;/tmp/fspcibld/16652/obmc-robot/logs/20170803185128838414_TestsTestBasicPoweron/20170803185128838414_PowerOnTest/20170803185128838414_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170803 18:51:34.379" status="PASS" starttime="20170803 18:51:34.378"></status>
</kw>
<status endtime="20170803 18:51:34.379" status="PASS" starttime="20170803 18:51:34.378"></status>
</kw>
<status endtime="20170803 18:51:34.379" status="PASS" starttime="20170803 18:51:34.373"></status>
</kw>
<status endtime="20170803 18:51:34.379" status="PASS" starttime="20170803 18:51:34.373"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170803 18:51:34.380" level="INFO">${cmd_buf} = BMC Execute Command  df -hT  ignore_err=1</msg>
<status endtime="20170803 18:51:34.380" status="PASS" starttime="20170803 18:51:34.379"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>df -hT</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170803 18:51:34.446" level="INFO">index=1
host=9.3.21.61
newline=

encoding=UTF-8
term_type=vt100
height=24
path_separator=/
width=80
alias=bmc_connection
timeout=25 seconds
prompt=# 
port=22</msg>
<msg timestamp="20170803 18:51:34.447" level="INFO">Executing command 'df -hT'.</msg>
<msg timestamp="20170803 18:51:34.503" level="INFO">Command exited with return code 0.</msg>
<status endtime="20170803 18:51:34.503" status="PASS" starttime="20170803 18:51:34.411"></status>
</kw>
<msg timestamp="20170803 18:51:34.504" level="INFO">${status} = PASS</msg>
<msg timestamp="20170803 18:51:34.504" level="INFO">${ret_values} = (u'Filesystem           Type            Size      Used Available Use% Mounted on\ndev                  devtmpfs      210.2M         0    210.2M   0% /dev\ntmpfs                tmpfs         211.1M    ...</msg>
<status endtime="20170803 18:51:34.504" status="PASS" starttime="20170803 18:51:34.380"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170803 18:51:34.504" level="INFO">${stdout} = Filesystem           Type            Size      Used Available Use% Mounted on
dev                  devtmpfs      210.2M         0    210.2M   0% /dev
tmpfs                tmpfs         211.1M     14.1...</msg>
<status endtime="20170803 18:51:34.504" status="PASS" starttime="20170803 18:51:34.504"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170803 18:51:34.505" level="INFO">${stderr} = </msg>
<status endtime="20170803 18:51:34.505" status="PASS" starttime="20170803 18:51:34.505"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170803 18:51:34.511" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/16652/obmc-robot/logs/20170803185128838414_TestsTestBasicPoweron/20170803185128838414_PowerOnTest/20170803185128838414_BMC_general.txt"&gt;/tmp/fspcibld/16652/obmc-robot/logs/20170803185128838414_TestsTestBasicPoweron/20170803185128838414_PowerOnTest/20170803185128838414_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170803 18:51:34.511" status="PASS" starttime="20170803 18:51:34.511"></status>
</kw>
<status endtime="20170803 18:51:34.512" status="PASS" starttime="20170803 18:51:34.510"></status>
</kw>
<status endtime="20170803 18:51:34.512" status="PASS" starttime="20170803 18:51:34.505"></status>
</kw>
<status endtime="20170803 18:51:34.512" status="PASS" starttime="20170803 18:51:34.372"></status>
</kw>
<status endtime="20170803 18:51:34.512" status="PASS" starttime="20170803 18:51:34.372"></status>
</kw>
<status endtime="20170803 18:51:34.512" status="PASS" starttime="20170803 18:51:34.042"></status>
</kw>
<status endtime="20170803 18:51:34.512" status="PASS" starttime="20170803 18:51:34.040"></status>
</kw>
<status endtime="20170803 18:51:34.512" status="PASS" starttime="20170803 18:51:34.040"></status>
</kw>
<kw type="foritem" name="${index} = DRIVER INFO">
<kw library="openbmc_ffdc_methods" name="Iterate BMC Command List Pairs">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Bmc Cmd">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170803 18:51:34.513" level="INFO">@{cmd_list} = [ ('FW Level', 'cat /etc/os-release') ]</msg>
<status endtime="20170803 18:51:34.513" status="PASS" starttime="20170803 18:51:34.513"></status>
</kw>
<kw library="BuiltIn" name="Set Suite Variable">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170803 18:51:34.514" level="INFO">${ENTRY_INDEX} = DRIVER INFO</msg>
<status endtime="20170803 18:51:34.514" status="PASS" starttime="20170803 18:51:34.513"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('FW Level', 'cat /etc/os-release')">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170803 18:51:34.517" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/16652/obmc-robot/logs/20170803185128838414_TestsTestBasicPoweron/20170803185128838414_PowerOnTest/20170803185128838414_BMC_general.txt"&gt;/tmp/fspcibld/16652/obmc-robot/logs/20170803185128838414_TestsTestBasicPoweron/20170803185128838414_PowerOnTest/20170803185128838414_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170803 18:51:34.517" status="PASS" starttime="20170803 18:51:34.516"></status>
</kw>
<status endtime="20170803 18:51:34.517" status="PASS" starttime="20170803 18:51:34.516"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170803 18:51:34.518" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/16652/obmc-robot/logs/20170803185128838414_TestsTestBasicPoweron/20170803185128838414_PowerOnTest/20170803185128838414_BMC_general.txt"&gt;/tmp/fspcibld/16652/obmc-robot/logs/20170803185128838414_TestsTestBasicPoweron/20170803185128838414_PowerOnTest/20170803185128838414_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170803 18:51:34.518" status="PASS" starttime="20170803 18:51:34.518"></status>
</kw>
<status endtime="20170803 18:51:34.518" status="PASS" starttime="20170803 18:51:34.517"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170803 18:51:34.519" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/16652/obmc-robot/logs/20170803185128838414_TestsTestBasicPoweron/20170803185128838414_PowerOnTest/20170803185128838414_BMC_general.txt"&gt;/tmp/fspcibld/16652/obmc-robot/logs/20170803185128838414_TestsTestBasicPoweron/20170803185128838414_PowerOnTest/20170803185128838414_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170803 18:51:34.520" status="PASS" starttime="20170803 18:51:34.519"></status>
</kw>
<status endtime="20170803 18:51:34.520" status="PASS" starttime="20170803 18:51:34.519"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170803 18:51:34.521" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/16652/obmc-robot/logs/20170803185128838414_TestsTestBasicPoweron/20170803185128838414_PowerOnTest/20170803185128838414_BMC_general.txt"&gt;/tmp/fspcibld/16652/obmc-robot/logs/20170803185128838414_TestsTestBasicPoweron/20170803185128838414_PowerOnTest/20170803185128838414_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170803 18:51:34.521" status="PASS" starttime="20170803 18:51:34.521"></status>
</kw>
<status endtime="20170803 18:51:34.521" status="PASS" starttime="20170803 18:51:34.520"></status>
</kw>
<status endtime="20170803 18:51:34.521" status="PASS" starttime="20170803 18:51:34.515"></status>
</kw>
<status endtime="20170803 18:51:34.521" status="PASS" starttime="20170803 18:51:34.515"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170803 18:51:34.522" level="INFO">${cmd_buf} = BMC Execute Command  cat /etc/os-release  ignore_err=1</msg>
<status endtime="20170803 18:51:34.522" status="PASS" starttime="20170803 18:51:34.522"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /etc/os-release</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170803 18:51:34.592" level="INFO">index=1
host=9.3.21.61
newline=

encoding=UTF-8
term_type=vt100
height=24
path_separator=/
width=80
alias=bmc_connection
timeout=25 seconds
prompt=# 
port=22</msg>
<msg timestamp="20170803 18:51:34.592" level="INFO">Executing command 'cat /etc/os-release'.</msg>
<msg timestamp="20170803 18:51:34.659" level="INFO">Command exited with return code 0.</msg>
<status endtime="20170803 18:51:34.659" status="PASS" starttime="20170803 18:51:34.556"></status>
</kw>
<msg timestamp="20170803 18:51:34.659" level="INFO">${status} = PASS</msg>
<msg timestamp="20170803 18:51:34.659" level="INFO">${ret_values} = (u'ID="openbmc-phosphor"\nNAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"\nVERSION="v1.99.8-182"\nVERSION_ID="v1.99.8-182-g631adef"\nPRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC...</msg>
<status endtime="20170803 18:51:34.659" status="PASS" starttime="20170803 18:51:34.522"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170803 18:51:34.660" level="INFO">${stdout} = ID="openbmc-phosphor"
NAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"
VERSION="v1.99.8-182"
VERSION_ID="v1.99.8-182-g631adef"
PRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC Projec...</msg>
<status endtime="20170803 18:51:34.660" status="PASS" starttime="20170803 18:51:34.659"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170803 18:51:34.660" level="INFO">${stderr} = </msg>
<status endtime="20170803 18:51:34.660" status="PASS" starttime="20170803 18:51:34.660"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170803 18:51:34.667" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/16652/obmc-robot/logs/20170803185128838414_TestsTestBasicPoweron/20170803185128838414_PowerOnTest/20170803185128838414_BMC_general.txt"&gt;/tmp/fspcibld/16652/obmc-robot/logs/20170803185128838414_TestsTestBasicPoweron/20170803185128838414_PowerOnTest/20170803185128838414_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170803 18:51:34.667" status="PASS" starttime="20170803 18:51:34.666"></status>
</kw>
<status endtime="20170803 18:51:34.667" status="PASS" starttime="20170803 18:51:34.666"></status>
</kw>
<status endtime="20170803 18:51:34.667" status="PASS" starttime="20170803 18:51:34.661"></status>
</kw>
<status endtime="20170803 18:51:34.667" status="PASS" starttime="20170803 18:51:34.514"></status>
</kw>
<status endtime="20170803 18:51:34.667" status="PASS" starttime="20170803 18:51:34.514"></status>
</kw>
<status endtime="20170803 18:51:34.667" status="PASS" starttime="20170803 18:51:34.514"></status>
</kw>
<status endtime="20170803 18:51:34.667" status="PASS" starttime="20170803 18:51:34.512"></status>
</kw>
<status endtime="20170803 18:51:34.667" status="PASS" starttime="20170803 18:51:34.512"></status>
</kw>
<status endtime="20170803 18:51:34.667" status="PASS" starttime="20170803 18:51:32.522"></status>
</kw>
<status endtime="20170803 18:51:34.667" status="PASS" starttime="20170803 18:51:32.521"></status>
</kw>
<status endtime="20170803 18:51:34.667" status="PASS" starttime="20170803 18:51:32.497"></status>
</kw>
<status endtime="20170803 18:51:34.668" status="PASS" starttime="20170803 18:51:32.494"></status>
</kw>
<status endtime="20170803 18:51:34.668" status="PASS" starttime="20170803 18:51:32.494"></status>
</kw>
<kw type="foritem" name="${method} = ('Get Request FFDC', 'BMC FFDC Get Requests')">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="Collections" name="List Should Contain Value">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status endtime="20170803 18:51:34.670" status="PASS" starttime="20170803 18:51:34.669"></status>
</kw>
<msg timestamp="20170803 18:51:34.670" level="INFO">${status} = PASS</msg>
<msg timestamp="20170803 18:51:34.670" level="INFO">${ret_values} = None</msg>
<status endtime="20170803 18:51:34.670" status="PASS" starttime="20170803 18:51:34.669"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status endtime="20170803 18:51:34.670" status="PASS" starttime="20170803 18:51:34.670"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="BMC FFDC Get Requests">
<doc>Get the command list and iterate</doc>
<kw library="openbmc_ffdc_list" name="Get Ffdc Get Request Index">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170803 18:51:34.702" level="INFO">@{entries} = [ GET REQUESTS ]</msg>
<status endtime="20170803 18:51:34.702" status="PASS" starttime="20170803 18:51:34.702"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = GET REQUESTS">
<kw library="openbmc_ffdc_methods" name="Log FFDC Get Requests">
<doc>Create file in current FFDC log directory.</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Get Request">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170803 18:51:34.703" level="INFO">@{cmd_list} = [ ('BMC_inventory', '/xyz/openbmc_project/inventory/enumerate') | ('BMC_led', '/org/openbmc/records/events/enumerate') | ('BMC_elog', '/xyz/openbmc_project/logging/entry/enumerate') | ('BMC_sensor_lis...</msg>
<status endtime="20170803 18:51:34.703" status="PASS" starttime="20170803 18:51:34.703"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC_inventory', '/xyz/openbmc_project/inventory/enumerate')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170803 18:51:34.704" level="INFO">${logpath} = /tmp/fspcibld/16652/obmc-robot/logs/20170803185128838414_TestsTestBasicPoweron/20170803185128838414_PowerOnTest/20170803185128838414_BMC_inventory.txt</msg>
<status endtime="20170803 18:51:34.704" status="PASS" starttime="20170803 18:51:34.704"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170803 18:51:34.707" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170803 18:51:34.708" status="PASS" starttime="20170803 18:51:34.707"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170803 18:51:34.708" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170803 18:51:34.708" status="PASS" starttime="20170803 18:51:34.708"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170803 18:51:34.709" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170803 18:51:34.709" status="PASS" starttime="20170803 18:51:34.709"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170803 18:51:34.710" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170803 18:51:34.710" status="PASS" starttime="20170803 18:51:34.709"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170803 18:51:34.966" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170803 18:51:34.966" status="PASS" starttime="20170803 18:51:34.711"></status>
</kw>
<msg timestamp="20170803 18:51:34.966" level="INFO">${status} = PASS</msg>
<msg timestamp="20170803 18:51:34.966" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:51:34.966" status="PASS" starttime="20170803 18:51:34.710"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170803 18:51:34.967" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:51:34.967" status="PASS" starttime="20170803 18:51:34.967"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:51:34.968" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:51:34.968" status="PASS" starttime="20170803 18:51:34.967"></status>
</kw>
<status endtime="20170803 18:51:34.968" status="PASS" starttime="20170803 18:51:34.706"></status>
</kw>
<status endtime="20170803 18:51:34.968" status="PASS" starttime="20170803 18:51:34.706"></status>
</kw>
<status endtime="20170803 18:51:34.968" status="PASS" starttime="20170803 18:51:34.705"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170803 18:51:34.969" level="INFO">${base_uri} = /xyz/openbmc_project/inventory/enumerate</msg>
<status endtime="20170803 18:51:34.969" status="PASS" starttime="20170803 18:51:34.968"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170803 18:51:34.969" status="PASS" starttime="20170803 18:51:34.969"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170803 18:51:35.192" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/inventory/enumerate, headers=None json=None</msg>
<msg timestamp="20170803 18:51:35.193" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:51:35.193" status="PASS" starttime="20170803 18:51:34.970"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170803 18:51:35.194" status="PASS" starttime="20170803 18:51:35.193"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170803 18:51:35.194" level="INFO">Delete All Sessions</msg>
<status endtime="20170803 18:51:35.194" status="PASS" starttime="20170803 18:51:35.194"></status>
</kw>
<msg timestamp="20170803 18:51:35.194" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:51:35.194" status="PASS" starttime="20170803 18:51:34.704"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:51:35.195" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:51:35.195" status="PASS" starttime="20170803 18:51:35.195"></status>
</kw>
<msg timestamp="20170803 18:51:35.195" level="INFO">${status} = True</msg>
<status endtime="20170803 18:51:35.195" status="PASS" starttime="20170803 18:51:35.195"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status endtime="20170803 18:51:35.196" status="PASS" starttime="20170803 18:51:35.196"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170803 18:51:35.197" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/inventory/system/chassis": {
      "AirCooled": 1, 
      "WaterCooled": 0
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc": {
      "BuildDate": "", 
      "FieldReplaceable": 0, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01DH118", 
      "Present": 1, 
      "PrettyName": "BMC PLANAR  ", 
      "SerialNumber": "000000000000"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc/ethernet": {
      "FieldReplaceable": 0, 
      "MACAddress": "00:00:00:00:00:00", 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan0": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": "fan0"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan1": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": "fan1"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan2": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": "fan2"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan3": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": "fan3"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/power_supply0": {
      "Present": 1, 
      "PrettyName": "power_supply0"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/power_supply1": {
      "Present": 1, 
      "PrettyName": "power_supply1"
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170803 18:51:35.197" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170803 18:51:35.197" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/inventory/system/chassis": {
            "AirCooled": 1,
            "WaterCooled": 0
        },
        "/xyz/openbmc_project/inventory/system/chassis/mo...</msg>
<status endtime="20170803 18:51:35.197" status="PASS" starttime="20170803 18:51:35.196"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170803 18:51:35.199" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/16652/obmc-robot/logs/20170803185128838414_TestsTestBasicPoweron/20170803185128838414_PowerOnTest/20170803185128838414_BMC_inventory.txt"&gt;/tmp/fspcibld/16652/obmc-robot/logs/20170803185128838414_TestsTestBasicPoweron/20170803185128838414_PowerOnTest/20170803185128838414_BMC_inventory.txt&lt;/a&gt;'.</msg>
<status endtime="20170803 18:51:35.199" status="PASS" starttime="20170803 18:51:35.198"></status>
</kw>
<status endtime="20170803 18:51:35.199" status="PASS" starttime="20170803 18:51:35.197"></status>
</kw>
<status endtime="20170803 18:51:35.199" status="PASS" starttime="20170803 18:51:34.704"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_led', '/org/openbmc/records/events/enumerate')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170803 18:51:35.200" level="INFO">${logpath} = /tmp/fspcibld/16652/obmc-robot/logs/20170803185128838414_TestsTestBasicPoweron/20170803185128838414_PowerOnTest/20170803185128838414_BMC_led.txt</msg>
<status endtime="20170803 18:51:35.200" status="PASS" starttime="20170803 18:51:35.199"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170803 18:51:35.203" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170803 18:51:35.204" status="PASS" starttime="20170803 18:51:35.202"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170803 18:51:35.204" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170803 18:51:35.205" status="PASS" starttime="20170803 18:51:35.204"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170803 18:51:35.205" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170803 18:51:35.205" status="PASS" starttime="20170803 18:51:35.205"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170803 18:51:35.206" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170803 18:51:35.206" status="PASS" starttime="20170803 18:51:35.205"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170803 18:51:35.434" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170803 18:51:35.434" status="PASS" starttime="20170803 18:51:35.206"></status>
</kw>
<msg timestamp="20170803 18:51:35.434" level="INFO">${status} = PASS</msg>
<msg timestamp="20170803 18:51:35.434" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:51:35.434" status="PASS" starttime="20170803 18:51:35.206"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170803 18:51:35.435" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:51:35.435" status="PASS" starttime="20170803 18:51:35.435"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:51:35.436" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:51:35.436" status="PASS" starttime="20170803 18:51:35.435"></status>
</kw>
<status endtime="20170803 18:51:35.436" status="PASS" starttime="20170803 18:51:35.202"></status>
</kw>
<status endtime="20170803 18:51:35.436" status="PASS" starttime="20170803 18:51:35.201"></status>
</kw>
<status endtime="20170803 18:51:35.436" status="PASS" starttime="20170803 18:51:35.201"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170803 18:51:35.437" level="INFO">${base_uri} = /org/openbmc/records/events/enumerate</msg>
<status endtime="20170803 18:51:35.437" status="PASS" starttime="20170803 18:51:35.436"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170803 18:51:35.437" status="PASS" starttime="20170803 18:51:35.437"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170803 18:51:35.503" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/records/events/enumerate, headers=None json=None</msg>
<msg timestamp="20170803 18:51:35.503" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status endtime="20170803 18:51:35.503" status="PASS" starttime="20170803 18:51:35.438"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170803 18:51:35.504" status="PASS" starttime="20170803 18:51:35.503"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170803 18:51:35.504" level="INFO">Delete All Sessions</msg>
<status endtime="20170803 18:51:35.504" status="PASS" starttime="20170803 18:51:35.504"></status>
</kw>
<msg timestamp="20170803 18:51:35.504" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status endtime="20170803 18:51:35.504" status="PASS" starttime="20170803 18:51:35.200"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:51:35.506" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170803 18:51:35.506" level="FAIL">404 != 200</msg>
<status endtime="20170803 18:51:35.506" status="FAIL" starttime="20170803 18:51:35.505"></status>
</kw>
<msg timestamp="20170803 18:51:35.506" level="INFO">${status} = False</msg>
<status endtime="20170803 18:51:35.506" status="PASS" starttime="20170803 18:51:35.505"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw library="BuiltIn" name="Continue For Loop">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg timestamp="20170803 18:51:35.508" level="INFO">Continuing for loop from the next iteration.</msg>
<status endtime="20170803 18:51:35.508" status="PASS" starttime="20170803 18:51:35.508"></status>
</kw>
<status endtime="20170803 18:51:35.508" status="PASS" starttime="20170803 18:51:35.507"></status>
</kw>
<status endtime="20170803 18:51:35.508" status="PASS" starttime="20170803 18:51:35.199"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_elog', '/xyz/openbmc_project/logging/entry/enumerate')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170803 18:51:35.509" level="INFO">${logpath} = /tmp/fspcibld/16652/obmc-robot/logs/20170803185128838414_TestsTestBasicPoweron/20170803185128838414_PowerOnTest/20170803185128838414_BMC_elog.txt</msg>
<status endtime="20170803 18:51:35.509" status="PASS" starttime="20170803 18:51:35.509"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170803 18:51:35.512" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170803 18:51:35.513" status="PASS" starttime="20170803 18:51:35.512"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170803 18:51:35.513" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170803 18:51:35.513" status="PASS" starttime="20170803 18:51:35.513"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170803 18:51:35.514" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170803 18:51:35.514" status="PASS" starttime="20170803 18:51:35.514"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170803 18:51:35.515" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170803 18:51:35.515" status="PASS" starttime="20170803 18:51:35.514"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170803 18:51:35.705" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170803 18:51:35.705" status="PASS" starttime="20170803 18:51:35.515"></status>
</kw>
<msg timestamp="20170803 18:51:35.706" level="INFO">${status} = PASS</msg>
<msg timestamp="20170803 18:51:35.706" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:51:35.706" status="PASS" starttime="20170803 18:51:35.515"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170803 18:51:35.706" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:51:35.706" status="PASS" starttime="20170803 18:51:35.706"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:51:35.707" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:51:35.707" status="PASS" starttime="20170803 18:51:35.707"></status>
</kw>
<status endtime="20170803 18:51:35.707" status="PASS" starttime="20170803 18:51:35.511"></status>
</kw>
<status endtime="20170803 18:51:35.707" status="PASS" starttime="20170803 18:51:35.511"></status>
</kw>
<status endtime="20170803 18:51:35.707" status="PASS" starttime="20170803 18:51:35.510"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170803 18:51:35.708" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/enumerate</msg>
<status endtime="20170803 18:51:35.708" status="PASS" starttime="20170803 18:51:35.708"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170803 18:51:35.709" status="PASS" starttime="20170803 18:51:35.708"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170803 18:51:35.919" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/enumerate, headers=None json=None</msg>
<msg timestamp="20170803 18:51:35.919" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:51:35.919" status="PASS" starttime="20170803 18:51:35.709"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170803 18:51:35.920" status="PASS" starttime="20170803 18:51:35.919"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170803 18:51:35.920" level="INFO">Delete All Sessions</msg>
<status endtime="20170803 18:51:35.920" status="PASS" starttime="20170803 18:51:35.920"></status>
</kw>
<msg timestamp="20170803 18:51:35.920" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:51:35.920" status="PASS" starttime="20170803 18:51:35.510"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:51:35.921" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:51:35.922" status="PASS" starttime="20170803 18:51:35.921"></status>
</kw>
<msg timestamp="20170803 18:51:35.922" level="INFO">${status} = True</msg>
<status endtime="20170803 18:51:35.922" status="PASS" starttime="20170803 18:51:35.921"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status endtime="20170803 18:51:35.922" status="PASS" starttime="20170803 18:51:35.922"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170803 18:51:35.923" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/logging/entry/2": {
      "AdditionalData": [], 
      "Id": 2, 
      "Message": "xyz.openbmc_project.Software.Version.Error.ManifestFileFailure", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1501785156646, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/3": {
      "AdditionalData": [], 
      "Id": 3, 
      "Message": "org.open_power.Host.Error.WatchdogTimedOut", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1501785736225, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/4": {
      "AdditionalData": [], 
      "Id": 4, 
      "Message": "org.open_power.Host.Error.WatchdogTimedOut", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1501785799884, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/5": {
      "AdditionalData": [], 
      "Id": 5, 
      "Message": "org.open_power.Host.Error.WatchdogTimedOut", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1501785866613, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/6": {
      "AdditionalData": [], 
      "Id": 6, 
      "Message": "org.open_power.Host.Error.WatchdogTimedOut", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1501785937252, 
      "associations": []
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170803 18:51:35.923" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170803 18:51:35.923" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/logging/entry/2": {
            "AdditionalData": [],
            "Id": 2,
            "Message": "xyz.openbmc_project.Software.Version.Error.ManifestFile...</msg>
<status endtime="20170803 18:51:35.923" status="PASS" starttime="20170803 18:51:35.923"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170803 18:51:35.925" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/16652/obmc-robot/logs/20170803185128838414_TestsTestBasicPoweron/20170803185128838414_PowerOnTest/20170803185128838414_BMC_elog.txt"&gt;/tmp/fspcibld/16652/obmc-robot/logs/20170803185128838414_TestsTestBasicPoweron/20170803185128838414_PowerOnTest/20170803185128838414_BMC_elog.txt&lt;/a&gt;'.</msg>
<status endtime="20170803 18:51:35.925" status="PASS" starttime="20170803 18:51:35.924"></status>
</kw>
<status endtime="20170803 18:51:35.925" status="PASS" starttime="20170803 18:51:35.924"></status>
</kw>
<status endtime="20170803 18:51:35.925" status="PASS" starttime="20170803 18:51:35.508"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_sensor_list', '/org/openbmc/sensors/enumerate')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170803 18:51:35.926" level="INFO">${logpath} = /tmp/fspcibld/16652/obmc-robot/logs/20170803185128838414_TestsTestBasicPoweron/20170803185128838414_PowerOnTest/20170803185128838414_BMC_sensor_list.txt</msg>
<status endtime="20170803 18:51:35.926" status="PASS" starttime="20170803 18:51:35.925"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170803 18:51:35.929" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170803 18:51:35.929" status="PASS" starttime="20170803 18:51:35.928"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170803 18:51:35.930" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170803 18:51:35.930" status="PASS" starttime="20170803 18:51:35.930"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170803 18:51:35.930" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170803 18:51:35.931" status="PASS" starttime="20170803 18:51:35.930"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170803 18:51:35.931" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170803 18:51:35.931" status="PASS" starttime="20170803 18:51:35.931"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170803 18:51:36.209" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170803 18:51:36.209" status="PASS" starttime="20170803 18:51:35.932"></status>
</kw>
<msg timestamp="20170803 18:51:36.209" level="INFO">${status} = PASS</msg>
<msg timestamp="20170803 18:51:36.209" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:51:36.209" status="PASS" starttime="20170803 18:51:35.931"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170803 18:51:36.210" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:51:36.210" status="PASS" starttime="20170803 18:51:36.210"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:51:36.211" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:51:36.211" status="PASS" starttime="20170803 18:51:36.210"></status>
</kw>
<status endtime="20170803 18:51:36.211" status="PASS" starttime="20170803 18:51:35.928"></status>
</kw>
<status endtime="20170803 18:51:36.211" status="PASS" starttime="20170803 18:51:35.927"></status>
</kw>
<status endtime="20170803 18:51:36.211" status="PASS" starttime="20170803 18:51:35.927"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170803 18:51:36.212" level="INFO">${base_uri} = /org/openbmc/sensors/enumerate</msg>
<status endtime="20170803 18:51:36.212" status="PASS" starttime="20170803 18:51:36.212"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170803 18:51:36.213" status="PASS" starttime="20170803 18:51:36.213"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170803 18:51:36.405" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/enumerate, headers=None json=None</msg>
<msg timestamp="20170803 18:51:36.406" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:51:36.406" status="PASS" starttime="20170803 18:51:36.214"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170803 18:51:36.406" status="PASS" starttime="20170803 18:51:36.406"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170803 18:51:36.407" level="INFO">Delete All Sessions</msg>
<status endtime="20170803 18:51:36.407" status="PASS" starttime="20170803 18:51:36.407"></status>
</kw>
<msg timestamp="20170803 18:51:36.407" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:51:36.407" status="PASS" starttime="20170803 18:51:35.926"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:51:36.408" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:51:36.408" status="PASS" starttime="20170803 18:51:36.408"></status>
</kw>
<msg timestamp="20170803 18:51:36.408" level="INFO">${status} = True</msg>
<status endtime="20170803 18:51:36.408" status="PASS" starttime="20170803 18:51:36.407"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status endtime="20170803 18:51:36.409" status="PASS" starttime="20170803 18:51:36.409"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170803 18:51:36.410" level="INFO">To JSON using : content={
  "data": {
    "/org/openbmc/sensors/host/BootCount": {
      "error": 0, 
      "units": "", 
      "value": 3
    }, 
    "/org/openbmc/sensors/host/BootProgress": {
      "error": 0, 
      "units": "", 
      "value": "Off"
    }, 
    "/org/openbmc/sensors/host/OperatingSystemStatus": {
      "error": 0, 
      "units": "", 
      "value": "Off"
    }, 
    "/org/openbmc/sensors/host/PowerSupplyDerating": {
      "error": 0, 
      "units": "", 
      "value": 10
    }, 
    "/org/openbmc/sensors/host/PowerSupplyRedundancy": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/TurboAllowed": {
      "error": 0, 
      "units": "", 
      "value": 0
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170803 18:51:36.410" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170803 18:51:36.410" level="INFO">${jsondata} = {
    "data": {
        "/org/openbmc/sensors/host/BootCount": {
            "error": 0,
            "units": "",
            "value": 3
        },
        "/org/openbmc/sensors/host/BootProgress": {
...</msg>
<status endtime="20170803 18:51:36.410" status="PASS" starttime="20170803 18:51:36.409"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170803 18:51:36.411" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/16652/obmc-robot/logs/20170803185128838414_TestsTestBasicPoweron/20170803185128838414_PowerOnTest/20170803185128838414_BMC_sensor_list.txt"&gt;/tmp/fspcibld/16652/obmc-robot/logs/20170803185128838414_TestsTestBasicPoweron/20170803185128838414_PowerOnTest/20170803185128838414_BMC_sensor_list.txt&lt;/a&gt;'.</msg>
<status endtime="20170803 18:51:36.411" status="PASS" starttime="20170803 18:51:36.411"></status>
</kw>
<status endtime="20170803 18:51:36.411" status="PASS" starttime="20170803 18:51:36.410"></status>
</kw>
<status endtime="20170803 18:51:36.412" status="PASS" starttime="20170803 18:51:35.925"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_record_log', '/org/openbmc/control/led/enumerate')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170803 18:51:36.412" level="INFO">${logpath} = /tmp/fspcibld/16652/obmc-robot/logs/20170803185128838414_TestsTestBasicPoweron/20170803185128838414_PowerOnTest/20170803185128838414_BMC_record_log.txt</msg>
<status endtime="20170803 18:51:36.412" status="PASS" starttime="20170803 18:51:36.412"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170803 18:51:36.416" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170803 18:51:36.416" status="PASS" starttime="20170803 18:51:36.415"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170803 18:51:36.417" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170803 18:51:36.417" status="PASS" starttime="20170803 18:51:36.417"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170803 18:51:36.418" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170803 18:51:36.418" status="PASS" starttime="20170803 18:51:36.418"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170803 18:51:36.419" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170803 18:51:36.419" status="PASS" starttime="20170803 18:51:36.419"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170803 18:51:36.644" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170803 18:51:36.644" status="PASS" starttime="20170803 18:51:36.420"></status>
</kw>
<msg timestamp="20170803 18:51:36.644" level="INFO">${status} = PASS</msg>
<msg timestamp="20170803 18:51:36.644" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:51:36.644" status="PASS" starttime="20170803 18:51:36.420"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170803 18:51:36.645" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:51:36.645" status="PASS" starttime="20170803 18:51:36.645"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:51:36.646" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:51:36.646" status="PASS" starttime="20170803 18:51:36.645"></status>
</kw>
<status endtime="20170803 18:51:36.646" status="PASS" starttime="20170803 18:51:36.414"></status>
</kw>
<status endtime="20170803 18:51:36.646" status="PASS" starttime="20170803 18:51:36.414"></status>
</kw>
<status endtime="20170803 18:51:36.646" status="PASS" starttime="20170803 18:51:36.413"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170803 18:51:36.647" level="INFO">${base_uri} = /org/openbmc/control/led/enumerate</msg>
<status endtime="20170803 18:51:36.647" status="PASS" starttime="20170803 18:51:36.646"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170803 18:51:36.647" status="PASS" starttime="20170803 18:51:36.647"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170803 18:51:36.690" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/led/enumerate, headers=None json=None</msg>
<msg timestamp="20170803 18:51:36.690" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status endtime="20170803 18:51:36.690" status="PASS" starttime="20170803 18:51:36.648"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170803 18:51:36.691" status="PASS" starttime="20170803 18:51:36.690"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170803 18:51:36.691" level="INFO">Delete All Sessions</msg>
<status endtime="20170803 18:51:36.691" status="PASS" starttime="20170803 18:51:36.691"></status>
</kw>
<msg timestamp="20170803 18:51:36.692" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status endtime="20170803 18:51:36.692" status="PASS" starttime="20170803 18:51:36.412"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:51:36.693" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170803 18:51:36.693" level="FAIL">404 != 200</msg>
<status endtime="20170803 18:51:36.693" status="FAIL" starttime="20170803 18:51:36.692"></status>
</kw>
<msg timestamp="20170803 18:51:36.693" level="INFO">${status} = False</msg>
<status endtime="20170803 18:51:36.693" status="PASS" starttime="20170803 18:51:36.692"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw library="BuiltIn" name="Continue For Loop">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg timestamp="20170803 18:51:36.694" level="INFO">Continuing for loop from the next iteration.</msg>
<status endtime="20170803 18:51:36.694" status="PASS" starttime="20170803 18:51:36.694"></status>
</kw>
<status endtime="20170803 18:51:36.694" status="PASS" starttime="20170803 18:51:36.693"></status>
</kw>
<status endtime="20170803 18:51:36.694" status="PASS" starttime="20170803 18:51:36.412"></status>
</kw>
<status endtime="20170803 18:51:36.694" status="PASS" starttime="20170803 18:51:34.703"></status>
</kw>
<status endtime="20170803 18:51:36.694" status="PASS" starttime="20170803 18:51:34.702"></status>
</kw>
<status endtime="20170803 18:51:36.694" status="PASS" starttime="20170803 18:51:34.702"></status>
</kw>
<status endtime="20170803 18:51:36.695" status="PASS" starttime="20170803 18:51:34.702"></status>
</kw>
<status endtime="20170803 18:51:36.695" status="PASS" starttime="20170803 18:51:34.701"></status>
</kw>
<status endtime="20170803 18:51:36.695" status="PASS" starttime="20170803 18:51:34.671"></status>
</kw>
<status endtime="20170803 18:51:36.695" status="PASS" starttime="20170803 18:51:34.668"></status>
</kw>
<status endtime="20170803 18:51:36.695" status="PASS" starttime="20170803 18:51:34.668"></status>
</kw>
<kw type="foritem" name="${method} = ('BMC Specific Files', 'BMC FFDC Files')">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="Collections" name="List Should Contain Value">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status endtime="20170803 18:51:36.697" status="PASS" starttime="20170803 18:51:36.696"></status>
</kw>
<msg timestamp="20170803 18:51:36.697" level="INFO">${status} = PASS</msg>
<msg timestamp="20170803 18:51:36.697" level="INFO">${ret_values} = None</msg>
<status endtime="20170803 18:51:36.697" status="PASS" starttime="20170803 18:51:36.696"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status endtime="20170803 18:51:36.697" status="PASS" starttime="20170803 18:51:36.697"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="BMC FFDC Files">
<doc>Get the command list and iterate</doc>
<kw library="openbmc_ffdc_list" name="Get Ffdc File Index">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170803 18:51:36.725" level="INFO">@{entries} = [ BMC FILES ]</msg>
<status endtime="20170803 18:51:36.725" status="PASS" starttime="20170803 18:51:36.725"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC FILES">
<kw library="openbmc_ffdc_methods" name="Create File and Write Data">
<doc>Create files to current FFDC log directory,</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Bmc File">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170803 18:51:36.726" level="INFO">@{cmd_list} = [ ('BMC_proc_fd_active_list', 'ls -Al /proc/*/fd/') | ('BMC_meminfo', 'cat /proc/meminfo') | ('BMC_procinfo', 'cat /proc/cpuinfo') | ('BMC_dmesg', 'dmesg') | ('BMC_proc_list', 'top -n 1 -b') | ('BMC_j...</msg>
<status endtime="20170803 18:51:36.726" status="PASS" starttime="20170803 18:51:36.726"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC_proc_fd_active_list', 'ls -Al /proc/*/fd/')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170803 18:51:36.727" level="INFO">${logpath} = /tmp/fspcibld/16652/obmc-robot/logs/20170803185128838414_TestsTestBasicPoweron/20170803185128838414_PowerOnTest/20170803185128838414_BMC_proc_fd_active_list.txt</msg>
<status endtime="20170803 18:51:36.727" status="PASS" starttime="20170803 18:51:36.727"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status endtime="20170803 18:51:36.729" status="PASS" starttime="20170803 18:51:36.728"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170803 18:51:36.730" level="INFO">${cmd_buf} = BMC Execute Command  ls -Al /proc/*/fd/  ignore_err=1</msg>
<status endtime="20170803 18:51:36.730" status="PASS" starttime="20170803 18:51:36.729"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>ls -Al /proc/*/fd/</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170803 18:51:36.797" level="INFO">index=1
host=9.3.21.61
newline=

encoding=UTF-8
term_type=vt100
height=24
path_separator=/
width=80
alias=bmc_connection
timeout=25 seconds
prompt=# 
port=22</msg>
<msg timestamp="20170803 18:51:36.797" level="INFO">Executing command 'ls -Al /proc/*/fd/'.</msg>
<msg timestamp="20170803 18:51:37.439" level="INFO">Command exited with return code 0.</msg>
<status endtime="20170803 18:51:37.439" status="PASS" starttime="20170803 18:51:36.761"></status>
</kw>
<msg timestamp="20170803 18:51:37.440" level="INFO">${status} = PASS</msg>
<msg timestamp="20170803 18:51:37.441" level="INFO">${ret_values} = (u'/proc/1/fd/:\ntotal 0\nlrwx------    1 root     root            64 Aug  3 18:51 0 -&gt; /dev/null\nlrwx------    1 root     root            64 Aug  3 18:51 1 -&gt; /dev/null\nlr-x------    1 root     roo...</msg>
<status endtime="20170803 18:51:37.441" status="PASS" starttime="20170803 18:51:36.730"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170803 18:51:37.442" level="INFO">${stdout} = /proc/1/fd/:
total 0
lrwx------    1 root     root            64 Aug  3 18:51 0 -&gt; /dev/null
lrwx------    1 root     root            64 Aug  3 18:51 1 -&gt; /dev/null
lr-x------    1 root     root      ...</msg>
<status endtime="20170803 18:51:37.442" status="PASS" starttime="20170803 18:51:37.441"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170803 18:51:37.442" level="INFO">${stderr} = ls: /proc/3383/fd/3: cannot read link: No such file or directory
ls: /proc/self/fd/3: cannot read link: No such file or directory
ls: /proc/thread-self/fd/3: cannot read link: No such file or director...</msg>
<status endtime="20170803 18:51:37.442" status="PASS" starttime="20170803 18:51:37.442"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170803 18:51:37.449" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/16652/obmc-robot/logs/20170803185128838414_TestsTestBasicPoweron/20170803185128838414_PowerOnTest/20170803185128838414_BMC_proc_fd_active_list.txt"&gt;/tmp/fspcibld/16652/obmc-robot/logs/20170803185128838414_TestsTestBasicPoweron/20170803185128838414_PowerOnTest/20170803185128838414_BMC_proc_fd_active_list.txt&lt;/a&gt;'.</msg>
<status endtime="20170803 18:51:37.450" status="PASS" starttime="20170803 18:51:37.449"></status>
</kw>
<status endtime="20170803 18:51:37.450" status="PASS" starttime="20170803 18:51:37.448"></status>
</kw>
<status endtime="20170803 18:51:37.450" status="PASS" starttime="20170803 18:51:37.443"></status>
</kw>
<status endtime="20170803 18:51:37.450" status="PASS" starttime="20170803 18:51:36.728"></status>
</kw>
<status endtime="20170803 18:51:37.450" status="PASS" starttime="20170803 18:51:36.726"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_meminfo', 'cat /proc/meminfo')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170803 18:51:37.451" level="INFO">${logpath} = /tmp/fspcibld/16652/obmc-robot/logs/20170803185128838414_TestsTestBasicPoweron/20170803185128838414_PowerOnTest/20170803185128838414_BMC_meminfo.txt</msg>
<status endtime="20170803 18:51:37.451" status="PASS" starttime="20170803 18:51:37.450"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status endtime="20170803 18:51:37.452" status="PASS" starttime="20170803 18:51:37.452"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170803 18:51:37.453" level="INFO">${cmd_buf} = BMC Execute Command  cat /proc/meminfo  ignore_err=1</msg>
<status endtime="20170803 18:51:37.453" status="PASS" starttime="20170803 18:51:37.452"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /proc/meminfo</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170803 18:51:37.522" level="INFO">index=1
host=9.3.21.61
newline=

encoding=UTF-8
term_type=vt100
height=24
path_separator=/
width=80
alias=bmc_connection
timeout=25 seconds
prompt=# 
port=22</msg>
<msg timestamp="20170803 18:51:37.522" level="INFO">Executing command 'cat /proc/meminfo'.</msg>
<msg timestamp="20170803 18:51:37.583" level="INFO">Command exited with return code 0.</msg>
<status endtime="20170803 18:51:37.583" status="PASS" starttime="20170803 18:51:37.483"></status>
</kw>
<msg timestamp="20170803 18:51:37.583" level="INFO">${status} = PASS</msg>
<msg timestamp="20170803 18:51:37.583" level="INFO">${ret_values} = (u'MemTotal:         432268 kB\nMemFree:          270640 kB\nMemAvailable:     319092 kB\nBuffers:           11572 kB\nCached:            53324 kB\nSwapCached:            0 kB\nActive:           10410...</msg>
<status endtime="20170803 18:51:37.583" status="PASS" starttime="20170803 18:51:37.453"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170803 18:51:37.584" level="INFO">${stdout} = MemTotal:         432268 kB
MemFree:          270640 kB
MemAvailable:     319092 kB
Buffers:           11572 kB
Cached:            53324 kB
SwapCached:            0 kB
Active:           104108 kB
Inac...</msg>
<status endtime="20170803 18:51:37.584" status="PASS" starttime="20170803 18:51:37.584"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170803 18:51:37.584" level="INFO">${stderr} = </msg>
<status endtime="20170803 18:51:37.584" status="PASS" starttime="20170803 18:51:37.584"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170803 18:51:37.591" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/16652/obmc-robot/logs/20170803185128838414_TestsTestBasicPoweron/20170803185128838414_PowerOnTest/20170803185128838414_BMC_meminfo.txt"&gt;/tmp/fspcibld/16652/obmc-robot/logs/20170803185128838414_TestsTestBasicPoweron/20170803185128838414_PowerOnTest/20170803185128838414_BMC_meminfo.txt&lt;/a&gt;'.</msg>
<status endtime="20170803 18:51:37.591" status="PASS" starttime="20170803 18:51:37.590"></status>
</kw>
<status endtime="20170803 18:51:37.591" status="PASS" starttime="20170803 18:51:37.590"></status>
</kw>
<status endtime="20170803 18:51:37.591" status="PASS" starttime="20170803 18:51:37.585"></status>
</kw>
<status endtime="20170803 18:51:37.591" status="PASS" starttime="20170803 18:51:37.451"></status>
</kw>
<status endtime="20170803 18:51:37.591" status="PASS" starttime="20170803 18:51:37.450"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_procinfo', 'cat /proc/cpuinfo')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170803 18:51:37.592" level="INFO">${logpath} = /tmp/fspcibld/16652/obmc-robot/logs/20170803185128838414_TestsTestBasicPoweron/20170803185128838414_PowerOnTest/20170803185128838414_BMC_procinfo.txt</msg>
<status endtime="20170803 18:51:37.592" status="PASS" starttime="20170803 18:51:37.592"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status endtime="20170803 18:51:37.593" status="PASS" starttime="20170803 18:51:37.593"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170803 18:51:37.594" level="INFO">${cmd_buf} = BMC Execute Command  cat /proc/cpuinfo  ignore_err=1</msg>
<status endtime="20170803 18:51:37.594" status="PASS" starttime="20170803 18:51:37.594"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /proc/cpuinfo</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170803 18:51:37.661" level="INFO">index=1
host=9.3.21.61
newline=

encoding=UTF-8
term_type=vt100
height=24
path_separator=/
width=80
alias=bmc_connection
timeout=25 seconds
prompt=# 
port=22</msg>
<msg timestamp="20170803 18:51:37.661" level="INFO">Executing command 'cat /proc/cpuinfo'.</msg>
<msg timestamp="20170803 18:51:37.708" level="INFO">Command exited with return code 0.</msg>
<status endtime="20170803 18:51:37.708" status="PASS" starttime="20170803 18:51:37.625"></status>
</kw>
<msg timestamp="20170803 18:51:37.708" level="INFO">${status} = PASS</msg>
<msg timestamp="20170803 18:51:37.708" level="INFO">${ret_values} = (u'processor\t: 0\nmodel name\t: ARMv6-compatible processor rev 7 (v6l)\nBogoMIPS\t: 789.70\nFeatures\t: half thumb fastmult edsp java tls \nCPU implementer\t: 0x41\nCPU architecture: 7\nCPU variant\t...</msg>
<status endtime="20170803 18:51:37.708" status="PASS" starttime="20170803 18:51:37.594"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170803 18:51:37.709" level="INFO">${stdout} = processor	: 0
model name	: ARMv6-compatible processor rev 7 (v6l)
BogoMIPS	: 789.70
Features	: half thumb fastmult edsp java tls 
CPU implementer	: 0x41
CPU architecture: 7
CPU variant	: 0x0
CPU part	...</msg>
<status endtime="20170803 18:51:37.709" status="PASS" starttime="20170803 18:51:37.708"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170803 18:51:37.709" level="INFO">${stderr} = </msg>
<status endtime="20170803 18:51:37.709" status="PASS" starttime="20170803 18:51:37.709"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170803 18:51:37.716" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/16652/obmc-robot/logs/20170803185128838414_TestsTestBasicPoweron/20170803185128838414_PowerOnTest/20170803185128838414_BMC_procinfo.txt"&gt;/tmp/fspcibld/16652/obmc-robot/logs/20170803185128838414_TestsTestBasicPoweron/20170803185128838414_PowerOnTest/20170803185128838414_BMC_procinfo.txt&lt;/a&gt;'.</msg>
<status endtime="20170803 18:51:37.716" status="PASS" starttime="20170803 18:51:37.715"></status>
</kw>
<status endtime="20170803 18:51:37.716" status="PASS" starttime="20170803 18:51:37.714"></status>
</kw>
<status endtime="20170803 18:51:37.716" status="PASS" starttime="20170803 18:51:37.710"></status>
</kw>
<status endtime="20170803 18:51:37.716" status="PASS" starttime="20170803 18:51:37.592"></status>
</kw>
<status endtime="20170803 18:51:37.716" status="PASS" starttime="20170803 18:51:37.591"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_dmesg', 'dmesg')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170803 18:51:37.717" level="INFO">${logpath} = /tmp/fspcibld/16652/obmc-robot/logs/20170803185128838414_TestsTestBasicPoweron/20170803185128838414_PowerOnTest/20170803185128838414_BMC_dmesg.txt</msg>
<status endtime="20170803 18:51:37.717" status="PASS" starttime="20170803 18:51:37.716"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status endtime="20170803 18:51:37.718" status="PASS" starttime="20170803 18:51:37.718"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170803 18:51:37.719" level="INFO">${cmd_buf} = BMC Execute Command  dmesg  ignore_err=1</msg>
<status endtime="20170803 18:51:37.719" status="PASS" starttime="20170803 18:51:37.718"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>dmesg</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170803 18:51:37.786" level="INFO">index=1
host=9.3.21.61
newline=

encoding=UTF-8
term_type=vt100
height=24
path_separator=/
width=80
alias=bmc_connection
timeout=25 seconds
prompt=# 
port=22</msg>
<msg timestamp="20170803 18:51:37.787" level="INFO">Executing command 'dmesg'.</msg>
<msg timestamp="20170803 18:51:37.843" level="INFO">Command exited with return code 0.</msg>
<status endtime="20170803 18:51:37.843" status="PASS" starttime="20170803 18:51:37.750"></status>
</kw>
<msg timestamp="20170803 18:51:37.844" level="INFO">${status} = PASS</msg>
<msg timestamp="20170803 18:51:37.844" level="INFO">${ret_values} = (u"[  762.250000]  slave@01:00: engine[15]: type 1b, version 1, addr 48000 size 8000\n[  762.250000]  slave@01:00: engine[16]: type 1b, version 1, addr 50000 size 8000\n[  762.250000]  slave@01:00: en...</msg>
<status endtime="20170803 18:51:37.844" status="PASS" starttime="20170803 18:51:37.719"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170803 18:51:37.845" level="INFO">${stdout} = [  762.250000]  slave@01:00: engine[15]: type 1b, version 1, addr 48000 size 8000
[  762.250000]  slave@01:00: engine[16]: type 1b, version 1, addr 50000 size 8000
[  762.250000]  slave@01:00: engine[...</msg>
<status endtime="20170803 18:51:37.845" status="PASS" starttime="20170803 18:51:37.844"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170803 18:51:37.845" level="INFO">${stderr} = </msg>
<status endtime="20170803 18:51:37.845" status="PASS" starttime="20170803 18:51:37.845"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170803 18:51:37.852" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/16652/obmc-robot/logs/20170803185128838414_TestsTestBasicPoweron/20170803185128838414_PowerOnTest/20170803185128838414_BMC_dmesg.txt"&gt;/tmp/fspcibld/16652/obmc-robot/logs/20170803185128838414_TestsTestBasicPoweron/20170803185128838414_PowerOnTest/20170803185128838414_BMC_dmesg.txt&lt;/a&gt;'.</msg>
<status endtime="20170803 18:51:37.852" status="PASS" starttime="20170803 18:51:37.851"></status>
</kw>
<status endtime="20170803 18:51:37.852" status="PASS" starttime="20170803 18:51:37.851"></status>
</kw>
<status endtime="20170803 18:51:37.852" status="PASS" starttime="20170803 18:51:37.846"></status>
</kw>
<status endtime="20170803 18:51:37.852" status="PASS" starttime="20170803 18:51:37.717"></status>
</kw>
<status endtime="20170803 18:51:37.852" status="PASS" starttime="20170803 18:51:37.716"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_proc_list', 'top -n 1 -b')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170803 18:51:37.853" level="INFO">${logpath} = /tmp/fspcibld/16652/obmc-robot/logs/20170803185128838414_TestsTestBasicPoweron/20170803185128838414_PowerOnTest/20170803185128838414_BMC_proc_list.txt</msg>
<status endtime="20170803 18:51:37.853" status="PASS" starttime="20170803 18:51:37.853"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status endtime="20170803 18:51:37.855" status="PASS" starttime="20170803 18:51:37.854"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170803 18:51:37.855" level="INFO">${cmd_buf} = BMC Execute Command  top -n 1 -b  ignore_err=1</msg>
<status endtime="20170803 18:51:37.855" status="PASS" starttime="20170803 18:51:37.855"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>top -n 1 -b</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170803 18:51:37.921" level="INFO">index=1
host=9.3.21.61
newline=

encoding=UTF-8
term_type=vt100
height=24
path_separator=/
width=80
alias=bmc_connection
timeout=25 seconds
prompt=# 
port=22</msg>
<msg timestamp="20170803 18:51:37.922" level="INFO">Executing command 'top -n 1 -b'.</msg>
<msg timestamp="20170803 18:51:38.241" level="INFO">Command exited with return code 0.</msg>
<status endtime="20170803 18:51:38.242" status="PASS" starttime="20170803 18:51:37.886"></status>
</kw>
<msg timestamp="20170803 18:51:38.242" level="INFO">${status} = PASS</msg>
<msg timestamp="20170803 18:51:38.242" level="INFO">${ret_values} = (u'Mem: 161752K used, 270516K free, 14748K shrd, 11572K buff, 53332K cached\nCPU:   0% usr  12% sys   0% nic  87% idle   0% io   0% irq   0% sirq\nLoad average: 0.43 0.82 0.95 1/155 3387\n  PID  PPID ...</msg>
<status endtime="20170803 18:51:38.242" status="PASS" starttime="20170803 18:51:37.856"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170803 18:51:38.243" level="INFO">${stdout} = Mem: 161752K used, 270516K free, 14748K shrd, 11572K buff, 53332K cached
CPU:   0% usr  12% sys   0% nic  87% idle   0% io   0% irq   0% sirq
Load average: 0.43 0.82 0.95 1/155 3387
  PID  PPID USER  ...</msg>
<status endtime="20170803 18:51:38.243" status="PASS" starttime="20170803 18:51:38.242"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170803 18:51:38.243" level="INFO">${stderr} = </msg>
<status endtime="20170803 18:51:38.243" status="PASS" starttime="20170803 18:51:38.243"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170803 18:51:38.250" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/16652/obmc-robot/logs/20170803185128838414_TestsTestBasicPoweron/20170803185128838414_PowerOnTest/20170803185128838414_BMC_proc_list.txt"&gt;/tmp/fspcibld/16652/obmc-robot/logs/20170803185128838414_TestsTestBasicPoweron/20170803185128838414_PowerOnTest/20170803185128838414_BMC_proc_list.txt&lt;/a&gt;'.</msg>
<status endtime="20170803 18:51:38.250" status="PASS" starttime="20170803 18:51:38.250"></status>
</kw>
<status endtime="20170803 18:51:38.250" status="PASS" starttime="20170803 18:51:38.249"></status>
</kw>
<status endtime="20170803 18:51:38.250" status="PASS" starttime="20170803 18:51:38.244"></status>
</kw>
<status endtime="20170803 18:51:38.251" status="PASS" starttime="20170803 18:51:37.853"></status>
</kw>
<status endtime="20170803 18:51:38.251" status="PASS" starttime="20170803 18:51:37.853"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_journalctl', 'journalctl --no-pager')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170803 18:51:38.251" level="INFO">${logpath} = /tmp/fspcibld/16652/obmc-robot/logs/20170803185128838414_TestsTestBasicPoweron/20170803185128838414_PowerOnTest/20170803185128838414_BMC_journalctl.txt</msg>
<status endtime="20170803 18:51:38.251" status="PASS" starttime="20170803 18:51:38.251"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status endtime="20170803 18:51:38.253" status="PASS" starttime="20170803 18:51:38.252"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170803 18:51:38.253" level="INFO">${cmd_buf} = BMC Execute Command  journalctl --no-pager  ignore_err=1</msg>
<status endtime="20170803 18:51:38.253" status="PASS" starttime="20170803 18:51:38.253"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>journalctl --no-pager</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170803 18:51:38.320" level="INFO">index=1
host=9.3.21.61
newline=

encoding=UTF-8
term_type=vt100
height=24
path_separator=/
width=80
alias=bmc_connection
timeout=25 seconds
prompt=# 
port=22</msg>
<msg timestamp="20170803 18:51:38.321" level="INFO">Executing command 'journalctl --no-pager'.</msg>
<msg timestamp="20170803 18:51:42.561" level="INFO">Command exited with return code 0.</msg>
<status endtime="20170803 18:51:42.563" status="PASS" starttime="20170803 18:51:38.284"></status>
</kw>
<msg timestamp="20170803 18:51:42.563" level="INFO">${status} = PASS</msg>
<msg timestamp="20170803 18:51:42.568" level="INFO">${ret_values} = (u'-- Logs begin at Thu 2017-08-03 18:30:17 UTC, end at Thu 2017-08-03 18:51:40 UTC. --\nAug 03 18:30:17 witherspoon kernel: Booting Linux on physical CPU 0x0\nAug 03 18:30:17 witherspoon kernel: Linu...</msg>
<status endtime="20170803 18:51:42.568" status="PASS" starttime="20170803 18:51:38.254"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170803 18:51:42.570" level="INFO">${stdout} = -- Logs begin at Thu 2017-08-03 18:30:17 UTC, end at Thu 2017-08-03 18:51:40 UTC. --
Aug 03 18:30:17 witherspoon kernel: Booting Linux on physical CPU 0x0
Aug 03 18:30:17 witherspoon kernel: Linux ver...</msg>
<status endtime="20170803 18:51:42.570" status="PASS" starttime="20170803 18:51:42.568"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170803 18:51:42.571" level="INFO">${stderr} = </msg>
<status endtime="20170803 18:51:42.571" status="PASS" starttime="20170803 18:51:42.570"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170803 18:51:42.583" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/16652/obmc-robot/logs/20170803185128838414_TestsTestBasicPoweron/20170803185128838414_PowerOnTest/20170803185128838414_BMC_journalctl.txt"&gt;/tmp/fspcibld/16652/obmc-robot/logs/20170803185128838414_TestsTestBasicPoweron/20170803185128838414_PowerOnTest/20170803185128838414_BMC_journalctl.txt&lt;/a&gt;'.</msg>
<status endtime="20170803 18:51:42.583" status="PASS" starttime="20170803 18:51:42.581"></status>
</kw>
<status endtime="20170803 18:51:42.583" status="PASS" starttime="20170803 18:51:42.579"></status>
</kw>
<status endtime="20170803 18:51:42.583" status="PASS" starttime="20170803 18:51:42.571"></status>
</kw>
<status endtime="20170803 18:51:42.583" status="PASS" starttime="20170803 18:51:38.252"></status>
</kw>
<status endtime="20170803 18:51:42.583" status="PASS" starttime="20170803 18:51:38.251"></status>
</kw>
<status endtime="20170803 18:51:42.583" status="PASS" starttime="20170803 18:51:36.726"></status>
</kw>
<status endtime="20170803 18:51:42.583" status="PASS" starttime="20170803 18:51:36.725"></status>
</kw>
<status endtime="20170803 18:51:42.583" status="PASS" starttime="20170803 18:51:36.725"></status>
</kw>
<status endtime="20170803 18:51:42.583" status="PASS" starttime="20170803 18:51:36.725"></status>
</kw>
<status endtime="20170803 18:51:42.584" status="PASS" starttime="20170803 18:51:36.724"></status>
</kw>
<status endtime="20170803 18:51:42.584" status="PASS" starttime="20170803 18:51:36.698"></status>
</kw>
<status endtime="20170803 18:51:42.584" status="PASS" starttime="20170803 18:51:36.695"></status>
</kw>
<status endtime="20170803 18:51:42.584" status="PASS" starttime="20170803 18:51:36.695"></status>
</kw>
<status endtime="20170803 18:51:42.584" status="PASS" starttime="20170803 18:51:29.060"></status>
</kw>
<status endtime="20170803 18:51:42.584" status="PASS" starttime="20170803 18:51:29.058"></status>
</kw>
<status endtime="20170803 18:51:42.584" status="PASS" starttime="20170803 18:51:29.057"></status>
</kw>
<status endtime="20170803 18:51:42.584" status="PASS" starttime="20170803 18:51:29.057"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key U">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>SSHLibrary.Close All Connections</arg>
</arguments>
<kw library="SSHLibrary" name="Close All Connections">
<doc>Closes all open connections.</doc>
<status endtime="20170803 18:51:42.592" status="PASS" starttime="20170803 18:51:42.591"></status>
</kw>
<status endtime="20170803 18:51:42.592" status="PASS" starttime="20170803 18:51:42.584"></status>
</kw>
<status endtime="20170803 18:51:42.592" status="PASS" starttime="20170803 18:51:29.056"></status>
</kw>
<status endtime="20170803 18:51:42.592" status="PASS" starttime="20170803 18:51:25.784"></status>
</kw>
<status endtime="20170803 18:51:42.592" status="PASS" starttime="20170803 18:51:25.784"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}'=='True'</arg>
<arg>Recover Quiesced Host</arg>
</arguments>
<kw library="state_manager" name="Recover Quiesced Host">
<doc>Recover host from quisced state.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Is Host Quiesced</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="state_manager" name="Is Host Quiesced">
<doc>Check if host state is quiesced.</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170803 18:51:42.597" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170803 18:51:42.598" status="PASS" starttime="20170803 18:51:42.597"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170803 18:51:42.598" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170803 18:51:42.598" status="PASS" starttime="20170803 18:51:42.598"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170803 18:51:42.599" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170803 18:51:42.599" status="PASS" starttime="20170803 18:51:42.599"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170803 18:51:42.600" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170803 18:51:42.600" status="PASS" starttime="20170803 18:51:42.599"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170803 18:51:42.790" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170803 18:51:42.790" status="PASS" starttime="20170803 18:51:42.600"></status>
</kw>
<msg timestamp="20170803 18:51:42.790" level="INFO">${status} = PASS</msg>
<msg timestamp="20170803 18:51:42.790" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:51:42.790" status="PASS" starttime="20170803 18:51:42.600"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170803 18:51:42.791" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:51:42.791" status="PASS" starttime="20170803 18:51:42.791"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:51:42.792" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:51:42.792" status="PASS" starttime="20170803 18:51:42.791"></status>
</kw>
<status endtime="20170803 18:51:42.792" status="PASS" starttime="20170803 18:51:42.596"></status>
</kw>
<status endtime="20170803 18:51:42.792" status="PASS" starttime="20170803 18:51:42.596"></status>
</kw>
<status endtime="20170803 18:51:42.792" status="PASS" starttime="20170803 18:51:42.595"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170803 18:51:42.793" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170803 18:51:42.793" status="PASS" starttime="20170803 18:51:42.792"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:51:42.795" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170803 18:51:42.795" status="PASS" starttime="20170803 18:51:42.794"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:51:42.796" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170803 18:51:42.796" status="PASS" starttime="20170803 18:51:42.796"></status>
</kw>
<status endtime="20170803 18:51:42.796" status="PASS" starttime="20170803 18:51:42.795"></status>
</kw>
<status endtime="20170803 18:51:42.796" status="PASS" starttime="20170803 18:51:42.793"></status>
</kw>
<status endtime="20170803 18:51:42.796" status="PASS" starttime="20170803 18:51:42.793"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170803 18:51:42.922" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170803 18:51:42.922" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:51:42.922" status="PASS" starttime="20170803 18:51:42.797"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:51:42.923" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:51:42.924" status="PASS" starttime="20170803 18:51:42.923"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:51:42.924" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:51:42.925" status="PASS" starttime="20170803 18:51:42.924"></status>
</kw>
<status endtime="20170803 18:51:42.925" status="PASS" starttime="20170803 18:51:42.924"></status>
</kw>
<status endtime="20170803 18:51:42.925" status="PASS" starttime="20170803 18:51:42.922"></status>
</kw>
<status endtime="20170803 18:51:42.925" status="PASS" starttime="20170803 18:51:42.922"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170803 18:51:42.925" level="INFO">Delete All Sessions</msg>
<status endtime="20170803 18:51:42.925" status="PASS" starttime="20170803 18:51:42.925"></status>
</kw>
<msg timestamp="20170803 18:51:42.925" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:51:42.926" status="PASS" starttime="20170803 18:51:42.595"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:51:42.926" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:51:42.926" status="PASS" starttime="20170803 18:51:42.926"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170803 18:51:42.927" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170803 18:51:42.927" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170803 18:51:42.927" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status endtime="20170803 18:51:42.927" status="PASS" starttime="20170803 18:51:42.926"></status>
</kw>
<msg timestamp="20170803 18:51:42.927" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status endtime="20170803 18:51:42.927" status="PASS" starttime="20170803 18:51:42.594"></status>
</kw>
<msg timestamp="20170803 18:51:42.927" level="INFO">${host_state} = Quiesced</msg>
<status endtime="20170803 18:51:42.928" status="PASS" starttime="20170803 18:51:42.594"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<status endtime="20170803 18:51:42.928" status="PASS" starttime="20170803 18:51:42.928"></status>
</kw>
<msg timestamp="20170803 18:51:42.929" level="INFO">${status} = True</msg>
<status endtime="20170803 18:51:42.929" status="PASS" starttime="20170803 18:51:42.928"></status>
</kw>
<status endtime="20170803 18:51:42.929" status="PASS" starttime="20170803 18:51:42.594"></status>
</kw>
<msg timestamp="20170803 18:51:42.929" level="INFO">${resp} = True</msg>
<status endtime="20170803 18:51:42.929" status="PASS" starttime="20170803 18:51:42.593"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${resp}' == 'True'</arg>
<arg>Run Keywords</arg>
<arg>Initiate Host PowerOff</arg>
<arg>AND</arg>
<arg>Log</arg>
<arg>HOST is recovered from quiesced state</arg>
</arguments>
<kw library="BuiltIn" name="Run Keywords">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Initiate Host PowerOff</arg>
<arg>AND</arg>
<arg>Log</arg>
<arg>HOST is recovered from quiesced state</arg>
</arguments>
<kw library="state_manager" name="Initiate Host PowerOff">
<doc>Initiate host power off.</doc>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${HOST_POWEROFF_TRANS}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20170803 18:51:42.931" level="INFO">${args} = {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}</msg>
<status endtime="20170803 18:51:42.931" status="PASS" starttime="20170803 18:51:42.931"></status>
</kw>
<kw library="rest_client" name="Write Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>RequestedHostTransition</arg>
<arg>data=${args}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170803 18:51:42.932" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0/</msg>
<status endtime="20170803 18:51:42.932" status="PASS" starttime="20170803 18:51:42.932"></status>
</kw>
<kw library="rest_client" name="OpenBMC Put Request">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170803 18:51:42.937" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170803 18:51:42.937" status="PASS" starttime="20170803 18:51:42.936"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170803 18:51:42.938" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170803 18:51:42.938" status="PASS" starttime="20170803 18:51:42.938"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170803 18:51:42.939" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170803 18:51:42.939" status="PASS" starttime="20170803 18:51:42.939"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170803 18:51:42.940" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170803 18:51:42.940" status="PASS" starttime="20170803 18:51:42.940"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170803 18:51:43.191" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170803 18:51:43.191" status="PASS" starttime="20170803 18:51:42.941"></status>
</kw>
<msg timestamp="20170803 18:51:43.192" level="INFO">${status} = PASS</msg>
<msg timestamp="20170803 18:51:43.192" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:51:43.192" status="PASS" starttime="20170803 18:51:42.941"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170803 18:51:43.192" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:51:43.192" status="PASS" starttime="20170803 18:51:43.192"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:51:43.193" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:51:43.193" status="PASS" starttime="20170803 18:51:43.193"></status>
</kw>
<status endtime="20170803 18:51:43.193" status="PASS" starttime="20170803 18:51:42.935"></status>
</kw>
<status endtime="20170803 18:51:43.193" status="PASS" starttime="20170803 18:51:42.935"></status>
</kw>
<status endtime="20170803 18:51:43.193" status="PASS" starttime="20170803 18:51:42.934"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170803 18:51:43.194" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/RequestedHostTransition</msg>
<status endtime="20170803 18:51:43.194" status="PASS" starttime="20170803 18:51:43.194"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170803 18:51:43.195" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170803 18:51:43.195" status="PASS" starttime="20170803 18:51:43.194"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20170803 18:51:43.195" status="PASS" starttime="20170803 18:51:43.195"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:51:43.197" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-T...</msg>
<status endtime="20170803 18:51:43.197" status="PASS" starttime="20170803 18:51:43.196"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:51:43.198" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20170803 18:51:43.198" status="PASS" starttime="20170803 18:51:43.197"></status>
</kw>
<status endtime="20170803 18:51:43.198" status="PASS" starttime="20170803 18:51:43.197"></status>
</kw>
<status endtime="20170803 18:51:43.198" status="PASS" starttime="20170803 18:51:43.195"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Put Request">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170803 18:51:43.535" level="INFO">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, data={"data": "xyz.openbmc_project.State.Host.Transition.Off"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg timestamp="20170803 18:51:43.535" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:51:43.535" status="PASS" starttime="20170803 18:51:43.198"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:51:43.536" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:51:43.536" status="PASS" starttime="20170803 18:51:43.536"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:51:43.538" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:51:43.538" status="PASS" starttime="20170803 18:51:43.537"></status>
</kw>
<status endtime="20170803 18:51:43.538" status="PASS" starttime="20170803 18:51:43.537"></status>
</kw>
<status endtime="20170803 18:51:43.538" status="PASS" starttime="20170803 18:51:43.535"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170803 18:51:43.538" level="INFO">Delete All Sessions</msg>
<status endtime="20170803 18:51:43.538" status="PASS" starttime="20170803 18:51:43.538"></status>
</kw>
<msg timestamp="20170803 18:51:43.539" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:51:43.539" status="PASS" starttime="20170803 18:51:42.932"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:51:43.539" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:51:43.540" status="PASS" starttime="20170803 18:51:43.539"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20170803 18:51:43.540" level="INFO">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170803 18:51:43.540" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170803 18:51:43.540" level="INFO">${json} = {u'message': u'200 OK', u'status': u'ok', u'data': None}</msg>
<status endtime="20170803 18:51:43.540" status="PASS" starttime="20170803 18:51:43.540"></status>
</kw>
<status endtime="20170803 18:51:43.540" status="PASS" starttime="20170803 18:51:42.931"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${wait}' == '${0}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<status endtime="20170803 18:51:43.541" status="PASS" starttime="20170803 18:51:43.541"></status>
</kw>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>6 min</arg>
<arg>10 sec</arg>
<arg>Is Host Off</arg>
</arguments>
<kw library="state_manager" name="Is Host Off">
<doc>Check if host state is "Off".</doc>
<kw library="state_manager" name="Is Chassis Off">
<doc>Check if chassis state is "Off".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170803 18:51:43.547" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170803 18:51:43.548" status="PASS" starttime="20170803 18:51:43.547"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170803 18:51:43.549" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170803 18:51:43.549" status="PASS" starttime="20170803 18:51:43.548"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170803 18:51:43.550" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170803 18:51:43.550" status="PASS" starttime="20170803 18:51:43.549"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170803 18:51:43.551" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170803 18:51:43.551" status="PASS" starttime="20170803 18:51:43.550"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170803 18:51:44.497" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170803 18:51:44.497" status="PASS" starttime="20170803 18:51:43.552"></status>
</kw>
<msg timestamp="20170803 18:51:44.497" level="INFO">${status} = PASS</msg>
<msg timestamp="20170803 18:51:44.497" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:51:44.497" status="PASS" starttime="20170803 18:51:43.551"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170803 18:51:44.498" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:51:44.498" status="PASS" starttime="20170803 18:51:44.497"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:51:44.498" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:51:44.499" status="PASS" starttime="20170803 18:51:44.498"></status>
</kw>
<status endtime="20170803 18:51:44.499" status="PASS" starttime="20170803 18:51:43.546"></status>
</kw>
<status endtime="20170803 18:51:44.499" status="PASS" starttime="20170803 18:51:43.545"></status>
</kw>
<status endtime="20170803 18:51:44.499" status="PASS" starttime="20170803 18:51:43.544"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170803 18:51:44.499" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170803 18:51:44.500" status="PASS" starttime="20170803 18:51:44.499"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:51:44.502" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170803 18:51:44.502" status="PASS" starttime="20170803 18:51:44.501"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:51:44.503" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170803 18:51:44.503" status="PASS" starttime="20170803 18:51:44.502"></status>
</kw>
<status endtime="20170803 18:51:44.503" status="PASS" starttime="20170803 18:51:44.502"></status>
</kw>
<status endtime="20170803 18:51:44.503" status="PASS" starttime="20170803 18:51:44.500"></status>
</kw>
<status endtime="20170803 18:51:44.503" status="PASS" starttime="20170803 18:51:44.500"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170803 18:51:47.742" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170803 18:51:47.743" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:51:47.743" status="PASS" starttime="20170803 18:51:44.503"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:51:47.745" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:51:47.745" status="PASS" starttime="20170803 18:51:47.744"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:51:47.745" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:51:47.746" status="PASS" starttime="20170803 18:51:47.745"></status>
</kw>
<status endtime="20170803 18:51:47.746" status="PASS" starttime="20170803 18:51:47.745"></status>
</kw>
<status endtime="20170803 18:51:47.746" status="PASS" starttime="20170803 18:51:47.744"></status>
</kw>
<status endtime="20170803 18:51:47.746" status="PASS" starttime="20170803 18:51:47.743"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170803 18:51:47.746" level="INFO">Delete All Sessions</msg>
<status endtime="20170803 18:51:47.746" status="PASS" starttime="20170803 18:51:47.746"></status>
</kw>
<msg timestamp="20170803 18:51:47.747" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:51:47.747" status="PASS" starttime="20170803 18:51:43.544"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:51:47.747" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:51:47.747" status="PASS" starttime="20170803 18:51:47.747"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170803 18:51:47.748" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170803 18:51:47.748" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170803 18:51:47.748" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170803 18:51:47.748" status="PASS" starttime="20170803 18:51:47.748"></status>
</kw>
<msg timestamp="20170803 18:51:47.748" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170803 18:51:47.749" status="PASS" starttime="20170803 18:51:43.543"></status>
</kw>
<msg timestamp="20170803 18:51:47.749" level="INFO">${power_state} = On</msg>
<status endtime="20170803 18:51:47.749" status="PASS" starttime="20170803 18:51:43.542"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20170803 18:51:47.750" level="FAIL">Off != On</msg>
<status endtime="20170803 18:51:47.750" status="FAIL" starttime="20170803 18:51:47.749"></status>
</kw>
<status endtime="20170803 18:51:47.750" status="FAIL" starttime="20170803 18:51:43.542"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170803 18:51:47.756" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170803 18:51:47.757" status="PASS" starttime="20170803 18:51:47.755"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170803 18:51:47.758" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170803 18:51:47.758" status="PASS" starttime="20170803 18:51:47.757"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170803 18:51:47.759" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170803 18:51:47.759" status="PASS" starttime="20170803 18:51:47.758"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170803 18:51:47.759" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170803 18:51:47.760" status="PASS" starttime="20170803 18:51:47.759"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170803 18:51:47.945" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170803 18:51:47.945" status="PASS" starttime="20170803 18:51:47.761"></status>
</kw>
<msg timestamp="20170803 18:51:47.945" level="INFO">${status} = PASS</msg>
<msg timestamp="20170803 18:51:47.945" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:51:47.945" status="PASS" starttime="20170803 18:51:47.760"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170803 18:51:47.946" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:51:47.946" status="PASS" starttime="20170803 18:51:47.946"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:51:47.947" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:51:47.947" status="PASS" starttime="20170803 18:51:47.946"></status>
</kw>
<status endtime="20170803 18:51:47.947" status="PASS" starttime="20170803 18:51:47.754"></status>
</kw>
<status endtime="20170803 18:51:47.947" status="PASS" starttime="20170803 18:51:47.754"></status>
</kw>
<status endtime="20170803 18:51:47.947" status="PASS" starttime="20170803 18:51:47.753"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170803 18:51:47.948" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170803 18:51:47.948" status="PASS" starttime="20170803 18:51:47.947"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:51:47.950" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170803 18:51:47.950" status="PASS" starttime="20170803 18:51:47.949"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:51:47.951" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170803 18:51:47.951" status="PASS" starttime="20170803 18:51:47.951"></status>
</kw>
<status endtime="20170803 18:51:47.951" status="PASS" starttime="20170803 18:51:47.950"></status>
</kw>
<status endtime="20170803 18:51:47.951" status="PASS" starttime="20170803 18:51:47.948"></status>
</kw>
<status endtime="20170803 18:51:47.951" status="PASS" starttime="20170803 18:51:47.948"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170803 18:51:50.245" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170803 18:51:50.246" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:51:50.246" status="PASS" starttime="20170803 18:51:47.952"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:51:50.248" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:51:50.248" status="PASS" starttime="20170803 18:51:50.247"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:51:50.249" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:51:50.249" status="PASS" starttime="20170803 18:51:50.248"></status>
</kw>
<status endtime="20170803 18:51:50.249" status="PASS" starttime="20170803 18:51:50.248"></status>
</kw>
<status endtime="20170803 18:51:50.249" status="PASS" starttime="20170803 18:51:50.246"></status>
</kw>
<status endtime="20170803 18:51:50.249" status="PASS" starttime="20170803 18:51:50.246"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170803 18:51:50.249" level="INFO">Delete All Sessions</msg>
<status endtime="20170803 18:51:50.249" status="PASS" starttime="20170803 18:51:50.249"></status>
</kw>
<msg timestamp="20170803 18:51:50.250" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:51:50.250" status="PASS" starttime="20170803 18:51:47.752"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:51:50.250" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:51:50.250" status="PASS" starttime="20170803 18:51:50.250"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170803 18:51:50.251" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170803 18:51:50.251" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170803 18:51:50.251" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status endtime="20170803 18:51:50.251" status="PASS" starttime="20170803 18:51:50.251"></status>
</kw>
<msg timestamp="20170803 18:51:50.251" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status endtime="20170803 18:51:50.251" status="PASS" starttime="20170803 18:51:47.751"></status>
</kw>
<msg timestamp="20170803 18:51:50.252" level="INFO">${host_state} = Quiesced</msg>
<status endtime="20170803 18:51:50.252" status="PASS" starttime="20170803 18:51:47.751"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170803 18:51:50.252" level="FAIL">Off != Quiesced</msg>
<status endtime="20170803 18:51:50.253" status="FAIL" starttime="20170803 18:51:50.252"></status>
</kw>
<status endtime="20170803 18:51:50.253" status="FAIL" starttime="20170803 18:51:43.542"></status>
</kw>
<kw library="state_manager" name="Is Host Off">
<doc>Check if host state is "Off".</doc>
<kw library="state_manager" name="Is Chassis Off">
<doc>Check if chassis state is "Off".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170803 18:52:00.259" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170803 18:52:00.259" status="PASS" starttime="20170803 18:52:00.258"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170803 18:52:00.259" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170803 18:52:00.260" status="PASS" starttime="20170803 18:52:00.259"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170803 18:52:00.260" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170803 18:52:00.260" status="PASS" starttime="20170803 18:52:00.260"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170803 18:52:00.261" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170803 18:52:00.261" status="PASS" starttime="20170803 18:52:00.261"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170803 18:52:00.748" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170803 18:52:00.748" status="PASS" starttime="20170803 18:52:00.262"></status>
</kw>
<msg timestamp="20170803 18:52:00.748" level="INFO">${status} = PASS</msg>
<msg timestamp="20170803 18:52:00.748" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:52:00.748" status="PASS" starttime="20170803 18:52:00.261"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170803 18:52:00.749" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:52:00.749" status="PASS" starttime="20170803 18:52:00.748"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:52:00.750" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:52:00.750" status="PASS" starttime="20170803 18:52:00.749"></status>
</kw>
<status endtime="20170803 18:52:00.750" status="PASS" starttime="20170803 18:52:00.258"></status>
</kw>
<status endtime="20170803 18:52:00.750" status="PASS" starttime="20170803 18:52:00.257"></status>
</kw>
<status endtime="20170803 18:52:00.750" status="PASS" starttime="20170803 18:52:00.257"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170803 18:52:00.751" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170803 18:52:00.751" status="PASS" starttime="20170803 18:52:00.750"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:52:00.753" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170803 18:52:00.753" status="PASS" starttime="20170803 18:52:00.752"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:52:00.754" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170803 18:52:00.754" status="PASS" starttime="20170803 18:52:00.754"></status>
</kw>
<status endtime="20170803 18:52:00.754" status="PASS" starttime="20170803 18:52:00.753"></status>
</kw>
<status endtime="20170803 18:52:00.754" status="PASS" starttime="20170803 18:52:00.751"></status>
</kw>
<status endtime="20170803 18:52:00.754" status="PASS" starttime="20170803 18:52:00.751"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170803 18:52:01.196" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170803 18:52:01.196" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:52:01.196" status="PASS" starttime="20170803 18:52:00.755"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:52:01.198" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:52:01.198" status="PASS" starttime="20170803 18:52:01.198"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:52:01.199" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:52:01.199" status="PASS" starttime="20170803 18:52:01.199"></status>
</kw>
<status endtime="20170803 18:52:01.199" status="PASS" starttime="20170803 18:52:01.198"></status>
</kw>
<status endtime="20170803 18:52:01.200" status="PASS" starttime="20170803 18:52:01.197"></status>
</kw>
<status endtime="20170803 18:52:01.200" status="PASS" starttime="20170803 18:52:01.197"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170803 18:52:01.200" level="INFO">Delete All Sessions</msg>
<status endtime="20170803 18:52:01.200" status="PASS" starttime="20170803 18:52:01.200"></status>
</kw>
<msg timestamp="20170803 18:52:01.200" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:52:01.200" status="PASS" starttime="20170803 18:52:00.256"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:52:01.201" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:52:01.201" status="PASS" starttime="20170803 18:52:01.201"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170803 18:52:01.202" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170803 18:52:01.202" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170803 18:52:01.202" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20170803 18:52:01.202" status="PASS" starttime="20170803 18:52:01.201"></status>
</kw>
<msg timestamp="20170803 18:52:01.202" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170803 18:52:01.202" status="PASS" starttime="20170803 18:52:00.255"></status>
</kw>
<msg timestamp="20170803 18:52:01.202" level="INFO">${power_state} = Off</msg>
<status endtime="20170803 18:52:01.203" status="PASS" starttime="20170803 18:52:00.254"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170803 18:52:01.203" status="PASS" starttime="20170803 18:52:01.203"></status>
</kw>
<status endtime="20170803 18:52:01.203" status="PASS" starttime="20170803 18:52:00.254"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170803 18:52:01.208" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170803 18:52:01.208" status="PASS" starttime="20170803 18:52:01.207"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170803 18:52:01.209" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170803 18:52:01.209" status="PASS" starttime="20170803 18:52:01.209"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170803 18:52:01.210" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170803 18:52:01.210" status="PASS" starttime="20170803 18:52:01.209"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170803 18:52:01.211" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170803 18:52:01.211" status="PASS" starttime="20170803 18:52:01.210"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170803 18:52:01.574" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170803 18:52:01.574" status="PASS" starttime="20170803 18:52:01.212"></status>
</kw>
<msg timestamp="20170803 18:52:01.574" level="INFO">${status} = PASS</msg>
<msg timestamp="20170803 18:52:01.574" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:52:01.574" status="PASS" starttime="20170803 18:52:01.211"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170803 18:52:01.575" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:52:01.575" status="PASS" starttime="20170803 18:52:01.575"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:52:01.576" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:52:01.576" status="PASS" starttime="20170803 18:52:01.575"></status>
</kw>
<status endtime="20170803 18:52:01.576" status="PASS" starttime="20170803 18:52:01.206"></status>
</kw>
<status endtime="20170803 18:52:01.576" status="PASS" starttime="20170803 18:52:01.206"></status>
</kw>
<status endtime="20170803 18:52:01.576" status="PASS" starttime="20170803 18:52:01.205"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170803 18:52:01.577" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170803 18:52:01.577" status="PASS" starttime="20170803 18:52:01.577"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:52:01.580" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170803 18:52:01.580" status="PASS" starttime="20170803 18:52:01.579"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:52:01.581" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170803 18:52:01.581" status="PASS" starttime="20170803 18:52:01.581"></status>
</kw>
<status endtime="20170803 18:52:01.581" status="PASS" starttime="20170803 18:52:01.580"></status>
</kw>
<status endtime="20170803 18:52:01.582" status="PASS" starttime="20170803 18:52:01.578"></status>
</kw>
<status endtime="20170803 18:52:01.582" status="PASS" starttime="20170803 18:52:01.578"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170803 18:52:01.919" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170803 18:52:01.919" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:52:01.920" status="PASS" starttime="20170803 18:52:01.582"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170803 18:52:01.921" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:52:01.921" status="PASS" starttime="20170803 18:52:01.921"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170803 18:52:01.922" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170803 18:52:01.922" status="PASS" starttime="20170803 18:52:01.922"></status>
</kw>
<status endtime="20170803 18:52:01.923" status="PASS" starttime="20170803 18:52:01.922"></status>
</kw>
<status endtime="20170803 18:52:01.923" status="PASS" starttime="20170803 18:52:01.920"></status>
</kw>
<status endtime="20170803 18:52:01.923" status="PASS" starttime="20170803 18:52:01.920"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170803 18:52:01.923" level="INFO">Delete All Sessions</msg>
<status endtime="20170803 18:52:01.923" status="PASS" starttime="20170803 18:52:01.923"></status>
</kw>
<msg timestamp="20170803 18:52:01.923" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170803 18:52:01.923" status="PASS" starttime="20170803 18:52:01.204"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170803 18:52:01.924" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170803 18:52:01.924" status="PASS" starttime="20170803 18:52:01.924"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170803 18:52:01.925" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170803 18:52:01.925" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170803 18:52:01.925" level="INFO">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Off'}</msg>
<status endtime="20170803 18:52:01.925" status="PASS" starttime="20170803 18:52:01.924"></status>
</kw>
<msg timestamp="20170803 18:52:01.925" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status endtime="20170803 18:52:01.925" status="PASS" starttime="20170803 18:52:01.204"></status>
</kw>
<msg timestamp="20170803 18:52:01.925" level="INFO">${host_state} = Off</msg>
<status endtime="20170803 18:52:01.926" status="PASS" starttime="20170803 18:52:01.203"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170803 18:52:01.926" status="PASS" starttime="20170803 18:52:01.926"></status>
</kw>
<status endtime="20170803 18:52:01.926" status="PASS" starttime="20170803 18:52:00.253"></status>
</kw>
<status endtime="20170803 18:52:01.926" status="PASS" starttime="20170803 18:51:43.541"></status>
</kw>
<status endtime="20170803 18:52:01.926" status="PASS" starttime="20170803 18:51:42.930"></status>
</kw>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>HOST is recovered from quiesced state</arg>
</arguments>
<msg timestamp="20170803 18:52:01.927" level="INFO">HOST is recovered from quiesced state</msg>
<status endtime="20170803 18:52:01.927" status="PASS" starttime="20170803 18:52:01.927"></status>
</kw>
<status endtime="20170803 18:52:01.927" status="PASS" starttime="20170803 18:51:42.930"></status>
</kw>
<status endtime="20170803 18:52:01.927" status="PASS" starttime="20170803 18:51:42.929"></status>
</kw>
<status endtime="20170803 18:52:01.927" status="PASS" starttime="20170803 18:51:42.593"></status>
</kw>
<status endtime="20170803 18:52:01.927" status="PASS" starttime="20170803 18:51:42.592"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Log Test Case Status">
<doc>Test case execution result history.</doc>
<kw library="BuiltIn" name="Get Variable Value">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH_STYLE}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH_STYLE}</var>
</assign>
<msg timestamp="20170803 18:52:01.937" level="INFO">${FFDC_DIR_PATH_STYLE} = </msg>
<status endtime="20170803 18:52:01.937" status="PASS" starttime="20170803 18:52:01.928"></status>
</kw>
<kw library="BuiltIn" name="Get Variable Value">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH}</var>
</assign>
<msg timestamp="20170803 18:52:01.938" level="INFO">${FFDC_DIR_PATH} = /tmp/fspcibld/16652/obmc-robot/logs/20170803185128838414_TestsTestBasicPoweron/20170803185128838414_PowerOnTest/</msg>
<status endtime="20170803 18:52:01.938" status="PASS" starttime="20170803 18:52:01.938"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH}' == '${EMPTY}'</arg>
<arg>Set FFDC Defaults</arg>
</arguments>
<status endtime="20170803 18:52:01.939" status="PASS" starttime="20170803 18:52:01.938"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH_STYLE}' == '${1}'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${FFDC_LOG_PATH}</arg>
<arg>${FFDC_DIR_PATH}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${TEST_HISTORY}</arg>
<arg>${FFDC_DIR_PATH}test_history.txt</arg>
</arguments>
<status endtime="20170803 18:52:01.939" status="PASS" starttime="20170803 18:52:01.939"></status>
</kw>
<kw library="OperatingSystem" name="Create Directory">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg html="yes" timestamp="20170803 18:52:01.940" level="INFO">Directory '&lt;a href="file:///tmp/fspcibld/16652/obmc-robot/logs"&gt;/tmp/fspcibld/16652/obmc-robot/logs&lt;/a&gt;' already exists.</msg>
<status endtime="20170803 18:52:01.940" status="PASS" starttime="20170803 18:52:01.940"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw library="OperatingSystem" name="File Should Exist">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg html="yes" timestamp="20170803 18:52:01.941" level="INFO">File '&lt;a href="file:///tmp/fspcibld/16652/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/16652/obmc-robot/logs/test_history.txt&lt;/a&gt;' exists.</msg>
<status endtime="20170803 18:52:01.941" status="PASS" starttime="20170803 18:52:01.941"></status>
</kw>
<msg timestamp="20170803 18:52:01.941" level="INFO">${exist} = True</msg>
<status endtime="20170803 18:52:01.941" status="PASS" starttime="20170803 18:52:01.940"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<status endtime="20170803 18:52:01.942" status="PASS" starttime="20170803 18:52:01.941"></status>
</kw>
<kw library="gen_robot_print" name="Rpvars">
<arguments>
<arg>TEST_HISTORY</arg>
</arguments>
<status endtime="20170803 18:52:01.942" status="PASS" starttime="20170803 18:52:01.942"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Get Current Time Stamp">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw library="DateTime" name="Get Current Date">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170803 18:52:01.943" level="INFO">${cur_time} = 2017-08-03 18:52:01:942948</msg>
<status endtime="20170803 18:52:01.943" status="PASS" starttime="20170803 18:52:01.943"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170803 18:52:01.944" level="INFO">${cur_time} = 20170803185201942948</msg>
<status endtime="20170803 18:52:01.944" status="PASS" starttime="20170803 18:52:01.944"></status>
</kw>
<msg timestamp="20170803 18:52:01.944" level="INFO">${cur_time} = 20170803185201942948</msg>
<status endtime="20170803 18:52:01.944" status="PASS" starttime="20170803 18:52:01.942"></status>
</kw>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg html="yes" timestamp="20170803 18:52:01.945" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/16652/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/16652/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status endtime="20170803 18:52:01.945" status="PASS" starttime="20170803 18:52:01.944"></status>
</kw>
<status endtime="20170803 18:52:01.945" status="PASS" starttime="20170803 18:52:01.927"></status>
</kw>
<status endtime="20170803 18:52:01.945" status="PASS" starttime="20170803 18:51:25.462"></status>
</kw>
<kw library="utils" name="Stop SOL Console Logging">
<doc>Stop system console logging and return log output.</doc>
<assign>
<var>${sol_log}</var>
</assign>
<kw library="utils" name="Create OS Console File Path">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg timestamp="20170803 18:52:01.947" level="INFO">${default_file_path} = /tmp/9.3.21.61_os_console</msg>
<status endtime="20170803 18:52:01.947" status="PASS" starttime="20170803 18:52:01.947"></status>
</kw>
<kw library="BuiltIn" name="Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg timestamp="20170803 18:52:01.948" level="INFO">${log_file_path} = /tmp/9.3.21.61_os_console</msg>
<status endtime="20170803 18:52:01.948" status="PASS" starttime="20170803 18:52:01.947"></status>
</kw>
<msg timestamp="20170803 18:52:01.948" level="INFO">${log_file_path} = /tmp/9.3.21.61_os_console</msg>
<status endtime="20170803 18:52:01.948" status="PASS" starttime="20170803 18:52:01.946"></status>
</kw>
<kw library="utils" name="Create OS Console Command String">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${search_string}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170803 18:52:01.949" level="INFO">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status endtime="20170803 18:52:01.949" status="PASS" starttime="20170803 18:52:01.948"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170803 18:52:01.950" status="PASS" starttime="20170803 18:52:01.949"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170803 18:52:01.954" level="INFO">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg timestamp="20170803 18:52:01.958" level="INFO">${rc} = 0</msg>
<msg timestamp="20170803 18:52:01.958" level="INFO">${output} = /tmp/fspcibld/16652/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status endtime="20170803 18:52:01.958" status="PASS" starttime="20170803 18:52:01.950"></status>
</kw>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status endtime="20170803 18:52:01.961" status="PASS" starttime="20170803 18:52:01.961"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${output}\n</arg>
</arguments>
<status endtime="20170803 18:52:01.963" status="PASS" starttime="20170803 18:52:01.962"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>ssh_pw ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>-o "StrictHostKeyChecking no" ${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170803 18:52:01.963" level="INFO">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.21.61</msg>
<status endtime="20170803 18:52:01.963" status="PASS" starttime="20170803 18:52:01.963"></status>
</kw>
<msg timestamp="20170803 18:52:01.964" level="INFO">${search_string} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.21.61</msg>
<status endtime="20170803 18:52:01.964" status="PASS" starttime="20170803 18:52:01.948"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>echo $(ps -ef | egrep '${search_string}'</arg>
<arg>| egrep -v grep | cut -c10-14)</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170803 18:52:01.965" level="INFO">${cmd_buf} = echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.21.61' | egrep -v grep | cut -c10-14)</msg>
<status endtime="20170803 18:52:01.965" status="PASS" starttime="20170803 18:52:01.964"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170803 18:52:01.965" status="PASS" starttime="20170803 18:52:01.965"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${os_con_pid}</var>
</assign>
<msg timestamp="20170803 18:52:01.969" level="INFO">Running command 'echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.21.61' | egrep -v grep | cut -c10-14) 2&gt;&amp;1'.</msg>
<msg timestamp="20170803 18:52:01.988" level="INFO">${rc} = 0</msg>
<msg timestamp="20170803 18:52:01.988" level="INFO">${os_con_pid} = </msg>
<status endtime="20170803 18:52:01.989" status="PASS" starttime="20170803 18:52:01.966"></status>
</kw>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>os_con_pid</arg>
</arguments>
<status endtime="20170803 18:52:01.991" status="PASS" starttime="20170803 18:52:01.990"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>kill -9 ${os_con_pid}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170803 18:52:01.992" level="INFO">${cmd_buf} = kill -9 </msg>
<status endtime="20170803 18:52:01.992" status="PASS" starttime="20170803 18:52:01.991"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpissuing</arg>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170803 18:52:01.993" status="PASS" starttime="20170803 18:52:01.992"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Run And Return Rc And Output</arg>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170803 18:52:01.993" level="INFO">${rc} = None</msg>
<msg timestamp="20170803 18:52:01.993" level="INFO">${output} = None</msg>
<status endtime="20170803 18:52:01.994" status="PASS" starttime="20170803 18:52:01.993"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpvars</arg>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status endtime="20170803 18:52:01.994" status="PASS" starttime="20170803 18:52:01.994"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${targ_file_path}' != '${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw library="OperatingSystem" name="Copy File">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<msg html="yes" timestamp="20170803 18:52:01.998" level="INFO">Copied file from '&lt;a href="file:///tmp/9.3.21.61_os_console"&gt;/tmp/9.3.21.61_os_console&lt;/a&gt;' to '&lt;a href="file:///tmp/fspcibld/16652/obmc-robot/logs/9.3.21.61_os_console"&gt;/tmp/fspcibld/16652/obmc-robot/logs/9.3.21.61_os_console&lt;/a&gt;'.</msg>
<status endtime="20170803 18:52:01.998" status="PASS" starttime="20170803 18:52:01.996"></status>
</kw>
<status endtime="20170803 18:52:01.999" status="PASS" starttime="20170803 18:52:01.995"></status>
</kw>
<status endtime="20170803 18:52:01.999" status="PASS" starttime="20170803 18:52:01.994"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20170803 18:52:01.999" level="INFO">${output} = </msg>
<status endtime="20170803 18:52:01.999" status="PASS" starttime="20170803 18:52:01.999"></status>
</kw>
<kw library="BuiltIn" name="Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${debug}^1</arg>
</arguments>
<assign>
<var>${loc_quiet}</var>
</assign>
<msg timestamp="20170803 18:52:02.000" level="INFO">${loc_quiet} = 1</msg>
<status endtime="20170803 18:52:02.000" status="PASS" starttime="20170803 18:52:01.999"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return_data}' == '${1}'</arg>
<arg>Cmd Fnc</arg>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<kw library="gen_cmd" name="Cmd Fnc">
<doc>Run the given command in a shell and return the shell return code.</doc>
<arguments>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<status endtime="20170803 18:52:02.046" status="PASS" starttime="20170803 18:52:02.001"></status>
</kw>
<msg timestamp="20170803 18:52:02.047" level="INFO">${rc} = 0</msg>
<msg timestamp="20170803 18:52:02.048" level="INFO">${output} = spawn ssh -p 2200 -o StrictHostKeyChecking no root@9.3.21.61
Warning: Permanently added '[9.3.21.61]:2200' (RSA) to the list of known hosts.
root@9.3.21.61's password: 
</msg>
<status endtime="20170803 18:52:02.048" status="PASS" starttime="20170803 18:52:02.000"></status>
</kw>
<msg timestamp="20170803 18:52:02.049" level="INFO">${sol_log} = spawn ssh -p 2200 -o StrictHostKeyChecking no root@9.3.21.61
Warning: Permanently added '[9.3.21.61]:2200' (RSA) to the list of known hosts.
root@9.3.21.61's password: 
</msg>
<status endtime="20170803 18:52:02.049" status="PASS" starttime="20170803 18:52:01.945"></status>
</kw>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${sol_log}</arg>
</arguments>
<msg timestamp="20170803 18:52:02.051" level="INFO">spawn ssh -p 2200 -o StrictHostKeyChecking no root@9.3.21.61
Warning: Permanently added '[9.3.21.61]:2200' (RSA) to the list of known hosts.
root@9.3.21.61's password: 
</msg>
<status endtime="20170803 18:52:02.051" status="PASS" starttime="20170803 18:52:02.050"></status>
</kw>
<status endtime="20170803 18:52:02.051" status="PASS" starttime="20170803 18:51:25.462"></status>
</kw>
<doc>Power off and on.</doc>
<tags>
<tag>chassisboot</tag>
<tag>Power_On_Test</tag>
</tags>
<status endtime="20170803 18:52:02.051" status="FAIL" starttime="20170803 18:41:13.620" critical="yes">Keyword 'Is Host Running' failed after retrying for 10 minutes. The last error was: Running != Quiesced</status>
</test>
<doc>Test power on for HW CI.</doc>
<status endtime="20170803 18:52:02.053" status="FAIL" starttime="20170803 18:41:13.587"></status>
</suite>
<doc>Set metadata for test suite.</doc>
<status endtime="20170803 18:52:02.056" status="FAIL" starttime="20170803 18:41:07.661"></status>
</suite>
<statistics>
<total>
<stat fail="1" pass="1">Critical Tests</stat>
<stat fail="1" pass="1">All Tests</stat>
</total>
<tag>
<stat fail="1" pass="0">chassisboot</stat>
<stat fail="1" pass="0">Power_On_Test</stat>
<stat fail="0" pass="1">Test_SSL_Connection</stat>
</tag>
<suite>
<stat fail="1" id="s1" pass="1" name="Tests">Tests</stat>
<stat fail="0" id="s1-s1" pass="1" name="Security">Tests.Security</stat>
<stat fail="0" id="s1-s1-s1" pass="1" name="Test Ssl">Tests.Security.Test Ssl</stat>
<stat fail="1" id="s1-s2" pass="0" name="Test Basic Poweron">Tests.Test Basic Poweron</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
