<?xml version="1.0" encoding="UTF-8"?>
<robot generated="20170914 01:12:28.856" generator="Robot 3.0.2 (Python 2.7.12 on linux2)">
<suite source="/home/fspcibld/openbmc-test-automation/extended/code_update/host_code_update.robot" id="s1" name="Host Code Update">
<test id="s1-t1" name="REST Host Code Update">
<kw type="setup" name="Code Update Setup">
<doc>Do code update test case setup.</doc>
<kw name="Delete All Dumps" library="dump_utils">
<doc>Delete all dumps.</doc>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${DUMP_ENTRY_URI}list</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170914 01:12:29.970" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170914 01:12:29.970" starttime="20170914 01:12:29.969"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170914 01:12:29.971" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170914 01:12:29.971" starttime="20170914 01:12:29.971"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170914 01:12:29.972" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170914 01:12:29.972" starttime="20170914 01:12:29.972"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170914 01:12:29.973" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170914 01:12:29.973" starttime="20170914 01:12:29.972"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170914 01:12:30.208" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170914 01:12:30.209" starttime="20170914 01:12:29.974"></status>
</kw>
<msg timestamp="20170914 01:12:30.209" level="INFO">${status} = PASS</msg>
<msg timestamp="20170914 01:12:30.209" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170914 01:12:30.209" starttime="20170914 01:12:29.973"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170914 01:12:30.210" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170914 01:12:30.210" starttime="20170914 01:12:30.209"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170914 01:12:30.210" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170914 01:12:30.211" starttime="20170914 01:12:30.210"></status>
</kw>
<status status="PASS" endtime="20170914 01:12:30.211" starttime="20170914 01:12:29.968"></status>
</kw>
<status status="PASS" endtime="20170914 01:12:30.211" starttime="20170914 01:12:29.968"></status>
</kw>
<status status="PASS" endtime="20170914 01:12:30.211" starttime="20170914 01:12:29.967"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170914 01:12:30.211" level="INFO">${base_uri} = /xyz/openbmc_project/dump/entry/list</msg>
<status status="PASS" endtime="20170914 01:12:30.212" starttime="20170914 01:12:30.211"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170914 01:12:30.212" starttime="20170914 01:12:30.212"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170914 01:12:30.291" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/dump/entry/list, headers=None json=None</msg>
<msg timestamp="20170914 01:12:30.291" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170914 01:12:30.291" starttime="20170914 01:12:30.213"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170914 01:12:30.292" starttime="20170914 01:12:30.291"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170914 01:12:30.292" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170914 01:12:30.292" starttime="20170914 01:12:30.292"></status>
</kw>
<msg timestamp="20170914 01:12:30.292" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170914 01:12:30.292" starttime="20170914 01:12:29.966"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>${resp.status_code} == ${HTTP_NOT_FOUND}</arg>
</arguments>
<status status="PASS" endtime="20170914 01:12:30.293" starttime="20170914 01:12:30.293"></status>
</kw>
<kw name="Get URL List" library="utils">
<doc>Return list of URLs under given URL.</doc>
<arguments>
<arg>${DUMP_ENTRY_URI}</arg>
</arguments>
<assign>
<var>${dump_entries}</var>
</assign>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${openbmc_url}/list</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${url_list}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170914 01:12:30.297" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170914 01:12:30.298" starttime="20170914 01:12:30.297"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170914 01:12:30.298" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170914 01:12:30.298" starttime="20170914 01:12:30.298"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170914 01:12:30.299" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170914 01:12:30.299" starttime="20170914 01:12:30.299"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170914 01:12:30.300" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170914 01:12:30.300" starttime="20170914 01:12:30.299"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170914 01:12:30.526" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170914 01:12:30.526" starttime="20170914 01:12:30.300"></status>
</kw>
<msg timestamp="20170914 01:12:30.526" level="INFO">${status} = PASS</msg>
<msg timestamp="20170914 01:12:30.526" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170914 01:12:30.526" starttime="20170914 01:12:30.300"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170914 01:12:30.527" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170914 01:12:30.527" starttime="20170914 01:12:30.527"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170914 01:12:30.528" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170914 01:12:30.528" starttime="20170914 01:12:30.527"></status>
</kw>
<status status="PASS" endtime="20170914 01:12:30.528" starttime="20170914 01:12:30.296"></status>
</kw>
<status status="PASS" endtime="20170914 01:12:30.528" starttime="20170914 01:12:30.296"></status>
</kw>
<status status="PASS" endtime="20170914 01:12:30.528" starttime="20170914 01:12:30.295"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170914 01:12:30.529" level="INFO">${base_uri} = /xyz/openbmc_project/dump/entry//list</msg>
<status status="PASS" endtime="20170914 01:12:30.529" starttime="20170914 01:12:30.528"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170914 01:12:30.529" starttime="20170914 01:12:30.529"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170914 01:12:30.582" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/dump/entry//list, headers=None json=None</msg>
<msg timestamp="20170914 01:12:30.583" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170914 01:12:30.583" starttime="20170914 01:12:30.530"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170914 01:12:30.583" starttime="20170914 01:12:30.583"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170914 01:12:30.584" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170914 01:12:30.584" starttime="20170914 01:12:30.584"></status>
</kw>
<msg timestamp="20170914 01:12:30.584" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170914 01:12:30.584" starttime="20170914 01:12:30.294"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170914 01:12:30.585" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170914 01:12:30.585" starttime="20170914 01:12:30.584"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170914 01:12:30.585" level="INFO">To JSON using : content={
  "data": [
    "/xyz/openbmc_project/dump/entry/1"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170914 01:12:30.585" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170914 01:12:30.586" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': [u'/xyz/openbmc_project/dump/entry/1']}</msg>
<status status="PASS" endtime="20170914 01:12:30.586" starttime="20170914 01:12:30.585"></status>
</kw>
<msg timestamp="20170914 01:12:30.586" level="INFO">${url_list} = [u'/xyz/openbmc_project/dump/entry/1']</msg>
<status status="PASS" endtime="20170914 01:12:30.586" starttime="20170914 01:12:30.294"></status>
</kw>
<kw name="Sort List" library="Collections">
<doc>Sorts the given list in place.</doc>
<arguments>
<arg>${url_list}</arg>
</arguments>
<status status="PASS" endtime="20170914 01:12:30.586" starttime="20170914 01:12:30.586"></status>
</kw>
<msg timestamp="20170914 01:12:30.587" level="INFO">${dump_entries} = [u'/xyz/openbmc_project/dump/entry/1']</msg>
<status status="PASS" endtime="20170914 01:12:30.587" starttime="20170914 01:12:30.293"></status>
</kw>
<kw type="for" name="${entry} IN [ @{dump_entries} ]">
<kw type="foritem" name="${entry} = /xyz/openbmc_project/dump/entry/1">
<kw name="Fetch From Right" library="String">
<doc>Returns contents of the ``string`` after the last occurrence of ``marker``.</doc>
<arguments>
<arg>${entry}</arg>
<arg>/</arg>
</arguments>
<assign>
<var>${dump_id}</var>
</assign>
<msg timestamp="20170914 01:12:30.587" level="INFO">${dump_id} = 1</msg>
<status status="PASS" endtime="20170914 01:12:30.588" starttime="20170914 01:12:30.587"></status>
</kw>
<kw name="Delete BMC Dump" library="dump_utils">
<doc>Deletes a given bmc dump.</doc>
<arguments>
<arg>${dump_id}</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{EMPTY}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170914 01:12:30.589" level="INFO">${data} = {u'data': []}</msg>
<status status="PASS" endtime="20170914 01:12:30.589" starttime="20170914 01:12:30.588"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${DUMP_ENTRY_URI}/${dump_id}/action/Delete</arg>
<arg>data=${data}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170914 01:12:30.592" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170914 01:12:30.592" starttime="20170914 01:12:30.591"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170914 01:12:30.593" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170914 01:12:30.593" starttime="20170914 01:12:30.592"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170914 01:12:30.593" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170914 01:12:30.593" starttime="20170914 01:12:30.593"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170914 01:12:30.594" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170914 01:12:30.594" starttime="20170914 01:12:30.594"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170914 01:12:30.778" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170914 01:12:30.778" starttime="20170914 01:12:30.595"></status>
</kw>
<msg timestamp="20170914 01:12:30.778" level="INFO">${status} = PASS</msg>
<msg timestamp="20170914 01:12:30.778" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170914 01:12:30.778" starttime="20170914 01:12:30.594"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170914 01:12:30.779" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170914 01:12:30.779" starttime="20170914 01:12:30.778"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170914 01:12:30.779" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170914 01:12:30.780" starttime="20170914 01:12:30.779"></status>
</kw>
<status status="PASS" endtime="20170914 01:12:30.780" starttime="20170914 01:12:30.591"></status>
</kw>
<status status="PASS" endtime="20170914 01:12:30.780" starttime="20170914 01:12:30.590"></status>
</kw>
<status status="PASS" endtime="20170914 01:12:30.780" starttime="20170914 01:12:30.590"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170914 01:12:30.780" level="INFO">${base_uri} = /xyz/openbmc_project/dump/entry//1/action/Delete</msg>
<status status="PASS" endtime="20170914 01:12:30.781" starttime="20170914 01:12:30.780"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170914 01:12:30.781" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170914 01:12:30.781" starttime="20170914 01:12:30.781"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20170914 01:12:30.782" starttime="20170914 01:12:30.781"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170914 01:12:30.782" starttime="20170914 01:12:30.782"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170914 01:12:31.008" level="INFO">Post Request using : alias=openbmc, uri=/xyz/openbmc_project/dump/entry//1/action/Delete, data={"data": []}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20170914 01:12:31.009" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170914 01:12:31.009" starttime="20170914 01:12:30.783"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170914 01:12:31.009" starttime="20170914 01:12:31.009"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170914 01:12:31.010" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170914 01:12:31.010" starttime="20170914 01:12:31.010"></status>
</kw>
<msg timestamp="20170914 01:12:31.011" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170914 01:12:31.011" starttime="20170914 01:12:30.589"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170914 01:12:31.011" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170914 01:12:31.011" starttime="20170914 01:12:31.011"></status>
</kw>
<status status="PASS" endtime="20170914 01:12:31.011" starttime="20170914 01:12:30.588"></status>
</kw>
<status status="PASS" endtime="20170914 01:12:31.011" starttime="20170914 01:12:30.587"></status>
</kw>
<status status="PASS" endtime="20170914 01:12:31.011" starttime="20170914 01:12:30.587"></status>
</kw>
<status status="PASS" endtime="20170914 01:12:31.012" starttime="20170914 01:12:29.966"></status>
</kw>
<kw name="Delete Error Logs" library="utils">
<doc>Delete error logs.</doc>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${BMC_LOGGING_ENTRY}${/}list</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170914 01:12:31.015" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170914 01:12:31.015" starttime="20170914 01:12:31.014"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170914 01:12:31.016" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170914 01:12:31.016" starttime="20170914 01:12:31.015"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170914 01:12:31.016" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170914 01:12:31.016" starttime="20170914 01:12:31.016"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170914 01:12:31.017" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170914 01:12:31.017" starttime="20170914 01:12:31.017"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170914 01:12:31.197" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170914 01:12:31.197" starttime="20170914 01:12:31.018"></status>
</kw>
<msg timestamp="20170914 01:12:31.197" level="INFO">${status} = PASS</msg>
<msg timestamp="20170914 01:12:31.198" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170914 01:12:31.198" starttime="20170914 01:12:31.017"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170914 01:12:31.198" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170914 01:12:31.198" starttime="20170914 01:12:31.198"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170914 01:12:31.199" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170914 01:12:31.199" starttime="20170914 01:12:31.199"></status>
</kw>
<status status="PASS" endtime="20170914 01:12:31.199" starttime="20170914 01:12:31.014"></status>
</kw>
<status status="PASS" endtime="20170914 01:12:31.199" starttime="20170914 01:12:31.013"></status>
</kw>
<status status="PASS" endtime="20170914 01:12:31.199" starttime="20170914 01:12:31.013"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170914 01:12:31.200" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry//list</msg>
<status status="PASS" endtime="20170914 01:12:31.200" starttime="20170914 01:12:31.200"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170914 01:12:31.201" starttime="20170914 01:12:31.200"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170914 01:12:31.243" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry//list, headers=None json=None</msg>
<msg timestamp="20170914 01:12:31.243" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170914 01:12:31.244" starttime="20170914 01:12:31.201"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170914 01:12:31.244" starttime="20170914 01:12:31.244"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170914 01:12:31.245" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170914 01:12:31.245" starttime="20170914 01:12:31.245"></status>
</kw>
<msg timestamp="20170914 01:12:31.245" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170914 01:12:31.245" starttime="20170914 01:12:31.012"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>${resp.status_code} == ${HTTP_NOT_FOUND}</arg>
</arguments>
<msg timestamp="20170914 01:12:31.246" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20170914 01:12:31.246" starttime="20170914 01:12:31.245"></status>
</kw>
<status status="PASS" endtime="20170914 01:12:31.246" starttime="20170914 01:12:31.012"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'true' == '${DELETE_OLD_PNOR_IMAGES}'</arg>
<arg>Delete All PNOR Images</arg>
</arguments>
<kw name="Delete All Pnor Images" library="code_update_utils">
<doc>Delete all PNOR images from the BMC.</doc>
<kw name="Get Software Objects" library="code_update_utils">
<doc>Get the host software objects and return as a list.</doc>
<arguments>
<arg>xyz.openbmc_project.Software.Version.VersionPurpose.Host</arg>
</arguments>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>${host_list}</var>
</assign>
<msg timestamp="20170914 01:12:31.261" level="INFO">${host_list} = []</msg>
<status status="PASS" endtime="20170914 01:12:31.261" starttime="20170914 01:12:31.260"></status>
</kw>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${SOFTWARE_VERSION_URI}</arg>
</arguments>
<assign>
<var>${sw_list}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170914 01:12:31.264" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170914 01:12:31.264" starttime="20170914 01:12:31.264"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170914 01:12:31.265" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170914 01:12:31.265" starttime="20170914 01:12:31.265"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170914 01:12:31.266" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170914 01:12:31.266" starttime="20170914 01:12:31.265"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170914 01:12:31.266" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170914 01:12:31.266" starttime="20170914 01:12:31.266"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170914 01:12:31.538" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170914 01:12:31.538" starttime="20170914 01:12:31.267"></status>
</kw>
<msg timestamp="20170914 01:12:31.538" level="INFO">${status} = PASS</msg>
<msg timestamp="20170914 01:12:31.538" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170914 01:12:31.538" starttime="20170914 01:12:31.267"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170914 01:12:31.539" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170914 01:12:31.539" starttime="20170914 01:12:31.539"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170914 01:12:31.540" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170914 01:12:31.542" starttime="20170914 01:12:31.539"></status>
</kw>
<status status="PASS" endtime="20170914 01:12:31.542" starttime="20170914 01:12:31.263"></status>
</kw>
<status status="PASS" endtime="20170914 01:12:31.542" starttime="20170914 01:12:31.263"></status>
</kw>
<status status="PASS" endtime="20170914 01:12:31.542" starttime="20170914 01:12:31.262"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170914 01:12:31.543" level="INFO">${base_uri} = /xyz/openbmc_project/software/</msg>
<status status="PASS" endtime="20170914 01:12:31.543" starttime="20170914 01:12:31.543"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170914 01:12:31.544" starttime="20170914 01:12:31.543"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170914 01:12:31.613" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/, headers=None json=None</msg>
<msg timestamp="20170914 01:12:31.613" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170914 01:12:31.613" starttime="20170914 01:12:31.544"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170914 01:12:31.614" starttime="20170914 01:12:31.614"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170914 01:12:31.614" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170914 01:12:31.615" starttime="20170914 01:12:31.614"></status>
</kw>
<msg timestamp="20170914 01:12:31.615" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170914 01:12:31.615" starttime="20170914 01:12:31.261"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170914 01:12:31.615" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170914 01:12:31.616" starttime="20170914 01:12:31.615"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170914 01:12:31.616" level="INFO">To JSON using : content={
  "data": [
    "/xyz/openbmc_project/software/8764baa3", 
    "/xyz/openbmc_project/software/active"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170914 01:12:31.616" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170914 01:12:31.616" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': [u'/xyz/openbmc_project/software/8764baa3', u'/xyz/openbmc_project/software/active']}</msg>
<status status="PASS" endtime="20170914 01:12:31.616" starttime="20170914 01:12:31.616"></status>
</kw>
<msg timestamp="20170914 01:12:31.617" level="INFO">${sw_list} = [u'/xyz/openbmc_project/software/8764baa3', u'/xyz/openbmc_project/software/active']</msg>
<status status="PASS" endtime="20170914 01:12:31.617" starttime="20170914 01:12:31.261"></status>
</kw>
<kw type="for" name="${index} IN [ @{sw_list} ]">
<kw type="foritem" name="${index} = /xyz/openbmc_project/software/8764baa3">
<kw name="Read Software Attribute" library="code_update_utils">
<doc>Return software attribute data.</doc>
<arguments>
<arg>${index}</arg>
<arg>Purpose</arg>
</arguments>
<assign>
<var>${attr_purpose}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${software_object}/attr/${attribute_name}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170914 01:12:31.620" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170914 01:12:31.620" starttime="20170914 01:12:31.620"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170914 01:12:31.621" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170914 01:12:31.621" starttime="20170914 01:12:31.621"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170914 01:12:31.622" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170914 01:12:31.622" starttime="20170914 01:12:31.621"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170914 01:12:31.622" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170914 01:12:31.623" starttime="20170914 01:12:31.622"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170914 01:12:31.814" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170914 01:12:31.814" starttime="20170914 01:12:31.624"></status>
</kw>
<msg timestamp="20170914 01:12:31.814" level="INFO">${status} = PASS</msg>
<msg timestamp="20170914 01:12:31.814" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170914 01:12:31.814" starttime="20170914 01:12:31.623"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170914 01:12:31.815" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170914 01:12:31.815" starttime="20170914 01:12:31.814"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170914 01:12:31.815" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170914 01:12:31.815" starttime="20170914 01:12:31.815"></status>
</kw>
<status status="PASS" endtime="20170914 01:12:31.816" starttime="20170914 01:12:31.619"></status>
</kw>
<status status="PASS" endtime="20170914 01:12:31.816" starttime="20170914 01:12:31.619"></status>
</kw>
<status status="PASS" endtime="20170914 01:12:31.816" starttime="20170914 01:12:31.618"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170914 01:12:31.816" level="INFO">${base_uri} = /xyz/openbmc_project/software/8764baa3/attr/Purpose</msg>
<status status="PASS" endtime="20170914 01:12:31.817" starttime="20170914 01:12:31.816"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170914 01:12:31.817" starttime="20170914 01:12:31.817"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170914 01:12:31.929" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/8764baa3/attr/Purpose, headers=None json=None</msg>
<msg timestamp="20170914 01:12:31.930" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170914 01:12:31.930" starttime="20170914 01:12:31.817"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170914 01:12:31.930" starttime="20170914 01:12:31.930"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170914 01:12:31.931" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170914 01:12:31.931" starttime="20170914 01:12:31.931"></status>
</kw>
<msg timestamp="20170914 01:12:31.931" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170914 01:12:31.931" starttime="20170914 01:12:31.618"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>${resp.status_code} != ${HTTP_OK}</arg>
</arguments>
<status status="PASS" endtime="20170914 01:12:31.932" starttime="20170914 01:12:31.931"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170914 01:12:31.932" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.Software.Version.VersionPurpose.Host", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170914 01:12:31.932" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170914 01:12:31.932" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.Software.Version.VersionPurpose.Host'}</msg>
<status status="PASS" endtime="20170914 01:12:31.932" starttime="20170914 01:12:31.932"></status>
</kw>
<msg timestamp="20170914 01:12:31.933" level="INFO">${attr_purpose} = xyz.openbmc_project.Software.Version.VersionPurpose.Host</msg>
<status status="PASS" endtime="20170914 01:12:31.933" starttime="20170914 01:12:31.617"></status>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${attr_purpose}' != '${version_type}'</arg>
</arguments>
<status status="PASS" endtime="20170914 01:12:31.933" starttime="20170914 01:12:31.933"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${host_list}</arg>
<arg>${index}</arg>
</arguments>
<status status="PASS" endtime="20170914 01:12:31.934" starttime="20170914 01:12:31.934"></status>
</kw>
<status status="PASS" endtime="20170914 01:12:31.934" starttime="20170914 01:12:31.617"></status>
</kw>
<kw type="foritem" name="${index} = /xyz/openbmc_project/software/active">
<kw name="Read Software Attribute" library="code_update_utils">
<doc>Return software attribute data.</doc>
<arguments>
<arg>${index}</arg>
<arg>Purpose</arg>
</arguments>
<assign>
<var>${attr_purpose}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${software_object}/attr/${attribute_name}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170914 01:12:31.937" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170914 01:12:31.938" starttime="20170914 01:12:31.937"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170914 01:12:31.938" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170914 01:12:31.938" starttime="20170914 01:12:31.938"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170914 01:12:31.939" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170914 01:12:31.939" starttime="20170914 01:12:31.939"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170914 01:12:31.940" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170914 01:12:31.940" starttime="20170914 01:12:31.939"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170914 01:12:32.127" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170914 01:12:32.127" starttime="20170914 01:12:31.941"></status>
</kw>
<msg timestamp="20170914 01:12:32.127" level="INFO">${status} = PASS</msg>
<msg timestamp="20170914 01:12:32.127" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170914 01:12:32.127" starttime="20170914 01:12:31.940"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170914 01:12:32.128" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170914 01:12:32.128" starttime="20170914 01:12:32.127"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170914 01:12:32.129" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170914 01:12:32.129" starttime="20170914 01:12:32.128"></status>
</kw>
<status status="PASS" endtime="20170914 01:12:32.129" starttime="20170914 01:12:31.936"></status>
</kw>
<status status="PASS" endtime="20170914 01:12:32.129" starttime="20170914 01:12:31.936"></status>
</kw>
<status status="PASS" endtime="20170914 01:12:32.129" starttime="20170914 01:12:31.935"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170914 01:12:32.130" level="INFO">${base_uri} = /xyz/openbmc_project/software/active/attr/Purpose</msg>
<status status="PASS" endtime="20170914 01:12:32.130" starttime="20170914 01:12:32.129"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170914 01:12:32.130" starttime="20170914 01:12:32.130"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170914 01:12:32.187" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/active/attr/Purpose, headers=None json=None</msg>
<msg timestamp="20170914 01:12:32.187" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170914 01:12:32.187" starttime="20170914 01:12:32.131"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170914 01:12:32.188" starttime="20170914 01:12:32.187"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170914 01:12:32.188" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170914 01:12:32.188" starttime="20170914 01:12:32.188"></status>
</kw>
<msg timestamp="20170914 01:12:32.188" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170914 01:12:32.189" starttime="20170914 01:12:31.935"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>${resp.status_code} != ${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170914 01:12:32.189" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20170914 01:12:32.189" starttime="20170914 01:12:32.189"></status>
</kw>
<msg timestamp="20170914 01:12:32.189" level="INFO">${attr_purpose} = None</msg>
<status status="PASS" endtime="20170914 01:12:32.189" starttime="20170914 01:12:31.934"></status>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${attr_purpose}' != '${version_type}'</arg>
</arguments>
<msg timestamp="20170914 01:12:32.190" level="INFO">Continuing for loop from the next iteration.</msg>
<status status="PASS" endtime="20170914 01:12:32.190" starttime="20170914 01:12:32.190"></status>
</kw>
<status status="PASS" endtime="20170914 01:12:32.190" starttime="20170914 01:12:31.934"></status>
</kw>
<status status="PASS" endtime="20170914 01:12:32.190" starttime="20170914 01:12:31.617"></status>
</kw>
<status status="PASS" endtime="20170914 01:12:32.190" starttime="20170914 01:12:31.260"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/xyz/openbmc_project/software/8764baa3</arg>
<arg>delete</arg>
<arg>data={"data":[]}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170914 01:12:32.203" level="INFO">${base_uri} = /xyz/openbmc_project/software/8764baa3</msg>
<status status="PASS" endtime="20170914 01:12:32.203" starttime="20170914 01:12:32.203"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170914 01:12:32.206" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170914 01:12:32.206" starttime="20170914 01:12:32.205"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170914 01:12:32.207" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170914 01:12:32.207" starttime="20170914 01:12:32.207"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170914 01:12:32.208" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170914 01:12:32.208" starttime="20170914 01:12:32.207"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170914 01:12:32.209" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170914 01:12:32.209" starttime="20170914 01:12:32.208"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170914 01:12:32.421" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170914 01:12:32.421" starttime="20170914 01:12:32.210"></status>
</kw>
<msg timestamp="20170914 01:12:32.421" level="INFO">${status} = PASS</msg>
<msg timestamp="20170914 01:12:32.421" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170914 01:12:32.421" starttime="20170914 01:12:32.209"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170914 01:12:32.422" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170914 01:12:32.422" starttime="20170914 01:12:32.421"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170914 01:12:32.423" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170914 01:12:32.423" starttime="20170914 01:12:32.422"></status>
</kw>
<status status="PASS" endtime="20170914 01:12:32.423" starttime="20170914 01:12:32.205"></status>
</kw>
<status status="PASS" endtime="20170914 01:12:32.423" starttime="20170914 01:12:32.204"></status>
</kw>
<status status="PASS" endtime="20170914 01:12:32.423" starttime="20170914 01:12:32.204"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170914 01:12:32.424" level="INFO">${base_uri} = /xyz/openbmc_project/software/8764baa3/action/delete</msg>
<status status="PASS" endtime="20170914 01:12:32.424" starttime="20170914 01:12:32.423"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170914 01:12:32.424" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170914 01:12:32.424" starttime="20170914 01:12:32.424"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20170914 01:12:32.425" starttime="20170914 01:12:32.425"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170914 01:12:32.426" starttime="20170914 01:12:32.425"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170914 01:12:33.064" level="INFO">Post Request using : alias=openbmc, uri=/xyz/openbmc_project/software/8764baa3/action/delete, data={"data":[]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20170914 01:12:33.064" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170914 01:12:33.064" starttime="20170914 01:12:32.426"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170914 01:12:33.065" starttime="20170914 01:12:33.065"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170914 01:12:33.066" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170914 01:12:33.066" starttime="20170914 01:12:33.065"></status>
</kw>
<msg timestamp="20170914 01:12:33.066" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170914 01:12:33.066" starttime="20170914 01:12:32.203"></status>
</kw>
<status status="PASS" endtime="20170914 01:12:33.066" starttime="20170914 01:12:32.202"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/xyz/openbmc_project/software/8764baa3</arg>
<arg>delete</arg>
<arg>data={"data":[]}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170914 01:12:33.077" level="INFO">${base_uri} = /xyz/openbmc_project/software/8764baa3</msg>
<status status="PASS" endtime="20170914 01:12:33.077" starttime="20170914 01:12:33.077"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170914 01:12:33.081" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170914 01:12:33.081" starttime="20170914 01:12:33.081"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170914 01:12:33.082" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170914 01:12:33.082" starttime="20170914 01:12:33.082"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170914 01:12:33.083" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170914 01:12:33.083" starttime="20170914 01:12:33.082"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170914 01:12:33.083" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170914 01:12:33.083" starttime="20170914 01:12:33.083"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170914 01:12:34.353" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170914 01:12:34.353" starttime="20170914 01:12:33.084"></status>
</kw>
<msg timestamp="20170914 01:12:34.353" level="INFO">${status} = PASS</msg>
<msg timestamp="20170914 01:12:34.353" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170914 01:12:34.353" starttime="20170914 01:12:33.084"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170914 01:12:34.354" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170914 01:12:34.354" starttime="20170914 01:12:34.354"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170914 01:12:34.355" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170914 01:12:34.355" starttime="20170914 01:12:34.354"></status>
</kw>
<status status="PASS" endtime="20170914 01:12:34.355" starttime="20170914 01:12:33.080"></status>
</kw>
<status status="PASS" endtime="20170914 01:12:34.355" starttime="20170914 01:12:33.079"></status>
</kw>
<status status="PASS" endtime="20170914 01:12:34.355" starttime="20170914 01:12:33.078"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170914 01:12:34.356" level="INFO">${base_uri} = /xyz/openbmc_project/software/8764baa3/action/delete</msg>
<status status="PASS" endtime="20170914 01:12:34.356" starttime="20170914 01:12:34.356"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170914 01:12:34.357" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170914 01:12:34.357" starttime="20170914 01:12:34.356"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20170914 01:12:34.357" starttime="20170914 01:12:34.357"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170914 01:12:34.358" starttime="20170914 01:12:34.358"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170914 01:12:34.402" level="INFO">Post Request using : alias=openbmc, uri=/xyz/openbmc_project/software/8764baa3/action/delete, data={"data":[]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20170914 01:12:34.402" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170914 01:12:34.402" starttime="20170914 01:12:34.358"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170914 01:12:34.403" starttime="20170914 01:12:34.403"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170914 01:12:34.403" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170914 01:12:34.403" starttime="20170914 01:12:34.403"></status>
</kw>
<msg timestamp="20170914 01:12:34.404" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170914 01:12:34.404" starttime="20170914 01:12:33.078"></status>
</kw>
<status status="PASS" endtime="20170914 01:12:34.404" starttime="20170914 01:12:33.076"></status>
</kw>
<status status="PASS" endtime="20170914 01:12:34.404" starttime="20170914 01:12:31.247"></status>
</kw>
<status status="PASS" endtime="20170914 01:12:34.404" starttime="20170914 01:12:31.246"></status>
</kw>
<status status="PASS" endtime="20170914 01:12:34.404" starttime="20170914 01:12:29.966"></status>
</kw>
<kw name="Upload And Activate Image" library="code_update_utils">
<doc>Upload an image to the BMC and activate it with REST.</doc>
<arguments>
<arg>${IMAGE_FILE_PATH}</arg>
</arguments>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${image_file_path}</arg>
</arguments>
<msg timestamp="20170914 01:12:34.406" html="yes" level="INFO">File '&lt;a href="file:///home/fspcibld/witherspoon_910_golden.pnor.squashfs.tar"&gt;/home/fspcibld/witherspoon_910_golden.pnor.squashfs.tar&lt;/a&gt;' exists.</msg>
<status status="PASS" endtime="20170914 01:12:34.406" starttime="20170914 01:12:34.405"></status>
</kw>
<kw name="Get Version Tar" library="code_update_utils">
<doc>Read the image version from the MANIFEST inside the tarball.</doc>
<arguments>
<arg>${image_file_path}</arg>
</arguments>
<assign>
<var>${image_version}</var>
</assign>
<msg timestamp="20170914 01:12:34.409" level="INFO">${image_version} = IBM-witherspoon-sequoia-ibm-OP9_v1.18_1.54</msg>
<status status="PASS" endtime="20170914 01:12:34.409" starttime="20170914 01:12:34.406"></status>
</kw>
<kw name="Get Binary File" library="OperatingSystem">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${image_file_path}</arg>
</arguments>
<assign>
<var>${image_data}</var>
</assign>
<msg timestamp="20170914 01:12:34.409" html="yes" level="INFO">Getting file '&lt;a href="file:///home/fspcibld/witherspoon_910_golden.pnor.squashfs.tar"&gt;/home/fspcibld/witherspoon_910_golden.pnor.squashfs.tar&lt;/a&gt;'.</msg>
<msg timestamp="20170914 01:12:46.950" level="INFO">${image_data} = MANIFEST0000664075750014206770000000062713151633611011555 0...</msg>
<status status="PASS" endtime="20170914 01:12:46.950" starttime="20170914 01:12:34.409"></status>
</kw>
<kw name="Upload Image To BMC" library="rest_client">
<arguments>
<arg>/upload/image</arg>
<arg>data=${image_data}</arg>
</arguments>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170914 01:12:46.953" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170914 01:12:46.954" starttime="20170914 01:12:46.953"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170914 01:12:46.955" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170914 01:12:46.955" starttime="20170914 01:12:46.954"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170914 01:12:46.955" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170914 01:12:46.955" starttime="20170914 01:12:46.955"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170914 01:12:46.956" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170914 01:12:46.956" starttime="20170914 01:12:46.956"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170914 01:12:47.369" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170914 01:12:47.369" starttime="20170914 01:12:46.957"></status>
</kw>
<msg timestamp="20170914 01:12:47.369" level="INFO">${status} = PASS</msg>
<msg timestamp="20170914 01:12:47.369" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170914 01:12:47.369" starttime="20170914 01:12:46.956"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170914 01:12:47.370" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170914 01:12:47.370" starttime="20170914 01:12:47.370"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170914 01:12:47.371" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170914 01:12:47.371" starttime="20170914 01:12:47.371"></status>
</kw>
<status status="PASS" endtime="20170914 01:12:47.371" starttime="20170914 01:12:46.952"></status>
</kw>
<status status="PASS" endtime="20170914 01:12:47.371" starttime="20170914 01:12:46.952"></status>
</kw>
<status status="PASS" endtime="20170914 01:12:47.371" starttime="20170914 01:12:46.951"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170914 01:12:47.372" level="INFO">${base_uri} = /upload/image</msg>
<status status="PASS" endtime="20170914 01:12:47.372" starttime="20170914 01:12:47.372"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/octet-stream</arg>
<arg>Accept=application/octet-stream</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170914 01:12:47.373" level="INFO">${headers} = {u'Content-Type': u'application/octet-stream', u'Accept': u'application/octet-stream'}</msg>
<status status="PASS" endtime="20170914 01:12:47.373" starttime="20170914 01:12:47.372"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20170914 01:12:47.373" starttime="20170914 01:12:47.373"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170914 01:12:47.374" starttime="20170914 01:12:47.373"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170914 01:13:00.519" level="INFO">Post Request using : alias=openbmc, uri=/upload/image, data=&lt;application/octet-stream&gt;, headers={u'Content-Type': u'application/octet-stream', u'Accept': u'application/octet-stream'}, files=None, allow_redirects=True </msg>
<msg timestamp="20170914 01:13:00.519" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170914 01:13:00.519" starttime="20170914 01:12:47.374"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170914 01:13:00.520" starttime="20170914 01:13:00.520"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${ret.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170914 01:13:00.521" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170914 01:13:00.521" starttime="20170914 01:13:00.521"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170914 01:13:00.522" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170914 01:13:00.522" starttime="20170914 01:13:00.521"></status>
</kw>
<status status="PASS" endtime="20170914 01:13:00.522" starttime="20170914 01:12:46.951"></status>
</kw>
<kw name="Verify Image Upload" library="code_update_utils">
<doc>Verify the image was uploaded correctly and that it created</doc>
<arguments>
<arg>${image_version}</arg>
</arguments>
<assign>
<var>${ret}</var>
<var>${version_id}</var>
</assign>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170914 01:13:00.528" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170914 01:13:00.528" starttime="20170914 01:13:00.528"></status>
</kw>
<msg timestamp="20170914 01:13:00.529" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170914 01:13:00.529" starttime="20170914 01:13:00.528"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170914 01:13:00.530" starttime="20170914 01:13:00.529"></status>
</kw>
<status status="PASS" endtime="20170914 01:13:00.530" starttime="20170914 01:13:00.529"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170914 01:13:00.531" starttime="20170914 01:13:00.530"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170914 01:13:00.532" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170914 01:13:00.532" starttime="20170914 01:13:00.531"></status>
</kw>
<msg timestamp="20170914 01:13:00.532" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170914 01:13:00.532" starttime="20170914 01:13:00.531"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170914 01:13:00.534" starttime="20170914 01:13:00.533"></status>
</kw>
<status status="PASS" endtime="20170914 01:13:00.534" starttime="20170914 01:13:00.533"></status>
</kw>
<status status="PASS" endtime="20170914 01:13:00.534" starttime="20170914 01:13:00.532"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170914 01:13:00.534" level="INFO">Logging into '9.3.21.61:22' as 'root'.</msg>
<msg timestamp="20170914 01:13:03.345" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170914 01:13:03.345" starttime="20170914 01:13:00.534"></status>
</kw>
<status status="PASS" endtime="20170914 01:13:03.346" starttime="20170914 01:13:00.527"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>ls -d /tmp/images/*/</arg>
</arguments>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170914 01:13:03.355" level="INFO">Executing command 'ls -d /tmp/images/*/'.</msg>
<msg timestamp="20170914 01:13:03.775" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170914 01:13:03.775" level="INFO">${stdout} = /tmp/images/8764baa3/</msg>
<msg timestamp="20170914 01:13:03.775" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170914 01:13:03.775" starttime="20170914 01:13:03.355"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170914 01:13:03.776" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170914 01:13:03.776" starttime="20170914 01:13:03.776"></status>
</kw>
<status status="PASS" endtime="20170914 01:13:03.776" starttime="20170914 01:13:03.354"></status>
</kw>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170914 01:13:03.783" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170914 01:13:03.783" starttime="20170914 01:13:03.782"></status>
</kw>
<msg timestamp="20170914 01:13:03.783" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170914 01:13:03.783" starttime="20170914 01:13:03.782"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170914 01:13:03.784" starttime="20170914 01:13:03.784"></status>
</kw>
<status status="PASS" endtime="20170914 01:13:03.784" starttime="20170914 01:13:03.783"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170914 01:13:03.785" starttime="20170914 01:13:03.785"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170914 01:13:03.786" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170914 01:13:03.786" starttime="20170914 01:13:03.786"></status>
</kw>
<msg timestamp="20170914 01:13:03.786" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170914 01:13:03.786" starttime="20170914 01:13:03.785"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170914 01:13:03.788" starttime="20170914 01:13:03.788"></status>
</kw>
<status status="PASS" endtime="20170914 01:13:03.788" starttime="20170914 01:13:03.788"></status>
</kw>
<status status="PASS" endtime="20170914 01:13:03.789" starttime="20170914 01:13:03.787"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170914 01:13:03.789" level="INFO">Logging into '9.3.21.61:22' as 'root'.</msg>
<msg timestamp="20170914 01:13:06.067" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170914 01:13:06.068" starttime="20170914 01:13:03.789"></status>
</kw>
<status status="PASS" endtime="20170914 01:13:06.068" starttime="20170914 01:13:03.781"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>cat /tmp/images/8764baa3/MANIFEST | grep "version="</arg>
</arguments>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170914 01:13:06.078" level="INFO">Executing command 'cat /tmp/images/8764baa3/MANIFEST | grep "version="'.</msg>
<msg timestamp="20170914 01:13:06.315" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170914 01:13:06.316" level="INFO">${stdout} = version=IBM-witherspoon-sequoia-ibm-OP9_v1.18_1.54
extended_version=op-build-v1.7-1321-g6eef393-dirty,buildroot-2017.05-163-g8035745,skiboot-v5.8-rc1-pd9d2012,hostboot-c68be97,linux-4.12.8-openpower1-...</msg>
<msg timestamp="20170914 01:13:06.316" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170914 01:13:06.316" starttime="20170914 01:13:06.077"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170914 01:13:06.316" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170914 01:13:06.316" starttime="20170914 01:13:06.316"></status>
</kw>
<status status="PASS" endtime="20170914 01:13:06.317" starttime="20170914 01:13:06.076"></status>
</kw>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170914 01:13:06.323" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170914 01:13:06.323" starttime="20170914 01:13:06.322"></status>
</kw>
<msg timestamp="20170914 01:13:06.323" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170914 01:13:06.323" starttime="20170914 01:13:06.322"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170914 01:13:06.324" starttime="20170914 01:13:06.324"></status>
</kw>
<status status="PASS" endtime="20170914 01:13:06.324" starttime="20170914 01:13:06.323"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170914 01:13:06.325" starttime="20170914 01:13:06.325"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170914 01:13:06.326" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170914 01:13:06.326" starttime="20170914 01:13:06.326"></status>
</kw>
<msg timestamp="20170914 01:13:06.326" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170914 01:13:06.326" starttime="20170914 01:13:06.325"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170914 01:13:06.328" starttime="20170914 01:13:06.328"></status>
</kw>
<status status="PASS" endtime="20170914 01:13:06.328" starttime="20170914 01:13:06.327"></status>
</kw>
<status status="PASS" endtime="20170914 01:13:06.328" starttime="20170914 01:13:06.327"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170914 01:13:06.329" level="INFO">Logging into '9.3.21.61:22' as 'root'.</msg>
<msg timestamp="20170914 01:13:09.371" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170914 01:13:09.372" starttime="20170914 01:13:06.329"></status>
</kw>
<status status="PASS" endtime="20170914 01:13:09.372" starttime="20170914 01:13:06.321"></status>
</kw>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170914 01:13:09.380" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170914 01:13:09.380" starttime="20170914 01:13:09.380"></status>
</kw>
<msg timestamp="20170914 01:13:09.380" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170914 01:13:09.380" starttime="20170914 01:13:09.379"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170914 01:13:09.382" starttime="20170914 01:13:09.382"></status>
</kw>
<status status="PASS" endtime="20170914 01:13:09.382" starttime="20170914 01:13:09.381"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170914 01:13:09.383" starttime="20170914 01:13:09.383"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170914 01:13:09.385" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170914 01:13:09.385" starttime="20170914 01:13:09.385"></status>
</kw>
<msg timestamp="20170914 01:13:09.385" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170914 01:13:09.385" starttime="20170914 01:13:09.384"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170914 01:13:09.388" starttime="20170914 01:13:09.387"></status>
</kw>
<status status="PASS" endtime="20170914 01:13:09.388" starttime="20170914 01:13:09.387"></status>
</kw>
<status status="PASS" endtime="20170914 01:13:09.388" starttime="20170914 01:13:09.386"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170914 01:13:09.389" level="INFO">Logging into '9.3.21.61:22' as 'root'.</msg>
<msg timestamp="20170914 01:13:11.967" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170914 01:13:11.967" starttime="20170914 01:13:09.389"></status>
</kw>
<status status="PASS" endtime="20170914 01:13:11.967" starttime="20170914 01:13:09.377"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>cat /tmp/images/8764baa3/MANIFEST | grep "purpose="</arg>
</arguments>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170914 01:13:11.977" level="INFO">Executing command 'cat /tmp/images/8764baa3/MANIFEST | grep "purpose="'.</msg>
<msg timestamp="20170914 01:13:12.366" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170914 01:13:12.366" level="INFO">${stdout} = purpose=xyz.openbmc_project.Software.Version.VersionPurpose.Host</msg>
<msg timestamp="20170914 01:13:12.366" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170914 01:13:12.366" starttime="20170914 01:13:11.976"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170914 01:13:12.367" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170914 01:13:12.367" starttime="20170914 01:13:12.367"></status>
</kw>
<status status="PASS" endtime="20170914 01:13:12.367" starttime="20170914 01:13:11.976"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>/xyz/openbmc_project/software/8764baa3</arg>
<arg>Activation</arg>
</arguments>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170914 01:13:12.380" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170914 01:13:12.380" starttime="20170914 01:13:12.379"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170914 01:13:12.381" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170914 01:13:12.381" starttime="20170914 01:13:12.380"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170914 01:13:12.381" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170914 01:13:12.381" starttime="20170914 01:13:12.381"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170914 01:13:12.382" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170914 01:13:12.382" starttime="20170914 01:13:12.382"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170914 01:13:12.561" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170914 01:13:12.561" starttime="20170914 01:13:12.383"></status>
</kw>
<msg timestamp="20170914 01:13:12.561" level="INFO">${status} = PASS</msg>
<msg timestamp="20170914 01:13:12.561" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170914 01:13:12.561" starttime="20170914 01:13:12.382"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170914 01:13:12.562" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170914 01:13:12.562" starttime="20170914 01:13:12.562"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170914 01:13:12.563" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170914 01:13:12.563" starttime="20170914 01:13:12.562"></status>
</kw>
<status status="PASS" endtime="20170914 01:13:12.563" starttime="20170914 01:13:12.379"></status>
</kw>
<status status="PASS" endtime="20170914 01:13:12.563" starttime="20170914 01:13:12.378"></status>
</kw>
<status status="PASS" endtime="20170914 01:13:12.563" starttime="20170914 01:13:12.377"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170914 01:13:12.564" level="INFO">${base_uri} = /xyz/openbmc_project/software/8764baa3/attr/Activation</msg>
<status status="PASS" endtime="20170914 01:13:12.564" starttime="20170914 01:13:12.564"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170914 01:13:12.565" starttime="20170914 01:13:12.565"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170914 01:13:12.689" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/8764baa3/attr/Activation, headers=None json=None</msg>
<msg timestamp="20170914 01:13:12.689" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170914 01:13:12.689" starttime="20170914 01:13:12.565"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170914 01:13:12.690" starttime="20170914 01:13:12.690"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170914 01:13:12.690" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170914 01:13:12.690" starttime="20170914 01:13:12.690"></status>
</kw>
<msg timestamp="20170914 01:13:12.691" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170914 01:13:12.691" starttime="20170914 01:13:12.376"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170914 01:13:12.691" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170914 01:13:12.692" starttime="20170914 01:13:12.691"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170914 01:13:12.692" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.Software.Activation.Activations.Ready", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170914 01:13:12.692" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170914 01:13:12.692" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.Software.Activation.Activations.Ready'}</msg>
<status status="PASS" endtime="20170914 01:13:12.692" starttime="20170914 01:13:12.692"></status>
</kw>
<status status="PASS" endtime="20170914 01:13:12.693" starttime="20170914 01:13:12.376"></status>
</kw>
<msg timestamp="20170914 01:13:12.693" level="INFO">${ret} = True</msg>
<msg timestamp="20170914 01:13:12.693" level="INFO">${version_id} = 8764baa3</msg>
<status status="PASS" endtime="20170914 01:13:12.693" starttime="20170914 01:13:00.522"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170914 01:13:12.694" starttime="20170914 01:13:12.693"></status>
</kw>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${SOFTWARE_VERSION_URI}${version_id}</arg>
</arguments>
<assign>
<var>${software_state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170914 01:13:12.699" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170914 01:13:12.699" starttime="20170914 01:13:12.699"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170914 01:13:12.700" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170914 01:13:12.700" starttime="20170914 01:13:12.700"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170914 01:13:12.701" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170914 01:13:12.701" starttime="20170914 01:13:12.701"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170914 01:13:12.703" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170914 01:13:12.703" starttime="20170914 01:13:12.702"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170914 01:13:12.946" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170914 01:13:12.946" starttime="20170914 01:13:12.704"></status>
</kw>
<msg timestamp="20170914 01:13:12.947" level="INFO">${status} = PASS</msg>
<msg timestamp="20170914 01:13:12.947" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170914 01:13:12.947" starttime="20170914 01:13:12.703"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170914 01:13:12.948" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170914 01:13:12.948" starttime="20170914 01:13:12.947"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170914 01:13:12.948" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170914 01:13:12.948" starttime="20170914 01:13:12.948"></status>
</kw>
<status status="PASS" endtime="20170914 01:13:12.949" starttime="20170914 01:13:12.698"></status>
</kw>
<status status="PASS" endtime="20170914 01:13:12.949" starttime="20170914 01:13:12.697"></status>
</kw>
<status status="PASS" endtime="20170914 01:13:12.949" starttime="20170914 01:13:12.696"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170914 01:13:12.949" level="INFO">${base_uri} = /xyz/openbmc_project/software/8764baa3</msg>
<status status="PASS" endtime="20170914 01:13:12.949" starttime="20170914 01:13:12.949"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170914 01:13:12.950" starttime="20170914 01:13:12.950"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170914 01:13:13.104" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/8764baa3, headers=None json=None</msg>
<msg timestamp="20170914 01:13:13.104" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170914 01:13:13.104" starttime="20170914 01:13:12.950"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170914 01:13:13.105" starttime="20170914 01:13:13.104"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170914 01:13:13.105" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170914 01:13:13.105" starttime="20170914 01:13:13.105"></status>
</kw>
<msg timestamp="20170914 01:13:13.106" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170914 01:13:13.106" starttime="20170914 01:13:12.695"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170914 01:13:13.106" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170914 01:13:13.107" starttime="20170914 01:13:13.106"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170914 01:13:13.108" level="INFO">To JSON using : content={
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Ready", 
    "ExtendedVersion": "op-build-v1.7-1321-g6eef393-dirty,buildroot-2017.05-163-g8035745,skiboot-v5.8-rc1-pd9d2012,hostboot-c68be97,linux-4.12.8-openpower1-p919e663,petitboot-v1.5.1-p848cad7,machine-xml-c1e49a6-pbb9f626,occ-854999a,hostboot-binaries-67a15fd,capp-ucode-9c73e9f,sbe-4a62126-p180ac2a", 
    "Path": "/tmp/images/8764baa3", 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.Host", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.None", 
    "Version": "IBM-witherspoon-sequoia-ibm-OP9_v1.18_1.54", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170914 01:13:13.108" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170914 01:13:13.108" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'associations': [[u'inventory', u'activation', u'/xyz/openbmc_project/inventory/system/chassis']], u'Activation': u'xyz.openbmc_project.Software.Ac...</msg>
<status status="PASS" endtime="20170914 01:13:13.108" starttime="20170914 01:13:13.107"></status>
</kw>
<msg timestamp="20170914 01:13:13.108" level="INFO">${software_state} = {u'associations': [[u'inventory', u'activation', u'/xyz/openbmc_project/inventory/system/chassis']], u'Activation': u'xyz.openbmc_project.Software.Activation.Activations.Ready', u'Version': u'IBM-with...</msg>
<status status="PASS" endtime="20170914 01:13:13.108" starttime="20170914 01:13:12.694"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>&amp;{software_state}[Activation]</arg>
<arg>${READY}</arg>
</arguments>
<msg timestamp="20170914 01:13:13.109" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20170914 01:13:13.110" starttime="20170914 01:13:13.109"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${REQUESTED_ACTIVE}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20170914 01:13:13.111" level="INFO">${args} = {u'data': 'xyz.openbmc_project.Software.Activation.RequestedActivations.Active'}</msg>
<status status="PASS" endtime="20170914 01:13:13.111" starttime="20170914 01:13:13.110"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${SOFTWARE_VERSION_URI}${version_id}</arg>
<arg>RequestedActivation</arg>
<arg>data=${args}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170914 01:13:13.112" level="INFO">${base_uri} = /xyz/openbmc_project/software/8764baa3</msg>
<status status="PASS" endtime="20170914 01:13:13.112" starttime="20170914 01:13:13.112"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170914 01:13:13.116" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170914 01:13:13.116" starttime="20170914 01:13:13.115"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170914 01:13:13.117" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170914 01:13:13.117" starttime="20170914 01:13:13.116"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170914 01:13:13.117" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170914 01:13:13.117" starttime="20170914 01:13:13.117"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170914 01:13:13.118" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170914 01:13:13.118" starttime="20170914 01:13:13.118"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170914 01:13:13.303" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170914 01:13:13.303" starttime="20170914 01:13:13.119"></status>
</kw>
<msg timestamp="20170914 01:13:13.304" level="INFO">${status} = PASS</msg>
<msg timestamp="20170914 01:13:13.304" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170914 01:13:13.304" starttime="20170914 01:13:13.119"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170914 01:13:13.304" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170914 01:13:13.305" starttime="20170914 01:13:13.304"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170914 01:13:13.305" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170914 01:13:13.305" starttime="20170914 01:13:13.305"></status>
</kw>
<status status="PASS" endtime="20170914 01:13:13.305" starttime="20170914 01:13:13.115"></status>
</kw>
<status status="PASS" endtime="20170914 01:13:13.305" starttime="20170914 01:13:13.114"></status>
</kw>
<status status="PASS" endtime="20170914 01:13:13.306" starttime="20170914 01:13:13.113"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170914 01:13:13.306" level="INFO">${base_uri} = /xyz/openbmc_project/software/8764baa3/attr/RequestedActivation</msg>
<status status="PASS" endtime="20170914 01:13:13.306" starttime="20170914 01:13:13.306"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170914 01:13:13.307" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170914 01:13:13.307" starttime="20170914 01:13:13.307"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20170914 01:13:13.308" starttime="20170914 01:13:13.307"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170914 01:13:13.309" level="INFO">${msg} = URI:https://9.3.21.61/xyz/openbmc_project/software/8764baa3/attr/RequestedActivation, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.Software.Activation.RequestedActivations.Active'}, u'hea...</msg>
<status status="PASS" endtime="20170914 01:13:13.309" starttime="20170914 01:13:13.308"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170914 01:13:13.310" level="INFO">URI:https://9.3.21.61/xyz/openbmc_project/software/8764baa3/attr/RequestedActivation, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.Software.Activation.RequestedActivations.Active'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20170914 01:13:13.310" starttime="20170914 01:13:13.310"></status>
</kw>
<status status="PASS" endtime="20170914 01:13:13.310" starttime="20170914 01:13:13.309"></status>
</kw>
<status status="PASS" endtime="20170914 01:13:13.310" starttime="20170914 01:13:13.308"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170914 01:13:14.304" level="INFO">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/software/8764baa3/attr/RequestedActivation, data={"data": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg timestamp="20170914 01:13:14.304" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170914 01:13:14.304" starttime="20170914 01:13:13.311"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170914 01:13:14.306" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170914 01:13:14.306" starttime="20170914 01:13:14.305"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170914 01:13:14.307" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170914 01:13:14.307" starttime="20170914 01:13:14.307"></status>
</kw>
<status status="PASS" endtime="20170914 01:13:14.307" starttime="20170914 01:13:14.306"></status>
</kw>
<status status="PASS" endtime="20170914 01:13:14.308" starttime="20170914 01:13:14.305"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170914 01:13:14.308" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170914 01:13:14.308" starttime="20170914 01:13:14.308"></status>
</kw>
<msg timestamp="20170914 01:13:14.309" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170914 01:13:14.309" starttime="20170914 01:13:13.113"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170914 01:13:14.309" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170914 01:13:14.309" starttime="20170914 01:13:14.309"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20170914 01:13:14.310" level="INFO">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170914 01:13:14.310" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170914 01:13:14.310" level="INFO">${json} = {u'status': u'ok', u'message': u'200 OK', u'data': None}</msg>
<status status="PASS" endtime="20170914 01:13:14.310" starttime="20170914 01:13:14.310"></status>
</kw>
<status status="PASS" endtime="20170914 01:13:14.310" starttime="20170914 01:13:13.111"></status>
</kw>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${SOFTWARE_VERSION_URI}${version_id}</arg>
</arguments>
<assign>
<var>${software_state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170914 01:13:14.314" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170914 01:13:14.314" starttime="20170914 01:13:14.313"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170914 01:13:14.315" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170914 01:13:14.315" starttime="20170914 01:13:14.315"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170914 01:13:14.316" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170914 01:13:14.316" starttime="20170914 01:13:14.316"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170914 01:13:14.317" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170914 01:13:14.317" starttime="20170914 01:13:14.317"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170914 01:13:15.473" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170914 01:13:15.474" starttime="20170914 01:13:14.319"></status>
</kw>
<msg timestamp="20170914 01:13:15.474" level="INFO">${status} = PASS</msg>
<msg timestamp="20170914 01:13:15.474" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170914 01:13:15.474" starttime="20170914 01:13:14.318"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170914 01:13:15.475" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170914 01:13:15.475" starttime="20170914 01:13:15.474"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170914 01:13:15.475" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170914 01:13:15.475" starttime="20170914 01:13:15.475"></status>
</kw>
<status status="PASS" endtime="20170914 01:13:15.476" starttime="20170914 01:13:14.313"></status>
</kw>
<status status="PASS" endtime="20170914 01:13:15.476" starttime="20170914 01:13:14.312"></status>
</kw>
<status status="PASS" endtime="20170914 01:13:15.476" starttime="20170914 01:13:14.312"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170914 01:13:15.477" level="INFO">${base_uri} = /xyz/openbmc_project/software/8764baa3</msg>
<status status="PASS" endtime="20170914 01:13:15.477" starttime="20170914 01:13:15.476"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170914 01:13:15.477" starttime="20170914 01:13:15.477"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170914 01:13:15.618" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/8764baa3, headers=None json=None</msg>
<msg timestamp="20170914 01:13:15.618" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170914 01:13:15.618" starttime="20170914 01:13:15.478"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170914 01:13:15.620" starttime="20170914 01:13:15.619"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170914 01:13:15.620" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170914 01:13:15.620" starttime="20170914 01:13:15.620"></status>
</kw>
<msg timestamp="20170914 01:13:15.620" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170914 01:13:15.620" starttime="20170914 01:13:14.311"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170914 01:13:15.621" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170914 01:13:15.621" starttime="20170914 01:13:15.621"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170914 01:13:15.622" level="INFO">To JSON using : content={
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "ExtendedVersion": "op-build-v1.7-1321-g6eef393-dirty,buildroot-2017.05-163-g8035745,skiboot-v5.8-rc1-pd9d2012,hostboot-c68be97,linux-4.12.8-openpower1-p919e663,petitboot-v1.5.1-p848cad7,machine-xml-c1e49a6-pbb9f626,occ-854999a,hostboot-binaries-67a15fd,capp-ucode-9c73e9f,sbe-4a62126-p180ac2a", 
    "Path": "/tmp/images/8764baa3", 
    "Progress": 10, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.Host", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "IBM-witherspoon-sequoia-ibm-OP9_v1.18_1.54", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170914 01:13:15.622" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170914 01:13:15.622" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'associations': [[u'inventory', u'activation', u'/xyz/openbmc_project/inventory/system/chassis']], u'Activation': u'xyz.openbmc_project.Software.Ac...</msg>
<status status="PASS" endtime="20170914 01:13:15.622" starttime="20170914 01:13:15.622"></status>
</kw>
<msg timestamp="20170914 01:13:15.623" level="INFO">${software_state} = {u'associations': [[u'inventory', u'activation', u'/xyz/openbmc_project/inventory/system/chassis']], u'Activation': u'xyz.openbmc_project.Software.Activation.Activations.Activating', u'Version': u'IBM...</msg>
<status status="PASS" endtime="20170914 01:13:15.623" starttime="20170914 01:13:14.311"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>&amp;{software_state}[RequestedActivation]</arg>
<arg>${REQUESTED_ACTIVE}</arg>
</arguments>
<msg timestamp="20170914 01:13:15.624" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20170914 01:13:15.624" starttime="20170914 01:13:15.623"></status>
</kw>
<kw name="Wait For Activation State Change" library="code_update_utils">
<doc>Wait for the current activation state of ${version_id} to</doc>
<arguments>
<arg>${version_id}</arg>
<arg>${ACTIVATING}</arg>
</arguments>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170914 01:13:15.631" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170914 01:13:15.631" starttime="20170914 01:13:15.630"></status>
</kw>
<msg timestamp="20170914 01:13:15.631" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170914 01:13:15.631" starttime="20170914 01:13:15.630"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170914 01:13:15.632" starttime="20170914 01:13:15.632"></status>
</kw>
<status status="PASS" endtime="20170914 01:13:15.632" starttime="20170914 01:13:15.631"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170914 01:13:15.633" starttime="20170914 01:13:15.632"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170914 01:13:15.634" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170914 01:13:15.634" starttime="20170914 01:13:15.634"></status>
</kw>
<msg timestamp="20170914 01:13:15.634" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170914 01:13:15.634" starttime="20170914 01:13:15.633"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170914 01:13:15.636" starttime="20170914 01:13:15.636"></status>
</kw>
<status status="PASS" endtime="20170914 01:13:15.636" starttime="20170914 01:13:15.635"></status>
</kw>
<status status="PASS" endtime="20170914 01:13:15.636" starttime="20170914 01:13:15.634"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170914 01:13:15.637" level="INFO">Logging into '9.3.21.61:22' as 'root'.</msg>
<msg timestamp="20170914 01:13:18.083" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170914 01:13:18.083" starttime="20170914 01:13:15.636"></status>
</kw>
<status status="PASS" endtime="20170914 01:13:18.084" starttime="20170914 01:13:15.629"></status>
</kw>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>/xyz/openbmc_project/software/8764baa3</arg>
</arguments>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170914 01:13:18.096" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170914 01:13:18.096" starttime="20170914 01:13:18.095"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170914 01:13:18.097" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170914 01:13:18.097" starttime="20170914 01:13:18.096"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170914 01:13:18.097" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170914 01:13:18.097" starttime="20170914 01:13:18.097"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170914 01:13:18.098" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170914 01:13:18.098" starttime="20170914 01:13:18.098"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170914 01:13:18.277" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170914 01:13:18.277" starttime="20170914 01:13:18.099"></status>
</kw>
<msg timestamp="20170914 01:13:18.277" level="INFO">${status} = PASS</msg>
<msg timestamp="20170914 01:13:18.277" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170914 01:13:18.277" starttime="20170914 01:13:18.098"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170914 01:13:18.278" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170914 01:13:18.278" starttime="20170914 01:13:18.278"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170914 01:13:18.279" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170914 01:13:18.279" starttime="20170914 01:13:18.279"></status>
</kw>
<status status="PASS" endtime="20170914 01:13:18.279" starttime="20170914 01:13:18.095"></status>
</kw>
<status status="PASS" endtime="20170914 01:13:18.280" starttime="20170914 01:13:18.094"></status>
</kw>
<status status="PASS" endtime="20170914 01:13:18.280" starttime="20170914 01:13:18.093"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170914 01:13:18.280" level="INFO">${base_uri} = /xyz/openbmc_project/software/8764baa3</msg>
<status status="PASS" endtime="20170914 01:13:18.280" starttime="20170914 01:13:18.280"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170914 01:13:18.281" starttime="20170914 01:13:18.281"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170914 01:13:18.428" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/8764baa3, headers=None json=None</msg>
<msg timestamp="20170914 01:13:18.428" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170914 01:13:18.428" starttime="20170914 01:13:18.281"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170914 01:13:18.429" starttime="20170914 01:13:18.428"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170914 01:13:18.429" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170914 01:13:18.429" starttime="20170914 01:13:18.429"></status>
</kw>
<msg timestamp="20170914 01:13:18.429" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170914 01:13:18.430" starttime="20170914 01:13:18.093"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170914 01:13:18.430" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170914 01:13:18.431" starttime="20170914 01:13:18.430"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170914 01:13:18.431" level="INFO">To JSON using : content={
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "ExtendedVersion": "op-build-v1.7-1321-g6eef393-dirty,buildroot-2017.05-163-g8035745,skiboot-v5.8-rc1-pd9d2012,hostboot-c68be97,linux-4.12.8-openpower1-p919e663,petitboot-v1.5.1-p848cad7,machine-xml-c1e49a6-pbb9f626,occ-854999a,hostboot-binaries-67a15fd,capp-ucode-9c73e9f,sbe-4a62126-p180ac2a", 
    "Path": "/tmp/images/8764baa3", 
    "Progress": 10, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.Host", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "IBM-witherspoon-sequoia-ibm-OP9_v1.18_1.54", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170914 01:13:18.432" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170914 01:13:18.432" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'associations': [[u'inventory', u'activation', u'/xyz/openbmc_project/inventory/system/chassis']], u'Activation': u'xyz.openbmc_project.Software.Ac...</msg>
<status status="PASS" endtime="20170914 01:13:18.432" starttime="20170914 01:13:18.431"></status>
</kw>
<status status="PASS" endtime="20170914 01:13:18.432" starttime="20170914 01:13:18.092"></status>
</kw>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>/xyz/openbmc_project/software/8764baa3</arg>
</arguments>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170914 01:14:18.492" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170914 01:14:18.493" starttime="20170914 01:14:18.492"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170914 01:14:18.493" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170914 01:14:18.493" starttime="20170914 01:14:18.493"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170914 01:14:18.494" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170914 01:14:18.494" starttime="20170914 01:14:18.494"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170914 01:14:18.495" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170914 01:14:18.495" starttime="20170914 01:14:18.494"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170914 01:14:18.684" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170914 01:14:18.684" starttime="20170914 01:14:18.495"></status>
</kw>
<msg timestamp="20170914 01:14:18.685" level="INFO">${status} = PASS</msg>
<msg timestamp="20170914 01:14:18.685" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170914 01:14:18.685" starttime="20170914 01:14:18.495"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170914 01:14:18.685" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170914 01:14:18.686" starttime="20170914 01:14:18.685"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170914 01:14:18.686" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170914 01:14:18.686" starttime="20170914 01:14:18.686"></status>
</kw>
<status status="PASS" endtime="20170914 01:14:18.686" starttime="20170914 01:14:18.491"></status>
</kw>
<status status="PASS" endtime="20170914 01:14:18.686" starttime="20170914 01:14:18.490"></status>
</kw>
<status status="PASS" endtime="20170914 01:14:18.687" starttime="20170914 01:14:18.487"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170914 01:14:18.687" level="INFO">${base_uri} = /xyz/openbmc_project/software/8764baa3</msg>
<status status="PASS" endtime="20170914 01:14:18.687" starttime="20170914 01:14:18.687"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170914 01:14:18.688" starttime="20170914 01:14:18.688"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170914 01:14:18.801" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/8764baa3, headers=None json=None</msg>
<msg timestamp="20170914 01:14:18.801" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170914 01:14:18.801" starttime="20170914 01:14:18.688"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170914 01:14:18.802" starttime="20170914 01:14:18.802"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170914 01:14:18.803" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170914 01:14:18.803" starttime="20170914 01:14:18.802"></status>
</kw>
<msg timestamp="20170914 01:14:18.803" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170914 01:14:18.803" starttime="20170914 01:14:18.486"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170914 01:14:18.804" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170914 01:14:18.804" starttime="20170914 01:14:18.803"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170914 01:14:18.804" level="INFO">To JSON using : content={
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Active", 
    "ExtendedVersion": "op-build-v1.7-1321-g6eef393-dirty,buildroot-2017.05-163-g8035745,skiboot-v5.8-rc1-pd9d2012,hostboot-c68be97,linux-4.12.8-openpower1-p919e663,petitboot-v1.5.1-p848cad7,machine-xml-c1e49a6-pbb9f626,occ-854999a,hostboot-binaries-67a15fd,capp-ucode-9c73e9f,sbe-4a62126-p180ac2a", 
    "Path": "/tmp/images/8764baa3", 
    "Priority": 0, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.Host", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "IBM-witherspoon-sequoia-ibm-OP9_v1.18_1.54", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170914 01:14:18.804" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170914 01:14:18.805" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'associations': [[u'inventory', u'activation', u'/xyz/openbmc_project/inventory/system/chassis']], u'Activation': u'xyz.openbmc_project.Software.Ac...</msg>
<status status="PASS" endtime="20170914 01:14:18.805" starttime="20170914 01:14:18.804"></status>
</kw>
<status status="PASS" endtime="20170914 01:14:18.805" starttime="20170914 01:14:18.485"></status>
</kw>
<status status="PASS" endtime="20170914 01:14:18.805" starttime="20170914 01:13:15.624"></status>
</kw>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${SOFTWARE_VERSION_URI}${version_id}</arg>
</arguments>
<assign>
<var>${software_state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170914 01:14:18.809" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170914 01:14:18.809" starttime="20170914 01:14:18.808"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170914 01:14:18.810" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170914 01:14:18.810" starttime="20170914 01:14:18.809"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170914 01:14:18.810" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170914 01:14:18.810" starttime="20170914 01:14:18.810"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170914 01:14:18.811" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170914 01:14:18.811" starttime="20170914 01:14:18.811"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170914 01:14:18.998" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170914 01:14:18.999" starttime="20170914 01:14:18.812"></status>
</kw>
<msg timestamp="20170914 01:14:18.999" level="INFO">${status} = PASS</msg>
<msg timestamp="20170914 01:14:18.999" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170914 01:14:18.999" starttime="20170914 01:14:18.811"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170914 01:14:19.000" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170914 01:14:19.000" starttime="20170914 01:14:18.999"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170914 01:14:19.000" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170914 01:14:19.001" starttime="20170914 01:14:19.000"></status>
</kw>
<status status="PASS" endtime="20170914 01:14:19.001" starttime="20170914 01:14:18.807"></status>
</kw>
<status status="PASS" endtime="20170914 01:14:19.001" starttime="20170914 01:14:18.807"></status>
</kw>
<status status="PASS" endtime="20170914 01:14:19.001" starttime="20170914 01:14:18.806"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170914 01:14:19.001" level="INFO">${base_uri} = /xyz/openbmc_project/software/8764baa3</msg>
<status status="PASS" endtime="20170914 01:14:19.001" starttime="20170914 01:14:19.001"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170914 01:14:19.002" starttime="20170914 01:14:19.002"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170914 01:14:19.118" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/8764baa3, headers=None json=None</msg>
<msg timestamp="20170914 01:14:19.118" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170914 01:14:19.119" starttime="20170914 01:14:19.002"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170914 01:14:19.119" starttime="20170914 01:14:19.119"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170914 01:14:19.120" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170914 01:14:19.120" starttime="20170914 01:14:19.120"></status>
</kw>
<msg timestamp="20170914 01:14:19.121" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170914 01:14:19.121" starttime="20170914 01:14:18.806"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170914 01:14:19.122" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170914 01:14:19.122" starttime="20170914 01:14:19.121"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170914 01:14:19.123" level="INFO">To JSON using : content={
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Active", 
    "ExtendedVersion": "op-build-v1.7-1321-g6eef393-dirty,buildroot-2017.05-163-g8035745,skiboot-v5.8-rc1-pd9d2012,hostboot-c68be97,linux-4.12.8-openpower1-p919e663,petitboot-v1.5.1-p848cad7,machine-xml-c1e49a6-pbb9f626,occ-854999a,hostboot-binaries-67a15fd,capp-ucode-9c73e9f,sbe-4a62126-p180ac2a", 
    "Path": "/tmp/images/8764baa3", 
    "Priority": 0, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.Host", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "IBM-witherspoon-sequoia-ibm-OP9_v1.18_1.54", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170914 01:14:19.123" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170914 01:14:19.123" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'associations': [[u'inventory', u'activation', u'/xyz/openbmc_project/inventory/system/chassis']], u'Activation': u'xyz.openbmc_project.Software.Ac...</msg>
<status status="PASS" endtime="20170914 01:14:19.123" starttime="20170914 01:14:19.122"></status>
</kw>
<msg timestamp="20170914 01:14:19.123" level="INFO">${software_state} = {u'associations': [[u'inventory', u'activation', u'/xyz/openbmc_project/inventory/system/chassis']], u'Activation': u'xyz.openbmc_project.Software.Activation.Activations.Active', u'Priority': 0, u'Ver...</msg>
<status status="PASS" endtime="20170914 01:14:19.123" starttime="20170914 01:14:18.805"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>&amp;{software_state}[Activation]</arg>
<arg>${ACTIVE}</arg>
</arguments>
<msg timestamp="20170914 01:14:19.124" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20170914 01:14:19.125" starttime="20170914 01:14:19.124"></status>
</kw>
<status status="PASS" endtime="20170914 01:14:19.125" starttime="20170914 01:12:34.404"></status>
</kw>
<kw name="OBMC Reboot (off)" library="boot_utils">
<doc>Do "OBMC Reboot (off)" boot test.</doc>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>OBMC Boot Test \ loc_boot_stack=OBMC Reboot (off)</arg>
<arg>\ loc_stack_mode=${stack_mode} \ loc_quiet=${quiet}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170914 01:14:19.126" level="INFO">${cmd_buf} = OBMC Boot Test  loc_boot_stack=OBMC Reboot (off)  loc_stack_mode=normal  loc_quiet=1</msg>
<status status="PASS" endtime="20170914 01:14:19.126" starttime="20170914 01:14:19.126"></status>
</kw>
<kw name="Run Key U" library="gen_robot_keyword">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<kw name="OBMC Boot Test" library="obmc_boot_test_resource">
<arguments>
<arg>loc_boot_stack=OBMC Reboot (off)</arg>
<arg>loc_stack_mode=normal</arg>
<arg>loc_quiet=1</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${pos_arg1}' != '${EMPTY}'</arg>
<arg>Set To Dictionary</arg>
<arg>${arguments}</arg>
<arg>loc_boot_stack=${pos_arg1}</arg>
</arguments>
<status status="PASS" endtime="20170914 01:14:19.132" starttime="20170914 01:14:19.132"></status>
</kw>
<kw name="Obmc Boot Test Py" library="obmc_boot_test">
<doc>Do main program processing.</doc>
<arguments>
<arg>&amp;{arguments}</arg>
</arguments>
<msg timestamp="20170914 01:14:19.134" level="INFO">${boot_stack} = OBMC Reboot (off)</msg>
<msg timestamp="20170914 01:14:19.134" level="INFO">${stack_mode} = normal</msg>
<msg timestamp="20170914 01:14:19.135" level="INFO">${quiet} = 1</msg>
<kw name="Get BMC System Model" library="utils">
<doc>Get the BMC model from the device tree.</doc>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20170914 01:14:19.210" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.21.61
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170914 01:14:19.211" level="INFO">Logging into '9.3.21.61:22' as 'root'.</msg>
<msg timestamp="20170914 01:14:20.001" level="INFO">Read output: root@witherspoon:~#</msg>
<msg timestamp="20170914 01:14:20.001" level="INFO">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg timestamp="20170914 01:14:20.078" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170914 01:14:20.089" level="INFO">${bmc_model} = Witherspoon</msg>
<msg timestamp="20170914 01:14:20.089" level="INFO">${stderr} = </msg>
<msg timestamp="20170914 01:14:20.089" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20170914 01:14:20.089" starttime="20170914 01:14:19.190"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170914 01:14:20.090" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170914 01:14:20.090" starttime="20170914 01:14:20.090"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg timestamp="20170914 01:14:20.090" level="INFO">Length is 11</msg>
<status status="PASS" endtime="20170914 01:14:20.090" starttime="20170914 01:14:20.090"></status>
</kw>
<status status="PASS" endtime="20170914 01:14:20.091" starttime="20170914 01:14:19.189"></status>
</kw>
<msg timestamp="20170914 01:14:20.091" level="INFO">${openbmc_model} = Witherspoon</msg>
<msg timestamp="20170914 01:14:20.438" level="INFO">${plug_in_packages_list} = []</msg>
<kw name="Set BMC Power Policy" library="utils">
<doc>Set the given BMC power policy.</doc>
<arguments>
<arg>RESTORE_LAST_STATE</arg>
</arguments>
<kw name="Set Power Policy Method" library="utils">
<doc>Set the global bmc_power_policy_method to either 'Old' or 'New'.</doc>
<kw name="New Get Power Policy" library="utils">
<doc>Get the BMC power policy (new method).</doc>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${POWER_RESTORE_URI}</arg>
<arg>PowerRestorePolicy</arg>
</arguments>
<assign>
<var>${currentPolicy}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170914 01:14:20.469" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170914 01:14:20.471" starttime="20170914 01:14:20.469"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170914 01:14:20.471" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170914 01:14:20.472" starttime="20170914 01:14:20.471"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170914 01:14:20.472" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170914 01:14:20.473" starttime="20170914 01:14:20.472"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170914 01:14:20.474" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170914 01:14:20.474" starttime="20170914 01:14:20.473"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170914 01:14:20.701" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170914 01:14:20.701" starttime="20170914 01:14:20.475"></status>
</kw>
<msg timestamp="20170914 01:14:20.701" level="INFO">${status} = PASS</msg>
<msg timestamp="20170914 01:14:20.701" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170914 01:14:20.701" starttime="20170914 01:14:20.474"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170914 01:14:20.702" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170914 01:14:20.702" starttime="20170914 01:14:20.702"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170914 01:14:20.703" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170914 01:14:20.703" starttime="20170914 01:14:20.702"></status>
</kw>
<status status="PASS" endtime="20170914 01:14:20.703" starttime="20170914 01:14:20.468"></status>
</kw>
<status status="PASS" endtime="20170914 01:14:20.703" starttime="20170914 01:14:20.467"></status>
</kw>
<status status="PASS" endtime="20170914 01:14:20.703" starttime="20170914 01:14:20.465"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170914 01:14:20.704" level="INFO">${base_uri} = /xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy</msg>
<status status="PASS" endtime="20170914 01:14:20.704" starttime="20170914 01:14:20.703"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170914 01:14:20.704" starttime="20170914 01:14:20.704"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170914 01:14:20.771" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy, headers=None json=None</msg>
<msg timestamp="20170914 01:14:20.771" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170914 01:14:20.771" starttime="20170914 01:14:20.705"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170914 01:14:20.772" starttime="20170914 01:14:20.772"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170914 01:14:20.773" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170914 01:14:20.773" starttime="20170914 01:14:20.773"></status>
</kw>
<msg timestamp="20170914 01:14:20.774" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170914 01:14:20.774" starttime="20170914 01:14:20.463"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170914 01:14:20.775" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170914 01:14:20.775" starttime="20170914 01:14:20.774"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170914 01:14:20.775" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.Control.Power.RestorePolicy.Policy.AlwaysOff", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170914 01:14:20.775" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170914 01:14:20.775" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.Control.Power.RestorePolicy.Policy.AlwaysOff'}</msg>
<status status="PASS" endtime="20170914 01:14:20.775" starttime="20170914 01:14:20.775"></status>
</kw>
<msg timestamp="20170914 01:14:20.776" level="INFO">${currentPolicy} = xyz.openbmc_project.Control.Power.RestorePolicy.Policy.AlwaysOff</msg>
<status status="PASS" endtime="20170914 01:14:20.776" starttime="20170914 01:14:20.463"></status>
</kw>
<status status="PASS" endtime="20170914 01:14:20.776" starttime="20170914 01:14:20.462"></status>
</kw>
<msg timestamp="20170914 01:14:20.776" level="INFO">${bmc_power_policy_method} = New</msg>
<msg timestamp="20170914 01:14:20.777" level="INFO">${power_policy_setup} = 1</msg>
<status status="PASS" endtime="20170914 01:14:20.777" starttime="20170914 01:14:20.453"></status>
</kw>
<kw name="Translate Power Policy Value" library="utils">
<doc>Translate the policy value and return the result.</doc>
<arguments>
<arg>${policy}</arg>
</arguments>
<assign>
<var>${policy}</var>
</assign>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${RESTORE_LAST_STATE}</arg>
</arguments>
<status status="PASS" endtime="20170914 01:14:20.778" starttime="20170914 01:14:20.778"></status>
</kw>
<msg timestamp="20170914 01:14:20.779" level="INFO">${policy} = xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore</msg>
<status status="PASS" endtime="20170914 01:14:20.779" starttime="20170914 01:14:20.777"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${bmc_power_policy_method} Set Power Policy \ ${policy}</arg>
</arguments>
<kw name="New Set Power Policy" library="utils">
<doc>Set the given BMC power policy (new method).</doc>
<arguments>
<arg>xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${policy}</arg>
</arguments>
<assign>
<var>${valueDict}</var>
</assign>
<msg timestamp="20170914 01:14:20.795" level="INFO">${valueDict} = {u'data': u'xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore'}</msg>
<status status="PASS" endtime="20170914 01:14:20.795" starttime="20170914 01:14:20.794"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${POWER_RESTORE_URI}</arg>
<arg>PowerRestorePolicy</arg>
<arg>data=${valueDict}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170914 01:14:20.796" level="INFO">${base_uri} = /xyz/openbmc_project/control/host0/power_restore_policy</msg>
<status status="PASS" endtime="20170914 01:14:20.796" starttime="20170914 01:14:20.796"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170914 01:14:20.799" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170914 01:14:20.799" starttime="20170914 01:14:20.799"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170914 01:14:20.800" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170914 01:14:20.800" starttime="20170914 01:14:20.800"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170914 01:14:20.801" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170914 01:14:20.801" starttime="20170914 01:14:20.800"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170914 01:14:20.801" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170914 01:14:20.802" starttime="20170914 01:14:20.801"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170914 01:14:20.988" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170914 01:14:20.988" starttime="20170914 01:14:20.802"></status>
</kw>
<msg timestamp="20170914 01:14:20.988" level="INFO">${status} = PASS</msg>
<msg timestamp="20170914 01:14:20.988" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170914 01:14:20.989" starttime="20170914 01:14:20.802"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170914 01:14:20.989" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170914 01:14:20.989" starttime="20170914 01:14:20.989"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170914 01:14:20.990" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170914 01:14:20.990" starttime="20170914 01:14:20.990"></status>
</kw>
<status status="PASS" endtime="20170914 01:14:20.990" starttime="20170914 01:14:20.798"></status>
</kw>
<status status="PASS" endtime="20170914 01:14:20.990" starttime="20170914 01:14:20.798"></status>
</kw>
<status status="PASS" endtime="20170914 01:14:20.991" starttime="20170914 01:14:20.797"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170914 01:14:20.991" level="INFO">${base_uri} = /xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy</msg>
<status status="PASS" endtime="20170914 01:14:20.991" starttime="20170914 01:14:20.991"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170914 01:14:20.992" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170914 01:14:20.992" starttime="20170914 01:14:20.991"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20170914 01:14:20.992" starttime="20170914 01:14:20.992"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170914 01:14:20.994" level="INFO">${msg} = URI:https://9.3.21.61/xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy, method:Put, args:{u'data': {u'data': u'xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Rest...</msg>
<status status="PASS" endtime="20170914 01:14:20.994" starttime="20170914 01:14:20.993"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170914 01:14:20.995" level="INFO">URI:https://9.3.21.61/xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy, method:Put, args:{u'data': {u'data': u'xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20170914 01:14:20.995" starttime="20170914 01:14:20.995"></status>
</kw>
<status status="PASS" endtime="20170914 01:14:20.996" starttime="20170914 01:14:20.995"></status>
</kw>
<status status="PASS" endtime="20170914 01:14:20.996" starttime="20170914 01:14:20.993"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170914 01:14:21.137" level="INFO">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy, data={"data": "xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg timestamp="20170914 01:14:21.138" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170914 01:14:21.138" starttime="20170914 01:14:20.996"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170914 01:14:21.139" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170914 01:14:21.139" starttime="20170914 01:14:21.139"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170914 01:14:21.140" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170914 01:14:21.140" starttime="20170914 01:14:21.140"></status>
</kw>
<status status="PASS" endtime="20170914 01:14:21.140" starttime="20170914 01:14:21.139"></status>
</kw>
<status status="PASS" endtime="20170914 01:14:21.140" starttime="20170914 01:14:21.138"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170914 01:14:21.142" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170914 01:14:21.142" starttime="20170914 01:14:21.142"></status>
</kw>
<msg timestamp="20170914 01:14:21.142" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170914 01:14:21.142" starttime="20170914 01:14:20.796"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170914 01:14:21.143" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170914 01:14:21.143" starttime="20170914 01:14:21.143"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20170914 01:14:21.144" level="INFO">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170914 01:14:21.144" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170914 01:14:21.144" level="INFO">${json} = {u'status': u'ok', u'message': u'200 OK', u'data': None}</msg>
<status status="PASS" endtime="20170914 01:14:21.145" starttime="20170914 01:14:21.144"></status>
</kw>
<status status="PASS" endtime="20170914 01:14:21.145" starttime="20170914 01:14:20.795"></status>
</kw>
<status status="PASS" endtime="20170914 01:14:21.145" starttime="20170914 01:14:20.793"></status>
</kw>
<status status="PASS" endtime="20170914 01:14:21.145" starttime="20170914 01:14:20.779"></status>
</kw>
<kw name="Get System Power Policy" library="utils">
<doc>Get the BMC power policy.</doc>
<assign>
<var>${currentPolicy}</var>
</assign>
<kw name="Set Power Policy Method" library="utils">
<doc>Set the global bmc_power_policy_method to either 'Old' or 'New'.</doc>
<status status="PASS" endtime="20170914 01:14:21.147" starttime="20170914 01:14:21.146"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${bmc_power_policy_method} Get Power Policy</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170914 01:14:21.147" level="INFO">${cmd_buf} = [u'New Get Power Policy']</msg>
<status status="PASS" endtime="20170914 01:14:21.147" starttime="20170914 01:14:21.147"></status>
</kw>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>@{cmd_buf}</arg>
</arguments>
<assign>
<var>${currentPolicy}</var>
</assign>
<kw name="New Get Power Policy" library="utils">
<doc>Get the BMC power policy (new method).</doc>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${POWER_RESTORE_URI}</arg>
<arg>PowerRestorePolicy</arg>
</arguments>
<assign>
<var>${currentPolicy}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170914 01:14:21.153" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170914 01:14:21.154" starttime="20170914 01:14:21.152"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170914 01:14:21.154" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170914 01:14:21.154" starttime="20170914 01:14:21.154"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170914 01:14:21.155" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170914 01:14:21.155" starttime="20170914 01:14:21.154"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170914 01:14:21.155" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170914 01:14:21.156" starttime="20170914 01:14:21.155"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170914 01:14:21.376" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170914 01:14:21.376" starttime="20170914 01:14:21.156"></status>
</kw>
<msg timestamp="20170914 01:14:21.376" level="INFO">${status} = PASS</msg>
<msg timestamp="20170914 01:14:21.376" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170914 01:14:21.376" starttime="20170914 01:14:21.156"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170914 01:14:21.377" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170914 01:14:21.377" starttime="20170914 01:14:21.376"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170914 01:14:21.378" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170914 01:14:21.378" starttime="20170914 01:14:21.377"></status>
</kw>
<status status="PASS" endtime="20170914 01:14:21.378" starttime="20170914 01:14:21.152"></status>
</kw>
<status status="PASS" endtime="20170914 01:14:21.378" starttime="20170914 01:14:21.151"></status>
</kw>
<status status="PASS" endtime="20170914 01:14:21.378" starttime="20170914 01:14:21.150"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170914 01:14:21.379" level="INFO">${base_uri} = /xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy</msg>
<status status="PASS" endtime="20170914 01:14:21.379" starttime="20170914 01:14:21.378"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170914 01:14:21.379" starttime="20170914 01:14:21.379"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170914 01:14:21.475" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/control/host0/power_restore_policy/attr/PowerRestorePolicy, headers=None json=None</msg>
<msg timestamp="20170914 01:14:21.475" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170914 01:14:21.475" starttime="20170914 01:14:21.380"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170914 01:14:21.475" starttime="20170914 01:14:21.475"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170914 01:14:21.476" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170914 01:14:21.476" starttime="20170914 01:14:21.476"></status>
</kw>
<msg timestamp="20170914 01:14:21.476" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170914 01:14:21.476" starttime="20170914 01:14:21.149"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170914 01:14:21.477" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170914 01:14:21.477" starttime="20170914 01:14:21.477"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170914 01:14:21.478" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170914 01:14:21.478" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170914 01:14:21.478" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore'}</msg>
<status status="PASS" endtime="20170914 01:14:21.478" starttime="20170914 01:14:21.477"></status>
</kw>
<msg timestamp="20170914 01:14:21.478" level="INFO">${currentPolicy} = xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore</msg>
<status status="PASS" endtime="20170914 01:14:21.478" starttime="20170914 01:14:21.149"></status>
</kw>
<status status="PASS" endtime="20170914 01:14:21.478" starttime="20170914 01:14:21.148"></status>
</kw>
<msg timestamp="20170914 01:14:21.479" level="INFO">${currentPolicy} = xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore</msg>
<status status="PASS" endtime="20170914 01:14:21.479" starttime="20170914 01:14:21.148"></status>
</kw>
<msg timestamp="20170914 01:14:21.479" level="INFO">${currentPolicy} = xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore</msg>
<status status="PASS" endtime="20170914 01:14:21.479" starttime="20170914 01:14:21.145"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${currentPolicy}</arg>
<arg>${policy}</arg>
</arguments>
<msg timestamp="20170914 01:14:21.479" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20170914 01:14:21.479" starttime="20170914 01:14:21.479"></status>
</kw>
<status status="PASS" endtime="20170914 01:14:21.480" starttime="20170914 01:14:20.452"></status>
</kw>
<msg timestamp="20170914 01:14:21.563" level="INFO">Log level changed from NONE to INFO.</msg>
<msg timestamp="20170914 01:14:21.607" level="INFO">Log level changed from NONE to INFO.</msg>
<msg timestamp="20170914 01:14:21.616" level="INFO">${TEST_MESSAGE} = </msg>
<msg timestamp="20170914 01:14:21.616" level="INFO">${FFDC_LOG_PATH} = ./</msg>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170914 01:14:21.657" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170914 01:14:21.658" starttime="20170914 01:14:21.656"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170914 01:14:21.659" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170914 01:14:21.659" starttime="20170914 01:14:21.659"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170914 01:14:21.660" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170914 01:14:21.660" starttime="20170914 01:14:21.660"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170914 01:14:21.661" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170914 01:14:21.661" starttime="20170914 01:14:21.661"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170914 01:14:21.901" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170914 01:14:21.901" starttime="20170914 01:14:21.663"></status>
</kw>
<msg timestamp="20170914 01:14:21.901" level="INFO">${status} = PASS</msg>
<msg timestamp="20170914 01:14:21.901" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170914 01:14:21.901" starttime="20170914 01:14:21.662"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170914 01:14:21.902" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170914 01:14:21.902" starttime="20170914 01:14:21.902"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170914 01:14:21.903" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170914 01:14:21.903" starttime="20170914 01:14:21.902"></status>
</kw>
<status status="PASS" endtime="20170914 01:14:21.903" starttime="20170914 01:14:21.655"></status>
</kw>
<status status="PASS" endtime="20170914 01:14:21.903" starttime="20170914 01:14:21.654"></status>
</kw>
<status status="PASS" endtime="20170914 01:14:21.903" starttime="20170914 01:14:21.652"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170914 01:14:21.904" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170914 01:14:21.904" starttime="20170914 01:14:21.903"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170914 01:14:21.904" starttime="20170914 01:14:21.904"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170914 01:14:21.972" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170914 01:14:21.973" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170914 01:14:21.973" starttime="20170914 01:14:21.905"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170914 01:14:21.973" starttime="20170914 01:14:21.973"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170914 01:14:21.974" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170914 01:14:21.974" starttime="20170914 01:14:21.974"></status>
</kw>
<msg timestamp="20170914 01:14:21.974" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170914 01:14:21.974" starttime="20170914 01:14:21.651"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170914 01:14:21.975" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170914 01:14:21.975" starttime="20170914 01:14:21.974"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170914 01:14:21.975" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170914 01:14:21.975" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170914 01:14:21.976" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status status="PASS" endtime="20170914 01:14:21.976" starttime="20170914 01:14:21.975"></status>
</kw>
<msg timestamp="20170914 01:14:21.976" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" endtime="20170914 01:14:21.976" starttime="20170914 01:14:21.651"></status>
</kw>
<status status="PASS" endtime="20170914 01:14:21.976" starttime="20170914 01:14:21.648"></status>
</kw>
<kw name="Get BMC State" library="state_manager">
<doc>Return the state of the BMC.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${BMC_STATE_URI}</arg>
<arg>CurrentBMCState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170914 01:14:21.980" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170914 01:14:21.981" starttime="20170914 01:14:21.980"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170914 01:14:21.982" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170914 01:14:21.982" starttime="20170914 01:14:21.981"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170914 01:14:21.982" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170914 01:14:21.982" starttime="20170914 01:14:21.982"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170914 01:14:21.983" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170914 01:14:21.983" starttime="20170914 01:14:21.983"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170914 01:14:22.160" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170914 01:14:22.160" starttime="20170914 01:14:21.984"></status>
</kw>
<msg timestamp="20170914 01:14:22.160" level="INFO">${status} = PASS</msg>
<msg timestamp="20170914 01:14:22.160" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170914 01:14:22.160" starttime="20170914 01:14:21.983"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170914 01:14:22.161" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170914 01:14:22.161" starttime="20170914 01:14:22.161"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170914 01:14:22.162" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170914 01:14:22.162" starttime="20170914 01:14:22.162"></status>
</kw>
<status status="PASS" endtime="20170914 01:14:22.162" starttime="20170914 01:14:21.980"></status>
</kw>
<status status="PASS" endtime="20170914 01:14:22.162" starttime="20170914 01:14:21.979"></status>
</kw>
<status status="PASS" endtime="20170914 01:14:22.162" starttime="20170914 01:14:21.979"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170914 01:14:22.163" level="INFO">${base_uri} = /xyz/openbmc_project/state/bmc0//attr/CurrentBMCState</msg>
<status status="PASS" endtime="20170914 01:14:22.163" starttime="20170914 01:14:22.163"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170914 01:14:22.164" starttime="20170914 01:14:22.163"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170914 01:14:22.228" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/bmc0//attr/CurrentBMCState, headers=None json=None</msg>
<msg timestamp="20170914 01:14:22.228" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170914 01:14:22.228" starttime="20170914 01:14:22.164"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170914 01:14:22.229" starttime="20170914 01:14:22.229"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170914 01:14:22.230" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170914 01:14:22.230" starttime="20170914 01:14:22.229"></status>
</kw>
<msg timestamp="20170914 01:14:22.230" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170914 01:14:22.230" starttime="20170914 01:14:21.978"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170914 01:14:22.231" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170914 01:14:22.231" starttime="20170914 01:14:22.230"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170914 01:14:22.231" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.BMC.BMCState.Ready", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170914 01:14:22.231" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170914 01:14:22.231" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.BMC.BMCState.Ready'}</msg>
<status status="PASS" endtime="20170914 01:14:22.231" starttime="20170914 01:14:22.231"></status>
</kw>
<msg timestamp="20170914 01:14:22.232" level="INFO">${state} = xyz.openbmc_project.State.BMC.BMCState.Ready</msg>
<status status="PASS" endtime="20170914 01:14:22.232" starttime="20170914 01:14:21.977"></status>
</kw>
<status status="PASS" endtime="20170914 01:14:22.232" starttime="20170914 01:14:21.977"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<doc>Get the boot progress and return it.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Set Boot Progress Method" library="utils">
<doc>Set the boot_prog_method to either 'Old' or 'New'.</doc>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${boot_prog_method}' != '${EMPTY}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<status status="PASS" endtime="20170914 01:14:22.234" starttime="20170914 01:14:22.233"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>New Get Boot Progress</arg>
</arguments>
<assign>
<var>${new_status}</var>
<var>${new_value}</var>
</assign>
<kw name="New Get Boot Progress" library="utils">
<doc>Get the boot progress the new way (via xyz location).</doc>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>BootProgress</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170914 01:14:22.238" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170914 01:14:22.238" starttime="20170914 01:14:22.237"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170914 01:14:22.239" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170914 01:14:22.239" starttime="20170914 01:14:22.239"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170914 01:14:22.240" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170914 01:14:22.240" starttime="20170914 01:14:22.239"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170914 01:14:22.241" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170914 01:14:22.241" starttime="20170914 01:14:22.240"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170914 01:14:22.460" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170914 01:14:22.461" starttime="20170914 01:14:22.241"></status>
</kw>
<msg timestamp="20170914 01:14:22.461" level="INFO">${status} = PASS</msg>
<msg timestamp="20170914 01:14:22.461" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170914 01:14:22.461" starttime="20170914 01:14:22.241"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170914 01:14:22.462" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170914 01:14:22.462" starttime="20170914 01:14:22.461"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170914 01:14:22.462" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170914 01:14:22.462" starttime="20170914 01:14:22.462"></status>
</kw>
<status status="PASS" endtime="20170914 01:14:22.463" starttime="20170914 01:14:22.237"></status>
</kw>
<status status="PASS" endtime="20170914 01:14:22.463" starttime="20170914 01:14:22.236"></status>
</kw>
<status status="PASS" endtime="20170914 01:14:22.463" starttime="20170914 01:14:22.236"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170914 01:14:22.463" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status status="PASS" endtime="20170914 01:14:22.463" starttime="20170914 01:14:22.463"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170914 01:14:22.464" starttime="20170914 01:14:22.464"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170914 01:14:22.586" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg timestamp="20170914 01:14:22.586" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170914 01:14:22.586" starttime="20170914 01:14:22.464"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170914 01:14:22.587" starttime="20170914 01:14:22.586"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170914 01:14:22.587" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170914 01:14:22.587" starttime="20170914 01:14:22.587"></status>
</kw>
<msg timestamp="20170914 01:14:22.587" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170914 01:14:22.587" starttime="20170914 01:14:22.235"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170914 01:14:22.588" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170914 01:14:22.588" starttime="20170914 01:14:22.588"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170914 01:14:22.589" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170914 01:14:22.589" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170914 01:14:22.589" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified'}</msg>
<status status="PASS" endtime="20170914 01:14:22.589" starttime="20170914 01:14:22.588"></status>
</kw>
<msg timestamp="20170914 01:14:22.589" level="INFO">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status status="PASS" endtime="20170914 01:14:22.589" starttime="20170914 01:14:22.235"></status>
</kw>
<status status="PASS" endtime="20170914 01:14:22.590" starttime="20170914 01:14:22.234"></status>
</kw>
<msg timestamp="20170914 01:14:22.590" level="INFO">${new_status} = PASS</msg>
<msg timestamp="20170914 01:14:22.590" level="INFO">${new_value} = Unspecified</msg>
<status status="PASS" endtime="20170914 01:14:22.590" starttime="20170914 01:14:22.234"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${new_status}' == 'PASS'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${boot_prog_method}</arg>
<arg>New</arg>
<arg>AND</arg>
<arg>Rqpvars</arg>
<arg>boot_prog_method</arg>
<arg>AND</arg>
<arg>Return From Keyword</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set Global Variable</arg>
<arg>${boot_prog_method}</arg>
<arg>New</arg>
<arg>AND</arg>
<arg>Rqpvars</arg>
<arg>boot_prog_method</arg>
<arg>AND</arg>
<arg>Return From Keyword</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${boot_prog_method}</arg>
<arg>New</arg>
</arguments>
<msg timestamp="20170914 01:14:22.592" level="INFO">${boot_prog_method} = New</msg>
<status status="PASS" endtime="20170914 01:14:22.592" starttime="20170914 01:14:22.591"></status>
</kw>
<kw name="Rqpvars" library="gen_robot_print">
<arguments>
<arg>boot_prog_method</arg>
</arguments>
<status status="PASS" endtime="20170914 01:14:22.592" starttime="20170914 01:14:22.592"></status>
</kw>
<kw name="Return From Keyword" library="BuiltIn">
<doc>Returns from the enclosing user keyword.</doc>
<msg timestamp="20170914 01:14:22.593" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20170914 01:14:22.593" starttime="20170914 01:14:22.593"></status>
</kw>
<status status="PASS" endtime="20170914 01:14:22.593" starttime="20170914 01:14:22.591"></status>
</kw>
<status status="PASS" endtime="20170914 01:14:22.593" starttime="20170914 01:14:22.590"></status>
</kw>
<status status="PASS" endtime="20170914 01:14:22.593" starttime="20170914 01:14:22.233"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${boot_prog_method}' == 'New'</arg>
<arg>New Get Boot Progress</arg>
<arg>quiet=${quiet}</arg>
<arg>ELSE</arg>
<arg>Old Get Boot Progress</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="New Get Boot Progress" library="utils">
<doc>Get the boot progress the new way (via xyz location).</doc>
<arguments>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>BootProgress</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170914 01:14:22.601" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170914 01:14:22.602" starttime="20170914 01:14:22.597"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170914 01:14:22.603" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170914 01:14:22.603" starttime="20170914 01:14:22.602"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170914 01:14:22.603" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170914 01:14:22.603" starttime="20170914 01:14:22.603"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170914 01:14:22.604" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170914 01:14:22.604" starttime="20170914 01:14:22.604"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170914 01:14:22.800" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170914 01:14:22.800" starttime="20170914 01:14:22.605"></status>
</kw>
<msg timestamp="20170914 01:14:22.800" level="INFO">${status} = PASS</msg>
<msg timestamp="20170914 01:14:22.800" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170914 01:14:22.800" starttime="20170914 01:14:22.604"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170914 01:14:22.801" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170914 01:14:22.801" starttime="20170914 01:14:22.801"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170914 01:14:22.802" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170914 01:14:22.802" starttime="20170914 01:14:22.801"></status>
</kw>
<status status="PASS" endtime="20170914 01:14:22.802" starttime="20170914 01:14:22.597"></status>
</kw>
<status status="PASS" endtime="20170914 01:14:22.802" starttime="20170914 01:14:22.596"></status>
</kw>
<status status="PASS" endtime="20170914 01:14:22.802" starttime="20170914 01:14:22.596"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170914 01:14:22.803" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status status="PASS" endtime="20170914 01:14:22.803" starttime="20170914 01:14:22.802"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170914 01:14:22.804" starttime="20170914 01:14:22.803"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170914 01:14:22.894" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg timestamp="20170914 01:14:22.894" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170914 01:14:22.894" starttime="20170914 01:14:22.804"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170914 01:14:22.895" starttime="20170914 01:14:22.895"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170914 01:14:22.896" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170914 01:14:22.896" starttime="20170914 01:14:22.895"></status>
</kw>
<msg timestamp="20170914 01:14:22.896" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170914 01:14:22.896" starttime="20170914 01:14:22.595"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170914 01:14:22.897" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170914 01:14:22.897" starttime="20170914 01:14:22.896"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170914 01:14:22.897" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170914 01:14:22.897" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170914 01:14:22.897" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified'}</msg>
<status status="PASS" endtime="20170914 01:14:22.898" starttime="20170914 01:14:22.897"></status>
</kw>
<msg timestamp="20170914 01:14:22.898" level="INFO">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status status="PASS" endtime="20170914 01:14:22.898" starttime="20170914 01:14:22.594"></status>
</kw>
<status status="PASS" endtime="20170914 01:14:22.898" starttime="20170914 01:14:22.594"></status>
</kw>
<msg timestamp="20170914 01:14:22.898" level="INFO">${state} = Unspecified</msg>
<status status="PASS" endtime="20170914 01:14:22.898" starttime="20170914 01:14:22.593"></status>
</kw>
<status status="PASS" endtime="20170914 01:14:22.898" starttime="20170914 01:14:22.232"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170914 01:14:22.902" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170914 01:14:22.903" starttime="20170914 01:14:22.902"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170914 01:14:22.904" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170914 01:14:22.904" starttime="20170914 01:14:22.903"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170914 01:14:22.904" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170914 01:14:22.904" starttime="20170914 01:14:22.904"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170914 01:14:22.905" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170914 01:14:22.905" starttime="20170914 01:14:22.905"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170914 01:14:23.128" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170914 01:14:23.128" starttime="20170914 01:14:22.906"></status>
</kw>
<msg timestamp="20170914 01:14:23.129" level="INFO">${status} = PASS</msg>
<msg timestamp="20170914 01:14:23.129" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170914 01:14:23.129" starttime="20170914 01:14:22.905"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170914 01:14:23.129" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170914 01:14:23.130" starttime="20170914 01:14:23.129"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170914 01:14:23.130" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170914 01:14:23.130" starttime="20170914 01:14:23.130"></status>
</kw>
<status status="PASS" endtime="20170914 01:14:23.130" starttime="20170914 01:14:22.901"></status>
</kw>
<status status="PASS" endtime="20170914 01:14:23.130" starttime="20170914 01:14:22.901"></status>
</kw>
<status status="PASS" endtime="20170914 01:14:23.131" starttime="20170914 01:14:22.900"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170914 01:14:23.131" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170914 01:14:23.131" starttime="20170914 01:14:23.131"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170914 01:14:23.132" starttime="20170914 01:14:23.132"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170914 01:14:23.220" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170914 01:14:23.220" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170914 01:14:23.220" starttime="20170914 01:14:23.132"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170914 01:14:23.221" starttime="20170914 01:14:23.220"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170914 01:14:23.221" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170914 01:14:23.221" starttime="20170914 01:14:23.221"></status>
</kw>
<msg timestamp="20170914 01:14:23.221" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170914 01:14:23.221" starttime="20170914 01:14:22.900"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170914 01:14:23.222" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170914 01:14:23.222" starttime="20170914 01:14:23.222"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170914 01:14:23.223" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170914 01:14:23.223" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170914 01:14:23.223" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Off'}</msg>
<status status="PASS" endtime="20170914 01:14:23.223" starttime="20170914 01:14:23.222"></status>
</kw>
<msg timestamp="20170914 01:14:23.223" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status status="PASS" endtime="20170914 01:14:23.223" starttime="20170914 01:14:22.899"></status>
</kw>
<status status="PASS" endtime="20170914 01:14:23.224" starttime="20170914 01:14:22.899"></status>
</kw>
<kw name="Run Boot" library="obmc_boot_test">
<doc>Run the specified boot.</doc>
<arguments>
<arg>OBMC Reboot (off)</arg>
</arguments>
<msg timestamp="20170914 01:14:23.231" level="INFO">Log level changed from NONE to INFO.</msg>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>/sbin/reboot</arg>
<arg>fork=${1}</arg>
</arguments>
<msg timestamp="20170914 01:14:23.251" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.21.61
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170914 01:14:23.251" level="INFO">Starting command '/sbin/reboot'.</msg>
<status status="PASS" endtime="20170914 01:14:23.259" starttime="20170914 01:14:23.231"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170914 01:14:27.287" level="FAIL">
#(UTC) 2017/09/14 01:14:27.284118 -    4.058784 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170914 01:14:27.287" starttime="20170914 01:14:23.275"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170914 01:14:31.303" level="FAIL">
#(UTC) 2017/09/14 01:14:31.300070 -    4.015952 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170914 01:14:31.304" starttime="20170914 01:14:27.290"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170914 01:14:35.319" level="FAIL">
#(UTC) 2017/09/14 01:14:35.317373 -    4.017303 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170914 01:14:35.320" starttime="20170914 01:14:31.306"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170914 01:14:39.340" level="FAIL">
#(UTC) 2017/09/14 01:14:39.336641 -    4.019268 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             0
</msg>
<status status="FAIL" endtime="20170914 01:14:39.341" starttime="20170914 01:14:35.322"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170914 01:14:44.378" level="FAIL">
#(UTC) 2017/09/14 01:14:44.364868 -    5.028227 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             80
</msg>
<status status="FAIL" endtime="20170914 01:14:44.382" starttime="20170914 01:14:39.343"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^100$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<status status="PASS" endtime="20170914 01:14:49.413" starttime="20170914 01:14:44.396"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^0$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170914 01:14:54.451" level="FAIL">
#(UTC) 2017/09/14 01:14:54.448291 -   10.083423 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             100
</msg>
<status status="FAIL" endtime="20170914 01:14:54.452" starttime="20170914 01:14:49.425"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^0$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170914 01:14:59.473" level="FAIL">
#(UTC) 2017/09/14 01:14:59.469986 -    5.021695 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             100
</msg>
<status status="FAIL" endtime="20170914 01:14:59.474" starttime="20170914 01:14:54.455"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^0$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170914 01:15:04.489" level="FAIL">
#(UTC) 2017/09/14 01:15:04.486755 -    5.016769 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             100
</msg>
<status status="FAIL" endtime="20170914 01:15:04.490" starttime="20170914 01:14:59.476"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^0$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170914 01:15:09.506" level="FAIL">
#(UTC) 2017/09/14 01:15:09.503030 -    5.016275 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             100
</msg>
<status status="FAIL" endtime="20170914 01:15:09.507" starttime="20170914 01:15:04.493"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^0$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170914 01:15:14.523" level="FAIL">
#(UTC) 2017/09/14 01:15:14.520421 -    5.017391 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             100
</msg>
<status status="FAIL" endtime="20170914 01:15:14.524" starttime="20170914 01:15:09.510"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^0$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170914 01:15:19.561" level="FAIL">
#(UTC) 2017/09/14 01:15:19.548803 -    5.028382 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             100
</msg>
<status status="FAIL" endtime="20170914 01:15:19.565" starttime="20170914 01:15:14.526"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^0$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170914 01:15:24.612" level="FAIL">
#(UTC) 2017/09/14 01:15:24.598425 -    5.049622 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             100
</msg>
<status status="FAIL" endtime="20170914 01:15:24.617" starttime="20170914 01:15:19.578"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^0$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170914 01:15:29.645" level="FAIL">
#(UTC) 2017/09/14 01:15:29.642447 -    5.044022 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             100
</msg>
<status status="FAIL" endtime="20170914 01:15:29.646" starttime="20170914 01:15:24.630"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^0$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170914 01:15:34.662" level="FAIL">
#(UTC) 2017/09/14 01:15:34.659216 -    5.016769 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             100
</msg>
<status status="FAIL" endtime="20170914 01:15:34.663" starttime="20170914 01:15:29.649"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^0$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170914 01:15:39.682" level="FAIL">
#(UTC) 2017/09/14 01:15:39.679894 -    5.020678 - **ERROR** The current state of the machine does NOT match the match state:
state:
  state[packet_loss]:                             40
</msg>
<status status="FAIL" endtime="20170914 01:15:39.683" starttime="20170914 01:15:34.666"></status>
</kw>
<kw name="Check State" library="state">
<doc>Check that the Open BMC machine's composite state matches the specified</doc>
<arguments>
<arg>{'packet_loss': '^0$'}</arg>
<arg>invert=${0}</arg>
<arg>print_string=</arg>
<arg>openbmc_host=</arg>
<arg>openbmc_username=</arg>
<arg>openbmc_password=</arg>
<arg>os_host=</arg>
<arg>os_username=</arg>
<arg>os_password=</arg>
<arg>quiet=${1}</arg>
</arguments>
<status status="PASS" endtime="20170914 01:15:43.699" starttime="20170914 01:15:39.685"></status>
</kw>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /proc/uptime | cut -f 1 -d ' '</arg>
<arg>quiet=${1}</arg>
</arguments>
<msg timestamp="20170914 01:15:43.716" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.21.61
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170914 01:15:43.716" level="INFO">Executing command 'cat /proc/uptime | cut -f 1 -d ' ''.</msg>
<msg timestamp="20170914 01:15:43.722" level="FAIL">error: [Errno 104] Connection reset by peer</msg>
<status status="FAIL" endtime="20170914 01:15:43.722" starttime="20170914 01:15:43.703"></status>
</kw>
<msg timestamp="20170914 01:15:43.774" level="FAIL">ValueError: could not convert string to float: </msg>
<status status="FAIL" endtime="20170914 01:15:43.778" starttime="20170914 01:14:23.225"></status>
</kw>
<msg timestamp="20170914 01:15:43.796" level="INFO">Log level changed from NONE to INFO.</msg>
<msg timestamp="20170914 01:15:43.802" level="INFO">Log level changed from NONE to INFO.</msg>
<kw name="My Ffdc" library="obmc_boot_test">
<doc>Collect FFDC data.</doc>
<msg timestamp="20170914 01:15:43.822" level="INFO">Log level changed from NONE to INFO.</msg>
<kw name="Ffdc" library="openbmc_ffdc">
<doc>Gather First Failure Data Capture (FFDC).</doc>
<arguments>
<arg>ffdc_prefix=9.3.21.61.170914.011423.</arg>
<arg>ffdc_function_list=</arg>
</arguments>
<kw name="Ping Host" library="utils">
<arguments>
<arg>9.3.21.61</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170914 01:15:43.848" level="INFO">Length is 9</msg>
<status status="PASS" endtime="20170914 01:15:43.848" starttime="20170914 01:15:43.847"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170914 01:15:43.859" level="INFO">Running command 'ping -c 4 9.3.21.61 2&gt;&amp;1'.</msg>
<msg timestamp="20170914 01:15:46.859" level="INFO">${RC} = 0</msg>
<msg timestamp="20170914 01:15:46.859" level="INFO">${output} = PING 9.3.21.61 (9.3.21.61) 56(84) bytes of data.
64 bytes from 9.3.21.61: icmp_seq=1 ttl=62 time=23.3 ms
64 bytes from 9.3.21.61: icmp_seq=2 ttl=62 time=0.619 ms
64 bytes from 9.3.21.61: icmp_seq=3 tt...</msg>
<status status="PASS" endtime="20170914 01:15:46.859" starttime="20170914 01:15:43.848"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170914 01:15:46.863" level="INFO">RC: 0
Output:
PING 9.3.21.61 (9.3.21.61) 56(84) bytes of data.
64 bytes from 9.3.21.61: icmp_seq=1 ttl=62 time=23.3 ms
64 bytes from 9.3.21.61: icmp_seq=2 ttl=62 time=0.619 ms
64 bytes from 9.3.21.61: icmp_seq=3 ttl=62 time=10.6 ms
64 bytes from 9.3.21.61: icmp_seq=4 ttl=62 time=0.629 ms

--- 9.3.21.61 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 3002ms
rtt min/avg/max/mdev = 0.619/8.812/23.363/9.343 ms</msg>
<status status="PASS" endtime="20170914 01:15:46.863" starttime="20170914 01:15:46.862"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20170914 01:15:46.864" starttime="20170914 01:15:46.864"></status>
</kw>
<status status="PASS" endtime="20170914 01:15:46.865" starttime="20170914 01:15:43.845"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170914 01:15:46.893" level="INFO">${cur_time} = 2017-09-14 01:15:46:893001</msg>
<status status="PASS" endtime="20170914 01:15:46.894" starttime="20170914 01:15:46.892"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170914 01:15:46.895" level="INFO">${cur_time} = 20170914011546893001</msg>
<status status="PASS" endtime="20170914 01:15:46.895" starttime="20170914 01:15:46.894"></status>
</kw>
<status status="PASS" endtime="20170914 01:15:46.895" starttime="20170914 01:15:46.892"></status>
</kw>
<msg timestamp="20170914 01:15:46.905" level="INFO">${FFDC_TIME} = 20170914011546893001</msg>
<kw name="Get Test Dir and Name" library="openbmc_ffdc_utils">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20170914 01:15:46.907" level="INFO">${suite_name} = HostCodeUpdate</msg>
<status status="PASS" endtime="20170914 01:15:46.907" starttime="20170914 01:15:46.907"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20170914 01:15:46.908" level="INFO">${suite_name} = 20170914011546893001_HostCodeUpdate</msg>
<status status="PASS" endtime="20170914 01:15:46.908" starttime="20170914 01:15:46.907"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20170914 01:15:46.908" level="INFO">${test_name} = RESTHostCodeUpdate</msg>
<status status="PASS" endtime="20170914 01:15:46.909" starttime="20170914 01:15:46.908"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20170914 01:15:46.909" level="INFO">${test_name} = 20170914011546893001_RESTHostCodeUpdate</msg>
<status status="PASS" endtime="20170914 01:15:46.909" starttime="20170914 01:15:46.909"></status>
</kw>
<status status="PASS" endtime="20170914 01:15:46.909" starttime="20170914 01:15:46.906"></status>
</kw>
<msg timestamp="20170914 01:15:46.910" level="INFO">${FFDC_DIR_PATH} = /home/fspcibld/logs/20170914011546893001_HostCodeUpdate/20170914011546893001_RESTHostCodeUpdate/</msg>
<msg timestamp="20170914 01:15:46.910" level="INFO">${FFDC_PREFIX} = 9.3.21.61.170914.011423.</msg>
<msg timestamp="20170914 01:15:46.939" level="INFO">${LOG_PREFIX} = /home/fspcibld/logs/20170914011546893001_HostCodeUpdate/20170914011546893001_RESTHostCodeUpdate/9.3.21.61.170914.011423.</msg>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>/home/fspcibld/logs/20170914011546893001_HostCodeUpdate/20170914011546893001_RESTHostCodeUpdate/</arg>
</arguments>
<msg timestamp="20170914 01:15:46.941" html="yes" level="INFO">Created directory '&lt;a href="file:///home/fspcibld/logs/20170914011546893001_HostCodeUpdate/20170914011546893001_RESTHostCodeUpdate"&gt;/home/fspcibld/logs/20170914011546893001_HostCodeUpdate/20170914011546893001_RESTHostCodeUpdate&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170914 01:15:46.941" starttime="20170914 01:15:46.940"></status>
</kw>
<msg timestamp="20170914 01:15:46.948" level="INFO">${FFDC_FILE_PATH} = /home/fspcibld/logs/20170914011546893001_HostCodeUpdate/20170914011546893001_RESTHostCodeUpdate/9.3.21.61.170914.011423.BMC_general.txt</msg>
<kw name="Header Message" library="openbmc_ffdc_utils">
<doc>Write header message to the report document manifest.</doc>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${HEADER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170914 01:15:46.964" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170914011546893001_HostCodeUpdate/20170914011546893001_RESTHostCodeUpdate/9.3.21.61.170914.011423.BMC_general.txt"&gt;/home/fspcibld/logs/20170914011546893001_HostCodeUpdate/20170914011546893001_RESTHostCodeUpdate/9.3.21.61.170914.011423.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170914 01:15:46.965" starttime="20170914 01:15:46.964"></status>
</kw>
<status status="PASS" endtime="20170914 01:15:46.965" starttime="20170914 01:15:46.963"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170914 01:15:46.966" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170914011546893001_HostCodeUpdate/20170914011546893001_RESTHostCodeUpdate/9.3.21.61.170914.011423.BMC_general.txt"&gt;/home/fspcibld/logs/20170914011546893001_HostCodeUpdate/20170914011546893001_RESTHostCodeUpdate/9.3.21.61.170914.011423.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170914 01:15:46.966" starttime="20170914 01:15:46.965"></status>
</kw>
<status status="PASS" endtime="20170914 01:15:46.966" starttime="20170914 01:15:46.965"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Suite File\t\t: ${SUITE_NAME} ${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170914 01:15:46.967" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170914011546893001_HostCodeUpdate/20170914011546893001_RESTHostCodeUpdate/9.3.21.61.170914.011423.BMC_general.txt"&gt;/home/fspcibld/logs/20170914011546893001_HostCodeUpdate/20170914011546893001_RESTHostCodeUpdate/9.3.21.61.170914.011423.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170914 01:15:46.968" starttime="20170914 01:15:46.967"></status>
</kw>
<status status="PASS" endtime="20170914 01:15:46.968" starttime="20170914 01:15:46.966"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Case Name\t\t: ${TEST_NAME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170914 01:15:46.969" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170914011546893001_HostCodeUpdate/20170914011546893001_RESTHostCodeUpdate/9.3.21.61.170914.011423.BMC_general.txt"&gt;/home/fspcibld/logs/20170914011546893001_HostCodeUpdate/20170914011546893001_RESTHostCodeUpdate/9.3.21.61.170914.011423.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170914 01:15:46.969" starttime="20170914 01:15:46.968"></status>
</kw>
<status status="PASS" endtime="20170914 01:15:46.969" starttime="20170914 01:15:46.968"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Source File\t: ${SUITE_SOURCE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170914 01:15:46.970" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170914011546893001_HostCodeUpdate/20170914011546893001_RESTHostCodeUpdate/9.3.21.61.170914.011423.BMC_general.txt"&gt;/home/fspcibld/logs/20170914011546893001_HostCodeUpdate/20170914011546893001_RESTHostCodeUpdate/9.3.21.61.170914.011423.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170914 01:15:46.970" starttime="20170914 01:15:46.970"></status>
</kw>
<status status="PASS" endtime="20170914 01:15:46.970" starttime="20170914 01:15:46.969"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Failure Time Stamp\t: ${FFDC_TIME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170914 01:15:46.972" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170914011546893001_HostCodeUpdate/20170914011546893001_RESTHostCodeUpdate/9.3.21.61.170914.011423.BMC_general.txt"&gt;/home/fspcibld/logs/20170914011546893001_HostCodeUpdate/20170914011546893001_RESTHostCodeUpdate/9.3.21.61.170914.011423.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170914 01:15:46.972" starttime="20170914 01:15:46.971"></status>
</kw>
<status status="PASS" endtime="20170914 01:15:46.972" starttime="20170914 01:15:46.971"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Error Message\t: ${TEST_MESSAGE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170914 01:15:46.974" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170914011546893001_HostCodeUpdate/20170914011546893001_RESTHostCodeUpdate/9.3.21.61.170914.011423.BMC_general.txt"&gt;/home/fspcibld/logs/20170914011546893001_HostCodeUpdate/20170914011546893001_RESTHostCodeUpdate/9.3.21.61.170914.011423.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170914 01:15:46.974" starttime="20170914 01:15:46.974"></status>
</kw>
<status status="PASS" endtime="20170914 01:15:46.975" starttime="20170914 01:15:46.972"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Documentation\t:${\n}${TEST_DOCUMENTATION}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170914 01:15:46.976" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170914011546893001_HostCodeUpdate/20170914011546893001_RESTHostCodeUpdate/9.3.21.61.170914.011423.BMC_general.txt"&gt;/home/fspcibld/logs/20170914011546893001_HostCodeUpdate/20170914011546893001_RESTHostCodeUpdate/9.3.21.61.170914.011423.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170914 01:15:46.976" starttime="20170914 01:15:46.975"></status>
</kw>
<status status="PASS" endtime="20170914 01:15:46.976" starttime="20170914 01:15:46.975"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170914 01:15:46.977" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170914011546893001_HostCodeUpdate/20170914011546893001_RESTHostCodeUpdate/9.3.21.61.170914.011423.BMC_general.txt"&gt;/home/fspcibld/logs/20170914011546893001_HostCodeUpdate/20170914011546893001_RESTHostCodeUpdate/9.3.21.61.170914.011423.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170914 01:15:46.977" starttime="20170914 01:15:46.977"></status>
</kw>
<status status="PASS" endtime="20170914 01:15:46.977" starttime="20170914 01:15:46.976"></status>
</kw>
<kw name="Test Setup Info" library="openbmc_ffdc_utils">
<doc>BMC IP, Model and other information</doc>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170914 01:15:46.979" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170914011546893001_HostCodeUpdate/20170914011546893001_RESTHostCodeUpdate/9.3.21.61.170914.011423.BMC_general.txt"&gt;/home/fspcibld/logs/20170914011546893001_HostCodeUpdate/20170914011546893001_RESTHostCodeUpdate/9.3.21.61.170914.011423.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170914 01:15:46.979" starttime="20170914 01:15:46.979"></status>
</kw>
<status status="PASS" endtime="20170914 01:15:46.979" starttime="20170914 01:15:46.978"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Setup Information:</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170914 01:15:46.981" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170914011546893001_HostCodeUpdate/20170914011546893001_RESTHostCodeUpdate/9.3.21.61.170914.011423.BMC_general.txt"&gt;/home/fspcibld/logs/20170914011546893001_HostCodeUpdate/20170914011546893001_RESTHostCodeUpdate/9.3.21.61.170914.011423.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170914 01:15:46.981" starttime="20170914 01:15:46.980"></status>
</kw>
<status status="PASS" endtime="20170914 01:15:46.981" starttime="20170914 01:15:46.979"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170914 01:15:46.983" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170914011546893001_HostCodeUpdate/20170914011546893001_RESTHostCodeUpdate/9.3.21.61.170914.011423.BMC_general.txt"&gt;/home/fspcibld/logs/20170914011546893001_HostCodeUpdate/20170914011546893001_RESTHostCodeUpdate/9.3.21.61.170914.011423.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170914 01:15:46.983" starttime="20170914 01:15:46.982"></status>
</kw>
<status status="PASS" endtime="20170914 01:15:46.983" starttime="20170914 01:15:46.982"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>OPENBMC HOST \t: ${OPENBMC_HOST}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170914 01:15:46.984" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170914011546893001_HostCodeUpdate/20170914011546893001_RESTHostCodeUpdate/9.3.21.61.170914.011423.BMC_general.txt"&gt;/home/fspcibld/logs/20170914011546893001_HostCodeUpdate/20170914011546893001_RESTHostCodeUpdate/9.3.21.61.170914.011423.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170914 01:15:46.984" starttime="20170914 01:15:46.984"></status>
</kw>
<status status="PASS" endtime="20170914 01:15:46.984" starttime="20170914 01:15:46.983"></status>
</kw>
<kw name="Get BMC System Model" library="utils">
<doc>Get the BMC model from the device tree.</doc>
<assign>
<var>${model_name}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20170914 01:15:47.009" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.21.61
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170914 01:15:47.010" level="INFO">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg timestamp="20170914 01:15:47.011" level="INFO">index=2
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.21.61
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170914 01:15:47.011" level="INFO">Logging into '9.3.21.61:22' as 'root'.</msg>
<msg timestamp="20170914 01:15:54.480" level="INFO">Read output: root@witherspoon:~#</msg>
<msg timestamp="20170914 01:15:54.480" level="INFO">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg timestamp="20170914 01:15:54.561" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170914 01:15:54.574" level="INFO">${bmc_model} = Witherspoon</msg>
<msg timestamp="20170914 01:15:54.574" level="INFO">${stderr} = </msg>
<msg timestamp="20170914 01:15:54.574" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20170914 01:15:54.574" starttime="20170914 01:15:46.985"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170914 01:15:54.575" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170914 01:15:54.575" starttime="20170914 01:15:54.574"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg timestamp="20170914 01:15:54.575" level="INFO">Length is 11</msg>
<status status="PASS" endtime="20170914 01:15:54.575" starttime="20170914 01:15:54.575"></status>
</kw>
<msg timestamp="20170914 01:15:54.575" level="INFO">${model_name} = Witherspoon</msg>
<status status="PASS" endtime="20170914 01:15:54.575" starttime="20170914 01:15:46.984"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>SYSTEM TYPE \t: ${model_name}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170914 01:15:54.577" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170914011546893001_HostCodeUpdate/20170914011546893001_RESTHostCodeUpdate/9.3.21.61.170914.011423.BMC_general.txt"&gt;/home/fspcibld/logs/20170914011546893001_HostCodeUpdate/20170914011546893001_RESTHostCodeUpdate/9.3.21.61.170914.011423.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170914 01:15:54.577" starttime="20170914 01:15:54.576"></status>
</kw>
<status status="PASS" endtime="20170914 01:15:54.577" starttime="20170914 01:15:54.576"></status>
</kw>
<status status="PASS" endtime="20170914 01:15:54.577" starttime="20170914 01:15:46.978"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${MSG_INTRO}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170914 01:15:54.579" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170914011546893001_HostCodeUpdate/20170914011546893001_RESTHostCodeUpdate/9.3.21.61.170914.011423.BMC_general.txt"&gt;/home/fspcibld/logs/20170914011546893001_HostCodeUpdate/20170914011546893001_RESTHostCodeUpdate/9.3.21.61.170914.011423.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170914 01:15:54.579" starttime="20170914 01:15:54.579"></status>
</kw>
<status status="PASS" endtime="20170914 01:15:54.579" starttime="20170914 01:15:54.578"></status>
</kw>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170914 01:15:54.581" level="INFO">@{entries} = [ APPLICATION DATA | DRIVER INFO | BMC DATA ]</msg>
<status status="PASS" endtime="20170914 01:15:54.581" starttime="20170914 01:15:54.580"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = APPLICATION DATA">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170914 01:15:54.582" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170914011546893001_HostCodeUpdate/20170914011546893001_RESTHostCodeUpdate/9.3.21.61.170914.011423.BMC_general.txt"&gt;/home/fspcibld/logs/20170914011546893001_HostCodeUpdate/20170914011546893001_RESTHostCodeUpdate/9.3.21.61.170914.011423.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170914 01:15:54.582" starttime="20170914 01:15:54.582"></status>
</kw>
<status status="PASS" endtime="20170914 01:15:54.582" starttime="20170914 01:15:54.581"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170914 01:15:54.583" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170914011546893001_HostCodeUpdate/20170914011546893001_RESTHostCodeUpdate/9.3.21.61.170914.011423.BMC_general.txt"&gt;/home/fspcibld/logs/20170914011546893001_HostCodeUpdate/20170914011546893001_RESTHostCodeUpdate/9.3.21.61.170914.011423.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170914 01:15:54.584" starttime="20170914 01:15:54.583"></status>
</kw>
<status status="PASS" endtime="20170914 01:15:54.584" starttime="20170914 01:15:54.583"></status>
</kw>
<status status="PASS" endtime="20170914 01:15:54.584" starttime="20170914 01:15:54.581"></status>
</kw>
<kw type="foritem" name="${index} = DRIVER INFO">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170914 01:15:54.585" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170914011546893001_HostCodeUpdate/20170914011546893001_RESTHostCodeUpdate/9.3.21.61.170914.011423.BMC_general.txt"&gt;/home/fspcibld/logs/20170914011546893001_HostCodeUpdate/20170914011546893001_RESTHostCodeUpdate/9.3.21.61.170914.011423.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170914 01:15:54.585" starttime="20170914 01:15:54.585"></status>
</kw>
<status status="PASS" endtime="20170914 01:15:54.586" starttime="20170914 01:15:54.584"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170914 01:15:54.587" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170914011546893001_HostCodeUpdate/20170914011546893001_RESTHostCodeUpdate/9.3.21.61.170914.011423.BMC_general.txt"&gt;/home/fspcibld/logs/20170914011546893001_HostCodeUpdate/20170914011546893001_RESTHostCodeUpdate/9.3.21.61.170914.011423.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170914 01:15:54.587" starttime="20170914 01:15:54.586"></status>
</kw>
<status status="PASS" endtime="20170914 01:15:54.587" starttime="20170914 01:15:54.586"></status>
</kw>
<status status="PASS" endtime="20170914 01:15:54.587" starttime="20170914 01:15:54.584"></status>
</kw>
<kw type="foritem" name="${index} = BMC DATA">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170914 01:15:54.588" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170914011546893001_HostCodeUpdate/20170914011546893001_RESTHostCodeUpdate/9.3.21.61.170914.011423.BMC_general.txt"&gt;/home/fspcibld/logs/20170914011546893001_HostCodeUpdate/20170914011546893001_RESTHostCodeUpdate/9.3.21.61.170914.011423.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170914 01:15:54.588" starttime="20170914 01:15:54.588"></status>
</kw>
<status status="PASS" endtime="20170914 01:15:54.588" starttime="20170914 01:15:54.587"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170914 01:15:54.589" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170914011546893001_HostCodeUpdate/20170914011546893001_RESTHostCodeUpdate/9.3.21.61.170914.011423.BMC_general.txt"&gt;/home/fspcibld/logs/20170914011546893001_HostCodeUpdate/20170914011546893001_RESTHostCodeUpdate/9.3.21.61.170914.011423.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170914 01:15:54.590" starttime="20170914 01:15:54.589"></status>
</kw>
<status status="PASS" endtime="20170914 01:15:54.590" starttime="20170914 01:15:54.589"></status>
</kw>
<status status="PASS" endtime="20170914 01:15:54.590" starttime="20170914 01:15:54.587"></status>
</kw>
<status status="PASS" endtime="20170914 01:15:54.590" starttime="20170914 01:15:54.581"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${MSG_DETAIL}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170914 01:15:54.591" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170914011546893001_HostCodeUpdate/20170914011546893001_RESTHostCodeUpdate/9.3.21.61.170914.011423.BMC_general.txt"&gt;/home/fspcibld/logs/20170914011546893001_HostCodeUpdate/20170914011546893001_RESTHostCodeUpdate/9.3.21.61.170914.011423.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170914 01:15:54.591" starttime="20170914 01:15:54.590"></status>
</kw>
<status status="PASS" endtime="20170914 01:15:54.591" starttime="20170914 01:15:54.590"></status>
</kw>
<status status="PASS" endtime="20170914 01:15:54.591" starttime="20170914 01:15:46.963"></status>
</kw>
<kw name="Call FFDC Methods" library="openbmc_ffdc_methods">
<doc>Call into FFDC Keyword index list.</doc>
<arguments>
<arg>ffdc_function_list=</arg>
</arguments>
<kw name="Get Ffdc Method Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170914 01:15:54.601" level="INFO">@{entries} = [ BMC LOGS ]</msg>
<status status="PASS" endtime="20170914 01:15:54.601" starttime="20170914 01:15:54.601"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC LOGS">
<kw name="Method Call Keyword List" library="openbmc_ffdc_methods">
<doc>Iterate the list through keyword index.</doc>
<arguments>
<arg>${index}</arg>
<arg>${ffdc_function_list}</arg>
</arguments>
<kw name="Get Ffdc Method Call" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<assign>
<var>@{method_list}</var>
</assign>
<msg timestamp="20170914 01:15:54.603" level="INFO">@{method_list} = [ ('FFDC Generic Report', 'BMC FFDC Manifest') | ('Get Request FFDC', 'BMC FFDC Get Requests') | ('Sys Inventory Files', 'System Inventory Files') | ('Core Files', 'SCP Coredump Files') | ('BMC Specif...</msg>
<status status="PASS" endtime="20170914 01:15:54.603" starttime="20170914 01:15:54.602"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ffdc_function_list}' == '${EMPTY}'</arg>
<arg>Get FFDC Method Desc</arg>
<arg>${index}</arg>
<arg>ELSE</arg>
<arg>Split String</arg>
<arg>${ffdc_function_list}</arg>
<arg>separator=:</arg>
</arguments>
<assign>
<var>@{ffdc_function_list}</var>
</assign>
<kw name="Get Ffdc Method Desc" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<status status="PASS" endtime="20170914 01:15:54.604" starttime="20170914 01:15:54.604"></status>
</kw>
<msg timestamp="20170914 01:15:54.604" level="INFO">@{ffdc_function_list} = [ FFDC Generic Report | Get Request FFDC | Sys Inventory Files | Core Files | BMC Specific Files | SEL Log | OS FFDC ]</msg>
<status status="PASS" endtime="20170914 01:15:54.604" starttime="20170914 01:15:54.603"></status>
</kw>
<kw type="for" name="${method} IN [ @{method_list} ]">
<kw type="foritem" name="${method} = ('FFDC Generic Report', 'BMC FFDC Manifest')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170914 01:15:54.606" starttime="20170914 01:15:54.606"></status>
</kw>
<msg timestamp="20170914 01:15:54.606" level="INFO">${status} = PASS</msg>
<msg timestamp="20170914 01:15:54.607" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170914 01:15:54.607" starttime="20170914 01:15:54.605"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170914 01:15:54.607" starttime="20170914 01:15:54.607"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Manifest" library="openbmc_ffdc_methods">
<doc>Get the commands index for the FFDC_BMC_CMD,</doc>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170914 01:15:54.631" level="INFO">@{entries} = [ APPLICATION DATA | DRIVER INFO | BMC DATA ]</msg>
<status status="PASS" endtime="20170914 01:15:54.632" starttime="20170914 01:15:54.631"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = APPLICATION DATA">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170914 01:15:54.633" level="INFO">@{cmd_list} = [ ('BMC state', '/usr/sbin/obmcutil state') ]</msg>
<status status="PASS" endtime="20170914 01:15:54.633" starttime="20170914 01:15:54.632"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170914 01:15:54.641" level="INFO">${ENTRY_INDEX} = APPLICATION DATA</msg>
<status status="PASS" endtime="20170914 01:15:54.641" starttime="20170914 01:15:54.633"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC state', '/usr/sbin/obmcutil state')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170914 01:15:54.644" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170914011546893001_HostCodeUpdate/20170914011546893001_RESTHostCodeUpdate/9.3.21.61.170914.011423.BMC_general.txt"&gt;/home/fspcibld/logs/20170914011546893001_HostCodeUpdate/20170914011546893001_RESTHostCodeUpdate/9.3.21.61.170914.011423.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170914 01:15:54.645" starttime="20170914 01:15:54.644"></status>
</kw>
<status status="PASS" endtime="20170914 01:15:54.645" starttime="20170914 01:15:54.643"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170914 01:15:54.646" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170914011546893001_HostCodeUpdate/20170914011546893001_RESTHostCodeUpdate/9.3.21.61.170914.011423.BMC_general.txt"&gt;/home/fspcibld/logs/20170914011546893001_HostCodeUpdate/20170914011546893001_RESTHostCodeUpdate/9.3.21.61.170914.011423.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170914 01:15:54.646" starttime="20170914 01:15:54.646"></status>
</kw>
<status status="PASS" endtime="20170914 01:15:54.646" starttime="20170914 01:15:54.645"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170914 01:15:54.647" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170914011546893001_HostCodeUpdate/20170914011546893001_RESTHostCodeUpdate/9.3.21.61.170914.011423.BMC_general.txt"&gt;/home/fspcibld/logs/20170914011546893001_HostCodeUpdate/20170914011546893001_RESTHostCodeUpdate/9.3.21.61.170914.011423.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170914 01:15:54.647" starttime="20170914 01:15:54.647"></status>
</kw>
<status status="PASS" endtime="20170914 01:15:54.647" starttime="20170914 01:15:54.646"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170914 01:15:54.651" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170914011546893001_HostCodeUpdate/20170914011546893001_RESTHostCodeUpdate/9.3.21.61.170914.011423.BMC_general.txt"&gt;/home/fspcibld/logs/20170914011546893001_HostCodeUpdate/20170914011546893001_RESTHostCodeUpdate/9.3.21.61.170914.011423.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170914 01:15:54.651" starttime="20170914 01:15:54.650"></status>
</kw>
<status status="PASS" endtime="20170914 01:15:54.651" starttime="20170914 01:15:54.648"></status>
</kw>
<status status="PASS" endtime="20170914 01:15:54.651" starttime="20170914 01:15:54.643"></status>
</kw>
<status status="PASS" endtime="20170914 01:15:54.651" starttime="20170914 01:15:54.642"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170914 01:15:54.652" level="INFO">${cmd_buf} = BMC Execute Command  /usr/sbin/obmcutil state  ignore_err=1</msg>
<status status="PASS" endtime="20170914 01:15:54.652" starttime="20170914 01:15:54.651"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>/usr/sbin/obmcutil state</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170914 01:15:54.724" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.21.61
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170914 01:15:54.725" level="INFO">index=2
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.21.61
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170914 01:15:54.725" level="INFO">Executing command '/usr/sbin/obmcutil state'.</msg>
<msg timestamp="20170914 01:15:56.797" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20170914 01:15:56.797" starttime="20170914 01:15:54.681"></status>
</kw>
<msg timestamp="20170914 01:15:56.797" level="INFO">${status} = PASS</msg>
<msg timestamp="20170914 01:15:56.797" level="INFO">${ret_values} = (u'', u'Traceback (most recent call last):\n  File "/usr/sbin/obmcutil", line 169, in &lt;module&gt;\n    obj = bus.get_object(bus_name, obj_path)\n  File "/usr/lib/python2.7/site-packages/dbus/bus.py", lin...</msg>
<status status="PASS" endtime="20170914 01:15:56.797" starttime="20170914 01:15:54.652"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170914 01:15:56.798" level="INFO">${stdout} = </msg>
<status status="PASS" endtime="20170914 01:15:56.798" starttime="20170914 01:15:56.798"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170914 01:15:56.799" level="INFO">${stderr} = Traceback (most recent call last):
  File "/usr/sbin/obmcutil", line 169, in &lt;module&gt;
    obj = bus.get_object(bus_name, obj_path)
  File "/usr/lib/python2.7/site-packages/dbus/bus.py", line 241, in g...</msg>
<status status="PASS" endtime="20170914 01:15:56.799" starttime="20170914 01:15:56.799"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170914 01:15:56.807" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170914011546893001_HostCodeUpdate/20170914011546893001_RESTHostCodeUpdate/9.3.21.61.170914.011423.BMC_general.txt"&gt;/home/fspcibld/logs/20170914011546893001_HostCodeUpdate/20170914011546893001_RESTHostCodeUpdate/9.3.21.61.170914.011423.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170914 01:15:56.807" starttime="20170914 01:15:56.806"></status>
</kw>
<status status="PASS" endtime="20170914 01:15:56.807" starttime="20170914 01:15:56.806"></status>
</kw>
<status status="PASS" endtime="20170914 01:15:56.807" starttime="20170914 01:15:56.799"></status>
</kw>
<status status="PASS" endtime="20170914 01:15:56.807" starttime="20170914 01:15:54.641"></status>
</kw>
<status status="PASS" endtime="20170914 01:15:56.807" starttime="20170914 01:15:54.641"></status>
</kw>
<status status="PASS" endtime="20170914 01:15:56.807" starttime="20170914 01:15:54.641"></status>
</kw>
<status status="PASS" endtime="20170914 01:15:56.807" starttime="20170914 01:15:54.632"></status>
</kw>
<status status="PASS" endtime="20170914 01:15:56.808" starttime="20170914 01:15:54.632"></status>
</kw>
<kw type="foritem" name="${index} = DRIVER INFO">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170914 01:15:56.809" level="INFO">@{cmd_list} = [ ('FW Timestamp', 'cat /etc/timestamp') | ('FW Level', 'cat /etc/os-release') ]</msg>
<status status="PASS" endtime="20170914 01:15:56.809" starttime="20170914 01:15:56.809"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170914 01:15:56.810" level="INFO">${ENTRY_INDEX} = DRIVER INFO</msg>
<status status="PASS" endtime="20170914 01:15:56.810" starttime="20170914 01:15:56.809"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('FW Timestamp', 'cat /etc/timestamp')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170914 01:15:56.813" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170914011546893001_HostCodeUpdate/20170914011546893001_RESTHostCodeUpdate/9.3.21.61.170914.011423.BMC_general.txt"&gt;/home/fspcibld/logs/20170914011546893001_HostCodeUpdate/20170914011546893001_RESTHostCodeUpdate/9.3.21.61.170914.011423.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170914 01:15:56.813" starttime="20170914 01:15:56.813"></status>
</kw>
<status status="PASS" endtime="20170914 01:15:56.813" starttime="20170914 01:15:56.812"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170914 01:15:56.815" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170914011546893001_HostCodeUpdate/20170914011546893001_RESTHostCodeUpdate/9.3.21.61.170914.011423.BMC_general.txt"&gt;/home/fspcibld/logs/20170914011546893001_HostCodeUpdate/20170914011546893001_RESTHostCodeUpdate/9.3.21.61.170914.011423.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170914 01:15:56.815" starttime="20170914 01:15:56.814"></status>
</kw>
<status status="PASS" endtime="20170914 01:15:56.815" starttime="20170914 01:15:56.813"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170914 01:15:56.816" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170914011546893001_HostCodeUpdate/20170914011546893001_RESTHostCodeUpdate/9.3.21.61.170914.011423.BMC_general.txt"&gt;/home/fspcibld/logs/20170914011546893001_HostCodeUpdate/20170914011546893001_RESTHostCodeUpdate/9.3.21.61.170914.011423.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170914 01:15:56.816" starttime="20170914 01:15:56.816"></status>
</kw>
<status status="PASS" endtime="20170914 01:15:56.816" starttime="20170914 01:15:56.815"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170914 01:15:56.817" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170914011546893001_HostCodeUpdate/20170914011546893001_RESTHostCodeUpdate/9.3.21.61.170914.011423.BMC_general.txt"&gt;/home/fspcibld/logs/20170914011546893001_HostCodeUpdate/20170914011546893001_RESTHostCodeUpdate/9.3.21.61.170914.011423.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170914 01:15:56.817" starttime="20170914 01:15:56.817"></status>
</kw>
<status status="PASS" endtime="20170914 01:15:56.817" starttime="20170914 01:15:56.816"></status>
</kw>
<status status="PASS" endtime="20170914 01:15:56.817" starttime="20170914 01:15:56.812"></status>
</kw>
<status status="PASS" endtime="20170914 01:15:56.818" starttime="20170914 01:15:56.811"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170914 01:15:56.818" level="INFO">${cmd_buf} = BMC Execute Command  cat /etc/timestamp  ignore_err=1</msg>
<status status="PASS" endtime="20170914 01:15:56.818" starttime="20170914 01:15:56.818"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /etc/timestamp</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170914 01:15:56.887" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.21.61
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170914 01:15:56.887" level="INFO">index=2
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.21.61
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170914 01:15:56.888" level="INFO">Executing command 'cat /etc/timestamp'.</msg>
<msg timestamp="20170914 01:15:57.126" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170914 01:15:57.127" starttime="20170914 01:15:56.848"></status>
</kw>
<msg timestamp="20170914 01:15:57.127" level="INFO">${status} = PASS</msg>
<msg timestamp="20170914 01:15:57.127" level="INFO">${ret_values} = (u'20170913222723', u'', 0)</msg>
<status status="PASS" endtime="20170914 01:15:57.127" starttime="20170914 01:15:56.819"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170914 01:15:57.128" level="INFO">${stdout} = 20170913222723</msg>
<status status="PASS" endtime="20170914 01:15:57.128" starttime="20170914 01:15:57.128"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170914 01:15:57.129" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170914 01:15:57.129" starttime="20170914 01:15:57.128"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170914 01:15:57.136" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170914011546893001_HostCodeUpdate/20170914011546893001_RESTHostCodeUpdate/9.3.21.61.170914.011423.BMC_general.txt"&gt;/home/fspcibld/logs/20170914011546893001_HostCodeUpdate/20170914011546893001_RESTHostCodeUpdate/9.3.21.61.170914.011423.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170914 01:15:57.136" starttime="20170914 01:15:57.136"></status>
</kw>
<status status="PASS" endtime="20170914 01:15:57.137" starttime="20170914 01:15:57.135"></status>
</kw>
<status status="PASS" endtime="20170914 01:15:57.137" starttime="20170914 01:15:57.129"></status>
</kw>
<status status="PASS" endtime="20170914 01:15:57.137" starttime="20170914 01:15:56.810"></status>
</kw>
<status status="PASS" endtime="20170914 01:15:57.137" starttime="20170914 01:15:56.810"></status>
</kw>
<kw type="foritem" name="${cmd} = ('FW Level', 'cat /etc/os-release')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170914 01:15:57.140" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170914011546893001_HostCodeUpdate/20170914011546893001_RESTHostCodeUpdate/9.3.21.61.170914.011423.BMC_general.txt"&gt;/home/fspcibld/logs/20170914011546893001_HostCodeUpdate/20170914011546893001_RESTHostCodeUpdate/9.3.21.61.170914.011423.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170914 01:15:57.140" starttime="20170914 01:15:57.139"></status>
</kw>
<status status="PASS" endtime="20170914 01:15:57.140" starttime="20170914 01:15:57.139"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170914 01:15:57.141" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170914011546893001_HostCodeUpdate/20170914011546893001_RESTHostCodeUpdate/9.3.21.61.170914.011423.BMC_general.txt"&gt;/home/fspcibld/logs/20170914011546893001_HostCodeUpdate/20170914011546893001_RESTHostCodeUpdate/9.3.21.61.170914.011423.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170914 01:15:57.141" starttime="20170914 01:15:57.141"></status>
</kw>
<status status="PASS" endtime="20170914 01:15:57.141" starttime="20170914 01:15:57.140"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170914 01:15:57.143" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170914011546893001_HostCodeUpdate/20170914011546893001_RESTHostCodeUpdate/9.3.21.61.170914.011423.BMC_general.txt"&gt;/home/fspcibld/logs/20170914011546893001_HostCodeUpdate/20170914011546893001_RESTHostCodeUpdate/9.3.21.61.170914.011423.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170914 01:15:57.143" starttime="20170914 01:15:57.142"></status>
</kw>
<status status="PASS" endtime="20170914 01:15:57.143" starttime="20170914 01:15:57.142"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170914 01:15:57.144" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170914011546893001_HostCodeUpdate/20170914011546893001_RESTHostCodeUpdate/9.3.21.61.170914.011423.BMC_general.txt"&gt;/home/fspcibld/logs/20170914011546893001_HostCodeUpdate/20170914011546893001_RESTHostCodeUpdate/9.3.21.61.170914.011423.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170914 01:15:57.144" starttime="20170914 01:15:57.144"></status>
</kw>
<status status="PASS" endtime="20170914 01:15:57.144" starttime="20170914 01:15:57.143"></status>
</kw>
<status status="PASS" endtime="20170914 01:15:57.144" starttime="20170914 01:15:57.138"></status>
</kw>
<status status="PASS" endtime="20170914 01:15:57.144" starttime="20170914 01:15:57.138"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170914 01:15:57.145" level="INFO">${cmd_buf} = BMC Execute Command  cat /etc/os-release  ignore_err=1</msg>
<status status="PASS" endtime="20170914 01:15:57.145" starttime="20170914 01:15:57.145"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /etc/os-release</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170914 01:15:57.217" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.21.61
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170914 01:15:57.218" level="INFO">index=2
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.21.61
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170914 01:15:57.218" level="INFO">Executing command 'cat /etc/os-release'.</msg>
<msg timestamp="20170914 01:15:57.648" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170914 01:15:57.648" starttime="20170914 01:15:57.175"></status>
</kw>
<msg timestamp="20170914 01:15:57.648" level="INFO">${status} = PASS</msg>
<msg timestamp="20170914 01:15:57.648" level="INFO">${ret_values} = (u'ID="openbmc-phosphor"\nNAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"\nVERSION="v1.99.10-3"\nVERSION_ID="v1.99.10-3-ge4b62e2"\nPRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC P...</msg>
<status status="PASS" endtime="20170914 01:15:57.648" starttime="20170914 01:15:57.145"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170914 01:15:57.649" level="INFO">${stdout} = ID="openbmc-phosphor"
NAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"
VERSION="v1.99.10-3"
VERSION_ID="v1.99.10-3-ge4b62e2"
PRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC Project ...</msg>
<status status="PASS" endtime="20170914 01:15:57.649" starttime="20170914 01:15:57.649"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170914 01:15:57.650" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170914 01:15:57.650" starttime="20170914 01:15:57.649"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170914 01:15:57.657" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170914011546893001_HostCodeUpdate/20170914011546893001_RESTHostCodeUpdate/9.3.21.61.170914.011423.BMC_general.txt"&gt;/home/fspcibld/logs/20170914011546893001_HostCodeUpdate/20170914011546893001_RESTHostCodeUpdate/9.3.21.61.170914.011423.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170914 01:15:57.657" starttime="20170914 01:15:57.657"></status>
</kw>
<status status="PASS" endtime="20170914 01:15:57.658" starttime="20170914 01:15:57.656"></status>
</kw>
<status status="PASS" endtime="20170914 01:15:57.658" starttime="20170914 01:15:57.650"></status>
</kw>
<status status="PASS" endtime="20170914 01:15:57.658" starttime="20170914 01:15:57.137"></status>
</kw>
<status status="PASS" endtime="20170914 01:15:57.658" starttime="20170914 01:15:57.137"></status>
</kw>
<status status="PASS" endtime="20170914 01:15:57.658" starttime="20170914 01:15:56.810"></status>
</kw>
<status status="PASS" endtime="20170914 01:15:57.658" starttime="20170914 01:15:56.808"></status>
</kw>
<status status="PASS" endtime="20170914 01:15:57.658" starttime="20170914 01:15:56.808"></status>
</kw>
<kw type="foritem" name="${index} = BMC DATA">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170914 01:15:57.659" level="INFO">@{cmd_list} = [ ('BMC Uptime', 'uptime') | ('BMC File System Disk Space Usage', 'df -hT') | ('BMC OS', 'uname -a') ]</msg>
<status status="PASS" endtime="20170914 01:15:57.659" starttime="20170914 01:15:57.659"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170914 01:15:57.660" level="INFO">${ENTRY_INDEX} = BMC DATA</msg>
<status status="PASS" endtime="20170914 01:15:57.660" starttime="20170914 01:15:57.660"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC Uptime', 'uptime')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170914 01:15:57.663" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170914011546893001_HostCodeUpdate/20170914011546893001_RESTHostCodeUpdate/9.3.21.61.170914.011423.BMC_general.txt"&gt;/home/fspcibld/logs/20170914011546893001_HostCodeUpdate/20170914011546893001_RESTHostCodeUpdate/9.3.21.61.170914.011423.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170914 01:15:57.663" starttime="20170914 01:15:57.663"></status>
</kw>
<status status="PASS" endtime="20170914 01:15:57.663" starttime="20170914 01:15:57.662"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170914 01:15:57.665" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170914011546893001_HostCodeUpdate/20170914011546893001_RESTHostCodeUpdate/9.3.21.61.170914.011423.BMC_general.txt"&gt;/home/fspcibld/logs/20170914011546893001_HostCodeUpdate/20170914011546893001_RESTHostCodeUpdate/9.3.21.61.170914.011423.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170914 01:15:57.665" starttime="20170914 01:15:57.664"></status>
</kw>
<status status="PASS" endtime="20170914 01:15:57.665" starttime="20170914 01:15:57.664"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170914 01:15:57.666" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170914011546893001_HostCodeUpdate/20170914011546893001_RESTHostCodeUpdate/9.3.21.61.170914.011423.BMC_general.txt"&gt;/home/fspcibld/logs/20170914011546893001_HostCodeUpdate/20170914011546893001_RESTHostCodeUpdate/9.3.21.61.170914.011423.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170914 01:15:57.666" starttime="20170914 01:15:57.666"></status>
</kw>
<status status="PASS" endtime="20170914 01:15:57.666" starttime="20170914 01:15:57.665"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170914 01:15:57.667" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170914011546893001_HostCodeUpdate/20170914011546893001_RESTHostCodeUpdate/9.3.21.61.170914.011423.BMC_general.txt"&gt;/home/fspcibld/logs/20170914011546893001_HostCodeUpdate/20170914011546893001_RESTHostCodeUpdate/9.3.21.61.170914.011423.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170914 01:15:57.667" starttime="20170914 01:15:57.667"></status>
</kw>
<status status="PASS" endtime="20170914 01:15:57.667" starttime="20170914 01:15:57.666"></status>
</kw>
<status status="PASS" endtime="20170914 01:15:57.668" starttime="20170914 01:15:57.662"></status>
</kw>
<status status="PASS" endtime="20170914 01:15:57.668" starttime="20170914 01:15:57.661"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170914 01:15:57.668" level="INFO">${cmd_buf} = BMC Execute Command  uptime  ignore_err=1</msg>
<status status="PASS" endtime="20170914 01:15:57.668" starttime="20170914 01:15:57.668"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>uptime</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170914 01:15:57.742" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.21.61
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170914 01:15:57.742" level="INFO">index=2
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.21.61
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170914 01:15:57.743" level="INFO">Executing command 'uptime'.</msg>
<msg timestamp="20170914 01:15:57.960" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170914 01:15:57.960" starttime="20170914 01:15:57.700"></status>
</kw>
<msg timestamp="20170914 01:15:57.960" level="INFO">${status} = PASS</msg>
<msg timestamp="20170914 01:15:57.960" level="INFO">${ret_values} = (u' 01:16:06 up 0 min,  load average: 5.43, 1.45, 0.49', u'', 0)</msg>
<status status="PASS" endtime="20170914 01:15:57.960" starttime="20170914 01:15:57.669"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170914 01:15:57.961" level="INFO">${stdout} =  01:16:06 up 0 min,  load average: 5.43, 1.45, 0.49</msg>
<status status="PASS" endtime="20170914 01:15:57.961" starttime="20170914 01:15:57.961"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170914 01:15:57.962" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170914 01:15:57.962" starttime="20170914 01:15:57.961"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170914 01:15:57.969" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170914011546893001_HostCodeUpdate/20170914011546893001_RESTHostCodeUpdate/9.3.21.61.170914.011423.BMC_general.txt"&gt;/home/fspcibld/logs/20170914011546893001_HostCodeUpdate/20170914011546893001_RESTHostCodeUpdate/9.3.21.61.170914.011423.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170914 01:15:57.970" starttime="20170914 01:15:57.969"></status>
</kw>
<status status="PASS" endtime="20170914 01:15:57.970" starttime="20170914 01:15:57.968"></status>
</kw>
<status status="PASS" endtime="20170914 01:15:57.970" starttime="20170914 01:15:57.962"></status>
</kw>
<status status="PASS" endtime="20170914 01:15:57.970" starttime="20170914 01:15:57.660"></status>
</kw>
<status status="PASS" endtime="20170914 01:15:57.970" starttime="20170914 01:15:57.660"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC File System Disk Space Usage', 'df -hT')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170914 01:15:57.973" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170914011546893001_HostCodeUpdate/20170914011546893001_RESTHostCodeUpdate/9.3.21.61.170914.011423.BMC_general.txt"&gt;/home/fspcibld/logs/20170914011546893001_HostCodeUpdate/20170914011546893001_RESTHostCodeUpdate/9.3.21.61.170914.011423.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170914 01:15:57.973" starttime="20170914 01:15:57.973"></status>
</kw>
<status status="PASS" endtime="20170914 01:15:57.973" starttime="20170914 01:15:57.972"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170914 01:15:57.974" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170914011546893001_HostCodeUpdate/20170914011546893001_RESTHostCodeUpdate/9.3.21.61.170914.011423.BMC_general.txt"&gt;/home/fspcibld/logs/20170914011546893001_HostCodeUpdate/20170914011546893001_RESTHostCodeUpdate/9.3.21.61.170914.011423.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170914 01:15:57.974" starttime="20170914 01:15:57.974"></status>
</kw>
<status status="PASS" endtime="20170914 01:15:57.975" starttime="20170914 01:15:57.973"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170914 01:15:57.976" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170914011546893001_HostCodeUpdate/20170914011546893001_RESTHostCodeUpdate/9.3.21.61.170914.011423.BMC_general.txt"&gt;/home/fspcibld/logs/20170914011546893001_HostCodeUpdate/20170914011546893001_RESTHostCodeUpdate/9.3.21.61.170914.011423.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170914 01:15:57.976" starttime="20170914 01:15:57.975"></status>
</kw>
<status status="PASS" endtime="20170914 01:15:57.976" starttime="20170914 01:15:57.975"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170914 01:15:57.977" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170914011546893001_HostCodeUpdate/20170914011546893001_RESTHostCodeUpdate/9.3.21.61.170914.011423.BMC_general.txt"&gt;/home/fspcibld/logs/20170914011546893001_HostCodeUpdate/20170914011546893001_RESTHostCodeUpdate/9.3.21.61.170914.011423.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170914 01:15:57.977" starttime="20170914 01:15:57.977"></status>
</kw>
<status status="PASS" endtime="20170914 01:15:57.977" starttime="20170914 01:15:57.976"></status>
</kw>
<status status="PASS" endtime="20170914 01:15:57.977" starttime="20170914 01:15:57.971"></status>
</kw>
<status status="PASS" endtime="20170914 01:15:57.977" starttime="20170914 01:15:57.971"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170914 01:15:57.978" level="INFO">${cmd_buf} = BMC Execute Command  df -hT  ignore_err=1</msg>
<status status="PASS" endtime="20170914 01:15:57.978" starttime="20170914 01:15:57.978"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>df -hT</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170914 01:15:58.050" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.21.61
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170914 01:15:58.050" level="INFO">index=2
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.21.61
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170914 01:15:58.051" level="INFO">Executing command 'df -hT'.</msg>
<msg timestamp="20170914 01:15:58.633" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170914 01:15:58.633" starttime="20170914 01:15:58.007"></status>
</kw>
<msg timestamp="20170914 01:15:58.633" level="INFO">${status} = PASS</msg>
<msg timestamp="20170914 01:15:58.633" level="INFO">${ret_values} = (u'Filesystem           Type            Size      Used Available Use% Mounted on\ndev                  devtmpfs      210.2M         0    210.2M   0% /dev\ntmpfs                tmpfs         211.1M    ...</msg>
<status status="PASS" endtime="20170914 01:15:58.633" starttime="20170914 01:15:57.978"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170914 01:15:58.634" level="INFO">${stdout} = Filesystem           Type            Size      Used Available Use% Mounted on
dev                  devtmpfs      210.2M         0    210.2M   0% /dev
tmpfs                tmpfs         211.1M     13.9...</msg>
<status status="PASS" endtime="20170914 01:15:58.634" starttime="20170914 01:15:58.634"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170914 01:15:58.635" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170914 01:15:58.635" starttime="20170914 01:15:58.634"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170914 01:15:58.643" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170914011546893001_HostCodeUpdate/20170914011546893001_RESTHostCodeUpdate/9.3.21.61.170914.011423.BMC_general.txt"&gt;/home/fspcibld/logs/20170914011546893001_HostCodeUpdate/20170914011546893001_RESTHostCodeUpdate/9.3.21.61.170914.011423.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170914 01:15:58.643" starttime="20170914 01:15:58.642"></status>
</kw>
<status status="PASS" endtime="20170914 01:15:58.643" starttime="20170914 01:15:58.641"></status>
</kw>
<status status="PASS" endtime="20170914 01:15:58.643" starttime="20170914 01:15:58.635"></status>
</kw>
<status status="PASS" endtime="20170914 01:15:58.643" starttime="20170914 01:15:57.970"></status>
</kw>
<status status="PASS" endtime="20170914 01:15:58.643" starttime="20170914 01:15:57.970"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC OS', 'uname -a')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170914 01:15:58.646" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170914011546893001_HostCodeUpdate/20170914011546893001_RESTHostCodeUpdate/9.3.21.61.170914.011423.BMC_general.txt"&gt;/home/fspcibld/logs/20170914011546893001_HostCodeUpdate/20170914011546893001_RESTHostCodeUpdate/9.3.21.61.170914.011423.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170914 01:15:58.646" starttime="20170914 01:15:58.646"></status>
</kw>
<status status="PASS" endtime="20170914 01:15:58.646" starttime="20170914 01:15:58.645"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170914 01:15:58.648" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170914011546893001_HostCodeUpdate/20170914011546893001_RESTHostCodeUpdate/9.3.21.61.170914.011423.BMC_general.txt"&gt;/home/fspcibld/logs/20170914011546893001_HostCodeUpdate/20170914011546893001_RESTHostCodeUpdate/9.3.21.61.170914.011423.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170914 01:15:58.648" starttime="20170914 01:15:58.647"></status>
</kw>
<status status="PASS" endtime="20170914 01:15:58.648" starttime="20170914 01:15:58.647"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170914 01:15:58.649" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170914011546893001_HostCodeUpdate/20170914011546893001_RESTHostCodeUpdate/9.3.21.61.170914.011423.BMC_general.txt"&gt;/home/fspcibld/logs/20170914011546893001_HostCodeUpdate/20170914011546893001_RESTHostCodeUpdate/9.3.21.61.170914.011423.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170914 01:15:58.649" starttime="20170914 01:15:58.649"></status>
</kw>
<status status="PASS" endtime="20170914 01:15:58.649" starttime="20170914 01:15:58.648"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170914 01:15:58.650" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170914011546893001_HostCodeUpdate/20170914011546893001_RESTHostCodeUpdate/9.3.21.61.170914.011423.BMC_general.txt"&gt;/home/fspcibld/logs/20170914011546893001_HostCodeUpdate/20170914011546893001_RESTHostCodeUpdate/9.3.21.61.170914.011423.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170914 01:15:58.650" starttime="20170914 01:15:58.650"></status>
</kw>
<status status="PASS" endtime="20170914 01:15:58.651" starttime="20170914 01:15:58.649"></status>
</kw>
<status status="PASS" endtime="20170914 01:15:58.651" starttime="20170914 01:15:58.645"></status>
</kw>
<status status="PASS" endtime="20170914 01:15:58.651" starttime="20170914 01:15:58.644"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170914 01:15:58.652" level="INFO">${cmd_buf} = BMC Execute Command  uname -a  ignore_err=1</msg>
<status status="PASS" endtime="20170914 01:15:58.652" starttime="20170914 01:15:58.651"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>uname -a</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170914 01:15:58.721" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.21.61
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170914 01:15:58.721" level="INFO">index=2
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.21.61
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170914 01:15:58.722" level="INFO">Executing command 'uname -a'.</msg>
<msg timestamp="20170914 01:15:58.966" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170914 01:15:58.966" starttime="20170914 01:15:58.681"></status>
</kw>
<msg timestamp="20170914 01:15:58.966" level="INFO">${status} = PASS</msg>
<msg timestamp="20170914 01:15:58.966" level="INFO">${ret_values} = (u'Linux witherspoon 4.10.17-c4227b43277bbd0992d10d764d4958239786503d #1 Wed Sep 13 22:26:13 UTC 2017 armv6l GNU/Linux', u'', 0)</msg>
<status status="PASS" endtime="20170914 01:15:58.966" starttime="20170914 01:15:58.652"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170914 01:15:58.967" level="INFO">${stdout} = Linux witherspoon 4.10.17-c4227b43277bbd0992d10d764d4958239786503d #1 Wed Sep 13 22:26:13 UTC 2017 armv6l GNU/Linux</msg>
<status status="PASS" endtime="20170914 01:15:58.967" starttime="20170914 01:15:58.967"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170914 01:15:58.968" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170914 01:15:58.968" starttime="20170914 01:15:58.967"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170914 01:15:58.975" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170914011546893001_HostCodeUpdate/20170914011546893001_RESTHostCodeUpdate/9.3.21.61.170914.011423.BMC_general.txt"&gt;/home/fspcibld/logs/20170914011546893001_HostCodeUpdate/20170914011546893001_RESTHostCodeUpdate/9.3.21.61.170914.011423.BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170914 01:15:58.975" starttime="20170914 01:15:58.975"></status>
</kw>
<status status="PASS" endtime="20170914 01:15:58.976" starttime="20170914 01:15:58.974"></status>
</kw>
<status status="PASS" endtime="20170914 01:15:58.976" starttime="20170914 01:15:58.968"></status>
</kw>
<status status="PASS" endtime="20170914 01:15:58.976" starttime="20170914 01:15:58.643"></status>
</kw>
<status status="PASS" endtime="20170914 01:15:58.976" starttime="20170914 01:15:58.643"></status>
</kw>
<status status="PASS" endtime="20170914 01:15:58.976" starttime="20170914 01:15:57.660"></status>
</kw>
<status status="PASS" endtime="20170914 01:15:58.976" starttime="20170914 01:15:57.658"></status>
</kw>
<status status="PASS" endtime="20170914 01:15:58.976" starttime="20170914 01:15:57.658"></status>
</kw>
<status status="PASS" endtime="20170914 01:15:58.976" starttime="20170914 01:15:54.632"></status>
</kw>
<status status="PASS" endtime="20170914 01:15:58.976" starttime="20170914 01:15:54.630"></status>
</kw>
<status status="PASS" endtime="20170914 01:15:58.976" starttime="20170914 01:15:54.607"></status>
</kw>
<status status="PASS" endtime="20170914 01:15:58.976" starttime="20170914 01:15:54.605"></status>
</kw>
<status status="PASS" endtime="20170914 01:15:58.976" starttime="20170914 01:15:54.604"></status>
</kw>
<kw type="foritem" name="${method} = ('Get Request FFDC', 'BMC FFDC Get Requests')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170914 01:15:58.978" starttime="20170914 01:15:58.978"></status>
</kw>
<msg timestamp="20170914 01:15:58.978" level="INFO">${status} = PASS</msg>
<msg timestamp="20170914 01:15:58.979" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170914 01:15:58.979" starttime="20170914 01:15:58.978"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170914 01:15:58.979" starttime="20170914 01:15:58.979"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Get Requests" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Get Ffdc Get Request Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170914 01:15:59.003" level="INFO">@{entries} = [ GET REQUESTS ]</msg>
<status status="PASS" endtime="20170914 01:15:59.003" starttime="20170914 01:15:59.002"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = GET REQUESTS">
<kw name="Log FFDC Get Requests" library="openbmc_ffdc_methods">
<doc>Create file in current FFDC log directory.</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Get Request" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170914 01:15:59.004" level="INFO">@{cmd_list} = [ ('BMC_sensor_list', '/xyz/openbmc_project/sensors/enumerate') | ('BMC_control_list', '/xyz/openbmc_project/control/enumerate') | ('BMC_led', '/xyz/openbmc_project/led/enumerate') | ('FIRMWARE_list',...</msg>
<status status="PASS" endtime="20170914 01:15:59.005" starttime="20170914 01:15:59.004"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC_sensor_list', '/xyz/openbmc_project/sensors/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170914 01:15:59.005" level="INFO">${logpath} = /home/fspcibld/logs/20170914011546893001_HostCodeUpdate/20170914011546893001_RESTHostCodeUpdate/9.3.21.61.170914.011423.BMC_sensor_list.txt</msg>
<status status="PASS" endtime="20170914 01:15:59.006" starttime="20170914 01:15:59.005"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170914 01:15:59.012" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170914 01:15:59.012" starttime="20170914 01:15:59.011"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170914 01:15:59.013" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170914 01:15:59.013" starttime="20170914 01:15:59.013"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170914 01:15:59.014" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170914 01:15:59.014" starttime="20170914 01:15:59.013"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170914 01:15:59.015" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170914 01:15:59.015" starttime="20170914 01:15:59.014"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170914 01:16:09.033" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.3.21.61', port=443): Read timed out. (read timeout=10.0)</msg>
<status status="FAIL" endtime="20170914 01:16:09.033" starttime="20170914 01:15:59.015"></status>
</kw>
<msg timestamp="20170914 01:16:09.033" level="INFO">${status} = FAIL</msg>
<msg timestamp="20170914 01:16:09.033" level="INFO">${resp} = ReadTimeout: HTTPSConnectionPool(host='9.3.21.61', port=443): Read timed out. (read timeout=10.0)</msg>
<status status="PASS" endtime="20170914 01:16:09.033" starttime="20170914 01:15:59.015"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170914 01:16:09.034" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170914 01:16:09.034" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.3.21.61', port=443): Read timed out. (read timeout=10.0): FAIL != PASS</msg>
<status status="FAIL" endtime="20170914 01:16:09.034" starttime="20170914 01:16:09.034"></status>
</kw>
<status status="FAIL" endtime="20170914 01:16:09.034" starttime="20170914 01:15:59.008"></status>
</kw>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170914 01:16:29.037" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170914 01:16:29.038" starttime="20170914 01:16:29.036"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170914 01:16:29.038" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170914 01:16:29.038" starttime="20170914 01:16:29.038"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170914 01:16:29.039" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170914 01:16:29.039" starttime="20170914 01:16:29.039"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170914 01:16:29.040" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170914 01:16:29.040" starttime="20170914 01:16:29.039"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170914 01:16:39.049" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.3.21.61', port=443): Read timed out. (read timeout=10.0)</msg>
<status status="FAIL" endtime="20170914 01:16:39.050" starttime="20170914 01:16:29.041"></status>
</kw>
<msg timestamp="20170914 01:16:39.050" level="INFO">${status} = FAIL</msg>
<msg timestamp="20170914 01:16:39.050" level="INFO">${resp} = ReadTimeout: HTTPSConnectionPool(host='9.3.21.61', port=443): Read timed out. (read timeout=10.0)</msg>
<status status="PASS" endtime="20170914 01:16:39.050" starttime="20170914 01:16:29.040"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170914 01:16:39.051" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170914 01:16:39.051" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.3.21.61', port=443): Read timed out. (read timeout=10.0): FAIL != PASS</msg>
<status status="FAIL" endtime="20170914 01:16:39.051" starttime="20170914 01:16:39.050"></status>
</kw>
<status status="FAIL" endtime="20170914 01:16:39.051" starttime="20170914 01:16:29.035"></status>
</kw>
<msg timestamp="20170914 01:16:39.051" level="FAIL">Keyword 'Post Login Request' failed after retrying for 40 seconds. The last error was: ReadTimeout: HTTPSConnectionPool(host='9.3.21.61', port=443): Read timed out. (read timeout=10.0): FAIL != PASS</msg>
<status status="FAIL" endtime="20170914 01:16:39.051" starttime="20170914 01:15:59.007"></status>
</kw>
<status status="FAIL" endtime="20170914 01:16:39.052" starttime="20170914 01:15:59.006"></status>
</kw>
<status status="FAIL" endtime="20170914 01:16:39.052" starttime="20170914 01:15:59.006"></status>
</kw>
<status status="FAIL" endtime="20170914 01:16:39.052" starttime="20170914 01:15:59.005"></status>
</kw>
<status status="FAIL" endtime="20170914 01:16:39.052" starttime="20170914 01:15:59.005"></status>
</kw>
<status status="FAIL" endtime="20170914 01:16:39.052" starttime="20170914 01:15:59.004"></status>
</kw>
<status status="FAIL" endtime="20170914 01:16:39.052" starttime="20170914 01:15:59.003"></status>
</kw>
<status status="FAIL" endtime="20170914 01:16:39.052" starttime="20170914 01:15:59.003"></status>
</kw>
<status status="FAIL" endtime="20170914 01:16:39.052" starttime="20170914 01:15:59.002"></status>
</kw>
<status status="PASS" endtime="20170914 01:16:39.052" starttime="20170914 01:15:58.980"></status>
</kw>
<status status="PASS" endtime="20170914 01:16:39.053" starttime="20170914 01:15:58.977"></status>
</kw>
<status status="PASS" endtime="20170914 01:16:39.053" starttime="20170914 01:15:58.977"></status>
</kw>
<kw type="foritem" name="${method} = ('Sys Inventory Files', 'System Inventory Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170914 01:16:39.055" starttime="20170914 01:16:39.054"></status>
</kw>
<msg timestamp="20170914 01:16:39.055" level="INFO">${status} = PASS</msg>
<msg timestamp="20170914 01:16:39.055" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170914 01:16:39.055" starttime="20170914 01:16:39.054"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170914 01:16:39.055" starttime="20170914 01:16:39.055"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="System Inventory Files" library="openbmc_ffdc_methods">
<doc>Copy systest os_inventory files.</doc>
<kw name="Copy Files" library="OperatingSystem">
<doc>Copies specified files to the target directory.</doc>
<arguments>
<arg>os_inventory_*.json</arg>
<arg>${ffdc_dir_path}</arg>
</arguments>
<status status="PASS" endtime="20170914 01:16:39.081" starttime="20170914 01:16:39.079"></status>
</kw>
<kw name="Remove Files" library="OperatingSystem">
<doc>Uses `Remove File` to remove multiple files one-by-one.</doc>
<arguments>
<arg>os_inventory_*.json</arg>
</arguments>
<msg timestamp="20170914 01:16:39.083" html="yes" level="INFO">File '&lt;a href="file:///home/fspcibld/os_inventory_*.json"&gt;/home/fspcibld/os_inventory_*.json&lt;/a&gt;' does not exist.</msg>
<status status="PASS" endtime="20170914 01:16:39.083" starttime="20170914 01:16:39.082"></status>
</kw>
<status status="PASS" endtime="20170914 01:16:39.083" starttime="20170914 01:16:39.078"></status>
</kw>
<status status="PASS" endtime="20170914 01:16:39.084" starttime="20170914 01:16:39.056"></status>
</kw>
<status status="PASS" endtime="20170914 01:16:39.084" starttime="20170914 01:16:39.053"></status>
</kw>
<status status="PASS" endtime="20170914 01:16:39.084" starttime="20170914 01:16:39.053"></status>
</kw>
<kw type="foritem" name="${method} = ('Core Files', 'SCP Coredump Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170914 01:16:39.088" starttime="20170914 01:16:39.088"></status>
</kw>
<msg timestamp="20170914 01:16:39.088" level="INFO">${status} = PASS</msg>
<msg timestamp="20170914 01:16:39.088" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170914 01:16:39.088" starttime="20170914 01:16:39.087"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170914 01:16:39.089" starttime="20170914 01:16:39.088"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="SCP Coredump Files" library="openbmc_ffdc_methods">
<doc>Copy core dump file from BMC to local system.</doc>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>ls /tmp/core_*</arg>
</arguments>
<assign>
<var>${core_files}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20170914 01:16:39.150" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.21.61
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170914 01:16:39.150" level="INFO">index=2
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.21.61
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170914 01:16:39.150" level="INFO">Executing command 'ls /tmp/core_*'.</msg>
<msg timestamp="20170914 01:16:39.400" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20170914 01:16:39.415" level="FAIL">#(UTC) 2017/09/14 01:16:39.414119 -   44.840955 - **ERROR** The prior SSH command returned a non-zero return code:
rc:                                               0x00000001
ls: /tmp/core_*: No such file or directory
: 1 != 0</msg>
<status status="FAIL" endtime="20170914 01:16:39.415" starttime="20170914 01:16:39.114"></status>
</kw>
<status status="FAIL" endtime="20170914 01:16:39.416" starttime="20170914 01:16:39.113"></status>
</kw>
<status status="PASS" endtime="20170914 01:16:39.416" starttime="20170914 01:16:39.089"></status>
</kw>
<status status="PASS" endtime="20170914 01:16:39.416" starttime="20170914 01:16:39.086"></status>
</kw>
<status status="PASS" endtime="20170914 01:16:39.416" starttime="20170914 01:16:39.084"></status>
</kw>
<kw type="foritem" name="${method} = ('BMC Specific Files', 'BMC FFDC Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170914 01:16:39.418" starttime="20170914 01:16:39.418"></status>
</kw>
<msg timestamp="20170914 01:16:39.418" level="INFO">${status} = PASS</msg>
<msg timestamp="20170914 01:16:39.418" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170914 01:16:39.418" starttime="20170914 01:16:39.417"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170914 01:16:39.419" starttime="20170914 01:16:39.419"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Files" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Get Ffdc File Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170914 01:16:39.443" level="INFO">@{entries} = [ BMC FILES ]</msg>
<status status="PASS" endtime="20170914 01:16:39.444" starttime="20170914 01:16:39.443"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC FILES">
<kw name="Create File and Write Data" library="openbmc_ffdc_methods">
<doc>Create files to current FFDC log directory,</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc File" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170914 01:16:39.449" level="INFO">@{cmd_list} = [ ('BMC_procinfo', 'cat /proc/cpuinfo') | ('BMC_proc_fd_active_list', 'ls -Al /proc/*/fd/') | ('BMC_journalctl_nopager', 'journalctl --no-pager') | ('BMC_journalctl_pretty', 'journalctl -o json-pretty...</msg>
<status status="PASS" endtime="20170914 01:16:39.449" starttime="20170914 01:16:39.448"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC_procinfo', 'cat /proc/cpuinfo')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170914 01:16:39.450" level="INFO">${logpath} = /home/fspcibld/logs/20170914011546893001_HostCodeUpdate/20170914011546893001_RESTHostCodeUpdate/9.3.21.61.170914.011423.BMC_procinfo.txt</msg>
<status status="PASS" endtime="20170914 01:16:39.450" starttime="20170914 01:16:39.449"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170914 01:16:39.451" starttime="20170914 01:16:39.451"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170914 01:16:39.452" level="INFO">${cmd_buf} = BMC Execute Command  cat /proc/cpuinfo  ignore_err=1</msg>
<status status="PASS" endtime="20170914 01:16:39.453" starttime="20170914 01:16:39.452"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /proc/cpuinfo</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170914 01:16:39.525" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.21.61
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170914 01:16:39.525" level="INFO">index=2
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.21.61
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170914 01:16:39.525" level="INFO">Executing command 'cat /proc/cpuinfo'.</msg>
<msg timestamp="20170914 01:16:39.873" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170914 01:16:39.873" starttime="20170914 01:16:39.485"></status>
</kw>
<msg timestamp="20170914 01:16:39.873" level="INFO">${status} = PASS</msg>
<msg timestamp="20170914 01:16:39.873" level="INFO">${ret_values} = (u'processor\t: 0\nmodel name\t: ARMv6-compatible processor rev 7 (v6l)\nBogoMIPS\t: 789.70\nFeatures\t: half thumb fastmult edsp java tls \nCPU implementer\t: 0x41\nCPU architecture: 7\nCPU variant\t...</msg>
<status status="PASS" endtime="20170914 01:16:39.874" starttime="20170914 01:16:39.454"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170914 01:16:39.874" level="INFO">${stdout} = processor	: 0
model name	: ARMv6-compatible processor rev 7 (v6l)
BogoMIPS	: 789.70
Features	: half thumb fastmult edsp java tls 
CPU implementer	: 0x41
CPU architecture: 7
CPU variant	: 0x0
CPU part	...</msg>
<status status="PASS" endtime="20170914 01:16:39.874" starttime="20170914 01:16:39.874"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170914 01:16:39.875" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170914 01:16:39.875" starttime="20170914 01:16:39.875"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170914 01:16:39.883" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170914011546893001_HostCodeUpdate/20170914011546893001_RESTHostCodeUpdate/9.3.21.61.170914.011423.BMC_procinfo.txt"&gt;/home/fspcibld/logs/20170914011546893001_HostCodeUpdate/20170914011546893001_RESTHostCodeUpdate/9.3.21.61.170914.011423.BMC_procinfo.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170914 01:16:39.883" starttime="20170914 01:16:39.882"></status>
</kw>
<status status="PASS" endtime="20170914 01:16:39.883" starttime="20170914 01:16:39.881"></status>
</kw>
<status status="PASS" endtime="20170914 01:16:39.883" starttime="20170914 01:16:39.875"></status>
</kw>
<status status="PASS" endtime="20170914 01:16:39.883" starttime="20170914 01:16:39.450"></status>
</kw>
<status status="PASS" endtime="20170914 01:16:39.883" starttime="20170914 01:16:39.449"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_proc_fd_active_list', 'ls -Al /proc/*/fd/')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170914 01:16:39.884" level="INFO">${logpath} = /home/fspcibld/logs/20170914011546893001_HostCodeUpdate/20170914011546893001_RESTHostCodeUpdate/9.3.21.61.170914.011423.BMC_proc_fd_active_list.txt</msg>
<status status="PASS" endtime="20170914 01:16:39.884" starttime="20170914 01:16:39.884"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170914 01:16:39.886" starttime="20170914 01:16:39.885"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170914 01:16:39.886" level="INFO">${cmd_buf} = BMC Execute Command  ls -Al /proc/*/fd/  ignore_err=1</msg>
<status status="PASS" endtime="20170914 01:16:39.886" starttime="20170914 01:16:39.886"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>ls -Al /proc/*/fd/</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170914 01:16:39.956" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.21.61
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170914 01:16:39.956" level="INFO">index=2
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.21.61
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170914 01:16:39.957" level="INFO">Executing command 'ls -Al /proc/*/fd/'.</msg>
<msg timestamp="20170914 01:16:41.202" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170914 01:16:41.203" starttime="20170914 01:16:39.915"></status>
</kw>
<msg timestamp="20170914 01:16:41.203" level="INFO">${status} = PASS</msg>
<msg timestamp="20170914 01:16:41.204" level="INFO">${ret_values} = (u'/proc/1/fd/:\ntotal 0\nlrwx------    1 root     root            64 Sep 14 01:16 0 -&gt; /dev/null\nlrwx------    1 root     root            64 Sep 14 01:16 1 -&gt; /dev/null\nlr-x------    1 root     roo...</msg>
<status status="PASS" endtime="20170914 01:16:41.204" starttime="20170914 01:16:39.887"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170914 01:16:41.205" level="INFO">${stdout} = /proc/1/fd/:
total 0
lrwx------    1 root     root            64 Sep 14 01:16 0 -&gt; /dev/null
lrwx------    1 root     root            64 Sep 14 01:16 1 -&gt; /dev/null
lr-x------    1 root     root      ...</msg>
<status status="PASS" endtime="20170914 01:16:41.205" starttime="20170914 01:16:41.204"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170914 01:16:41.206" level="INFO">${stderr} = ls: /proc/1190/fd/3: cannot read link: No such file or directory
ls: /proc/self/fd/3: cannot read link: No such file or directory
ls: /proc/thread-self/fd/3: cannot read link: No such file or director...</msg>
<status status="PASS" endtime="20170914 01:16:41.206" starttime="20170914 01:16:41.205"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170914 01:16:41.214" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170914011546893001_HostCodeUpdate/20170914011546893001_RESTHostCodeUpdate/9.3.21.61.170914.011423.BMC_proc_fd_active_list.txt"&gt;/home/fspcibld/logs/20170914011546893001_HostCodeUpdate/20170914011546893001_RESTHostCodeUpdate/9.3.21.61.170914.011423.BMC_proc_fd_active_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170914 01:16:41.214" starttime="20170914 01:16:41.213"></status>
</kw>
<status status="PASS" endtime="20170914 01:16:41.214" starttime="20170914 01:16:41.212"></status>
</kw>
<status status="PASS" endtime="20170914 01:16:41.214" starttime="20170914 01:16:41.206"></status>
</kw>
<status status="PASS" endtime="20170914 01:16:41.215" starttime="20170914 01:16:39.884"></status>
</kw>
<status status="PASS" endtime="20170914 01:16:41.215" starttime="20170914 01:16:39.883"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_journalctl_nopager', 'journalctl --no-pager')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170914 01:16:41.215" level="INFO">${logpath} = /home/fspcibld/logs/20170914011546893001_HostCodeUpdate/20170914011546893001_RESTHostCodeUpdate/9.3.21.61.170914.011423.BMC_journalctl_nopager.txt</msg>
<status status="PASS" endtime="20170914 01:16:41.215" starttime="20170914 01:16:41.215"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170914 01:16:41.217" starttime="20170914 01:16:41.216"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170914 01:16:41.218" level="INFO">${cmd_buf} = BMC Execute Command  journalctl --no-pager  ignore_err=1</msg>
<status status="PASS" endtime="20170914 01:16:41.218" starttime="20170914 01:16:41.217"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>journalctl --no-pager</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170914 01:16:41.289" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.21.61
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170914 01:16:41.289" level="INFO">index=2
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.21.61
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170914 01:16:41.289" level="INFO">Executing command 'journalctl --no-pager'.</msg>
<msg timestamp="20170914 01:16:42.587" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170914 01:16:42.588" starttime="20170914 01:16:41.247"></status>
</kw>
<msg timestamp="20170914 01:16:42.588" level="INFO">${status} = PASS</msg>
<msg timestamp="20170914 01:16:42.589" level="INFO">${ret_values} = (u'-- Logs begin at Thu 2017-09-14 01:15:24 UTC, end at Thu 2017-09-14 01:16:43 UTC. --\nSep 14 01:15:24 witherspoon kernel: Booting Linux on physical CPU 0x0\nSep 14 01:15:24 witherspoon kernel: Linu...</msg>
<status status="PASS" endtime="20170914 01:16:42.589" starttime="20170914 01:16:41.218"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170914 01:16:42.590" level="INFO">${stdout} = -- Logs begin at Thu 2017-09-14 01:15:24 UTC, end at Thu 2017-09-14 01:16:43 UTC. --
Sep 14 01:15:24 witherspoon kernel: Booting Linux on physical CPU 0x0
Sep 14 01:15:24 witherspoon kernel: Linux ver...</msg>
<status status="PASS" endtime="20170914 01:16:42.590" starttime="20170914 01:16:42.590"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170914 01:16:42.591" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170914 01:16:42.591" starttime="20170914 01:16:42.591"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170914 01:16:42.599" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170914011546893001_HostCodeUpdate/20170914011546893001_RESTHostCodeUpdate/9.3.21.61.170914.011423.BMC_journalctl_nopager.txt"&gt;/home/fspcibld/logs/20170914011546893001_HostCodeUpdate/20170914011546893001_RESTHostCodeUpdate/9.3.21.61.170914.011423.BMC_journalctl_nopager.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170914 01:16:42.599" starttime="20170914 01:16:42.598"></status>
</kw>
<status status="PASS" endtime="20170914 01:16:42.599" starttime="20170914 01:16:42.597"></status>
</kw>
<status status="PASS" endtime="20170914 01:16:42.599" starttime="20170914 01:16:42.591"></status>
</kw>
<status status="PASS" endtime="20170914 01:16:42.599" starttime="20170914 01:16:41.216"></status>
</kw>
<status status="PASS" endtime="20170914 01:16:42.599" starttime="20170914 01:16:41.215"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_journalctl_pretty', 'journalctl -o json-pretty')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170914 01:16:42.600" level="INFO">${logpath} = /home/fspcibld/logs/20170914011546893001_HostCodeUpdate/20170914011546893001_RESTHostCodeUpdate/9.3.21.61.170914.011423.BMC_journalctl_pretty.txt</msg>
<status status="PASS" endtime="20170914 01:16:42.600" starttime="20170914 01:16:42.600"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170914 01:16:42.602" starttime="20170914 01:16:42.601"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170914 01:16:42.603" level="INFO">${cmd_buf} = BMC Execute Command  journalctl -o json-pretty  ignore_err=1</msg>
<status status="PASS" endtime="20170914 01:16:42.603" starttime="20170914 01:16:42.602"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>journalctl -o json-pretty</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170914 01:16:42.673" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.21.61
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170914 01:16:42.673" level="INFO">index=2
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.21.61
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170914 01:16:42.674" level="INFO">Executing command 'journalctl -o json-pretty'.</msg>
<msg timestamp="20170914 01:16:47.623" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170914 01:16:47.624" starttime="20170914 01:16:42.634"></status>
</kw>
<msg timestamp="20170914 01:16:47.625" level="INFO">${status} = PASS</msg>
<msg timestamp="20170914 01:16:47.635" level="INFO">${ret_values} = (u'{\n\t"__CURSOR" : "s=46533d10e252476e8b729c8818c2caf5;i=1;b=af4be6cfe8f7427c85fc7ad8e1626ec2;m=da5917;t=5591c02c8381c;x=dc03029b84a686aa",\n\t"__REALTIME_TIMESTAMP" : "1505351724185628",\n\t"__MONO...</msg>
<status status="PASS" endtime="20170914 01:16:47.635" starttime="20170914 01:16:42.603"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170914 01:16:47.638" level="INFO">${stdout} = {
	"__CURSOR" : "s=46533d10e252476e8b729c8818c2caf5;i=1;b=af4be6cfe8f7427c85fc7ad8e1626ec2;m=da5917;t=5591c02c8381c;x=dc03029b84a686aa",
	"__REALTIME_TIMESTAMP" : "1505351724185628",
	"__MONOTONIC_TIM...</msg>
<status status="PASS" endtime="20170914 01:16:47.639" starttime="20170914 01:16:47.636"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170914 01:16:47.639" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170914 01:16:47.639" starttime="20170914 01:16:47.639"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170914 01:16:47.651" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170914011546893001_HostCodeUpdate/20170914011546893001_RESTHostCodeUpdate/9.3.21.61.170914.011423.BMC_journalctl_pretty.txt"&gt;/home/fspcibld/logs/20170914011546893001_HostCodeUpdate/20170914011546893001_RESTHostCodeUpdate/9.3.21.61.170914.011423.BMC_journalctl_pretty.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170914 01:16:47.651" starttime="20170914 01:16:47.649"></status>
</kw>
<status status="PASS" endtime="20170914 01:16:47.651" starttime="20170914 01:16:47.646"></status>
</kw>
<status status="PASS" endtime="20170914 01:16:47.652" starttime="20170914 01:16:47.640"></status>
</kw>
<status status="PASS" endtime="20170914 01:16:47.652" starttime="20170914 01:16:42.601"></status>
</kw>
<status status="PASS" endtime="20170914 01:16:47.652" starttime="20170914 01:16:42.600"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_meminfo', 'cat /proc/meminfo')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170914 01:16:47.653" level="INFO">${logpath} = /home/fspcibld/logs/20170914011546893001_HostCodeUpdate/20170914011546893001_RESTHostCodeUpdate/9.3.21.61.170914.011423.BMC_meminfo.txt</msg>
<status status="PASS" endtime="20170914 01:16:47.653" starttime="20170914 01:16:47.652"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170914 01:16:47.654" starttime="20170914 01:16:47.654"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170914 01:16:47.655" level="INFO">${cmd_buf} = BMC Execute Command  cat /proc/meminfo  ignore_err=1</msg>
<status status="PASS" endtime="20170914 01:16:47.655" starttime="20170914 01:16:47.655"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /proc/meminfo</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170914 01:16:47.729" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.21.61
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170914 01:16:47.729" level="INFO">index=2
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.21.61
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170914 01:16:47.730" level="INFO">Executing command 'cat /proc/meminfo'.</msg>
<msg timestamp="20170914 01:16:48.415" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170914 01:16:48.415" starttime="20170914 01:16:47.686"></status>
</kw>
<msg timestamp="20170914 01:16:48.415" level="INFO">${status} = PASS</msg>
<msg timestamp="20170914 01:16:48.415" level="INFO">${ret_values} = (u'MemTotal:         432240 kB\nMemFree:          280284 kB\nMemAvailable:     326964 kB\nBuffers:           11376 kB\nCached:            52188 kB\nSwapCached:            0 kB\nActive:            9017...</msg>
<status status="PASS" endtime="20170914 01:16:48.415" starttime="20170914 01:16:47.655"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170914 01:16:48.416" level="INFO">${stdout} = MemTotal:         432240 kB
MemFree:          280284 kB
MemAvailable:     326964 kB
Buffers:           11376 kB
Cached:            52188 kB
SwapCached:            0 kB
Active:            90176 kB
Inac...</msg>
<status status="PASS" endtime="20170914 01:16:48.416" starttime="20170914 01:16:48.416"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170914 01:16:48.417" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170914 01:16:48.417" starttime="20170914 01:16:48.417"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170914 01:16:48.425" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170914011546893001_HostCodeUpdate/20170914011546893001_RESTHostCodeUpdate/9.3.21.61.170914.011423.BMC_meminfo.txt"&gt;/home/fspcibld/logs/20170914011546893001_HostCodeUpdate/20170914011546893001_RESTHostCodeUpdate/9.3.21.61.170914.011423.BMC_meminfo.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170914 01:16:48.425" starttime="20170914 01:16:48.424"></status>
</kw>
<status status="PASS" endtime="20170914 01:16:48.425" starttime="20170914 01:16:48.423"></status>
</kw>
<status status="PASS" endtime="20170914 01:16:48.425" starttime="20170914 01:16:48.417"></status>
</kw>
<status status="PASS" endtime="20170914 01:16:48.425" starttime="20170914 01:16:47.653"></status>
</kw>
<status status="PASS" endtime="20170914 01:16:48.425" starttime="20170914 01:16:47.652"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_proc_list', 'top -n 1 -b')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170914 01:16:48.426" level="INFO">${logpath} = /home/fspcibld/logs/20170914011546893001_HostCodeUpdate/20170914011546893001_RESTHostCodeUpdate/9.3.21.61.170914.011423.BMC_proc_list.txt</msg>
<status status="PASS" endtime="20170914 01:16:48.426" starttime="20170914 01:16:48.425"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170914 01:16:48.427" starttime="20170914 01:16:48.427"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170914 01:16:48.428" level="INFO">${cmd_buf} = BMC Execute Command  top -n 1 -b  ignore_err=1</msg>
<status status="PASS" endtime="20170914 01:16:48.428" starttime="20170914 01:16:48.427"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>top -n 1 -b</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170914 01:16:48.498" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.21.61
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170914 01:16:48.498" level="INFO">index=2
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.21.61
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170914 01:16:48.499" level="INFO">Executing command 'top -n 1 -b'.</msg>
<msg timestamp="20170914 01:16:48.957" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170914 01:16:48.957" starttime="20170914 01:16:48.459"></status>
</kw>
<msg timestamp="20170914 01:16:48.957" level="INFO">${status} = PASS</msg>
<msg timestamp="20170914 01:16:48.958" level="INFO">${ret_values} = (u'Mem: 152228K used, 280012K free, 14404K shrd, 11376K buff, 52192K cached\nCPU: 100% usr   0% sys   0% nic   0% idle   0% io   0% irq   0% sirq\nLoad average: 4.95 1.96 0.72 8/157 1209\n  PID  PPID ...</msg>
<status status="PASS" endtime="20170914 01:16:48.958" starttime="20170914 01:16:48.428"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170914 01:16:48.959" level="INFO">${stdout} = Mem: 152228K used, 280012K free, 14404K shrd, 11376K buff, 52192K cached
CPU: 100% usr   0% sys   0% nic   0% idle   0% io   0% irq   0% sirq
Load average: 4.95 1.96 0.72 8/157 1209
  PID  PPID USER  ...</msg>
<status status="PASS" endtime="20170914 01:16:48.959" starttime="20170914 01:16:48.958"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170914 01:16:48.959" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170914 01:16:48.959" starttime="20170914 01:16:48.959"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170914 01:16:48.967" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170914011546893001_HostCodeUpdate/20170914011546893001_RESTHostCodeUpdate/9.3.21.61.170914.011423.BMC_proc_list.txt"&gt;/home/fspcibld/logs/20170914011546893001_HostCodeUpdate/20170914011546893001_RESTHostCodeUpdate/9.3.21.61.170914.011423.BMC_proc_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170914 01:16:48.967" starttime="20170914 01:16:48.967"></status>
</kw>
<status status="PASS" endtime="20170914 01:16:48.967" starttime="20170914 01:16:48.966"></status>
</kw>
<status status="PASS" endtime="20170914 01:16:48.967" starttime="20170914 01:16:48.960"></status>
</kw>
<status status="PASS" endtime="20170914 01:16:48.968" starttime="20170914 01:16:48.426"></status>
</kw>
<status status="PASS" endtime="20170914 01:16:48.968" starttime="20170914 01:16:48.425"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_dmesg', 'dmesg')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170914 01:16:48.968" level="INFO">${logpath} = /home/fspcibld/logs/20170914011546893001_HostCodeUpdate/20170914011546893001_RESTHostCodeUpdate/9.3.21.61.170914.011423.BMC_dmesg.txt</msg>
<status status="PASS" endtime="20170914 01:16:48.968" starttime="20170914 01:16:48.968"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170914 01:16:48.970" starttime="20170914 01:16:48.969"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170914 01:16:48.971" level="INFO">${cmd_buf} = BMC Execute Command  dmesg  ignore_err=1</msg>
<status status="PASS" endtime="20170914 01:16:48.971" starttime="20170914 01:16:48.970"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>dmesg</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170914 01:16:49.041" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.21.61
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170914 01:16:49.041" level="INFO">index=2
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.21.61
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170914 01:16:49.042" level="INFO">Executing command 'dmesg'.</msg>
<msg timestamp="20170914 01:16:49.200" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170914 01:16:49.200" starttime="20170914 01:16:49.001"></status>
</kw>
<msg timestamp="20170914 01:16:49.201" level="INFO">${status} = PASS</msg>
<msg timestamp="20170914 01:16:49.201" level="INFO">${ret_values} = (u'[    0.000000] Memory policy: Data cache writeback\n[    0.000000] SOC Rev: 04030303\n[    0.000000] On node 0 totalpages: 110592\n[    0.000000] free_area_init_node: node 0, pgdat 806038a4, node_m...</msg>
<status status="PASS" endtime="20170914 01:16:49.201" starttime="20170914 01:16:48.971"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170914 01:16:49.202" level="INFO">${stdout} = [    0.000000] Memory policy: Data cache writeback
[    0.000000] SOC Rev: 04030303
[    0.000000] On node 0 totalpages: 110592
[    0.000000] free_area_init_node: node 0, pgdat 806038a4, node_mem_map...</msg>
<status status="PASS" endtime="20170914 01:16:49.202" starttime="20170914 01:16:49.201"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170914 01:16:49.202" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170914 01:16:49.202" starttime="20170914 01:16:49.202"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170914 01:16:49.211" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170914011546893001_HostCodeUpdate/20170914011546893001_RESTHostCodeUpdate/9.3.21.61.170914.011423.BMC_dmesg.txt"&gt;/home/fspcibld/logs/20170914011546893001_HostCodeUpdate/20170914011546893001_RESTHostCodeUpdate/9.3.21.61.170914.011423.BMC_dmesg.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170914 01:16:49.211" starttime="20170914 01:16:49.210"></status>
</kw>
<status status="PASS" endtime="20170914 01:16:49.211" starttime="20170914 01:16:49.209"></status>
</kw>
<status status="PASS" endtime="20170914 01:16:49.211" starttime="20170914 01:16:49.203"></status>
</kw>
<status status="PASS" endtime="20170914 01:16:49.211" starttime="20170914 01:16:48.969"></status>
</kw>
<status status="PASS" endtime="20170914 01:16:49.211" starttime="20170914 01:16:48.968"></status>
</kw>
<status status="PASS" endtime="20170914 01:16:49.211" starttime="20170914 01:16:39.449"></status>
</kw>
<status status="PASS" endtime="20170914 01:16:49.211" starttime="20170914 01:16:39.444"></status>
</kw>
<status status="PASS" endtime="20170914 01:16:49.211" starttime="20170914 01:16:39.444"></status>
</kw>
<status status="PASS" endtime="20170914 01:16:49.211" starttime="20170914 01:16:39.444"></status>
</kw>
<status status="PASS" endtime="20170914 01:16:49.211" starttime="20170914 01:16:39.442"></status>
</kw>
<status status="PASS" endtime="20170914 01:16:49.212" starttime="20170914 01:16:39.419"></status>
</kw>
<status status="PASS" endtime="20170914 01:16:49.212" starttime="20170914 01:16:39.416"></status>
</kw>
<status status="PASS" endtime="20170914 01:16:49.212" starttime="20170914 01:16:39.416"></status>
</kw>
<kw type="foritem" name="${method} = ('SEL Log', 'Collect eSEL Log')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170914 01:16:49.214" starttime="20170914 01:16:49.213"></status>
</kw>
<msg timestamp="20170914 01:16:49.214" level="INFO">${status} = PASS</msg>
<msg timestamp="20170914 01:16:49.214" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170914 01:16:49.214" starttime="20170914 01:16:49.213"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170914 01:16:49.214" starttime="20170914 01:16:49.214"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="Collect eSEL Log" library="openbmc_ffdc_methods">
<doc>Collect eSEL log from logging entry and convert eSEL data</doc>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${BMC_LOGGING_ENTRY}/enumerate</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170914 01:16:49.241" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170914 01:16:49.241" starttime="20170914 01:16:49.241"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170914 01:16:49.242" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170914 01:16:49.242" starttime="20170914 01:16:49.242"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170914 01:16:49.243" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170914 01:16:49.243" starttime="20170914 01:16:49.242"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170914 01:16:49.243" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170914 01:16:49.243" starttime="20170914 01:16:49.243"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170914 01:16:50.215" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170914 01:16:50.215" starttime="20170914 01:16:49.244"></status>
</kw>
<msg timestamp="20170914 01:16:50.215" level="INFO">${status} = PASS</msg>
<msg timestamp="20170914 01:16:50.215" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170914 01:16:50.215" starttime="20170914 01:16:49.244"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170914 01:16:50.216" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170914 01:16:50.216" starttime="20170914 01:16:50.215"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170914 01:16:50.217" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170914 01:16:50.217" starttime="20170914 01:16:50.216"></status>
</kw>
<status status="PASS" endtime="20170914 01:16:50.217" starttime="20170914 01:16:49.240"></status>
</kw>
<status status="PASS" endtime="20170914 01:16:50.217" starttime="20170914 01:16:49.239"></status>
</kw>
<status status="PASS" endtime="20170914 01:16:50.217" starttime="20170914 01:16:49.238"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170914 01:16:50.218" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry//enumerate</msg>
<status status="PASS" endtime="20170914 01:16:50.218" starttime="20170914 01:16:50.217"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170914 01:16:50.218" starttime="20170914 01:16:50.218"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170914 01:16:51.937" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry//enumerate, headers=None json=None</msg>
<msg timestamp="20170914 01:16:51.937" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170914 01:16:51.937" starttime="20170914 01:16:50.219"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170914 01:16:51.938" starttime="20170914 01:16:51.938"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170914 01:16:51.939" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170914 01:16:51.939" starttime="20170914 01:16:51.939"></status>
</kw>
<msg timestamp="20170914 01:16:51.939" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170914 01:16:51.939" starttime="20170914 01:16:49.238"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170914 01:16:51.940" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170914 01:16:51.941" level="FAIL">404 != 200</msg>
<status status="FAIL" endtime="20170914 01:16:51.941" starttime="20170914 01:16:51.940"></status>
</kw>
<msg timestamp="20170914 01:16:51.941" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170914 01:16:51.941" starttime="20170914 01:16:51.939"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
</arguments>
<msg timestamp="20170914 01:16:51.941" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20170914 01:16:51.941" starttime="20170914 01:16:51.941"></status>
</kw>
<status status="PASS" endtime="20170914 01:16:51.942" starttime="20170914 01:16:49.237"></status>
</kw>
<status status="PASS" endtime="20170914 01:16:51.942" starttime="20170914 01:16:49.215"></status>
</kw>
<status status="PASS" endtime="20170914 01:16:51.942" starttime="20170914 01:16:49.212"></status>
</kw>
<status status="PASS" endtime="20170914 01:16:51.942" starttime="20170914 01:16:49.212"></status>
</kw>
<kw type="foritem" name="${method} = ('OS FFDC', 'OS FFDC Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170914 01:16:51.944" starttime="20170914 01:16:51.944"></status>
</kw>
<msg timestamp="20170914 01:16:51.944" level="INFO">${status} = PASS</msg>
<msg timestamp="20170914 01:16:51.944" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170914 01:16:51.944" starttime="20170914 01:16:51.943"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170914 01:16:51.945" starttime="20170914 01:16:51.944"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="OS FFDC Files" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${OS_HOST}' == '${EMPTY}'</arg>
<arg>No OS Host Provided</arg>
</arguments>
<msg timestamp="20170914 01:16:51.968" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20170914 01:16:51.968" starttime="20170914 01:16:51.968"></status>
</kw>
<status status="PASS" endtime="20170914 01:16:51.968" starttime="20170914 01:16:51.967"></status>
</kw>
<status status="PASS" endtime="20170914 01:16:51.969" starttime="20170914 01:16:51.945"></status>
</kw>
<status status="PASS" endtime="20170914 01:16:51.969" starttime="20170914 01:16:51.942"></status>
</kw>
<status status="PASS" endtime="20170914 01:16:51.969" starttime="20170914 01:16:51.942"></status>
</kw>
<status status="PASS" endtime="20170914 01:16:51.969" starttime="20170914 01:15:54.604"></status>
</kw>
<status status="PASS" endtime="20170914 01:16:51.969" starttime="20170914 01:15:54.602"></status>
</kw>
<status status="PASS" endtime="20170914 01:16:51.969" starttime="20170914 01:15:54.601"></status>
</kw>
<status status="PASS" endtime="20170914 01:16:51.969" starttime="20170914 01:15:54.601"></status>
</kw>
<kw name="Run Key U" library="gen_robot_keyword">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>SSHLibrary.Close All Connections</arg>
</arguments>
<kw name="Close All Connections" library="SSHLibrary">
<doc>Closes all open connections.</doc>
<status status="PASS" endtime="20170914 01:16:51.982" starttime="20170914 01:16:51.981"></status>
</kw>
<status status="PASS" endtime="20170914 01:16:51.982" starttime="20170914 01:16:51.970"></status>
</kw>
<status status="PASS" endtime="20170914 01:16:51.982" starttime="20170914 01:15:54.600"></status>
</kw>
<status status="PASS" endtime="20170914 01:16:51.983" starttime="20170914 01:15:43.829"></status>
</kw>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170914 01:16:52.026" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170914 01:16:52.027" starttime="20170914 01:16:52.025"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170914 01:16:52.027" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170914 01:16:52.027" starttime="20170914 01:16:52.027"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170914 01:16:52.028" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170914 01:16:52.028" starttime="20170914 01:16:52.028"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170914 01:16:52.029" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170914 01:16:52.029" starttime="20170914 01:16:52.028"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170914 01:16:52.368" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170914 01:16:52.368" starttime="20170914 01:16:52.030"></status>
</kw>
<msg timestamp="20170914 01:16:52.368" level="INFO">${status} = PASS</msg>
<msg timestamp="20170914 01:16:52.369" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170914 01:16:52.369" starttime="20170914 01:16:52.029"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170914 01:16:52.369" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170914 01:16:52.369" starttime="20170914 01:16:52.369"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170914 01:16:52.370" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170914 01:16:52.370" starttime="20170914 01:16:52.370"></status>
</kw>
<status status="PASS" endtime="20170914 01:16:52.370" starttime="20170914 01:16:52.024"></status>
</kw>
<status status="PASS" endtime="20170914 01:16:52.370" starttime="20170914 01:16:52.024"></status>
</kw>
<status status="PASS" endtime="20170914 01:16:52.371" starttime="20170914 01:16:52.022"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170914 01:16:52.371" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170914 01:16:52.371" starttime="20170914 01:16:52.371"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170914 01:16:52.372" starttime="20170914 01:16:52.372"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170914 01:16:53.243" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170914 01:16:53.243" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170914 01:16:53.243" starttime="20170914 01:16:52.372"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170914 01:16:53.244" starttime="20170914 01:16:53.244"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170914 01:16:53.244" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170914 01:16:53.245" starttime="20170914 01:16:53.244"></status>
</kw>
<msg timestamp="20170914 01:16:53.245" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170914 01:16:53.245" starttime="20170914 01:16:52.021"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170914 01:16:53.246" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170914 01:16:53.246" level="FAIL">404 != 200</msg>
<status status="FAIL" endtime="20170914 01:16:53.246" starttime="20170914 01:16:53.245"></status>
</kw>
<status status="FAIL" endtime="20170914 01:16:53.246" starttime="20170914 01:16:52.020"></status>
</kw>
<status status="FAIL" endtime="20170914 01:16:53.246" starttime="20170914 01:16:52.018"></status>
</kw>
<status status="PASS" endtime="20170914 01:16:53.318" starttime="20170914 01:15:43.817"></status>
</kw>
<kw name="Delete Error Logs" library="utils">
<doc>Delete error logs.</doc>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${BMC_LOGGING_ENTRY}${/}list</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170914 01:16:53.336" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170914 01:16:53.337" starttime="20170914 01:16:53.336"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170914 01:16:53.338" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170914 01:16:53.338" starttime="20170914 01:16:53.338"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170914 01:16:53.339" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170914 01:16:53.339" starttime="20170914 01:16:53.338"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170914 01:16:53.339" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170914 01:16:53.339" starttime="20170914 01:16:53.339"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170914 01:16:53.726" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170914 01:16:53.726" starttime="20170914 01:16:53.340"></status>
</kw>
<msg timestamp="20170914 01:16:53.726" level="INFO">${status} = PASS</msg>
<msg timestamp="20170914 01:16:53.726" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170914 01:16:53.726" starttime="20170914 01:16:53.340"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170914 01:16:53.727" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170914 01:16:53.727" starttime="20170914 01:16:53.727"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170914 01:16:53.728" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170914 01:16:53.728" starttime="20170914 01:16:53.727"></status>
</kw>
<status status="PASS" endtime="20170914 01:16:53.728" starttime="20170914 01:16:53.335"></status>
</kw>
<status status="PASS" endtime="20170914 01:16:53.728" starttime="20170914 01:16:53.335"></status>
</kw>
<status status="PASS" endtime="20170914 01:16:53.728" starttime="20170914 01:16:53.333"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170914 01:16:53.729" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry//list</msg>
<status status="PASS" endtime="20170914 01:16:53.729" starttime="20170914 01:16:53.728"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170914 01:16:53.730" starttime="20170914 01:16:53.729"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170914 01:16:54.302" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry//list, headers=None json=None</msg>
<msg timestamp="20170914 01:16:54.302" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170914 01:16:54.302" starttime="20170914 01:16:53.730"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170914 01:16:54.303" starttime="20170914 01:16:54.302"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170914 01:16:54.304" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170914 01:16:54.304" starttime="20170914 01:16:54.303"></status>
</kw>
<msg timestamp="20170914 01:16:54.304" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170914 01:16:54.304" starttime="20170914 01:16:53.333"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>${resp.status_code} == ${HTTP_NOT_FOUND}</arg>
</arguments>
<msg timestamp="20170914 01:16:54.305" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20170914 01:16:54.305" starttime="20170914 01:16:54.305"></status>
</kw>
<status status="PASS" endtime="20170914 01:16:54.305" starttime="20170914 01:16:53.332"></status>
</kw>
<msg timestamp="20170914 01:16:54.311" level="INFO">Log level changed from NONE to INFO.</msg>
<kw name="Close All Connections" library="SSHLibrary">
<doc>Closes all open connections.</doc>
<status status="PASS" endtime="20170914 01:16:54.317" starttime="20170914 01:16:54.317"></status>
</kw>
<msg timestamp="20170914 01:16:54.332" level="FAIL">#(UTC) 2017/09/14 01:16:54.331021 -    2.348686 - **ERROR** Boot failures exceed the boot failure threshold:
boot_fail:                                        1
boot_fail_threshold:                              0
</msg>
<status status="FAIL" endtime="20170914 01:16:54.332" starttime="20170914 01:14:19.133"></status>
</kw>
<kw type="teardown" name="Obmc Boot Test Teardown" library="obmc_boot_test">
<doc>Clean up after the Main keyword.</doc>
<msg timestamp="20170914 01:16:54.338" level="INFO">Log level changed from NONE to INFO.</msg>
<msg timestamp="20170914 01:16:54.340" level="INFO">${boot_stack} = </msg>
<msg timestamp="20170914 01:16:54.340" level="INFO">${stack_mode} = normal</msg>
<msg timestamp="20170914 01:16:54.340" level="INFO">${quiet} = 1</msg>
<status status="PASS" endtime="20170914 01:16:54.341" starttime="20170914 01:16:54.332"></status>
</kw>
<status status="FAIL" endtime="20170914 01:16:54.341" starttime="20170914 01:14:19.131"></status>
</kw>
<msg timestamp="20170914 01:16:54.341" level="FAIL">#(UTC) 2017/09/14 01:16:54.331021 -    2.348686 - **ERROR** Boot failures exceed the boot failure threshold:
boot_fail:                                        1
boot_fail_threshold:                              0
</msg>
<status status="FAIL" endtime="20170914 01:16:54.341" starttime="20170914 01:14:19.126"></status>
</kw>
<status status="FAIL" endtime="20170914 01:16:54.341" starttime="20170914 01:14:19.125"></status>
</kw>
<kw type="teardown" name="Code Update Test Teardown">
<doc>Do code update test case teardown.</doc>
<kw name="FFDC On Test Case Fail" library="openbmc_ffdc">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw name="Is Host Quiesced" library="state_manager">
<doc>Check if host state is quiesced.</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170914 01:16:54.349" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170914 01:16:54.352" starttime="20170914 01:16:54.349"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170914 01:16:54.354" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170914 01:16:54.354" starttime="20170914 01:16:54.353"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170914 01:16:54.354" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170914 01:16:54.354" starttime="20170914 01:16:54.354"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170914 01:16:54.355" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170914 01:16:54.355" starttime="20170914 01:16:54.355"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170914 01:16:54.860" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170914 01:16:54.860" starttime="20170914 01:16:54.356"></status>
</kw>
<msg timestamp="20170914 01:16:54.860" level="INFO">${status} = PASS</msg>
<msg timestamp="20170914 01:16:54.860" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170914 01:16:54.860" starttime="20170914 01:16:54.355"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170914 01:16:54.861" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170914 01:16:54.861" starttime="20170914 01:16:54.861"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170914 01:16:54.862" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170914 01:16:54.862" starttime="20170914 01:16:54.861"></status>
</kw>
<status status="PASS" endtime="20170914 01:16:54.862" starttime="20170914 01:16:54.348"></status>
</kw>
<status status="PASS" endtime="20170914 01:16:54.862" starttime="20170914 01:16:54.348"></status>
</kw>
<status status="PASS" endtime="20170914 01:16:54.862" starttime="20170914 01:16:54.347"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170914 01:16:54.863" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170914 01:16:54.863" starttime="20170914 01:16:54.863"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170914 01:16:54.864" starttime="20170914 01:16:54.863"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170914 01:16:55.690" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170914 01:16:55.691" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170914 01:16:55.691" starttime="20170914 01:16:54.864"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170914 01:16:55.691" starttime="20170914 01:16:55.691"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170914 01:16:55.692" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170914 01:16:55.692" starttime="20170914 01:16:55.692"></status>
</kw>
<msg timestamp="20170914 01:16:55.692" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170914 01:16:55.692" starttime="20170914 01:16:54.346"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170914 01:16:55.693" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170914 01:16:55.693" level="FAIL">404 != 200</msg>
<status status="FAIL" endtime="20170914 01:16:55.693" starttime="20170914 01:16:55.692"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170914 01:16:55.694" level="INFO">To JSON using : content={
  "data": {
    "description": "org.freedesktop.DBus.Error.FileNotFound: path or object not found: /xyz/openbmc_project/state/host0"
  }, 
  "message": "404 Not Found", 
  "status": "error"
} </msg>
<msg timestamp="20170914 01:16:55.694" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170914 01:16:55.694" level="INFO">${content} = {u'status': u'error', u'message': u'404 Not Found', u'data': {u'description': u'org.freedesktop.DBus.Error.FileNotFound: path or object not found: /xyz/openbmc_project/state/host0'}}</msg>
<status status="PASS" endtime="20170914 01:16:55.694" starttime="20170914 01:16:55.693"></status>
</kw>
<msg timestamp="20170914 01:16:55.694" level="INFO">${state} = {u'description': u'org.freedesktop.DBus.Error.FileNotFound: path or object not found: /xyz/openbmc_project/state/host0'}</msg>
<status status="FAIL" endtime="20170914 01:16:55.694" starttime="20170914 01:16:54.346"></status>
</kw>
<msg timestamp="20170914 01:16:55.695" level="INFO">${host_state} = None</msg>
<msg timestamp="20170914 01:16:55.695" level="FAIL">Replacing variables from keyword return value failed: Resolving variable '${state.rsplit('.', 1)[1]}' failed: AttributeError: 'dict' object has no attribute 'rsplit'</msg>
<status status="FAIL" endtime="20170914 01:16:55.695" starttime="20170914 01:16:54.345"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<msg timestamp="20170914 01:16:55.696" level="INFO">Argument types are:
&lt;type 'NoneType'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170914 01:16:55.696" level="FAIL">None != Quiesced</msg>
<status status="FAIL" endtime="20170914 01:16:55.696" starttime="20170914 01:16:55.696"></status>
</kw>
<msg timestamp="20170914 01:16:55.696" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170914 01:16:55.696" starttime="20170914 01:16:55.695"></status>
</kw>
<msg timestamp="20170914 01:16:55.696" level="INFO">${status} = False</msg>
<status status="FAIL" endtime="20170914 01:16:55.696" starttime="20170914 01:16:54.345"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL' or '${status}'=='True'</arg>
<arg>FFDC</arg>
</arguments>
<kw name="Ffdc" library="openbmc_ffdc">
<doc>Gather First Failure Data Capture (FFDC).</doc>
<kw name="Ping Host" library="utils">
<arguments>
<arg>9.3.21.61</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170914 01:16:55.710" level="INFO">Length is 9</msg>
<status status="PASS" endtime="20170914 01:16:55.710" starttime="20170914 01:16:55.710"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170914 01:16:55.715" level="INFO">Running command 'ping -c 4 9.3.21.61 2&gt;&amp;1'.</msg>
<msg timestamp="20170914 01:16:58.719" level="INFO">${RC} = 0</msg>
<msg timestamp="20170914 01:16:58.719" level="INFO">${output} = PING 9.3.21.61 (9.3.21.61) 56(84) bytes of data.
64 bytes from 9.3.21.61: icmp_seq=1 ttl=62 time=0.719 ms
64 bytes from 9.3.21.61: icmp_seq=2 ttl=62 time=0.610 ms
64 bytes from 9.3.21.61: icmp_seq=3 t...</msg>
<status status="PASS" endtime="20170914 01:16:58.719" starttime="20170914 01:16:55.711"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170914 01:16:58.723" level="INFO">RC: 0
Output:
PING 9.3.21.61 (9.3.21.61) 56(84) bytes of data.
64 bytes from 9.3.21.61: icmp_seq=1 ttl=62 time=0.719 ms
64 bytes from 9.3.21.61: icmp_seq=2 ttl=62 time=0.610 ms
64 bytes from 9.3.21.61: icmp_seq=3 ttl=62 time=0.589 ms
64 bytes from 9.3.21.61: icmp_seq=4 ttl=62 time=0.592 ms

--- 9.3.21.61 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 2999ms
rtt min/avg/max/mdev = 0.589/0.627/0.719/0.059 ms</msg>
<status status="PASS" endtime="20170914 01:16:58.723" starttime="20170914 01:16:58.722"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20170914 01:16:58.724" starttime="20170914 01:16:58.724"></status>
</kw>
<status status="PASS" endtime="20170914 01:16:58.724" starttime="20170914 01:16:55.709"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170914 01:16:58.739" level="INFO">${cur_time} = 2017-09-14 01:16:58:738464</msg>
<status status="PASS" endtime="20170914 01:16:58.739" starttime="20170914 01:16:58.738"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170914 01:16:58.740" level="INFO">${cur_time} = 20170914011658738464</msg>
<status status="PASS" endtime="20170914 01:16:58.740" starttime="20170914 01:16:58.739"></status>
</kw>
<status status="PASS" endtime="20170914 01:16:58.740" starttime="20170914 01:16:58.737"></status>
</kw>
<msg timestamp="20170914 01:16:58.740" level="INFO">${FFDC_TIME} = 20170914011658738464</msg>
<kw name="Get Test Dir and Name" library="openbmc_ffdc_utils">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20170914 01:16:58.742" level="INFO">${suite_name} = HostCodeUpdate</msg>
<status status="PASS" endtime="20170914 01:16:58.742" starttime="20170914 01:16:58.741"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20170914 01:16:58.743" level="INFO">${suite_name} = 20170914011658738464_HostCodeUpdate</msg>
<status status="PASS" endtime="20170914 01:16:58.743" starttime="20170914 01:16:58.743"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20170914 01:16:58.744" level="INFO">${test_name} = RESTHostCodeUpdate</msg>
<status status="PASS" endtime="20170914 01:16:58.744" starttime="20170914 01:16:58.743"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20170914 01:16:58.744" level="INFO">${test_name} = 20170914011658738464_RESTHostCodeUpdate</msg>
<status status="PASS" endtime="20170914 01:16:58.744" starttime="20170914 01:16:58.744"></status>
</kw>
<status status="PASS" endtime="20170914 01:16:58.745" starttime="20170914 01:16:58.741"></status>
</kw>
<msg timestamp="20170914 01:16:58.745" level="INFO">${FFDC_DIR_PATH} = /home/fspcibld/logs/20170914011658738464_HostCodeUpdate/20170914011658738464_RESTHostCodeUpdate/</msg>
<msg timestamp="20170914 01:16:58.745" level="INFO">${FFDC_PREFIX} = 20170914011658738464_</msg>
<msg timestamp="20170914 01:16:58.762" level="INFO">${LOG_PREFIX} = /home/fspcibld/logs/20170914011658738464_HostCodeUpdate/20170914011658738464_RESTHostCodeUpdate/20170914011658738464_</msg>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>/home/fspcibld/logs/20170914011658738464_HostCodeUpdate/20170914011658738464_RESTHostCodeUpdate/</arg>
</arguments>
<msg timestamp="20170914 01:16:58.763" html="yes" level="INFO">Created directory '&lt;a href="file:///home/fspcibld/logs/20170914011658738464_HostCodeUpdate/20170914011658738464_RESTHostCodeUpdate"&gt;/home/fspcibld/logs/20170914011658738464_HostCodeUpdate/20170914011658738464_RESTHostCodeUpdate&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170914 01:16:58.764" starttime="20170914 01:16:58.763"></status>
</kw>
<msg timestamp="20170914 01:16:58.764" level="INFO">${FFDC_FILE_PATH} = /home/fspcibld/logs/20170914011658738464_HostCodeUpdate/20170914011658738464_RESTHostCodeUpdate/20170914011658738464_BMC_general.txt</msg>
<kw name="Header Message" library="openbmc_ffdc_utils">
<doc>Write header message to the report document manifest.</doc>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${HEADER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170914 01:16:58.778" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170914011658738464_HostCodeUpdate/20170914011658738464_RESTHostCodeUpdate/20170914011658738464_BMC_general.txt"&gt;/home/fspcibld/logs/20170914011658738464_HostCodeUpdate/20170914011658738464_RESTHostCodeUpdate/20170914011658738464_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170914 01:16:58.778" starttime="20170914 01:16:58.777"></status>
</kw>
<status status="PASS" endtime="20170914 01:16:58.778" starttime="20170914 01:16:58.777"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170914 01:16:58.779" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170914011658738464_HostCodeUpdate/20170914011658738464_RESTHostCodeUpdate/20170914011658738464_BMC_general.txt"&gt;/home/fspcibld/logs/20170914011658738464_HostCodeUpdate/20170914011658738464_RESTHostCodeUpdate/20170914011658738464_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170914 01:16:58.779" starttime="20170914 01:16:58.779"></status>
</kw>
<status status="PASS" endtime="20170914 01:16:58.779" starttime="20170914 01:16:58.778"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Suite File\t\t: ${SUITE_NAME} ${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170914 01:16:58.781" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170914011658738464_HostCodeUpdate/20170914011658738464_RESTHostCodeUpdate/20170914011658738464_BMC_general.txt"&gt;/home/fspcibld/logs/20170914011658738464_HostCodeUpdate/20170914011658738464_RESTHostCodeUpdate/20170914011658738464_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170914 01:16:58.781" starttime="20170914 01:16:58.780"></status>
</kw>
<status status="PASS" endtime="20170914 01:16:58.781" starttime="20170914 01:16:58.780"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Case Name\t\t: ${TEST_NAME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170914 01:16:58.782" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170914011658738464_HostCodeUpdate/20170914011658738464_RESTHostCodeUpdate/20170914011658738464_BMC_general.txt"&gt;/home/fspcibld/logs/20170914011658738464_HostCodeUpdate/20170914011658738464_RESTHostCodeUpdate/20170914011658738464_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170914 01:16:58.782" starttime="20170914 01:16:58.782"></status>
</kw>
<status status="PASS" endtime="20170914 01:16:58.782" starttime="20170914 01:16:58.781"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Source File\t: ${SUITE_SOURCE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170914 01:16:58.784" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170914011658738464_HostCodeUpdate/20170914011658738464_RESTHostCodeUpdate/20170914011658738464_BMC_general.txt"&gt;/home/fspcibld/logs/20170914011658738464_HostCodeUpdate/20170914011658738464_RESTHostCodeUpdate/20170914011658738464_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170914 01:16:58.784" starttime="20170914 01:16:58.783"></status>
</kw>
<status status="PASS" endtime="20170914 01:16:58.784" starttime="20170914 01:16:58.783"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Failure Time Stamp\t: ${FFDC_TIME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170914 01:16:58.787" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170914011658738464_HostCodeUpdate/20170914011658738464_RESTHostCodeUpdate/20170914011658738464_BMC_general.txt"&gt;/home/fspcibld/logs/20170914011658738464_HostCodeUpdate/20170914011658738464_RESTHostCodeUpdate/20170914011658738464_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170914 01:16:58.787" starttime="20170914 01:16:58.787"></status>
</kw>
<status status="PASS" endtime="20170914 01:16:58.787" starttime="20170914 01:16:58.786"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Error Message\t: ${TEST_MESSAGE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170914 01:16:58.788" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170914011658738464_HostCodeUpdate/20170914011658738464_RESTHostCodeUpdate/20170914011658738464_BMC_general.txt"&gt;/home/fspcibld/logs/20170914011658738464_HostCodeUpdate/20170914011658738464_RESTHostCodeUpdate/20170914011658738464_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170914 01:16:58.788" starttime="20170914 01:16:58.788"></status>
</kw>
<status status="PASS" endtime="20170914 01:16:58.789" starttime="20170914 01:16:58.787"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Documentation\t:${\n}${TEST_DOCUMENTATION}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170914 01:16:58.790" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170914011658738464_HostCodeUpdate/20170914011658738464_RESTHostCodeUpdate/20170914011658738464_BMC_general.txt"&gt;/home/fspcibld/logs/20170914011658738464_HostCodeUpdate/20170914011658738464_RESTHostCodeUpdate/20170914011658738464_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170914 01:16:58.790" starttime="20170914 01:16:58.789"></status>
</kw>
<status status="PASS" endtime="20170914 01:16:58.790" starttime="20170914 01:16:58.789"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170914 01:16:58.792" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170914011658738464_HostCodeUpdate/20170914011658738464_RESTHostCodeUpdate/20170914011658738464_BMC_general.txt"&gt;/home/fspcibld/logs/20170914011658738464_HostCodeUpdate/20170914011658738464_RESTHostCodeUpdate/20170914011658738464_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170914 01:16:58.792" starttime="20170914 01:16:58.791"></status>
</kw>
<status status="PASS" endtime="20170914 01:16:58.792" starttime="20170914 01:16:58.790"></status>
</kw>
<kw name="Test Setup Info" library="openbmc_ffdc_utils">
<doc>BMC IP, Model and other information</doc>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170914 01:16:58.793" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170914011658738464_HostCodeUpdate/20170914011658738464_RESTHostCodeUpdate/20170914011658738464_BMC_general.txt"&gt;/home/fspcibld/logs/20170914011658738464_HostCodeUpdate/20170914011658738464_RESTHostCodeUpdate/20170914011658738464_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170914 01:16:58.793" starttime="20170914 01:16:58.793"></status>
</kw>
<status status="PASS" endtime="20170914 01:16:58.794" starttime="20170914 01:16:58.792"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Setup Information:</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170914 01:16:58.795" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170914011658738464_HostCodeUpdate/20170914011658738464_RESTHostCodeUpdate/20170914011658738464_BMC_general.txt"&gt;/home/fspcibld/logs/20170914011658738464_HostCodeUpdate/20170914011658738464_RESTHostCodeUpdate/20170914011658738464_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170914 01:16:58.795" starttime="20170914 01:16:58.794"></status>
</kw>
<status status="PASS" endtime="20170914 01:16:58.795" starttime="20170914 01:16:58.794"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170914 01:16:58.796" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170914011658738464_HostCodeUpdate/20170914011658738464_RESTHostCodeUpdate/20170914011658738464_BMC_general.txt"&gt;/home/fspcibld/logs/20170914011658738464_HostCodeUpdate/20170914011658738464_RESTHostCodeUpdate/20170914011658738464_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170914 01:16:58.798" starttime="20170914 01:16:58.796"></status>
</kw>
<status status="PASS" endtime="20170914 01:16:58.798" starttime="20170914 01:16:58.795"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>OPENBMC HOST \t: ${OPENBMC_HOST}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170914 01:16:58.799" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170914011658738464_HostCodeUpdate/20170914011658738464_RESTHostCodeUpdate/20170914011658738464_BMC_general.txt"&gt;/home/fspcibld/logs/20170914011658738464_HostCodeUpdate/20170914011658738464_RESTHostCodeUpdate/20170914011658738464_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170914 01:16:58.799" starttime="20170914 01:16:58.799"></status>
</kw>
<status status="PASS" endtime="20170914 01:16:58.799" starttime="20170914 01:16:58.798"></status>
</kw>
<kw name="Get BMC System Model" library="utils">
<doc>Get the BMC model from the device tree.</doc>
<assign>
<var>${model_name}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20170914 01:16:58.821" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.21.61
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170914 01:16:58.821" level="INFO">index=2
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.21.61
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170914 01:16:58.821" level="INFO">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg timestamp="20170914 01:16:59.364" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170914 01:16:59.374" level="INFO">${bmc_model} = Witherspoon</msg>
<msg timestamp="20170914 01:16:59.374" level="INFO">${stderr} = </msg>
<msg timestamp="20170914 01:16:59.374" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20170914 01:16:59.375" starttime="20170914 01:16:58.800"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170914 01:16:59.375" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170914 01:16:59.375" starttime="20170914 01:16:59.375"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg timestamp="20170914 01:16:59.376" level="INFO">Length is 11</msg>
<status status="PASS" endtime="20170914 01:16:59.376" starttime="20170914 01:16:59.376"></status>
</kw>
<msg timestamp="20170914 01:16:59.376" level="INFO">${model_name} = Witherspoon</msg>
<status status="PASS" endtime="20170914 01:16:59.376" starttime="20170914 01:16:58.800"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>SYSTEM TYPE \t: ${model_name}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170914 01:16:59.377" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170914011658738464_HostCodeUpdate/20170914011658738464_RESTHostCodeUpdate/20170914011658738464_BMC_general.txt"&gt;/home/fspcibld/logs/20170914011658738464_HostCodeUpdate/20170914011658738464_RESTHostCodeUpdate/20170914011658738464_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170914 01:16:59.378" starttime="20170914 01:16:59.377"></status>
</kw>
<status status="PASS" endtime="20170914 01:16:59.378" starttime="20170914 01:16:59.376"></status>
</kw>
<status status="PASS" endtime="20170914 01:16:59.378" starttime="20170914 01:16:58.792"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${MSG_INTRO}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170914 01:16:59.379" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170914011658738464_HostCodeUpdate/20170914011658738464_RESTHostCodeUpdate/20170914011658738464_BMC_general.txt"&gt;/home/fspcibld/logs/20170914011658738464_HostCodeUpdate/20170914011658738464_RESTHostCodeUpdate/20170914011658738464_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170914 01:16:59.379" starttime="20170914 01:16:59.379"></status>
</kw>
<status status="PASS" endtime="20170914 01:16:59.379" starttime="20170914 01:16:59.378"></status>
</kw>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170914 01:16:59.380" level="INFO">@{entries} = [ APPLICATION DATA | DRIVER INFO | BMC DATA ]</msg>
<status status="PASS" endtime="20170914 01:16:59.380" starttime="20170914 01:16:59.379"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = APPLICATION DATA">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170914 01:16:59.381" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170914011658738464_HostCodeUpdate/20170914011658738464_RESTHostCodeUpdate/20170914011658738464_BMC_general.txt"&gt;/home/fspcibld/logs/20170914011658738464_HostCodeUpdate/20170914011658738464_RESTHostCodeUpdate/20170914011658738464_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170914 01:16:59.381" starttime="20170914 01:16:59.381"></status>
</kw>
<status status="PASS" endtime="20170914 01:16:59.382" starttime="20170914 01:16:59.380"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170914 01:16:59.383" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170914011658738464_HostCodeUpdate/20170914011658738464_RESTHostCodeUpdate/20170914011658738464_BMC_general.txt"&gt;/home/fspcibld/logs/20170914011658738464_HostCodeUpdate/20170914011658738464_RESTHostCodeUpdate/20170914011658738464_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170914 01:16:59.383" starttime="20170914 01:16:59.382"></status>
</kw>
<status status="PASS" endtime="20170914 01:16:59.383" starttime="20170914 01:16:59.382"></status>
</kw>
<status status="PASS" endtime="20170914 01:16:59.383" starttime="20170914 01:16:59.380"></status>
</kw>
<kw type="foritem" name="${index} = DRIVER INFO">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170914 01:16:59.385" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170914011658738464_HostCodeUpdate/20170914011658738464_RESTHostCodeUpdate/20170914011658738464_BMC_general.txt"&gt;/home/fspcibld/logs/20170914011658738464_HostCodeUpdate/20170914011658738464_RESTHostCodeUpdate/20170914011658738464_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170914 01:16:59.385" starttime="20170914 01:16:59.384"></status>
</kw>
<status status="PASS" endtime="20170914 01:16:59.385" starttime="20170914 01:16:59.383"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170914 01:16:59.386" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170914011658738464_HostCodeUpdate/20170914011658738464_RESTHostCodeUpdate/20170914011658738464_BMC_general.txt"&gt;/home/fspcibld/logs/20170914011658738464_HostCodeUpdate/20170914011658738464_RESTHostCodeUpdate/20170914011658738464_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170914 01:16:59.386" starttime="20170914 01:16:59.386"></status>
</kw>
<status status="PASS" endtime="20170914 01:16:59.386" starttime="20170914 01:16:59.385"></status>
</kw>
<status status="PASS" endtime="20170914 01:16:59.386" starttime="20170914 01:16:59.383"></status>
</kw>
<kw type="foritem" name="${index} = BMC DATA">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170914 01:16:59.387" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170914011658738464_HostCodeUpdate/20170914011658738464_RESTHostCodeUpdate/20170914011658738464_BMC_general.txt"&gt;/home/fspcibld/logs/20170914011658738464_HostCodeUpdate/20170914011658738464_RESTHostCodeUpdate/20170914011658738464_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170914 01:16:59.387" starttime="20170914 01:16:59.387"></status>
</kw>
<status status="PASS" endtime="20170914 01:16:59.388" starttime="20170914 01:16:59.386"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170914 01:16:59.390" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170914011658738464_HostCodeUpdate/20170914011658738464_RESTHostCodeUpdate/20170914011658738464_BMC_general.txt"&gt;/home/fspcibld/logs/20170914011658738464_HostCodeUpdate/20170914011658738464_RESTHostCodeUpdate/20170914011658738464_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170914 01:16:59.390" starttime="20170914 01:16:59.390"></status>
</kw>
<status status="PASS" endtime="20170914 01:16:59.390" starttime="20170914 01:16:59.388"></status>
</kw>
<status status="PASS" endtime="20170914 01:16:59.390" starttime="20170914 01:16:59.386"></status>
</kw>
<status status="PASS" endtime="20170914 01:16:59.390" starttime="20170914 01:16:59.380"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${MSG_DETAIL}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170914 01:16:59.391" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170914011658738464_HostCodeUpdate/20170914011658738464_RESTHostCodeUpdate/20170914011658738464_BMC_general.txt"&gt;/home/fspcibld/logs/20170914011658738464_HostCodeUpdate/20170914011658738464_RESTHostCodeUpdate/20170914011658738464_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170914 01:16:59.392" starttime="20170914 01:16:59.391"></status>
</kw>
<status status="PASS" endtime="20170914 01:16:59.392" starttime="20170914 01:16:59.391"></status>
</kw>
<status status="PASS" endtime="20170914 01:16:59.392" starttime="20170914 01:16:58.776"></status>
</kw>
<kw name="Call FFDC Methods" library="openbmc_ffdc_methods">
<doc>Call into FFDC Keyword index list.</doc>
<arguments>
<arg>ffdc_function_list=</arg>
</arguments>
<kw name="Get Ffdc Method Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170914 01:16:59.398" level="INFO">@{entries} = [ BMC LOGS ]</msg>
<status status="PASS" endtime="20170914 01:16:59.398" starttime="20170914 01:16:59.398"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC LOGS">
<kw name="Method Call Keyword List" library="openbmc_ffdc_methods">
<doc>Iterate the list through keyword index.</doc>
<arguments>
<arg>${index}</arg>
<arg>${ffdc_function_list}</arg>
</arguments>
<kw name="Get Ffdc Method Call" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<assign>
<var>@{method_list}</var>
</assign>
<msg timestamp="20170914 01:16:59.400" level="INFO">@{method_list} = [ ('FFDC Generic Report', 'BMC FFDC Manifest') | ('Get Request FFDC', 'BMC FFDC Get Requests') | ('Sys Inventory Files', 'System Inventory Files') | ('Core Files', 'SCP Coredump Files') | ('BMC Specif...</msg>
<status status="PASS" endtime="20170914 01:16:59.400" starttime="20170914 01:16:59.400"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ffdc_function_list}' == '${EMPTY}'</arg>
<arg>Get FFDC Method Desc</arg>
<arg>${index}</arg>
<arg>ELSE</arg>
<arg>Split String</arg>
<arg>${ffdc_function_list}</arg>
<arg>separator=:</arg>
</arguments>
<assign>
<var>@{ffdc_function_list}</var>
</assign>
<kw name="Get Ffdc Method Desc" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<status status="PASS" endtime="20170914 01:16:59.401" starttime="20170914 01:16:59.401"></status>
</kw>
<msg timestamp="20170914 01:16:59.401" level="INFO">@{ffdc_function_list} = [ FFDC Generic Report | Get Request FFDC | Sys Inventory Files | Core Files | BMC Specific Files | SEL Log | OS FFDC ]</msg>
<status status="PASS" endtime="20170914 01:16:59.401" starttime="20170914 01:16:59.400"></status>
</kw>
<kw type="for" name="${method} IN [ @{method_list} ]">
<kw type="foritem" name="${method} = ('FFDC Generic Report', 'BMC FFDC Manifest')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170914 01:16:59.404" starttime="20170914 01:16:59.403"></status>
</kw>
<msg timestamp="20170914 01:16:59.404" level="INFO">${status} = PASS</msg>
<msg timestamp="20170914 01:16:59.404" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170914 01:16:59.404" starttime="20170914 01:16:59.403"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170914 01:16:59.404" starttime="20170914 01:16:59.404"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Manifest" library="openbmc_ffdc_methods">
<doc>Get the commands index for the FFDC_BMC_CMD,</doc>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170914 01:16:59.425" level="INFO">@{entries} = [ APPLICATION DATA | DRIVER INFO | BMC DATA ]</msg>
<status status="PASS" endtime="20170914 01:16:59.425" starttime="20170914 01:16:59.424"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = APPLICATION DATA">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170914 01:16:59.426" level="INFO">@{cmd_list} = [ ('BMC state', '/usr/sbin/obmcutil state') ]</msg>
<status status="PASS" endtime="20170914 01:16:59.426" starttime="20170914 01:16:59.426"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170914 01:16:59.427" level="INFO">${ENTRY_INDEX} = APPLICATION DATA</msg>
<status status="PASS" endtime="20170914 01:16:59.427" starttime="20170914 01:16:59.426"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC state', '/usr/sbin/obmcutil state')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170914 01:16:59.430" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170914011658738464_HostCodeUpdate/20170914011658738464_RESTHostCodeUpdate/20170914011658738464_BMC_general.txt"&gt;/home/fspcibld/logs/20170914011658738464_HostCodeUpdate/20170914011658738464_RESTHostCodeUpdate/20170914011658738464_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170914 01:16:59.430" starttime="20170914 01:16:59.430"></status>
</kw>
<status status="PASS" endtime="20170914 01:16:59.430" starttime="20170914 01:16:59.429"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170914 01:16:59.432" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170914011658738464_HostCodeUpdate/20170914011658738464_RESTHostCodeUpdate/20170914011658738464_BMC_general.txt"&gt;/home/fspcibld/logs/20170914011658738464_HostCodeUpdate/20170914011658738464_RESTHostCodeUpdate/20170914011658738464_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170914 01:16:59.432" starttime="20170914 01:16:59.431"></status>
</kw>
<status status="PASS" endtime="20170914 01:16:59.432" starttime="20170914 01:16:59.430"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170914 01:16:59.433" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170914011658738464_HostCodeUpdate/20170914011658738464_RESTHostCodeUpdate/20170914011658738464_BMC_general.txt"&gt;/home/fspcibld/logs/20170914011658738464_HostCodeUpdate/20170914011658738464_RESTHostCodeUpdate/20170914011658738464_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170914 01:16:59.433" starttime="20170914 01:16:59.433"></status>
</kw>
<status status="PASS" endtime="20170914 01:16:59.433" starttime="20170914 01:16:59.432"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170914 01:16:59.434" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170914011658738464_HostCodeUpdate/20170914011658738464_RESTHostCodeUpdate/20170914011658738464_BMC_general.txt"&gt;/home/fspcibld/logs/20170914011658738464_HostCodeUpdate/20170914011658738464_RESTHostCodeUpdate/20170914011658738464_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170914 01:16:59.434" starttime="20170914 01:16:59.434"></status>
</kw>
<status status="PASS" endtime="20170914 01:16:59.434" starttime="20170914 01:16:59.433"></status>
</kw>
<status status="PASS" endtime="20170914 01:16:59.435" starttime="20170914 01:16:59.429"></status>
</kw>
<status status="PASS" endtime="20170914 01:16:59.435" starttime="20170914 01:16:59.428"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170914 01:16:59.435" level="INFO">${cmd_buf} = BMC Execute Command  /usr/sbin/obmcutil state  ignore_err=1</msg>
<status status="PASS" endtime="20170914 01:16:59.435" starttime="20170914 01:16:59.435"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>/usr/sbin/obmcutil state</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170914 01:16:59.498" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.21.61
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170914 01:16:59.498" level="INFO">index=2
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.21.61
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170914 01:16:59.499" level="INFO">Executing command '/usr/sbin/obmcutil state'.</msg>
<msg timestamp="20170914 01:17:02.670" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170914 01:17:02.670" starttime="20170914 01:16:59.464"></status>
</kw>
<msg timestamp="20170914 01:17:02.670" level="INFO">${status} = PASS</msg>
<msg timestamp="20170914 01:17:02.670" level="INFO">${ret_values} = (u'CurrentBMCState:    xyz.openbmc_project.State.BMC.BMCState.NotReady\nCurrentPowerState:  xyz.openbmc_project.State.Chassis.PowerState.Off\nCurrentHostState:   xyz.openbmc_project.State.Host.HostSta...</msg>
<status status="PASS" endtime="20170914 01:17:02.670" starttime="20170914 01:16:59.436"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170914 01:17:02.671" level="INFO">${stdout} = CurrentBMCState:    xyz.openbmc_project.State.BMC.BMCState.NotReady
CurrentPowerState:  xyz.openbmc_project.State.Chassis.PowerState.Off
CurrentHostState:   xyz.openbmc_project.State.Host.HostState.Of...</msg>
<status status="PASS" endtime="20170914 01:17:02.671" starttime="20170914 01:17:02.671"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170914 01:17:02.672" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170914 01:17:02.672" starttime="20170914 01:17:02.672"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170914 01:17:02.680" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170914011658738464_HostCodeUpdate/20170914011658738464_RESTHostCodeUpdate/20170914011658738464_BMC_general.txt"&gt;/home/fspcibld/logs/20170914011658738464_HostCodeUpdate/20170914011658738464_RESTHostCodeUpdate/20170914011658738464_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170914 01:17:02.680" starttime="20170914 01:17:02.679"></status>
</kw>
<status status="PASS" endtime="20170914 01:17:02.680" starttime="20170914 01:17:02.678"></status>
</kw>
<status status="PASS" endtime="20170914 01:17:02.680" starttime="20170914 01:17:02.672"></status>
</kw>
<status status="PASS" endtime="20170914 01:17:02.680" starttime="20170914 01:16:59.427"></status>
</kw>
<status status="PASS" endtime="20170914 01:17:02.680" starttime="20170914 01:16:59.427"></status>
</kw>
<status status="PASS" endtime="20170914 01:17:02.680" starttime="20170914 01:16:59.427"></status>
</kw>
<status status="PASS" endtime="20170914 01:17:02.680" starttime="20170914 01:16:59.425"></status>
</kw>
<status status="PASS" endtime="20170914 01:17:02.680" starttime="20170914 01:16:59.425"></status>
</kw>
<kw type="foritem" name="${index} = DRIVER INFO">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170914 01:17:02.681" level="INFO">@{cmd_list} = [ ('FW Timestamp', 'cat /etc/timestamp') | ('FW Level', 'cat /etc/os-release') ]</msg>
<status status="PASS" endtime="20170914 01:17:02.681" starttime="20170914 01:17:02.681"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170914 01:17:02.682" level="INFO">${ENTRY_INDEX} = DRIVER INFO</msg>
<status status="PASS" endtime="20170914 01:17:02.682" starttime="20170914 01:17:02.682"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('FW Timestamp', 'cat /etc/timestamp')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170914 01:17:02.685" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170914011658738464_HostCodeUpdate/20170914011658738464_RESTHostCodeUpdate/20170914011658738464_BMC_general.txt"&gt;/home/fspcibld/logs/20170914011658738464_HostCodeUpdate/20170914011658738464_RESTHostCodeUpdate/20170914011658738464_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170914 01:17:02.686" starttime="20170914 01:17:02.685"></status>
</kw>
<status status="PASS" endtime="20170914 01:17:02.686" starttime="20170914 01:17:02.685"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170914 01:17:02.687" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170914011658738464_HostCodeUpdate/20170914011658738464_RESTHostCodeUpdate/20170914011658738464_BMC_general.txt"&gt;/home/fspcibld/logs/20170914011658738464_HostCodeUpdate/20170914011658738464_RESTHostCodeUpdate/20170914011658738464_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170914 01:17:02.687" starttime="20170914 01:17:02.687"></status>
</kw>
<status status="PASS" endtime="20170914 01:17:02.687" starttime="20170914 01:17:02.686"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170914 01:17:02.688" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170914011658738464_HostCodeUpdate/20170914011658738464_RESTHostCodeUpdate/20170914011658738464_BMC_general.txt"&gt;/home/fspcibld/logs/20170914011658738464_HostCodeUpdate/20170914011658738464_RESTHostCodeUpdate/20170914011658738464_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170914 01:17:02.688" starttime="20170914 01:17:02.688"></status>
</kw>
<status status="PASS" endtime="20170914 01:17:02.689" starttime="20170914 01:17:02.687"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170914 01:17:02.690" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170914011658738464_HostCodeUpdate/20170914011658738464_RESTHostCodeUpdate/20170914011658738464_BMC_general.txt"&gt;/home/fspcibld/logs/20170914011658738464_HostCodeUpdate/20170914011658738464_RESTHostCodeUpdate/20170914011658738464_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170914 01:17:02.690" starttime="20170914 01:17:02.689"></status>
</kw>
<status status="PASS" endtime="20170914 01:17:02.690" starttime="20170914 01:17:02.689"></status>
</kw>
<status status="PASS" endtime="20170914 01:17:02.690" starttime="20170914 01:17:02.684"></status>
</kw>
<status status="PASS" endtime="20170914 01:17:02.690" starttime="20170914 01:17:02.684"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170914 01:17:02.691" level="INFO">${cmd_buf} = BMC Execute Command  cat /etc/timestamp  ignore_err=1</msg>
<status status="PASS" endtime="20170914 01:17:02.691" starttime="20170914 01:17:02.690"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /etc/timestamp</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170914 01:17:02.753" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.21.61
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170914 01:17:02.753" level="INFO">index=2
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.21.61
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170914 01:17:02.753" level="INFO">Executing command 'cat /etc/timestamp'.</msg>
<msg timestamp="20170914 01:17:02.911" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170914 01:17:02.911" starttime="20170914 01:17:02.716"></status>
</kw>
<msg timestamp="20170914 01:17:02.911" level="INFO">${status} = PASS</msg>
<msg timestamp="20170914 01:17:02.911" level="INFO">${ret_values} = (u'20170913222723', u'', 0)</msg>
<status status="PASS" endtime="20170914 01:17:02.911" starttime="20170914 01:17:02.691"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170914 01:17:02.912" level="INFO">${stdout} = 20170913222723</msg>
<status status="PASS" endtime="20170914 01:17:02.912" starttime="20170914 01:17:02.912"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170914 01:17:02.913" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170914 01:17:02.913" starttime="20170914 01:17:02.912"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170914 01:17:02.921" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170914011658738464_HostCodeUpdate/20170914011658738464_RESTHostCodeUpdate/20170914011658738464_BMC_general.txt"&gt;/home/fspcibld/logs/20170914011658738464_HostCodeUpdate/20170914011658738464_RESTHostCodeUpdate/20170914011658738464_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170914 01:17:02.921" starttime="20170914 01:17:02.920"></status>
</kw>
<status status="PASS" endtime="20170914 01:17:02.921" starttime="20170914 01:17:02.919"></status>
</kw>
<status status="PASS" endtime="20170914 01:17:02.921" starttime="20170914 01:17:02.913"></status>
</kw>
<status status="PASS" endtime="20170914 01:17:02.921" starttime="20170914 01:17:02.683"></status>
</kw>
<status status="PASS" endtime="20170914 01:17:02.921" starttime="20170914 01:17:02.683"></status>
</kw>
<kw type="foritem" name="${cmd} = ('FW Level', 'cat /etc/os-release')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170914 01:17:02.924" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170914011658738464_HostCodeUpdate/20170914011658738464_RESTHostCodeUpdate/20170914011658738464_BMC_general.txt"&gt;/home/fspcibld/logs/20170914011658738464_HostCodeUpdate/20170914011658738464_RESTHostCodeUpdate/20170914011658738464_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170914 01:17:02.924" starttime="20170914 01:17:02.924"></status>
</kw>
<status status="PASS" endtime="20170914 01:17:02.924" starttime="20170914 01:17:02.923"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170914 01:17:02.926" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170914011658738464_HostCodeUpdate/20170914011658738464_RESTHostCodeUpdate/20170914011658738464_BMC_general.txt"&gt;/home/fspcibld/logs/20170914011658738464_HostCodeUpdate/20170914011658738464_RESTHostCodeUpdate/20170914011658738464_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170914 01:17:02.926" starttime="20170914 01:17:02.925"></status>
</kw>
<status status="PASS" endtime="20170914 01:17:02.926" starttime="20170914 01:17:02.925"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170914 01:17:02.927" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170914011658738464_HostCodeUpdate/20170914011658738464_RESTHostCodeUpdate/20170914011658738464_BMC_general.txt"&gt;/home/fspcibld/logs/20170914011658738464_HostCodeUpdate/20170914011658738464_RESTHostCodeUpdate/20170914011658738464_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170914 01:17:02.927" starttime="20170914 01:17:02.927"></status>
</kw>
<status status="PASS" endtime="20170914 01:17:02.927" starttime="20170914 01:17:02.926"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170914 01:17:02.928" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170914011658738464_HostCodeUpdate/20170914011658738464_RESTHostCodeUpdate/20170914011658738464_BMC_general.txt"&gt;/home/fspcibld/logs/20170914011658738464_HostCodeUpdate/20170914011658738464_RESTHostCodeUpdate/20170914011658738464_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170914 01:17:02.928" starttime="20170914 01:17:02.928"></status>
</kw>
<status status="PASS" endtime="20170914 01:17:02.929" starttime="20170914 01:17:02.927"></status>
</kw>
<status status="PASS" endtime="20170914 01:17:02.929" starttime="20170914 01:17:02.923"></status>
</kw>
<status status="PASS" endtime="20170914 01:17:02.929" starttime="20170914 01:17:02.922"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170914 01:17:02.930" level="INFO">${cmd_buf} = BMC Execute Command  cat /etc/os-release  ignore_err=1</msg>
<status status="PASS" endtime="20170914 01:17:02.930" starttime="20170914 01:17:02.929"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /etc/os-release</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170914 01:17:02.990" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.21.61
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170914 01:17:02.991" level="INFO">index=2
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.21.61
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170914 01:17:02.991" level="INFO">Executing command 'cat /etc/os-release'.</msg>
<msg timestamp="20170914 01:17:03.179" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170914 01:17:03.179" starttime="20170914 01:17:02.956"></status>
</kw>
<msg timestamp="20170914 01:17:03.179" level="INFO">${status} = PASS</msg>
<msg timestamp="20170914 01:17:03.179" level="INFO">${ret_values} = (u'ID="openbmc-phosphor"\nNAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"\nVERSION="v1.99.10-3"\nVERSION_ID="v1.99.10-3-ge4b62e2"\nPRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC P...</msg>
<status status="PASS" endtime="20170914 01:17:03.179" starttime="20170914 01:17:02.930"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170914 01:17:03.180" level="INFO">${stdout} = ID="openbmc-phosphor"
NAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"
VERSION="v1.99.10-3"
VERSION_ID="v1.99.10-3-ge4b62e2"
PRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC Project ...</msg>
<status status="PASS" endtime="20170914 01:17:03.180" starttime="20170914 01:17:03.180"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170914 01:17:03.181" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170914 01:17:03.181" starttime="20170914 01:17:03.181"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170914 01:17:03.189" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170914011658738464_HostCodeUpdate/20170914011658738464_RESTHostCodeUpdate/20170914011658738464_BMC_general.txt"&gt;/home/fspcibld/logs/20170914011658738464_HostCodeUpdate/20170914011658738464_RESTHostCodeUpdate/20170914011658738464_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170914 01:17:03.189" starttime="20170914 01:17:03.188"></status>
</kw>
<status status="PASS" endtime="20170914 01:17:03.189" starttime="20170914 01:17:03.188"></status>
</kw>
<status status="PASS" endtime="20170914 01:17:03.189" starttime="20170914 01:17:03.182"></status>
</kw>
<status status="PASS" endtime="20170914 01:17:03.189" starttime="20170914 01:17:02.921"></status>
</kw>
<status status="PASS" endtime="20170914 01:17:03.189" starttime="20170914 01:17:02.921"></status>
</kw>
<status status="PASS" endtime="20170914 01:17:03.189" starttime="20170914 01:17:02.682"></status>
</kw>
<status status="PASS" endtime="20170914 01:17:03.189" starttime="20170914 01:17:02.681"></status>
</kw>
<status status="PASS" endtime="20170914 01:17:03.190" starttime="20170914 01:17:02.680"></status>
</kw>
<kw type="foritem" name="${index} = BMC DATA">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170914 01:17:03.191" level="INFO">@{cmd_list} = [ ('BMC Uptime', 'uptime') | ('BMC File System Disk Space Usage', 'df -hT') | ('BMC OS', 'uname -a') ]</msg>
<status status="PASS" endtime="20170914 01:17:03.191" starttime="20170914 01:17:03.190"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170914 01:17:03.191" level="INFO">${ENTRY_INDEX} = BMC DATA</msg>
<status status="PASS" endtime="20170914 01:17:03.192" starttime="20170914 01:17:03.191"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC Uptime', 'uptime')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170914 01:17:03.195" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170914011658738464_HostCodeUpdate/20170914011658738464_RESTHostCodeUpdate/20170914011658738464_BMC_general.txt"&gt;/home/fspcibld/logs/20170914011658738464_HostCodeUpdate/20170914011658738464_RESTHostCodeUpdate/20170914011658738464_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170914 01:17:03.195" starttime="20170914 01:17:03.194"></status>
</kw>
<status status="PASS" endtime="20170914 01:17:03.195" starttime="20170914 01:17:03.194"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170914 01:17:03.196" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170914011658738464_HostCodeUpdate/20170914011658738464_RESTHostCodeUpdate/20170914011658738464_BMC_general.txt"&gt;/home/fspcibld/logs/20170914011658738464_HostCodeUpdate/20170914011658738464_RESTHostCodeUpdate/20170914011658738464_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170914 01:17:03.196" starttime="20170914 01:17:03.196"></status>
</kw>
<status status="PASS" endtime="20170914 01:17:03.196" starttime="20170914 01:17:03.195"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170914 01:17:03.197" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170914011658738464_HostCodeUpdate/20170914011658738464_RESTHostCodeUpdate/20170914011658738464_BMC_general.txt"&gt;/home/fspcibld/logs/20170914011658738464_HostCodeUpdate/20170914011658738464_RESTHostCodeUpdate/20170914011658738464_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170914 01:17:03.198" starttime="20170914 01:17:03.197"></status>
</kw>
<status status="PASS" endtime="20170914 01:17:03.198" starttime="20170914 01:17:03.197"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170914 01:17:03.199" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170914011658738464_HostCodeUpdate/20170914011658738464_RESTHostCodeUpdate/20170914011658738464_BMC_general.txt"&gt;/home/fspcibld/logs/20170914011658738464_HostCodeUpdate/20170914011658738464_RESTHostCodeUpdate/20170914011658738464_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170914 01:17:03.199" starttime="20170914 01:17:03.198"></status>
</kw>
<status status="PASS" endtime="20170914 01:17:03.199" starttime="20170914 01:17:03.198"></status>
</kw>
<status status="PASS" endtime="20170914 01:17:03.199" starttime="20170914 01:17:03.193"></status>
</kw>
<status status="PASS" endtime="20170914 01:17:03.199" starttime="20170914 01:17:03.193"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170914 01:17:03.200" level="INFO">${cmd_buf} = BMC Execute Command  uptime  ignore_err=1</msg>
<status status="PASS" endtime="20170914 01:17:03.200" starttime="20170914 01:17:03.199"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>uptime</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170914 01:17:03.259" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.21.61
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170914 01:17:03.260" level="INFO">index=2
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.21.61
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170914 01:17:03.260" level="INFO">Executing command 'uptime'.</msg>
<msg timestamp="20170914 01:17:03.458" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170914 01:17:03.458" starttime="20170914 01:17:03.226"></status>
</kw>
<msg timestamp="20170914 01:17:03.459" level="INFO">${status} = PASS</msg>
<msg timestamp="20170914 01:17:03.459" level="INFO">${ret_values} = (u' 01:17:11 up 2 min,  load average: 4.29, 1.96, 0.73', u'', 0)</msg>
<status status="PASS" endtime="20170914 01:17:03.459" starttime="20170914 01:17:03.200"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170914 01:17:03.460" level="INFO">${stdout} =  01:17:11 up 2 min,  load average: 4.29, 1.96, 0.73</msg>
<status status="PASS" endtime="20170914 01:17:03.460" starttime="20170914 01:17:03.459"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170914 01:17:03.460" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170914 01:17:03.460" starttime="20170914 01:17:03.460"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170914 01:17:03.468" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170914011658738464_HostCodeUpdate/20170914011658738464_RESTHostCodeUpdate/20170914011658738464_BMC_general.txt"&gt;/home/fspcibld/logs/20170914011658738464_HostCodeUpdate/20170914011658738464_RESTHostCodeUpdate/20170914011658738464_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170914 01:17:03.468" starttime="20170914 01:17:03.468"></status>
</kw>
<status status="PASS" endtime="20170914 01:17:03.469" starttime="20170914 01:17:03.467"></status>
</kw>
<status status="PASS" endtime="20170914 01:17:03.469" starttime="20170914 01:17:03.461"></status>
</kw>
<status status="PASS" endtime="20170914 01:17:03.469" starttime="20170914 01:17:03.192"></status>
</kw>
<status status="PASS" endtime="20170914 01:17:03.469" starttime="20170914 01:17:03.192"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC File System Disk Space Usage', 'df -hT')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170914 01:17:03.472" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170914011658738464_HostCodeUpdate/20170914011658738464_RESTHostCodeUpdate/20170914011658738464_BMC_general.txt"&gt;/home/fspcibld/logs/20170914011658738464_HostCodeUpdate/20170914011658738464_RESTHostCodeUpdate/20170914011658738464_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170914 01:17:03.472" starttime="20170914 01:17:03.472"></status>
</kw>
<status status="PASS" endtime="20170914 01:17:03.472" starttime="20170914 01:17:03.471"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170914 01:17:03.473" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170914011658738464_HostCodeUpdate/20170914011658738464_RESTHostCodeUpdate/20170914011658738464_BMC_general.txt"&gt;/home/fspcibld/logs/20170914011658738464_HostCodeUpdate/20170914011658738464_RESTHostCodeUpdate/20170914011658738464_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170914 01:17:03.473" starttime="20170914 01:17:03.473"></status>
</kw>
<status status="PASS" endtime="20170914 01:17:03.474" starttime="20170914 01:17:03.472"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170914 01:17:03.475" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170914011658738464_HostCodeUpdate/20170914011658738464_RESTHostCodeUpdate/20170914011658738464_BMC_general.txt"&gt;/home/fspcibld/logs/20170914011658738464_HostCodeUpdate/20170914011658738464_RESTHostCodeUpdate/20170914011658738464_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170914 01:17:03.475" starttime="20170914 01:17:03.474"></status>
</kw>
<status status="PASS" endtime="20170914 01:17:03.475" starttime="20170914 01:17:03.474"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170914 01:17:03.476" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170914011658738464_HostCodeUpdate/20170914011658738464_RESTHostCodeUpdate/20170914011658738464_BMC_general.txt"&gt;/home/fspcibld/logs/20170914011658738464_HostCodeUpdate/20170914011658738464_RESTHostCodeUpdate/20170914011658738464_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170914 01:17:03.476" starttime="20170914 01:17:03.476"></status>
</kw>
<status status="PASS" endtime="20170914 01:17:03.476" starttime="20170914 01:17:03.475"></status>
</kw>
<status status="PASS" endtime="20170914 01:17:03.476" starttime="20170914 01:17:03.470"></status>
</kw>
<status status="PASS" endtime="20170914 01:17:03.476" starttime="20170914 01:17:03.470"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170914 01:17:03.477" level="INFO">${cmd_buf} = BMC Execute Command  df -hT  ignore_err=1</msg>
<status status="PASS" endtime="20170914 01:17:03.477" starttime="20170914 01:17:03.477"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>df -hT</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170914 01:17:03.536" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.21.61
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170914 01:17:03.536" level="INFO">index=2
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.21.61
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170914 01:17:03.539" level="INFO">Executing command 'df -hT'.</msg>
<msg timestamp="20170914 01:17:04.893" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170914 01:17:04.893" starttime="20170914 01:17:03.502"></status>
</kw>
<msg timestamp="20170914 01:17:04.893" level="INFO">${status} = PASS</msg>
<msg timestamp="20170914 01:17:04.894" level="INFO">${ret_values} = (u'Filesystem           Type            Size      Used Available Use% Mounted on\ndev                  devtmpfs      210.2M         0    210.2M   0% /dev\ntmpfs                tmpfs         211.1M    ...</msg>
<status status="PASS" endtime="20170914 01:17:04.894" starttime="20170914 01:17:03.477"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170914 01:17:04.894" level="INFO">${stdout} = Filesystem           Type            Size      Used Available Use% Mounted on
dev                  devtmpfs      210.2M         0    210.2M   0% /dev
tmpfs                tmpfs         211.1M     14.0...</msg>
<status status="PASS" endtime="20170914 01:17:04.895" starttime="20170914 01:17:04.894"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170914 01:17:04.895" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170914 01:17:04.895" starttime="20170914 01:17:04.895"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170914 01:17:04.903" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170914011658738464_HostCodeUpdate/20170914011658738464_RESTHostCodeUpdate/20170914011658738464_BMC_general.txt"&gt;/home/fspcibld/logs/20170914011658738464_HostCodeUpdate/20170914011658738464_RESTHostCodeUpdate/20170914011658738464_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170914 01:17:04.903" starttime="20170914 01:17:04.903"></status>
</kw>
<status status="PASS" endtime="20170914 01:17:04.903" starttime="20170914 01:17:04.902"></status>
</kw>
<status status="PASS" endtime="20170914 01:17:04.903" starttime="20170914 01:17:04.895"></status>
</kw>
<status status="PASS" endtime="20170914 01:17:04.903" starttime="20170914 01:17:03.469"></status>
</kw>
<status status="PASS" endtime="20170914 01:17:04.903" starttime="20170914 01:17:03.469"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC OS', 'uname -a')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170914 01:17:04.907" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170914011658738464_HostCodeUpdate/20170914011658738464_RESTHostCodeUpdate/20170914011658738464_BMC_general.txt"&gt;/home/fspcibld/logs/20170914011658738464_HostCodeUpdate/20170914011658738464_RESTHostCodeUpdate/20170914011658738464_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170914 01:17:04.907" starttime="20170914 01:17:04.907"></status>
</kw>
<status status="PASS" endtime="20170914 01:17:04.907" starttime="20170914 01:17:04.906"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170914 01:17:04.908" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170914011658738464_HostCodeUpdate/20170914011658738464_RESTHostCodeUpdate/20170914011658738464_BMC_general.txt"&gt;/home/fspcibld/logs/20170914011658738464_HostCodeUpdate/20170914011658738464_RESTHostCodeUpdate/20170914011658738464_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170914 01:17:04.908" starttime="20170914 01:17:04.908"></status>
</kw>
<status status="PASS" endtime="20170914 01:17:04.909" starttime="20170914 01:17:04.907"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170914 01:17:04.910" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170914011658738464_HostCodeUpdate/20170914011658738464_RESTHostCodeUpdate/20170914011658738464_BMC_general.txt"&gt;/home/fspcibld/logs/20170914011658738464_HostCodeUpdate/20170914011658738464_RESTHostCodeUpdate/20170914011658738464_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170914 01:17:04.910" starttime="20170914 01:17:04.909"></status>
</kw>
<status status="PASS" endtime="20170914 01:17:04.910" starttime="20170914 01:17:04.909"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170914 01:17:04.911" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170914011658738464_HostCodeUpdate/20170914011658738464_RESTHostCodeUpdate/20170914011658738464_BMC_general.txt"&gt;/home/fspcibld/logs/20170914011658738464_HostCodeUpdate/20170914011658738464_RESTHostCodeUpdate/20170914011658738464_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170914 01:17:04.911" starttime="20170914 01:17:04.911"></status>
</kw>
<status status="PASS" endtime="20170914 01:17:04.911" starttime="20170914 01:17:04.910"></status>
</kw>
<status status="PASS" endtime="20170914 01:17:04.911" starttime="20170914 01:17:04.905"></status>
</kw>
<status status="PASS" endtime="20170914 01:17:04.911" starttime="20170914 01:17:04.905"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170914 01:17:04.912" level="INFO">${cmd_buf} = BMC Execute Command  uname -a  ignore_err=1</msg>
<status status="PASS" endtime="20170914 01:17:04.912" starttime="20170914 01:17:04.912"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>uname -a</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170914 01:17:04.969" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.21.61
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170914 01:17:04.969" level="INFO">index=2
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.21.61
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170914 01:17:04.969" level="INFO">Executing command 'uname -a'.</msg>
<msg timestamp="20170914 01:17:05.151" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170914 01:17:05.151" starttime="20170914 01:17:04.938"></status>
</kw>
<msg timestamp="20170914 01:17:05.151" level="INFO">${status} = PASS</msg>
<msg timestamp="20170914 01:17:05.151" level="INFO">${ret_values} = (u'Linux witherspoon 4.10.17-c4227b43277bbd0992d10d764d4958239786503d #1 Wed Sep 13 22:26:13 UTC 2017 armv6l GNU/Linux', u'', 0)</msg>
<status status="PASS" endtime="20170914 01:17:05.151" starttime="20170914 01:17:04.913"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170914 01:17:05.152" level="INFO">${stdout} = Linux witherspoon 4.10.17-c4227b43277bbd0992d10d764d4958239786503d #1 Wed Sep 13 22:26:13 UTC 2017 armv6l GNU/Linux</msg>
<status status="PASS" endtime="20170914 01:17:05.152" starttime="20170914 01:17:05.152"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170914 01:17:05.153" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170914 01:17:05.153" starttime="20170914 01:17:05.153"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170914 01:17:05.161" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170914011658738464_HostCodeUpdate/20170914011658738464_RESTHostCodeUpdate/20170914011658738464_BMC_general.txt"&gt;/home/fspcibld/logs/20170914011658738464_HostCodeUpdate/20170914011658738464_RESTHostCodeUpdate/20170914011658738464_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170914 01:17:05.161" starttime="20170914 01:17:05.160"></status>
</kw>
<status status="PASS" endtime="20170914 01:17:05.161" starttime="20170914 01:17:05.159"></status>
</kw>
<status status="PASS" endtime="20170914 01:17:05.161" starttime="20170914 01:17:05.153"></status>
</kw>
<status status="PASS" endtime="20170914 01:17:05.161" starttime="20170914 01:17:04.904"></status>
</kw>
<status status="PASS" endtime="20170914 01:17:05.161" starttime="20170914 01:17:04.904"></status>
</kw>
<status status="PASS" endtime="20170914 01:17:05.161" starttime="20170914 01:17:03.192"></status>
</kw>
<status status="PASS" endtime="20170914 01:17:05.161" starttime="20170914 01:17:03.190"></status>
</kw>
<status status="PASS" endtime="20170914 01:17:05.161" starttime="20170914 01:17:03.190"></status>
</kw>
<status status="PASS" endtime="20170914 01:17:05.161" starttime="20170914 01:16:59.425"></status>
</kw>
<status status="PASS" endtime="20170914 01:17:05.161" starttime="20170914 01:16:59.424"></status>
</kw>
<status status="PASS" endtime="20170914 01:17:05.162" starttime="20170914 01:16:59.405"></status>
</kw>
<status status="PASS" endtime="20170914 01:17:05.162" starttime="20170914 01:16:59.402"></status>
</kw>
<status status="PASS" endtime="20170914 01:17:05.162" starttime="20170914 01:16:59.402"></status>
</kw>
<kw type="foritem" name="${method} = ('Get Request FFDC', 'BMC FFDC Get Requests')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170914 01:17:05.164" starttime="20170914 01:17:05.163"></status>
</kw>
<msg timestamp="20170914 01:17:05.164" level="INFO">${status} = PASS</msg>
<msg timestamp="20170914 01:17:05.164" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170914 01:17:05.164" starttime="20170914 01:17:05.163"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170914 01:17:05.164" starttime="20170914 01:17:05.164"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Get Requests" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Get Ffdc Get Request Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170914 01:17:05.184" level="INFO">@{entries} = [ GET REQUESTS ]</msg>
<status status="PASS" endtime="20170914 01:17:05.184" starttime="20170914 01:17:05.183"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = GET REQUESTS">
<kw name="Log FFDC Get Requests" library="openbmc_ffdc_methods">
<doc>Create file in current FFDC log directory.</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Get Request" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170914 01:17:05.185" level="INFO">@{cmd_list} = [ ('BMC_sensor_list', '/xyz/openbmc_project/sensors/enumerate') | ('BMC_control_list', '/xyz/openbmc_project/control/enumerate') | ('BMC_led', '/xyz/openbmc_project/led/enumerate') | ('FIRMWARE_list',...</msg>
<status status="PASS" endtime="20170914 01:17:05.185" starttime="20170914 01:17:05.185"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC_sensor_list', '/xyz/openbmc_project/sensors/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170914 01:17:05.186" level="INFO">${logpath} = /home/fspcibld/logs/20170914011658738464_HostCodeUpdate/20170914011658738464_RESTHostCodeUpdate/20170914011658738464_BMC_sensor_list.txt</msg>
<status status="PASS" endtime="20170914 01:17:05.187" starttime="20170914 01:17:05.186"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170914 01:17:05.190" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170914 01:17:05.190" starttime="20170914 01:17:05.189"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170914 01:17:05.191" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170914 01:17:05.191" starttime="20170914 01:17:05.190"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170914 01:17:05.191" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170914 01:17:05.191" starttime="20170914 01:17:05.191"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170914 01:17:05.192" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170914 01:17:05.192" starttime="20170914 01:17:05.192"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170914 01:17:05.625" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170914 01:17:05.625" starttime="20170914 01:17:05.193"></status>
</kw>
<msg timestamp="20170914 01:17:05.625" level="INFO">${status} = PASS</msg>
<msg timestamp="20170914 01:17:05.625" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170914 01:17:05.625" starttime="20170914 01:17:05.193"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170914 01:17:05.626" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170914 01:17:05.626" starttime="20170914 01:17:05.625"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170914 01:17:05.626" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170914 01:17:05.627" starttime="20170914 01:17:05.626"></status>
</kw>
<status status="PASS" endtime="20170914 01:17:05.627" starttime="20170914 01:17:05.189"></status>
</kw>
<status status="PASS" endtime="20170914 01:17:05.627" starttime="20170914 01:17:05.188"></status>
</kw>
<status status="PASS" endtime="20170914 01:17:05.627" starttime="20170914 01:17:05.187"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170914 01:17:05.627" level="INFO">${base_uri} = /xyz/openbmc_project/sensors/enumerate</msg>
<status status="PASS" endtime="20170914 01:17:05.628" starttime="20170914 01:17:05.627"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170914 01:17:05.628" starttime="20170914 01:17:05.628"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170914 01:17:11.472" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/sensors/enumerate, headers=None json=None</msg>
<msg timestamp="20170914 01:17:11.472" level="INFO">${ret} = &lt;Response [500]&gt;</msg>
<status status="PASS" endtime="20170914 01:17:11.472" starttime="20170914 01:17:05.628"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170914 01:17:11.473" starttime="20170914 01:17:11.473"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170914 01:17:11.474" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170914 01:17:11.474" starttime="20170914 01:17:11.473"></status>
</kw>
<msg timestamp="20170914 01:17:11.474" level="INFO">${resp} = &lt;Response [500]&gt;</msg>
<status status="PASS" endtime="20170914 01:17:11.474" starttime="20170914 01:17:05.187"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170914 01:17:11.475" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170914 01:17:11.476" level="FAIL">500 != 200</msg>
<status status="FAIL" endtime="20170914 01:17:11.476" starttime="20170914 01:17:11.475"></status>
</kw>
<msg timestamp="20170914 01:17:11.476" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170914 01:17:11.476" starttime="20170914 01:17:11.474"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg timestamp="20170914 01:17:11.477" level="INFO">Continuing for loop from the next iteration.</msg>
<status status="PASS" endtime="20170914 01:17:11.477" starttime="20170914 01:17:11.477"></status>
</kw>
<status status="PASS" endtime="20170914 01:17:11.477" starttime="20170914 01:17:11.476"></status>
</kw>
<status status="PASS" endtime="20170914 01:17:11.477" starttime="20170914 01:17:05.186"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_control_list', '/xyz/openbmc_project/control/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170914 01:17:11.478" level="INFO">${logpath} = /home/fspcibld/logs/20170914011658738464_HostCodeUpdate/20170914011658738464_RESTHostCodeUpdate/20170914011658738464_BMC_control_list.txt</msg>
<status status="PASS" endtime="20170914 01:17:11.478" starttime="20170914 01:17:11.478"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170914 01:17:11.481" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170914 01:17:11.481" starttime="20170914 01:17:11.481"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170914 01:17:11.482" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170914 01:17:11.482" starttime="20170914 01:17:11.482"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170914 01:17:11.483" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170914 01:17:11.483" starttime="20170914 01:17:11.482"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170914 01:17:11.483" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170914 01:17:11.483" starttime="20170914 01:17:11.483"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170914 01:17:11.999" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170914 01:17:11.999" starttime="20170914 01:17:11.484"></status>
</kw>
<msg timestamp="20170914 01:17:11.999" level="INFO">${status} = PASS</msg>
<msg timestamp="20170914 01:17:11.999" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170914 01:17:11.999" starttime="20170914 01:17:11.484"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170914 01:17:12.000" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170914 01:17:12.000" starttime="20170914 01:17:12.000"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170914 01:17:12.001" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170914 01:17:12.001" starttime="20170914 01:17:12.001"></status>
</kw>
<status status="PASS" endtime="20170914 01:17:12.001" starttime="20170914 01:17:11.480"></status>
</kw>
<status status="PASS" endtime="20170914 01:17:12.001" starttime="20170914 01:17:11.479"></status>
</kw>
<status status="PASS" endtime="20170914 01:17:12.001" starttime="20170914 01:17:11.479"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170914 01:17:12.002" level="INFO">${base_uri} = /xyz/openbmc_project/control/enumerate</msg>
<status status="PASS" endtime="20170914 01:17:12.002" starttime="20170914 01:17:12.002"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170914 01:17:12.003" starttime="20170914 01:17:12.002"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170914 01:17:14.476" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/control/enumerate, headers=None json=None</msg>
<msg timestamp="20170914 01:17:14.476" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170914 01:17:14.476" starttime="20170914 01:17:12.003"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170914 01:17:14.477" starttime="20170914 01:17:14.476"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170914 01:17:14.477" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170914 01:17:14.477" starttime="20170914 01:17:14.477"></status>
</kw>
<msg timestamp="20170914 01:17:14.478" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170914 01:17:14.478" starttime="20170914 01:17:11.478"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170914 01:17:14.479" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170914 01:17:14.479" starttime="20170914 01:17:14.479"></status>
</kw>
<msg timestamp="20170914 01:17:14.479" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170914 01:17:14.479" starttime="20170914 01:17:14.478"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20170914 01:17:14.480" starttime="20170914 01:17:14.479"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170914 01:17:14.481" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/control/host0": {}, 
    "/xyz/openbmc_project/control/host0/TPMEnable": {
      "TPMEnable": 0
    }, 
    "/xyz/openbmc_project/control/host0/auto_reboot": {
      "AutoReboot": 1
    }, 
    "/xyz/openbmc_project/control/host0/boot": {
      "BootMode": "xyz.openbmc_project.Control.Boot.Mode.Modes.Regular", 
      "BootSource": "xyz.openbmc_project.Control.Boot.Source.Sources.Default"
    }, 
    "/xyz/openbmc_project/control/host0/boot/one_time": {
      "BootMode": "xyz.openbmc_project.Control.Boot.Mode.Modes.Regular", 
      "BootSource": "xyz.openbmc_project.Control.Boot.Source.Sources.Default", 
      "Enabled": 1
    }, 
    "/xyz/openbmc_project/control/host0/power_cap": {
      "PowerCap": 0, 
      "PowerCapEnable": 0
    }, 
    "/xyz/openbmc_project/control/host0/power_restore_policy": {
      "PowerRestorePolicy": "xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore"
    }, 
    "/xyz/openbmc_project/control/host0/restriction_mode": {
      "RestrictionMode": "xyz.openbmc_project.Control.Security.RestrictionMode.Modes.None"
    }, 
    "/xyz/openbmc_project/control/minimum_ship_level_required": {
      "MinimumShipLevelRequired": 1
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170914 01:17:14.481" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170914 01:17:14.481" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/control/host0": {},
        "/xyz/openbmc_project/control/host0/TPMEnable": {
            "TPMEnable": 0
        },
        "/xyz/openbmc_project/control/...</msg>
<status status="PASS" endtime="20170914 01:17:14.481" starttime="20170914 01:17:14.480"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170914 01:17:14.484" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170914011658738464_HostCodeUpdate/20170914011658738464_RESTHostCodeUpdate/20170914011658738464_BMC_control_list.txt"&gt;/home/fspcibld/logs/20170914011658738464_HostCodeUpdate/20170914011658738464_RESTHostCodeUpdate/20170914011658738464_BMC_control_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170914 01:17:14.484" starttime="20170914 01:17:14.483"></status>
</kw>
<status status="PASS" endtime="20170914 01:17:14.484" starttime="20170914 01:17:14.481"></status>
</kw>
<status status="PASS" endtime="20170914 01:17:14.484" starttime="20170914 01:17:11.477"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_led', '/xyz/openbmc_project/led/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170914 01:17:14.485" level="INFO">${logpath} = /home/fspcibld/logs/20170914011658738464_HostCodeUpdate/20170914011658738464_RESTHostCodeUpdate/20170914011658738464_BMC_led.txt</msg>
<status status="PASS" endtime="20170914 01:17:14.485" starttime="20170914 01:17:14.484"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170914 01:17:14.488" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170914 01:17:14.488" starttime="20170914 01:17:14.487"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170914 01:17:14.489" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170914 01:17:14.489" starttime="20170914 01:17:14.488"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170914 01:17:14.489" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170914 01:17:14.489" starttime="20170914 01:17:14.489"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170914 01:17:14.490" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170914 01:17:14.490" starttime="20170914 01:17:14.490"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170914 01:17:15.230" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170914 01:17:15.230" starttime="20170914 01:17:14.491"></status>
</kw>
<msg timestamp="20170914 01:17:15.231" level="INFO">${status} = PASS</msg>
<msg timestamp="20170914 01:17:15.231" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170914 01:17:15.231" starttime="20170914 01:17:14.490"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170914 01:17:15.231" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170914 01:17:15.232" starttime="20170914 01:17:15.231"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170914 01:17:15.232" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170914 01:17:15.232" starttime="20170914 01:17:15.232"></status>
</kw>
<status status="PASS" endtime="20170914 01:17:15.232" starttime="20170914 01:17:14.487"></status>
</kw>
<status status="PASS" endtime="20170914 01:17:15.233" starttime="20170914 01:17:14.486"></status>
</kw>
<status status="PASS" endtime="20170914 01:17:15.233" starttime="20170914 01:17:14.486"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170914 01:17:15.233" level="INFO">${base_uri} = /xyz/openbmc_project/led/enumerate</msg>
<status status="PASS" endtime="20170914 01:17:15.233" starttime="20170914 01:17:15.233"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170914 01:17:15.234" starttime="20170914 01:17:15.234"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170914 01:17:21.254" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/led/enumerate, headers=None json=None</msg>
<msg timestamp="20170914 01:17:21.254" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170914 01:17:21.254" starttime="20170914 01:17:15.234"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170914 01:17:21.255" starttime="20170914 01:17:21.255"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170914 01:17:21.255" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170914 01:17:21.256" starttime="20170914 01:17:21.255"></status>
</kw>
<msg timestamp="20170914 01:17:21.256" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170914 01:17:21.256" starttime="20170914 01:17:14.485"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170914 01:17:21.257" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170914 01:17:21.257" starttime="20170914 01:17:21.257"></status>
</kw>
<msg timestamp="20170914 01:17:21.257" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170914 01:17:21.257" starttime="20170914 01:17:21.256"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20170914 01:17:21.258" starttime="20170914 01:17:21.258"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170914 01:17:21.260" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/led/groups": {}, 
    "/xyz/openbmc_project/led/groups/bmc_booted": {
      "Asserted": 1
    }, 
    "/xyz/openbmc_project/led/groups/bmc_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/boxelder_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core0_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core10_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core11_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core12_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core13_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core14_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core15_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core16_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core17_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core18_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core19_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core1_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core20_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core21_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core22_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core23_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core2_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core3_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core4_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core5_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core6_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core7_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core8_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core9_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/cpu0_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/cpu1_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm0_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm10_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm11_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm12_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm13_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm14_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm15_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm1_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm2_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm3_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm4_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm5_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm6_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm7_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm8_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm9_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/enclosure_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/enclosure_identify": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan0_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan0_identify": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan1_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan1_identify": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan2_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan2_identify": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan3_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan3_identify": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/gv100card0_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/gv100card1_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/gv100card2_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/gv100card3_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/gv100card4_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/gv100card5_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/lamp_test": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/motherboard_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/occ_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/power_on": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/powersupply0_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/powersupply1_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/system_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/physical/fan0": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.On"
    }, 
    "/xyz/openbmc_project/led/physical/fan1": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.On"
    }, 
    "/xyz/openbmc_project/led/physical/fan2": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.On"
    }, 
    "/xyz/openbmc_project/led/physical/fan3": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.On"
    }, 
    "/xyz/openbmc_project/led/physical/front_fault": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/front_id": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.On"
    }, 
    "/xyz/openbmc_project/led/physical/front_power": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Blink"
    }, 
    "/xyz/openbmc_project/led/physical/rear_fault": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/rear_id": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/rear_power": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Blink"
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170914 01:17:21.261" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170914 01:17:21.261" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/led/groups": {},
        "/xyz/openbmc_project/led/groups/bmc_booted": {
            "Asserted": 1
        },
        "/xyz/openbmc_project/led/groups/bmc...</msg>
<status status="PASS" endtime="20170914 01:17:21.261" starttime="20170914 01:17:21.258"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170914 01:17:21.263" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170914011658738464_HostCodeUpdate/20170914011658738464_RESTHostCodeUpdate/20170914011658738464_BMC_led.txt"&gt;/home/fspcibld/logs/20170914011658738464_HostCodeUpdate/20170914011658738464_RESTHostCodeUpdate/20170914011658738464_BMC_led.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170914 01:17:21.263" starttime="20170914 01:17:21.262"></status>
</kw>
<status status="PASS" endtime="20170914 01:17:21.263" starttime="20170914 01:17:21.262"></status>
</kw>
<status status="PASS" endtime="20170914 01:17:21.263" starttime="20170914 01:17:14.484"></status>
</kw>
<kw type="foritem" name="${cmd} = ('FIRMWARE_list', '/xyz/openbmc_project/software/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170914 01:17:21.264" level="INFO">${logpath} = /home/fspcibld/logs/20170914011658738464_HostCodeUpdate/20170914011658738464_RESTHostCodeUpdate/20170914011658738464_FIRMWARE_list.txt</msg>
<status status="PASS" endtime="20170914 01:17:21.265" starttime="20170914 01:17:21.264"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170914 01:17:21.269" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170914 01:17:21.269" starttime="20170914 01:17:21.268"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170914 01:17:21.271" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170914 01:17:21.271" starttime="20170914 01:17:21.270"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170914 01:17:21.272" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170914 01:17:21.272" starttime="20170914 01:17:21.272"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170914 01:17:21.273" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170914 01:17:21.273" starttime="20170914 01:17:21.273"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170914 01:17:21.658" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170914 01:17:21.658" starttime="20170914 01:17:21.274"></status>
</kw>
<msg timestamp="20170914 01:17:21.659" level="INFO">${status} = PASS</msg>
<msg timestamp="20170914 01:17:21.659" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170914 01:17:21.659" starttime="20170914 01:17:21.274"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170914 01:17:21.659" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170914 01:17:21.659" starttime="20170914 01:17:21.659"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170914 01:17:21.660" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170914 01:17:21.660" starttime="20170914 01:17:21.660"></status>
</kw>
<status status="PASS" endtime="20170914 01:17:21.660" starttime="20170914 01:17:21.267"></status>
</kw>
<status status="PASS" endtime="20170914 01:17:21.660" starttime="20170914 01:17:21.267"></status>
</kw>
<status status="PASS" endtime="20170914 01:17:21.661" starttime="20170914 01:17:21.266"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170914 01:17:21.661" level="INFO">${base_uri} = /xyz/openbmc_project/software/enumerate</msg>
<status status="PASS" endtime="20170914 01:17:21.661" starttime="20170914 01:17:21.661"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170914 01:17:21.662" starttime="20170914 01:17:21.662"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170914 01:17:22.311" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/enumerate, headers=None json=None</msg>
<msg timestamp="20170914 01:17:22.311" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170914 01:17:22.311" starttime="20170914 01:17:21.662"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170914 01:17:22.312" starttime="20170914 01:17:22.312"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170914 01:17:22.313" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170914 01:17:22.313" starttime="20170914 01:17:22.313"></status>
</kw>
<msg timestamp="20170914 01:17:22.313" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170914 01:17:22.313" starttime="20170914 01:17:21.265"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170914 01:17:22.315" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170914 01:17:22.315" starttime="20170914 01:17:22.314"></status>
</kw>
<msg timestamp="20170914 01:17:22.315" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170914 01:17:22.315" starttime="20170914 01:17:22.314"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20170914 01:17:22.315" starttime="20170914 01:17:22.315"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170914 01:17:22.316" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/software/8764baa3": {
      "Activation": "xyz.openbmc_project.Software.Activation.Activations.Active", 
      "ExtendedVersion": "op-build-v1.7-1321-g6eef393-dirty,buildroot-2017.05-163-g8035745,skiboot-v5.8-rc1-pd9d2012,hostboot-c68be97,linux-4.12.8-openpower1-p919e663,petitboot-v1.5.1-p848cad7,machine-xml-c1e49a6-pbb9f626,occ-854999a,hostboot-binaries-67a15fd,capp-ucode-9c73e9f,sbe-4a62126-p180ac2a", 
      "Path": "", 
      "Priority": 0, 
      "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.Host", 
      "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.None", 
      "Version": "IBM-witherspoon-sequoia-ibm-OP9_v1.18_1.54", 
      "associations": [
        [
          "inventory", 
          "activation", 
          "/xyz/openbmc_project/inventory/system/chassis"
        ]
      ]
    }, 
    "/xyz/openbmc_project/software/8764baa3/inventory": {
      "endpoints": [
        "/xyz/openbmc_project/inventory/system/chassis"
      ]
    }, 
    "/xyz/openbmc_project/software/8764baa3/software_version": {
      "endpoints": [
        "/xyz/openbmc_project/software"
      ]
    }, 
    "/xyz/openbmc_project/software/active": {
      "endpoints": [
        "/xyz/openbmc_project/software/8764baa3"
      ]
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170914 01:17:22.317" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170914 01:17:22.317" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/software/8764baa3": {
            "Activation": "xyz.openbmc_project.Software.Activation.Activations.Active",
            "ExtendedVersion": "op-build-v1....</msg>
<status status="PASS" endtime="20170914 01:17:22.317" starttime="20170914 01:17:22.316"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170914 01:17:22.318" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170914011658738464_HostCodeUpdate/20170914011658738464_RESTHostCodeUpdate/20170914011658738464_FIRMWARE_list.txt"&gt;/home/fspcibld/logs/20170914011658738464_HostCodeUpdate/20170914011658738464_RESTHostCodeUpdate/20170914011658738464_FIRMWARE_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170914 01:17:22.318" starttime="20170914 01:17:22.318"></status>
</kw>
<status status="PASS" endtime="20170914 01:17:22.318" starttime="20170914 01:17:22.317"></status>
</kw>
<status status="PASS" endtime="20170914 01:17:22.318" starttime="20170914 01:17:21.263"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_elog', '/xyz/openbmc_project/logging/entry/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170914 01:17:22.319" level="INFO">${logpath} = /home/fspcibld/logs/20170914011658738464_HostCodeUpdate/20170914011658738464_RESTHostCodeUpdate/20170914011658738464_BMC_elog.txt</msg>
<status status="PASS" endtime="20170914 01:17:22.319" starttime="20170914 01:17:22.319"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170914 01:17:22.322" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170914 01:17:22.323" starttime="20170914 01:17:22.322"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170914 01:17:22.323" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170914 01:17:22.323" starttime="20170914 01:17:22.323"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170914 01:17:22.324" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170914 01:17:22.324" starttime="20170914 01:17:22.323"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170914 01:17:22.325" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170914 01:17:22.325" starttime="20170914 01:17:22.324"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170914 01:17:22.508" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170914 01:17:22.508" starttime="20170914 01:17:22.325"></status>
</kw>
<msg timestamp="20170914 01:17:22.508" level="INFO">${status} = PASS</msg>
<msg timestamp="20170914 01:17:22.508" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170914 01:17:22.508" starttime="20170914 01:17:22.325"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170914 01:17:22.509" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170914 01:17:22.509" starttime="20170914 01:17:22.509"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170914 01:17:22.510" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170914 01:17:22.510" starttime="20170914 01:17:22.509"></status>
</kw>
<status status="PASS" endtime="20170914 01:17:22.510" starttime="20170914 01:17:22.321"></status>
</kw>
<status status="PASS" endtime="20170914 01:17:22.510" starttime="20170914 01:17:22.321"></status>
</kw>
<status status="PASS" endtime="20170914 01:17:22.511" starttime="20170914 01:17:22.320"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170914 01:17:22.511" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/enumerate</msg>
<status status="PASS" endtime="20170914 01:17:22.511" starttime="20170914 01:17:22.511"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170914 01:17:22.512" starttime="20170914 01:17:22.512"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170914 01:17:22.576" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/enumerate, headers=None json=None</msg>
<msg timestamp="20170914 01:17:22.577" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170914 01:17:22.577" starttime="20170914 01:17:22.512"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170914 01:17:22.578" starttime="20170914 01:17:22.577"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170914 01:17:22.578" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170914 01:17:22.578" starttime="20170914 01:17:22.578"></status>
</kw>
<msg timestamp="20170914 01:17:22.579" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170914 01:17:22.579" starttime="20170914 01:17:22.319"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170914 01:17:22.580" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170914 01:17:22.581" level="FAIL">404 != 200</msg>
<status status="FAIL" endtime="20170914 01:17:22.581" starttime="20170914 01:17:22.580"></status>
</kw>
<msg timestamp="20170914 01:17:22.581" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170914 01:17:22.581" starttime="20170914 01:17:22.579"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg timestamp="20170914 01:17:22.583" level="INFO">Continuing for loop from the next iteration.</msg>
<status status="PASS" endtime="20170914 01:17:22.583" starttime="20170914 01:17:22.582"></status>
</kw>
<status status="PASS" endtime="20170914 01:17:22.583" starttime="20170914 01:17:22.582"></status>
</kw>
<status status="PASS" endtime="20170914 01:17:22.583" starttime="20170914 01:17:22.318"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_inventory', '/xyz/openbmc_project/inventory/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170914 01:17:22.584" level="INFO">${logpath} = /home/fspcibld/logs/20170914011658738464_HostCodeUpdate/20170914011658738464_RESTHostCodeUpdate/20170914011658738464_BMC_inventory.txt</msg>
<status status="PASS" endtime="20170914 01:17:22.584" starttime="20170914 01:17:22.584"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170914 01:17:22.588" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170914 01:17:22.588" starttime="20170914 01:17:22.588"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170914 01:17:22.589" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170914 01:17:22.589" starttime="20170914 01:17:22.589"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170914 01:17:22.590" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170914 01:17:22.590" starttime="20170914 01:17:22.589"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170914 01:17:22.590" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170914 01:17:22.590" starttime="20170914 01:17:22.590"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170914 01:17:22.821" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170914 01:17:22.821" starttime="20170914 01:17:22.591"></status>
</kw>
<msg timestamp="20170914 01:17:22.821" level="INFO">${status} = PASS</msg>
<msg timestamp="20170914 01:17:22.821" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170914 01:17:22.821" starttime="20170914 01:17:22.591"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170914 01:17:22.822" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170914 01:17:22.822" starttime="20170914 01:17:22.822"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170914 01:17:22.823" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170914 01:17:22.823" starttime="20170914 01:17:22.822"></status>
</kw>
<status status="PASS" endtime="20170914 01:17:22.823" starttime="20170914 01:17:22.587"></status>
</kw>
<status status="PASS" endtime="20170914 01:17:22.823" starttime="20170914 01:17:22.586"></status>
</kw>
<status status="PASS" endtime="20170914 01:17:22.823" starttime="20170914 01:17:22.586"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170914 01:17:22.824" level="INFO">${base_uri} = /xyz/openbmc_project/inventory/enumerate</msg>
<status status="PASS" endtime="20170914 01:17:22.824" starttime="20170914 01:17:22.823"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170914 01:17:22.824" starttime="20170914 01:17:22.824"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170914 01:17:23.128" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/inventory/enumerate, headers=None json=None</msg>
<msg timestamp="20170914 01:17:23.128" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170914 01:17:23.128" starttime="20170914 01:17:22.825"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170914 01:17:23.129" starttime="20170914 01:17:23.129"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170914 01:17:23.129" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170914 01:17:23.130" starttime="20170914 01:17:23.129"></status>
</kw>
<msg timestamp="20170914 01:17:23.130" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170914 01:17:23.130" starttime="20170914 01:17:22.585"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170914 01:17:23.131" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170914 01:17:23.131" starttime="20170914 01:17:23.131"></status>
</kw>
<msg timestamp="20170914 01:17:23.131" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170914 01:17:23.131" starttime="20170914 01:17:23.130"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20170914 01:17:23.132" starttime="20170914 01:17:23.132"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170914 01:17:23.133" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/inventory/system": {
      "AssetTag": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis": {
      "AirCooled": 1, 
      "WaterCooled": 0
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/activation": {
      "endpoints": [
        "/xyz/openbmc_project/software/8764baa3"
      ]
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc": {
      "BuildDate": "", 
      "FieldReplaceable": 0, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01DH118", 
      "Present": 1, 
      "PrettyName": "BMC PLANAR  ", 
      "SerialNumber": "000000000000", 
      "UUID": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc/ethernet": {
      "FieldReplaceable": 0, 
      "MACAddress": "00:00:00:00:00:00", 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan0": {
      "MeetsMinimumShipLevel": 1
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan1": {
      "MeetsMinimumShipLevel": 1
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan2": {
      "MeetsMinimumShipLevel": 1
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan3": {
      "MeetsMinimumShipLevel": 1
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/power_supply0": {
      "Present": 1, 
      "PrettyName": "power_supply0"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/power_supply1": {
      "Present": 1, 
      "PrettyName": "power_supply1"
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170914 01:17:23.133" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170914 01:17:23.133" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/inventory/system": {
            "AssetTag": ""
        },
        "/xyz/openbmc_project/inventory/system/chassis": {
            "AirCooled": 1,
        ...</msg>
<status status="PASS" endtime="20170914 01:17:23.133" starttime="20170914 01:17:23.132"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170914 01:17:23.135" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170914011658738464_HostCodeUpdate/20170914011658738464_RESTHostCodeUpdate/20170914011658738464_BMC_inventory.txt"&gt;/home/fspcibld/logs/20170914011658738464_HostCodeUpdate/20170914011658738464_RESTHostCodeUpdate/20170914011658738464_BMC_inventory.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170914 01:17:23.135" starttime="20170914 01:17:23.134"></status>
</kw>
<status status="PASS" endtime="20170914 01:17:23.135" starttime="20170914 01:17:23.133"></status>
</kw>
<status status="PASS" endtime="20170914 01:17:23.135" starttime="20170914 01:17:22.583"></status>
</kw>
<status status="PASS" endtime="20170914 01:17:23.135" starttime="20170914 01:17:05.186"></status>
</kw>
<status status="PASS" endtime="20170914 01:17:23.135" starttime="20170914 01:17:05.184"></status>
</kw>
<status status="PASS" endtime="20170914 01:17:23.135" starttime="20170914 01:17:05.184"></status>
</kw>
<status status="PASS" endtime="20170914 01:17:23.135" starttime="20170914 01:17:05.184"></status>
</kw>
<status status="PASS" endtime="20170914 01:17:23.135" starttime="20170914 01:17:05.183"></status>
</kw>
<status status="PASS" endtime="20170914 01:17:23.135" starttime="20170914 01:17:05.165"></status>
</kw>
<status status="PASS" endtime="20170914 01:17:23.135" starttime="20170914 01:17:05.162"></status>
</kw>
<status status="PASS" endtime="20170914 01:17:23.135" starttime="20170914 01:17:05.162"></status>
</kw>
<kw type="foritem" name="${method} = ('Sys Inventory Files', 'System Inventory Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170914 01:17:23.137" starttime="20170914 01:17:23.137"></status>
</kw>
<msg timestamp="20170914 01:17:23.137" level="INFO">${status} = PASS</msg>
<msg timestamp="20170914 01:17:23.137" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170914 01:17:23.137" starttime="20170914 01:17:23.137"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170914 01:17:23.138" starttime="20170914 01:17:23.138"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="System Inventory Files" library="openbmc_ffdc_methods">
<doc>Copy systest os_inventory files.</doc>
<kw name="Copy Files" library="OperatingSystem">
<doc>Copies specified files to the target directory.</doc>
<arguments>
<arg>os_inventory_*.json</arg>
<arg>${ffdc_dir_path}</arg>
</arguments>
<status status="PASS" endtime="20170914 01:17:23.159" starttime="20170914 01:17:23.157"></status>
</kw>
<kw name="Remove Files" library="OperatingSystem">
<doc>Uses `Remove File` to remove multiple files one-by-one.</doc>
<arguments>
<arg>os_inventory_*.json</arg>
</arguments>
<msg timestamp="20170914 01:17:23.161" html="yes" level="INFO">File '&lt;a href="file:///home/fspcibld/os_inventory_*.json"&gt;/home/fspcibld/os_inventory_*.json&lt;/a&gt;' does not exist.</msg>
<status status="PASS" endtime="20170914 01:17:23.161" starttime="20170914 01:17:23.159"></status>
</kw>
<status status="PASS" endtime="20170914 01:17:23.161" starttime="20170914 01:17:23.156"></status>
</kw>
<status status="PASS" endtime="20170914 01:17:23.161" starttime="20170914 01:17:23.138"></status>
</kw>
<status status="PASS" endtime="20170914 01:17:23.162" starttime="20170914 01:17:23.136"></status>
</kw>
<status status="PASS" endtime="20170914 01:17:23.162" starttime="20170914 01:17:23.135"></status>
</kw>
<kw type="foritem" name="${method} = ('Core Files', 'SCP Coredump Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170914 01:17:23.164" starttime="20170914 01:17:23.163"></status>
</kw>
<msg timestamp="20170914 01:17:23.164" level="INFO">${status} = PASS</msg>
<msg timestamp="20170914 01:17:23.164" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170914 01:17:23.164" starttime="20170914 01:17:23.163"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170914 01:17:23.164" starttime="20170914 01:17:23.164"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="SCP Coredump Files" library="openbmc_ffdc_methods">
<doc>Copy core dump file from BMC to local system.</doc>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>ls /tmp/core_*</arg>
</arguments>
<assign>
<var>${core_files}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20170914 01:17:23.215" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.21.61
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170914 01:17:23.215" level="INFO">index=2
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.21.61
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170914 01:17:23.216" level="INFO">Executing command 'ls /tmp/core_*'.</msg>
<msg timestamp="20170914 01:17:23.263" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20170914 01:17:23.276" level="INFO">${core_files} = None</msg>
<msg timestamp="20170914 01:17:23.276" level="INFO">${stderr} = None</msg>
<msg timestamp="20170914 01:17:23.276" level="INFO">${rc} = None</msg>
<msg timestamp="20170914 01:17:23.276" level="FAIL">#(UTC) 2017/09/14 01:17:23.275316 -   23.901344 - **ERROR** The prior SSH command returned a non-zero return code:
rc:                                               0x00000001
ls: /tmp/core_*: No such file or directory
: 1 != 0</msg>
<status status="FAIL" endtime="20170914 01:17:23.276" starttime="20170914 01:17:23.186"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${core_files}</arg>
</arguments>
<assign>
<var>@{core_list}</var>
</assign>
<msg timestamp="20170914 01:17:23.277" level="INFO">@{core_list} = [ ]</msg>
<msg timestamp="20170914 01:17:23.277" level="FAIL">AttributeError: 'NoneType' object has no attribute 'split'</msg>
<status status="FAIL" endtime="20170914 01:17:23.278" starttime="20170914 01:17:23.277"></status>
</kw>
<kw name="Run Key U" library="gen_robot_keyword">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>Open Connection for SCP</arg>
</arguments>
<kw name="Open Connection for SCP" library="connection_client">
<kw name="Import Library" library="BuiltIn">
<doc>Imports a library with the given name and optional arguments.</doc>
<arguments>
<arg>SCPLibrary</arg>
<arg>WITH NAME</arg>
<arg>scp</arg>
</arguments>
<status status="PASS" endtime="20170914 01:17:23.299" starttime="20170914 01:17:23.289"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' == '${EMPTY}'</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw name="Open Connection" library="scp">
<doc>Opens a new SCP connection to the given host.</doc>
<arguments>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<status status="PASS" endtime="20170914 01:17:23.970" starttime="20170914 01:17:23.303"></status>
</kw>
<status status="PASS" endtime="20170914 01:17:23.970" starttime="20170914 01:17:23.300"></status>
</kw>
<status status="PASS" endtime="20170914 01:17:23.970" starttime="20170914 01:17:23.289"></status>
</kw>
<status status="PASS" endtime="20170914 01:17:23.970" starttime="20170914 01:17:23.278"></status>
</kw>
<kw type="for" name="${index} IN [ @{core_list} ]">
<status status="PASS" endtime="20170914 01:17:23.971" starttime="20170914 01:17:23.970"></status>
</kw>
<status status="FAIL" endtime="20170914 01:17:23.971" starttime="20170914 01:17:23.185"></status>
</kw>
<status status="PASS" endtime="20170914 01:17:23.971" starttime="20170914 01:17:23.165"></status>
</kw>
<status status="PASS" endtime="20170914 01:17:23.971" starttime="20170914 01:17:23.162"></status>
</kw>
<status status="PASS" endtime="20170914 01:17:23.971" starttime="20170914 01:17:23.162"></status>
</kw>
<kw type="foritem" name="${method} = ('BMC Specific Files', 'BMC FFDC Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170914 01:17:23.973" starttime="20170914 01:17:23.973"></status>
</kw>
<msg timestamp="20170914 01:17:23.974" level="INFO">${status} = PASS</msg>
<msg timestamp="20170914 01:17:23.974" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170914 01:17:23.974" starttime="20170914 01:17:23.973"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170914 01:17:23.974" starttime="20170914 01:17:23.974"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Files" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Get Ffdc File Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170914 01:17:23.993" level="INFO">@{entries} = [ BMC FILES ]</msg>
<status status="PASS" endtime="20170914 01:17:23.993" starttime="20170914 01:17:23.993"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC FILES">
<kw name="Create File and Write Data" library="openbmc_ffdc_methods">
<doc>Create files to current FFDC log directory,</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc File" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170914 01:17:23.995" level="INFO">@{cmd_list} = [ ('BMC_procinfo', 'cat /proc/cpuinfo') | ('BMC_proc_fd_active_list', 'ls -Al /proc/*/fd/') | ('BMC_journalctl_nopager', 'journalctl --no-pager') | ('BMC_journalctl_pretty', 'journalctl -o json-pretty...</msg>
<status status="PASS" endtime="20170914 01:17:23.995" starttime="20170914 01:17:23.994"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC_procinfo', 'cat /proc/cpuinfo')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170914 01:17:23.996" level="INFO">${logpath} = /home/fspcibld/logs/20170914011658738464_HostCodeUpdate/20170914011658738464_RESTHostCodeUpdate/20170914011658738464_BMC_procinfo.txt</msg>
<status status="PASS" endtime="20170914 01:17:23.996" starttime="20170914 01:17:23.995"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170914 01:17:23.997" starttime="20170914 01:17:23.997"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170914 01:17:23.998" level="INFO">${cmd_buf} = BMC Execute Command  cat /proc/cpuinfo  ignore_err=1</msg>
<status status="PASS" endtime="20170914 01:17:23.998" starttime="20170914 01:17:23.998"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /proc/cpuinfo</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170914 01:17:24.063" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.21.61
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170914 01:17:24.063" level="INFO">index=2
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.21.61
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170914 01:17:24.063" level="INFO">Executing command 'cat /proc/cpuinfo'.</msg>
<msg timestamp="20170914 01:17:24.110" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170914 01:17:24.110" starttime="20170914 01:17:24.027"></status>
</kw>
<msg timestamp="20170914 01:17:24.111" level="INFO">${status} = PASS</msg>
<msg timestamp="20170914 01:17:24.111" level="INFO">${ret_values} = (u'processor\t: 0\nmodel name\t: ARMv6-compatible processor rev 7 (v6l)\nBogoMIPS\t: 789.70\nFeatures\t: half thumb fastmult edsp java tls \nCPU implementer\t: 0x41\nCPU architecture: 7\nCPU variant\t...</msg>
<status status="PASS" endtime="20170914 01:17:24.111" starttime="20170914 01:17:23.999"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170914 01:17:24.112" level="INFO">${stdout} = processor	: 0
model name	: ARMv6-compatible processor rev 7 (v6l)
BogoMIPS	: 789.70
Features	: half thumb fastmult edsp java tls 
CPU implementer	: 0x41
CPU architecture: 7
CPU variant	: 0x0
CPU part	...</msg>
<status status="PASS" endtime="20170914 01:17:24.112" starttime="20170914 01:17:24.111"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170914 01:17:24.112" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170914 01:17:24.112" starttime="20170914 01:17:24.112"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170914 01:17:24.120" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170914011658738464_HostCodeUpdate/20170914011658738464_RESTHostCodeUpdate/20170914011658738464_BMC_procinfo.txt"&gt;/home/fspcibld/logs/20170914011658738464_HostCodeUpdate/20170914011658738464_RESTHostCodeUpdate/20170914011658738464_BMC_procinfo.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170914 01:17:24.120" starttime="20170914 01:17:24.119"></status>
</kw>
<status status="PASS" endtime="20170914 01:17:24.120" starttime="20170914 01:17:24.119"></status>
</kw>
<status status="PASS" endtime="20170914 01:17:24.120" starttime="20170914 01:17:24.113"></status>
</kw>
<status status="PASS" endtime="20170914 01:17:24.120" starttime="20170914 01:17:23.996"></status>
</kw>
<status status="PASS" endtime="20170914 01:17:24.120" starttime="20170914 01:17:23.995"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_proc_fd_active_list', 'ls -Al /proc/*/fd/')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170914 01:17:24.121" level="INFO">${logpath} = /home/fspcibld/logs/20170914011658738464_HostCodeUpdate/20170914011658738464_RESTHostCodeUpdate/20170914011658738464_BMC_proc_fd_active_list.txt</msg>
<status status="PASS" endtime="20170914 01:17:24.121" starttime="20170914 01:17:24.121"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170914 01:17:24.123" starttime="20170914 01:17:24.122"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170914 01:17:24.123" level="INFO">${cmd_buf} = BMC Execute Command  ls -Al /proc/*/fd/  ignore_err=1</msg>
<status status="PASS" endtime="20170914 01:17:24.123" starttime="20170914 01:17:24.123"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>ls -Al /proc/*/fd/</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170914 01:17:24.185" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.21.61
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170914 01:17:24.185" level="INFO">index=2
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.21.61
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170914 01:17:24.185" level="INFO">Executing command 'ls -Al /proc/*/fd/'.</msg>
<msg timestamp="20170914 01:17:24.647" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170914 01:17:24.647" starttime="20170914 01:17:24.148"></status>
</kw>
<msg timestamp="20170914 01:17:24.647" level="INFO">${status} = PASS</msg>
<msg timestamp="20170914 01:17:24.648" level="INFO">${ret_values} = (u'/proc/1/fd/:\ntotal 0\nlrwx------    1 root     root            64 Sep 14 01:16 0 -&gt; /dev/null\nlrwx------    1 root     root            64 Sep 14 01:16 1 -&gt; /dev/null\nlr-x------    1 root     roo...</msg>
<status status="PASS" endtime="20170914 01:17:24.648" starttime="20170914 01:17:24.124"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170914 01:17:24.649" level="INFO">${stdout} = /proc/1/fd/:
total 0
lrwx------    1 root     root            64 Sep 14 01:16 0 -&gt; /dev/null
lrwx------    1 root     root            64 Sep 14 01:16 1 -&gt; /dev/null
lr-x------    1 root     root      ...</msg>
<status status="PASS" endtime="20170914 01:17:24.649" starttime="20170914 01:17:24.648"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170914 01:17:24.650" level="INFO">${stderr} = ls: /proc/1344/fd/3: cannot read link: No such file or directory
ls: /proc/self/fd/3: cannot read link: No such file or directory
ls: /proc/thread-self/fd/3: cannot read link: No such file or director...</msg>
<status status="PASS" endtime="20170914 01:17:24.650" starttime="20170914 01:17:24.649"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170914 01:17:24.658" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170914011658738464_HostCodeUpdate/20170914011658738464_RESTHostCodeUpdate/20170914011658738464_BMC_proc_fd_active_list.txt"&gt;/home/fspcibld/logs/20170914011658738464_HostCodeUpdate/20170914011658738464_RESTHostCodeUpdate/20170914011658738464_BMC_proc_fd_active_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170914 01:17:24.658" starttime="20170914 01:17:24.658"></status>
</kw>
<status status="PASS" endtime="20170914 01:17:24.659" starttime="20170914 01:17:24.656"></status>
</kw>
<status status="PASS" endtime="20170914 01:17:24.659" starttime="20170914 01:17:24.650"></status>
</kw>
<status status="PASS" endtime="20170914 01:17:24.659" starttime="20170914 01:17:24.122"></status>
</kw>
<status status="PASS" endtime="20170914 01:17:24.659" starttime="20170914 01:17:24.121"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_journalctl_nopager', 'journalctl --no-pager')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170914 01:17:24.660" level="INFO">${logpath} = /home/fspcibld/logs/20170914011658738464_HostCodeUpdate/20170914011658738464_RESTHostCodeUpdate/20170914011658738464_BMC_journalctl_nopager.txt</msg>
<status status="PASS" endtime="20170914 01:17:24.660" starttime="20170914 01:17:24.659"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170914 01:17:24.661" starttime="20170914 01:17:24.661"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170914 01:17:24.662" level="INFO">${cmd_buf} = BMC Execute Command  journalctl --no-pager  ignore_err=1</msg>
<status status="PASS" endtime="20170914 01:17:24.662" starttime="20170914 01:17:24.661"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>journalctl --no-pager</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170914 01:17:24.722" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.21.61
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170914 01:17:24.722" level="INFO">index=2
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.21.61
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170914 01:17:24.723" level="INFO">Executing command 'journalctl --no-pager'.</msg>
<msg timestamp="20170914 01:17:25.880" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170914 01:17:25.881" starttime="20170914 01:17:24.687"></status>
</kw>
<msg timestamp="20170914 01:17:25.881" level="INFO">${status} = PASS</msg>
<msg timestamp="20170914 01:17:25.882" level="INFO">${ret_values} = (u'-- Logs begin at Thu 2017-09-14 01:15:24 UTC, end at Thu 2017-09-14 01:17:32 UTC. --\nSep 14 01:15:24 witherspoon kernel: Booting Linux on physical CPU 0x0\nSep 14 01:15:24 witherspoon kernel: Linu...</msg>
<status status="PASS" endtime="20170914 01:17:25.883" starttime="20170914 01:17:24.662"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170914 01:17:25.884" level="INFO">${stdout} = -- Logs begin at Thu 2017-09-14 01:15:24 UTC, end at Thu 2017-09-14 01:17:32 UTC. --
Sep 14 01:15:24 witherspoon kernel: Booting Linux on physical CPU 0x0
Sep 14 01:15:24 witherspoon kernel: Linux ver...</msg>
<status status="PASS" endtime="20170914 01:17:25.884" starttime="20170914 01:17:25.883"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170914 01:17:25.884" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170914 01:17:25.884" starttime="20170914 01:17:25.884"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170914 01:17:25.893" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170914011658738464_HostCodeUpdate/20170914011658738464_RESTHostCodeUpdate/20170914011658738464_BMC_journalctl_nopager.txt"&gt;/home/fspcibld/logs/20170914011658738464_HostCodeUpdate/20170914011658738464_RESTHostCodeUpdate/20170914011658738464_BMC_journalctl_nopager.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170914 01:17:25.893" starttime="20170914 01:17:25.892"></status>
</kw>
<status status="PASS" endtime="20170914 01:17:25.893" starttime="20170914 01:17:25.891"></status>
</kw>
<status status="PASS" endtime="20170914 01:17:25.893" starttime="20170914 01:17:25.885"></status>
</kw>
<status status="PASS" endtime="20170914 01:17:25.893" starttime="20170914 01:17:24.660"></status>
</kw>
<status status="PASS" endtime="20170914 01:17:25.893" starttime="20170914 01:17:24.659"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_journalctl_pretty', 'journalctl -o json-pretty')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170914 01:17:25.894" level="INFO">${logpath} = /home/fspcibld/logs/20170914011658738464_HostCodeUpdate/20170914011658738464_RESTHostCodeUpdate/20170914011658738464_BMC_journalctl_pretty.txt</msg>
<status status="PASS" endtime="20170914 01:17:25.894" starttime="20170914 01:17:25.893"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170914 01:17:25.895" starttime="20170914 01:17:25.895"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170914 01:17:25.896" level="INFO">${cmd_buf} = BMC Execute Command  journalctl -o json-pretty  ignore_err=1</msg>
<status status="PASS" endtime="20170914 01:17:25.896" starttime="20170914 01:17:25.896"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>journalctl -o json-pretty</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170914 01:17:25.958" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.21.61
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170914 01:17:25.958" level="INFO">index=2
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.21.61
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170914 01:17:25.959" level="INFO">Executing command 'journalctl -o json-pretty'.</msg>
<msg timestamp="20170914 01:17:28.524" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170914 01:17:28.526" starttime="20170914 01:17:25.920"></status>
</kw>
<msg timestamp="20170914 01:17:28.527" level="INFO">${status} = PASS</msg>
<msg timestamp="20170914 01:17:28.541" level="INFO">${ret_values} = (u'{\n\t"__CURSOR" : "s=46533d10e252476e8b729c8818c2caf5;i=1;b=af4be6cfe8f7427c85fc7ad8e1626ec2;m=da5917;t=5591c02c8381c;x=dc03029b84a686aa",\n\t"__REALTIME_TIMESTAMP" : "1505351724185628",\n\t"__MONO...</msg>
<status status="PASS" endtime="20170914 01:17:28.541" starttime="20170914 01:17:25.896"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170914 01:17:28.545" level="INFO">${stdout} = {
	"__CURSOR" : "s=46533d10e252476e8b729c8818c2caf5;i=1;b=af4be6cfe8f7427c85fc7ad8e1626ec2;m=da5917;t=5591c02c8381c;x=dc03029b84a686aa",
	"__REALTIME_TIMESTAMP" : "1505351724185628",
	"__MONOTONIC_TIM...</msg>
<status status="PASS" endtime="20170914 01:17:28.545" starttime="20170914 01:17:28.542"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170914 01:17:28.546" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170914 01:17:28.546" starttime="20170914 01:17:28.546"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170914 01:17:28.560" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170914011658738464_HostCodeUpdate/20170914011658738464_RESTHostCodeUpdate/20170914011658738464_BMC_journalctl_pretty.txt"&gt;/home/fspcibld/logs/20170914011658738464_HostCodeUpdate/20170914011658738464_RESTHostCodeUpdate/20170914011658738464_BMC_journalctl_pretty.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170914 01:17:28.561" starttime="20170914 01:17:28.558"></status>
</kw>
<status status="PASS" endtime="20170914 01:17:28.561" starttime="20170914 01:17:28.553"></status>
</kw>
<status status="PASS" endtime="20170914 01:17:28.561" starttime="20170914 01:17:28.546"></status>
</kw>
<status status="PASS" endtime="20170914 01:17:28.561" starttime="20170914 01:17:25.894"></status>
</kw>
<status status="PASS" endtime="20170914 01:17:28.561" starttime="20170914 01:17:25.893"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_meminfo', 'cat /proc/meminfo')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170914 01:17:28.562" level="INFO">${logpath} = /home/fspcibld/logs/20170914011658738464_HostCodeUpdate/20170914011658738464_RESTHostCodeUpdate/20170914011658738464_BMC_meminfo.txt</msg>
<status status="PASS" endtime="20170914 01:17:28.562" starttime="20170914 01:17:28.562"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170914 01:17:28.564" starttime="20170914 01:17:28.563"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170914 01:17:28.565" level="INFO">${cmd_buf} = BMC Execute Command  cat /proc/meminfo  ignore_err=1</msg>
<status status="PASS" endtime="20170914 01:17:28.565" starttime="20170914 01:17:28.564"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /proc/meminfo</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170914 01:17:28.626" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.21.61
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170914 01:17:28.626" level="INFO">index=2
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.21.61
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170914 01:17:28.626" level="INFO">Executing command 'cat /proc/meminfo'.</msg>
<msg timestamp="20170914 01:17:28.683" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170914 01:17:28.684" starttime="20170914 01:17:28.589"></status>
</kw>
<msg timestamp="20170914 01:17:28.684" level="INFO">${status} = PASS</msg>
<msg timestamp="20170914 01:17:28.684" level="INFO">${ret_values} = (u'MemTotal:         432240 kB\nMemFree:          275736 kB\nMemAvailable:     324672 kB\nBuffers:           11816 kB\nCached:            53776 kB\nSwapCached:            0 kB\nActive:            9638...</msg>
<status status="PASS" endtime="20170914 01:17:28.684" starttime="20170914 01:17:28.565"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170914 01:17:28.685" level="INFO">${stdout} = MemTotal:         432240 kB
MemFree:          275736 kB
MemAvailable:     324672 kB
Buffers:           11816 kB
Cached:            53776 kB
SwapCached:            0 kB
Active:            96388 kB
Inac...</msg>
<status status="PASS" endtime="20170914 01:17:28.685" starttime="20170914 01:17:28.684"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170914 01:17:28.685" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170914 01:17:28.685" starttime="20170914 01:17:28.685"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170914 01:17:28.693" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170914011658738464_HostCodeUpdate/20170914011658738464_RESTHostCodeUpdate/20170914011658738464_BMC_meminfo.txt"&gt;/home/fspcibld/logs/20170914011658738464_HostCodeUpdate/20170914011658738464_RESTHostCodeUpdate/20170914011658738464_BMC_meminfo.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170914 01:17:28.693" starttime="20170914 01:17:28.693"></status>
</kw>
<status status="PASS" endtime="20170914 01:17:28.694" starttime="20170914 01:17:28.692"></status>
</kw>
<status status="PASS" endtime="20170914 01:17:28.694" starttime="20170914 01:17:28.686"></status>
</kw>
<status status="PASS" endtime="20170914 01:17:28.694" starttime="20170914 01:17:28.563"></status>
</kw>
<status status="PASS" endtime="20170914 01:17:28.694" starttime="20170914 01:17:28.561"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_proc_list', 'top -n 1 -b')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170914 01:17:28.695" level="INFO">${logpath} = /home/fspcibld/logs/20170914011658738464_HostCodeUpdate/20170914011658738464_RESTHostCodeUpdate/20170914011658738464_BMC_proc_list.txt</msg>
<status status="PASS" endtime="20170914 01:17:28.695" starttime="20170914 01:17:28.694"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170914 01:17:28.696" starttime="20170914 01:17:28.696"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170914 01:17:28.697" level="INFO">${cmd_buf} = BMC Execute Command  top -n 1 -b  ignore_err=1</msg>
<status status="PASS" endtime="20170914 01:17:28.697" starttime="20170914 01:17:28.696"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>top -n 1 -b</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170914 01:17:28.757" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.21.61
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170914 01:17:28.757" level="INFO">index=2
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.21.61
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170914 01:17:28.758" level="INFO">Executing command 'top -n 1 -b'.</msg>
<msg timestamp="20170914 01:17:29.087" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170914 01:17:29.087" starttime="20170914 01:17:28.722"></status>
</kw>
<msg timestamp="20170914 01:17:29.087" level="INFO">${status} = PASS</msg>
<msg timestamp="20170914 01:17:29.087" level="INFO">${ret_values} = (u'Mem: 156504K used, 275736K free, 14408K shrd, 11816K buff, 53776K cached\nCPU:  15% usr  15% sys   0% nic  69% idle   0% io   0% irq   0% sirq\nLoad average: 3.56 1.98 0.78 1/151 1348\n  PID  PPID ...</msg>
<status status="PASS" endtime="20170914 01:17:29.087" starttime="20170914 01:17:28.697"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170914 01:17:29.088" level="INFO">${stdout} = Mem: 156504K used, 275736K free, 14408K shrd, 11816K buff, 53776K cached
CPU:  15% usr  15% sys   0% nic  69% idle   0% io   0% irq   0% sirq
Load average: 3.56 1.98 0.78 1/151 1348
  PID  PPID USER  ...</msg>
<status status="PASS" endtime="20170914 01:17:29.088" starttime="20170914 01:17:29.088"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170914 01:17:29.089" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170914 01:17:29.089" starttime="20170914 01:17:29.089"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170914 01:17:29.097" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170914011658738464_HostCodeUpdate/20170914011658738464_RESTHostCodeUpdate/20170914011658738464_BMC_proc_list.txt"&gt;/home/fspcibld/logs/20170914011658738464_HostCodeUpdate/20170914011658738464_RESTHostCodeUpdate/20170914011658738464_BMC_proc_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170914 01:17:29.097" starttime="20170914 01:17:29.097"></status>
</kw>
<status status="PASS" endtime="20170914 01:17:29.097" starttime="20170914 01:17:29.096"></status>
</kw>
<status status="PASS" endtime="20170914 01:17:29.097" starttime="20170914 01:17:29.089"></status>
</kw>
<status status="PASS" endtime="20170914 01:17:29.098" starttime="20170914 01:17:28.695"></status>
</kw>
<status status="PASS" endtime="20170914 01:17:29.098" starttime="20170914 01:17:28.694"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_dmesg', 'dmesg')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170914 01:17:29.098" level="INFO">${logpath} = /home/fspcibld/logs/20170914011658738464_HostCodeUpdate/20170914011658738464_RESTHostCodeUpdate/20170914011658738464_BMC_dmesg.txt</msg>
<status status="PASS" endtime="20170914 01:17:29.098" starttime="20170914 01:17:29.098"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170914 01:17:29.100" starttime="20170914 01:17:29.099"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170914 01:17:29.101" level="INFO">${cmd_buf} = BMC Execute Command  dmesg  ignore_err=1</msg>
<status status="PASS" endtime="20170914 01:17:29.101" starttime="20170914 01:17:29.100"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>dmesg</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170914 01:17:29.162" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.21.61
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170914 01:17:29.162" level="INFO">index=2
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.21.61
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170914 01:17:29.162" level="INFO">Executing command 'dmesg'.</msg>
<msg timestamp="20170914 01:17:29.234" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170914 01:17:29.234" starttime="20170914 01:17:29.126"></status>
</kw>
<msg timestamp="20170914 01:17:29.235" level="INFO">${status} = PASS</msg>
<msg timestamp="20170914 01:17:29.235" level="INFO">${ret_values} = (u'[    0.000000] Memory policy: Data cache writeback\n[    0.000000] SOC Rev: 04030303\n[    0.000000] On node 0 totalpages: 110592\n[    0.000000] free_area_init_node: node 0, pgdat 806038a4, node_m...</msg>
<status status="PASS" endtime="20170914 01:17:29.235" starttime="20170914 01:17:29.101"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170914 01:17:29.236" level="INFO">${stdout} = [    0.000000] Memory policy: Data cache writeback
[    0.000000] SOC Rev: 04030303
[    0.000000] On node 0 totalpages: 110592
[    0.000000] free_area_init_node: node 0, pgdat 806038a4, node_mem_map...</msg>
<status status="PASS" endtime="20170914 01:17:29.236" starttime="20170914 01:17:29.235"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170914 01:17:29.236" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170914 01:17:29.237" starttime="20170914 01:17:29.236"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170914 01:17:29.244" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170914011658738464_HostCodeUpdate/20170914011658738464_RESTHostCodeUpdate/20170914011658738464_BMC_dmesg.txt"&gt;/home/fspcibld/logs/20170914011658738464_HostCodeUpdate/20170914011658738464_RESTHostCodeUpdate/20170914011658738464_BMC_dmesg.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170914 01:17:29.245" starttime="20170914 01:17:29.244"></status>
</kw>
<status status="PASS" endtime="20170914 01:17:29.245" starttime="20170914 01:17:29.243"></status>
</kw>
<status status="PASS" endtime="20170914 01:17:29.245" starttime="20170914 01:17:29.237"></status>
</kw>
<status status="PASS" endtime="20170914 01:17:29.245" starttime="20170914 01:17:29.099"></status>
</kw>
<status status="PASS" endtime="20170914 01:17:29.245" starttime="20170914 01:17:29.098"></status>
</kw>
<status status="PASS" endtime="20170914 01:17:29.245" starttime="20170914 01:17:23.995"></status>
</kw>
<status status="PASS" endtime="20170914 01:17:29.245" starttime="20170914 01:17:23.993"></status>
</kw>
<status status="PASS" endtime="20170914 01:17:29.245" starttime="20170914 01:17:23.993"></status>
</kw>
<status status="PASS" endtime="20170914 01:17:29.245" starttime="20170914 01:17:23.993"></status>
</kw>
<status status="PASS" endtime="20170914 01:17:29.245" starttime="20170914 01:17:23.992"></status>
</kw>
<status status="PASS" endtime="20170914 01:17:29.245" starttime="20170914 01:17:23.974"></status>
</kw>
<status status="PASS" endtime="20170914 01:17:29.245" starttime="20170914 01:17:23.972"></status>
</kw>
<status status="PASS" endtime="20170914 01:17:29.245" starttime="20170914 01:17:23.971"></status>
</kw>
<kw type="foritem" name="${method} = ('SEL Log', 'Collect eSEL Log')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170914 01:17:29.247" starttime="20170914 01:17:29.247"></status>
</kw>
<msg timestamp="20170914 01:17:29.247" level="INFO">${status} = PASS</msg>
<msg timestamp="20170914 01:17:29.248" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170914 01:17:29.248" starttime="20170914 01:17:29.247"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170914 01:17:29.248" starttime="20170914 01:17:29.248"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="Collect eSEL Log" library="openbmc_ffdc_methods">
<doc>Collect eSEL log from logging entry and convert eSEL data</doc>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${BMC_LOGGING_ENTRY}/enumerate</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170914 01:17:29.269" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170914 01:17:29.270" starttime="20170914 01:17:29.269"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170914 01:17:29.271" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170914 01:17:29.271" starttime="20170914 01:17:29.271"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170914 01:17:29.272" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170914 01:17:29.272" starttime="20170914 01:17:29.271"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170914 01:17:29.272" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170914 01:17:29.272" starttime="20170914 01:17:29.272"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170914 01:17:29.463" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170914 01:17:29.463" starttime="20170914 01:17:29.273"></status>
</kw>
<msg timestamp="20170914 01:17:29.463" level="INFO">${status} = PASS</msg>
<msg timestamp="20170914 01:17:29.463" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170914 01:17:29.463" starttime="20170914 01:17:29.273"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170914 01:17:29.464" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170914 01:17:29.464" starttime="20170914 01:17:29.464"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170914 01:17:29.465" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170914 01:17:29.465" starttime="20170914 01:17:29.465"></status>
</kw>
<status status="PASS" endtime="20170914 01:17:29.465" starttime="20170914 01:17:29.269"></status>
</kw>
<status status="PASS" endtime="20170914 01:17:29.465" starttime="20170914 01:17:29.268"></status>
</kw>
<status status="PASS" endtime="20170914 01:17:29.465" starttime="20170914 01:17:29.267"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170914 01:17:29.466" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry//enumerate</msg>
<status status="PASS" endtime="20170914 01:17:29.466" starttime="20170914 01:17:29.466"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170914 01:17:29.467" starttime="20170914 01:17:29.466"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170914 01:17:29.515" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry//enumerate, headers=None json=None</msg>
<msg timestamp="20170914 01:17:29.515" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170914 01:17:29.515" starttime="20170914 01:17:29.467"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170914 01:17:29.516" starttime="20170914 01:17:29.515"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170914 01:17:29.516" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170914 01:17:29.516" starttime="20170914 01:17:29.516"></status>
</kw>
<msg timestamp="20170914 01:17:29.516" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170914 01:17:29.516" starttime="20170914 01:17:29.267"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170914 01:17:29.518" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170914 01:17:29.518" level="FAIL">404 != 200</msg>
<status status="FAIL" endtime="20170914 01:17:29.518" starttime="20170914 01:17:29.517"></status>
</kw>
<msg timestamp="20170914 01:17:29.518" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170914 01:17:29.518" starttime="20170914 01:17:29.517"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
</arguments>
<msg timestamp="20170914 01:17:29.519" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20170914 01:17:29.519" starttime="20170914 01:17:29.518"></status>
</kw>
<status status="PASS" endtime="20170914 01:17:29.519" starttime="20170914 01:17:29.266"></status>
</kw>
<status status="PASS" endtime="20170914 01:17:29.519" starttime="20170914 01:17:29.248"></status>
</kw>
<status status="PASS" endtime="20170914 01:17:29.519" starttime="20170914 01:17:29.246"></status>
</kw>
<status status="PASS" endtime="20170914 01:17:29.519" starttime="20170914 01:17:29.246"></status>
</kw>
<kw type="foritem" name="${method} = ('OS FFDC', 'OS FFDC Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170914 01:17:29.521" starttime="20170914 01:17:29.521"></status>
</kw>
<msg timestamp="20170914 01:17:29.521" level="INFO">${status} = PASS</msg>
<msg timestamp="20170914 01:17:29.521" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170914 01:17:29.521" starttime="20170914 01:17:29.520"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170914 01:17:29.522" starttime="20170914 01:17:29.522"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="OS FFDC Files" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${OS_HOST}' == '${EMPTY}'</arg>
<arg>No OS Host Provided</arg>
</arguments>
<msg timestamp="20170914 01:17:29.541" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20170914 01:17:29.541" starttime="20170914 01:17:29.541"></status>
</kw>
<status status="PASS" endtime="20170914 01:17:29.541" starttime="20170914 01:17:29.540"></status>
</kw>
<status status="PASS" endtime="20170914 01:17:29.541" starttime="20170914 01:17:29.522"></status>
</kw>
<status status="PASS" endtime="20170914 01:17:29.542" starttime="20170914 01:17:29.519"></status>
</kw>
<status status="PASS" endtime="20170914 01:17:29.542" starttime="20170914 01:17:29.519"></status>
</kw>
<status status="PASS" endtime="20170914 01:17:29.542" starttime="20170914 01:16:59.402"></status>
</kw>
<status status="PASS" endtime="20170914 01:17:29.542" starttime="20170914 01:16:59.399"></status>
</kw>
<status status="PASS" endtime="20170914 01:17:29.542" starttime="20170914 01:16:59.399"></status>
</kw>
<status status="PASS" endtime="20170914 01:17:29.542" starttime="20170914 01:16:59.399"></status>
</kw>
<kw name="Run Key U" library="gen_robot_keyword">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>SSHLibrary.Close All Connections</arg>
</arguments>
<kw name="Close All Connections" library="SSHLibrary">
<doc>Closes all open connections.</doc>
<status status="PASS" endtime="20170914 01:17:29.550" starttime="20170914 01:17:29.550"></status>
</kw>
<status status="PASS" endtime="20170914 01:17:29.550" starttime="20170914 01:17:29.542"></status>
</kw>
<status status="PASS" endtime="20170914 01:17:29.550" starttime="20170914 01:16:59.398"></status>
</kw>
<status status="PASS" endtime="20170914 01:17:29.551" starttime="20170914 01:16:55.697"></status>
</kw>
<status status="PASS" endtime="20170914 01:17:29.551" starttime="20170914 01:16:55.697"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}'=='True'</arg>
<arg>Recover Quiesced Host</arg>
</arguments>
<status status="PASS" endtime="20170914 01:17:29.551" starttime="20170914 01:17:29.551"></status>
</kw>
<kw name="Log Test Case Status" library="openbmc_ffdc_methods">
<doc>Test case execution result history.</doc>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH_STYLE}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH_STYLE}</var>
</assign>
<msg timestamp="20170914 01:17:29.554" level="INFO">${FFDC_DIR_PATH_STYLE} = 0</msg>
<status status="PASS" endtime="20170914 01:17:29.554" starttime="20170914 01:17:29.554"></status>
</kw>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH}</var>
</assign>
<msg timestamp="20170914 01:17:29.555" level="INFO">${FFDC_DIR_PATH} = /home/fspcibld/logs/20170914011658738464_HostCodeUpdate/20170914011658738464_RESTHostCodeUpdate/</msg>
<status status="PASS" endtime="20170914 01:17:29.555" starttime="20170914 01:17:29.555"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH}' == '${EMPTY}'</arg>
<arg>Set FFDC Defaults</arg>
</arguments>
<status status="PASS" endtime="20170914 01:17:29.556" starttime="20170914 01:17:29.555"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH_STYLE}' == '${1}'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${FFDC_LOG_PATH}</arg>
<arg>${FFDC_DIR_PATH}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${TEST_HISTORY}</arg>
<arg>${FFDC_DIR_PATH}test_history.txt</arg>
</arguments>
<status status="PASS" endtime="20170914 01:17:29.557" starttime="20170914 01:17:29.556"></status>
</kw>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg timestamp="20170914 01:17:29.558" html="yes" level="INFO">Directory '&lt;a href="file:///home/fspcibld"&gt;/home/fspcibld&lt;/a&gt;' already exists.</msg>
<status status="PASS" endtime="20170914 01:17:29.558" starttime="20170914 01:17:29.557"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg timestamp="20170914 01:17:29.559" html="yes" level="INFO">File '&lt;a href="file:///home/fspcibld/logs/test_history.txt"&gt;/home/fspcibld/logs/test_history.txt&lt;/a&gt;' exists.</msg>
<status status="PASS" endtime="20170914 01:17:29.559" starttime="20170914 01:17:29.558"></status>
</kw>
<msg timestamp="20170914 01:17:29.559" level="INFO">${exist} = True</msg>
<status status="PASS" endtime="20170914 01:17:29.559" starttime="20170914 01:17:29.558"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<status status="PASS" endtime="20170914 01:17:29.559" starttime="20170914 01:17:29.559"></status>
</kw>
<kw name="Rpvars" library="gen_robot_print">
<arguments>
<arg>TEST_HISTORY</arg>
</arguments>
<status status="PASS" endtime="20170914 01:17:29.560" starttime="20170914 01:17:29.560"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170914 01:17:29.561" level="INFO">${cur_time} = 2017-09-14 01:17:29:561033</msg>
<status status="PASS" endtime="20170914 01:17:29.561" starttime="20170914 01:17:29.561"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170914 01:17:29.563" level="INFO">${cur_time} = 20170914011729561033</msg>
<status status="PASS" endtime="20170914 01:17:29.563" starttime="20170914 01:17:29.562"></status>
</kw>
<msg timestamp="20170914 01:17:29.563" level="INFO">${cur_time} = 20170914011729561033</msg>
<status status="PASS" endtime="20170914 01:17:29.563" starttime="20170914 01:17:29.560"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg timestamp="20170914 01:17:29.564" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/test_history.txt"&gt;/home/fspcibld/logs/test_history.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170914 01:17:29.564" starttime="20170914 01:17:29.563"></status>
</kw>
<status status="PASS" endtime="20170914 01:17:29.564" starttime="20170914 01:17:29.553"></status>
</kw>
<status status="FAIL" endtime="20170914 01:17:29.567" starttime="20170914 01:16:54.344"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'PASS'</arg>
<arg>Check Error And Collect FFDC</arg>
</arguments>
<status status="PASS" endtime="20170914 01:17:29.568" starttime="20170914 01:17:29.568"></status>
</kw>
<status status="FAIL" endtime="20170914 01:17:29.568" starttime="20170914 01:16:54.342">Replacing variables from keyword return value failed: Resolving variable '${state.rsplit('.', 1)[1]}' failed: AttributeError: 'dict' object has no attribute 'rsplit'</status>
</kw>
<doc>Do a PNOR code update by uploading image on BMC via REST.</doc>
<tags>
<tag>REST_Host_Code_Update</tag>
</tags>
<status status="FAIL" endtime="20170914 01:17:29.568" critical="yes" starttime="20170914 01:12:29.964">#(UTC) 2017/09/14 01:16:54.331021 -    2.348686 - **ERROR** Boot failures exceed the boot failure threshold:
boot_fail:                                        1
boot_fail_threshold:                              0


Also teardown failed:
Replacing variables from keyword return value failed: Resolving variable '${state.rsplit('.', 1)[1]}' failed: AttributeError: 'dict' object has no attribute 'rsplit'</status>
</test>
<doc>Update the PNOR code on a target BMC.
Execution Method:
python -m robot -v OPENBMC_HOST:&lt;hostname&gt;
-v DELETE_OLD_PNOR_IMAGES:&lt;"true" or "false"&gt;
-v IMAGE_FILE_PATH:&lt;path/*.tar&gt;
-v ALTERNATE_IMAGE_FILE_PATH:&lt;path/*.tar&gt;
host_code_update.robot

Code update method BMC
Update work flow sequence:
- Upload image via REST
- Verify that the file exists on the BMC
- Check that software "Activation" is set to "Ready"
- Set "Requested Activation" to "Active"
- Wait for code update to complete
- Verify the new version</doc>
<status status="FAIL" endtime="20170914 01:17:29.570" starttime="20170914 01:12:28.858"></status>
</suite>
<statistics>
<total>
<stat fail="1" pass="0">Critical Tests</stat>
<stat fail="1" pass="0">All Tests</stat>
</total>
<tag>
<stat fail="1" pass="0">REST_Host_Code_Update</stat>
</tag>
<suite>
<stat fail="1" id="s1" name="Host Code Update" pass="0">Host Code Update</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
