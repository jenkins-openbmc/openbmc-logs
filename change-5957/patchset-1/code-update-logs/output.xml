<?xml version="1.0" encoding="UTF-8"?>
<robot generated="20170812 14:22:58.997" generator="Robot 3.0.2 (Python 2.7.12 on linux2)">
<suite source="/home/fspcibld/openbmc-test-automation/extended/code_update/code_update.robot" id="s1" name="Code Update">
<test id="s1-t1" name="REST Host Code Update">
<kw type="setup" name="Code Update Setup">
<doc>Do code update test case setup.</doc>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'true' == '${DELETE_OLD_PNOR_IMAGES}'</arg>
<arg>Delete All PNOR Images</arg>
</arguments>
<kw name="Delete All Pnor Images" library="code_update">
<doc>Delete all PNOR images from the BMC.</doc>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>/xyz/openbmc_project/software/enumerate</arg>
</arguments>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170812 14:22:59.584" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170812 14:22:59.584" starttime="20170812 14:22:59.584"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170812 14:22:59.585" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170812 14:22:59.585" starttime="20170812 14:22:59.585"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170812 14:22:59.586" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170812 14:22:59.586" starttime="20170812 14:22:59.585"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170812 14:22:59.586" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170812 14:22:59.586" starttime="20170812 14:22:59.586"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170812 14:22:59.791" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170812 14:22:59.791" starttime="20170812 14:22:59.587"></status>
</kw>
<msg timestamp="20170812 14:22:59.791" level="INFO">${status} = PASS</msg>
<msg timestamp="20170812 14:22:59.791" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170812 14:22:59.791" starttime="20170812 14:22:59.587"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170812 14:22:59.791" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170812 14:22:59.792" starttime="20170812 14:22:59.791"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170812 14:22:59.792" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170812 14:22:59.792" starttime="20170812 14:22:59.792"></status>
</kw>
<status status="PASS" endtime="20170812 14:22:59.792" starttime="20170812 14:22:59.583"></status>
</kw>
<status status="PASS" endtime="20170812 14:22:59.792" starttime="20170812 14:22:59.582"></status>
</kw>
<status status="PASS" endtime="20170812 14:22:59.793" starttime="20170812 14:22:59.582"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170812 14:22:59.793" level="INFO">${base_uri} = /xyz/openbmc_project/software/enumerate</msg>
<status status="PASS" endtime="20170812 14:22:59.793" starttime="20170812 14:22:59.793"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170812 14:22:59.794" starttime="20170812 14:22:59.794"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170812 14:22:59.950" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/enumerate, headers=None json=None</msg>
<msg timestamp="20170812 14:22:59.950" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170812 14:22:59.950" starttime="20170812 14:22:59.794"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170812 14:22:59.951" starttime="20170812 14:22:59.951"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170812 14:22:59.951" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170812 14:22:59.951" starttime="20170812 14:22:59.951"></status>
</kw>
<msg timestamp="20170812 14:22:59.952" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170812 14:22:59.952" starttime="20170812 14:22:59.581"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170812 14:22:59.952" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170812 14:22:59.952" starttime="20170812 14:22:59.952"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170812 14:22:59.953" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/software/e7ee5b83": {
      "Activation": "xyz.openbmc_project.Software.Activation.Activations.Active", 
      "Path": "", 
      "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
      "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.None", 
      "Version": "v1.99.8-223-g99446fe"
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170812 14:22:59.953" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170812 14:22:59.953" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'/xyz/openbmc_project/software/e7ee5b83': {u'Path': u'', u'Activation': u'xyz.openbmc_project.Software.Activation.Activations.Active', u'RequestedA...</msg>
<status status="PASS" endtime="20170812 14:22:59.953" starttime="20170812 14:22:59.953"></status>
</kw>
<status status="PASS" endtime="20170812 14:22:59.954" starttime="20170812 14:22:59.581"></status>
</kw>
<status status="PASS" endtime="20170812 14:22:59.954" starttime="20170812 14:22:59.490"></status>
</kw>
<status status="PASS" endtime="20170812 14:22:59.954" starttime="20170812 14:22:59.489"></status>
</kw>
<status status="PASS" endtime="20170812 14:22:59.954" starttime="20170812 14:22:59.489"></status>
</kw>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${IMAGE_FILE_PATH}</arg>
</arguments>
<msg timestamp="20170812 14:22:59.955" html="yes" level="INFO">File '&lt;a href="file:///home/fspcibld/witherspoon_910_golden.pnor.squashfs.tar"&gt;/home/fspcibld/witherspoon_910_golden.pnor.squashfs.tar&lt;/a&gt;' exists.</msg>
<status status="PASS" endtime="20170812 14:22:59.955" starttime="20170812 14:22:59.954"></status>
</kw>
<kw name="Get Version Tar" library="test_uploadimage">
<doc>Read the image version from the MANIFEST inside the tarball.</doc>
<arguments>
<arg>${IMAGE_FILE_PATH}</arg>
</arguments>
<assign>
<var>${IMAGE_VERSION}</var>
</assign>
<msg timestamp="20170812 14:22:59.962" level="INFO">${IMAGE_VERSION} = IBM-witherspoon-sequoia-ibm-OP9_v1.18_1.11</msg>
<status status="PASS" endtime="20170812 14:22:59.962" starttime="20170812 14:22:59.956"></status>
</kw>
<kw name="Get Binary File" library="OperatingSystem">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${IMAGE_FILE_PATH}</arg>
</arguments>
<assign>
<var>${image_data}</var>
</assign>
<msg timestamp="20170812 14:22:59.962" html="yes" level="INFO">Getting file '&lt;a href="file:///home/fspcibld/witherspoon_910_golden.pnor.squashfs.tar"&gt;/home/fspcibld/witherspoon_910_golden.pnor.squashfs.tar&lt;/a&gt;'.</msg>
<msg timestamp="20170812 14:23:11.827" level="INFO">${image_data} = MANIFEST0000664075750014206770000000060613141752257011561 0...</msg>
<status status="PASS" endtime="20170812 14:23:11.828" starttime="20170812 14:22:59.962"></status>
</kw>
<kw name="Upload Image To BMC" library="rest_client">
<arguments>
<arg>/upload/image</arg>
<arg>data=${image_data}</arg>
</arguments>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170812 14:23:11.835" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170812 14:23:11.836" starttime="20170812 14:23:11.835"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170812 14:23:11.837" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170812 14:23:11.837" starttime="20170812 14:23:11.836"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170812 14:23:11.837" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170812 14:23:11.837" starttime="20170812 14:23:11.837"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170812 14:23:11.838" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170812 14:23:11.838" starttime="20170812 14:23:11.838"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170812 14:23:12.014" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170812 14:23:12.015" starttime="20170812 14:23:11.839"></status>
</kw>
<msg timestamp="20170812 14:23:12.015" level="INFO">${status} = PASS</msg>
<msg timestamp="20170812 14:23:12.015" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170812 14:23:12.015" starttime="20170812 14:23:11.838"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170812 14:23:12.015" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170812 14:23:12.016" starttime="20170812 14:23:12.015"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170812 14:23:12.016" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170812 14:23:12.016" starttime="20170812 14:23:12.016"></status>
</kw>
<status status="PASS" endtime="20170812 14:23:12.016" starttime="20170812 14:23:11.834"></status>
</kw>
<status status="PASS" endtime="20170812 14:23:12.017" starttime="20170812 14:23:11.830"></status>
</kw>
<status status="PASS" endtime="20170812 14:23:12.017" starttime="20170812 14:23:11.829"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170812 14:23:12.017" level="INFO">${base_uri} = /upload/image</msg>
<status status="PASS" endtime="20170812 14:23:12.018" starttime="20170812 14:23:12.017"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/octet-stream</arg>
<arg>Accept=application/octet-stream</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170812 14:23:12.018" level="INFO">${headers} = {u'Content-Type': u'application/octet-stream', u'Accept': u'application/octet-stream'}</msg>
<status status="PASS" endtime="20170812 14:23:12.018" starttime="20170812 14:23:12.018"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20170812 14:23:12.019" starttime="20170812 14:23:12.018"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170812 14:23:12.019" starttime="20170812 14:23:12.019"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170812 14:23:19.240" level="INFO">Post Request using : alias=openbmc, uri=/upload/image, data=&lt;application/octet-stream&gt;, headers={u'Content-Type': u'application/octet-stream', u'Accept': u'application/octet-stream'}, files=None, allow_redirects=True </msg>
<msg timestamp="20170812 14:23:19.241" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170812 14:23:19.241" starttime="20170812 14:23:12.020"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170812 14:23:19.242" starttime="20170812 14:23:19.241"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${ret.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170812 14:23:19.242" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170812 14:23:19.242" starttime="20170812 14:23:19.242"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170812 14:23:19.243" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170812 14:23:19.243" starttime="20170812 14:23:19.242"></status>
</kw>
<status status="PASS" endtime="20170812 14:23:19.243" starttime="20170812 14:23:11.828"></status>
</kw>
<kw name="Verify Image Upload" library="test_uploadimage">
<doc>Verify the image was uploaded correctly and that it created</doc>
<assign>
<var>${ret}</var>
</assign>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170812 14:23:19.249" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170812 14:23:19.249" starttime="20170812 14:23:19.249"></status>
</kw>
<msg timestamp="20170812 14:23:19.249" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170812 14:23:19.249" starttime="20170812 14:23:19.248"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170812 14:23:19.250" starttime="20170812 14:23:19.250"></status>
</kw>
<status status="PASS" endtime="20170812 14:23:19.250" starttime="20170812 14:23:19.249"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170812 14:23:19.251" starttime="20170812 14:23:19.251"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170812 14:23:19.252" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170812 14:23:19.252" starttime="20170812 14:23:19.252"></status>
</kw>
<msg timestamp="20170812 14:23:19.252" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170812 14:23:19.252" starttime="20170812 14:23:19.251"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170812 14:23:19.256" starttime="20170812 14:23:19.255"></status>
</kw>
<status status="PASS" endtime="20170812 14:23:19.256" starttime="20170812 14:23:19.253"></status>
</kw>
<status status="PASS" endtime="20170812 14:23:19.256" starttime="20170812 14:23:19.253"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170812 14:23:19.257" level="INFO">Logging into '9.41.166.169:22' as 'root'.</msg>
<msg timestamp="20170812 14:23:21.464" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170812 14:23:21.465" starttime="20170812 14:23:19.256"></status>
</kw>
<status status="PASS" endtime="20170812 14:23:21.465" starttime="20170812 14:23:19.247"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>ls -d /tmp/images/*/</arg>
</arguments>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170812 14:23:21.481" level="INFO">Executing command 'ls -d /tmp/images/*/'.</msg>
<msg timestamp="20170812 14:23:21.548" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170812 14:23:21.548" level="INFO">${stdout} = /tmp/images/2b6dcac8/</msg>
<msg timestamp="20170812 14:23:21.548" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170812 14:23:21.548" starttime="20170812 14:23:21.480"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170812 14:23:21.548" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170812 14:23:21.549" starttime="20170812 14:23:21.548"></status>
</kw>
<status status="PASS" endtime="20170812 14:23:21.549" starttime="20170812 14:23:21.480"></status>
</kw>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170812 14:23:21.554" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170812 14:23:21.554" starttime="20170812 14:23:21.553"></status>
</kw>
<msg timestamp="20170812 14:23:21.554" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170812 14:23:21.554" starttime="20170812 14:23:21.553"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170812 14:23:21.555" starttime="20170812 14:23:21.555"></status>
</kw>
<status status="PASS" endtime="20170812 14:23:21.555" starttime="20170812 14:23:21.554"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170812 14:23:21.556" starttime="20170812 14:23:21.555"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170812 14:23:21.557" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170812 14:23:21.557" starttime="20170812 14:23:21.557"></status>
</kw>
<msg timestamp="20170812 14:23:21.557" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170812 14:23:21.557" starttime="20170812 14:23:21.556"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170812 14:23:21.559" starttime="20170812 14:23:21.559"></status>
</kw>
<status status="PASS" endtime="20170812 14:23:21.559" starttime="20170812 14:23:21.558"></status>
</kw>
<status status="PASS" endtime="20170812 14:23:21.559" starttime="20170812 14:23:21.558"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170812 14:23:21.560" level="INFO">Logging into '9.41.166.169:22' as 'root'.</msg>
<msg timestamp="20170812 14:23:23.268" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170812 14:23:23.268" starttime="20170812 14:23:21.559"></status>
</kw>
<status status="PASS" endtime="20170812 14:23:23.269" starttime="20170812 14:23:21.552"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>cat /tmp/images/2b6dcac8/MANIFEST | grep "version="</arg>
</arguments>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170812 14:23:23.284" level="INFO">Executing command 'cat /tmp/images/2b6dcac8/MANIFEST | grep "version="'.</msg>
<msg timestamp="20170812 14:23:23.362" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170812 14:23:23.362" level="INFO">${stdout} = version=IBM-witherspoon-sequoia-ibm-OP9_v1.18_1.11
extended_version=op-build-v1.18-35-g04a11fe,buildroot-2017.05-163-g8035745,skiboot-07937c7,hostboot-faac61e,linux-4.12.3-openpower1-p593bf1b,petitboo...</msg>
<msg timestamp="20170812 14:23:23.362" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170812 14:23:23.362" starttime="20170812 14:23:23.284"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170812 14:23:23.363" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170812 14:23:23.363" starttime="20170812 14:23:23.363"></status>
</kw>
<status status="PASS" endtime="20170812 14:23:23.363" starttime="20170812 14:23:23.283"></status>
</kw>
<msg timestamp="20170812 14:23:23.363" level="INFO">${version_id} = 2b6dcac8</msg>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170812 14:23:23.368" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170812 14:23:23.368" starttime="20170812 14:23:23.368"></status>
</kw>
<msg timestamp="20170812 14:23:23.368" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170812 14:23:23.368" starttime="20170812 14:23:23.367"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170812 14:23:23.370" starttime="20170812 14:23:23.370"></status>
</kw>
<status status="PASS" endtime="20170812 14:23:23.370" starttime="20170812 14:23:23.369"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170812 14:23:23.371" starttime="20170812 14:23:23.370"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170812 14:23:23.372" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170812 14:23:23.372" starttime="20170812 14:23:23.371"></status>
</kw>
<msg timestamp="20170812 14:23:23.372" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170812 14:23:23.372" starttime="20170812 14:23:23.371"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170812 14:23:23.374" starttime="20170812 14:23:23.374"></status>
</kw>
<status status="PASS" endtime="20170812 14:23:23.374" starttime="20170812 14:23:23.373"></status>
</kw>
<status status="PASS" endtime="20170812 14:23:23.374" starttime="20170812 14:23:23.372"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170812 14:23:23.375" level="INFO">Logging into '9.41.166.169:22' as 'root'.</msg>
<msg timestamp="20170812 14:23:25.083" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170812 14:23:25.083" starttime="20170812 14:23:23.374"></status>
</kw>
<status status="PASS" endtime="20170812 14:23:25.084" starttime="20170812 14:23:23.367"></status>
</kw>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170812 14:23:25.088" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170812 14:23:25.089" starttime="20170812 14:23:25.088"></status>
</kw>
<msg timestamp="20170812 14:23:25.089" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170812 14:23:25.089" starttime="20170812 14:23:25.088"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170812 14:23:25.090" starttime="20170812 14:23:25.089"></status>
</kw>
<status status="PASS" endtime="20170812 14:23:25.090" starttime="20170812 14:23:25.089"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170812 14:23:25.091" starttime="20170812 14:23:25.090"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170812 14:23:25.092" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170812 14:23:25.092" starttime="20170812 14:23:25.091"></status>
</kw>
<msg timestamp="20170812 14:23:25.092" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170812 14:23:25.092" starttime="20170812 14:23:25.091"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170812 14:23:25.094" starttime="20170812 14:23:25.093"></status>
</kw>
<status status="PASS" endtime="20170812 14:23:25.094" starttime="20170812 14:23:25.093"></status>
</kw>
<status status="PASS" endtime="20170812 14:23:25.094" starttime="20170812 14:23:25.092"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170812 14:23:25.094" level="INFO">Logging into '9.41.166.169:22' as 'root'.</msg>
<msg timestamp="20170812 14:23:26.836" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170812 14:23:26.836" starttime="20170812 14:23:25.094"></status>
</kw>
<status status="PASS" endtime="20170812 14:23:26.836" starttime="20170812 14:23:25.087"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>cat /tmp/images/2b6dcac8/MANIFEST | grep "purpose="</arg>
</arguments>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170812 14:23:26.852" level="INFO">Executing command 'cat /tmp/images/2b6dcac8/MANIFEST | grep "purpose="'.</msg>
<msg timestamp="20170812 14:23:26.928" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170812 14:23:26.929" level="INFO">${stdout} = purpose=xyz.openbmc_project.Software.Version.VersionPurpose.Host</msg>
<msg timestamp="20170812 14:23:26.929" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170812 14:23:26.929" starttime="20170812 14:23:26.852"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170812 14:23:26.929" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170812 14:23:26.929" starttime="20170812 14:23:26.929"></status>
</kw>
<status status="PASS" endtime="20170812 14:23:26.929" starttime="20170812 14:23:26.851"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>/xyz/openbmc_project/software/2b6dcac8</arg>
<arg>Activation</arg>
</arguments>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170812 14:23:26.947" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170812 14:23:26.947" starttime="20170812 14:23:26.947"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170812 14:23:26.948" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170812 14:23:26.948" starttime="20170812 14:23:26.948"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170812 14:23:26.949" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170812 14:23:26.949" starttime="20170812 14:23:26.948"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170812 14:23:26.949" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170812 14:23:26.950" starttime="20170812 14:23:26.949"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170812 14:23:27.179" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170812 14:23:27.179" starttime="20170812 14:23:26.950"></status>
</kw>
<msg timestamp="20170812 14:23:27.179" level="INFO">${status} = PASS</msg>
<msg timestamp="20170812 14:23:27.179" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170812 14:23:27.179" starttime="20170812 14:23:26.950"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170812 14:23:27.180" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170812 14:23:27.180" starttime="20170812 14:23:27.179"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170812 14:23:27.180" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170812 14:23:27.180" starttime="20170812 14:23:27.180"></status>
</kw>
<status status="PASS" endtime="20170812 14:23:27.181" starttime="20170812 14:23:26.946"></status>
</kw>
<status status="PASS" endtime="20170812 14:23:27.181" starttime="20170812 14:23:26.946"></status>
</kw>
<status status="PASS" endtime="20170812 14:23:27.181" starttime="20170812 14:23:26.945"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170812 14:23:27.181" level="INFO">${base_uri} = /xyz/openbmc_project/software/2b6dcac8/attr/Activation</msg>
<status status="PASS" endtime="20170812 14:23:27.181" starttime="20170812 14:23:27.181"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170812 14:23:27.182" starttime="20170812 14:23:27.182"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170812 14:23:27.306" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/2b6dcac8/attr/Activation, headers=None json=None</msg>
<msg timestamp="20170812 14:23:27.306" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170812 14:23:27.306" starttime="20170812 14:23:27.182"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170812 14:23:27.307" starttime="20170812 14:23:27.306"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170812 14:23:27.307" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170812 14:23:27.307" starttime="20170812 14:23:27.307"></status>
</kw>
<msg timestamp="20170812 14:23:27.307" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170812 14:23:27.307" starttime="20170812 14:23:26.944"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170812 14:23:27.308" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170812 14:23:27.308" starttime="20170812 14:23:27.308"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170812 14:23:27.309" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.Software.Activation.Activations.Ready", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170812 14:23:27.309" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170812 14:23:27.309" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.Software.Activation.Activations.Ready'}</msg>
<status status="PASS" endtime="20170812 14:23:27.309" starttime="20170812 14:23:27.308"></status>
</kw>
<status status="PASS" endtime="20170812 14:23:27.309" starttime="20170812 14:23:26.944"></status>
</kw>
<msg timestamp="20170812 14:23:27.309" level="INFO">${ret} = True</msg>
<status status="PASS" endtime="20170812 14:23:27.309" starttime="20170812 14:23:19.243"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170812 14:23:27.310" starttime="20170812 14:23:27.309"></status>
</kw>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${SOFTWARE_VERSION_URI}${version_id}</arg>
</arguments>
<assign>
<var>${software_state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170812 14:23:27.317" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170812 14:23:27.318" starttime="20170812 14:23:27.317"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170812 14:23:27.318" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170812 14:23:27.318" starttime="20170812 14:23:27.318"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170812 14:23:27.319" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170812 14:23:27.319" starttime="20170812 14:23:27.319"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170812 14:23:27.320" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170812 14:23:27.320" starttime="20170812 14:23:27.319"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170812 14:23:27.497" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170812 14:23:27.497" starttime="20170812 14:23:27.320"></status>
</kw>
<msg timestamp="20170812 14:23:27.498" level="INFO">${status} = PASS</msg>
<msg timestamp="20170812 14:23:27.498" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170812 14:23:27.498" starttime="20170812 14:23:27.320"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170812 14:23:27.498" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170812 14:23:27.498" starttime="20170812 14:23:27.498"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170812 14:23:27.499" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170812 14:23:27.499" starttime="20170812 14:23:27.499"></status>
</kw>
<status status="PASS" endtime="20170812 14:23:27.499" starttime="20170812 14:23:27.316"></status>
</kw>
<status status="PASS" endtime="20170812 14:23:27.499" starttime="20170812 14:23:27.316"></status>
</kw>
<status status="PASS" endtime="20170812 14:23:27.499" starttime="20170812 14:23:27.315"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170812 14:23:27.500" level="INFO">${base_uri} = /xyz/openbmc_project/software/2b6dcac8</msg>
<status status="PASS" endtime="20170812 14:23:27.500" starttime="20170812 14:23:27.500"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170812 14:23:27.501" starttime="20170812 14:23:27.500"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170812 14:23:27.631" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/2b6dcac8, headers=None json=None</msg>
<msg timestamp="20170812 14:23:27.631" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170812 14:23:27.631" starttime="20170812 14:23:27.501"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170812 14:23:27.632" starttime="20170812 14:23:27.632"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170812 14:23:27.632" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170812 14:23:27.633" starttime="20170812 14:23:27.632"></status>
</kw>
<msg timestamp="20170812 14:23:27.633" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170812 14:23:27.633" starttime="20170812 14:23:27.315"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170812 14:23:27.633" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170812 14:23:27.633" starttime="20170812 14:23:27.633"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170812 14:23:27.634" level="INFO">To JSON using : content={
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Ready", 
    "ExtendedVersion": "op-build-v1.18-35-g04a11fe,buildroot-2017.05-163-g8035745,skiboot-07937c7,hostboot-faac61e,linux-4.12.3-openpower1-p593bf1b,petitboot-v1.5.1-p1b1d3ef,machine-xml-5575e7e-p28bf2dc,occ-d650501,hostboot-binaries-883d218,capp-ucode-9c73e9f,sbe-02021c6-pea3c159", 
    "Path": "/tmp/images/2b6dcac8", 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.Host", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.None", 
    "Version": "IBM-witherspoon-sequoia-ibm-OP9_v1.18_1.11"
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170812 14:23:27.634" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170812 14:23:27.634" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'Activation': u'xyz.openbmc_project.Software.Activation.Activations.Ready', u'Version': u'IBM-witherspoon-sequoia-ibm-OP9_v1.18_1.11', u'Purpose': ...</msg>
<status status="PASS" endtime="20170812 14:23:27.634" starttime="20170812 14:23:27.634"></status>
</kw>
<msg timestamp="20170812 14:23:27.635" level="INFO">${software_state} = {u'Activation': u'xyz.openbmc_project.Software.Activation.Activations.Ready', u'Version': u'IBM-witherspoon-sequoia-ibm-OP9_v1.18_1.11', u'Purpose': u'xyz.openbmc_project.Software.Version.VersionPurpo...</msg>
<status status="PASS" endtime="20170812 14:23:27.635" starttime="20170812 14:23:27.310"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>&amp;{software_state}[Activation]</arg>
<arg>${READY}</arg>
</arguments>
<msg timestamp="20170812 14:23:27.635" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20170812 14:23:27.635" starttime="20170812 14:23:27.635"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${REQUESTED_ACTIVE}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20170812 14:23:27.636" level="INFO">${args} = {u'data': 'xyz.openbmc_project.Software.Activation.RequestedActivations.Active'}</msg>
<status status="PASS" endtime="20170812 14:23:27.636" starttime="20170812 14:23:27.636"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${SOFTWARE_VERSION_URI}${version_id}</arg>
<arg>RequestedActivation</arg>
<arg>data=${args}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170812 14:23:27.638" level="INFO">${base_uri} = /xyz/openbmc_project/software/2b6dcac8</msg>
<status status="PASS" endtime="20170812 14:23:27.638" starttime="20170812 14:23:27.637"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170812 14:23:27.641" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170812 14:23:27.641" starttime="20170812 14:23:27.640"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170812 14:23:27.642" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170812 14:23:27.642" starttime="20170812 14:23:27.641"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170812 14:23:27.642" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170812 14:23:27.642" starttime="20170812 14:23:27.642"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170812 14:23:27.643" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170812 14:23:27.643" starttime="20170812 14:23:27.643"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170812 14:23:27.865" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170812 14:23:27.865" starttime="20170812 14:23:27.644"></status>
</kw>
<msg timestamp="20170812 14:23:27.865" level="INFO">${status} = PASS</msg>
<msg timestamp="20170812 14:23:27.865" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170812 14:23:27.865" starttime="20170812 14:23:27.643"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170812 14:23:27.866" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170812 14:23:27.866" starttime="20170812 14:23:27.865"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170812 14:23:27.866" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170812 14:23:27.866" starttime="20170812 14:23:27.866"></status>
</kw>
<status status="PASS" endtime="20170812 14:23:27.867" starttime="20170812 14:23:27.640"></status>
</kw>
<status status="PASS" endtime="20170812 14:23:27.867" starttime="20170812 14:23:27.639"></status>
</kw>
<status status="PASS" endtime="20170812 14:23:27.867" starttime="20170812 14:23:27.639"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170812 14:23:27.867" level="INFO">${base_uri} = /xyz/openbmc_project/software/2b6dcac8/attr/RequestedActivation</msg>
<status status="PASS" endtime="20170812 14:23:27.867" starttime="20170812 14:23:27.867"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170812 14:23:27.868" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170812 14:23:27.868" starttime="20170812 14:23:27.868"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20170812 14:23:27.869" starttime="20170812 14:23:27.868"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170812 14:23:27.870" level="INFO">${msg} = URI:https://9.41.166.169/xyz/openbmc_project/software/2b6dcac8/attr/RequestedActivation, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.Software.Activation.RequestedActivations.Active'}, u'...</msg>
<status status="PASS" endtime="20170812 14:23:27.870" starttime="20170812 14:23:27.870"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170812 14:23:27.871" level="INFO">URI:https://9.41.166.169/xyz/openbmc_project/software/2b6dcac8/attr/RequestedActivation, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.Software.Activation.RequestedActivations.Active'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20170812 14:23:27.871" starttime="20170812 14:23:27.871"></status>
</kw>
<status status="PASS" endtime="20170812 14:23:27.871" starttime="20170812 14:23:27.870"></status>
</kw>
<status status="PASS" endtime="20170812 14:23:27.872" starttime="20170812 14:23:27.869"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170812 14:23:28.416" level="INFO">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/software/2b6dcac8/attr/RequestedActivation, data={"data": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg timestamp="20170812 14:23:28.416" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170812 14:23:28.416" starttime="20170812 14:23:27.873"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170812 14:23:28.417" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170812 14:23:28.417" starttime="20170812 14:23:28.417"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170812 14:23:28.418" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170812 14:23:28.418" starttime="20170812 14:23:28.418"></status>
</kw>
<status status="PASS" endtime="20170812 14:23:28.419" starttime="20170812 14:23:28.418"></status>
</kw>
<status status="PASS" endtime="20170812 14:23:28.419" starttime="20170812 14:23:28.416"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170812 14:23:28.419" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170812 14:23:28.419" starttime="20170812 14:23:28.419"></status>
</kw>
<msg timestamp="20170812 14:23:28.420" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170812 14:23:28.420" starttime="20170812 14:23:27.638"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170812 14:23:28.421" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170812 14:23:28.421" starttime="20170812 14:23:28.420"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20170812 14:23:28.422" level="INFO">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170812 14:23:28.422" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170812 14:23:28.422" level="INFO">${json} = {u'status': u'ok', u'message': u'200 OK', u'data': None}</msg>
<status status="PASS" endtime="20170812 14:23:28.422" starttime="20170812 14:23:28.421"></status>
</kw>
<status status="PASS" endtime="20170812 14:23:28.422" starttime="20170812 14:23:27.637"></status>
</kw>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${SOFTWARE_VERSION_URI}${version_id}</arg>
</arguments>
<assign>
<var>${software_state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170812 14:23:28.427" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170812 14:23:28.428" starttime="20170812 14:23:28.427"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170812 14:23:28.429" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170812 14:23:28.429" starttime="20170812 14:23:28.428"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170812 14:23:28.429" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170812 14:23:28.429" starttime="20170812 14:23:28.429"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170812 14:23:28.430" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170812 14:23:28.430" starttime="20170812 14:23:28.430"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170812 14:23:28.962" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170812 14:23:28.962" starttime="20170812 14:23:28.431"></status>
</kw>
<msg timestamp="20170812 14:23:28.962" level="INFO">${status} = PASS</msg>
<msg timestamp="20170812 14:23:28.963" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170812 14:23:28.963" starttime="20170812 14:23:28.430"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170812 14:23:28.963" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170812 14:23:28.963" starttime="20170812 14:23:28.963"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170812 14:23:28.964" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170812 14:23:28.964" starttime="20170812 14:23:28.964"></status>
</kw>
<status status="PASS" endtime="20170812 14:23:28.964" starttime="20170812 14:23:28.425"></status>
</kw>
<status status="PASS" endtime="20170812 14:23:28.964" starttime="20170812 14:23:28.425"></status>
</kw>
<status status="PASS" endtime="20170812 14:23:28.964" starttime="20170812 14:23:28.424"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170812 14:23:28.965" level="INFO">${base_uri} = /xyz/openbmc_project/software/2b6dcac8</msg>
<status status="PASS" endtime="20170812 14:23:28.965" starttime="20170812 14:23:28.965"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170812 14:23:28.966" starttime="20170812 14:23:28.965"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170812 14:23:29.239" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/2b6dcac8, headers=None json=None</msg>
<msg timestamp="20170812 14:23:29.239" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170812 14:23:29.239" starttime="20170812 14:23:28.966"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170812 14:23:29.240" starttime="20170812 14:23:29.240"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170812 14:23:29.240" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170812 14:23:29.241" starttime="20170812 14:23:29.240"></status>
</kw>
<msg timestamp="20170812 14:23:29.241" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170812 14:23:29.241" starttime="20170812 14:23:28.423"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170812 14:23:29.241" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170812 14:23:29.241" starttime="20170812 14:23:29.241"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170812 14:23:29.242" level="INFO">To JSON using : content={
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "ExtendedVersion": "op-build-v1.18-35-g04a11fe,buildroot-2017.05-163-g8035745,skiboot-07937c7,hostboot-faac61e,linux-4.12.3-openpower1-p593bf1b,petitboot-v1.5.1-p1b1d3ef,machine-xml-5575e7e-p28bf2dc,occ-d650501,hostboot-binaries-883d218,capp-ucode-9c73e9f,sbe-02021c6-pea3c159", 
    "Path": "/tmp/images/2b6dcac8", 
    "Progress": 10, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.Host", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "IBM-witherspoon-sequoia-ibm-OP9_v1.18_1.11"
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170812 14:23:29.242" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170812 14:23:29.242" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'Activation': u'xyz.openbmc_project.Software.Activation.Activations.Activating', u'Version': u'IBM-witherspoon-sequoia-ibm-OP9_v1.18_1.11', u'Purpo...</msg>
<status status="PASS" endtime="20170812 14:23:29.242" starttime="20170812 14:23:29.242"></status>
</kw>
<msg timestamp="20170812 14:23:29.243" level="INFO">${software_state} = {u'Activation': u'xyz.openbmc_project.Software.Activation.Activations.Activating', u'Version': u'IBM-witherspoon-sequoia-ibm-OP9_v1.18_1.11', u'Purpose': u'xyz.openbmc_project.Software.Version.Version...</msg>
<status status="PASS" endtime="20170812 14:23:29.243" starttime="20170812 14:23:28.422"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>&amp;{software_state}[RequestedActivation]</arg>
<arg>${REQUESTED_ACTIVE}</arg>
</arguments>
<msg timestamp="20170812 14:23:29.245" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20170812 14:23:29.245" starttime="20170812 14:23:29.243"></status>
</kw>
<kw name="Wait For Activation State Change" library="code_update">
<doc>Wait for the current activation state of ${version_id} to</doc>
<arguments>
<arg>${version_id}</arg>
<arg>${ACTIVATING}</arg>
</arguments>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170812 14:23:29.251" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170812 14:23:29.251" starttime="20170812 14:23:29.250"></status>
</kw>
<msg timestamp="20170812 14:23:29.251" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170812 14:23:29.251" starttime="20170812 14:23:29.250"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170812 14:23:29.252" starttime="20170812 14:23:29.252"></status>
</kw>
<status status="PASS" endtime="20170812 14:23:29.252" starttime="20170812 14:23:29.251"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170812 14:23:29.253" starttime="20170812 14:23:29.253"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170812 14:23:29.254" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170812 14:23:29.254" starttime="20170812 14:23:29.254"></status>
</kw>
<msg timestamp="20170812 14:23:29.254" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170812 14:23:29.254" starttime="20170812 14:23:29.253"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170812 14:23:29.257" starttime="20170812 14:23:29.256"></status>
</kw>
<status status="PASS" endtime="20170812 14:23:29.257" starttime="20170812 14:23:29.256"></status>
</kw>
<status status="PASS" endtime="20170812 14:23:29.257" starttime="20170812 14:23:29.255"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170812 14:23:29.257" level="INFO">Logging into '9.41.166.169:22' as 'root'.</msg>
<msg timestamp="20170812 14:23:31.581" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170812 14:23:31.582" starttime="20170812 14:23:29.257"></status>
</kw>
<status status="PASS" endtime="20170812 14:23:31.582" starttime="20170812 14:23:29.249"></status>
</kw>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>/xyz/openbmc_project/software/2b6dcac8</arg>
</arguments>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170812 14:23:31.606" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170812 14:23:31.607" starttime="20170812 14:23:31.606"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170812 14:23:31.608" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170812 14:23:31.608" starttime="20170812 14:23:31.607"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170812 14:23:31.609" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170812 14:23:31.609" starttime="20170812 14:23:31.608"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170812 14:23:31.610" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170812 14:23:31.610" starttime="20170812 14:23:31.609"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170812 14:23:32.040" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170812 14:23:32.040" starttime="20170812 14:23:31.611"></status>
</kw>
<msg timestamp="20170812 14:23:32.040" level="INFO">${status} = PASS</msg>
<msg timestamp="20170812 14:23:32.040" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170812 14:23:32.041" starttime="20170812 14:23:31.610"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170812 14:23:32.041" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170812 14:23:32.041" starttime="20170812 14:23:32.041"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170812 14:23:32.042" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170812 14:23:32.042" starttime="20170812 14:23:32.042"></status>
</kw>
<status status="PASS" endtime="20170812 14:23:32.042" starttime="20170812 14:23:31.605"></status>
</kw>
<status status="PASS" endtime="20170812 14:23:32.042" starttime="20170812 14:23:31.604"></status>
</kw>
<status status="PASS" endtime="20170812 14:23:32.042" starttime="20170812 14:23:31.603"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170812 14:23:32.043" level="INFO">${base_uri} = /xyz/openbmc_project/software/2b6dcac8</msg>
<status status="PASS" endtime="20170812 14:23:32.043" starttime="20170812 14:23:32.043"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170812 14:23:32.044" starttime="20170812 14:23:32.043"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170812 14:23:32.183" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/2b6dcac8, headers=None json=None</msg>
<msg timestamp="20170812 14:23:32.184" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170812 14:23:32.184" starttime="20170812 14:23:32.044"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170812 14:23:32.184" starttime="20170812 14:23:32.184"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170812 14:23:32.185" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170812 14:23:32.185" starttime="20170812 14:23:32.185"></status>
</kw>
<msg timestamp="20170812 14:23:32.185" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170812 14:23:32.185" starttime="20170812 14:23:31.602"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170812 14:23:32.186" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170812 14:23:32.186" starttime="20170812 14:23:32.185"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170812 14:23:32.186" level="INFO">To JSON using : content={
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "ExtendedVersion": "op-build-v1.18-35-g04a11fe,buildroot-2017.05-163-g8035745,skiboot-07937c7,hostboot-faac61e,linux-4.12.3-openpower1-p593bf1b,petitboot-v1.5.1-p1b1d3ef,machine-xml-5575e7e-p28bf2dc,occ-d650501,hostboot-binaries-883d218,capp-ucode-9c73e9f,sbe-02021c6-pea3c159", 
    "Path": "/tmp/images/2b6dcac8", 
    "Progress": 10, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.Host", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "IBM-witherspoon-sequoia-ibm-OP9_v1.18_1.11"
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170812 14:23:32.187" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170812 14:23:32.187" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'Activation': u'xyz.openbmc_project.Software.Activation.Activations.Activating', u'Version': u'IBM-witherspoon-sequoia-ibm-OP9_v1.18_1.11', u'Purpo...</msg>
<status status="PASS" endtime="20170812 14:23:32.187" starttime="20170812 14:23:32.186"></status>
</kw>
<status status="PASS" endtime="20170812 14:23:32.187" starttime="20170812 14:23:31.602"></status>
</kw>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>/xyz/openbmc_project/software/2b6dcac8</arg>
</arguments>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170812 14:24:32.233" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170812 14:24:32.233" starttime="20170812 14:24:32.232"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170812 14:24:32.234" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170812 14:24:32.234" starttime="20170812 14:24:32.233"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170812 14:24:32.234" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170812 14:24:32.234" starttime="20170812 14:24:32.234"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170812 14:24:32.235" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170812 14:24:32.235" starttime="20170812 14:24:32.235"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170812 14:24:32.440" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170812 14:24:32.441" starttime="20170812 14:24:32.236"></status>
</kw>
<msg timestamp="20170812 14:24:32.441" level="INFO">${status} = PASS</msg>
<msg timestamp="20170812 14:24:32.441" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170812 14:24:32.441" starttime="20170812 14:24:32.235"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170812 14:24:32.442" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170812 14:24:32.442" starttime="20170812 14:24:32.441"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170812 14:24:32.443" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170812 14:24:32.443" starttime="20170812 14:24:32.442"></status>
</kw>
<status status="PASS" endtime="20170812 14:24:32.443" starttime="20170812 14:24:32.232"></status>
</kw>
<status status="PASS" endtime="20170812 14:24:32.443" starttime="20170812 14:24:32.231"></status>
</kw>
<status status="PASS" endtime="20170812 14:24:32.443" starttime="20170812 14:24:32.231"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170812 14:24:32.444" level="INFO">${base_uri} = /xyz/openbmc_project/software/2b6dcac8</msg>
<status status="PASS" endtime="20170812 14:24:32.444" starttime="20170812 14:24:32.444"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170812 14:24:32.446" starttime="20170812 14:24:32.445"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170812 14:24:32.586" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/2b6dcac8, headers=None json=None</msg>
<msg timestamp="20170812 14:24:32.586" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170812 14:24:32.587" starttime="20170812 14:24:32.446"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170812 14:24:32.587" starttime="20170812 14:24:32.587"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170812 14:24:32.588" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170812 14:24:32.588" starttime="20170812 14:24:32.588"></status>
</kw>
<msg timestamp="20170812 14:24:32.588" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170812 14:24:32.588" starttime="20170812 14:24:32.230"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170812 14:24:32.589" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170812 14:24:32.589" starttime="20170812 14:24:32.588"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170812 14:24:32.589" level="INFO">To JSON using : content={
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "ExtendedVersion": "op-build-v1.18-35-g04a11fe,buildroot-2017.05-163-g8035745,skiboot-07937c7,hostboot-faac61e,linux-4.12.3-openpower1-p593bf1b,petitboot-v1.5.1-p1b1d3ef,machine-xml-5575e7e-p28bf2dc,occ-d650501,hostboot-binaries-883d218,capp-ucode-9c73e9f,sbe-02021c6-pea3c159", 
    "Path": "/tmp/images/2b6dcac8", 
    "Progress": 10, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.Host", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "IBM-witherspoon-sequoia-ibm-OP9_v1.18_1.11"
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170812 14:24:32.589" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170812 14:24:32.589" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'Activation': u'xyz.openbmc_project.Software.Activation.Activations.Activating', u'Version': u'IBM-witherspoon-sequoia-ibm-OP9_v1.18_1.11', u'Purpo...</msg>
<status status="PASS" endtime="20170812 14:24:32.590" starttime="20170812 14:24:32.589"></status>
</kw>
<status status="PASS" endtime="20170812 14:24:32.590" starttime="20170812 14:24:32.229"></status>
</kw>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>/xyz/openbmc_project/software/2b6dcac8</arg>
</arguments>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170812 14:25:32.671" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170812 14:25:32.671" starttime="20170812 14:25:32.671"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170812 14:25:32.672" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170812 14:25:32.672" starttime="20170812 14:25:32.672"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170812 14:25:32.673" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170812 14:25:32.673" starttime="20170812 14:25:32.672"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170812 14:25:32.673" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170812 14:25:32.673" starttime="20170812 14:25:32.673"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170812 14:25:32.859" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170812 14:25:32.859" starttime="20170812 14:25:32.674"></status>
</kw>
<msg timestamp="20170812 14:25:32.859" level="INFO">${status} = PASS</msg>
<msg timestamp="20170812 14:25:32.859" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170812 14:25:32.859" starttime="20170812 14:25:32.674"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170812 14:25:32.860" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170812 14:25:32.860" starttime="20170812 14:25:32.860"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170812 14:25:32.861" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170812 14:25:32.861" starttime="20170812 14:25:32.861"></status>
</kw>
<status status="PASS" endtime="20170812 14:25:32.861" starttime="20170812 14:25:32.670"></status>
</kw>
<status status="PASS" endtime="20170812 14:25:32.861" starttime="20170812 14:25:32.670"></status>
</kw>
<status status="PASS" endtime="20170812 14:25:32.862" starttime="20170812 14:25:32.669"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170812 14:25:32.862" level="INFO">${base_uri} = /xyz/openbmc_project/software/2b6dcac8</msg>
<status status="PASS" endtime="20170812 14:25:32.862" starttime="20170812 14:25:32.862"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170812 14:25:32.863" starttime="20170812 14:25:32.862"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170812 14:25:33.005" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/2b6dcac8, headers=None json=None</msg>
<msg timestamp="20170812 14:25:33.005" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170812 14:25:33.005" starttime="20170812 14:25:32.863"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170812 14:25:33.006" starttime="20170812 14:25:33.006"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170812 14:25:33.006" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170812 14:25:33.006" starttime="20170812 14:25:33.006"></status>
</kw>
<msg timestamp="20170812 14:25:33.007" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170812 14:25:33.007" starttime="20170812 14:25:32.668"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170812 14:25:33.007" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170812 14:25:33.007" starttime="20170812 14:25:33.007"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170812 14:25:33.008" level="INFO">To JSON using : content={
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "ExtendedVersion": "op-build-v1.18-35-g04a11fe,buildroot-2017.05-163-g8035745,skiboot-07937c7,hostboot-faac61e,linux-4.12.3-openpower1-p593bf1b,petitboot-v1.5.1-p1b1d3ef,machine-xml-5575e7e-p28bf2dc,occ-d650501,hostboot-binaries-883d218,capp-ucode-9c73e9f,sbe-02021c6-pea3c159", 
    "Path": "/tmp/images/2b6dcac8", 
    "Progress": 10, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.Host", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "IBM-witherspoon-sequoia-ibm-OP9_v1.18_1.11"
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170812 14:25:33.008" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170812 14:25:33.008" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'Activation': u'xyz.openbmc_project.Software.Activation.Activations.Activating', u'Version': u'IBM-witherspoon-sequoia-ibm-OP9_v1.18_1.11', u'Purpo...</msg>
<status status="PASS" endtime="20170812 14:25:33.008" starttime="20170812 14:25:33.008"></status>
</kw>
<status status="PASS" endtime="20170812 14:25:33.008" starttime="20170812 14:25:32.667"></status>
</kw>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>/xyz/openbmc_project/software/2b6dcac8</arg>
</arguments>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170812 14:26:33.088" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170812 14:26:33.089" starttime="20170812 14:26:33.087"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170812 14:26:33.089" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170812 14:26:33.089" starttime="20170812 14:26:33.089"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170812 14:26:33.090" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170812 14:26:33.090" starttime="20170812 14:26:33.090"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170812 14:26:33.091" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170812 14:26:33.091" starttime="20170812 14:26:33.091"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170812 14:26:33.276" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170812 14:26:33.276" starttime="20170812 14:26:33.092"></status>
</kw>
<msg timestamp="20170812 14:26:33.276" level="INFO">${status} = PASS</msg>
<msg timestamp="20170812 14:26:33.276" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170812 14:26:33.277" starttime="20170812 14:26:33.092"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170812 14:26:33.277" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170812 14:26:33.277" starttime="20170812 14:26:33.277"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170812 14:26:33.278" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170812 14:26:33.278" starttime="20170812 14:26:33.278"></status>
</kw>
<status status="PASS" endtime="20170812 14:26:33.278" starttime="20170812 14:26:33.087"></status>
</kw>
<status status="PASS" endtime="20170812 14:26:33.278" starttime="20170812 14:26:33.086"></status>
</kw>
<status status="PASS" endtime="20170812 14:26:33.278" starttime="20170812 14:26:33.085"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170812 14:26:33.279" level="INFO">${base_uri} = /xyz/openbmc_project/software/2b6dcac8</msg>
<status status="PASS" endtime="20170812 14:26:33.279" starttime="20170812 14:26:33.279"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170812 14:26:33.280" starttime="20170812 14:26:33.279"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170812 14:26:33.422" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/2b6dcac8, headers=None json=None</msg>
<msg timestamp="20170812 14:26:33.422" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170812 14:26:33.422" starttime="20170812 14:26:33.280"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170812 14:26:33.423" starttime="20170812 14:26:33.423"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170812 14:26:33.424" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170812 14:26:33.424" starttime="20170812 14:26:33.424"></status>
</kw>
<msg timestamp="20170812 14:26:33.424" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170812 14:26:33.425" starttime="20170812 14:26:33.085"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170812 14:26:33.425" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170812 14:26:33.426" starttime="20170812 14:26:33.425"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170812 14:26:33.426" level="INFO">To JSON using : content={
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "ExtendedVersion": "op-build-v1.18-35-g04a11fe,buildroot-2017.05-163-g8035745,skiboot-07937c7,hostboot-faac61e,linux-4.12.3-openpower1-p593bf1b,petitboot-v1.5.1-p1b1d3ef,machine-xml-5575e7e-p28bf2dc,occ-d650501,hostboot-binaries-883d218,capp-ucode-9c73e9f,sbe-02021c6-pea3c159", 
    "Path": "/tmp/images/2b6dcac8", 
    "Progress": 10, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.Host", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "IBM-witherspoon-sequoia-ibm-OP9_v1.18_1.11"
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170812 14:26:33.426" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170812 14:26:33.427" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'Activation': u'xyz.openbmc_project.Software.Activation.Activations.Activating', u'Version': u'IBM-witherspoon-sequoia-ibm-OP9_v1.18_1.11', u'Purpo...</msg>
<status status="PASS" endtime="20170812 14:26:33.427" starttime="20170812 14:26:33.426"></status>
</kw>
<status status="PASS" endtime="20170812 14:26:33.427" starttime="20170812 14:26:33.084"></status>
</kw>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>/xyz/openbmc_project/software/2b6dcac8</arg>
</arguments>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170812 14:27:33.453" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170812 14:27:33.453" starttime="20170812 14:27:33.452"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170812 14:27:33.454" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170812 14:27:33.454" starttime="20170812 14:27:33.454"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170812 14:27:33.455" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170812 14:27:33.455" starttime="20170812 14:27:33.455"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170812 14:27:33.456" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170812 14:27:33.456" starttime="20170812 14:27:33.456"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170812 14:27:33.634" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170812 14:27:33.634" starttime="20170812 14:27:33.457"></status>
</kw>
<msg timestamp="20170812 14:27:33.635" level="INFO">${status} = PASS</msg>
<msg timestamp="20170812 14:27:33.635" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170812 14:27:33.635" starttime="20170812 14:27:33.456"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170812 14:27:33.635" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170812 14:27:33.635" starttime="20170812 14:27:33.635"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170812 14:27:33.636" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170812 14:27:33.636" starttime="20170812 14:27:33.636"></status>
</kw>
<status status="PASS" endtime="20170812 14:27:33.636" starttime="20170812 14:27:33.451"></status>
</kw>
<status status="PASS" endtime="20170812 14:27:33.636" starttime="20170812 14:27:33.451"></status>
</kw>
<status status="PASS" endtime="20170812 14:27:33.637" starttime="20170812 14:27:33.450"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170812 14:27:33.637" level="INFO">${base_uri} = /xyz/openbmc_project/software/2b6dcac8</msg>
<status status="PASS" endtime="20170812 14:27:33.637" starttime="20170812 14:27:33.637"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170812 14:27:33.638" starttime="20170812 14:27:33.638"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170812 14:27:33.780" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/2b6dcac8, headers=None json=None</msg>
<msg timestamp="20170812 14:27:33.780" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170812 14:27:33.780" starttime="20170812 14:27:33.639"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170812 14:27:33.781" starttime="20170812 14:27:33.780"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170812 14:27:33.781" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170812 14:27:33.781" starttime="20170812 14:27:33.781"></status>
</kw>
<msg timestamp="20170812 14:27:33.781" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170812 14:27:33.781" starttime="20170812 14:27:33.449"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170812 14:27:33.782" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170812 14:27:33.782" starttime="20170812 14:27:33.782"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170812 14:27:33.783" level="INFO">To JSON using : content={
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "ExtendedVersion": "op-build-v1.18-35-g04a11fe,buildroot-2017.05-163-g8035745,skiboot-07937c7,hostboot-faac61e,linux-4.12.3-openpower1-p593bf1b,petitboot-v1.5.1-p1b1d3ef,machine-xml-5575e7e-p28bf2dc,occ-d650501,hostboot-binaries-883d218,capp-ucode-9c73e9f,sbe-02021c6-pea3c159", 
    "Path": "/tmp/images/2b6dcac8", 
    "Progress": 10, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.Host", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "IBM-witherspoon-sequoia-ibm-OP9_v1.18_1.11"
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170812 14:27:33.783" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170812 14:27:33.783" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'Activation': u'xyz.openbmc_project.Software.Activation.Activations.Activating', u'Version': u'IBM-witherspoon-sequoia-ibm-OP9_v1.18_1.11', u'Purpo...</msg>
<status status="PASS" endtime="20170812 14:27:33.783" starttime="20170812 14:27:33.782"></status>
</kw>
<status status="PASS" endtime="20170812 14:27:33.783" starttime="20170812 14:27:33.448"></status>
</kw>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>/xyz/openbmc_project/software/2b6dcac8</arg>
</arguments>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170812 14:28:33.859" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170812 14:28:33.860" starttime="20170812 14:28:33.859"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170812 14:28:33.860" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170812 14:28:33.860" starttime="20170812 14:28:33.860"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170812 14:28:33.861" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170812 14:28:33.861" starttime="20170812 14:28:33.860"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170812 14:28:33.861" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170812 14:28:33.861" starttime="20170812 14:28:33.861"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170812 14:28:34.037" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170812 14:28:34.037" starttime="20170812 14:28:33.862"></status>
</kw>
<msg timestamp="20170812 14:28:34.037" level="INFO">${status} = PASS</msg>
<msg timestamp="20170812 14:28:34.037" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170812 14:28:34.038" starttime="20170812 14:28:33.862"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170812 14:28:34.038" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170812 14:28:34.038" starttime="20170812 14:28:34.038"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170812 14:28:34.039" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170812 14:28:34.039" starttime="20170812 14:28:34.038"></status>
</kw>
<status status="PASS" endtime="20170812 14:28:34.039" starttime="20170812 14:28:33.858"></status>
</kw>
<status status="PASS" endtime="20170812 14:28:34.039" starttime="20170812 14:28:33.857"></status>
</kw>
<status status="PASS" endtime="20170812 14:28:34.039" starttime="20170812 14:28:33.856"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170812 14:28:34.040" level="INFO">${base_uri} = /xyz/openbmc_project/software/2b6dcac8</msg>
<status status="PASS" endtime="20170812 14:28:34.040" starttime="20170812 14:28:34.040"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170812 14:28:34.041" starttime="20170812 14:28:34.040"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170812 14:28:34.197" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/2b6dcac8, headers=None json=None</msg>
<msg timestamp="20170812 14:28:34.197" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170812 14:28:34.197" starttime="20170812 14:28:34.041"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170812 14:28:34.198" starttime="20170812 14:28:34.198"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170812 14:28:34.198" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170812 14:28:34.199" starttime="20170812 14:28:34.198"></status>
</kw>
<msg timestamp="20170812 14:28:34.199" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170812 14:28:34.199" starttime="20170812 14:28:33.856"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170812 14:28:34.199" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170812 14:28:34.200" starttime="20170812 14:28:34.199"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170812 14:28:34.200" level="INFO">To JSON using : content={
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "ExtendedVersion": "op-build-v1.18-35-g04a11fe,buildroot-2017.05-163-g8035745,skiboot-07937c7,hostboot-faac61e,linux-4.12.3-openpower1-p593bf1b,petitboot-v1.5.1-p1b1d3ef,machine-xml-5575e7e-p28bf2dc,occ-d650501,hostboot-binaries-883d218,capp-ucode-9c73e9f,sbe-02021c6-pea3c159", 
    "Path": "/tmp/images/2b6dcac8", 
    "Progress": 10, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.Host", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "IBM-witherspoon-sequoia-ibm-OP9_v1.18_1.11"
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170812 14:28:34.200" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170812 14:28:34.200" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'Activation': u'xyz.openbmc_project.Software.Activation.Activations.Activating', u'Version': u'IBM-witherspoon-sequoia-ibm-OP9_v1.18_1.11', u'Purpo...</msg>
<status status="PASS" endtime="20170812 14:28:34.200" starttime="20170812 14:28:34.200"></status>
</kw>
<status status="PASS" endtime="20170812 14:28:34.201" starttime="20170812 14:28:33.855"></status>
</kw>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>/xyz/openbmc_project/software/2b6dcac8</arg>
</arguments>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170812 14:29:34.283" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170812 14:29:34.283" starttime="20170812 14:29:34.282"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170812 14:29:34.284" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170812 14:29:34.284" starttime="20170812 14:29:34.284"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170812 14:29:34.285" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170812 14:29:34.285" starttime="20170812 14:29:34.284"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170812 14:29:34.285" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170812 14:29:34.285" starttime="20170812 14:29:34.285"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170812 14:29:34.467" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170812 14:29:34.467" starttime="20170812 14:29:34.286"></status>
</kw>
<msg timestamp="20170812 14:29:34.467" level="INFO">${status} = PASS</msg>
<msg timestamp="20170812 14:29:34.467" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170812 14:29:34.467" starttime="20170812 14:29:34.286"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170812 14:29:34.468" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170812 14:29:34.468" starttime="20170812 14:29:34.468"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170812 14:29:34.469" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170812 14:29:34.469" starttime="20170812 14:29:34.468"></status>
</kw>
<status status="PASS" endtime="20170812 14:29:34.469" starttime="20170812 14:29:34.282"></status>
</kw>
<status status="PASS" endtime="20170812 14:29:34.469" starttime="20170812 14:29:34.281"></status>
</kw>
<status status="PASS" endtime="20170812 14:29:34.469" starttime="20170812 14:29:34.281"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170812 14:29:34.470" level="INFO">${base_uri} = /xyz/openbmc_project/software/2b6dcac8</msg>
<status status="PASS" endtime="20170812 14:29:34.470" starttime="20170812 14:29:34.469"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170812 14:29:34.470" starttime="20170812 14:29:34.470"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170812 14:29:34.594" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/2b6dcac8, headers=None json=None</msg>
<msg timestamp="20170812 14:29:34.594" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170812 14:29:34.594" starttime="20170812 14:29:34.471"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170812 14:29:34.595" starttime="20170812 14:29:34.595"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170812 14:29:34.596" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170812 14:29:34.596" starttime="20170812 14:29:34.595"></status>
</kw>
<msg timestamp="20170812 14:29:34.596" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170812 14:29:34.596" starttime="20170812 14:29:34.280"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170812 14:29:34.597" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170812 14:29:34.597" starttime="20170812 14:29:34.596"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170812 14:29:34.597" level="INFO">To JSON using : content={
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Invalid", 
    "ExtendedVersion": "", 
    "Path": "", 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.Host", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.None", 
    "Version": ""
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170812 14:29:34.597" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170812 14:29:34.598" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'Activation': u'xyz.openbmc_project.Software.Activation.Activations.Invalid', u'Version': u'', u'Purpose': u'xyz.openbmc_project.Software.Version.V...</msg>
<status status="PASS" endtime="20170812 14:29:34.598" starttime="20170812 14:29:34.597"></status>
</kw>
<status status="PASS" endtime="20170812 14:29:34.598" starttime="20170812 14:29:34.279"></status>
</kw>
<status status="PASS" endtime="20170812 14:29:34.598" starttime="20170812 14:23:29.245"></status>
</kw>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${SOFTWARE_VERSION_URI}${version_id}</arg>
</arguments>
<assign>
<var>${software_state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170812 14:29:34.601" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170812 14:29:34.602" starttime="20170812 14:29:34.601"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170812 14:29:34.602" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170812 14:29:34.602" starttime="20170812 14:29:34.602"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170812 14:29:34.603" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170812 14:29:34.603" starttime="20170812 14:29:34.603"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170812 14:29:34.604" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170812 14:29:34.604" starttime="20170812 14:29:34.603"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170812 14:29:34.825" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170812 14:29:34.826" starttime="20170812 14:29:34.604"></status>
</kw>
<msg timestamp="20170812 14:29:34.826" level="INFO">${status} = PASS</msg>
<msg timestamp="20170812 14:29:34.826" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170812 14:29:34.826" starttime="20170812 14:29:34.604"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170812 14:29:34.827" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170812 14:29:34.827" starttime="20170812 14:29:34.826"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170812 14:29:34.827" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170812 14:29:34.828" starttime="20170812 14:29:34.827"></status>
</kw>
<status status="PASS" endtime="20170812 14:29:34.828" starttime="20170812 14:29:34.600"></status>
</kw>
<status status="PASS" endtime="20170812 14:29:34.828" starttime="20170812 14:29:34.600"></status>
</kw>
<status status="PASS" endtime="20170812 14:29:34.828" starttime="20170812 14:29:34.599"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170812 14:29:34.829" level="INFO">${base_uri} = /xyz/openbmc_project/software/2b6dcac8</msg>
<status status="PASS" endtime="20170812 14:29:34.829" starttime="20170812 14:29:34.828"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170812 14:29:34.829" starttime="20170812 14:29:34.829"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170812 14:29:34.984" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/2b6dcac8, headers=None json=None</msg>
<msg timestamp="20170812 14:29:34.984" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170812 14:29:34.984" starttime="20170812 14:29:34.830"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170812 14:29:34.985" starttime="20170812 14:29:34.985"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170812 14:29:34.986" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170812 14:29:34.986" starttime="20170812 14:29:34.985"></status>
</kw>
<msg timestamp="20170812 14:29:34.986" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170812 14:29:34.986" starttime="20170812 14:29:34.599"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170812 14:29:34.987" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170812 14:29:34.987" starttime="20170812 14:29:34.986"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170812 14:29:34.987" level="INFO">To JSON using : content={
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Invalid", 
    "ExtendedVersion": "", 
    "Path": "", 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.Host", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.None", 
    "Version": ""
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170812 14:29:34.988" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170812 14:29:34.988" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'Activation': u'xyz.openbmc_project.Software.Activation.Activations.Invalid', u'Version': u'', u'Purpose': u'xyz.openbmc_project.Software.Version.V...</msg>
<status status="PASS" endtime="20170812 14:29:34.988" starttime="20170812 14:29:34.987"></status>
</kw>
<msg timestamp="20170812 14:29:34.988" level="INFO">${software_state} = {u'Activation': u'xyz.openbmc_project.Software.Activation.Activations.Invalid', u'Version': u'', u'Purpose': u'xyz.openbmc_project.Software.Version.VersionPurpose.Host', u'ExtendedVersion': u'', u'Pat...</msg>
<status status="PASS" endtime="20170812 14:29:34.988" starttime="20170812 14:29:34.598"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>&amp;{software_state}[Activation]</arg>
<arg>${ACTIVE}</arg>
</arguments>
<msg timestamp="20170812 14:29:34.994" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<msg timestamp="20170812 14:29:34.995" level="FAIL">xyz.openbmc_project.Software.Activation.Activations.Invalid != xyz.openbmc_project.Software.Activation.Activations.Active</msg>
<status status="FAIL" endtime="20170812 14:29:34.995" starttime="20170812 14:29:34.989"></status>
</kw>
<kw type="teardown" name="Code Update Teardown">
<doc>Do code update test case teardown.</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170812 14:29:34.997" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170812 14:29:34.997" starttime="20170812 14:29:34.997"></status>
</kw>
<msg timestamp="20170812 14:29:34.997" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170812 14:29:34.997" starttime="20170812 14:29:34.996"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170812 14:29:34.999" starttime="20170812 14:29:34.998"></status>
</kw>
<status status="PASS" endtime="20170812 14:29:34.999" starttime="20170812 14:29:34.997"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170812 14:29:34.999" starttime="20170812 14:29:34.999"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170812 14:29:35.001" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170812 14:29:35.001" starttime="20170812 14:29:35.000"></status>
</kw>
<msg timestamp="20170812 14:29:35.001" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170812 14:29:35.001" starttime="20170812 14:29:35.000"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170812 14:29:35.003" starttime="20170812 14:29:35.002"></status>
</kw>
<status status="PASS" endtime="20170812 14:29:35.003" starttime="20170812 14:29:35.002"></status>
</kw>
<status status="PASS" endtime="20170812 14:29:35.003" starttime="20170812 14:29:35.001"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170812 14:29:35.003" level="INFO">Logging into '9.41.166.169:22' as 'root'.</msg>
<msg timestamp="20170812 14:29:36.717" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170812 14:29:36.717" starttime="20170812 14:29:35.003"></status>
</kw>
<status status="PASS" endtime="20170812 14:29:36.718" starttime="20170812 14:29:34.995"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>rm -rf /tmp/images/*</arg>
</arguments>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170812 14:29:36.719" level="INFO">Executing command 'rm -rf /tmp/images/*'.</msg>
<msg timestamp="20170812 14:29:36.787" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170812 14:29:36.787" level="INFO">${stdout} = </msg>
<msg timestamp="20170812 14:29:36.787" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170812 14:29:36.787" starttime="20170812 14:29:36.719"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170812 14:29:36.788" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170812 14:29:36.788" starttime="20170812 14:29:36.788"></status>
</kw>
<status status="PASS" endtime="20170812 14:29:36.788" starttime="20170812 14:29:36.718"></status>
</kw>
<kw name="Close All Connections" library="SSHLibrary">
<doc>Closes all open connections.</doc>
<status status="PASS" endtime="20170812 14:29:37.009" starttime="20170812 14:29:36.788"></status>
</kw>
<kw name="FFDC On Test Case Fail" library="openbmc_ffdc">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw name="Is Host Quiesced" library="state_manager">
<doc>Check if host state is quiesced.</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170812 14:29:37.014" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170812 14:29:37.015" starttime="20170812 14:29:37.014"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170812 14:29:37.015" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170812 14:29:37.016" starttime="20170812 14:29:37.015"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170812 14:29:37.016" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170812 14:29:37.016" starttime="20170812 14:29:37.016"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170812 14:29:37.017" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170812 14:29:37.017" starttime="20170812 14:29:37.017"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170812 14:29:37.577" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170812 14:29:37.577" starttime="20170812 14:29:37.018"></status>
</kw>
<msg timestamp="20170812 14:29:37.577" level="INFO">${status} = PASS</msg>
<msg timestamp="20170812 14:29:37.577" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170812 14:29:37.577" starttime="20170812 14:29:37.017"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170812 14:29:37.578" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170812 14:29:37.578" starttime="20170812 14:29:37.577"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170812 14:29:37.578" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170812 14:29:37.579" starttime="20170812 14:29:37.578"></status>
</kw>
<status status="PASS" endtime="20170812 14:29:37.579" starttime="20170812 14:29:37.013"></status>
</kw>
<status status="PASS" endtime="20170812 14:29:37.579" starttime="20170812 14:29:37.013"></status>
</kw>
<status status="PASS" endtime="20170812 14:29:37.579" starttime="20170812 14:29:37.012"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170812 14:29:37.579" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170812 14:29:37.579" starttime="20170812 14:29:37.579"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170812 14:29:37.580" starttime="20170812 14:29:37.580"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170812 14:29:37.670" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170812 14:29:37.670" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170812 14:29:37.670" starttime="20170812 14:29:37.580"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170812 14:29:37.671" starttime="20170812 14:29:37.671"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170812 14:29:37.672" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170812 14:29:37.672" starttime="20170812 14:29:37.672"></status>
</kw>
<msg timestamp="20170812 14:29:37.672" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170812 14:29:37.672" starttime="20170812 14:29:37.012"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170812 14:29:37.673" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170812 14:29:37.673" starttime="20170812 14:29:37.672"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170812 14:29:37.673" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170812 14:29:37.673" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170812 14:29:37.673" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Off'}</msg>
<status status="PASS" endtime="20170812 14:29:37.673" starttime="20170812 14:29:37.673"></status>
</kw>
<msg timestamp="20170812 14:29:37.674" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status status="PASS" endtime="20170812 14:29:37.674" starttime="20170812 14:29:37.011"></status>
</kw>
<msg timestamp="20170812 14:29:37.674" level="INFO">${host_state} = Off</msg>
<status status="PASS" endtime="20170812 14:29:37.674" starttime="20170812 14:29:37.010"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<msg timestamp="20170812 14:29:37.675" level="FAIL">Off != Quiesced</msg>
<status status="FAIL" endtime="20170812 14:29:37.675" starttime="20170812 14:29:37.675"></status>
</kw>
<msg timestamp="20170812 14:29:37.675" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170812 14:29:37.675" starttime="20170812 14:29:37.674"></status>
</kw>
<msg timestamp="20170812 14:29:37.676" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170812 14:29:37.676" starttime="20170812 14:29:37.010"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL' or '${status}'=='True'</arg>
<arg>FFDC</arg>
</arguments>
<kw name="Ffdc" library="openbmc_ffdc">
<doc>Gather First Failure Data Capture (FFDC).</doc>
<kw name="Ping Host" library="utils">
<arguments>
<arg>9.41.166.169</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170812 14:29:37.696" level="INFO">Length is 12</msg>
<status status="PASS" endtime="20170812 14:29:37.696" starttime="20170812 14:29:37.696"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170812 14:29:37.717" level="INFO">Running command 'ping -c 4 9.41.166.169 2&gt;&amp;1'.</msg>
<msg timestamp="20170812 14:29:40.717" level="INFO">${RC} = 0</msg>
<msg timestamp="20170812 14:29:40.717" level="INFO">${output} = PING 9.41.166.169 (9.41.166.169) 56(84) bytes of data.
64 bytes from 9.41.166.169: icmp_seq=1 ttl=63 time=1.32 ms
64 bytes from 9.41.166.169: icmp_seq=2 ttl=63 time=1.40 ms
64 bytes from 9.41.166.169:...</msg>
<status status="PASS" endtime="20170812 14:29:40.717" starttime="20170812 14:29:37.696"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170812 14:29:40.721" level="INFO">RC: 0
Output:
PING 9.41.166.169 (9.41.166.169) 56(84) bytes of data.
64 bytes from 9.41.166.169: icmp_seq=1 ttl=63 time=1.32 ms
64 bytes from 9.41.166.169: icmp_seq=2 ttl=63 time=1.40 ms
64 bytes from 9.41.166.169: icmp_seq=3 ttl=63 time=0.704 ms
64 bytes from 9.41.166.169: icmp_seq=4 ttl=63 time=0.690 ms

--- 9.41.166.169 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 3002ms
rtt min/avg/max/mdev = 0.690/1.030/1.406/0.337 ms</msg>
<status status="PASS" endtime="20170812 14:29:40.721" starttime="20170812 14:29:40.720"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20170812 14:29:40.722" starttime="20170812 14:29:40.721"></status>
</kw>
<status status="PASS" endtime="20170812 14:29:40.722" starttime="20170812 14:29:37.695"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170812 14:29:40.743" level="INFO">${cur_time} = 2017-08-12 14:29:40:742897</msg>
<status status="PASS" endtime="20170812 14:29:40.743" starttime="20170812 14:29:40.742"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170812 14:29:40.744" level="INFO">${cur_time} = 20170812142940742897</msg>
<status status="PASS" endtime="20170812 14:29:40.744" starttime="20170812 14:29:40.744"></status>
</kw>
<status status="PASS" endtime="20170812 14:29:40.744" starttime="20170812 14:29:40.741"></status>
</kw>
<msg timestamp="20170812 14:29:40.749" level="INFO">${FFDC_TIME} = 20170812142940742897</msg>
<kw name="Get Test Dir and Name" library="openbmc_ffdc_utils">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20170812 14:29:40.760" level="INFO">${suite_name} = CodeUpdate</msg>
<status status="PASS" endtime="20170812 14:29:40.760" starttime="20170812 14:29:40.759"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20170812 14:29:40.760" level="INFO">${suite_name} = 20170812142940742897_CodeUpdate</msg>
<status status="PASS" endtime="20170812 14:29:40.760" starttime="20170812 14:29:40.760"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20170812 14:29:40.761" level="INFO">${test_name} = RESTHostCodeUpdate</msg>
<status status="PASS" endtime="20170812 14:29:40.761" starttime="20170812 14:29:40.761"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20170812 14:29:40.762" level="INFO">${test_name} = 20170812142940742897_RESTHostCodeUpdate</msg>
<status status="PASS" endtime="20170812 14:29:40.762" starttime="20170812 14:29:40.761"></status>
</kw>
<status status="PASS" endtime="20170812 14:29:40.762" starttime="20170812 14:29:40.759"></status>
</kw>
<msg timestamp="20170812 14:29:40.767" level="INFO">${FFDC_DIR_PATH} = /home/fspcibld/logs/20170812142940742897_CodeUpdate/20170812142940742897_RESTHostCodeUpdate/</msg>
<msg timestamp="20170812 14:29:40.772" level="INFO">${FFDC_PREFIX} = 20170812142940742897_</msg>
<msg timestamp="20170812 14:29:40.792" level="INFO">${LOG_PREFIX} = /home/fspcibld/logs/20170812142940742897_CodeUpdate/20170812142940742897_RESTHostCodeUpdate/20170812142940742897_</msg>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>/home/fspcibld/logs/20170812142940742897_CodeUpdate/20170812142940742897_RESTHostCodeUpdate/</arg>
</arguments>
<msg timestamp="20170812 14:29:40.793" html="yes" level="INFO">Created directory '&lt;a href="file:///home/fspcibld/logs/20170812142940742897_CodeUpdate/20170812142940742897_RESTHostCodeUpdate"&gt;/home/fspcibld/logs/20170812142940742897_CodeUpdate/20170812142940742897_RESTHostCodeUpdate&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170812 14:29:40.793" starttime="20170812 14:29:40.792"></status>
</kw>
<msg timestamp="20170812 14:29:40.798" level="INFO">${FFDC_FILE_PATH} = /home/fspcibld/logs/20170812142940742897_CodeUpdate/20170812142940742897_RESTHostCodeUpdate/20170812142940742897_BMC_general.txt</msg>
<kw name="Header Message" library="openbmc_ffdc_utils">
<doc>Write header message to the report document manifest.</doc>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${HEADER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170812 14:29:40.817" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170812142940742897_CodeUpdate/20170812142940742897_RESTHostCodeUpdate/20170812142940742897_BMC_general.txt"&gt;/home/fspcibld/logs/20170812142940742897_CodeUpdate/20170812142940742897_RESTHostCodeUpdate/20170812142940742897_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170812 14:29:40.817" starttime="20170812 14:29:40.817"></status>
</kw>
<status status="PASS" endtime="20170812 14:29:40.817" starttime="20170812 14:29:40.816"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170812 14:29:40.818" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170812142940742897_CodeUpdate/20170812142940742897_RESTHostCodeUpdate/20170812142940742897_BMC_general.txt"&gt;/home/fspcibld/logs/20170812142940742897_CodeUpdate/20170812142940742897_RESTHostCodeUpdate/20170812142940742897_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170812 14:29:40.818" starttime="20170812 14:29:40.818"></status>
</kw>
<status status="PASS" endtime="20170812 14:29:40.819" starttime="20170812 14:29:40.817"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Suite File\t\t: ${SUITE_NAME} ${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170812 14:29:40.820" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170812142940742897_CodeUpdate/20170812142940742897_RESTHostCodeUpdate/20170812142940742897_BMC_general.txt"&gt;/home/fspcibld/logs/20170812142940742897_CodeUpdate/20170812142940742897_RESTHostCodeUpdate/20170812142940742897_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170812 14:29:40.820" starttime="20170812 14:29:40.819"></status>
</kw>
<status status="PASS" endtime="20170812 14:29:40.820" starttime="20170812 14:29:40.819"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Case Name\t\t: ${TEST_NAME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170812 14:29:40.821" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170812142940742897_CodeUpdate/20170812142940742897_RESTHostCodeUpdate/20170812142940742897_BMC_general.txt"&gt;/home/fspcibld/logs/20170812142940742897_CodeUpdate/20170812142940742897_RESTHostCodeUpdate/20170812142940742897_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170812 14:29:40.821" starttime="20170812 14:29:40.821"></status>
</kw>
<status status="PASS" endtime="20170812 14:29:40.821" starttime="20170812 14:29:40.820"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Source File\t: ${SUITE_SOURCE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170812 14:29:40.822" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170812142940742897_CodeUpdate/20170812142940742897_RESTHostCodeUpdate/20170812142940742897_BMC_general.txt"&gt;/home/fspcibld/logs/20170812142940742897_CodeUpdate/20170812142940742897_RESTHostCodeUpdate/20170812142940742897_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170812 14:29:40.823" starttime="20170812 14:29:40.822"></status>
</kw>
<status status="PASS" endtime="20170812 14:29:40.823" starttime="20170812 14:29:40.821"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Failure Time Stamp\t: ${FFDC_TIME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170812 14:29:40.824" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170812142940742897_CodeUpdate/20170812142940742897_RESTHostCodeUpdate/20170812142940742897_BMC_general.txt"&gt;/home/fspcibld/logs/20170812142940742897_CodeUpdate/20170812142940742897_RESTHostCodeUpdate/20170812142940742897_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170812 14:29:40.824" starttime="20170812 14:29:40.824"></status>
</kw>
<status status="PASS" endtime="20170812 14:29:40.824" starttime="20170812 14:29:40.823"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Error Message\t: ${TEST_MESSAGE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170812 14:29:40.825" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170812142940742897_CodeUpdate/20170812142940742897_RESTHostCodeUpdate/20170812142940742897_BMC_general.txt"&gt;/home/fspcibld/logs/20170812142940742897_CodeUpdate/20170812142940742897_RESTHostCodeUpdate/20170812142940742897_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170812 14:29:40.825" starttime="20170812 14:29:40.825"></status>
</kw>
<status status="PASS" endtime="20170812 14:29:40.826" starttime="20170812 14:29:40.824"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Documentation\t:${\n}${TEST_DOCUMENTATION}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170812 14:29:40.827" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170812142940742897_CodeUpdate/20170812142940742897_RESTHostCodeUpdate/20170812142940742897_BMC_general.txt"&gt;/home/fspcibld/logs/20170812142940742897_CodeUpdate/20170812142940742897_RESTHostCodeUpdate/20170812142940742897_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170812 14:29:40.827" starttime="20170812 14:29:40.826"></status>
</kw>
<status status="PASS" endtime="20170812 14:29:40.827" starttime="20170812 14:29:40.826"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170812 14:29:40.828" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170812142940742897_CodeUpdate/20170812142940742897_RESTHostCodeUpdate/20170812142940742897_BMC_general.txt"&gt;/home/fspcibld/logs/20170812142940742897_CodeUpdate/20170812142940742897_RESTHostCodeUpdate/20170812142940742897_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170812 14:29:40.828" starttime="20170812 14:29:40.828"></status>
</kw>
<status status="PASS" endtime="20170812 14:29:40.828" starttime="20170812 14:29:40.827"></status>
</kw>
<kw name="Test Setup Info" library="openbmc_ffdc_utils">
<doc>BMC IP, Model and other information</doc>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170812 14:29:40.830" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170812142940742897_CodeUpdate/20170812142940742897_RESTHostCodeUpdate/20170812142940742897_BMC_general.txt"&gt;/home/fspcibld/logs/20170812142940742897_CodeUpdate/20170812142940742897_RESTHostCodeUpdate/20170812142940742897_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170812 14:29:40.830" starttime="20170812 14:29:40.829"></status>
</kw>
<status status="PASS" endtime="20170812 14:29:40.830" starttime="20170812 14:29:40.829"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Setup Information:</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170812 14:29:40.831" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170812142940742897_CodeUpdate/20170812142940742897_RESTHostCodeUpdate/20170812142940742897_BMC_general.txt"&gt;/home/fspcibld/logs/20170812142940742897_CodeUpdate/20170812142940742897_RESTHostCodeUpdate/20170812142940742897_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170812 14:29:40.831" starttime="20170812 14:29:40.830"></status>
</kw>
<status status="PASS" endtime="20170812 14:29:40.831" starttime="20170812 14:29:40.830"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170812 14:29:40.832" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170812142940742897_CodeUpdate/20170812142940742897_RESTHostCodeUpdate/20170812142940742897_BMC_general.txt"&gt;/home/fspcibld/logs/20170812142940742897_CodeUpdate/20170812142940742897_RESTHostCodeUpdate/20170812142940742897_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170812 14:29:40.832" starttime="20170812 14:29:40.832"></status>
</kw>
<status status="PASS" endtime="20170812 14:29:40.832" starttime="20170812 14:29:40.831"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>OPENBMC HOST \t: ${OPENBMC_HOST}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170812 14:29:40.833" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170812142940742897_CodeUpdate/20170812142940742897_RESTHostCodeUpdate/20170812142940742897_BMC_general.txt"&gt;/home/fspcibld/logs/20170812142940742897_CodeUpdate/20170812142940742897_RESTHostCodeUpdate/20170812142940742897_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170812 14:29:40.834" starttime="20170812 14:29:40.833"></status>
</kw>
<status status="PASS" endtime="20170812 14:29:40.834" starttime="20170812 14:29:40.833"></status>
</kw>
<kw name="Get BMC System Model" library="utils">
<doc>Get the BMC model from the device tree.</doc>
<assign>
<var>${model_name}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20170812 14:29:40.864" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.41.166.169
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170812 14:29:40.864" level="INFO">Logging into '9.41.166.169:22' as 'root'.</msg>
<msg timestamp="20170812 14:29:41.621" level="INFO">Read output: root@witherspoon:~#</msg>
<msg timestamp="20170812 14:29:41.622" level="INFO">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg timestamp="20170812 14:29:41.709" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170812 14:29:41.717" level="INFO">${bmc_model} = Witherspoon</msg>
<msg timestamp="20170812 14:29:41.718" level="INFO">${stderr} = </msg>
<msg timestamp="20170812 14:29:41.718" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20170812 14:29:41.718" starttime="20170812 14:29:40.834"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170812 14:29:41.718" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170812 14:29:41.718" starttime="20170812 14:29:41.718"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg timestamp="20170812 14:29:41.719" level="INFO">Length is 11</msg>
<status status="PASS" endtime="20170812 14:29:41.719" starttime="20170812 14:29:41.719"></status>
</kw>
<msg timestamp="20170812 14:29:41.719" level="INFO">${model_name} = Witherspoon</msg>
<status status="PASS" endtime="20170812 14:29:41.719" starttime="20170812 14:29:40.834"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>SYSTEM TYPE \t: ${model_name}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170812 14:29:41.721" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170812142940742897_CodeUpdate/20170812142940742897_RESTHostCodeUpdate/20170812142940742897_BMC_general.txt"&gt;/home/fspcibld/logs/20170812142940742897_CodeUpdate/20170812142940742897_RESTHostCodeUpdate/20170812142940742897_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170812 14:29:41.721" starttime="20170812 14:29:41.720"></status>
</kw>
<status status="PASS" endtime="20170812 14:29:41.721" starttime="20170812 14:29:41.719"></status>
</kw>
<status status="PASS" endtime="20170812 14:29:41.721" starttime="20170812 14:29:40.828"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${MSG_INTRO}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170812 14:29:41.723" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170812142940742897_CodeUpdate/20170812142940742897_RESTHostCodeUpdate/20170812142940742897_BMC_general.txt"&gt;/home/fspcibld/logs/20170812142940742897_CodeUpdate/20170812142940742897_RESTHostCodeUpdate/20170812142940742897_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170812 14:29:41.723" starttime="20170812 14:29:41.722"></status>
</kw>
<status status="PASS" endtime="20170812 14:29:41.723" starttime="20170812 14:29:41.721"></status>
</kw>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170812 14:29:41.723" level="INFO">@{entries} = [ APPLICATION DATA | DRIVER INFO | BMC DATA ]</msg>
<status status="PASS" endtime="20170812 14:29:41.723" starttime="20170812 14:29:41.723"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = APPLICATION DATA">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170812 14:29:41.725" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170812142940742897_CodeUpdate/20170812142940742897_RESTHostCodeUpdate/20170812142940742897_BMC_general.txt"&gt;/home/fspcibld/logs/20170812142940742897_CodeUpdate/20170812142940742897_RESTHostCodeUpdate/20170812142940742897_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170812 14:29:41.725" starttime="20170812 14:29:41.724"></status>
</kw>
<status status="PASS" endtime="20170812 14:29:41.725" starttime="20170812 14:29:41.724"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170812 14:29:41.726" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170812142940742897_CodeUpdate/20170812142940742897_RESTHostCodeUpdate/20170812142940742897_BMC_general.txt"&gt;/home/fspcibld/logs/20170812142940742897_CodeUpdate/20170812142940742897_RESTHostCodeUpdate/20170812142940742897_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170812 14:29:41.726" starttime="20170812 14:29:41.726"></status>
</kw>
<status status="PASS" endtime="20170812 14:29:41.726" starttime="20170812 14:29:41.725"></status>
</kw>
<status status="PASS" endtime="20170812 14:29:41.726" starttime="20170812 14:29:41.724"></status>
</kw>
<kw type="foritem" name="${index} = DRIVER INFO">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170812 14:29:41.727" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170812142940742897_CodeUpdate/20170812142940742897_RESTHostCodeUpdate/20170812142940742897_BMC_general.txt"&gt;/home/fspcibld/logs/20170812142940742897_CodeUpdate/20170812142940742897_RESTHostCodeUpdate/20170812142940742897_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170812 14:29:41.728" starttime="20170812 14:29:41.727"></status>
</kw>
<status status="PASS" endtime="20170812 14:29:41.728" starttime="20170812 14:29:41.727"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170812 14:29:41.729" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170812142940742897_CodeUpdate/20170812142940742897_RESTHostCodeUpdate/20170812142940742897_BMC_general.txt"&gt;/home/fspcibld/logs/20170812142940742897_CodeUpdate/20170812142940742897_RESTHostCodeUpdate/20170812142940742897_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170812 14:29:41.729" starttime="20170812 14:29:41.728"></status>
</kw>
<status status="PASS" endtime="20170812 14:29:41.729" starttime="20170812 14:29:41.728"></status>
</kw>
<status status="PASS" endtime="20170812 14:29:41.729" starttime="20170812 14:29:41.726"></status>
</kw>
<kw type="foritem" name="${index} = BMC DATA">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170812 14:29:41.731" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170812142940742897_CodeUpdate/20170812142940742897_RESTHostCodeUpdate/20170812142940742897_BMC_general.txt"&gt;/home/fspcibld/logs/20170812142940742897_CodeUpdate/20170812142940742897_RESTHostCodeUpdate/20170812142940742897_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170812 14:29:41.731" starttime="20170812 14:29:41.731"></status>
</kw>
<status status="PASS" endtime="20170812 14:29:41.731" starttime="20170812 14:29:41.729"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170812 14:29:41.732" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170812142940742897_CodeUpdate/20170812142940742897_RESTHostCodeUpdate/20170812142940742897_BMC_general.txt"&gt;/home/fspcibld/logs/20170812142940742897_CodeUpdate/20170812142940742897_RESTHostCodeUpdate/20170812142940742897_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170812 14:29:41.732" starttime="20170812 14:29:41.732"></status>
</kw>
<status status="PASS" endtime="20170812 14:29:41.733" starttime="20170812 14:29:41.731"></status>
</kw>
<status status="PASS" endtime="20170812 14:29:41.733" starttime="20170812 14:29:41.729"></status>
</kw>
<status status="PASS" endtime="20170812 14:29:41.733" starttime="20170812 14:29:41.723"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${MSG_DETAIL}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170812 14:29:41.734" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170812142940742897_CodeUpdate/20170812142940742897_RESTHostCodeUpdate/20170812142940742897_BMC_general.txt"&gt;/home/fspcibld/logs/20170812142940742897_CodeUpdate/20170812142940742897_RESTHostCodeUpdate/20170812142940742897_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170812 14:29:41.734" starttime="20170812 14:29:41.733"></status>
</kw>
<status status="PASS" endtime="20170812 14:29:41.734" starttime="20170812 14:29:41.733"></status>
</kw>
<status status="PASS" endtime="20170812 14:29:41.734" starttime="20170812 14:29:40.815"></status>
</kw>
<kw name="Call FFDC Methods" library="openbmc_ffdc_methods">
<doc>Call into FFDC Keyword index list.</doc>
<arguments>
<arg>ffdc_function_list=</arg>
</arguments>
<kw name="Get Ffdc Method Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170812 14:29:41.739" level="INFO">@{entries} = [ BMC LOGS ]</msg>
<status status="PASS" endtime="20170812 14:29:41.739" starttime="20170812 14:29:41.739"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC LOGS">
<kw name="Method Call Keyword List" library="openbmc_ffdc_methods">
<doc>Iterate the list through keyword index.</doc>
<arguments>
<arg>${index}</arg>
<arg>${ffdc_function_list}</arg>
</arguments>
<kw name="Get Ffdc Method Call" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<assign>
<var>@{method_list}</var>
</assign>
<msg timestamp="20170812 14:29:41.742" level="INFO">@{method_list} = [ ('FFDC Generic Report', 'BMC FFDC Manifest') | ('Get Request FFDC', 'BMC FFDC Get Requests') | ('Core Files', 'SCP Coredump Files') | ('BMC Specific Files', 'BMC FFDC Files') | ('SEL Log', 'Collect ...</msg>
<status status="PASS" endtime="20170812 14:29:41.742" starttime="20170812 14:29:41.740"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ffdc_function_list}' == '${EMPTY}'</arg>
<arg>Get FFDC Method Desc</arg>
<arg>${index}</arg>
<arg>ELSE</arg>
<arg>Split String</arg>
<arg>${ffdc_function_list}</arg>
<arg>separator=:</arg>
</arguments>
<assign>
<var>@{ffdc_function_list}</var>
</assign>
<kw name="Get Ffdc Method Desc" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<status status="PASS" endtime="20170812 14:29:41.743" starttime="20170812 14:29:41.743"></status>
</kw>
<msg timestamp="20170812 14:29:41.743" level="INFO">@{ffdc_function_list} = [ FFDC Generic Report | Get Request FFDC | Core Files | BMC Specific Files | SEL Log | OS FFDC ]</msg>
<status status="PASS" endtime="20170812 14:29:41.743" starttime="20170812 14:29:41.742"></status>
</kw>
<kw type="for" name="${method} IN [ @{method_list} ]">
<kw type="foritem" name="${method} = ('FFDC Generic Report', 'BMC FFDC Manifest')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170812 14:29:41.745" starttime="20170812 14:29:41.745"></status>
</kw>
<msg timestamp="20170812 14:29:41.745" level="INFO">${status} = PASS</msg>
<msg timestamp="20170812 14:29:41.745" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170812 14:29:41.745" starttime="20170812 14:29:41.744"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170812 14:29:41.746" starttime="20170812 14:29:41.745"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Manifest" library="openbmc_ffdc_methods">
<doc>Get the commands index for the FFDC_BMC_CMD,</doc>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170812 14:29:41.770" level="INFO">@{entries} = [ APPLICATION DATA | DRIVER INFO | BMC DATA ]</msg>
<status status="PASS" endtime="20170812 14:29:41.770" starttime="20170812 14:29:41.770"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = APPLICATION DATA">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170812 14:29:41.771" level="INFO">@{cmd_list} = [ ('BMC state', '/usr/sbin/obmcutil state') ]</msg>
<status status="PASS" endtime="20170812 14:29:41.771" starttime="20170812 14:29:41.771"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170812 14:29:41.776" level="INFO">${ENTRY_INDEX} = APPLICATION DATA</msg>
<status status="PASS" endtime="20170812 14:29:41.776" starttime="20170812 14:29:41.771"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC state', '/usr/sbin/obmcutil state')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170812 14:29:41.779" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170812142940742897_CodeUpdate/20170812142940742897_RESTHostCodeUpdate/20170812142940742897_BMC_general.txt"&gt;/home/fspcibld/logs/20170812142940742897_CodeUpdate/20170812142940742897_RESTHostCodeUpdate/20170812142940742897_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170812 14:29:41.780" starttime="20170812 14:29:41.779"></status>
</kw>
<status status="PASS" endtime="20170812 14:29:41.780" starttime="20170812 14:29:41.778"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170812 14:29:41.781" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170812142940742897_CodeUpdate/20170812142940742897_RESTHostCodeUpdate/20170812142940742897_BMC_general.txt"&gt;/home/fspcibld/logs/20170812142940742897_CodeUpdate/20170812142940742897_RESTHostCodeUpdate/20170812142940742897_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170812 14:29:41.781" starttime="20170812 14:29:41.781"></status>
</kw>
<status status="PASS" endtime="20170812 14:29:41.781" starttime="20170812 14:29:41.780"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170812 14:29:41.782" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170812142940742897_CodeUpdate/20170812142940742897_RESTHostCodeUpdate/20170812142940742897_BMC_general.txt"&gt;/home/fspcibld/logs/20170812142940742897_CodeUpdate/20170812142940742897_RESTHostCodeUpdate/20170812142940742897_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170812 14:29:41.782" starttime="20170812 14:29:41.782"></status>
</kw>
<status status="PASS" endtime="20170812 14:29:41.782" starttime="20170812 14:29:41.781"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170812 14:29:41.783" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170812142940742897_CodeUpdate/20170812142940742897_RESTHostCodeUpdate/20170812142940742897_BMC_general.txt"&gt;/home/fspcibld/logs/20170812142940742897_CodeUpdate/20170812142940742897_RESTHostCodeUpdate/20170812142940742897_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170812 14:29:41.784" starttime="20170812 14:29:41.783"></status>
</kw>
<status status="PASS" endtime="20170812 14:29:41.784" starttime="20170812 14:29:41.783"></status>
</kw>
<status status="PASS" endtime="20170812 14:29:41.784" starttime="20170812 14:29:41.778"></status>
</kw>
<status status="PASS" endtime="20170812 14:29:41.784" starttime="20170812 14:29:41.778"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170812 14:29:41.785" level="INFO">${cmd_buf} = BMC Execute Command  /usr/sbin/obmcutil state  ignore_err=1</msg>
<status status="PASS" endtime="20170812 14:29:41.785" starttime="20170812 14:29:41.784"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>/usr/sbin/obmcutil state</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170812 14:29:41.848" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.41.166.169
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170812 14:29:41.849" level="INFO">Executing command '/usr/sbin/obmcutil state'.</msg>
<msg timestamp="20170812 14:29:43.207" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170812 14:29:43.207" starttime="20170812 14:29:41.816"></status>
</kw>
<msg timestamp="20170812 14:29:43.207" level="INFO">${status} = PASS</msg>
<msg timestamp="20170812 14:29:43.208" level="INFO">${ret_values} = (u'CurrentBMCState:    xyz.openbmc_project.State.BMC.BMCState.Ready\nCurrentPowerState:  xyz.openbmc_project.State.Chassis.PowerState.Off\nCurrentHostState:   xyz.openbmc_project.State.Host.HostState....</msg>
<status status="PASS" endtime="20170812 14:29:43.208" starttime="20170812 14:29:41.785"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170812 14:29:43.208" level="INFO">${stdout} = CurrentBMCState:    xyz.openbmc_project.State.BMC.BMCState.Ready
CurrentPowerState:  xyz.openbmc_project.State.Chassis.PowerState.Off
CurrentHostState:   xyz.openbmc_project.State.Host.HostState.Off</msg>
<status status="PASS" endtime="20170812 14:29:43.209" starttime="20170812 14:29:43.208"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170812 14:29:43.209" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170812 14:29:43.209" starttime="20170812 14:29:43.209"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170812 14:29:43.216" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170812142940742897_CodeUpdate/20170812142940742897_RESTHostCodeUpdate/20170812142940742897_BMC_general.txt"&gt;/home/fspcibld/logs/20170812142940742897_CodeUpdate/20170812142940742897_RESTHostCodeUpdate/20170812142940742897_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170812 14:29:43.216" starttime="20170812 14:29:43.215"></status>
</kw>
<status status="PASS" endtime="20170812 14:29:43.216" starttime="20170812 14:29:43.215"></status>
</kw>
<status status="PASS" endtime="20170812 14:29:43.216" starttime="20170812 14:29:43.209"></status>
</kw>
<status status="PASS" endtime="20170812 14:29:43.216" starttime="20170812 14:29:41.777"></status>
</kw>
<status status="PASS" endtime="20170812 14:29:43.217" starttime="20170812 14:29:41.777"></status>
</kw>
<status status="PASS" endtime="20170812 14:29:43.217" starttime="20170812 14:29:41.776"></status>
</kw>
<status status="PASS" endtime="20170812 14:29:43.217" starttime="20170812 14:29:41.770"></status>
</kw>
<status status="PASS" endtime="20170812 14:29:43.217" starttime="20170812 14:29:41.770"></status>
</kw>
<kw type="foritem" name="${index} = DRIVER INFO">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170812 14:29:43.218" level="INFO">@{cmd_list} = [ ('FW Level', 'cat /etc/os-release') ]</msg>
<status status="PASS" endtime="20170812 14:29:43.218" starttime="20170812 14:29:43.218"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170812 14:29:43.219" level="INFO">${ENTRY_INDEX} = DRIVER INFO</msg>
<status status="PASS" endtime="20170812 14:29:43.219" starttime="20170812 14:29:43.218"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('FW Level', 'cat /etc/os-release')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170812 14:29:43.222" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170812142940742897_CodeUpdate/20170812142940742897_RESTHostCodeUpdate/20170812142940742897_BMC_general.txt"&gt;/home/fspcibld/logs/20170812142940742897_CodeUpdate/20170812142940742897_RESTHostCodeUpdate/20170812142940742897_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170812 14:29:43.222" starttime="20170812 14:29:43.221"></status>
</kw>
<status status="PASS" endtime="20170812 14:29:43.222" starttime="20170812 14:29:43.221"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170812 14:29:43.223" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170812142940742897_CodeUpdate/20170812142940742897_RESTHostCodeUpdate/20170812142940742897_BMC_general.txt"&gt;/home/fspcibld/logs/20170812142940742897_CodeUpdate/20170812142940742897_RESTHostCodeUpdate/20170812142940742897_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170812 14:29:43.223" starttime="20170812 14:29:43.223"></status>
</kw>
<status status="PASS" endtime="20170812 14:29:43.223" starttime="20170812 14:29:43.222"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170812 14:29:43.224" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170812142940742897_CodeUpdate/20170812142940742897_RESTHostCodeUpdate/20170812142940742897_BMC_general.txt"&gt;/home/fspcibld/logs/20170812142940742897_CodeUpdate/20170812142940742897_RESTHostCodeUpdate/20170812142940742897_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170812 14:29:43.225" starttime="20170812 14:29:43.224"></status>
</kw>
<status status="PASS" endtime="20170812 14:29:43.225" starttime="20170812 14:29:43.224"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170812 14:29:43.226" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170812142940742897_CodeUpdate/20170812142940742897_RESTHostCodeUpdate/20170812142940742897_BMC_general.txt"&gt;/home/fspcibld/logs/20170812142940742897_CodeUpdate/20170812142940742897_RESTHostCodeUpdate/20170812142940742897_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170812 14:29:43.226" starttime="20170812 14:29:43.225"></status>
</kw>
<status status="PASS" endtime="20170812 14:29:43.226" starttime="20170812 14:29:43.225"></status>
</kw>
<status status="PASS" endtime="20170812 14:29:43.226" starttime="20170812 14:29:43.220"></status>
</kw>
<status status="PASS" endtime="20170812 14:29:43.226" starttime="20170812 14:29:43.220"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170812 14:29:43.227" level="INFO">${cmd_buf} = BMC Execute Command  cat /etc/os-release  ignore_err=1</msg>
<status status="PASS" endtime="20170812 14:29:43.227" starttime="20170812 14:29:43.226"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /etc/os-release</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170812 14:29:43.285" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.41.166.169
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170812 14:29:43.286" level="INFO">Executing command 'cat /etc/os-release'.</msg>
<msg timestamp="20170812 14:29:43.343" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170812 14:29:43.343" starttime="20170812 14:29:43.254"></status>
</kw>
<msg timestamp="20170812 14:29:43.343" level="INFO">${status} = PASS</msg>
<msg timestamp="20170812 14:29:43.344" level="INFO">${ret_values} = (u'ID="openbmc-phosphor"\nNAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"\nVERSION="v1.99.8-223"\nVERSION_ID="v1.99.8-223-g99446fe"\nPRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC...</msg>
<status status="PASS" endtime="20170812 14:29:43.344" starttime="20170812 14:29:43.227"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170812 14:29:43.344" level="INFO">${stdout} = ID="openbmc-phosphor"
NAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"
VERSION="v1.99.8-223"
VERSION_ID="v1.99.8-223-g99446fe"
PRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC Projec...</msg>
<status status="PASS" endtime="20170812 14:29:43.344" starttime="20170812 14:29:43.344"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170812 14:29:43.345" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170812 14:29:43.345" starttime="20170812 14:29:43.345"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170812 14:29:43.352" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170812142940742897_CodeUpdate/20170812142940742897_RESTHostCodeUpdate/20170812142940742897_BMC_general.txt"&gt;/home/fspcibld/logs/20170812142940742897_CodeUpdate/20170812142940742897_RESTHostCodeUpdate/20170812142940742897_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170812 14:29:43.352" starttime="20170812 14:29:43.351"></status>
</kw>
<status status="PASS" endtime="20170812 14:29:43.352" starttime="20170812 14:29:43.350"></status>
</kw>
<status status="PASS" endtime="20170812 14:29:43.352" starttime="20170812 14:29:43.345"></status>
</kw>
<status status="PASS" endtime="20170812 14:29:43.352" starttime="20170812 14:29:43.219"></status>
</kw>
<status status="PASS" endtime="20170812 14:29:43.352" starttime="20170812 14:29:43.219"></status>
</kw>
<status status="PASS" endtime="20170812 14:29:43.352" starttime="20170812 14:29:43.219"></status>
</kw>
<status status="PASS" endtime="20170812 14:29:43.352" starttime="20170812 14:29:43.217"></status>
</kw>
<status status="PASS" endtime="20170812 14:29:43.352" starttime="20170812 14:29:43.217"></status>
</kw>
<kw type="foritem" name="${index} = BMC DATA">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170812 14:29:43.353" level="INFO">@{cmd_list} = [ ('BMC Uptime', 'uptime') | ('BMC File System Disk Space Usage', 'df -hT') | ('BMC OS', 'uname -a') ]</msg>
<status status="PASS" endtime="20170812 14:29:43.353" starttime="20170812 14:29:43.353"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170812 14:29:43.354" level="INFO">${ENTRY_INDEX} = BMC DATA</msg>
<status status="PASS" endtime="20170812 14:29:43.354" starttime="20170812 14:29:43.354"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC Uptime', 'uptime')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170812 14:29:43.357" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170812142940742897_CodeUpdate/20170812142940742897_RESTHostCodeUpdate/20170812142940742897_BMC_general.txt"&gt;/home/fspcibld/logs/20170812142940742897_CodeUpdate/20170812142940742897_RESTHostCodeUpdate/20170812142940742897_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170812 14:29:43.357" starttime="20170812 14:29:43.357"></status>
</kw>
<status status="PASS" endtime="20170812 14:29:43.357" starttime="20170812 14:29:43.356"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170812 14:29:43.358" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170812142940742897_CodeUpdate/20170812142940742897_RESTHostCodeUpdate/20170812142940742897_BMC_general.txt"&gt;/home/fspcibld/logs/20170812142940742897_CodeUpdate/20170812142940742897_RESTHostCodeUpdate/20170812142940742897_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170812 14:29:43.359" starttime="20170812 14:29:43.358"></status>
</kw>
<status status="PASS" endtime="20170812 14:29:43.359" starttime="20170812 14:29:43.357"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170812 14:29:43.360" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170812142940742897_CodeUpdate/20170812142940742897_RESTHostCodeUpdate/20170812142940742897_BMC_general.txt"&gt;/home/fspcibld/logs/20170812142940742897_CodeUpdate/20170812142940742897_RESTHostCodeUpdate/20170812142940742897_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170812 14:29:43.360" starttime="20170812 14:29:43.359"></status>
</kw>
<status status="PASS" endtime="20170812 14:29:43.360" starttime="20170812 14:29:43.359"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170812 14:29:43.361" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170812142940742897_CodeUpdate/20170812142940742897_RESTHostCodeUpdate/20170812142940742897_BMC_general.txt"&gt;/home/fspcibld/logs/20170812142940742897_CodeUpdate/20170812142940742897_RESTHostCodeUpdate/20170812142940742897_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170812 14:29:43.361" starttime="20170812 14:29:43.361"></status>
</kw>
<status status="PASS" endtime="20170812 14:29:43.361" starttime="20170812 14:29:43.360"></status>
</kw>
<status status="PASS" endtime="20170812 14:29:43.361" starttime="20170812 14:29:43.356"></status>
</kw>
<status status="PASS" endtime="20170812 14:29:43.361" starttime="20170812 14:29:43.355"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170812 14:29:43.362" level="INFO">${cmd_buf} = BMC Execute Command  uptime  ignore_err=1</msg>
<status status="PASS" endtime="20170812 14:29:43.362" starttime="20170812 14:29:43.362"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>uptime</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170812 14:29:43.420" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.41.166.169
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170812 14:29:43.420" level="INFO">Executing command 'uptime'.</msg>
<msg timestamp="20170812 14:29:43.477" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170812 14:29:43.477" starttime="20170812 14:29:43.389"></status>
</kw>
<msg timestamp="20170812 14:29:43.478" level="INFO">${status} = PASS</msg>
<msg timestamp="20170812 14:29:43.478" level="INFO">${ret_values} = (u' 15:51:43 up 8 min,  load average: 1.15, 1.49, 1.01', u'', 0)</msg>
<status status="PASS" endtime="20170812 14:29:43.478" starttime="20170812 14:29:43.363"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170812 14:29:43.478" level="INFO">${stdout} =  15:51:43 up 8 min,  load average: 1.15, 1.49, 1.01</msg>
<status status="PASS" endtime="20170812 14:29:43.478" starttime="20170812 14:29:43.478"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170812 14:29:43.479" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170812 14:29:43.479" starttime="20170812 14:29:43.479"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170812 14:29:43.486" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170812142940742897_CodeUpdate/20170812142940742897_RESTHostCodeUpdate/20170812142940742897_BMC_general.txt"&gt;/home/fspcibld/logs/20170812142940742897_CodeUpdate/20170812142940742897_RESTHostCodeUpdate/20170812142940742897_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170812 14:29:43.486" starttime="20170812 14:29:43.485"></status>
</kw>
<status status="PASS" endtime="20170812 14:29:43.486" starttime="20170812 14:29:43.485"></status>
</kw>
<status status="PASS" endtime="20170812 14:29:43.486" starttime="20170812 14:29:43.479"></status>
</kw>
<status status="PASS" endtime="20170812 14:29:43.486" starttime="20170812 14:29:43.354"></status>
</kw>
<status status="PASS" endtime="20170812 14:29:43.486" starttime="20170812 14:29:43.354"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC File System Disk Space Usage', 'df -hT')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170812 14:29:43.489" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170812142940742897_CodeUpdate/20170812142940742897_RESTHostCodeUpdate/20170812142940742897_BMC_general.txt"&gt;/home/fspcibld/logs/20170812142940742897_CodeUpdate/20170812142940742897_RESTHostCodeUpdate/20170812142940742897_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170812 14:29:43.489" starttime="20170812 14:29:43.489"></status>
</kw>
<status status="PASS" endtime="20170812 14:29:43.489" starttime="20170812 14:29:43.488"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170812 14:29:43.490" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170812142940742897_CodeUpdate/20170812142940742897_RESTHostCodeUpdate/20170812142940742897_BMC_general.txt"&gt;/home/fspcibld/logs/20170812142940742897_CodeUpdate/20170812142940742897_RESTHostCodeUpdate/20170812142940742897_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170812 14:29:43.490" starttime="20170812 14:29:43.490"></status>
</kw>
<status status="PASS" endtime="20170812 14:29:43.491" starttime="20170812 14:29:43.489"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170812 14:29:43.496" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170812142940742897_CodeUpdate/20170812142940742897_RESTHostCodeUpdate/20170812142940742897_BMC_general.txt"&gt;/home/fspcibld/logs/20170812142940742897_CodeUpdate/20170812142940742897_RESTHostCodeUpdate/20170812142940742897_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170812 14:29:43.497" starttime="20170812 14:29:43.496"></status>
</kw>
<status status="PASS" endtime="20170812 14:29:43.497" starttime="20170812 14:29:43.495"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170812 14:29:43.498" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170812142940742897_CodeUpdate/20170812142940742897_RESTHostCodeUpdate/20170812142940742897_BMC_general.txt"&gt;/home/fspcibld/logs/20170812142940742897_CodeUpdate/20170812142940742897_RESTHostCodeUpdate/20170812142940742897_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170812 14:29:43.498" starttime="20170812 14:29:43.497"></status>
</kw>
<status status="PASS" endtime="20170812 14:29:43.498" starttime="20170812 14:29:43.497"></status>
</kw>
<status status="PASS" endtime="20170812 14:29:43.498" starttime="20170812 14:29:43.488"></status>
</kw>
<status status="PASS" endtime="20170812 14:29:43.498" starttime="20170812 14:29:43.487"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170812 14:29:43.499" level="INFO">${cmd_buf} = BMC Execute Command  df -hT  ignore_err=1</msg>
<status status="PASS" endtime="20170812 14:29:43.499" starttime="20170812 14:29:43.498"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>df -hT</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170812 14:29:43.558" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.41.166.169
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170812 14:29:43.558" level="INFO">Executing command 'df -hT'.</msg>
<msg timestamp="20170812 14:29:43.634" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170812 14:29:43.634" starttime="20170812 14:29:43.526"></status>
</kw>
<msg timestamp="20170812 14:29:43.635" level="INFO">${status} = PASS</msg>
<msg timestamp="20170812 14:29:43.635" level="INFO">${ret_values} = (u'Filesystem           Type            Size      Used Available Use% Mounted on\ndev                  devtmpfs      210.2M         0    210.2M   0% /dev\ntmpfs                tmpfs         211.1M    ...</msg>
<status status="PASS" endtime="20170812 14:29:43.635" starttime="20170812 14:29:43.499"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170812 14:29:43.635" level="INFO">${stdout} = Filesystem           Type            Size      Used Available Use% Mounted on
dev                  devtmpfs      210.2M         0    210.2M   0% /dev
tmpfs                tmpfs         211.1M     14.1...</msg>
<status status="PASS" endtime="20170812 14:29:43.635" starttime="20170812 14:29:43.635"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170812 14:29:43.636" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170812 14:29:43.636" starttime="20170812 14:29:43.636"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170812 14:29:43.643" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170812142940742897_CodeUpdate/20170812142940742897_RESTHostCodeUpdate/20170812142940742897_BMC_general.txt"&gt;/home/fspcibld/logs/20170812142940742897_CodeUpdate/20170812142940742897_RESTHostCodeUpdate/20170812142940742897_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170812 14:29:43.643" starttime="20170812 14:29:43.643"></status>
</kw>
<status status="PASS" endtime="20170812 14:29:43.644" starttime="20170812 14:29:43.642"></status>
</kw>
<status status="PASS" endtime="20170812 14:29:43.644" starttime="20170812 14:29:43.637"></status>
</kw>
<status status="PASS" endtime="20170812 14:29:43.644" starttime="20170812 14:29:43.486"></status>
</kw>
<status status="PASS" endtime="20170812 14:29:43.644" starttime="20170812 14:29:43.486"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC OS', 'uname -a')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170812 14:29:43.647" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170812142940742897_CodeUpdate/20170812142940742897_RESTHostCodeUpdate/20170812142940742897_BMC_general.txt"&gt;/home/fspcibld/logs/20170812142940742897_CodeUpdate/20170812142940742897_RESTHostCodeUpdate/20170812142940742897_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170812 14:29:43.647" starttime="20170812 14:29:43.646"></status>
</kw>
<status status="PASS" endtime="20170812 14:29:43.647" starttime="20170812 14:29:43.646"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170812 14:29:43.648" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170812142940742897_CodeUpdate/20170812142940742897_RESTHostCodeUpdate/20170812142940742897_BMC_general.txt"&gt;/home/fspcibld/logs/20170812142940742897_CodeUpdate/20170812142940742897_RESTHostCodeUpdate/20170812142940742897_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170812 14:29:43.648" starttime="20170812 14:29:43.648"></status>
</kw>
<status status="PASS" endtime="20170812 14:29:43.649" starttime="20170812 14:29:43.647"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170812 14:29:43.650" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170812142940742897_CodeUpdate/20170812142940742897_RESTHostCodeUpdate/20170812142940742897_BMC_general.txt"&gt;/home/fspcibld/logs/20170812142940742897_CodeUpdate/20170812142940742897_RESTHostCodeUpdate/20170812142940742897_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170812 14:29:43.650" starttime="20170812 14:29:43.649"></status>
</kw>
<status status="PASS" endtime="20170812 14:29:43.650" starttime="20170812 14:29:43.649"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170812 14:29:43.651" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170812142940742897_CodeUpdate/20170812142940742897_RESTHostCodeUpdate/20170812142940742897_BMC_general.txt"&gt;/home/fspcibld/logs/20170812142940742897_CodeUpdate/20170812142940742897_RESTHostCodeUpdate/20170812142940742897_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170812 14:29:43.651" starttime="20170812 14:29:43.651"></status>
</kw>
<status status="PASS" endtime="20170812 14:29:43.651" starttime="20170812 14:29:43.650"></status>
</kw>
<status status="PASS" endtime="20170812 14:29:43.651" starttime="20170812 14:29:43.645"></status>
</kw>
<status status="PASS" endtime="20170812 14:29:43.651" starttime="20170812 14:29:43.645"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170812 14:29:43.652" level="INFO">${cmd_buf} = BMC Execute Command  uname -a  ignore_err=1</msg>
<status status="PASS" endtime="20170812 14:29:43.652" starttime="20170812 14:29:43.652"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>uname -a</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170812 14:29:43.710" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.41.166.169
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170812 14:29:43.710" level="INFO">Executing command 'uname -a'.</msg>
<msg timestamp="20170812 14:29:43.767" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170812 14:29:43.767" starttime="20170812 14:29:43.679"></status>
</kw>
<msg timestamp="20170812 14:29:43.767" level="INFO">${status} = PASS</msg>
<msg timestamp="20170812 14:29:43.767" level="INFO">${ret_values} = (u'Linux witherspoon 4.10.17-b8cd93f62581143a80ba5c0c61629031ce4a5240 #1 Sat Aug 12 14:07:25 UTC 2017 armv6l GNU/Linux', u'', 0)</msg>
<status status="PASS" endtime="20170812 14:29:43.767" starttime="20170812 14:29:43.653"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170812 14:29:43.768" level="INFO">${stdout} = Linux witherspoon 4.10.17-b8cd93f62581143a80ba5c0c61629031ce4a5240 #1 Sat Aug 12 14:07:25 UTC 2017 armv6l GNU/Linux</msg>
<status status="PASS" endtime="20170812 14:29:43.768" starttime="20170812 14:29:43.768"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170812 14:29:43.769" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170812 14:29:43.769" starttime="20170812 14:29:43.768"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170812 14:29:43.775" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170812142940742897_CodeUpdate/20170812142940742897_RESTHostCodeUpdate/20170812142940742897_BMC_general.txt"&gt;/home/fspcibld/logs/20170812142940742897_CodeUpdate/20170812142940742897_RESTHostCodeUpdate/20170812142940742897_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170812 14:29:43.775" starttime="20170812 14:29:43.775"></status>
</kw>
<status status="PASS" endtime="20170812 14:29:43.776" starttime="20170812 14:29:43.774"></status>
</kw>
<status status="PASS" endtime="20170812 14:29:43.776" starttime="20170812 14:29:43.769"></status>
</kw>
<status status="PASS" endtime="20170812 14:29:43.776" starttime="20170812 14:29:43.644"></status>
</kw>
<status status="PASS" endtime="20170812 14:29:43.776" starttime="20170812 14:29:43.644"></status>
</kw>
<status status="PASS" endtime="20170812 14:29:43.776" starttime="20170812 14:29:43.354"></status>
</kw>
<status status="PASS" endtime="20170812 14:29:43.776" starttime="20170812 14:29:43.352"></status>
</kw>
<status status="PASS" endtime="20170812 14:29:43.776" starttime="20170812 14:29:43.352"></status>
</kw>
<status status="PASS" endtime="20170812 14:29:43.776" starttime="20170812 14:29:41.770"></status>
</kw>
<status status="PASS" endtime="20170812 14:29:43.776" starttime="20170812 14:29:41.769"></status>
</kw>
<status status="PASS" endtime="20170812 14:29:43.776" starttime="20170812 14:29:41.746"></status>
</kw>
<status status="PASS" endtime="20170812 14:29:43.776" starttime="20170812 14:29:41.743"></status>
</kw>
<status status="PASS" endtime="20170812 14:29:43.776" starttime="20170812 14:29:41.743"></status>
</kw>
<kw type="foritem" name="${method} = ('Get Request FFDC', 'BMC FFDC Get Requests')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170812 14:29:43.778" starttime="20170812 14:29:43.778"></status>
</kw>
<msg timestamp="20170812 14:29:43.778" level="INFO">${status} = PASS</msg>
<msg timestamp="20170812 14:29:43.778" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170812 14:29:43.778" starttime="20170812 14:29:43.778"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170812 14:29:43.779" starttime="20170812 14:29:43.779"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Get Requests" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Get Ffdc Get Request Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170812 14:29:43.802" level="INFO">@{entries} = [ GET REQUESTS ]</msg>
<status status="PASS" endtime="20170812 14:29:43.802" starttime="20170812 14:29:43.802"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = GET REQUESTS">
<kw name="Log FFDC Get Requests" library="openbmc_ffdc_methods">
<doc>Create file in current FFDC log directory.</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Get Request" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170812 14:29:43.803" level="INFO">@{cmd_list} = [ ('BMC_elog', '/xyz/openbmc_project/logging/entry/enumerate') | ('BMC_sensor_list', '/org/openbmc/sensors/enumerate') | ('BMC_inventory', '/xyz/openbmc_project/inventory/enumerate') | ('BMC_led', '/o...</msg>
<status status="PASS" endtime="20170812 14:29:43.803" starttime="20170812 14:29:43.803"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC_elog', '/xyz/openbmc_project/logging/entry/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170812 14:29:43.804" level="INFO">${logpath} = /home/fspcibld/logs/20170812142940742897_CodeUpdate/20170812142940742897_RESTHostCodeUpdate/20170812142940742897_BMC_elog.txt</msg>
<status status="PASS" endtime="20170812 14:29:43.804" starttime="20170812 14:29:43.804"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170812 14:29:43.807" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170812 14:29:43.807" starttime="20170812 14:29:43.806"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170812 14:29:43.808" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170812 14:29:43.808" starttime="20170812 14:29:43.808"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170812 14:29:43.809" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170812 14:29:43.809" starttime="20170812 14:29:43.808"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170812 14:29:43.809" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170812 14:29:43.809" starttime="20170812 14:29:43.809"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170812 14:29:44.022" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170812 14:29:44.022" starttime="20170812 14:29:43.810"></status>
</kw>
<msg timestamp="20170812 14:29:44.022" level="INFO">${status} = PASS</msg>
<msg timestamp="20170812 14:29:44.022" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170812 14:29:44.022" starttime="20170812 14:29:43.810"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170812 14:29:44.023" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170812 14:29:44.023" starttime="20170812 14:29:44.023"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170812 14:29:44.024" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170812 14:29:44.024" starttime="20170812 14:29:44.023"></status>
</kw>
<status status="PASS" endtime="20170812 14:29:44.024" starttime="20170812 14:29:43.806"></status>
</kw>
<status status="PASS" endtime="20170812 14:29:44.024" starttime="20170812 14:29:43.805"></status>
</kw>
<status status="PASS" endtime="20170812 14:29:44.024" starttime="20170812 14:29:43.805"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170812 14:29:44.025" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/enumerate</msg>
<status status="PASS" endtime="20170812 14:29:44.025" starttime="20170812 14:29:44.025"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170812 14:29:44.026" starttime="20170812 14:29:44.025"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170812 14:29:44.145" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/enumerate, headers=None json=None</msg>
<msg timestamp="20170812 14:29:44.145" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170812 14:29:44.145" starttime="20170812 14:29:44.027"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170812 14:29:44.146" starttime="20170812 14:29:44.145"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170812 14:29:44.146" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170812 14:29:44.146" starttime="20170812 14:29:44.146"></status>
</kw>
<msg timestamp="20170812 14:29:44.147" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170812 14:29:44.147" starttime="20170812 14:29:43.804"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170812 14:29:44.148" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170812 14:29:44.148" starttime="20170812 14:29:44.147"></status>
</kw>
<msg timestamp="20170812 14:29:44.148" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170812 14:29:44.148" starttime="20170812 14:29:44.147"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20170812 14:29:44.148" starttime="20170812 14:29:44.148"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170812 14:29:44.149" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/logging/entry/1": {
      "AdditionalData": [], 
      "Id": 1, 
      "Message": "xyz.openbmc_project.Software.Version.Error.ManifestFileFailure", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1501775112990, 
      "associations": []
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170812 14:29:44.149" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170812 14:29:44.149" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/logging/entry/1": {
            "AdditionalData": [],
            "Id": 1,
            "Message": "xyz.openbmc_project.Software.Version.Error.ManifestFile...</msg>
<status status="PASS" endtime="20170812 14:29:44.149" starttime="20170812 14:29:44.149"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170812 14:29:44.151" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170812142940742897_CodeUpdate/20170812142940742897_RESTHostCodeUpdate/20170812142940742897_BMC_elog.txt"&gt;/home/fspcibld/logs/20170812142940742897_CodeUpdate/20170812142940742897_RESTHostCodeUpdate/20170812142940742897_BMC_elog.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170812 14:29:44.151" starttime="20170812 14:29:44.150"></status>
</kw>
<status status="PASS" endtime="20170812 14:29:44.151" starttime="20170812 14:29:44.149"></status>
</kw>
<status status="PASS" endtime="20170812 14:29:44.151" starttime="20170812 14:29:43.803"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_sensor_list', '/org/openbmc/sensors/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170812 14:29:44.152" level="INFO">${logpath} = /home/fspcibld/logs/20170812142940742897_CodeUpdate/20170812142940742897_RESTHostCodeUpdate/20170812142940742897_BMC_sensor_list.txt</msg>
<status status="PASS" endtime="20170812 14:29:44.152" starttime="20170812 14:29:44.151"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170812 14:29:44.155" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170812 14:29:44.155" starttime="20170812 14:29:44.154"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170812 14:29:44.156" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170812 14:29:44.156" starttime="20170812 14:29:44.156"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170812 14:29:44.157" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170812 14:29:44.157" starttime="20170812 14:29:44.156"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170812 14:29:44.157" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170812 14:29:44.157" starttime="20170812 14:29:44.157"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170812 14:29:44.366" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170812 14:29:44.366" starttime="20170812 14:29:44.158"></status>
</kw>
<msg timestamp="20170812 14:29:44.366" level="INFO">${status} = PASS</msg>
<msg timestamp="20170812 14:29:44.366" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170812 14:29:44.366" starttime="20170812 14:29:44.158"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170812 14:29:44.367" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170812 14:29:44.367" starttime="20170812 14:29:44.367"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170812 14:29:44.368" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170812 14:29:44.368" starttime="20170812 14:29:44.367"></status>
</kw>
<status status="PASS" endtime="20170812 14:29:44.368" starttime="20170812 14:29:44.154"></status>
</kw>
<status status="PASS" endtime="20170812 14:29:44.368" starttime="20170812 14:29:44.153"></status>
</kw>
<status status="PASS" endtime="20170812 14:29:44.368" starttime="20170812 14:29:44.153"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170812 14:29:44.369" level="INFO">${base_uri} = /org/openbmc/sensors/enumerate</msg>
<status status="PASS" endtime="20170812 14:29:44.369" starttime="20170812 14:29:44.368"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170812 14:29:44.369" starttime="20170812 14:29:44.369"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170812 14:29:44.568" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/enumerate, headers=None json=None</msg>
<msg timestamp="20170812 14:29:44.568" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170812 14:29:44.568" starttime="20170812 14:29:44.370"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170812 14:29:44.569" starttime="20170812 14:29:44.569"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170812 14:29:44.570" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170812 14:29:44.570" starttime="20170812 14:29:44.569"></status>
</kw>
<msg timestamp="20170812 14:29:44.570" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170812 14:29:44.570" starttime="20170812 14:29:44.152"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170812 14:29:44.571" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170812 14:29:44.571" starttime="20170812 14:29:44.571"></status>
</kw>
<msg timestamp="20170812 14:29:44.571" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170812 14:29:44.571" starttime="20170812 14:29:44.570"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20170812 14:29:44.572" starttime="20170812 14:29:44.572"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170812 14:29:44.573" level="INFO">To JSON using : content={
  "data": {
    "/org/openbmc/sensors/host/BootCount": {
      "error": 0, 
      "units": "", 
      "value": 3
    }, 
    "/org/openbmc/sensors/host/BootProgress": {
      "error": 0, 
      "units": "", 
      "value": "Off"
    }, 
    "/org/openbmc/sensors/host/OperatingSystemStatus": {
      "error": 0, 
      "units": "", 
      "value": "Off"
    }, 
    "/org/openbmc/sensors/host/PowerSupplyDerating": {
      "error": 0, 
      "units": "", 
      "value": 10
    }, 
    "/org/openbmc/sensors/host/PowerSupplyRedundancy": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/TurboAllowed": {
      "error": 0, 
      "units": "", 
      "value": 0
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170812 14:29:44.573" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170812 14:29:44.573" level="INFO">${jsondata} = {
    "data": {
        "/org/openbmc/sensors/host/BootCount": {
            "error": 0,
            "units": "",
            "value": 3
        },
        "/org/openbmc/sensors/host/BootProgress": {
...</msg>
<status status="PASS" endtime="20170812 14:29:44.573" starttime="20170812 14:29:44.572"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170812 14:29:44.574" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170812142940742897_CodeUpdate/20170812142940742897_RESTHostCodeUpdate/20170812142940742897_BMC_sensor_list.txt"&gt;/home/fspcibld/logs/20170812142940742897_CodeUpdate/20170812142940742897_RESTHostCodeUpdate/20170812142940742897_BMC_sensor_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170812 14:29:44.574" starttime="20170812 14:29:44.574"></status>
</kw>
<status status="PASS" endtime="20170812 14:29:44.575" starttime="20170812 14:29:44.573"></status>
</kw>
<status status="PASS" endtime="20170812 14:29:44.575" starttime="20170812 14:29:44.151"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_inventory', '/xyz/openbmc_project/inventory/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170812 14:29:44.575" level="INFO">${logpath} = /home/fspcibld/logs/20170812142940742897_CodeUpdate/20170812142940742897_RESTHostCodeUpdate/20170812142940742897_BMC_inventory.txt</msg>
<status status="PASS" endtime="20170812 14:29:44.575" starttime="20170812 14:29:44.575"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170812 14:29:44.578" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170812 14:29:44.579" starttime="20170812 14:29:44.578"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170812 14:29:44.579" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170812 14:29:44.579" starttime="20170812 14:29:44.579"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170812 14:29:44.580" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170812 14:29:44.580" starttime="20170812 14:29:44.580"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170812 14:29:44.581" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170812 14:29:44.581" starttime="20170812 14:29:44.580"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170812 14:29:44.793" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170812 14:29:44.793" starttime="20170812 14:29:44.582"></status>
</kw>
<msg timestamp="20170812 14:29:44.793" level="INFO">${status} = PASS</msg>
<msg timestamp="20170812 14:29:44.793" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170812 14:29:44.793" starttime="20170812 14:29:44.581"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170812 14:29:44.794" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170812 14:29:44.794" starttime="20170812 14:29:44.794"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170812 14:29:44.795" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170812 14:29:44.795" starttime="20170812 14:29:44.794"></status>
</kw>
<status status="PASS" endtime="20170812 14:29:44.795" starttime="20170812 14:29:44.577"></status>
</kw>
<status status="PASS" endtime="20170812 14:29:44.795" starttime="20170812 14:29:44.577"></status>
</kw>
<status status="PASS" endtime="20170812 14:29:44.795" starttime="20170812 14:29:44.576"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170812 14:29:44.796" level="INFO">${base_uri} = /xyz/openbmc_project/inventory/enumerate</msg>
<status status="PASS" endtime="20170812 14:29:44.797" starttime="20170812 14:29:44.795"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170812 14:29:44.798" starttime="20170812 14:29:44.797"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170812 14:29:45.020" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/inventory/enumerate, headers=None json=None</msg>
<msg timestamp="20170812 14:29:45.020" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170812 14:29:45.020" starttime="20170812 14:29:44.798"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170812 14:29:45.021" starttime="20170812 14:29:45.021"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170812 14:29:45.022" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170812 14:29:45.022" starttime="20170812 14:29:45.022"></status>
</kw>
<msg timestamp="20170812 14:29:45.022" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170812 14:29:45.022" starttime="20170812 14:29:44.576"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170812 14:29:45.023" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170812 14:29:45.023" starttime="20170812 14:29:45.023"></status>
</kw>
<msg timestamp="20170812 14:29:45.023" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170812 14:29:45.023" starttime="20170812 14:29:45.022"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20170812 14:29:45.024" starttime="20170812 14:29:45.024"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170812 14:29:45.025" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/inventory/system/chassis": {
      "AirCooled": 1, 
      "WaterCooled": 1
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc": {
      "BuildDate": "", 
      "FieldReplaceable": 0, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01DH051", 
      "Present": 1, 
      "PrettyName": "BMC PLANAR  ", 
      "SerialNumber": "000000000000"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc/ethernet": {
      "FieldReplaceable": 0, 
      "MACAddress": "00:00:00:00:00:00", 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/power_supply0": {
      "Present": 1, 
      "PrettyName": "power_supply0"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/power_supply1": {
      "Present": 1, 
      "PrettyName": "power_supply1"
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170812 14:29:45.025" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170812 14:29:45.025" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/inventory/system/chassis": {
            "AirCooled": 1,
            "WaterCooled": 1
        },
        "/xyz/openbmc_project/inventory/system/chassis/mo...</msg>
<status status="PASS" endtime="20170812 14:29:45.025" starttime="20170812 14:29:45.024"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170812 14:29:45.026" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170812142940742897_CodeUpdate/20170812142940742897_RESTHostCodeUpdate/20170812142940742897_BMC_inventory.txt"&gt;/home/fspcibld/logs/20170812142940742897_CodeUpdate/20170812142940742897_RESTHostCodeUpdate/20170812142940742897_BMC_inventory.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170812 14:29:45.026" starttime="20170812 14:29:45.026"></status>
</kw>
<status status="PASS" endtime="20170812 14:29:45.026" starttime="20170812 14:29:45.025"></status>
</kw>
<status status="PASS" endtime="20170812 14:29:45.026" starttime="20170812 14:29:44.575"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_led', '/org/openbmc/records/events/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170812 14:29:45.027" level="INFO">${logpath} = /home/fspcibld/logs/20170812142940742897_CodeUpdate/20170812142940742897_RESTHostCodeUpdate/20170812142940742897_BMC_led.txt</msg>
<status status="PASS" endtime="20170812 14:29:45.027" starttime="20170812 14:29:45.027"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170812 14:29:45.030" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170812 14:29:45.031" starttime="20170812 14:29:45.030"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170812 14:29:45.031" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170812 14:29:45.031" starttime="20170812 14:29:45.031"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170812 14:29:45.032" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170812 14:29:45.032" starttime="20170812 14:29:45.032"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170812 14:29:45.033" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170812 14:29:45.033" starttime="20170812 14:29:45.032"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170812 14:29:45.214" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170812 14:29:45.214" starttime="20170812 14:29:45.033"></status>
</kw>
<msg timestamp="20170812 14:29:45.214" level="INFO">${status} = PASS</msg>
<msg timestamp="20170812 14:29:45.214" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170812 14:29:45.214" starttime="20170812 14:29:45.033"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170812 14:29:45.215" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170812 14:29:45.215" starttime="20170812 14:29:45.215"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170812 14:29:45.216" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170812 14:29:45.216" starttime="20170812 14:29:45.215"></status>
</kw>
<status status="PASS" endtime="20170812 14:29:45.216" starttime="20170812 14:29:45.029"></status>
</kw>
<status status="PASS" endtime="20170812 14:29:45.216" starttime="20170812 14:29:45.029"></status>
</kw>
<status status="PASS" endtime="20170812 14:29:45.216" starttime="20170812 14:29:45.028"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170812 14:29:45.217" level="INFO">${base_uri} = /org/openbmc/records/events/enumerate</msg>
<status status="PASS" endtime="20170812 14:29:45.217" starttime="20170812 14:29:45.216"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170812 14:29:45.217" starttime="20170812 14:29:45.217"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170812 14:29:45.262" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/records/events/enumerate, headers=None json=None</msg>
<msg timestamp="20170812 14:29:45.262" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170812 14:29:45.262" starttime="20170812 14:29:45.218"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170812 14:29:45.263" starttime="20170812 14:29:45.263"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170812 14:29:45.263" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170812 14:29:45.264" starttime="20170812 14:29:45.263"></status>
</kw>
<msg timestamp="20170812 14:29:45.264" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170812 14:29:45.264" starttime="20170812 14:29:45.027"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170812 14:29:45.265" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170812 14:29:45.266" level="FAIL">404 != 200</msg>
<status status="FAIL" endtime="20170812 14:29:45.266" starttime="20170812 14:29:45.265"></status>
</kw>
<msg timestamp="20170812 14:29:45.266" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170812 14:29:45.266" starttime="20170812 14:29:45.264"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg timestamp="20170812 14:29:45.267" level="INFO">Continuing for loop from the next iteration.</msg>
<status status="PASS" endtime="20170812 14:29:45.268" starttime="20170812 14:29:45.267"></status>
</kw>
<status status="PASS" endtime="20170812 14:29:45.268" starttime="20170812 14:29:45.266"></status>
</kw>
<status status="PASS" endtime="20170812 14:29:45.268" starttime="20170812 14:29:45.027"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_record_log', '/org/openbmc/control/led/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170812 14:29:45.269" level="INFO">${logpath} = /home/fspcibld/logs/20170812142940742897_CodeUpdate/20170812142940742897_RESTHostCodeUpdate/20170812142940742897_BMC_record_log.txt</msg>
<status status="PASS" endtime="20170812 14:29:45.269" starttime="20170812 14:29:45.268"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170812 14:29:45.275" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170812 14:29:45.275" starttime="20170812 14:29:45.273"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170812 14:29:45.276" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170812 14:29:45.276" starttime="20170812 14:29:45.276"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170812 14:29:45.278" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170812 14:29:45.278" starttime="20170812 14:29:45.276"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170812 14:29:45.278" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170812 14:29:45.278" starttime="20170812 14:29:45.278"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170812 14:29:45.457" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170812 14:29:45.457" starttime="20170812 14:29:45.279"></status>
</kw>
<msg timestamp="20170812 14:29:45.458" level="INFO">${status} = PASS</msg>
<msg timestamp="20170812 14:29:45.458" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170812 14:29:45.458" starttime="20170812 14:29:45.279"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170812 14:29:45.458" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170812 14:29:45.458" starttime="20170812 14:29:45.458"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170812 14:29:45.459" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170812 14:29:45.459" starttime="20170812 14:29:45.459"></status>
</kw>
<status status="PASS" endtime="20170812 14:29:45.459" starttime="20170812 14:29:45.272"></status>
</kw>
<status status="PASS" endtime="20170812 14:29:45.459" starttime="20170812 14:29:45.271"></status>
</kw>
<status status="PASS" endtime="20170812 14:29:45.459" starttime="20170812 14:29:45.270"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170812 14:29:45.460" level="INFO">${base_uri} = /org/openbmc/control/led/enumerate</msg>
<status status="PASS" endtime="20170812 14:29:45.460" starttime="20170812 14:29:45.460"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170812 14:29:45.461" starttime="20170812 14:29:45.460"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170812 14:29:45.513" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/led/enumerate, headers=None json=None</msg>
<msg timestamp="20170812 14:29:45.514" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170812 14:29:45.514" starttime="20170812 14:29:45.461"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170812 14:29:45.515" starttime="20170812 14:29:45.514"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170812 14:29:45.515" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170812 14:29:45.515" starttime="20170812 14:29:45.515"></status>
</kw>
<msg timestamp="20170812 14:29:45.516" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170812 14:29:45.516" starttime="20170812 14:29:45.269"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170812 14:29:45.517" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170812 14:29:45.518" level="FAIL">404 != 200</msg>
<status status="FAIL" endtime="20170812 14:29:45.518" starttime="20170812 14:29:45.517"></status>
</kw>
<msg timestamp="20170812 14:29:45.518" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170812 14:29:45.518" starttime="20170812 14:29:45.517"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg timestamp="20170812 14:29:45.519" level="INFO">Continuing for loop from the next iteration.</msg>
<status status="PASS" endtime="20170812 14:29:45.519" starttime="20170812 14:29:45.519"></status>
</kw>
<status status="PASS" endtime="20170812 14:29:45.519" starttime="20170812 14:29:45.518"></status>
</kw>
<status status="PASS" endtime="20170812 14:29:45.519" starttime="20170812 14:29:45.268"></status>
</kw>
<status status="PASS" endtime="20170812 14:29:45.519" starttime="20170812 14:29:43.803"></status>
</kw>
<status status="PASS" endtime="20170812 14:29:45.519" starttime="20170812 14:29:43.802"></status>
</kw>
<status status="PASS" endtime="20170812 14:29:45.519" starttime="20170812 14:29:43.802"></status>
</kw>
<status status="PASS" endtime="20170812 14:29:45.519" starttime="20170812 14:29:43.802"></status>
</kw>
<status status="PASS" endtime="20170812 14:29:45.520" starttime="20170812 14:29:43.801"></status>
</kw>
<status status="PASS" endtime="20170812 14:29:45.520" starttime="20170812 14:29:43.779"></status>
</kw>
<status status="PASS" endtime="20170812 14:29:45.520" starttime="20170812 14:29:43.777"></status>
</kw>
<status status="PASS" endtime="20170812 14:29:45.520" starttime="20170812 14:29:43.777"></status>
</kw>
<kw type="foritem" name="${method} = ('Core Files', 'SCP Coredump Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170812 14:29:45.522" starttime="20170812 14:29:45.521"></status>
</kw>
<msg timestamp="20170812 14:29:45.522" level="INFO">${status} = PASS</msg>
<msg timestamp="20170812 14:29:45.522" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170812 14:29:45.522" starttime="20170812 14:29:45.521"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170812 14:29:45.522" starttime="20170812 14:29:45.522"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="SCP Coredump Files" library="openbmc_ffdc_methods">
<doc>Copy core dump file from BMC to local system.</doc>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>ls /tmp/core_*</arg>
</arguments>
<assign>
<var>${core_files}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20170812 14:29:45.575" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.41.166.169
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170812 14:29:45.575" level="INFO">Executing command 'ls /tmp/core_*'.</msg>
<msg timestamp="20170812 14:29:45.643" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20170812 14:29:45.661" level="INFO">${core_files} = None</msg>
<msg timestamp="20170812 14:29:45.661" level="INFO">${stderr} = None</msg>
<msg timestamp="20170812 14:29:45.661" level="INFO">${rc} = None</msg>
<msg timestamp="20170812 14:29:45.662" level="FAIL">#(UTC) 2017/08/12 14:29:45.651947 -    3.934864 - **ERROR** The prior SSH command returned a non-zero return code:
rc:                                               0x00000001
ls: /tmp/core_*: No such file or directory
: 1 != 0</msg>
<status status="FAIL" endtime="20170812 14:29:45.662" starttime="20170812 14:29:45.546"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${core_files}</arg>
</arguments>
<assign>
<var>@{core_list}</var>
</assign>
<msg timestamp="20170812 14:29:45.662" level="INFO">@{core_list} = [ ]</msg>
<msg timestamp="20170812 14:29:45.663" level="FAIL">AttributeError: 'NoneType' object has no attribute 'split'</msg>
<status status="FAIL" endtime="20170812 14:29:45.663" starttime="20170812 14:29:45.662"></status>
</kw>
<kw name="Run Key U" library="gen_robot_keyword">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>Open Connection for SCP</arg>
</arguments>
<kw name="Open Connection for SCP" library="connection_client">
<kw name="Import Library" library="BuiltIn">
<doc>Imports a library with the given name and optional arguments.</doc>
<arguments>
<arg>SCPLibrary</arg>
<arg>WITH NAME</arg>
<arg>scp</arg>
</arguments>
<status status="PASS" endtime="20170812 14:29:45.678" starttime="20170812 14:29:45.671"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' == '${EMPTY}'</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw name="Open Connection" library="scp">
<doc>Opens a new SCP connection to the given host.</doc>
<arguments>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<status status="PASS" endtime="20170812 14:29:46.378" starttime="20170812 14:29:45.679"></status>
</kw>
<status status="PASS" endtime="20170812 14:29:46.378" starttime="20170812 14:29:45.679"></status>
</kw>
<status status="PASS" endtime="20170812 14:29:46.379" starttime="20170812 14:29:45.670"></status>
</kw>
<status status="PASS" endtime="20170812 14:29:46.379" starttime="20170812 14:29:45.663"></status>
</kw>
<kw type="for" name="${index} IN [ @{core_list} ]">
<status status="PASS" endtime="20170812 14:29:46.379" starttime="20170812 14:29:46.379"></status>
</kw>
<status status="FAIL" endtime="20170812 14:29:46.379" starttime="20170812 14:29:45.545"></status>
</kw>
<status status="PASS" endtime="20170812 14:29:46.379" starttime="20170812 14:29:45.523"></status>
</kw>
<status status="PASS" endtime="20170812 14:29:46.380" starttime="20170812 14:29:45.520"></status>
</kw>
<status status="PASS" endtime="20170812 14:29:46.380" starttime="20170812 14:29:45.520"></status>
</kw>
<kw type="foritem" name="${method} = ('BMC Specific Files', 'BMC FFDC Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170812 14:29:46.382" starttime="20170812 14:29:46.381"></status>
</kw>
<msg timestamp="20170812 14:29:46.382" level="INFO">${status} = PASS</msg>
<msg timestamp="20170812 14:29:46.382" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170812 14:29:46.382" starttime="20170812 14:29:46.381"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170812 14:29:46.383" starttime="20170812 14:29:46.382"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Files" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Get Ffdc File Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170812 14:29:46.405" level="INFO">@{entries} = [ BMC FILES ]</msg>
<status status="PASS" endtime="20170812 14:29:46.406" starttime="20170812 14:29:46.405"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC FILES">
<kw name="Create File and Write Data" library="openbmc_ffdc_methods">
<doc>Create files to current FFDC log directory,</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc File" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170812 14:29:46.407" level="INFO">@{cmd_list} = [ ('BMC_proc_fd_active_list', 'ls -Al /proc/*/fd/') | ('BMC_procinfo', 'cat /proc/cpuinfo') | ('BMC_meminfo', 'cat /proc/meminfo') | ('BMC_proc_list', 'top -n 1 -b') | ('BMC_dmesg', 'dmesg') | ('BMC_j...</msg>
<status status="PASS" endtime="20170812 14:29:46.407" starttime="20170812 14:29:46.406"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC_proc_fd_active_list', 'ls -Al /proc/*/fd/')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170812 14:29:46.408" level="INFO">${logpath} = /home/fspcibld/logs/20170812142940742897_CodeUpdate/20170812142940742897_RESTHostCodeUpdate/20170812142940742897_BMC_proc_fd_active_list.txt</msg>
<status status="PASS" endtime="20170812 14:29:46.408" starttime="20170812 14:29:46.407"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170812 14:29:46.409" starttime="20170812 14:29:46.409"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170812 14:29:46.410" level="INFO">${cmd_buf} = BMC Execute Command  ls -Al /proc/*/fd/  ignore_err=1</msg>
<status status="PASS" endtime="20170812 14:29:46.410" starttime="20170812 14:29:46.410"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>ls -Al /proc/*/fd/</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170812 14:29:46.468" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.41.166.169
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170812 14:29:46.469" level="INFO">Executing command 'ls -Al /proc/*/fd/'.</msg>
<msg timestamp="20170812 14:29:47.121" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170812 14:29:47.122" starttime="20170812 14:29:46.436"></status>
</kw>
<msg timestamp="20170812 14:29:47.122" level="INFO">${status} = PASS</msg>
<msg timestamp="20170812 14:29:47.123" level="INFO">${ret_values} = (u'/proc/1/fd/:\ntotal 0\nlrwx------    1 root     root            64 Aug  3 15:51 0 -&gt; /dev/null\nlrwx------    1 root     root            64 Aug  3 15:51 1 -&gt; /dev/null\nlr-x------    1 root     roo...</msg>
<status status="PASS" endtime="20170812 14:29:47.123" starttime="20170812 14:29:46.410"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170812 14:29:47.124" level="INFO">${stdout} = /proc/1/fd/:
total 0
lrwx------    1 root     root            64 Aug  3 15:51 0 -&gt; /dev/null
lrwx------    1 root     root            64 Aug  3 15:51 1 -&gt; /dev/null
lr-x------    1 root     root      ...</msg>
<status status="PASS" endtime="20170812 14:29:47.124" starttime="20170812 14:29:47.124"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170812 14:29:47.125" level="INFO">${stderr} = ls: /proc/1362/fd/3: cannot read link: No such file or directory
ls: /proc/self/fd/3: cannot read link: No such file or directory
ls: /proc/thread-self/fd/3: cannot read link: No such file or director...</msg>
<status status="PASS" endtime="20170812 14:29:47.125" starttime="20170812 14:29:47.125"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170812 14:29:47.132" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170812142940742897_CodeUpdate/20170812142940742897_RESTHostCodeUpdate/20170812142940742897_BMC_proc_fd_active_list.txt"&gt;/home/fspcibld/logs/20170812142940742897_CodeUpdate/20170812142940742897_RESTHostCodeUpdate/20170812142940742897_BMC_proc_fd_active_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170812 14:29:47.132" starttime="20170812 14:29:47.132"></status>
</kw>
<status status="PASS" endtime="20170812 14:29:47.133" starttime="20170812 14:29:47.130"></status>
</kw>
<status status="PASS" endtime="20170812 14:29:47.133" starttime="20170812 14:29:47.125"></status>
</kw>
<status status="PASS" endtime="20170812 14:29:47.133" starttime="20170812 14:29:46.408"></status>
</kw>
<status status="PASS" endtime="20170812 14:29:47.133" starttime="20170812 14:29:46.407"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_procinfo', 'cat /proc/cpuinfo')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170812 14:29:47.134" level="INFO">${logpath} = /home/fspcibld/logs/20170812142940742897_CodeUpdate/20170812142940742897_RESTHostCodeUpdate/20170812142940742897_BMC_procinfo.txt</msg>
<status status="PASS" endtime="20170812 14:29:47.134" starttime="20170812 14:29:47.133"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170812 14:29:47.135" starttime="20170812 14:29:47.135"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170812 14:29:47.136" level="INFO">${cmd_buf} = BMC Execute Command  cat /proc/cpuinfo  ignore_err=1</msg>
<status status="PASS" endtime="20170812 14:29:47.136" starttime="20170812 14:29:47.135"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /proc/cpuinfo</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170812 14:29:47.195" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.41.166.169
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170812 14:29:47.196" level="INFO">Executing command 'cat /proc/cpuinfo'.</msg>
<msg timestamp="20170812 14:29:47.247" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170812 14:29:47.247" starttime="20170812 14:29:47.163"></status>
</kw>
<msg timestamp="20170812 14:29:47.247" level="INFO">${status} = PASS</msg>
<msg timestamp="20170812 14:29:47.247" level="INFO">${ret_values} = (u'processor\t: 0\nmodel name\t: ARMv6-compatible processor rev 7 (v6l)\nBogoMIPS\t: 789.70\nFeatures\t: half thumb fastmult edsp java tls \nCPU implementer\t: 0x41\nCPU architecture: 7\nCPU variant\t...</msg>
<status status="PASS" endtime="20170812 14:29:47.247" starttime="20170812 14:29:47.136"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170812 14:29:47.248" level="INFO">${stdout} = processor	: 0
model name	: ARMv6-compatible processor rev 7 (v6l)
BogoMIPS	: 789.70
Features	: half thumb fastmult edsp java tls 
CPU implementer	: 0x41
CPU architecture: 7
CPU variant	: 0x0
CPU part	...</msg>
<status status="PASS" endtime="20170812 14:29:47.248" starttime="20170812 14:29:47.248"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170812 14:29:47.249" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170812 14:29:47.249" starttime="20170812 14:29:47.248"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170812 14:29:47.255" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170812142940742897_CodeUpdate/20170812142940742897_RESTHostCodeUpdate/20170812142940742897_BMC_procinfo.txt"&gt;/home/fspcibld/logs/20170812142940742897_CodeUpdate/20170812142940742897_RESTHostCodeUpdate/20170812142940742897_BMC_procinfo.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170812 14:29:47.255" starttime="20170812 14:29:47.255"></status>
</kw>
<status status="PASS" endtime="20170812 14:29:47.256" starttime="20170812 14:29:47.254"></status>
</kw>
<status status="PASS" endtime="20170812 14:29:47.256" starttime="20170812 14:29:47.249"></status>
</kw>
<status status="PASS" endtime="20170812 14:29:47.256" starttime="20170812 14:29:47.134"></status>
</kw>
<status status="PASS" endtime="20170812 14:29:47.256" starttime="20170812 14:29:47.133"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_meminfo', 'cat /proc/meminfo')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170812 14:29:47.257" level="INFO">${logpath} = /home/fspcibld/logs/20170812142940742897_CodeUpdate/20170812142940742897_RESTHostCodeUpdate/20170812142940742897_BMC_meminfo.txt</msg>
<status status="PASS" endtime="20170812 14:29:47.257" starttime="20170812 14:29:47.256"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170812 14:29:47.258" starttime="20170812 14:29:47.258"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170812 14:29:47.259" level="INFO">${cmd_buf} = BMC Execute Command  cat /proc/meminfo  ignore_err=1</msg>
<status status="PASS" endtime="20170812 14:29:47.259" starttime="20170812 14:29:47.258"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /proc/meminfo</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170812 14:29:47.318" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.41.166.169
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170812 14:29:47.318" level="INFO">Executing command 'cat /proc/meminfo'.</msg>
<msg timestamp="20170812 14:29:47.364" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170812 14:29:47.365" starttime="20170812 14:29:47.285"></status>
</kw>
<msg timestamp="20170812 14:29:47.365" level="INFO">${status} = PASS</msg>
<msg timestamp="20170812 14:29:47.365" level="INFO">${ret_values} = (u'MemTotal:         432252 kB\nMemFree:          280316 kB\nMemAvailable:     326832 kB\nBuffers:           11304 kB\nCached:            52288 kB\nSwapCached:            0 kB\nActive:            9318...</msg>
<status status="PASS" endtime="20170812 14:29:47.365" starttime="20170812 14:29:47.259"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170812 14:29:47.366" level="INFO">${stdout} = MemTotal:         432252 kB
MemFree:          280316 kB
MemAvailable:     326832 kB
Buffers:           11304 kB
Cached:            52288 kB
SwapCached:            0 kB
Active:            93188 kB
Inac...</msg>
<status status="PASS" endtime="20170812 14:29:47.366" starttime="20170812 14:29:47.365"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170812 14:29:47.366" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170812 14:29:47.366" starttime="20170812 14:29:47.366"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170812 14:29:47.373" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170812142940742897_CodeUpdate/20170812142940742897_RESTHostCodeUpdate/20170812142940742897_BMC_meminfo.txt"&gt;/home/fspcibld/logs/20170812142940742897_CodeUpdate/20170812142940742897_RESTHostCodeUpdate/20170812142940742897_BMC_meminfo.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170812 14:29:47.373" starttime="20170812 14:29:47.372"></status>
</kw>
<status status="PASS" endtime="20170812 14:29:47.373" starttime="20170812 14:29:47.372"></status>
</kw>
<status status="PASS" endtime="20170812 14:29:47.373" starttime="20170812 14:29:47.366"></status>
</kw>
<status status="PASS" endtime="20170812 14:29:47.373" starttime="20170812 14:29:47.257"></status>
</kw>
<status status="PASS" endtime="20170812 14:29:47.373" starttime="20170812 14:29:47.256"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_proc_list', 'top -n 1 -b')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170812 14:29:47.374" level="INFO">${logpath} = /home/fspcibld/logs/20170812142940742897_CodeUpdate/20170812142940742897_RESTHostCodeUpdate/20170812142940742897_BMC_proc_list.txt</msg>
<status status="PASS" endtime="20170812 14:29:47.374" starttime="20170812 14:29:47.374"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170812 14:29:47.375" starttime="20170812 14:29:47.375"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170812 14:29:47.376" level="INFO">${cmd_buf} = BMC Execute Command  top -n 1 -b  ignore_err=1</msg>
<status status="PASS" endtime="20170812 14:29:47.376" starttime="20170812 14:29:47.376"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>top -n 1 -b</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170812 14:29:47.434" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.41.166.169
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170812 14:29:47.435" level="INFO">Executing command 'top -n 1 -b'.</msg>
<msg timestamp="20170812 14:29:47.728" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170812 14:29:47.728" starttime="20170812 14:29:47.403"></status>
</kw>
<msg timestamp="20170812 14:29:47.728" level="INFO">${status} = PASS</msg>
<msg timestamp="20170812 14:29:47.728" level="INFO">${ret_values} = (u'Mem: 151936K used, 280316K free, 14524K shrd, 11304K buff, 52292K cached\nCPU:  15% usr   7% sys   0% nic  76% idle   0% io   0% irq   0% sirq\nLoad average: 1.15 1.49 1.01 1/146 1365\n  PID  PPID ...</msg>
<status status="PASS" endtime="20170812 14:29:47.728" starttime="20170812 14:29:47.376"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170812 14:29:47.729" level="INFO">${stdout} = Mem: 151936K used, 280316K free, 14524K shrd, 11304K buff, 52292K cached
CPU:  15% usr   7% sys   0% nic  76% idle   0% io   0% irq   0% sirq
Load average: 1.15 1.49 1.01 1/146 1365
  PID  PPID USER  ...</msg>
<status status="PASS" endtime="20170812 14:29:47.729" starttime="20170812 14:29:47.729"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170812 14:29:47.730" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170812 14:29:47.730" starttime="20170812 14:29:47.729"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170812 14:29:47.736" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170812142940742897_CodeUpdate/20170812142940742897_RESTHostCodeUpdate/20170812142940742897_BMC_proc_list.txt"&gt;/home/fspcibld/logs/20170812142940742897_CodeUpdate/20170812142940742897_RESTHostCodeUpdate/20170812142940742897_BMC_proc_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170812 14:29:47.736" starttime="20170812 14:29:47.736"></status>
</kw>
<status status="PASS" endtime="20170812 14:29:47.737" starttime="20170812 14:29:47.735"></status>
</kw>
<status status="PASS" endtime="20170812 14:29:47.737" starttime="20170812 14:29:47.730"></status>
</kw>
<status status="PASS" endtime="20170812 14:29:47.737" starttime="20170812 14:29:47.374"></status>
</kw>
<status status="PASS" endtime="20170812 14:29:47.737" starttime="20170812 14:29:47.373"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_dmesg', 'dmesg')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170812 14:29:47.738" level="INFO">${logpath} = /home/fspcibld/logs/20170812142940742897_CodeUpdate/20170812142940742897_RESTHostCodeUpdate/20170812142940742897_BMC_dmesg.txt</msg>
<status status="PASS" endtime="20170812 14:29:47.738" starttime="20170812 14:29:47.737"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170812 14:29:47.739" starttime="20170812 14:29:47.739"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170812 14:29:47.740" level="INFO">${cmd_buf} = BMC Execute Command  dmesg  ignore_err=1</msg>
<status status="PASS" endtime="20170812 14:29:47.740" starttime="20170812 14:29:47.739"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>dmesg</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170812 14:29:47.798" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.41.166.169
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170812 14:29:47.799" level="INFO">Executing command 'dmesg'.</msg>
<msg timestamp="20170812 14:29:47.855" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170812 14:29:47.856" starttime="20170812 14:29:47.767"></status>
</kw>
<msg timestamp="20170812 14:29:47.856" level="INFO">${status} = PASS</msg>
<msg timestamp="20170812 14:29:47.856" level="INFO">${ret_values} = (u'[    0.000000] Virtual kernel memory layout:\n[    0.000000]     vector  : 0xffff0000 - 0xffff1000   (   4 kB)\n[    0.000000]     fixmap  : 0xffc00000 - 0xfff00000   (3072 kB)\n[    0.000000]     ...</msg>
<status status="PASS" endtime="20170812 14:29:47.856" starttime="20170812 14:29:47.740"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170812 14:29:47.857" level="INFO">${stdout} = [    0.000000] Virtual kernel memory layout:
[    0.000000]     vector  : 0xffff0000 - 0xffff1000   (   4 kB)
[    0.000000]     fixmap  : 0xffc00000 - 0xfff00000   (3072 kB)
[    0.000000]     vmallo...</msg>
<status status="PASS" endtime="20170812 14:29:47.857" starttime="20170812 14:29:47.857"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170812 14:29:47.858" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170812 14:29:47.858" starttime="20170812 14:29:47.857"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170812 14:29:47.864" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170812142940742897_CodeUpdate/20170812142940742897_RESTHostCodeUpdate/20170812142940742897_BMC_dmesg.txt"&gt;/home/fspcibld/logs/20170812142940742897_CodeUpdate/20170812142940742897_RESTHostCodeUpdate/20170812142940742897_BMC_dmesg.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170812 14:29:47.864" starttime="20170812 14:29:47.864"></status>
</kw>
<status status="PASS" endtime="20170812 14:29:47.865" starttime="20170812 14:29:47.863"></status>
</kw>
<status status="PASS" endtime="20170812 14:29:47.865" starttime="20170812 14:29:47.858"></status>
</kw>
<status status="PASS" endtime="20170812 14:29:47.865" starttime="20170812 14:29:47.738"></status>
</kw>
<status status="PASS" endtime="20170812 14:29:47.865" starttime="20170812 14:29:47.737"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_journalctl', 'journalctl --no-pager')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170812 14:29:47.866" level="INFO">${logpath} = /home/fspcibld/logs/20170812142940742897_CodeUpdate/20170812142940742897_RESTHostCodeUpdate/20170812142940742897_BMC_journalctl.txt</msg>
<status status="PASS" endtime="20170812 14:29:47.866" starttime="20170812 14:29:47.865"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170812 14:29:47.867" starttime="20170812 14:29:47.867"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170812 14:29:47.868" level="INFO">${cmd_buf} = BMC Execute Command  journalctl --no-pager  ignore_err=1</msg>
<status status="PASS" endtime="20170812 14:29:47.868" starttime="20170812 14:29:47.867"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>journalctl --no-pager</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170812 14:29:47.926" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.41.166.169
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170812 14:29:47.927" level="INFO">Executing command 'journalctl --no-pager'.</msg>
<msg timestamp="20170812 14:29:49.166" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170812 14:29:49.166" starttime="20170812 14:29:47.894"></status>
</kw>
<msg timestamp="20170812 14:29:49.166" level="INFO">${status} = PASS</msg>
<msg timestamp="20170812 14:29:49.168" level="INFO">${ret_values} = (u'-- Logs begin at Thu 2017-08-03 15:42:59 UTC, end at Thu 2017-08-03 15:51:46 UTC. --\nAug 03 15:42:59 witherspoon kernel: Booting Linux on physical CPU 0x0\nAug 03 15:42:59 witherspoon kernel: Linu...</msg>
<status status="PASS" endtime="20170812 14:29:49.169" starttime="20170812 14:29:47.868"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170812 14:29:49.170" level="INFO">${stdout} = -- Logs begin at Thu 2017-08-03 15:42:59 UTC, end at Thu 2017-08-03 15:51:46 UTC. --
Aug 03 15:42:59 witherspoon kernel: Booting Linux on physical CPU 0x0
Aug 03 15:42:59 witherspoon kernel: Linux ver...</msg>
<status status="PASS" endtime="20170812 14:29:49.170" starttime="20170812 14:29:49.169"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170812 14:29:49.170" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170812 14:29:49.170" starttime="20170812 14:29:49.170"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170812 14:29:49.178" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170812142940742897_CodeUpdate/20170812142940742897_RESTHostCodeUpdate/20170812142940742897_BMC_journalctl.txt"&gt;/home/fspcibld/logs/20170812142940742897_CodeUpdate/20170812142940742897_RESTHostCodeUpdate/20170812142940742897_BMC_journalctl.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170812 14:29:49.178" starttime="20170812 14:29:49.177"></status>
</kw>
<status status="PASS" endtime="20170812 14:29:49.179" starttime="20170812 14:29:49.176"></status>
</kw>
<status status="PASS" endtime="20170812 14:29:49.179" starttime="20170812 14:29:49.171"></status>
</kw>
<status status="PASS" endtime="20170812 14:29:49.179" starttime="20170812 14:29:47.866"></status>
</kw>
<status status="PASS" endtime="20170812 14:29:49.179" starttime="20170812 14:29:47.865"></status>
</kw>
<status status="PASS" endtime="20170812 14:29:49.179" starttime="20170812 14:29:46.407"></status>
</kw>
<status status="PASS" endtime="20170812 14:29:49.179" starttime="20170812 14:29:46.406"></status>
</kw>
<status status="PASS" endtime="20170812 14:29:49.179" starttime="20170812 14:29:46.406"></status>
</kw>
<status status="PASS" endtime="20170812 14:29:49.179" starttime="20170812 14:29:46.406"></status>
</kw>
<status status="PASS" endtime="20170812 14:29:49.179" starttime="20170812 14:29:46.405"></status>
</kw>
<status status="PASS" endtime="20170812 14:29:49.179" starttime="20170812 14:29:46.383"></status>
</kw>
<status status="PASS" endtime="20170812 14:29:49.179" starttime="20170812 14:29:46.380"></status>
</kw>
<status status="PASS" endtime="20170812 14:29:49.179" starttime="20170812 14:29:46.380"></status>
</kw>
<kw type="foritem" name="${method} = ('SEL Log', 'Collect eSEL Log')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170812 14:29:49.181" starttime="20170812 14:29:49.181"></status>
</kw>
<msg timestamp="20170812 14:29:49.181" level="INFO">${status} = PASS</msg>
<msg timestamp="20170812 14:29:49.181" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170812 14:29:49.182" starttime="20170812 14:29:49.181"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170812 14:29:49.182" starttime="20170812 14:29:49.182"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="Collect eSEL Log" library="openbmc_ffdc_methods">
<doc>Collect eSEL log from logging entry and convert eSEL data</doc>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${BMC_LOGGING_ENTRY}/enumerate</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170812 14:29:49.208" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170812 14:29:49.208" starttime="20170812 14:29:49.207"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170812 14:29:49.209" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170812 14:29:49.209" starttime="20170812 14:29:49.208"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170812 14:29:49.210" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170812 14:29:49.210" starttime="20170812 14:29:49.209"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170812 14:29:49.210" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170812 14:29:49.210" starttime="20170812 14:29:49.210"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170812 14:29:49.444" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170812 14:29:49.444" starttime="20170812 14:29:49.211"></status>
</kw>
<msg timestamp="20170812 14:29:49.445" level="INFO">${status} = PASS</msg>
<msg timestamp="20170812 14:29:49.445" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170812 14:29:49.445" starttime="20170812 14:29:49.211"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170812 14:29:49.445" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170812 14:29:49.445" starttime="20170812 14:29:49.445"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170812 14:29:49.446" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170812 14:29:49.446" starttime="20170812 14:29:49.446"></status>
</kw>
<status status="PASS" endtime="20170812 14:29:49.446" starttime="20170812 14:29:49.207"></status>
</kw>
<status status="PASS" endtime="20170812 14:29:49.446" starttime="20170812 14:29:49.206"></status>
</kw>
<status status="PASS" endtime="20170812 14:29:49.446" starttime="20170812 14:29:49.206"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170812 14:29:49.447" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry//enumerate</msg>
<status status="PASS" endtime="20170812 14:29:49.447" starttime="20170812 14:29:49.447"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170812 14:29:49.448" starttime="20170812 14:29:49.447"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170812 14:29:49.582" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry//enumerate, headers=None json=None</msg>
<msg timestamp="20170812 14:29:49.582" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170812 14:29:49.582" starttime="20170812 14:29:49.448"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170812 14:29:49.583" starttime="20170812 14:29:49.583"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170812 14:29:49.583" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170812 14:29:49.584" starttime="20170812 14:29:49.583"></status>
</kw>
<msg timestamp="20170812 14:29:49.584" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170812 14:29:49.584" starttime="20170812 14:29:49.205"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170812 14:29:49.585" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170812 14:29:49.585" starttime="20170812 14:29:49.585"></status>
</kw>
<msg timestamp="20170812 14:29:49.585" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170812 14:29:49.585" starttime="20170812 14:29:49.584"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
</arguments>
<status status="PASS" endtime="20170812 14:29:49.586" starttime="20170812 14:29:49.585"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170812 14:29:49.587" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/logging/entry/1": {
      "AdditionalData": [], 
      "Id": 1, 
      "Message": "xyz.openbmc_project.Software.Version.Error.ManifestFileFailure", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1501775112990, 
      "associations": []
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170812 14:29:49.587" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170812 14:29:49.587" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'/xyz/openbmc_project/logging/entry/1': {u'Resolved': 0, u'AdditionalData': [], u'Severity': u'xyz.openbmc_project.Logging.Entry.Level.Error', u'Ti...</msg>
<status status="PASS" endtime="20170812 14:29:49.587" starttime="20170812 14:29:49.586"></status>
</kw>
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary``.</doc>
<arguments>
<arg>${content['data']}</arg>
</arguments>
<assign>
<var>${esel_list}</var>
</assign>
<msg timestamp="20170812 14:29:49.587" level="INFO">${esel_list} = [u'/xyz/openbmc_project/logging/entry/1']</msg>
<status status="PASS" endtime="20170812 14:29:49.588" starttime="20170812 14:29:49.587"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>esel</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170812 14:29:49.588" level="INFO">${logpath} = /home/fspcibld/logs/20170812142940742897_CodeUpdate/20170812142940742897_RESTHostCodeUpdate/20170812142940742897_esel</msg>
<status status="PASS" endtime="20170812 14:29:49.588" starttime="20170812 14:29:49.588"></status>
</kw>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${logpath}</arg>
</arguments>
<msg timestamp="20170812 14:29:49.589" html="yes" level="INFO">Created file '&lt;a href="file:///home/fspcibld/logs/20170812142940742897_CodeUpdate/20170812142940742897_RESTHostCodeUpdate/20170812142940742897_esel"&gt;/home/fspcibld/logs/20170812142940742897_CodeUpdate/20170812142940742897_RESTHostCodeUpdate/20170812142940742897_esel&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170812 14:29:49.589" starttime="20170812 14:29:49.588"></status>
</kw>
<kw type="for" name="${entry_path} IN [ @{esel_list} ]">
<kw type="foritem" name="${entry_path} = /xyz/openbmc_project/logging/entry/1">
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status status="PASS" endtime="20170812 14:29:49.590" starttime="20170812 14:29:49.589"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170812 14:29:49.593" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170812 14:29:49.594" starttime="20170812 14:29:49.593"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170812 14:29:49.594" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170812 14:29:49.594" starttime="20170812 14:29:49.594"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170812 14:29:49.595" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170812 14:29:49.595" starttime="20170812 14:29:49.595"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170812 14:29:49.596" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170812 14:29:49.596" starttime="20170812 14:29:49.595"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170812 14:29:49.776" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170812 14:29:49.777" starttime="20170812 14:29:49.597"></status>
</kw>
<msg timestamp="20170812 14:29:49.777" level="INFO">${status} = PASS</msg>
<msg timestamp="20170812 14:29:49.777" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170812 14:29:49.777" starttime="20170812 14:29:49.596"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170812 14:29:49.778" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170812 14:29:49.778" starttime="20170812 14:29:49.777"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170812 14:29:49.778" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170812 14:29:49.778" starttime="20170812 14:29:49.778"></status>
</kw>
<status status="PASS" endtime="20170812 14:29:49.778" starttime="20170812 14:29:49.592"></status>
</kw>
<status status="PASS" endtime="20170812 14:29:49.779" starttime="20170812 14:29:49.592"></status>
</kw>
<status status="PASS" endtime="20170812 14:29:49.779" starttime="20170812 14:29:49.591"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170812 14:29:49.779" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/1/attr/AdditionalData</msg>
<status status="PASS" endtime="20170812 14:29:49.779" starttime="20170812 14:29:49.779"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170812 14:29:49.780" starttime="20170812 14:29:49.780"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170812 14:29:49.864" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/1/attr/AdditionalData, headers=None json=None</msg>
<msg timestamp="20170812 14:29:49.865" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170812 14:29:49.865" starttime="20170812 14:29:49.780"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170812 14:29:49.865" starttime="20170812 14:29:49.865"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170812 14:29:49.866" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170812 14:29:49.866" starttime="20170812 14:29:49.866"></status>
</kw>
<msg timestamp="20170812 14:29:49.866" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170812 14:29:49.866" starttime="20170812 14:29:49.591"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170812 14:29:49.867" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170812 14:29:49.867" starttime="20170812 14:29:49.866"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170812 14:29:49.867" level="INFO">To JSON using : content={
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170812 14:29:49.867" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170812 14:29:49.868" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': []}</msg>
<status status="PASS" endtime="20170812 14:29:49.868" starttime="20170812 14:29:49.867"></status>
</kw>
<msg timestamp="20170812 14:29:49.868" level="INFO">${esel_data} = []</msg>
<status status="PASS" endtime="20170812 14:29:49.868" starttime="20170812 14:29:49.590"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg timestamp="20170812 14:29:49.868" level="INFO">Length is 0</msg>
<msg timestamp="20170812 14:29:49.869" level="INFO">${length} = 0</msg>
<status status="PASS" endtime="20170812 14:29:49.869" starttime="20170812 14:29:49.868"></status>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<msg timestamp="20170812 14:29:49.869" level="INFO">Continuing for loop from the next iteration.</msg>
<status status="PASS" endtime="20170812 14:29:49.870" starttime="20170812 14:29:49.869"></status>
</kw>
<status status="PASS" endtime="20170812 14:29:49.870" starttime="20170812 14:29:49.589"></status>
</kw>
<status status="PASS" endtime="20170812 14:29:49.870" starttime="20170812 14:29:49.589"></status>
</kw>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>which eSEL.pl</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<msg timestamp="20170812 14:29:49.886" level="INFO">Running command 'which eSEL.pl 2&gt;&amp;1'.</msg>
<msg timestamp="20170812 14:29:49.902" level="INFO">${out} = </msg>
<status status="PASS" endtime="20170812 14:29:49.902" starttime="20170812 14:29:49.870"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${out}</arg>
<arg>eSEL.pl</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${out}</arg>
<arg>eSEL.pl</arg>
</arguments>
<msg timestamp="20170812 14:29:49.922" level="FAIL">'' does not contain 'eSEL.pl'</msg>
<status status="FAIL" endtime="20170812 14:29:49.922" starttime="20170812 14:29:49.920"></status>
</kw>
<msg timestamp="20170812 14:29:49.922" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170812 14:29:49.922" starttime="20170812 14:29:49.915"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
</arguments>
<msg timestamp="20170812 14:29:49.924" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20170812 14:29:49.925" starttime="20170812 14:29:49.923"></status>
</kw>
<status status="PASS" endtime="20170812 14:29:49.926" starttime="20170812 14:29:49.205"></status>
</kw>
<status status="PASS" endtime="20170812 14:29:49.926" starttime="20170812 14:29:49.182"></status>
</kw>
<status status="PASS" endtime="20170812 14:29:49.926" starttime="20170812 14:29:49.180"></status>
</kw>
<status status="PASS" endtime="20170812 14:29:49.926" starttime="20170812 14:29:49.179"></status>
</kw>
<kw type="foritem" name="${method} = ('OS FFDC', 'OS FFDC Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170812 14:29:49.932" starttime="20170812 14:29:49.932"></status>
</kw>
<msg timestamp="20170812 14:29:49.932" level="INFO">${status} = PASS</msg>
<msg timestamp="20170812 14:29:49.932" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170812 14:29:49.932" starttime="20170812 14:29:49.931"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170812 14:29:49.933" starttime="20170812 14:29:49.933"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="OS FFDC Files" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${OS_HOST}' == '${EMPTY}'</arg>
<arg>No OS Host Provided</arg>
</arguments>
<msg timestamp="20170812 14:29:49.974" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20170812 14:29:49.974" starttime="20170812 14:29:49.974"></status>
</kw>
<status status="PASS" endtime="20170812 14:29:49.974" starttime="20170812 14:29:49.973"></status>
</kw>
<status status="PASS" endtime="20170812 14:29:49.975" starttime="20170812 14:29:49.933"></status>
</kw>
<status status="PASS" endtime="20170812 14:29:49.975" starttime="20170812 14:29:49.927"></status>
</kw>
<status status="PASS" endtime="20170812 14:29:49.975" starttime="20170812 14:29:49.926"></status>
</kw>
<status status="PASS" endtime="20170812 14:29:49.975" starttime="20170812 14:29:41.743"></status>
</kw>
<status status="PASS" endtime="20170812 14:29:49.975" starttime="20170812 14:29:41.740"></status>
</kw>
<status status="PASS" endtime="20170812 14:29:49.975" starttime="20170812 14:29:41.739"></status>
</kw>
<status status="PASS" endtime="20170812 14:29:49.975" starttime="20170812 14:29:41.739"></status>
</kw>
<kw name="Run Key U" library="gen_robot_keyword">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>SSHLibrary.Close All Connections</arg>
</arguments>
<kw name="Close All Connections" library="SSHLibrary">
<doc>Closes all open connections.</doc>
<status status="PASS" endtime="20170812 14:29:49.983" starttime="20170812 14:29:49.981"></status>
</kw>
<status status="PASS" endtime="20170812 14:29:49.983" starttime="20170812 14:29:49.976"></status>
</kw>
<status status="PASS" endtime="20170812 14:29:49.983" starttime="20170812 14:29:41.738"></status>
</kw>
<status status="PASS" endtime="20170812 14:29:49.983" starttime="20170812 14:29:37.677"></status>
</kw>
<status status="PASS" endtime="20170812 14:29:49.983" starttime="20170812 14:29:37.676"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}'=='True'</arg>
<arg>Recover Quiesced Host</arg>
</arguments>
<status status="PASS" endtime="20170812 14:29:49.984" starttime="20170812 14:29:49.983"></status>
</kw>
<kw name="Log Test Case Status" library="openbmc_ffdc_methods">
<doc>Test case execution result history.</doc>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH_STYLE}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH_STYLE}</var>
</assign>
<msg timestamp="20170812 14:29:49.995" level="INFO">${FFDC_DIR_PATH_STYLE} = </msg>
<status status="PASS" endtime="20170812 14:29:49.995" starttime="20170812 14:29:49.984"></status>
</kw>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH}</var>
</assign>
<msg timestamp="20170812 14:29:49.996" level="INFO">${FFDC_DIR_PATH} = /home/fspcibld/logs/20170812142940742897_CodeUpdate/20170812142940742897_RESTHostCodeUpdate/</msg>
<status status="PASS" endtime="20170812 14:29:49.996" starttime="20170812 14:29:49.996"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH}' == '${EMPTY}'</arg>
<arg>Set FFDC Defaults</arg>
</arguments>
<status status="PASS" endtime="20170812 14:29:49.997" starttime="20170812 14:29:49.996"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH_STYLE}' == '${1}'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${FFDC_LOG_PATH}</arg>
<arg>${FFDC_DIR_PATH}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${TEST_HISTORY}</arg>
<arg>${FFDC_DIR_PATH}test_history.txt</arg>
</arguments>
<status status="PASS" endtime="20170812 14:29:49.997" starttime="20170812 14:29:49.997"></status>
</kw>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg timestamp="20170812 14:29:49.998" html="yes" level="INFO">Directory '&lt;a href="file:///home/fspcibld/logs"&gt;/home/fspcibld/logs&lt;/a&gt;' already exists.</msg>
<status status="PASS" endtime="20170812 14:29:49.998" starttime="20170812 14:29:49.998"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg timestamp="20170812 14:29:49.999" html="yes" level="INFO">File '&lt;a href="file:///home/fspcibld/logs/test_history.txt"&gt;/home/fspcibld/logs/test_history.txt&lt;/a&gt;' exists.</msg>
<status status="PASS" endtime="20170812 14:29:49.999" starttime="20170812 14:29:49.999"></status>
</kw>
<msg timestamp="20170812 14:29:49.999" level="INFO">${exist} = True</msg>
<status status="PASS" endtime="20170812 14:29:49.999" starttime="20170812 14:29:49.998"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<status status="PASS" endtime="20170812 14:29:50.000" starttime="20170812 14:29:50.000"></status>
</kw>
<kw name="Rpvars" library="gen_robot_print">
<arguments>
<arg>TEST_HISTORY</arg>
</arguments>
<status status="PASS" endtime="20170812 14:29:50.001" starttime="20170812 14:29:50.000"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170812 14:29:50.002" level="INFO">${cur_time} = 2017-08-12 14:29:50:001640</msg>
<status status="PASS" endtime="20170812 14:29:50.002" starttime="20170812 14:29:50.001"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170812 14:29:50.002" level="INFO">${cur_time} = 20170812142950001640</msg>
<status status="PASS" endtime="20170812 14:29:50.002" starttime="20170812 14:29:50.002"></status>
</kw>
<msg timestamp="20170812 14:29:50.003" level="INFO">${cur_time} = 20170812142950001640</msg>
<status status="PASS" endtime="20170812 14:29:50.003" starttime="20170812 14:29:50.001"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg timestamp="20170812 14:29:50.003" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/test_history.txt"&gt;/home/fspcibld/logs/test_history.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170812 14:29:50.004" starttime="20170812 14:29:50.003"></status>
</kw>
<status status="PASS" endtime="20170812 14:29:50.004" starttime="20170812 14:29:49.984"></status>
</kw>
<status status="PASS" endtime="20170812 14:29:50.004" starttime="20170812 14:29:37.010"></status>
</kw>
<status status="PASS" endtime="20170812 14:29:50.004" starttime="20170812 14:29:34.995"></status>
</kw>
<doc>Do a PNOR code update by uploading image on BMC via REST.</doc>
<tags>
<tag>REST_Host_Code_Update</tag>
</tags>
<status status="FAIL" endtime="20170812 14:29:50.004" critical="yes" starttime="20170812 14:22:59.488">xyz.openbmc_project.Software.Activation.Activations.Invalid != xyz.openbmc_project.Software.Activation.Activations.Active</status>
</test>
<doc>Code update to a target BMC.
Execution Method:
python -m robot -v OPENBMC_HOST:&lt;hostname&gt;
-v DELETE_OLD_PNOR_IMAGES:&lt;"true" or "false"&gt;
-v IMAGE_FILE_PATH:&lt;path/*.tar&gt; code_update.robot

Code update method BMC
Update work flow sequence:
- Upload image via REST
- Verify that the file exists on the BMC
- Check software "Activation" status to be "Ready"
- Set "Requested Activation" to "Active"
- Wait for code update to complete
- Verify the new version</doc>
<status status="FAIL" endtime="20170812 14:29:50.005" starttime="20170812 14:22:58.998"></status>
</suite>
<statistics>
<total>
<stat fail="1" pass="0">Critical Tests</stat>
<stat fail="1" pass="0">All Tests</stat>
</total>
<tag>
<stat fail="1" pass="0">REST_Host_Code_Update</stat>
</tag>
<suite>
<stat fail="1" id="s1" name="Code Update" pass="0">Code Update</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
