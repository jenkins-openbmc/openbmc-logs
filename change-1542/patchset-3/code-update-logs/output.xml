<?xml version="1.0" encoding="UTF-8"?>
<robot generated="20161219 06:25:40.139" generator="Robot 3.0 (Python 2.7.12 on linux2)">
<suite source="/home/fspcibld/openbmc-test-automation/extended/code_update/update_bmc.robot" id="s1" name="Update Bmc">
<test id="s1-t1" name="Initiate Code update BMC">
<kw name="Check If File Exist" library="code_update_utils">
<arguments>
<arg>${FILE_PATH}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n PATH: ${filepath}</arg>
</arguments>
<msg timestamp="20161219 06:25:40.513" level="INFO">
PATH: /home/fspcibld/barreleye-20161219060907.all.tar</msg>
<status status="PASS" endtime="20161219 06:25:40.514" starttime="20161219 06:25:40.513"></status>
</kw>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>msg=${filepath} doesn't exist [ ERROR ]</arg>
</arguments>
<msg timestamp="20161219 06:25:40.514" html="yes" level="INFO">File '&lt;a href="file:///home/fspcibld/barreleye-20161219060907.all.tar"&gt;/home/fspcibld/barreleye-20161219060907.all.tar&lt;/a&gt;' exists.</msg>
<status status="PASS" endtime="20161219 06:25:40.514" starttime="20161219 06:25:40.514"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${FILE_PATH}</arg>
<arg>${filepath}</arg>
</arguments>
<msg timestamp="20161219 06:25:40.515" level="INFO">${FILE_PATH} = /home/fspcibld/barreleye-20161219060907.all.tar</msg>
<status status="PASS" endtime="20161219 06:25:40.515" starttime="20161219 06:25:40.514"></status>
</kw>
<status status="PASS" endtime="20161219 06:25:40.515" starttime="20161219 06:25:40.513"></status>
</kw>
<kw name="System Readiness Test" library="code_update_utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Verify Ping and REST Authentication</arg>
</arguments>
<assign>
<var>${l_status}</var>
</assign>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20161219 06:25:40.517" level="INFO">Length is 9</msg>
<status status="PASS" endtime="20161219 06:25:40.517" starttime="20161219 06:25:40.517"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20161219 06:25:40.520" level="INFO">Running command 'ping -c 4 9.3.23.30 2&gt;&amp;1'.</msg>
<msg timestamp="20161219 06:25:43.529" level="INFO">${RC} = 0</msg>
<msg timestamp="20161219 06:25:43.530" level="INFO">${output} = PING 9.3.23.30 (9.3.23.30) 56(84) bytes of data.
64 bytes from 9.3.23.30: icmp_seq=1 ttl=62 time=1.32 ms
64 bytes from 9.3.23.30: icmp_seq=2 ttl=62 time=0.785 ms
64 bytes from 9.3.23.30: icmp_seq=3 tt...</msg>
<status status="PASS" endtime="20161219 06:25:43.531" starttime="20161219 06:25:40.517"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20161219 06:25:43.541" level="INFO">RC: 0
Output:
PING 9.3.23.30 (9.3.23.30) 56(84) bytes of data.
64 bytes from 9.3.23.30: icmp_seq=1 ttl=62 time=1.32 ms
64 bytes from 9.3.23.30: icmp_seq=2 ttl=62 time=0.785 ms
64 bytes from 9.3.23.30: icmp_seq=3 ttl=62 time=0.790 ms
64 bytes from 9.3.23.30: icmp_seq=4 ttl=62 time=0.784 ms

--- 9.3.23.30 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 3001ms
rtt min/avg/max/mdev = 0.784/0.921/1.325/0.233 ms</msg>
<status status="PASS" endtime="20161219 06:25:43.541" starttime="20161219 06:25:43.539"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20161219 06:25:43.544" starttime="20161219 06:25:43.542"></status>
</kw>
<status status="PASS" endtime="20161219 06:25:43.545" starttime="20161219 06:25:40.516"></status>
</kw>
<msg timestamp="20161219 06:25:43.545" level="INFO">${l_ping} = True</msg>
<status status="PASS" endtime="20161219 06:25:43.546" starttime="20161219 06:25:40.516"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<status status="PASS" endtime="20161219 06:25:43.552" starttime="20161219 06:25:43.547"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Initialize OpenBMC</arg>
</arguments>
<assign>
<var>${l_rest}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161219 06:25:43.554" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161219 06:25:43.559" starttime="20161219 06:25:43.553"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161219 06:25:43.560" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161219 06:25:43.560" starttime="20161219 06:25:43.559"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161219 06:25:43.561" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161219 06:25:43.561" starttime="20161219 06:25:43.560"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161219 06:25:43.561" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161219 06:25:43.561" starttime="20161219 06:25:43.561"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161219 06:25:43.924" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161219 06:25:43.924" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161219 06:25:43.924" starttime="20161219 06:25:43.562"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161219 06:25:43.925" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161219 06:25:43.925" starttime="20161219 06:25:43.924"></status>
</kw>
<status status="PASS" endtime="20161219 06:25:43.925" starttime="20161219 06:25:43.553"></status>
</kw>
<msg timestamp="20161219 06:25:43.925" level="INFO">${l_rest} = True</msg>
<status status="PASS" endtime="20161219 06:25:43.925" starttime="20161219 06:25:43.552"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_rest}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<status status="PASS" endtime="20161219 06:25:43.928" starttime="20161219 06:25:43.925"></status>
</kw>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20161219 06:25:43.929" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20161219 06:25:43.929" starttime="20161219 06:25:43.929"></status>
</kw>
<msg timestamp="20161219 06:25:43.929" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20161219 06:25:43.929" starttime="20161219 06:25:43.928"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20161219 06:25:43.933" starttime="20161219 06:25:43.932"></status>
</kw>
<status status="PASS" endtime="20161219 06:25:43.933" starttime="20161219 06:25:43.929"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20161219 06:25:43.936" starttime="20161219 06:25:43.933"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20161219 06:25:43.937" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20161219 06:25:43.937" starttime="20161219 06:25:43.937"></status>
</kw>
<msg timestamp="20161219 06:25:43.937" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20161219 06:25:43.937" starttime="20161219 06:25:43.936"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20161219 06:25:43.941" starttime="20161219 06:25:43.940"></status>
</kw>
<status status="PASS" endtime="20161219 06:25:43.941" starttime="20161219 06:25:43.940"></status>
</kw>
<status status="PASS" endtime="20161219 06:25:43.941" starttime="20161219 06:25:43.937"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20161219 06:25:43.941" level="INFO">Logging into '9.3.23.30:22' as 'root'.</msg>
<msg timestamp="20161219 06:25:46.208" level="INFO">Read output: 7[r[999;999H[6n</msg>
<status status="PASS" endtime="20161219 06:25:46.208" starttime="20161219 06:25:43.941"></status>
</kw>
<status status="PASS" endtime="20161219 06:25:46.208" starttime="20161219 06:25:43.928"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>hostname</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${system}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20161219 06:25:46.209" level="INFO">Executing command 'hostname'.</msg>
<msg timestamp="20161219 06:25:46.328" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20161219 06:25:46.328" level="INFO">${system} = barreleye</msg>
<msg timestamp="20161219 06:25:46.328" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20161219 06:25:46.328" starttime="20161219 06:25:46.209"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20161219 06:25:46.329" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20161219 06:25:46.329" starttime="20161219 06:25:46.329"></status>
</kw>
<status status="PASS" endtime="20161219 06:25:46.329" starttime="20161219 06:25:40.516"></status>
</kw>
<msg timestamp="20161219 06:25:46.330" level="INFO">${l_status} = True</msg>
<status status="PASS" endtime="20161219 06:25:46.330" starttime="20161219 06:25:40.515"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_status}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=System not in ideal state to use [ERROR]</arg>
</arguments>
<status status="PASS" endtime="20161219 06:25:46.335" starttime="20161219 06:25:46.330"></status>
</kw>
<status status="PASS" endtime="20161219 06:25:46.335" starttime="20161219 06:25:40.515"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Validate BMC Version</arg>
<arg>before</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Validate BMC Version" library="code_update_utils">
<arguments>
<arg>before</arg>
</arguments>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20161219 06:25:46.339" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20161219 06:25:46.339" starttime="20161219 06:25:46.339"></status>
</kw>
<msg timestamp="20161219 06:25:46.340" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20161219 06:25:46.340" starttime="20161219 06:25:46.338"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20161219 06:25:46.343" starttime="20161219 06:25:46.343"></status>
</kw>
<status status="PASS" endtime="20161219 06:25:46.343" starttime="20161219 06:25:46.340"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20161219 06:25:46.346" starttime="20161219 06:25:46.344"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20161219 06:25:46.347" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20161219 06:25:46.347" starttime="20161219 06:25:46.347"></status>
</kw>
<msg timestamp="20161219 06:25:46.347" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20161219 06:25:46.347" starttime="20161219 06:25:46.347"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20161219 06:25:46.351" starttime="20161219 06:25:46.351"></status>
</kw>
<status status="PASS" endtime="20161219 06:25:46.351" starttime="20161219 06:25:46.351"></status>
</kw>
<status status="PASS" endtime="20161219 06:25:46.351" starttime="20161219 06:25:46.348"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20161219 06:25:46.352" level="INFO">Logging into '9.3.23.30:22' as 'root'.</msg>
<msg timestamp="20161219 06:25:48.652" level="INFO">Read output: 7[r[999;999H[6n</msg>
<status status="PASS" endtime="20161219 06:25:48.652" starttime="20161219 06:25:46.352"></status>
</kw>
<status status="PASS" endtime="20161219 06:25:48.652" starttime="20161219 06:25:46.337"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>cat /etc/version</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${version}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20161219 06:25:48.653" level="INFO">Executing command 'cat /etc/version'.</msg>
<msg timestamp="20161219 06:25:48.716" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20161219 06:25:48.716" level="INFO">${version} = 20161216222224</msg>
<msg timestamp="20161219 06:25:48.716" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20161219 06:25:48.716" starttime="20161219 06:25:48.653"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20161219 06:25:48.717" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20161219 06:25:48.717" starttime="20161219 06:25:48.717"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${args}' == 'before'</arg>
<arg>Should not Contain</arg>
<arg>${FILE_PATH}</arg>
<arg>${version}</arg>
<arg>msg=Same version already installed</arg>
<arg>ELSE</arg>
<arg>Should Contain</arg>
<arg>${FILE_PATH}</arg>
<arg>${version}</arg>
<arg>msg=Code update Failed</arg>
</arguments>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${FILE_PATH}</arg>
<arg>${version}</arg>
<arg>msg=Same version already installed</arg>
</arguments>
<status status="PASS" endtime="20161219 06:25:48.726" starttime="20161219 06:25:48.725"></status>
</kw>
<status status="PASS" endtime="20161219 06:25:48.726" starttime="20161219 06:25:48.718"></status>
</kw>
<status status="PASS" endtime="20161219 06:25:48.726" starttime="20161219 06:25:46.336"></status>
</kw>
<msg timestamp="20161219 06:25:48.726" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20161219 06:25:48.726" starttime="20161219 06:25:46.336"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Pass Execution</arg>
<arg>Same Driver version installed</arg>
</arguments>
<status status="PASS" endtime="20161219 06:25:48.731" starttime="20161219 06:25:48.727"></status>
</kw>
<kw name="Prune Journal Log" library="utils">
<doc>Prune archived journal logs.</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20161219 06:25:48.733" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20161219 06:25:48.733" starttime="20161219 06:25:48.733"></status>
</kw>
<msg timestamp="20161219 06:25:48.733" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20161219 06:25:48.734" starttime="20161219 06:25:48.732"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20161219 06:25:48.737" starttime="20161219 06:25:48.737"></status>
</kw>
<status status="PASS" endtime="20161219 06:25:48.737" starttime="20161219 06:25:48.734"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20161219 06:25:48.740" starttime="20161219 06:25:48.737"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20161219 06:25:48.741" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20161219 06:25:48.741" starttime="20161219 06:25:48.741"></status>
</kw>
<msg timestamp="20161219 06:25:48.741" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20161219 06:25:48.741" starttime="20161219 06:25:48.740"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20161219 06:25:48.745" starttime="20161219 06:25:48.744"></status>
</kw>
<status status="PASS" endtime="20161219 06:25:48.745" starttime="20161219 06:25:48.744"></status>
</kw>
<status status="PASS" endtime="20161219 06:25:48.745" starttime="20161219 06:25:48.741"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20161219 06:25:48.745" level="INFO">Logging into '9.3.23.30:22' as 'root'.</msg>
<msg timestamp="20161219 06:25:51.030" level="INFO">Read output: 7[r[999;999H[6n</msg>
<status status="PASS" endtime="20161219 06:25:51.030" starttime="20161219 06:25:48.745"></status>
</kw>
<status status="PASS" endtime="20161219 06:25:51.031" starttime="20161219 06:25:48.732"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>journalctl --vacuum-size=${vacuum_size}</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<assign>
<var>${output}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20161219 06:25:51.032" level="INFO">Executing command 'journalctl --vacuum-size=1M'.</msg>
<msg timestamp="20161219 06:25:51.314" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20161219 06:25:51.314" level="INFO">${output} = </msg>
<msg timestamp="20161219 06:25:51.314" level="INFO">${stderr} = Deleted archived journal /run/log/journal/3d9e078a9abd49018d55fe2fcb8cece2/system@c313ea37655e4fafa558873c760ae782-0000000000000923-000541f7a620c3f5.journal (3.0M).
Deleted archived journal /run/log/j...</msg>
<msg timestamp="20161219 06:25:51.314" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20161219 06:25:51.314" starttime="20161219 06:25:51.031"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${stderr}</arg>
</arguments>
<status status="PASS" endtime="20161219 06:25:51.315" starttime="20161219 06:25:51.314"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${stderr}</arg>
<arg>Vacuuming done</arg>
</arguments>
<status status="PASS" endtime="20161219 06:25:51.316" starttime="20161219 06:25:51.315"></status>
</kw>
<status status="PASS" endtime="20161219 06:25:51.316" starttime="20161219 06:25:48.731"></status>
</kw>
<kw name="Initiate Power Off" library="utils">
<doc>Initiates the power off and waits until the Is Power Off</doc>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg timestamp="20161219 06:25:51.318" level="INFO">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161219 06:25:51.318" starttime="20161219 06:25:51.317"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20161219 06:25:51.319" level="INFO">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161219 06:25:51.319" starttime="20161219 06:25:51.318"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}control/chassis0/</arg>
<arg>powerOff</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161219 06:25:51.321" level="INFO">${base_uri} = /org/openbmc/control/chassis0/</msg>
<status status="PASS" endtime="20161219 06:25:51.321" starttime="20161219 06:25:51.320"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161219 06:25:51.323" level="INFO">${base_uri} = /org/openbmc/control/chassis0//action/powerOff</msg>
<status status="PASS" endtime="20161219 06:25:51.323" starttime="20161219 06:25:51.322"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161219 06:25:51.324" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161219 06:25:51.324" starttime="20161219 06:25:51.323"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161219 06:25:51.325" starttime="20161219 06:25:51.324"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161219 06:25:51.332" level="INFO">${msg} = URI:https://9.3.23.30/org/openbmc/control/chassis0//action/powerOff, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161219 06:25:51.332" starttime="20161219 06:25:51.331"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161219 06:25:51.333" level="INFO">URI:https://9.3.23.30/org/openbmc/control/chassis0//action/powerOff, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161219 06:25:51.333" starttime="20161219 06:25:51.333"></status>
</kw>
<status status="PASS" endtime="20161219 06:25:51.334" starttime="20161219 06:25:51.332"></status>
</kw>
<status status="PASS" endtime="20161219 06:25:51.334" starttime="20161219 06:25:51.330"></status>
</kw>
<status status="PASS" endtime="20161219 06:25:51.334" starttime="20161219 06:25:51.325"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161219 06:25:51.335" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161219 06:25:51.336" starttime="20161219 06:25:51.335"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161219 06:25:51.337" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161219 06:25:51.337" starttime="20161219 06:25:51.336"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161219 06:25:51.337" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161219 06:25:51.337" starttime="20161219 06:25:51.337"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161219 06:25:51.338" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161219 06:25:51.338" starttime="20161219 06:25:51.337"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161219 06:25:51.707" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161219 06:25:51.707" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161219 06:25:51.707" starttime="20161219 06:25:51.338"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161219 06:25:51.707" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161219 06:25:51.707" starttime="20161219 06:25:51.707"></status>
</kw>
<status status="PASS" endtime="20161219 06:25:51.708" starttime="20161219 06:25:51.334"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161219 06:25:51.988" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/control/chassis0//action/powerOff, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161219 06:25:51.988" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161219 06:25:51.988" starttime="20161219 06:25:51.708"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161219 06:25:51.992" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161219 06:25:51.992" starttime="20161219 06:25:51.992"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161219 06:25:51.993" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161219 06:25:51.993" starttime="20161219 06:25:51.993"></status>
</kw>
<status status="PASS" endtime="20161219 06:25:51.993" starttime="20161219 06:25:51.992"></status>
</kw>
<status status="PASS" endtime="20161219 06:25:51.993" starttime="20161219 06:25:51.991"></status>
</kw>
<status status="PASS" endtime="20161219 06:25:51.994" starttime="20161219 06:25:51.988"></status>
</kw>
<msg timestamp="20161219 06:25:51.994" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161219 06:25:51.994" starttime="20161219 06:25:51.321"></status>
</kw>
<msg timestamp="20161219 06:25:51.994" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161219 06:25:51.994" starttime="20161219 06:25:51.319"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161219 06:25:51.995" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161219 06:25:51.995" starttime="20161219 06:25:51.995"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>1 min</arg>
<arg>10 sec</arg>
<arg>Is Power Off</arg>
</arguments>
<kw name="Is Power Off" library="utils">
<kw name="Get Power State" library="utils">
<doc>Returns the power state as an integer. Either 0 or 1.</doc>
<assign>
<var>${state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg timestamp="20161219 06:25:51.996" level="INFO">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161219 06:25:51.996" starttime="20161219 06:25:51.996"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20161219 06:25:51.997" level="INFO">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161219 06:25:51.997" starttime="20161219 06:25:51.997"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}control/chassis0/</arg>
<arg>getPowerState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161219 06:25:51.998" level="INFO">${base_uri} = /org/openbmc/control/chassis0/</msg>
<status status="PASS" endtime="20161219 06:25:51.998" starttime="20161219 06:25:51.998"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161219 06:25:51.999" level="INFO">${base_uri} = /org/openbmc/control/chassis0//action/getPowerState</msg>
<status status="PASS" endtime="20161219 06:25:51.999" starttime="20161219 06:25:51.999"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161219 06:25:52.000" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161219 06:25:52.000" starttime="20161219 06:25:52.000"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161219 06:25:52.000" starttime="20161219 06:25:52.000"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161219 06:25:52.004" level="INFO">${msg} = URI:https://9.3.23.30/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161219 06:25:52.005" starttime="20161219 06:25:52.004"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161219 06:25:52.005" level="INFO">URI:https://9.3.23.30/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161219 06:25:52.005" starttime="20161219 06:25:52.005"></status>
</kw>
<status status="PASS" endtime="20161219 06:25:52.006" starttime="20161219 06:25:52.005"></status>
</kw>
<status status="PASS" endtime="20161219 06:25:52.006" starttime="20161219 06:25:52.003"></status>
</kw>
<status status="PASS" endtime="20161219 06:25:52.007" starttime="20161219 06:25:52.001"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161219 06:25:52.008" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161219 06:25:52.009" starttime="20161219 06:25:52.008"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161219 06:25:52.009" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161219 06:25:52.009" starttime="20161219 06:25:52.009"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161219 06:25:52.010" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161219 06:25:52.010" starttime="20161219 06:25:52.009"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161219 06:25:52.011" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161219 06:25:52.011" starttime="20161219 06:25:52.010"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161219 06:25:52.356" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161219 06:25:52.356" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161219 06:25:52.356" starttime="20161219 06:25:52.011"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161219 06:25:52.357" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161219 06:25:52.357" starttime="20161219 06:25:52.357"></status>
</kw>
<status status="PASS" endtime="20161219 06:25:52.358" starttime="20161219 06:25:52.008"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161219 06:25:52.625" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/control/chassis0//action/getPowerState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161219 06:25:52.625" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161219 06:25:52.625" starttime="20161219 06:25:52.358"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161219 06:25:52.632" level="INFO">${msg} = Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161219 06:25:52.632" starttime="20161219 06:25:52.631"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161219 06:25:52.632" level="INFO">Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161219 06:25:52.633" starttime="20161219 06:25:52.632"></status>
</kw>
<status status="PASS" endtime="20161219 06:25:52.633" starttime="20161219 06:25:52.632"></status>
</kw>
<status status="PASS" endtime="20161219 06:25:52.633" starttime="20161219 06:25:52.630"></status>
</kw>
<status status="PASS" endtime="20161219 06:25:52.633" starttime="20161219 06:25:52.626"></status>
</kw>
<msg timestamp="20161219 06:25:52.633" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161219 06:25:52.633" starttime="20161219 06:25:51.998"></status>
</kw>
<msg timestamp="20161219 06:25:52.634" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161219 06:25:52.634" starttime="20161219 06:25:51.997"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161219 06:25:52.635" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161219 06:25:52.635" starttime="20161219 06:25:52.634"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20161219 06:25:52.636" level="INFO">To JSON using : content={
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20161219 06:25:52.636" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20161219 06:25:52.636" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': 0}</msg>
<status status="PASS" endtime="20161219 06:25:52.636" starttime="20161219 06:25:52.635"></status>
</kw>
<msg timestamp="20161219 06:25:52.636" level="INFO">${state} = 0</msg>
<status status="PASS" endtime="20161219 06:25:52.636" starttime="20161219 06:25:51.996"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${state}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20161219 06:25:52.637" starttime="20161219 06:25:52.637"></status>
</kw>
<status status="PASS" endtime="20161219 06:25:52.637" starttime="20161219 06:25:51.995"></status>
</kw>
<status status="PASS" endtime="20161219 06:25:52.637" starttime="20161219 06:25:51.995"></status>
</kw>
<status status="PASS" endtime="20161219 06:25:52.638" starttime="20161219 06:25:51.317"></status>
</kw>
<kw name="Set Policy Setting" library="code_update_utils">
<doc>Set the given test policy</doc>
<arguments>
<arg>RESTORE_LAST_STATE</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=${policy}</arg>
</arguments>
<assign>
<var>${valueDict}</var>
</assign>
<msg timestamp="20161219 06:25:52.639" level="INFO">${valueDict} = {u'data': u'RESTORE_LAST_STATE'}</msg>
<status status="PASS" endtime="20161219 06:25:52.639" starttime="20161219 06:25:52.638"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${HOST_SETTING}</arg>
<arg>power_policy</arg>
<arg>data=${valueDict}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161219 06:25:52.640" level="INFO">${base_uri} = /org/openbmc/settings/host0</msg>
<status status="PASS" endtime="20161219 06:25:52.640" starttime="20161219 06:25:52.640"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161219 06:25:52.641" level="INFO">${base_uri} = /org/openbmc/settings/host0/attr/power_policy</msg>
<status status="PASS" endtime="20161219 06:25:52.641" starttime="20161219 06:25:52.641"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161219 06:25:52.642" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161219 06:25:52.642" starttime="20161219 06:25:52.642"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161219 06:25:52.642" starttime="20161219 06:25:52.642"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161219 06:25:52.644" level="INFO">${msg} = URI:https://9.3.23.30/org/openbmc/settings/host0/attr/power_policy, method:Put, args:{u'data': {u'data': u'RESTORE_LAST_STATE'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161219 06:25:52.644" starttime="20161219 06:25:52.643"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161219 06:25:52.644" level="INFO">URI:https://9.3.23.30/org/openbmc/settings/host0/attr/power_policy, method:Put, args:{u'data': {u'data': u'RESTORE_LAST_STATE'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161219 06:25:52.645" starttime="20161219 06:25:52.644"></status>
</kw>
<status status="PASS" endtime="20161219 06:25:52.645" starttime="20161219 06:25:52.644"></status>
</kw>
<status status="PASS" endtime="20161219 06:25:52.645" starttime="20161219 06:25:52.642"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161219 06:25:52.646" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161219 06:25:52.646" starttime="20161219 06:25:52.646"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161219 06:25:52.647" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161219 06:25:52.647" starttime="20161219 06:25:52.647"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161219 06:25:52.647" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161219 06:25:52.647" starttime="20161219 06:25:52.647"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161219 06:25:52.648" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161219 06:25:52.648" starttime="20161219 06:25:52.648"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161219 06:25:53.108" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161219 06:25:53.108" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161219 06:25:53.108" starttime="20161219 06:25:52.648"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161219 06:25:53.108" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161219 06:25:53.108" starttime="20161219 06:25:53.108"></status>
</kw>
<status status="PASS" endtime="20161219 06:25:53.108" starttime="20161219 06:25:52.645"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161219 06:25:53.170" level="INFO">Put Request using : alias=openbmc, uri=/org/openbmc/settings/host0/attr/power_policy, data={"data": "RESTORE_LAST_STATE"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg timestamp="20161219 06:25:53.170" level="INFO">${ret} = &lt;Response [403]&gt;</msg>
<status status="PASS" endtime="20161219 06:25:53.170" starttime="20161219 06:25:53.109"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161219 06:25:53.171" level="INFO">${msg} = Response code:403, Content:{
  "data": {
    "description": "The specified resource cannot be created: '/org/openbmc/settings/host0'"
  }, 
  "message": "403 Forbidden", 
  "status": "error"
}</msg>
<status status="PASS" endtime="20161219 06:25:53.171" starttime="20161219 06:25:53.171"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161219 06:25:53.172" level="INFO">Response code:403, Content:{
  "data": {
    "description": "The specified resource cannot be created: '/org/openbmc/settings/host0'"
  }, 
  "message": "403 Forbidden", 
  "status": "error"
}</msg>
<status status="PASS" endtime="20161219 06:25:53.172" starttime="20161219 06:25:53.172"></status>
</kw>
<status status="PASS" endtime="20161219 06:25:53.172" starttime="20161219 06:25:53.171"></status>
</kw>
<status status="PASS" endtime="20161219 06:25:53.172" starttime="20161219 06:25:53.170"></status>
</kw>
<msg timestamp="20161219 06:25:53.172" level="INFO">${resp} = &lt;Response [403]&gt;</msg>
<status status="PASS" endtime="20161219 06:25:53.172" starttime="20161219 06:25:52.640"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161219 06:25:53.173" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20161219 06:25:53.173" level="FAIL">403 != 200</msg>
<status status="FAIL" endtime="20161219 06:25:53.173" starttime="20161219 06:25:53.173"></status>
</kw>
<status status="FAIL" endtime="20161219 06:25:53.174" starttime="20161219 06:25:52.639"></status>
</kw>
<status status="FAIL" endtime="20161219 06:25:53.174" starttime="20161219 06:25:52.638"></status>
</kw>
<doc>BMC code update process initiation</doc>
<status status="FAIL" endtime="20161219 06:25:53.174" critical="yes" starttime="20161219 06:25:40.512">403 != 200</status>
</test>
<test id="s1-t2" name="Test BMC CPU Mem Performance at Ready State">
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20161219 06:25:53.177" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20161219 06:25:53.177" starttime="20161219 06:25:53.176"></status>
</kw>
<msg timestamp="20161219 06:25:53.177" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20161219 06:25:53.177" starttime="20161219 06:25:53.176"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20161219 06:25:53.180" starttime="20161219 06:25:53.180"></status>
</kw>
<status status="PASS" endtime="20161219 06:25:53.180" starttime="20161219 06:25:53.177"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20161219 06:25:53.183" starttime="20161219 06:25:53.180"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20161219 06:25:53.184" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20161219 06:25:53.184" starttime="20161219 06:25:53.184"></status>
</kw>
<msg timestamp="20161219 06:25:53.184" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20161219 06:25:53.184" starttime="20161219 06:25:53.183"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20161219 06:25:53.188" starttime="20161219 06:25:53.188"></status>
</kw>
<status status="PASS" endtime="20161219 06:25:53.188" starttime="20161219 06:25:53.187"></status>
</kw>
<status status="PASS" endtime="20161219 06:25:53.188" starttime="20161219 06:25:53.184"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20161219 06:25:53.189" level="INFO">Logging into '9.3.23.30:22' as 'root'.</msg>
<msg timestamp="20161219 06:25:55.375" level="INFO">Read output: 7[r[999;999H[6n</msg>
<status status="PASS" endtime="20161219 06:25:55.375" starttime="20161219 06:25:53.189"></status>
</kw>
<status status="PASS" endtime="20161219 06:25:55.375" starttime="20161219 06:25:53.175"></status>
</kw>
<kw name="Check BMC CPU Performance" library="utils">
<doc>Minimal 10% of proc should be free in 3 sample</doc>
<kw type="for" name="${var} IN RANGE [ 1 | 4 ]">
<kw type="foritem" name="${var} = 1">
<kw name="BMC CPU Performance Check" library="utils">
<doc>Minimal 10% of proc should be free in this instance</doc>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${bmc_cpu_usage_cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_cpu_usage_output}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20161219 06:25:55.378" level="INFO">Executing command 'top -n 1 | grep CPU: | cut -c 7-9'.</msg>
<msg timestamp="20161219 06:25:55.719" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20161219 06:25:55.719" level="INFO">${bmc_cpu_usage_output} =  0%</msg>
<msg timestamp="20161219 06:25:55.719" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20161219 06:25:55.719" starttime="20161219 06:25:55.378"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20161219 06:25:55.720" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20161219 06:25:55.720" starttime="20161219 06:25:55.719"></status>
</kw>
<kw name="Fetch From Left" library="String">
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<arguments>
<arg>${bmc_cpu_usage_output}</arg>
<arg>%</arg>
</arguments>
<assign>
<var>${bmc_cpu_percentage}</var>
</assign>
<msg timestamp="20161219 06:25:55.721" level="INFO">${bmc_cpu_percentage} =  0</msg>
<status status="PASS" endtime="20161219 06:25:55.721" starttime="20161219 06:25:55.721"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${bmc_cpu_percentage} &lt; 90</arg>
</arguments>
<status status="PASS" endtime="20161219 06:25:55.727" starttime="20161219 06:25:55.722"></status>
</kw>
<status status="PASS" endtime="20161219 06:25:55.727" starttime="20161219 06:25:55.377"></status>
</kw>
<status status="PASS" endtime="20161219 06:25:55.727" starttime="20161219 06:25:55.377"></status>
</kw>
<kw type="foritem" name="${var} = 2">
<kw name="BMC CPU Performance Check" library="utils">
<doc>Minimal 10% of proc should be free in this instance</doc>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${bmc_cpu_usage_cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_cpu_usage_output}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20161219 06:25:55.729" level="INFO">Executing command 'top -n 1 | grep CPU: | cut -c 7-9'.</msg>
<msg timestamp="20161219 06:25:56.149" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20161219 06:25:56.149" level="INFO">${bmc_cpu_usage_output} =  0%</msg>
<msg timestamp="20161219 06:25:56.149" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20161219 06:25:56.149" starttime="20161219 06:25:55.728"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20161219 06:25:56.150" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20161219 06:25:56.150" starttime="20161219 06:25:56.150"></status>
</kw>
<kw name="Fetch From Left" library="String">
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<arguments>
<arg>${bmc_cpu_usage_output}</arg>
<arg>%</arg>
</arguments>
<assign>
<var>${bmc_cpu_percentage}</var>
</assign>
<msg timestamp="20161219 06:25:56.151" level="INFO">${bmc_cpu_percentage} =  0</msg>
<status status="PASS" endtime="20161219 06:25:56.151" starttime="20161219 06:25:56.151"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${bmc_cpu_percentage} &lt; 90</arg>
</arguments>
<status status="PASS" endtime="20161219 06:25:56.156" starttime="20161219 06:25:56.152"></status>
</kw>
<status status="PASS" endtime="20161219 06:25:56.156" starttime="20161219 06:25:55.728"></status>
</kw>
<status status="PASS" endtime="20161219 06:25:56.156" starttime="20161219 06:25:55.727"></status>
</kw>
<kw type="foritem" name="${var} = 3">
<kw name="BMC CPU Performance Check" library="utils">
<doc>Minimal 10% of proc should be free in this instance</doc>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${bmc_cpu_usage_cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_cpu_usage_output}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20161219 06:25:56.158" level="INFO">Executing command 'top -n 1 | grep CPU: | cut -c 7-9'.</msg>
<msg timestamp="20161219 06:25:56.691" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20161219 06:25:56.692" level="INFO">${bmc_cpu_usage_output} = 71%</msg>
<msg timestamp="20161219 06:25:56.692" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20161219 06:25:56.692" starttime="20161219 06:25:56.157"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20161219 06:25:56.693" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20161219 06:25:56.693" starttime="20161219 06:25:56.692"></status>
</kw>
<kw name="Fetch From Left" library="String">
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<arguments>
<arg>${bmc_cpu_usage_output}</arg>
<arg>%</arg>
</arguments>
<assign>
<var>${bmc_cpu_percentage}</var>
</assign>
<msg timestamp="20161219 06:25:56.694" level="INFO">${bmc_cpu_percentage} = 71</msg>
<status status="PASS" endtime="20161219 06:25:56.694" starttime="20161219 06:25:56.693"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${bmc_cpu_percentage} &lt; 90</arg>
</arguments>
<status status="PASS" endtime="20161219 06:25:56.699" starttime="20161219 06:25:56.694"></status>
</kw>
<status status="PASS" endtime="20161219 06:25:56.699" starttime="20161219 06:25:56.156"></status>
</kw>
<status status="PASS" endtime="20161219 06:25:56.699" starttime="20161219 06:25:56.156"></status>
</kw>
<status status="PASS" endtime="20161219 06:25:56.699" starttime="20161219 06:25:55.376"></status>
</kw>
<status status="PASS" endtime="20161219 06:25:56.699" starttime="20161219 06:25:55.376"></status>
</kw>
<kw name="Check BMC Mem Performance" library="utils">
<doc>Minimal 10% of memory should be free</doc>
<kw type="for" name="${var} IN RANGE [ 1 | 4 ]">
<kw type="foritem" name="${var} = 1">
<kw name="BMC Mem Performance Check" library="utils">
<doc>Minimal 10% of memory should be free in this instance</doc>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${bmc_mem_free_cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_mem_free_output}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20161219 06:25:56.702" level="INFO">Executing command 'free | tr -s ' ' | sed '/^Mem/!d' | cut -d" " -f4'.</msg>
<msg timestamp="20161219 06:25:56.869" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20161219 06:25:56.869" level="INFO">${bmc_mem_free_output} = 361760</msg>
<msg timestamp="20161219 06:25:56.869" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20161219 06:25:56.870" starttime="20161219 06:25:56.702"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20161219 06:25:56.870" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20161219 06:25:56.870" starttime="20161219 06:25:56.870"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${bmc_mem_total_cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_mem_total_output}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20161219 06:25:56.871" level="INFO">Executing command 'free | tr -s ' ' | sed '/^Mem/!d' | cut -d" " -f2'.</msg>
<msg timestamp="20161219 06:25:57.038" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20161219 06:25:57.039" level="INFO">${bmc_mem_total_output} = 499020</msg>
<msg timestamp="20161219 06:25:57.039" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20161219 06:25:57.039" starttime="20161219 06:25:56.871"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20161219 06:25:57.039" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20161219 06:25:57.040" starttime="20161219 06:25:57.039"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${bmc_mem_free_output}*100</arg>
</arguments>
<assign>
<var>${bmc_mem_percentage}</var>
</assign>
<msg timestamp="20161219 06:25:57.044" level="INFO">${bmc_mem_percentage} = 36176000</msg>
<status status="PASS" endtime="20161219 06:25:57.044" starttime="20161219 06:25:57.040"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${bmc_mem_percentage}/${bmc_mem_total_output}</arg>
</arguments>
<assign>
<var>${bmc_mem_percentage}</var>
</assign>
<msg timestamp="20161219 06:25:57.049" level="INFO">${bmc_mem_percentage} = 72</msg>
<status status="PASS" endtime="20161219 06:25:57.049" starttime="20161219 06:25:57.044"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${bmc_mem_percentage} &gt; 10</arg>
</arguments>
<status status="PASS" endtime="20161219 06:25:57.054" starttime="20161219 06:25:57.050"></status>
</kw>
<status status="PASS" endtime="20161219 06:25:57.054" starttime="20161219 06:25:56.701"></status>
</kw>
<status status="PASS" endtime="20161219 06:25:57.054" starttime="20161219 06:25:56.700"></status>
</kw>
<kw type="foritem" name="${var} = 2">
<kw name="BMC Mem Performance Check" library="utils">
<doc>Minimal 10% of memory should be free in this instance</doc>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${bmc_mem_free_cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_mem_free_output}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20161219 06:25:57.055" level="INFO">Executing command 'free | tr -s ' ' | sed '/^Mem/!d' | cut -d" " -f4'.</msg>
<msg timestamp="20161219 06:25:57.254" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20161219 06:25:57.254" level="INFO">${bmc_mem_free_output} = 361760</msg>
<msg timestamp="20161219 06:25:57.254" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20161219 06:25:57.254" starttime="20161219 06:25:57.055"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20161219 06:25:57.255" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20161219 06:25:57.255" starttime="20161219 06:25:57.255"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${bmc_mem_total_cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_mem_total_output}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20161219 06:25:57.255" level="INFO">Executing command 'free | tr -s ' ' | sed '/^Mem/!d' | cut -d" " -f2'.</msg>
<msg timestamp="20161219 06:25:57.454" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20161219 06:25:57.454" level="INFO">${bmc_mem_total_output} = 499020</msg>
<msg timestamp="20161219 06:25:57.455" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20161219 06:25:57.455" starttime="20161219 06:25:57.255"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20161219 06:25:57.455" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20161219 06:25:57.455" starttime="20161219 06:25:57.455"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${bmc_mem_free_output}*100</arg>
</arguments>
<assign>
<var>${bmc_mem_percentage}</var>
</assign>
<msg timestamp="20161219 06:25:57.463" level="INFO">${bmc_mem_percentage} = 36176000</msg>
<status status="PASS" endtime="20161219 06:25:57.463" starttime="20161219 06:25:57.456"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${bmc_mem_percentage}/${bmc_mem_total_output}</arg>
</arguments>
<assign>
<var>${bmc_mem_percentage}</var>
</assign>
<msg timestamp="20161219 06:25:57.470" level="INFO">${bmc_mem_percentage} = 72</msg>
<status status="PASS" endtime="20161219 06:25:57.470" starttime="20161219 06:25:57.463"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${bmc_mem_percentage} &gt; 10</arg>
</arguments>
<status status="PASS" endtime="20161219 06:25:57.474" starttime="20161219 06:25:57.470"></status>
</kw>
<status status="PASS" endtime="20161219 06:25:57.475" starttime="20161219 06:25:57.054"></status>
</kw>
<status status="PASS" endtime="20161219 06:25:57.475" starttime="20161219 06:25:57.054"></status>
</kw>
<kw type="foritem" name="${var} = 3">
<kw name="BMC Mem Performance Check" library="utils">
<doc>Minimal 10% of memory should be free in this instance</doc>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${bmc_mem_free_cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_mem_free_output}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20161219 06:25:57.476" level="INFO">Executing command 'free | tr -s ' ' | sed '/^Mem/!d' | cut -d" " -f4'.</msg>
<msg timestamp="20161219 06:25:57.618" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20161219 06:25:57.618" level="INFO">${bmc_mem_free_output} = 361856</msg>
<msg timestamp="20161219 06:25:57.618" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20161219 06:25:57.618" starttime="20161219 06:25:57.475"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20161219 06:25:57.619" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20161219 06:25:57.619" starttime="20161219 06:25:57.619"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${bmc_mem_total_cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_mem_total_output}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20161219 06:25:57.619" level="INFO">Executing command 'free | tr -s ' ' | sed '/^Mem/!d' | cut -d" " -f2'.</msg>
<msg timestamp="20161219 06:25:57.909" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20161219 06:25:57.909" level="INFO">${bmc_mem_total_output} = 499020</msg>
<msg timestamp="20161219 06:25:57.909" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20161219 06:25:57.909" starttime="20161219 06:25:57.619"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20161219 06:25:57.909" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20161219 06:25:57.909" starttime="20161219 06:25:57.909"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${bmc_mem_free_output}*100</arg>
</arguments>
<assign>
<var>${bmc_mem_percentage}</var>
</assign>
<msg timestamp="20161219 06:25:57.912" level="INFO">${bmc_mem_percentage} = 36185600</msg>
<status status="PASS" endtime="20161219 06:25:57.912" starttime="20161219 06:25:57.910"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${bmc_mem_percentage}/${bmc_mem_total_output}</arg>
</arguments>
<assign>
<var>${bmc_mem_percentage}</var>
</assign>
<msg timestamp="20161219 06:25:57.915" level="INFO">${bmc_mem_percentage} = 72</msg>
<status status="PASS" endtime="20161219 06:25:57.915" starttime="20161219 06:25:57.913"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${bmc_mem_percentage} &gt; 10</arg>
</arguments>
<status status="PASS" endtime="20161219 06:25:57.918" starttime="20161219 06:25:57.915"></status>
</kw>
<status status="PASS" endtime="20161219 06:25:57.918" starttime="20161219 06:25:57.475"></status>
</kw>
<status status="PASS" endtime="20161219 06:25:57.918" starttime="20161219 06:25:57.475"></status>
</kw>
<status status="PASS" endtime="20161219 06:25:57.919" starttime="20161219 06:25:56.700"></status>
</kw>
<status status="PASS" endtime="20161219 06:25:57.919" starttime="20161219 06:25:56.700"></status>
</kw>
<doc>Check performance of memory and BMC CPU.</doc>
<status status="PASS" endtime="20161219 06:25:57.919" critical="yes" starttime="20161219 06:25:53.174"></status>
</test>
<doc>Trigger code update to a target BMC.
Execution Method :
python -m robot -v OPENBMC_HOST:&lt;hostname&gt;
-v FILE_PATH:&lt;path/*all.tar&gt; update_bmc.robot

Code update method BMC using REST
Update work flow sequence:
- User input BMC File existence check
- Ping Test and REST authentication
- Set Host Power host setting Policy to RESTORE_LAST_STATE
On reboot this policy would ensure the BMC comes
online and stays at HOST_POWERED_OFF state.
- Issue poweroff
- Prune archived journal logs
- Prepare for Update
- Wait for BMC to come online clean
- Wait for BMC_READY state
- Apply preserve BMC Network setting
- SCP image to BMC
- Activate the flash image
- Warm Reset BMC to activate code
- Wait for BMC to come online time out 30 minutes
- Version check post update</doc>
<status status="FAIL" endtime="20161219 06:25:57.921" starttime="20161219 06:25:40.141"></status>
</suite>
<statistics>
<total>
<stat fail="1" pass="1">Critical Tests</stat>
<stat fail="1" pass="1">All Tests</stat>
</total>
<tag>
</tag>
<suite>
<stat fail="1" id="s1" name="Update Bmc" pass="1">Update Bmc</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
