<?xml version="1.0" encoding="UTF-8"?>
<robot generated="20161215 04:53:40.315" generator="Robot 3.0 (Python 2.7.12 on linux2)">
<suite source="/home/fspcibld/openbmc-test-automation/extended/code_update/update_bmc.robot" id="s1" name="Update Bmc">
<test id="s1-t1" name="Initiate Code update BMC">
<kw name="Check If File Exist" library="code_update_utils">
<arguments>
<arg>${FILE_PATH}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n PATH: ${filepath}</arg>
</arguments>
<msg timestamp="20161215 04:53:40.685" level="INFO">
PATH: /home/fspcibld/barreleye-20161214205840.all.tar</msg>
<status status="PASS" endtime="20161215 04:53:40.685" starttime="20161215 04:53:40.684"></status>
</kw>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>msg=${filepath} doesn't exist [ ERROR ]</arg>
</arguments>
<msg timestamp="20161215 04:53:40.685" html="yes" level="INFO">File '&lt;a href="file:///home/fspcibld/barreleye-20161214205840.all.tar"&gt;/home/fspcibld/barreleye-20161214205840.all.tar&lt;/a&gt;' exists.</msg>
<status status="PASS" endtime="20161215 04:53:40.685" starttime="20161215 04:53:40.685"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${FILE_PATH}</arg>
<arg>${filepath}</arg>
</arguments>
<msg timestamp="20161215 04:53:40.686" level="INFO">${FILE_PATH} = /home/fspcibld/barreleye-20161214205840.all.tar</msg>
<status status="PASS" endtime="20161215 04:53:40.686" starttime="20161215 04:53:40.686"></status>
</kw>
<status status="PASS" endtime="20161215 04:53:40.686" starttime="20161215 04:53:40.684"></status>
</kw>
<kw name="System Readiness Test" library="code_update_utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Verify Ping and REST Authentication</arg>
</arguments>
<assign>
<var>${l_status}</var>
</assign>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20161215 04:53:40.688" level="INFO">Length is 9</msg>
<status status="PASS" endtime="20161215 04:53:40.688" starttime="20161215 04:53:40.688"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20161215 04:53:40.692" level="INFO">Running command 'ping -c 4 9.3.23.30 2&gt;&amp;1'.</msg>
<msg timestamp="20161215 04:53:43.696" level="INFO">${RC} = 0</msg>
<msg timestamp="20161215 04:53:43.696" level="INFO">${output} = PING 9.3.23.30 (9.3.23.30) 56(84) bytes of data.
64 bytes from 9.3.23.30: icmp_seq=1 ttl=62 time=1.74 ms
64 bytes from 9.3.23.30: icmp_seq=2 ttl=62 time=0.775 ms
64 bytes from 9.3.23.30: icmp_seq=3 tt...</msg>
<status status="PASS" endtime="20161215 04:53:43.696" starttime="20161215 04:53:40.688"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20161215 04:53:43.700" level="INFO">RC: 0
Output:
PING 9.3.23.30 (9.3.23.30) 56(84) bytes of data.
64 bytes from 9.3.23.30: icmp_seq=1 ttl=62 time=1.74 ms
64 bytes from 9.3.23.30: icmp_seq=2 ttl=62 time=0.775 ms
64 bytes from 9.3.23.30: icmp_seq=3 ttl=62 time=0.761 ms
64 bytes from 9.3.23.30: icmp_seq=4 ttl=62 time=0.757 ms

--- 9.3.23.30 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 2999ms
rtt min/avg/max/mdev = 0.757/1.010/1.748/0.426 ms</msg>
<status status="PASS" endtime="20161215 04:53:43.700" starttime="20161215 04:53:43.699"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20161215 04:53:43.702" starttime="20161215 04:53:43.700"></status>
</kw>
<status status="PASS" endtime="20161215 04:53:43.702" starttime="20161215 04:53:40.688"></status>
</kw>
<msg timestamp="20161215 04:53:43.702" level="INFO">${l_ping} = True</msg>
<status status="PASS" endtime="20161215 04:53:43.703" starttime="20161215 04:53:40.687"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<status status="PASS" endtime="20161215 04:53:43.708" starttime="20161215 04:53:43.703"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Initialize OpenBMC</arg>
</arguments>
<assign>
<var>${l_rest}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161215 04:53:43.709" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161215 04:53:43.710" starttime="20161215 04:53:43.709"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161215 04:53:43.711" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161215 04:53:43.711" starttime="20161215 04:53:43.711"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161215 04:53:43.712" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161215 04:53:43.712" starttime="20161215 04:53:43.712"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161215 04:53:43.712" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161215 04:53:43.712" starttime="20161215 04:53:43.712"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161215 04:53:44.177" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161215 04:53:44.177" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161215 04:53:44.177" starttime="20161215 04:53:43.713"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161215 04:53:44.178" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161215 04:53:44.178" starttime="20161215 04:53:44.177"></status>
</kw>
<status status="PASS" endtime="20161215 04:53:44.178" starttime="20161215 04:53:43.708"></status>
</kw>
<msg timestamp="20161215 04:53:44.178" level="INFO">${l_rest} = True</msg>
<status status="PASS" endtime="20161215 04:53:44.178" starttime="20161215 04:53:43.708"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_rest}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<status status="PASS" endtime="20161215 04:53:44.181" starttime="20161215 04:53:44.178"></status>
</kw>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20161215 04:53:44.182" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20161215 04:53:44.182" starttime="20161215 04:53:44.182"></status>
</kw>
<msg timestamp="20161215 04:53:44.182" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20161215 04:53:44.182" starttime="20161215 04:53:44.182"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20161215 04:53:44.186" starttime="20161215 04:53:44.185"></status>
</kw>
<status status="PASS" endtime="20161215 04:53:44.186" starttime="20161215 04:53:44.183"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20161215 04:53:44.189" starttime="20161215 04:53:44.186"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20161215 04:53:44.189" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20161215 04:53:44.190" starttime="20161215 04:53:44.189"></status>
</kw>
<msg timestamp="20161215 04:53:44.190" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20161215 04:53:44.190" starttime="20161215 04:53:44.189"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20161215 04:53:44.194" starttime="20161215 04:53:44.193"></status>
</kw>
<status status="PASS" endtime="20161215 04:53:44.194" starttime="20161215 04:53:44.193"></status>
</kw>
<status status="PASS" endtime="20161215 04:53:44.194" starttime="20161215 04:53:44.190"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20161215 04:53:44.194" level="INFO">Logging into '9.3.23.30:22' as 'root'.</msg>
<msg timestamp="20161215 04:53:46.876" level="INFO">Read output: 7[r[999;999H[6n</msg>
<status status="PASS" endtime="20161215 04:53:46.877" starttime="20161215 04:53:44.194"></status>
</kw>
<status status="PASS" endtime="20161215 04:53:46.877" starttime="20161215 04:53:44.181"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>hostname</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${system}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20161215 04:53:46.878" level="INFO">Executing command 'hostname'.</msg>
<msg timestamp="20161215 04:53:46.937" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20161215 04:53:46.937" level="INFO">${system} = barreleye</msg>
<msg timestamp="20161215 04:53:46.937" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20161215 04:53:46.937" starttime="20161215 04:53:46.878"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20161215 04:53:46.938" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20161215 04:53:46.939" starttime="20161215 04:53:46.938"></status>
</kw>
<status status="PASS" endtime="20161215 04:53:46.939" starttime="20161215 04:53:40.687"></status>
</kw>
<msg timestamp="20161215 04:53:46.939" level="INFO">${l_status} = True</msg>
<status status="PASS" endtime="20161215 04:53:46.939" starttime="20161215 04:53:40.687"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_status}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=System not in ideal state to use [ERROR]</arg>
</arguments>
<status status="PASS" endtime="20161215 04:53:46.946" starttime="20161215 04:53:46.940"></status>
</kw>
<status status="PASS" endtime="20161215 04:53:46.947" starttime="20161215 04:53:40.686"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Validate BMC Version</arg>
<arg>before</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Validate BMC Version" library="code_update_utils">
<arguments>
<arg>before</arg>
</arguments>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20161215 04:53:46.950" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20161215 04:53:46.950" starttime="20161215 04:53:46.950"></status>
</kw>
<msg timestamp="20161215 04:53:46.950" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20161215 04:53:46.950" starttime="20161215 04:53:46.949"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20161215 04:53:46.953" starttime="20161215 04:53:46.953"></status>
</kw>
<status status="PASS" endtime="20161215 04:53:46.953" starttime="20161215 04:53:46.950"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20161215 04:53:46.956" starttime="20161215 04:53:46.954"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20161215 04:53:46.957" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20161215 04:53:46.957" starttime="20161215 04:53:46.957"></status>
</kw>
<msg timestamp="20161215 04:53:46.957" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20161215 04:53:46.957" starttime="20161215 04:53:46.956"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20161215 04:53:46.961" starttime="20161215 04:53:46.961"></status>
</kw>
<status status="PASS" endtime="20161215 04:53:46.961" starttime="20161215 04:53:46.960"></status>
</kw>
<status status="PASS" endtime="20161215 04:53:46.961" starttime="20161215 04:53:46.957"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20161215 04:53:46.962" level="INFO">Logging into '9.3.23.30:22' as 'root'.</msg>
<msg timestamp="20161215 04:53:49.221" level="INFO">Read output: 7[r[999;999H[6n</msg>
<status status="PASS" endtime="20161215 04:53:49.221" starttime="20161215 04:53:46.962"></status>
</kw>
<status status="PASS" endtime="20161215 04:53:49.221" starttime="20161215 04:53:46.948"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>cat /etc/version</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${version}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20161215 04:53:49.222" level="INFO">Executing command 'cat /etc/version'.</msg>
<msg timestamp="20161215 04:53:49.351" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20161215 04:53:49.351" level="INFO">${version} = 20161214160444</msg>
<msg timestamp="20161215 04:53:49.351" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20161215 04:53:49.351" starttime="20161215 04:53:49.222"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20161215 04:53:49.352" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20161215 04:53:49.352" starttime="20161215 04:53:49.352"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${args}' == 'before'</arg>
<arg>Should not Contain</arg>
<arg>${FILE_PATH}</arg>
<arg>${version}</arg>
<arg>msg=Same version already installed</arg>
<arg>ELSE</arg>
<arg>Should Contain</arg>
<arg>${FILE_PATH}</arg>
<arg>${version}</arg>
<arg>msg=Code update Failed</arg>
</arguments>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${FILE_PATH}</arg>
<arg>${version}</arg>
<arg>msg=Same version already installed</arg>
</arguments>
<status status="PASS" endtime="20161215 04:53:49.358" starttime="20161215 04:53:49.357"></status>
</kw>
<status status="PASS" endtime="20161215 04:53:49.358" starttime="20161215 04:53:49.352"></status>
</kw>
<status status="PASS" endtime="20161215 04:53:49.358" starttime="20161215 04:53:46.948"></status>
</kw>
<msg timestamp="20161215 04:53:49.358" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20161215 04:53:49.358" starttime="20161215 04:53:46.947"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Pass Execution</arg>
<arg>Same Driver version installed</arg>
</arguments>
<status status="PASS" endtime="20161215 04:53:49.364" starttime="20161215 04:53:49.359"></status>
</kw>
<kw name="Initiate Power Off" library="utils">
<doc>Initiates the power off and waits until the Is Power Off</doc>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg timestamp="20161215 04:53:49.365" level="INFO">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161215 04:53:49.365" starttime="20161215 04:53:49.365"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20161215 04:53:49.366" level="INFO">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161215 04:53:49.366" starttime="20161215 04:53:49.366"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}control/chassis0/</arg>
<arg>powerOff</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161215 04:53:49.368" level="INFO">${base_uri} = /org/openbmc/control/chassis0/</msg>
<status status="PASS" endtime="20161215 04:53:49.368" starttime="20161215 04:53:49.368"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161215 04:53:49.370" level="INFO">${base_uri} = /org/openbmc/control/chassis0//action/powerOff</msg>
<status status="PASS" endtime="20161215 04:53:49.370" starttime="20161215 04:53:49.369"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161215 04:53:49.370" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161215 04:53:49.370" starttime="20161215 04:53:49.370"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161215 04:53:49.371" starttime="20161215 04:53:49.370"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161215 04:53:49.375" level="INFO">${msg} = URI:https://9.3.23.30/org/openbmc/control/chassis0//action/powerOff, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161215 04:53:49.375" starttime="20161215 04:53:49.374"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161215 04:53:49.376" level="INFO">URI:https://9.3.23.30/org/openbmc/control/chassis0//action/powerOff, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161215 04:53:49.376" starttime="20161215 04:53:49.375"></status>
</kw>
<status status="PASS" endtime="20161215 04:53:49.376" starttime="20161215 04:53:49.375"></status>
</kw>
<status status="PASS" endtime="20161215 04:53:49.376" starttime="20161215 04:53:49.373"></status>
</kw>
<status status="PASS" endtime="20161215 04:53:49.376" starttime="20161215 04:53:49.371"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161215 04:53:49.377" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161215 04:53:49.377" starttime="20161215 04:53:49.377"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161215 04:53:49.378" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161215 04:53:49.378" starttime="20161215 04:53:49.378"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161215 04:53:49.379" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161215 04:53:49.379" starttime="20161215 04:53:49.378"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161215 04:53:49.379" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161215 04:53:49.379" starttime="20161215 04:53:49.379"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161215 04:53:49.895" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161215 04:53:49.895" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161215 04:53:49.895" starttime="20161215 04:53:49.380"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161215 04:53:49.895" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161215 04:53:49.895" starttime="20161215 04:53:49.895"></status>
</kw>
<status status="PASS" endtime="20161215 04:53:49.896" starttime="20161215 04:53:49.376"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161215 04:53:50.452" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/control/chassis0//action/powerOff, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161215 04:53:50.452" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161215 04:53:50.452" starttime="20161215 04:53:49.896"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161215 04:53:50.459" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161215 04:53:50.460" starttime="20161215 04:53:50.459"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161215 04:53:50.461" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161215 04:53:50.461" starttime="20161215 04:53:50.460"></status>
</kw>
<status status="PASS" endtime="20161215 04:53:50.461" starttime="20161215 04:53:50.460"></status>
</kw>
<status status="PASS" endtime="20161215 04:53:50.461" starttime="20161215 04:53:50.458"></status>
</kw>
<status status="PASS" endtime="20161215 04:53:50.462" starttime="20161215 04:53:50.453"></status>
</kw>
<msg timestamp="20161215 04:53:50.462" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161215 04:53:50.462" starttime="20161215 04:53:49.369"></status>
</kw>
<msg timestamp="20161215 04:53:50.462" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161215 04:53:50.462" starttime="20161215 04:53:49.367"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161215 04:53:50.464" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161215 04:53:50.464" starttime="20161215 04:53:50.463"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>1 min</arg>
<arg>10 sec</arg>
<arg>Is Power Off</arg>
</arguments>
<kw name="Is Power Off" library="utils">
<kw name="Get Power State" library="utils">
<doc>Returns the power state as an integer. Either 0 or 1.</doc>
<assign>
<var>${state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg timestamp="20161215 04:53:50.467" level="INFO">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161215 04:53:50.467" starttime="20161215 04:53:50.466"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20161215 04:53:50.468" level="INFO">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161215 04:53:50.468" starttime="20161215 04:53:50.467"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}control/chassis0/</arg>
<arg>getPowerState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161215 04:53:50.469" level="INFO">${base_uri} = /org/openbmc/control/chassis0/</msg>
<status status="PASS" endtime="20161215 04:53:50.469" starttime="20161215 04:53:50.469"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161215 04:53:50.471" level="INFO">${base_uri} = /org/openbmc/control/chassis0//action/getPowerState</msg>
<status status="PASS" endtime="20161215 04:53:50.471" starttime="20161215 04:53:50.470"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161215 04:53:50.472" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161215 04:53:50.472" starttime="20161215 04:53:50.471"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161215 04:53:50.472" starttime="20161215 04:53:50.472"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161215 04:53:50.478" level="INFO">${msg} = URI:https://9.3.23.30/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161215 04:53:50.478" starttime="20161215 04:53:50.477"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161215 04:53:50.479" level="INFO">URI:https://9.3.23.30/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161215 04:53:50.479" starttime="20161215 04:53:50.479"></status>
</kw>
<status status="PASS" endtime="20161215 04:53:50.479" starttime="20161215 04:53:50.478"></status>
</kw>
<status status="PASS" endtime="20161215 04:53:50.480" starttime="20161215 04:53:50.477"></status>
</kw>
<status status="PASS" endtime="20161215 04:53:50.480" starttime="20161215 04:53:50.473"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161215 04:53:50.481" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161215 04:53:50.481" starttime="20161215 04:53:50.480"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161215 04:53:50.482" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161215 04:53:50.482" starttime="20161215 04:53:50.481"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161215 04:53:50.482" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161215 04:53:50.482" starttime="20161215 04:53:50.482"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161215 04:53:50.483" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161215 04:53:50.483" starttime="20161215 04:53:50.482"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161215 04:53:50.823" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161215 04:53:50.824" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161215 04:53:50.824" starttime="20161215 04:53:50.483"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161215 04:53:50.825" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161215 04:53:50.825" starttime="20161215 04:53:50.824"></status>
</kw>
<status status="PASS" endtime="20161215 04:53:50.825" starttime="20161215 04:53:50.480"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161215 04:53:51.092" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/control/chassis0//action/getPowerState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161215 04:53:51.092" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161215 04:53:51.092" starttime="20161215 04:53:50.825"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161215 04:53:51.098" level="INFO">${msg} = Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161215 04:53:51.099" starttime="20161215 04:53:51.098"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161215 04:53:51.100" level="INFO">Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161215 04:53:51.100" starttime="20161215 04:53:51.100"></status>
</kw>
<status status="PASS" endtime="20161215 04:53:51.100" starttime="20161215 04:53:51.099"></status>
</kw>
<status status="PASS" endtime="20161215 04:53:51.100" starttime="20161215 04:53:51.097"></status>
</kw>
<status status="PASS" endtime="20161215 04:53:51.101" starttime="20161215 04:53:51.092"></status>
</kw>
<msg timestamp="20161215 04:53:51.101" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161215 04:53:51.101" starttime="20161215 04:53:50.469"></status>
</kw>
<msg timestamp="20161215 04:53:51.101" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161215 04:53:51.101" starttime="20161215 04:53:50.468"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161215 04:53:51.102" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161215 04:53:51.103" starttime="20161215 04:53:51.102"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20161215 04:53:51.103" level="INFO">To JSON using : content={
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20161215 04:53:51.103" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20161215 04:53:51.104" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': 0}</msg>
<status status="PASS" endtime="20161215 04:53:51.104" starttime="20161215 04:53:51.103"></status>
</kw>
<msg timestamp="20161215 04:53:51.104" level="INFO">${state} = 0</msg>
<status status="PASS" endtime="20161215 04:53:51.104" starttime="20161215 04:53:50.466"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${state}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20161215 04:53:51.105" starttime="20161215 04:53:51.105"></status>
</kw>
<status status="PASS" endtime="20161215 04:53:51.105" starttime="20161215 04:53:50.465"></status>
</kw>
<status status="PASS" endtime="20161215 04:53:51.105" starttime="20161215 04:53:50.464"></status>
</kw>
<status status="PASS" endtime="20161215 04:53:51.106" starttime="20161215 04:53:49.364"></status>
</kw>
<kw name="Set Policy Setting" library="code_update_utils">
<doc>Set the given test policy</doc>
<arguments>
<arg>RESTORE_LAST_STATE</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=${policy}</arg>
</arguments>
<assign>
<var>${valueDict}</var>
</assign>
<msg timestamp="20161215 04:53:51.108" level="INFO">${valueDict} = {u'data': u'RESTORE_LAST_STATE'}</msg>
<status status="PASS" endtime="20161215 04:53:51.108" starttime="20161215 04:53:51.108"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${HOST_SETTING}</arg>
<arg>power_policy</arg>
<arg>data=${valueDict}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161215 04:53:51.109" level="INFO">${base_uri} = /org/openbmc/settings/host0</msg>
<status status="PASS" endtime="20161215 04:53:51.109" starttime="20161215 04:53:51.109"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161215 04:53:51.110" level="INFO">${base_uri} = /org/openbmc/settings/host0/attr/power_policy</msg>
<status status="PASS" endtime="20161215 04:53:51.111" starttime="20161215 04:53:51.110"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161215 04:53:51.111" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161215 04:53:51.111" starttime="20161215 04:53:51.111"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161215 04:53:51.112" starttime="20161215 04:53:51.111"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161215 04:53:51.113" level="INFO">${msg} = URI:https://9.3.23.30/org/openbmc/settings/host0/attr/power_policy, method:Put, args:{u'data': {u'data': u'RESTORE_LAST_STATE'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161215 04:53:51.113" starttime="20161215 04:53:51.112"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161215 04:53:51.114" level="INFO">URI:https://9.3.23.30/org/openbmc/settings/host0/attr/power_policy, method:Put, args:{u'data': {u'data': u'RESTORE_LAST_STATE'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161215 04:53:51.114" starttime="20161215 04:53:51.114"></status>
</kw>
<status status="PASS" endtime="20161215 04:53:51.114" starttime="20161215 04:53:51.113"></status>
</kw>
<status status="PASS" endtime="20161215 04:53:51.114" starttime="20161215 04:53:51.112"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161215 04:53:51.115" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161215 04:53:51.116" starttime="20161215 04:53:51.115"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161215 04:53:51.116" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161215 04:53:51.116" starttime="20161215 04:53:51.116"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161215 04:53:51.117" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161215 04:53:51.117" starttime="20161215 04:53:51.116"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161215 04:53:51.117" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161215 04:53:51.117" starttime="20161215 04:53:51.117"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161215 04:53:51.544" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161215 04:53:51.544" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161215 04:53:51.544" starttime="20161215 04:53:51.117"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161215 04:53:51.545" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161215 04:53:51.545" starttime="20161215 04:53:51.545"></status>
</kw>
<status status="PASS" endtime="20161215 04:53:51.545" starttime="20161215 04:53:51.114"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161215 04:53:51.750" level="INFO">Put Request using : alias=openbmc, uri=/org/openbmc/settings/host0/attr/power_policy, data={"data": "RESTORE_LAST_STATE"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg timestamp="20161215 04:53:51.751" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161215 04:53:51.751" starttime="20161215 04:53:51.545"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161215 04:53:51.752" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161215 04:53:51.752" starttime="20161215 04:53:51.752"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161215 04:53:51.754" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161215 04:53:51.754" starttime="20161215 04:53:51.754"></status>
</kw>
<status status="PASS" endtime="20161215 04:53:51.754" starttime="20161215 04:53:51.753"></status>
</kw>
<status status="PASS" endtime="20161215 04:53:51.754" starttime="20161215 04:53:51.751"></status>
</kw>
<msg timestamp="20161215 04:53:51.755" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161215 04:53:51.755" starttime="20161215 04:53:51.110"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161215 04:53:51.757" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161215 04:53:51.757" starttime="20161215 04:53:51.756"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20161215 04:53:51.758" level="INFO">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20161215 04:53:51.758" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20161215 04:53:51.758" level="INFO">${json} = {u'status': u'ok', u'message': u'200 OK', u'data': None}</msg>
<status status="PASS" endtime="20161215 04:53:51.758" starttime="20161215 04:53:51.757"></status>
</kw>
<status status="PASS" endtime="20161215 04:53:51.758" starttime="20161215 04:53:51.109"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_SETTING}</arg>
<arg>power_policy</arg>
</arguments>
<assign>
<var>${currentPolicy}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161215 04:53:51.761" level="INFO">${base_uri} = /org/openbmc/settings/host0/attr/power_policy</msg>
<status status="PASS" endtime="20161215 04:53:51.761" starttime="20161215 04:53:51.761"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161215 04:53:51.769" level="INFO">${msg} = URI:https://9.3.23.30/org/openbmc/settings/host0/attr/power_policy, method:Get, args:{}</msg>
<status status="PASS" endtime="20161215 04:53:51.769" starttime="20161215 04:53:51.768"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161215 04:53:51.769" level="INFO">URI:https://9.3.23.30/org/openbmc/settings/host0/attr/power_policy, method:Get, args:{}</msg>
<status status="PASS" endtime="20161215 04:53:51.769" starttime="20161215 04:53:51.769"></status>
</kw>
<status status="PASS" endtime="20161215 04:53:51.770" starttime="20161215 04:53:51.769"></status>
</kw>
<status status="PASS" endtime="20161215 04:53:51.770" starttime="20161215 04:53:51.766"></status>
</kw>
<status status="PASS" endtime="20161215 04:53:51.770" starttime="20161215 04:53:51.761"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161215 04:53:51.771" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161215 04:53:51.771" starttime="20161215 04:53:51.770"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161215 04:53:51.771" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161215 04:53:51.771" starttime="20161215 04:53:51.771"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161215 04:53:51.772" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161215 04:53:51.772" starttime="20161215 04:53:51.772"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161215 04:53:51.773" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161215 04:53:51.773" starttime="20161215 04:53:51.772"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161215 04:53:52.114" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161215 04:53:52.114" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161215 04:53:52.114" starttime="20161215 04:53:51.773"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161215 04:53:52.115" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161215 04:53:52.115" starttime="20161215 04:53:52.115"></status>
</kw>
<status status="PASS" endtime="20161215 04:53:52.115" starttime="20161215 04:53:51.770"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161215 04:53:52.254" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/settings/host0/attr/power_policy, headers=None </msg>
<msg timestamp="20161215 04:53:52.254" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161215 04:53:52.254" starttime="20161215 04:53:52.115"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161215 04:53:52.258" level="INFO">${msg} = Response code:200, Content:{
  "data": "RESTORE_LAST_STATE", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161215 04:53:52.258" starttime="20161215 04:53:52.258"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161215 04:53:52.259" level="INFO">Response code:200, Content:{
  "data": "RESTORE_LAST_STATE", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161215 04:53:52.259" starttime="20161215 04:53:52.259"></status>
</kw>
<status status="PASS" endtime="20161215 04:53:52.259" starttime="20161215 04:53:52.258"></status>
</kw>
<status status="PASS" endtime="20161215 04:53:52.259" starttime="20161215 04:53:52.257"></status>
</kw>
<status status="PASS" endtime="20161215 04:53:52.259" starttime="20161215 04:53:52.254"></status>
</kw>
<msg timestamp="20161215 04:53:52.259" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161215 04:53:52.259" starttime="20161215 04:53:51.759"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20161215 04:53:52.260" level="INFO">To JSON using : content={
  "data": "RESTORE_LAST_STATE", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20161215 04:53:52.261" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20161215 04:53:52.261" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'RESTORE_LAST_STATE'}</msg>
<status status="PASS" endtime="20161215 04:53:52.261" starttime="20161215 04:53:52.260"></status>
</kw>
<msg timestamp="20161215 04:53:52.261" level="INFO">${currentPolicy} = RESTORE_LAST_STATE</msg>
<status status="PASS" endtime="20161215 04:53:52.261" starttime="20161215 04:53:51.759"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${currentPolicy}</arg>
<arg>${policy}</arg>
</arguments>
<status status="PASS" endtime="20161215 04:53:52.262" starttime="20161215 04:53:52.261"></status>
</kw>
<status status="PASS" endtime="20161215 04:53:52.262" starttime="20161215 04:53:51.106"></status>
</kw>
<kw name="Prepare For Update" library="code_update_utils">
<doc>Switch to update mode in progress. This method calls</doc>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{EMPTY}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161215 04:53:52.263" level="INFO">${data} = {u'data': []}</msg>
<status status="PASS" endtime="20161215 04:53:52.263" starttime="20161215 04:53:52.262"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${BMC_PREP_METHOD}</arg>
<arg>data=${data}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161215 04:53:52.264" level="INFO">${base_uri} = /org/openbmc/control/flash/bmc/action/PrepareForUpdate</msg>
<status status="PASS" endtime="20161215 04:53:52.265" starttime="20161215 04:53:52.264"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161215 04:53:52.265" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161215 04:53:52.265" starttime="20161215 04:53:52.265"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161215 04:53:52.265" starttime="20161215 04:53:52.265"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161215 04:53:52.270" level="INFO">${msg} = URI:https://9.3.23.30/org/openbmc/control/flash/bmc/action/PrepareForUpdate, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161215 04:53:52.270" starttime="20161215 04:53:52.269"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161215 04:53:52.270" level="INFO">URI:https://9.3.23.30/org/openbmc/control/flash/bmc/action/PrepareForUpdate, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161215 04:53:52.271" starttime="20161215 04:53:52.270"></status>
</kw>
<status status="PASS" endtime="20161215 04:53:52.271" starttime="20161215 04:53:52.270"></status>
</kw>
<status status="PASS" endtime="20161215 04:53:52.271" starttime="20161215 04:53:52.268"></status>
</kw>
<status status="PASS" endtime="20161215 04:53:52.271" starttime="20161215 04:53:52.266"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161215 04:53:52.272" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161215 04:53:52.272" starttime="20161215 04:53:52.272"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161215 04:53:52.273" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161215 04:53:52.273" starttime="20161215 04:53:52.272"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161215 04:53:52.273" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161215 04:53:52.273" starttime="20161215 04:53:52.273"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161215 04:53:52.274" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161215 04:53:52.274" starttime="20161215 04:53:52.273"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161215 04:53:52.621" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161215 04:53:52.621" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161215 04:53:52.621" starttime="20161215 04:53:52.274"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161215 04:53:52.622" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161215 04:53:52.622" starttime="20161215 04:53:52.621"></status>
</kw>
<status status="PASS" endtime="20161215 04:53:52.622" starttime="20161215 04:53:52.271"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161215 04:53:53.115" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/control/flash/bmc/action/PrepareForUpdate, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161215 04:53:53.115" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161215 04:53:53.115" starttime="20161215 04:53:52.622"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161215 04:53:53.122" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161215 04:53:53.122" starttime="20161215 04:53:53.121"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161215 04:53:53.123" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161215 04:53:53.124" starttime="20161215 04:53:53.123"></status>
</kw>
<status status="PASS" endtime="20161215 04:53:53.124" starttime="20161215 04:53:53.122"></status>
</kw>
<status status="PASS" endtime="20161215 04:53:53.124" starttime="20161215 04:53:53.120"></status>
</kw>
<status status="PASS" endtime="20161215 04:53:53.124" starttime="20161215 04:53:53.116"></status>
</kw>
<msg timestamp="20161215 04:53:53.124" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161215 04:53:53.124" starttime="20161215 04:53:52.264"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161215 04:53:53.126" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161215 04:53:53.126" starttime="20161215 04:53:53.125"></status>
</kw>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${BMC_UPD_ATTR}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161215 04:53:53.128" level="INFO">${base_uri} = /org/openbmc/control/flash/bmc</msg>
<status status="PASS" endtime="20161215 04:53:53.128" starttime="20161215 04:53:53.128"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161215 04:53:53.132" level="INFO">${msg} = URI:https://9.3.23.30/org/openbmc/control/flash/bmc, method:Get, args:{}</msg>
<status status="PASS" endtime="20161215 04:53:53.132" starttime="20161215 04:53:53.132"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161215 04:53:53.133" level="INFO">URI:https://9.3.23.30/org/openbmc/control/flash/bmc, method:Get, args:{}</msg>
<status status="PASS" endtime="20161215 04:53:53.133" starttime="20161215 04:53:53.133"></status>
</kw>
<status status="PASS" endtime="20161215 04:53:53.133" starttime="20161215 04:53:53.132"></status>
</kw>
<status status="PASS" endtime="20161215 04:53:53.133" starttime="20161215 04:53:53.131"></status>
</kw>
<status status="PASS" endtime="20161215 04:53:53.133" starttime="20161215 04:53:53.128"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161215 04:53:53.135" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161215 04:53:53.135" starttime="20161215 04:53:53.135"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161215 04:53:53.136" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161215 04:53:53.136" starttime="20161215 04:53:53.136"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161215 04:53:53.137" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161215 04:53:53.137" starttime="20161215 04:53:53.136"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161215 04:53:53.137" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161215 04:53:53.137" starttime="20161215 04:53:53.137"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161215 04:53:53.470" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161215 04:53:53.470" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161215 04:53:53.470" starttime="20161215 04:53:53.137"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161215 04:53:53.471" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161215 04:53:53.471" starttime="20161215 04:53:53.471"></status>
</kw>
<status status="PASS" endtime="20161215 04:53:53.471" starttime="20161215 04:53:53.133"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161215 04:53:53.594" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/flash/bmc, headers=None </msg>
<msg timestamp="20161215 04:53:53.594" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161215 04:53:53.594" starttime="20161215 04:53:53.472"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161215 04:53:53.598" level="INFO">${msg} = Response code:200, Content:{
  "data": {
    "auto_apply": 0, 
    "clear_persistent_files": 0, 
    "filename": "", 
    "preserve_network_settings": 1, 
    "restore_application_defaults": 0, 
    "...</msg>
<status status="PASS" endtime="20161215 04:53:53.598" starttime="20161215 04:53:53.598"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161215 04:53:53.599" level="INFO">Response code:200, Content:{
  "data": {
    "auto_apply": 0, 
    "clear_persistent_files": 0, 
    "filename": "", 
    "preserve_network_settings": 1, 
    "restore_application_defaults": 0, 
    "status": "Switch to update mode in progress", 
    "update_kernel_and_apps": 0
  }, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161215 04:53:53.599" starttime="20161215 04:53:53.599"></status>
</kw>
<status status="PASS" endtime="20161215 04:53:53.599" starttime="20161215 04:53:53.598"></status>
</kw>
<status status="PASS" endtime="20161215 04:53:53.599" starttime="20161215 04:53:53.597"></status>
</kw>
<status status="PASS" endtime="20161215 04:53:53.599" starttime="20161215 04:53:53.594"></status>
</kw>
<msg timestamp="20161215 04:53:53.599" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161215 04:53:53.599" starttime="20161215 04:53:53.127"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161215 04:53:53.600" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161215 04:53:53.600" starttime="20161215 04:53:53.600"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20161215 04:53:53.601" level="INFO">To JSON using : content={
  "data": {
    "auto_apply": 0, 
    "clear_persistent_files": 0, 
    "filename": "", 
    "preserve_network_settings": 1, 
    "restore_application_defaults": 0, 
    "status": "Switch to update mode in progress", 
    "update_kernel_and_apps": 0
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20161215 04:53:53.601" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20161215 04:53:53.601" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'status': u'Switch to update mode in progress', u'update_kernel_and_apps': 0, u'clear_persistent_files': 0, u'auto_apply': 0, u'filename': u'', u'p...</msg>
<status status="PASS" endtime="20161215 04:53:53.601" starttime="20161215 04:53:53.601"></status>
</kw>
<msg timestamp="20161215 04:53:53.601" level="INFO">${data} = {u'status': u'Switch to update mode in progress', u'update_kernel_and_apps': 0, u'clear_persistent_files': 0, u'auto_apply': 0, u'filename': u'', u'preserve_network_settings': 1, u'restore_application...</msg>
<status status="PASS" endtime="20161215 04:53:53.601" starttime="20161215 04:53:53.126"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${data['status']}</arg>
<arg>Switch to update mode in progress</arg>
</arguments>
<status status="PASS" endtime="20161215 04:53:53.602" starttime="20161215 04:53:53.602"></status>
</kw>
<status status="PASS" endtime="20161215 04:53:53.602" starttime="20161215 04:53:52.262"></status>
</kw>
<kw name="Check If BMC is Up" library="utils">
<doc>Wait for Host to be online. Checks every X seconds</doc>
<arguments>
<arg>10 min</arg>
<arg>10 sec</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>${max_timeout}</arg>
<arg>${interval}</arg>
<arg>Verify Ping and REST Authentication</arg>
</arguments>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20161215 04:53:53.604" level="INFO">Length is 9</msg>
<status status="PASS" endtime="20161215 04:53:53.604" starttime="20161215 04:53:53.604"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20161215 04:53:53.610" level="INFO">Running command 'ping -c 4 9.3.23.30 2&gt;&amp;1'.</msg>
<msg timestamp="20161215 04:53:56.615" level="INFO">${RC} = 0</msg>
<msg timestamp="20161215 04:53:56.615" level="INFO">${output} = PING 9.3.23.30 (9.3.23.30) 56(84) bytes of data.
64 bytes from 9.3.23.30: icmp_seq=1 ttl=62 time=2.00 ms
64 bytes from 9.3.23.30: icmp_seq=2 ttl=62 time=0.839 ms
64 bytes from 9.3.23.30: icmp_seq=3 tt...</msg>
<status status="PASS" endtime="20161215 04:53:56.616" starttime="20161215 04:53:53.605"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20161215 04:53:56.620" level="INFO">RC: 0
Output:
PING 9.3.23.30 (9.3.23.30) 56(84) bytes of data.
64 bytes from 9.3.23.30: icmp_seq=1 ttl=62 time=2.00 ms
64 bytes from 9.3.23.30: icmp_seq=2 ttl=62 time=0.839 ms
64 bytes from 9.3.23.30: icmp_seq=3 ttl=62 time=0.821 ms
64 bytes from 9.3.23.30: icmp_seq=4 ttl=62 time=0.786 ms

--- 9.3.23.30 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 3000ms
rtt min/avg/max/mdev = 0.786/1.112/2.002/0.514 ms</msg>
<status status="PASS" endtime="20161215 04:53:56.620" starttime="20161215 04:53:56.619"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20161215 04:53:56.621" starttime="20161215 04:53:56.620"></status>
</kw>
<status status="PASS" endtime="20161215 04:53:56.621" starttime="20161215 04:53:53.604"></status>
</kw>
<msg timestamp="20161215 04:53:56.622" level="INFO">${l_ping} = True</msg>
<status status="PASS" endtime="20161215 04:53:56.622" starttime="20161215 04:53:53.604"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<status status="PASS" endtime="20161215 04:53:56.628" starttime="20161215 04:53:56.622"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Initialize OpenBMC</arg>
</arguments>
<assign>
<var>${l_rest}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161215 04:53:56.629" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161215 04:53:56.631" starttime="20161215 04:53:56.629"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161215 04:53:56.632" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161215 04:53:56.632" starttime="20161215 04:53:56.631"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161215 04:53:56.632" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161215 04:53:56.632" starttime="20161215 04:53:56.632"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161215 04:53:56.633" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161215 04:53:56.633" starttime="20161215 04:53:56.632"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161215 04:54:02.313" level="FAIL">ConnectionError: HTTPSConnectionPool(host='9.3.23.30', port=443): Max retries exceeded with url: /login (Caused by ProtocolError('Connection aborted.', error(104, 'Connection reset by peer')))</msg>
<status status="FAIL" endtime="20161215 04:54:02.313" starttime="20161215 04:53:56.633"></status>
</kw>
<status status="FAIL" endtime="20161215 04:54:02.314" starttime="20161215 04:53:56.628"></status>
</kw>
<msg timestamp="20161215 04:54:02.314" level="INFO">${l_rest} = False</msg>
<status status="PASS" endtime="20161215 04:54:02.314" starttime="20161215 04:53:56.628"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_rest}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<msg timestamp="20161215 04:54:02.319" level="FAIL">REST Authentication Failed</msg>
<status status="FAIL" endtime="20161215 04:54:02.319" starttime="20161215 04:54:02.318"></status>
</kw>
<status status="FAIL" endtime="20161215 04:54:02.319" starttime="20161215 04:54:02.314"></status>
</kw>
<status status="FAIL" endtime="20161215 04:54:02.319" starttime="20161215 04:53:53.603"></status>
</kw>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20161215 04:54:12.322" level="INFO">Length is 9</msg>
<status status="PASS" endtime="20161215 04:54:12.322" starttime="20161215 04:54:12.321"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20161215 04:54:12.327" level="INFO">Running command 'ping -c 4 9.3.23.30 2&gt;&amp;1'.</msg>
<msg timestamp="20161215 04:54:15.332" level="INFO">${RC} = 0</msg>
<msg timestamp="20161215 04:54:15.332" level="INFO">${output} = PING 9.3.23.30 (9.3.23.30) 56(84) bytes of data.
64 bytes from 9.3.23.30: icmp_seq=1 ttl=62 time=1.00 ms
64 bytes from 9.3.23.30: icmp_seq=2 ttl=62 time=0.847 ms
64 bytes from 9.3.23.30: icmp_seq=3 tt...</msg>
<status status="PASS" endtime="20161215 04:54:15.332" starttime="20161215 04:54:12.322"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20161215 04:54:15.336" level="INFO">RC: 0
Output:
PING 9.3.23.30 (9.3.23.30) 56(84) bytes of data.
64 bytes from 9.3.23.30: icmp_seq=1 ttl=62 time=1.00 ms
64 bytes from 9.3.23.30: icmp_seq=2 ttl=62 time=0.847 ms
64 bytes from 9.3.23.30: icmp_seq=3 ttl=62 time=0.841 ms
64 bytes from 9.3.23.30: icmp_seq=4 ttl=62 time=0.859 ms

--- 9.3.23.30 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 3000ms
rtt min/avg/max/mdev = 0.841/0.886/1.000/0.075 ms</msg>
<status status="PASS" endtime="20161215 04:54:15.336" starttime="20161215 04:54:15.335"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20161215 04:54:15.337" starttime="20161215 04:54:15.336"></status>
</kw>
<status status="PASS" endtime="20161215 04:54:15.337" starttime="20161215 04:54:12.321"></status>
</kw>
<msg timestamp="20161215 04:54:15.338" level="INFO">${l_ping} = True</msg>
<status status="PASS" endtime="20161215 04:54:15.338" starttime="20161215 04:54:12.320"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<status status="PASS" endtime="20161215 04:54:15.344" starttime="20161215 04:54:15.339"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Initialize OpenBMC</arg>
</arguments>
<assign>
<var>${l_rest}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161215 04:54:15.347" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161215 04:54:15.348" starttime="20161215 04:54:15.346"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161215 04:54:15.349" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161215 04:54:15.349" starttime="20161215 04:54:15.349"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161215 04:54:15.350" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161215 04:54:15.350" starttime="20161215 04:54:15.349"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161215 04:54:15.350" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161215 04:54:15.350" starttime="20161215 04:54:15.350"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161215 04:54:16.533" level="FAIL">ConnectionError: HTTPSConnectionPool(host='9.3.23.30', port=443): Max retries exceeded with url: /login (Caused by NewConnectionError('&lt;requests.packages.urllib3.connection.VerifiedHTTPSConnection object at 0x3fff8a68a090&gt;: Failed to establish a new connection: [Errno 111] Connection refused',))</msg>
<status status="FAIL" endtime="20161215 04:54:16.533" starttime="20161215 04:54:15.350"></status>
</kw>
<status status="FAIL" endtime="20161215 04:54:16.534" starttime="20161215 04:54:15.345"></status>
</kw>
<msg timestamp="20161215 04:54:16.534" level="INFO">${l_rest} = False</msg>
<status status="PASS" endtime="20161215 04:54:16.534" starttime="20161215 04:54:15.345"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_rest}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<msg timestamp="20161215 04:54:16.542" level="FAIL">REST Authentication Failed</msg>
<status status="FAIL" endtime="20161215 04:54:16.542" starttime="20161215 04:54:16.541"></status>
</kw>
<status status="FAIL" endtime="20161215 04:54:16.542" starttime="20161215 04:54:16.534"></status>
</kw>
<status status="FAIL" endtime="20161215 04:54:16.542" starttime="20161215 04:54:12.320"></status>
</kw>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20161215 04:54:26.545" level="INFO">Length is 9</msg>
<status status="PASS" endtime="20161215 04:54:26.546" starttime="20161215 04:54:26.545"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20161215 04:54:26.551" level="INFO">Running command 'ping -c 4 9.3.23.30 2&gt;&amp;1'.</msg>
<msg timestamp="20161215 04:54:39.577" level="INFO">${RC} = 1</msg>
<msg timestamp="20161215 04:54:39.577" level="INFO">${output} = PING 9.3.23.30 (9.3.23.30) 56(84) bytes of data.

--- 9.3.23.30 ping statistics ---
4 packets transmitted, 0 received, 100% packet loss, time 3022ms
</msg>
<status status="PASS" endtime="20161215 04:54:39.577" starttime="20161215 04:54:26.546"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20161215 04:54:39.581" level="INFO">RC: 1
Output:
PING 9.3.23.30 (9.3.23.30) 56(84) bytes of data.

--- 9.3.23.30 ping statistics ---
4 packets transmitted, 0 received, 100% packet loss, time 3022ms
</msg>
<status status="PASS" endtime="20161215 04:54:39.581" starttime="20161215 04:54:39.580"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<msg timestamp="20161215 04:54:39.582" level="FAIL">1 != 0</msg>
<status status="FAIL" endtime="20161215 04:54:39.582" starttime="20161215 04:54:39.581"></status>
</kw>
<status status="FAIL" endtime="20161215 04:54:39.583" starttime="20161215 04:54:26.544"></status>
</kw>
<msg timestamp="20161215 04:54:39.583" level="INFO">${l_ping} = False</msg>
<status status="PASS" endtime="20161215 04:54:39.583" starttime="20161215 04:54:26.544"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>msg=Ping Failed</arg>
</arguments>
<msg timestamp="20161215 04:54:39.589" level="FAIL">Ping Failed</msg>
<status status="FAIL" endtime="20161215 04:54:39.589" starttime="20161215 04:54:39.589"></status>
</kw>
<status status="FAIL" endtime="20161215 04:54:39.589" starttime="20161215 04:54:39.584"></status>
</kw>
<status status="FAIL" endtime="20161215 04:54:39.589" starttime="20161215 04:54:26.543"></status>
</kw>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20161215 04:54:49.593" level="INFO">Length is 9</msg>
<status status="PASS" endtime="20161215 04:54:49.593" starttime="20161215 04:54:49.592"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20161215 04:54:49.598" level="INFO">Running command 'ping -c 4 9.3.23.30 2&gt;&amp;1'.</msg>
<msg timestamp="20161215 04:55:02.607" level="INFO">${RC} = 1</msg>
<msg timestamp="20161215 04:55:02.608" level="INFO">${output} = PING 9.3.23.30 (9.3.23.30) 56(84) bytes of data.

--- 9.3.23.30 ping statistics ---
4 packets transmitted, 0 received, 100% packet loss, time 3001ms
</msg>
<status status="PASS" endtime="20161215 04:55:02.609" starttime="20161215 04:54:49.593"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20161215 04:55:02.619" level="INFO">RC: 1
Output:
PING 9.3.23.30 (9.3.23.30) 56(84) bytes of data.

--- 9.3.23.30 ping statistics ---
4 packets transmitted, 0 received, 100% packet loss, time 3001ms
</msg>
<status status="PASS" endtime="20161215 04:55:02.619" starttime="20161215 04:55:02.617"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<msg timestamp="20161215 04:55:02.620" level="FAIL">1 != 0</msg>
<status status="FAIL" endtime="20161215 04:55:02.620" starttime="20161215 04:55:02.619"></status>
</kw>
<status status="FAIL" endtime="20161215 04:55:02.621" starttime="20161215 04:54:49.591"></status>
</kw>
<msg timestamp="20161215 04:55:02.622" level="INFO">${l_ping} = False</msg>
<status status="PASS" endtime="20161215 04:55:02.622" starttime="20161215 04:54:49.591"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>msg=Ping Failed</arg>
</arguments>
<msg timestamp="20161215 04:55:02.628" level="FAIL">Ping Failed</msg>
<status status="FAIL" endtime="20161215 04:55:02.628" starttime="20161215 04:55:02.628"></status>
</kw>
<status status="FAIL" endtime="20161215 04:55:02.628" starttime="20161215 04:55:02.623"></status>
</kw>
<status status="FAIL" endtime="20161215 04:55:02.628" starttime="20161215 04:54:49.590"></status>
</kw>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20161215 04:55:12.631" level="INFO">Length is 9</msg>
<status status="PASS" endtime="20161215 04:55:12.632" starttime="20161215 04:55:12.631"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20161215 04:55:12.647" level="INFO">Running command 'ping -c 4 9.3.23.30 2&gt;&amp;1'.</msg>
<msg timestamp="20161215 04:55:25.665" level="INFO">${RC} = 1</msg>
<msg timestamp="20161215 04:55:25.665" level="INFO">${output} = PING 9.3.23.30 (9.3.23.30) 56(84) bytes of data.

--- 9.3.23.30 ping statistics ---
4 packets transmitted, 0 received, 100% packet loss, time 3023ms
</msg>
<status status="PASS" endtime="20161215 04:55:25.665" starttime="20161215 04:55:12.632"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20161215 04:55:25.669" level="INFO">RC: 1
Output:
PING 9.3.23.30 (9.3.23.30) 56(84) bytes of data.

--- 9.3.23.30 ping statistics ---
4 packets transmitted, 0 received, 100% packet loss, time 3023ms
</msg>
<status status="PASS" endtime="20161215 04:55:25.669" starttime="20161215 04:55:25.668"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<msg timestamp="20161215 04:55:25.670" level="FAIL">1 != 0</msg>
<status status="FAIL" endtime="20161215 04:55:25.670" starttime="20161215 04:55:25.669"></status>
</kw>
<status status="FAIL" endtime="20161215 04:55:25.670" starttime="20161215 04:55:12.630"></status>
</kw>
<msg timestamp="20161215 04:55:25.671" level="INFO">${l_ping} = False</msg>
<status status="PASS" endtime="20161215 04:55:25.671" starttime="20161215 04:55:12.630"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>msg=Ping Failed</arg>
</arguments>
<msg timestamp="20161215 04:55:25.676" level="FAIL">Ping Failed</msg>
<status status="FAIL" endtime="20161215 04:55:25.676" starttime="20161215 04:55:25.676"></status>
</kw>
<status status="FAIL" endtime="20161215 04:55:25.676" starttime="20161215 04:55:25.671"></status>
</kw>
<status status="FAIL" endtime="20161215 04:55:25.678" starttime="20161215 04:55:12.629"></status>
</kw>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20161215 04:55:35.682" level="INFO">Length is 9</msg>
<status status="PASS" endtime="20161215 04:55:35.682" starttime="20161215 04:55:35.681"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20161215 04:55:35.688" level="INFO">Running command 'ping -c 4 9.3.23.30 2&gt;&amp;1'.</msg>
<msg timestamp="20161215 04:55:38.696" level="INFO">${RC} = 0</msg>
<msg timestamp="20161215 04:55:38.697" level="INFO">${output} = PING 9.3.23.30 (9.3.23.30) 56(84) bytes of data.
64 bytes from 9.3.23.30: icmp_seq=1 ttl=62 time=2.61 ms
64 bytes from 9.3.23.30: icmp_seq=2 ttl=62 time=0.815 ms
64 bytes from 9.3.23.30: icmp_seq=3 tt...</msg>
<status status="PASS" endtime="20161215 04:55:38.698" starttime="20161215 04:55:35.682"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20161215 04:55:38.709" level="INFO">RC: 0
Output:
PING 9.3.23.30 (9.3.23.30) 56(84) bytes of data.
64 bytes from 9.3.23.30: icmp_seq=1 ttl=62 time=2.61 ms
64 bytes from 9.3.23.30: icmp_seq=2 ttl=62 time=0.815 ms
64 bytes from 9.3.23.30: icmp_seq=3 ttl=62 time=0.736 ms
64 bytes from 9.3.23.30: icmp_seq=4 ttl=62 time=0.781 ms

--- 9.3.23.30 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 2999ms
rtt min/avg/max/mdev = 0.736/1.235/2.611/0.795 ms</msg>
<status status="PASS" endtime="20161215 04:55:38.709" starttime="20161215 04:55:38.707"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20161215 04:55:38.711" starttime="20161215 04:55:38.710"></status>
</kw>
<status status="PASS" endtime="20161215 04:55:38.711" starttime="20161215 04:55:35.681"></status>
</kw>
<msg timestamp="20161215 04:55:38.713" level="INFO">${l_ping} = True</msg>
<status status="PASS" endtime="20161215 04:55:38.713" starttime="20161215 04:55:35.680"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<status status="PASS" endtime="20161215 04:55:38.719" starttime="20161215 04:55:38.714"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Initialize OpenBMC</arg>
</arguments>
<assign>
<var>${l_rest}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161215 04:55:38.721" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161215 04:55:38.726" starttime="20161215 04:55:38.721"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161215 04:55:38.727" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161215 04:55:38.727" starttime="20161215 04:55:38.726"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161215 04:55:38.727" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161215 04:55:38.727" starttime="20161215 04:55:38.727"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161215 04:55:38.728" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161215 04:55:38.728" starttime="20161215 04:55:38.728"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161215 04:56:19.379" level="FAIL">ConnectionError: HTTPSConnectionPool(host='9.3.23.30', port=443): Max retries exceeded with url: /login (Caused by ReadTimeoutError("HTTPSConnectionPool(host='9.3.23.30', port=443): Read timed out. (read timeout=10.0)",))</msg>
<status status="FAIL" endtime="20161215 04:56:19.380" starttime="20161215 04:55:38.728"></status>
</kw>
<status status="FAIL" endtime="20161215 04:56:19.380" starttime="20161215 04:55:38.720"></status>
</kw>
<msg timestamp="20161215 04:56:19.380" level="INFO">${l_rest} = False</msg>
<status status="PASS" endtime="20161215 04:56:19.380" starttime="20161215 04:55:38.719"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_rest}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<msg timestamp="20161215 04:56:19.386" level="FAIL">REST Authentication Failed</msg>
<status status="FAIL" endtime="20161215 04:56:19.386" starttime="20161215 04:56:19.385"></status>
</kw>
<status status="FAIL" endtime="20161215 04:56:19.386" starttime="20161215 04:56:19.381"></status>
</kw>
<status status="FAIL" endtime="20161215 04:56:19.386" starttime="20161215 04:55:35.679"></status>
</kw>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20161215 04:56:29.390" level="INFO">Length is 9</msg>
<status status="PASS" endtime="20161215 04:56:29.390" starttime="20161215 04:56:29.389"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20161215 04:56:29.395" level="INFO">Running command 'ping -c 4 9.3.23.30 2&gt;&amp;1'.</msg>
<msg timestamp="20161215 04:56:32.399" level="INFO">${RC} = 0</msg>
<msg timestamp="20161215 04:56:32.399" level="INFO">${output} = PING 9.3.23.30 (9.3.23.30) 56(84) bytes of data.
64 bytes from 9.3.23.30: icmp_seq=1 ttl=62 time=0.915 ms
64 bytes from 9.3.23.30: icmp_seq=2 ttl=62 time=0.799 ms
64 bytes from 9.3.23.30: icmp_seq=3 t...</msg>
<status status="PASS" endtime="20161215 04:56:32.400" starttime="20161215 04:56:29.390"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20161215 04:56:32.403" level="INFO">RC: 0
Output:
PING 9.3.23.30 (9.3.23.30) 56(84) bytes of data.
64 bytes from 9.3.23.30: icmp_seq=1 ttl=62 time=0.915 ms
64 bytes from 9.3.23.30: icmp_seq=2 ttl=62 time=0.799 ms
64 bytes from 9.3.23.30: icmp_seq=3 ttl=62 time=0.826 ms
64 bytes from 9.3.23.30: icmp_seq=4 ttl=62 time=0.772 ms

--- 9.3.23.30 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 2999ms
rtt min/avg/max/mdev = 0.772/0.828/0.915/0.053 ms</msg>
<status status="PASS" endtime="20161215 04:56:32.403" starttime="20161215 04:56:32.402"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20161215 04:56:32.404" starttime="20161215 04:56:32.403"></status>
</kw>
<status status="PASS" endtime="20161215 04:56:32.404" starttime="20161215 04:56:29.389"></status>
</kw>
<msg timestamp="20161215 04:56:32.405" level="INFO">${l_ping} = True</msg>
<status status="PASS" endtime="20161215 04:56:32.405" starttime="20161215 04:56:29.388"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<status status="PASS" endtime="20161215 04:56:32.410" starttime="20161215 04:56:32.405"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Initialize OpenBMC</arg>
</arguments>
<assign>
<var>${l_rest}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161215 04:56:32.412" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161215 04:56:32.413" starttime="20161215 04:56:32.412"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161215 04:56:32.414" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161215 04:56:32.414" starttime="20161215 04:56:32.413"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161215 04:56:32.414" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161215 04:56:32.414" starttime="20161215 04:56:32.414"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161215 04:56:32.415" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161215 04:56:32.415" starttime="20161215 04:56:32.414"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161215 04:56:32.762" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161215 04:56:32.763" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161215 04:56:32.763" starttime="20161215 04:56:32.415"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161215 04:56:32.763" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161215 04:56:32.764" starttime="20161215 04:56:32.763"></status>
</kw>
<status status="PASS" endtime="20161215 04:56:32.764" starttime="20161215 04:56:32.411"></status>
</kw>
<msg timestamp="20161215 04:56:32.764" level="INFO">${l_rest} = True</msg>
<status status="PASS" endtime="20161215 04:56:32.764" starttime="20161215 04:56:32.410"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_rest}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<status status="PASS" endtime="20161215 04:56:32.768" starttime="20161215 04:56:32.764"></status>
</kw>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20161215 04:56:32.770" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20161215 04:56:32.770" starttime="20161215 04:56:32.769"></status>
</kw>
<msg timestamp="20161215 04:56:32.770" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20161215 04:56:32.770" starttime="20161215 04:56:32.769"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20161215 04:56:32.775" starttime="20161215 04:56:32.774"></status>
</kw>
<status status="PASS" endtime="20161215 04:56:32.775" starttime="20161215 04:56:32.770"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20161215 04:56:32.779" starttime="20161215 04:56:32.775"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20161215 04:56:32.780" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20161215 04:56:32.780" starttime="20161215 04:56:32.780"></status>
</kw>
<msg timestamp="20161215 04:56:32.780" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20161215 04:56:32.780" starttime="20161215 04:56:32.779"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20161215 04:56:32.784" starttime="20161215 04:56:32.784"></status>
</kw>
<status status="PASS" endtime="20161215 04:56:32.784" starttime="20161215 04:56:32.783"></status>
</kw>
<status status="PASS" endtime="20161215 04:56:32.784" starttime="20161215 04:56:32.780"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20161215 04:56:32.785" level="INFO">Logging into '9.3.23.30:22' as 'root'.</msg>
<msg timestamp="20161215 04:56:39.793" level="INFO">Read output:</msg>
<status status="PASS" endtime="20161215 04:56:39.793" starttime="20161215 04:56:32.785"></status>
</kw>
<status status="PASS" endtime="20161215 04:56:39.793" starttime="20161215 04:56:32.768"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>hostname</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${system}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20161215 04:56:39.794" level="INFO">Executing command 'hostname'.</msg>
<msg timestamp="20161215 04:56:39.863" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20161215 04:56:39.863" level="INFO">${system} = barreleye</msg>
<msg timestamp="20161215 04:56:39.863" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20161215 04:56:39.864" starttime="20161215 04:56:39.794"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20161215 04:56:39.865" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20161215 04:56:39.865" starttime="20161215 04:56:39.864"></status>
</kw>
<status status="PASS" endtime="20161215 04:56:39.865" starttime="20161215 04:56:29.387"></status>
</kw>
<status status="PASS" endtime="20161215 04:56:39.865" starttime="20161215 04:53:53.603"></status>
</kw>
<status status="PASS" endtime="20161215 04:56:39.865" starttime="20161215 04:53:53.602"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>BMC_READY</arg>
<arg>HOST_POWERED_OFF</arg>
</arguments>
<assign>
<var>@{states}</var>
</assign>
<msg timestamp="20161215 04:56:39.866" level="INFO">@{states} = [ BMC_READY | HOST_POWERED_OFF ]</msg>
<status status="PASS" endtime="20161215 04:56:39.866" starttime="20161215 04:56:39.866"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>10 min</arg>
<arg>10 sec</arg>
<arg>Verify BMC State</arg>
<arg>${states}</arg>
</arguments>
<kw name="Verify BMC State" library="utils">
<doc>Get the BMC state and verify if the current</doc>
<arguments>
<arg>${states}</arg>
</arguments>
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${current}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg timestamp="20161215 04:56:39.870" level="INFO">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161215 04:56:39.870" starttime="20161215 04:56:39.870"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20161215 04:56:39.871" level="INFO">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161215 04:56:39.871" starttime="20161215 04:56:39.871"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161215 04:56:39.873" level="INFO">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" endtime="20161215 04:56:39.873" starttime="20161215 04:56:39.872"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161215 04:56:39.875" level="INFO">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" endtime="20161215 04:56:39.875" starttime="20161215 04:56:39.875"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161215 04:56:39.876" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161215 04:56:39.876" starttime="20161215 04:56:39.876"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161215 04:56:39.877" starttime="20161215 04:56:39.877"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161215 04:56:39.883" level="INFO">${msg} = URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161215 04:56:39.883" starttime="20161215 04:56:39.882"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161215 04:56:39.884" level="INFO">URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161215 04:56:39.884" starttime="20161215 04:56:39.883"></status>
</kw>
<status status="PASS" endtime="20161215 04:56:39.884" starttime="20161215 04:56:39.883"></status>
</kw>
<status status="PASS" endtime="20161215 04:56:39.884" starttime="20161215 04:56:39.881"></status>
</kw>
<status status="PASS" endtime="20161215 04:56:39.884" starttime="20161215 04:56:39.877"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161215 04:56:39.885" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161215 04:56:39.886" starttime="20161215 04:56:39.885"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161215 04:56:39.886" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161215 04:56:39.886" starttime="20161215 04:56:39.886"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161215 04:56:39.887" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161215 04:56:39.887" starttime="20161215 04:56:39.887"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161215 04:56:39.888" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161215 04:56:39.888" starttime="20161215 04:56:39.887"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161215 04:56:40.215" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161215 04:56:40.215" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161215 04:56:40.215" starttime="20161215 04:56:39.888"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161215 04:56:40.216" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161215 04:56:40.216" starttime="20161215 04:56:40.216"></status>
</kw>
<status status="PASS" endtime="20161215 04:56:40.216" starttime="20161215 04:56:39.884"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161215 04:56:45.790" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161215 04:56:45.790" level="INFO">${ret} = &lt;Response [503]&gt;</msg>
<status status="PASS" endtime="20161215 04:56:45.790" starttime="20161215 04:56:40.217"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161215 04:56:45.797" level="INFO">${msg} = Response code:503, Content:{
  "data": {
    "description": "org.freedesktop.DBus.Error.ObjectPathInUse: busy processing bus traffic"
  }, 
  "message": "503 Service Unavailable", 
  "status": "error"...</msg>
<status status="PASS" endtime="20161215 04:56:45.797" starttime="20161215 04:56:45.796"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161215 04:56:45.799" level="INFO">Response code:503, Content:{
  "data": {
    "description": "org.freedesktop.DBus.Error.ObjectPathInUse: busy processing bus traffic"
  }, 
  "message": "503 Service Unavailable", 
  "status": "error"
}</msg>
<status status="PASS" endtime="20161215 04:56:45.799" starttime="20161215 04:56:45.798"></status>
</kw>
<status status="PASS" endtime="20161215 04:56:45.800" starttime="20161215 04:56:45.798"></status>
</kw>
<status status="PASS" endtime="20161215 04:56:45.801" starttime="20161215 04:56:45.796"></status>
</kw>
<status status="PASS" endtime="20161215 04:56:45.801" starttime="20161215 04:56:45.791"></status>
</kw>
<msg timestamp="20161215 04:56:45.801" level="INFO">${resp} = &lt;Response [503]&gt;</msg>
<status status="PASS" endtime="20161215 04:56:45.801" starttime="20161215 04:56:39.873"></status>
</kw>
<msg timestamp="20161215 04:56:45.801" level="INFO">${resp} = &lt;Response [503]&gt;</msg>
<status status="PASS" endtime="20161215 04:56:45.801" starttime="20161215 04:56:39.871"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161215 04:56:45.802" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20161215 04:56:45.802" level="FAIL">503 != 200</msg>
<status status="FAIL" endtime="20161215 04:56:45.802" starttime="20161215 04:56:45.801"></status>
</kw>
<status status="FAIL" endtime="20161215 04:56:45.802" starttime="20161215 04:56:39.869"></status>
</kw>
<status status="FAIL" endtime="20161215 04:56:45.802" starttime="20161215 04:56:39.868"></status>
</kw>
<kw name="Verify BMC State" library="utils">
<doc>Get the BMC state and verify if the current</doc>
<arguments>
<arg>${states}</arg>
</arguments>
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${current}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg timestamp="20161215 04:56:55.806" level="INFO">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161215 04:56:55.806" starttime="20161215 04:56:55.805"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20161215 04:56:55.807" level="INFO">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161215 04:56:55.807" starttime="20161215 04:56:55.806"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161215 04:56:55.808" level="INFO">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" endtime="20161215 04:56:55.808" starttime="20161215 04:56:55.808"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161215 04:56:55.812" level="INFO">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" endtime="20161215 04:56:55.812" starttime="20161215 04:56:55.811"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161215 04:56:55.812" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161215 04:56:55.812" starttime="20161215 04:56:55.812"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161215 04:56:55.813" starttime="20161215 04:56:55.813"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161215 04:56:55.820" level="INFO">${msg} = URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161215 04:56:55.820" starttime="20161215 04:56:55.819"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161215 04:56:55.821" level="INFO">URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161215 04:56:55.821" starttime="20161215 04:56:55.821"></status>
</kw>
<status status="PASS" endtime="20161215 04:56:55.821" starttime="20161215 04:56:55.820"></status>
</kw>
<status status="PASS" endtime="20161215 04:56:55.821" starttime="20161215 04:56:55.818"></status>
</kw>
<status status="PASS" endtime="20161215 04:56:55.821" starttime="20161215 04:56:55.814"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161215 04:56:55.822" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161215 04:56:55.822" starttime="20161215 04:56:55.822"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161215 04:56:55.823" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161215 04:56:55.823" starttime="20161215 04:56:55.823"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161215 04:56:55.824" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161215 04:56:55.824" starttime="20161215 04:56:55.823"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161215 04:56:55.824" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161215 04:56:55.824" starttime="20161215 04:56:55.824"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161215 04:57:16.755" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161215 04:57:16.755" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161215 04:57:16.755" starttime="20161215 04:56:55.825"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161215 04:57:16.756" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161215 04:57:16.756" starttime="20161215 04:57:16.755"></status>
</kw>
<status status="PASS" endtime="20161215 04:57:16.756" starttime="20161215 04:56:55.821"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161215 04:57:17.046" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161215 04:57:17.047" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161215 04:57:17.047" starttime="20161215 04:57:16.757"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161215 04:57:17.055" level="INFO">${msg} = Response code:200, Content:{
  "data": "BMC_READY", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161215 04:57:17.055" starttime="20161215 04:57:17.054"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161215 04:57:17.056" level="INFO">Response code:200, Content:{
  "data": "BMC_READY", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161215 04:57:17.056" starttime="20161215 04:57:17.056"></status>
</kw>
<status status="PASS" endtime="20161215 04:57:17.056" starttime="20161215 04:57:17.055"></status>
</kw>
<status status="PASS" endtime="20161215 04:57:17.057" starttime="20161215 04:57:17.053"></status>
</kw>
<status status="PASS" endtime="20161215 04:57:17.057" starttime="20161215 04:57:17.047"></status>
</kw>
<msg timestamp="20161215 04:57:17.057" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161215 04:57:17.057" starttime="20161215 04:56:55.809"></status>
</kw>
<msg timestamp="20161215 04:57:17.057" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161215 04:57:17.057" starttime="20161215 04:56:55.807"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161215 04:57:17.058" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161215 04:57:17.058" starttime="20161215 04:57:17.058"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20161215 04:57:17.059" level="INFO">To JSON using : content={
  "data": "BMC_READY", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20161215 04:57:17.059" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20161215 04:57:17.059" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'BMC_READY'}</msg>
<status status="PASS" endtime="20161215 04:57:17.060" starttime="20161215 04:57:17.059"></status>
</kw>
<msg timestamp="20161215 04:57:17.060" level="INFO">${current} = BMC_READY</msg>
<status status="PASS" endtime="20161215 04:57:17.060" starttime="20161215 04:56:55.804"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${expected}</arg>
<arg>${current}</arg>
</arguments>
<status status="PASS" endtime="20161215 04:57:17.061" starttime="20161215 04:57:17.060"></status>
</kw>
<status status="PASS" endtime="20161215 04:57:17.061" starttime="20161215 04:56:55.803"></status>
</kw>
<status status="PASS" endtime="20161215 04:57:17.061" starttime="20161215 04:56:39.867"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>1 min</arg>
</arguments>
<msg timestamp="20161215 04:58:17.062" level="INFO">Slept 1 minute</msg>
<status status="PASS" endtime="20161215 04:58:17.062" starttime="20161215 04:57:17.061"></status>
</kw>
<kw name="Preserve BMC Network Setting" library="code_update_utils">
<doc>Preserve Network setting</doc>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${1}</arg>
</arguments>
<assign>
<var>${policy}</var>
</assign>
<msg timestamp="20161215 04:58:17.065" level="INFO">${policy} = 1</msg>
<status status="PASS" endtime="20161215 04:58:17.065" starttime="20161215 04:58:17.065"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=${policy}</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20161215 04:58:17.068" level="INFO">${value} = {u'data': 1}</msg>
<status status="PASS" endtime="20161215 04:58:17.068" starttime="20161215 04:58:17.066"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${BMC_UPD_ATTR}</arg>
<arg>preserve_network_settings</arg>
<arg>data=${value}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161215 04:58:17.072" level="INFO">${base_uri} = /org/openbmc/control/flash/bmc</msg>
<status status="PASS" endtime="20161215 04:58:17.072" starttime="20161215 04:58:17.071"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161215 04:58:17.075" level="INFO">${base_uri} = /org/openbmc/control/flash/bmc/attr/preserve_network_settings</msg>
<status status="PASS" endtime="20161215 04:58:17.075" starttime="20161215 04:58:17.074"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161215 04:58:17.076" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161215 04:58:17.076" starttime="20161215 04:58:17.076"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161215 04:58:17.077" starttime="20161215 04:58:17.077"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161215 04:58:17.080" level="INFO">${msg} = URI:https://9.3.23.30/org/openbmc/control/flash/bmc/attr/preserve_network_settings, method:Put, args:{u'data': {u'data': 1}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161215 04:58:17.080" starttime="20161215 04:58:17.079"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161215 04:58:17.082" level="INFO">URI:https://9.3.23.30/org/openbmc/control/flash/bmc/attr/preserve_network_settings, method:Put, args:{u'data': {u'data': 1}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161215 04:58:17.082" starttime="20161215 04:58:17.081"></status>
</kw>
<status status="PASS" endtime="20161215 04:58:17.083" starttime="20161215 04:58:17.081"></status>
</kw>
<status status="PASS" endtime="20161215 04:58:17.083" starttime="20161215 04:58:17.078"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161215 04:58:17.086" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161215 04:58:17.087" starttime="20161215 04:58:17.085"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161215 04:58:17.088" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161215 04:58:17.088" starttime="20161215 04:58:17.087"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161215 04:58:17.089" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161215 04:58:17.089" starttime="20161215 04:58:17.088"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161215 04:58:17.090" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161215 04:58:17.090" starttime="20161215 04:58:17.089"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161215 04:58:17.415" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161215 04:58:17.415" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161215 04:58:17.415" starttime="20161215 04:58:17.090"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161215 04:58:17.416" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161215 04:58:17.416" starttime="20161215 04:58:17.416"></status>
</kw>
<status status="PASS" endtime="20161215 04:58:17.416" starttime="20161215 04:58:17.084"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161215 04:58:17.709" level="INFO">Put Request using : alias=openbmc, uri=/org/openbmc/control/flash/bmc/attr/preserve_network_settings, data={"data": 1},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg timestamp="20161215 04:58:17.709" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161215 04:58:17.709" starttime="20161215 04:58:17.417"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161215 04:58:17.711" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161215 04:58:17.711" starttime="20161215 04:58:17.710"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161215 04:58:17.713" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161215 04:58:17.713" starttime="20161215 04:58:17.712"></status>
</kw>
<status status="PASS" endtime="20161215 04:58:17.713" starttime="20161215 04:58:17.711"></status>
</kw>
<status status="PASS" endtime="20161215 04:58:17.713" starttime="20161215 04:58:17.710"></status>
</kw>
<msg timestamp="20161215 04:58:17.714" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161215 04:58:17.714" starttime="20161215 04:58:17.073"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161215 04:58:17.715" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161215 04:58:17.715" starttime="20161215 04:58:17.714"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20161215 04:58:17.715" level="INFO">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20161215 04:58:17.716" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20161215 04:58:17.716" level="INFO">${json} = {u'status': u'ok', u'message': u'200 OK', u'data': None}</msg>
<status status="PASS" endtime="20161215 04:58:17.716" starttime="20161215 04:58:17.715"></status>
</kw>
<status status="PASS" endtime="20161215 04:58:17.716" starttime="20161215 04:58:17.069"></status>
</kw>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${BMC_UPD_ATTR}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161215 04:58:17.718" level="INFO">${base_uri} = /org/openbmc/control/flash/bmc</msg>
<status status="PASS" endtime="20161215 04:58:17.718" starttime="20161215 04:58:17.718"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161215 04:58:17.723" level="INFO">${msg} = URI:https://9.3.23.30/org/openbmc/control/flash/bmc, method:Get, args:{}</msg>
<status status="PASS" endtime="20161215 04:58:17.723" starttime="20161215 04:58:17.723"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161215 04:58:17.724" level="INFO">URI:https://9.3.23.30/org/openbmc/control/flash/bmc, method:Get, args:{}</msg>
<status status="PASS" endtime="20161215 04:58:17.724" starttime="20161215 04:58:17.724"></status>
</kw>
<status status="PASS" endtime="20161215 04:58:17.724" starttime="20161215 04:58:17.723"></status>
</kw>
<status status="PASS" endtime="20161215 04:58:17.724" starttime="20161215 04:58:17.722"></status>
</kw>
<status status="PASS" endtime="20161215 04:58:17.724" starttime="20161215 04:58:17.718"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161215 04:58:17.725" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161215 04:58:17.726" starttime="20161215 04:58:17.725"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161215 04:58:17.727" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161215 04:58:17.727" starttime="20161215 04:58:17.727"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161215 04:58:17.728" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161215 04:58:17.728" starttime="20161215 04:58:17.727"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161215 04:58:17.728" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161215 04:58:17.728" starttime="20161215 04:58:17.728"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161215 04:58:18.267" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161215 04:58:18.267" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161215 04:58:18.267" starttime="20161215 04:58:17.728"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161215 04:58:18.268" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161215 04:58:18.268" starttime="20161215 04:58:18.267"></status>
</kw>
<status status="PASS" endtime="20161215 04:58:18.268" starttime="20161215 04:58:17.725"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161215 04:58:18.388" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/flash/bmc, headers=None </msg>
<msg timestamp="20161215 04:58:18.389" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161215 04:58:18.389" starttime="20161215 04:58:18.268"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161215 04:58:18.393" level="INFO">${msg} = Response code:200, Content:{
  "data": {
    "auto_apply": 0, 
    "clear_persistent_files": 0, 
    "filename": "", 
    "preserve_network_settings": 1, 
    "restore_application_defaults": 0, 
    "...</msg>
<status status="PASS" endtime="20161215 04:58:18.393" starttime="20161215 04:58:18.392"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161215 04:58:18.393" level="INFO">Response code:200, Content:{
  "data": {
    "auto_apply": 0, 
    "clear_persistent_files": 0, 
    "filename": "", 
    "preserve_network_settings": 1, 
    "restore_application_defaults": 0, 
    "status": "Idle", 
    "update_kernel_and_apps": 0
  }, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161215 04:58:18.393" starttime="20161215 04:58:18.393"></status>
</kw>
<status status="PASS" endtime="20161215 04:58:18.394" starttime="20161215 04:58:18.393"></status>
</kw>
<status status="PASS" endtime="20161215 04:58:18.394" starttime="20161215 04:58:18.392"></status>
</kw>
<status status="PASS" endtime="20161215 04:58:18.394" starttime="20161215 04:58:18.389"></status>
</kw>
<msg timestamp="20161215 04:58:18.394" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161215 04:58:18.394" starttime="20161215 04:58:17.717"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161215 04:58:18.395" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161215 04:58:18.395" starttime="20161215 04:58:18.394"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20161215 04:58:18.395" level="INFO">To JSON using : content={
  "data": {
    "auto_apply": 0, 
    "clear_persistent_files": 0, 
    "filename": "", 
    "preserve_network_settings": 1, 
    "restore_application_defaults": 0, 
    "status": "Idle", 
    "update_kernel_and_apps": 0
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20161215 04:58:18.395" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20161215 04:58:18.395" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'status': u'Idle', u'update_kernel_and_apps': 0, u'clear_persistent_files': 0, u'auto_apply': 0, u'filename': u'', u'preserve_network_settings': 1,...</msg>
<status status="PASS" endtime="20161215 04:58:18.395" starttime="20161215 04:58:18.395"></status>
</kw>
<msg timestamp="20161215 04:58:18.396" level="INFO">${data} = {u'status': u'Idle', u'update_kernel_and_apps': 0, u'clear_persistent_files': 0, u'auto_apply': 0, u'filename': u'', u'preserve_network_settings': 1, u'restore_application_defaults': 0}</msg>
<status status="PASS" endtime="20161215 04:58:18.396" starttime="20161215 04:58:17.716"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${data['preserve_network_settings']}</arg>
<arg>${1}</arg>
<arg>msg=0 indicates network is not preserved</arg>
</arguments>
<status status="PASS" endtime="20161215 04:58:18.396" starttime="20161215 04:58:18.396"></status>
</kw>
<status status="PASS" endtime="20161215 04:58:18.397" starttime="20161215 04:58:17.063"></status>
</kw>
<kw name="SCP Tar Image File to BMC" library="code_update_utils">
<arguments>
<arg>${FILE_PATH}</arg>
</arguments>
<kw name="Open Connection for SCP" library="connection_client">
<kw name="Import Library" library="BuiltIn">
<doc>Imports a library with the given name and optional arguments.</doc>
<arguments>
<arg>SCPLibrary</arg>
<arg>WITH NAME</arg>
<arg>scp</arg>
</arguments>
<status status="PASS" endtime="20161215 04:58:18.420" starttime="20161215 04:58:18.398"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' == '${EMPTY}'</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw name="Open Connection" library="scp">
<doc>Opens a new SCP connection to the given host.</doc>
<arguments>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<status status="PASS" endtime="20161215 04:58:19.692" starttime="20161215 04:58:18.424"></status>
</kw>
<status status="PASS" endtime="20161215 04:58:19.692" starttime="20161215 04:58:18.420"></status>
</kw>
<status status="PASS" endtime="20161215 04:58:19.692" starttime="20161215 04:58:18.397"></status>
</kw>
<kw name="Put File" library="scp">
<doc>Uploads a file to the remote machine from the local machine.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>/tmp/flashimg</arg>
</arguments>
<status status="PASS" endtime="20161215 04:58:47.895" starttime="20161215 04:58:19.692"></status>
</kw>
<status status="PASS" endtime="20161215 04:58:47.895" starttime="20161215 04:58:18.397"></status>
</kw>
<kw name="Activate BMC flash image" library="code_update_utils">
<doc>Activate and verify the update status</doc>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>/tmp/flashimg</arg>
</arguments>
<assign>
<var>@{img_path}</var>
</assign>
<msg timestamp="20161215 04:58:47.899" level="INFO">@{img_path} = [ /tmp/flashimg ]</msg>
<status status="PASS" endtime="20161215 04:58:47.899" starttime="20161215 04:58:47.899"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{img_path}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161215 04:58:47.900" level="INFO">${data} = {u'data': [u'/tmp/flashimg']}</msg>
<status status="PASS" endtime="20161215 04:58:47.900" starttime="20161215 04:58:47.899"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${BMC_UPD_METHOD}</arg>
<arg>data=${data}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161215 04:58:47.902" level="INFO">${base_uri} = /org/openbmc/control/flash/bmc/action/update</msg>
<status status="PASS" endtime="20161215 04:58:47.902" starttime="20161215 04:58:47.901"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161215 04:58:47.903" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161215 04:58:47.903" starttime="20161215 04:58:47.902"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161215 04:58:47.904" starttime="20161215 04:58:47.904"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161215 04:58:47.912" level="INFO">${msg} = URI:https://9.3.23.30/org/openbmc/control/flash/bmc/action/update, method:Post, args:{u'data': {u'data': [u'/tmp/flashimg']}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161215 04:58:47.912" starttime="20161215 04:58:47.911"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161215 04:58:47.915" level="INFO">URI:https://9.3.23.30/org/openbmc/control/flash/bmc/action/update, method:Post, args:{u'data': {u'data': [u'/tmp/flashimg']}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161215 04:58:47.915" starttime="20161215 04:58:47.913"></status>
</kw>
<status status="PASS" endtime="20161215 04:58:47.915" starttime="20161215 04:58:47.912"></status>
</kw>
<status status="PASS" endtime="20161215 04:58:47.915" starttime="20161215 04:58:47.910"></status>
</kw>
<status status="PASS" endtime="20161215 04:58:47.915" starttime="20161215 04:58:47.905"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161215 04:58:47.917" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161215 04:58:47.917" starttime="20161215 04:58:47.916"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161215 04:58:47.918" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161215 04:58:47.918" starttime="20161215 04:58:47.917"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161215 04:58:47.919" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161215 04:58:47.919" starttime="20161215 04:58:47.918"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161215 04:58:47.919" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161215 04:58:47.920" starttime="20161215 04:58:47.919"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161215 04:58:48.327" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161215 04:58:48.328" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161215 04:58:48.328" starttime="20161215 04:58:47.920"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161215 04:58:48.328" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161215 04:58:48.328" starttime="20161215 04:58:48.328"></status>
</kw>
<status status="PASS" endtime="20161215 04:58:48.328" starttime="20161215 04:58:47.916"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161215 04:58:53.683" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/control/flash/bmc/action/update, data={"data": ["/tmp/flashimg"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161215 04:58:53.683" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161215 04:58:53.683" starttime="20161215 04:58:48.329"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161215 04:58:53.690" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161215 04:58:53.690" starttime="20161215 04:58:53.689"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161215 04:58:53.692" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161215 04:58:53.693" starttime="20161215 04:58:53.691"></status>
</kw>
<status status="PASS" endtime="20161215 04:58:53.693" starttime="20161215 04:58:53.690"></status>
</kw>
<status status="PASS" endtime="20161215 04:58:53.694" starttime="20161215 04:58:53.688"></status>
</kw>
<status status="PASS" endtime="20161215 04:58:53.694" starttime="20161215 04:58:53.683"></status>
</kw>
<msg timestamp="20161215 04:58:53.694" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161215 04:58:53.695" starttime="20161215 04:58:47.900"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161215 04:58:53.695" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161215 04:58:53.696" starttime="20161215 04:58:53.695"></status>
</kw>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${BMC_UPD_ATTR}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161215 04:58:53.698" level="INFO">${base_uri} = /org/openbmc/control/flash/bmc</msg>
<status status="PASS" endtime="20161215 04:58:53.698" starttime="20161215 04:58:53.697"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161215 04:58:53.704" level="INFO">${msg} = URI:https://9.3.23.30/org/openbmc/control/flash/bmc, method:Get, args:{}</msg>
<status status="PASS" endtime="20161215 04:58:53.704" starttime="20161215 04:58:53.704"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161215 04:58:53.705" level="INFO">URI:https://9.3.23.30/org/openbmc/control/flash/bmc, method:Get, args:{}</msg>
<status status="PASS" endtime="20161215 04:58:53.706" starttime="20161215 04:58:53.705"></status>
</kw>
<status status="PASS" endtime="20161215 04:58:53.706" starttime="20161215 04:58:53.705"></status>
</kw>
<status status="PASS" endtime="20161215 04:58:53.706" starttime="20161215 04:58:53.703"></status>
</kw>
<status status="PASS" endtime="20161215 04:58:53.706" starttime="20161215 04:58:53.698"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161215 04:58:53.707" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161215 04:58:53.708" starttime="20161215 04:58:53.707"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161215 04:58:53.708" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161215 04:58:53.708" starttime="20161215 04:58:53.708"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161215 04:58:53.709" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161215 04:58:53.709" starttime="20161215 04:58:53.708"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161215 04:58:53.709" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161215 04:58:53.709" starttime="20161215 04:58:53.709"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161215 04:58:54.047" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161215 04:58:54.047" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161215 04:58:54.047" starttime="20161215 04:58:53.709"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161215 04:58:54.048" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161215 04:58:54.048" starttime="20161215 04:58:54.048"></status>
</kw>
<status status="PASS" endtime="20161215 04:58:54.048" starttime="20161215 04:58:53.706"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161215 04:58:54.161" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/flash/bmc, headers=None </msg>
<msg timestamp="20161215 04:58:54.161" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161215 04:58:54.161" starttime="20161215 04:58:54.048"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161215 04:58:54.165" level="INFO">${msg} = Response code:200, Content:{
  "data": {
    "auto_apply": 0, 
    "clear_persistent_files": 0, 
    "filename": "/tmp/flashimg", 
    "preserve_network_settings": 1, 
    "restore_application_default...</msg>
<status status="PASS" endtime="20161215 04:58:54.165" starttime="20161215 04:58:54.165"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161215 04:58:54.166" level="INFO">Response code:200, Content:{
  "data": {
    "auto_apply": 0, 
    "clear_persistent_files": 0, 
    "filename": "/tmp/flashimg", 
    "preserve_network_settings": 1, 
    "restore_application_defaults": 0, 
    "status": "Image ready to apply.", 
    "update_kernel_and_apps": 0
  }, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161215 04:58:54.168" starttime="20161215 04:58:54.166"></status>
</kw>
<status status="PASS" endtime="20161215 04:58:54.168" starttime="20161215 04:58:54.166"></status>
</kw>
<status status="PASS" endtime="20161215 04:58:54.168" starttime="20161215 04:58:54.164"></status>
</kw>
<status status="PASS" endtime="20161215 04:58:54.168" starttime="20161215 04:58:54.162"></status>
</kw>
<msg timestamp="20161215 04:58:54.168" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161215 04:58:54.168" starttime="20161215 04:58:53.696"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161215 04:58:54.169" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161215 04:58:54.169" starttime="20161215 04:58:54.168"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20161215 04:58:54.170" level="INFO">To JSON using : content={
  "data": {
    "auto_apply": 0, 
    "clear_persistent_files": 0, 
    "filename": "/tmp/flashimg", 
    "preserve_network_settings": 1, 
    "restore_application_defaults": 0, 
    "status": "Image ready to apply.", 
    "update_kernel_and_apps": 0
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20161215 04:58:54.170" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20161215 04:58:54.170" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'status': u'Image ready to apply.', u'update_kernel_and_apps': 0, u'clear_persistent_files': 0, u'auto_apply': 0, u'filename': u'/tmp/flashimg', u'...</msg>
<status status="PASS" endtime="20161215 04:58:54.170" starttime="20161215 04:58:54.169"></status>
</kw>
<msg timestamp="20161215 04:58:54.170" level="INFO">${data} = {u'status': u'Image ready to apply.', u'update_kernel_and_apps': 0, u'clear_persistent_files': 0, u'auto_apply': 0, u'filename': u'/tmp/flashimg', u'preserve_network_settings': 1, u'restore_applicatio...</msg>
<status status="PASS" endtime="20161215 04:58:54.170" starttime="20161215 04:58:53.696"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${data["filename"]}</arg>
<arg>/tmp/flashimg</arg>
</arguments>
<status status="PASS" endtime="20161215 04:58:54.171" starttime="20161215 04:58:54.170"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${data['status']}</arg>
<arg>to apply</arg>
</arguments>
<status status="PASS" endtime="20161215 04:58:54.171" starttime="20161215 04:58:54.171"></status>
</kw>
<status status="PASS" endtime="20161215 04:58:54.171" starttime="20161215 04:58:47.897"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Trigger Warm Reset</arg>
</arguments>
<kw name="Trigger Warm Reset" library="utils">
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>"Triggering warm reset"</arg>
</arguments>
<status status="PASS" endtime="20161215 04:58:54.173" starttime="20161215 04:58:54.173"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{EMPTY}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161215 04:58:54.173" level="INFO">${data} = {u'data': []}</msg>
<status status="PASS" endtime="20161215 04:58:54.173" starttime="20161215 04:58:54.173"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}control/bmc0/action/warmReset</arg>
<arg>data=${data}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161215 04:58:54.174" level="INFO">${base_uri} = /org/openbmc/control/bmc0/action/warmReset</msg>
<status status="PASS" endtime="20161215 04:58:54.174" starttime="20161215 04:58:54.174"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161215 04:58:54.175" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161215 04:58:54.175" starttime="20161215 04:58:54.175"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161215 04:58:54.175" starttime="20161215 04:58:54.175"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161215 04:58:54.180" level="INFO">${msg} = URI:https://9.3.23.30/org/openbmc/control/bmc0/action/warmReset, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161215 04:58:54.180" starttime="20161215 04:58:54.179"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161215 04:58:54.180" level="INFO">URI:https://9.3.23.30/org/openbmc/control/bmc0/action/warmReset, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161215 04:58:54.180" starttime="20161215 04:58:54.180"></status>
</kw>
<status status="PASS" endtime="20161215 04:58:54.181" starttime="20161215 04:58:54.180"></status>
</kw>
<status status="PASS" endtime="20161215 04:58:54.181" starttime="20161215 04:58:54.178"></status>
</kw>
<status status="PASS" endtime="20161215 04:58:54.181" starttime="20161215 04:58:54.176"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161215 04:58:54.182" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161215 04:58:54.182" starttime="20161215 04:58:54.181"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161215 04:58:54.183" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161215 04:58:54.183" starttime="20161215 04:58:54.182"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161215 04:58:54.183" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161215 04:58:54.183" starttime="20161215 04:58:54.183"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161215 04:58:54.184" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161215 04:58:54.184" starttime="20161215 04:58:54.183"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161215 04:58:54.513" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161215 04:58:54.513" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161215 04:58:54.513" starttime="20161215 04:58:54.184"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161215 04:58:54.513" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161215 04:58:54.513" starttime="20161215 04:58:54.513"></status>
</kw>
<status status="PASS" endtime="20161215 04:58:54.514" starttime="20161215 04:58:54.181"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161215 04:58:54.795" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/control/bmc0/action/warmReset, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161215 04:58:54.795" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161215 04:58:54.795" starttime="20161215 04:58:54.514"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161215 04:58:54.799" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161215 04:58:54.799" starttime="20161215 04:58:54.799"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161215 04:58:54.800" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161215 04:58:54.800" starttime="20161215 04:58:54.800"></status>
</kw>
<status status="PASS" endtime="20161215 04:58:54.800" starttime="20161215 04:58:54.799"></status>
</kw>
<status status="PASS" endtime="20161215 04:58:54.800" starttime="20161215 04:58:54.798"></status>
</kw>
<status status="PASS" endtime="20161215 04:58:54.800" starttime="20161215 04:58:54.796"></status>
</kw>
<msg timestamp="20161215 04:58:54.801" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161215 04:58:54.801" starttime="20161215 04:58:54.174"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161215 04:58:54.802" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161215 04:58:54.802" starttime="20161215 04:58:54.801"></status>
</kw>
<kw name="Check If warmReset is Initiated" library="utils">
<doc>Ping would be still alive, so try SSH to connect</doc>
<assign>
<var>${session_active}</var>
</assign>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>7s</arg>
</arguments>
<msg timestamp="20161215 04:59:01.804" level="INFO">Slept 7 seconds</msg>
<status status="PASS" endtime="20161215 04:59:01.804" starttime="20161215 04:58:54.803"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Open Connection And Log In</arg>
</arguments>
<assign>
<var>${alive}</var>
</assign>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20161215 04:59:01.809" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20161215 04:59:01.809" starttime="20161215 04:59:01.808"></status>
</kw>
<msg timestamp="20161215 04:59:01.809" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20161215 04:59:01.809" starttime="20161215 04:59:01.807"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20161215 04:59:01.815" starttime="20161215 04:59:01.815"></status>
</kw>
<status status="PASS" endtime="20161215 04:59:01.815" starttime="20161215 04:59:01.810"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20161215 04:59:01.820" starttime="20161215 04:59:01.816"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20161215 04:59:01.821" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20161215 04:59:01.821" starttime="20161215 04:59:01.821"></status>
</kw>
<msg timestamp="20161215 04:59:01.822" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20161215 04:59:01.822" starttime="20161215 04:59:01.820"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20161215 04:59:01.825" starttime="20161215 04:59:01.825"></status>
</kw>
<status status="PASS" endtime="20161215 04:59:01.825" starttime="20161215 04:59:01.825"></status>
</kw>
<status status="PASS" endtime="20161215 04:59:01.825" starttime="20161215 04:59:01.822"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20161215 04:59:01.826" level="INFO">Logging into '9.3.23.30:22' as 'root'.</msg>
<msg timestamp="20161215 04:59:01.946" level="FAIL">SSHException: Error reading SSH protocol banner[Errno 104] Connection reset by peer</msg>
<status status="FAIL" endtime="20161215 04:59:01.946" starttime="20161215 04:59:01.826"></status>
</kw>
<status status="FAIL" endtime="20161215 04:59:01.946" starttime="20161215 04:59:01.806"></status>
</kw>
<msg timestamp="20161215 04:59:01.946" level="INFO">${alive} = False</msg>
<status status="PASS" endtime="20161215 04:59:01.946" starttime="20161215 04:59:01.805"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${alive}' == '${False}'</arg>
<arg>${False}</arg>
</arguments>
<msg timestamp="20161215 04:59:01.951" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20161215 04:59:01.952" starttime="20161215 04:59:01.947"></status>
</kw>
<msg timestamp="20161215 04:59:01.952" level="INFO">${session_active} = False</msg>
<status status="PASS" endtime="20161215 04:59:01.952" starttime="20161215 04:58:54.802"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${session_active}' == '${True}'</arg>
<arg>Fail</arg>
<arg>msg=warm reset didn't occur</arg>
</arguments>
<status status="PASS" endtime="20161215 04:59:01.955" starttime="20161215 04:59:01.952"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${SYSTEM_SHUTDOWN_TIME}min</arg>
</arguments>
<msg timestamp="20161215 05:04:01.956" level="INFO">Slept 5 minutes</msg>
<status status="PASS" endtime="20161215 05:04:01.957" starttime="20161215 04:59:01.955"></status>
</kw>
<kw name="Wait For Host To Ping" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>${timeout}</arg>
<arg>${interval}</arg>
<arg>Ping Host</arg>
<arg>${host}</arg>
</arguments>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${host}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20161215 05:04:01.960" level="INFO">Length is 9</msg>
<status status="PASS" endtime="20161215 05:04:01.960" starttime="20161215 05:04:01.960"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20161215 05:04:01.982" level="INFO">Running command 'ping -c 4 9.3.23.30 2&gt;&amp;1'.</msg>
<msg timestamp="20161215 05:04:05.993" level="INFO">${RC} = 0</msg>
<msg timestamp="20161215 05:04:05.993" level="INFO">${output} = PING 9.3.23.30 (9.3.23.30) 56(84) bytes of data.
64 bytes from 9.3.23.30: icmp_seq=1 ttl=62 time=1.84 ms
64 bytes from 9.3.23.30: icmp_seq=2 ttl=62 time=0.755 ms
64 bytes from 9.3.23.30: icmp_seq=3 tt...</msg>
<status status="PASS" endtime="20161215 05:04:05.993" starttime="20161215 05:04:01.961"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20161215 05:04:05.997" level="INFO">RC: 0
Output:
PING 9.3.23.30 (9.3.23.30) 56(84) bytes of data.
64 bytes from 9.3.23.30: icmp_seq=1 ttl=62 time=1.84 ms
64 bytes from 9.3.23.30: icmp_seq=2 ttl=62 time=0.755 ms
64 bytes from 9.3.23.30: icmp_seq=3 ttl=62 time=0.941 ms

--- 9.3.23.30 ping statistics ---
4 packets transmitted, 3 received, 25% packet loss, time 3002ms
rtt min/avg/max/mdev = 0.755/1.178/1.840/0.475 ms</msg>
<status status="PASS" endtime="20161215 05:04:05.997" starttime="20161215 05:04:05.996"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20161215 05:04:05.998" starttime="20161215 05:04:05.997"></status>
</kw>
<status status="PASS" endtime="20161215 05:04:05.998" starttime="20161215 05:04:01.959"></status>
</kw>
<status status="PASS" endtime="20161215 05:04:05.998" starttime="20161215 05:04:01.958"></status>
</kw>
<status status="PASS" endtime="20161215 05:04:05.999" starttime="20161215 05:04:01.957"></status>
</kw>
<status status="PASS" endtime="20161215 05:04:05.999" starttime="20161215 04:58:54.172"></status>
</kw>
<status status="PASS" endtime="20161215 05:04:06.000" starttime="20161215 04:58:54.172"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>7s</arg>
</arguments>
<msg timestamp="20161215 05:04:13.001" level="INFO">Slept 7 seconds</msg>
<status status="PASS" endtime="20161215 05:04:13.001" starttime="20161215 05:04:06.000"></status>
</kw>
<kw name="Check If warmReset is Initiated" library="utils">
<doc>Ping would be still alive, so try SSH to connect</doc>
<assign>
<var>${session_active}</var>
</assign>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>7s</arg>
</arguments>
<msg timestamp="20161215 05:04:20.004" level="INFO">Slept 7 seconds</msg>
<status status="PASS" endtime="20161215 05:04:20.005" starttime="20161215 05:04:13.004"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Open Connection And Log In</arg>
</arguments>
<assign>
<var>${alive}</var>
</assign>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20161215 05:04:20.008" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20161215 05:04:20.008" starttime="20161215 05:04:20.008"></status>
</kw>
<msg timestamp="20161215 05:04:20.009" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20161215 05:04:20.009" starttime="20161215 05:04:20.007"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20161215 05:04:20.015" starttime="20161215 05:04:20.014"></status>
</kw>
<status status="PASS" endtime="20161215 05:04:20.015" starttime="20161215 05:04:20.009"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20161215 05:04:20.018" starttime="20161215 05:04:20.015"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20161215 05:04:20.019" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20161215 05:04:20.019" starttime="20161215 05:04:20.019"></status>
</kw>
<msg timestamp="20161215 05:04:20.019" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20161215 05:04:20.019" starttime="20161215 05:04:20.019"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20161215 05:04:20.024" starttime="20161215 05:04:20.023"></status>
</kw>
<status status="PASS" endtime="20161215 05:04:20.024" starttime="20161215 05:04:20.023"></status>
</kw>
<status status="PASS" endtime="20161215 05:04:20.024" starttime="20161215 05:04:20.020"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20161215 05:04:20.025" level="INFO">Logging into '9.3.23.30:22' as 'root'.</msg>
<msg timestamp="20161215 05:04:50.042" level="FAIL">timeout: timed out</msg>
<status status="FAIL" endtime="20161215 05:04:50.042" starttime="20161215 05:04:20.024"></status>
</kw>
<status status="FAIL" endtime="20161215 05:04:50.043" starttime="20161215 05:04:20.006"></status>
</kw>
<msg timestamp="20161215 05:04:50.043" level="INFO">${alive} = False</msg>
<status status="PASS" endtime="20161215 05:04:50.043" starttime="20161215 05:04:20.005"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${alive}' == '${False}'</arg>
<arg>${False}</arg>
</arguments>
<msg timestamp="20161215 05:04:50.047" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20161215 05:04:50.047" starttime="20161215 05:04:50.044"></status>
</kw>
<msg timestamp="20161215 05:04:50.048" level="INFO">${session_active} = False</msg>
<status status="PASS" endtime="20161215 05:04:50.048" starttime="20161215 05:04:13.003"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${session_active}' == '${True}'</arg>
<arg>Trigger Warm Reset via Reboot</arg>
</arguments>
<status status="PASS" endtime="20161215 05:04:50.051" starttime="20161215 05:04:50.048"></status>
</kw>
<kw name="Check If BMC is Up" library="utils">
<doc>Wait for Host to be online. Checks every X seconds</doc>
<arguments>
<arg>30 min</arg>
<arg>10 sec</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>${max_timeout}</arg>
<arg>${interval}</arg>
<arg>Verify Ping and REST Authentication</arg>
</arguments>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20161215 05:04:50.055" level="INFO">Length is 9</msg>
<status status="PASS" endtime="20161215 05:04:50.055" starttime="20161215 05:04:50.054"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20161215 05:04:50.061" level="INFO">Running command 'ping -c 4 9.3.23.30 2&gt;&amp;1'.</msg>
<msg timestamp="20161215 05:05:03.069" level="INFO">${RC} = 1</msg>
<msg timestamp="20161215 05:05:03.069" level="INFO">${output} = PING 9.3.23.30 (9.3.23.30) 56(84) bytes of data.

--- 9.3.23.30 ping statistics ---
4 packets transmitted, 0 received, 100% packet loss, time 3000ms
</msg>
<status status="PASS" endtime="20161215 05:05:03.069" starttime="20161215 05:04:50.056"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20161215 05:05:03.073" level="INFO">RC: 1
Output:
PING 9.3.23.30 (9.3.23.30) 56(84) bytes of data.

--- 9.3.23.30 ping statistics ---
4 packets transmitted, 0 received, 100% packet loss, time 3000ms
</msg>
<status status="PASS" endtime="20161215 05:05:03.073" starttime="20161215 05:05:03.072"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<msg timestamp="20161215 05:05:03.074" level="FAIL">1 != 0</msg>
<status status="FAIL" endtime="20161215 05:05:03.074" starttime="20161215 05:05:03.073"></status>
</kw>
<status status="FAIL" endtime="20161215 05:05:03.075" starttime="20161215 05:04:50.053"></status>
</kw>
<msg timestamp="20161215 05:05:03.075" level="INFO">${l_ping} = False</msg>
<status status="PASS" endtime="20161215 05:05:03.075" starttime="20161215 05:04:50.053"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>msg=Ping Failed</arg>
</arguments>
<msg timestamp="20161215 05:05:03.081" level="FAIL">Ping Failed</msg>
<status status="FAIL" endtime="20161215 05:05:03.081" starttime="20161215 05:05:03.080"></status>
</kw>
<status status="FAIL" endtime="20161215 05:05:03.081" starttime="20161215 05:05:03.076"></status>
</kw>
<status status="FAIL" endtime="20161215 05:05:03.081" starttime="20161215 05:04:50.053"></status>
</kw>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20161215 05:05:13.085" level="INFO">Length is 9</msg>
<status status="PASS" endtime="20161215 05:05:13.085" starttime="20161215 05:05:13.084"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20161215 05:05:13.090" level="INFO">Running command 'ping -c 4 9.3.23.30 2&gt;&amp;1'.</msg>
<msg timestamp="20161215 05:05:16.104" level="INFO">${RC} = 0</msg>
<msg timestamp="20161215 05:05:16.104" level="INFO">${output} = PING 9.3.23.30 (9.3.23.30) 56(84) bytes of data.
64 bytes from 9.3.23.30: icmp_seq=1 ttl=62 time=1.94 ms
64 bytes from 9.3.23.30: icmp_seq=2 ttl=62 time=0.788 ms
64 bytes from 9.3.23.30: icmp_seq=3 tt...</msg>
<status status="PASS" endtime="20161215 05:05:16.104" starttime="20161215 05:05:13.085"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20161215 05:05:16.108" level="INFO">RC: 0
Output:
PING 9.3.23.30 (9.3.23.30) 56(84) bytes of data.
64 bytes from 9.3.23.30: icmp_seq=1 ttl=62 time=1.94 ms
64 bytes from 9.3.23.30: icmp_seq=2 ttl=62 time=0.788 ms
64 bytes from 9.3.23.30: icmp_seq=3 ttl=62 time=0.856 ms
64 bytes from 9.3.23.30: icmp_seq=4 ttl=62 time=0.816 ms

--- 9.3.23.30 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 3000ms
rtt min/avg/max/mdev = 0.788/1.101/1.944/0.487 ms</msg>
<status status="PASS" endtime="20161215 05:05:16.108" starttime="20161215 05:05:16.107"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20161215 05:05:16.109" starttime="20161215 05:05:16.108"></status>
</kw>
<status status="PASS" endtime="20161215 05:05:16.109" starttime="20161215 05:05:13.083"></status>
</kw>
<msg timestamp="20161215 05:05:16.110" level="INFO">${l_ping} = True</msg>
<status status="PASS" endtime="20161215 05:05:16.110" starttime="20161215 05:05:13.083"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<status status="PASS" endtime="20161215 05:05:16.115" starttime="20161215 05:05:16.110"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Initialize OpenBMC</arg>
</arguments>
<assign>
<var>${l_rest}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161215 05:05:16.117" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161215 05:05:16.118" starttime="20161215 05:05:16.116"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161215 05:05:16.119" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161215 05:05:16.119" starttime="20161215 05:05:16.118"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161215 05:05:16.119" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161215 05:05:16.119" starttime="20161215 05:05:16.119"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161215 05:05:16.120" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161215 05:05:16.120" starttime="20161215 05:05:16.119"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161215 05:05:56.767" level="FAIL">ConnectionError: HTTPSConnectionPool(host='9.3.23.30', port=443): Max retries exceeded with url: /login (Caused by ReadTimeoutError("HTTPSConnectionPool(host='9.3.23.30', port=443): Read timed out. (read timeout=10.0)",))</msg>
<status status="FAIL" endtime="20161215 05:05:56.767" starttime="20161215 05:05:16.120"></status>
</kw>
<status status="FAIL" endtime="20161215 05:05:56.768" starttime="20161215 05:05:16.116"></status>
</kw>
<msg timestamp="20161215 05:05:56.768" level="INFO">${l_rest} = False</msg>
<status status="PASS" endtime="20161215 05:05:56.768" starttime="20161215 05:05:16.116"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_rest}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<msg timestamp="20161215 05:05:56.774" level="FAIL">REST Authentication Failed</msg>
<status status="FAIL" endtime="20161215 05:05:56.774" starttime="20161215 05:05:56.773"></status>
</kw>
<status status="FAIL" endtime="20161215 05:05:56.774" starttime="20161215 05:05:56.768"></status>
</kw>
<status status="FAIL" endtime="20161215 05:05:56.774" starttime="20161215 05:05:13.082"></status>
</kw>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20161215 05:06:06.777" level="INFO">Length is 9</msg>
<status status="PASS" endtime="20161215 05:06:06.777" starttime="20161215 05:06:06.776"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20161215 05:06:06.788" level="INFO">Running command 'ping -c 4 9.3.23.30 2&gt;&amp;1'.</msg>
<msg timestamp="20161215 05:06:09.788" level="INFO">${RC} = 0</msg>
<msg timestamp="20161215 05:06:09.788" level="INFO">${output} = PING 9.3.23.30 (9.3.23.30) 56(84) bytes of data.
64 bytes from 9.3.23.30: icmp_seq=1 ttl=62 time=0.982 ms
64 bytes from 9.3.23.30: icmp_seq=2 ttl=62 time=0.761 ms
64 bytes from 9.3.23.30: icmp_seq=3 t...</msg>
<status status="PASS" endtime="20161215 05:06:09.788" starttime="20161215 05:06:06.777"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20161215 05:06:09.792" level="INFO">RC: 0
Output:
PING 9.3.23.30 (9.3.23.30) 56(84) bytes of data.
64 bytes from 9.3.23.30: icmp_seq=1 ttl=62 time=0.982 ms
64 bytes from 9.3.23.30: icmp_seq=2 ttl=62 time=0.761 ms
64 bytes from 9.3.23.30: icmp_seq=3 ttl=62 time=0.756 ms
64 bytes from 9.3.23.30: icmp_seq=4 ttl=62 time=0.770 ms

--- 9.3.23.30 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 3000ms
rtt min/avg/max/mdev = 0.756/0.817/0.982/0.097 ms</msg>
<status status="PASS" endtime="20161215 05:06:09.792" starttime="20161215 05:06:09.791"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20161215 05:06:09.793" starttime="20161215 05:06:09.792"></status>
</kw>
<status status="PASS" endtime="20161215 05:06:09.793" starttime="20161215 05:06:06.776"></status>
</kw>
<msg timestamp="20161215 05:06:09.794" level="INFO">${l_ping} = True</msg>
<status status="PASS" endtime="20161215 05:06:09.794" starttime="20161215 05:06:06.775"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<status status="PASS" endtime="20161215 05:06:09.798" starttime="20161215 05:06:09.794"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Initialize OpenBMC</arg>
</arguments>
<assign>
<var>${l_rest}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161215 05:06:09.799" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161215 05:06:09.801" starttime="20161215 05:06:09.799"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161215 05:06:09.801" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161215 05:06:09.801" starttime="20161215 05:06:09.801"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161215 05:06:09.802" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161215 05:06:09.802" starttime="20161215 05:06:09.801"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161215 05:06:09.802" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161215 05:06:09.802" starttime="20161215 05:06:09.802"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161215 05:06:50.447" level="FAIL">ConnectionError: HTTPSConnectionPool(host='9.3.23.30', port=443): Max retries exceeded with url: /login (Caused by ReadTimeoutError("HTTPSConnectionPool(host='9.3.23.30', port=443): Read timed out. (read timeout=10.0)",))</msg>
<status status="FAIL" endtime="20161215 05:06:50.447" starttime="20161215 05:06:09.803"></status>
</kw>
<status status="FAIL" endtime="20161215 05:06:50.448" starttime="20161215 05:06:09.799"></status>
</kw>
<msg timestamp="20161215 05:06:50.448" level="INFO">${l_rest} = False</msg>
<status status="PASS" endtime="20161215 05:06:50.448" starttime="20161215 05:06:09.798"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_rest}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<msg timestamp="20161215 05:06:50.455" level="FAIL">REST Authentication Failed</msg>
<status status="FAIL" endtime="20161215 05:06:50.455" starttime="20161215 05:06:50.454"></status>
</kw>
<status status="FAIL" endtime="20161215 05:06:50.455" starttime="20161215 05:06:50.449"></status>
</kw>
<status status="FAIL" endtime="20161215 05:06:50.455" starttime="20161215 05:06:06.775"></status>
</kw>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20161215 05:07:00.459" level="INFO">Length is 9</msg>
<status status="PASS" endtime="20161215 05:07:00.459" starttime="20161215 05:07:00.459"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20161215 05:07:00.470" level="INFO">Running command 'ping -c 4 9.3.23.30 2&gt;&amp;1'.</msg>
<msg timestamp="20161215 05:07:03.472" level="INFO">${RC} = 0</msg>
<msg timestamp="20161215 05:07:03.472" level="INFO">${output} = PING 9.3.23.30 (9.3.23.30) 56(84) bytes of data.
64 bytes from 9.3.23.30: icmp_seq=1 ttl=62 time=1.48 ms
64 bytes from 9.3.23.30: icmp_seq=2 ttl=62 time=0.664 ms
64 bytes from 9.3.23.30: icmp_seq=3 tt...</msg>
<status status="PASS" endtime="20161215 05:07:03.473" starttime="20161215 05:07:00.459"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20161215 05:07:03.477" level="INFO">RC: 0
Output:
PING 9.3.23.30 (9.3.23.30) 56(84) bytes of data.
64 bytes from 9.3.23.30: icmp_seq=1 ttl=62 time=1.48 ms
64 bytes from 9.3.23.30: icmp_seq=2 ttl=62 time=0.664 ms
64 bytes from 9.3.23.30: icmp_seq=3 ttl=62 time=0.673 ms
64 bytes from 9.3.23.30: icmp_seq=4 ttl=62 time=0.770 ms

--- 9.3.23.30 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 2999ms
rtt min/avg/max/mdev = 0.664/0.897/1.481/0.339 ms</msg>
<status status="PASS" endtime="20161215 05:07:03.477" starttime="20161215 05:07:03.476"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20161215 05:07:03.479" starttime="20161215 05:07:03.478"></status>
</kw>
<status status="PASS" endtime="20161215 05:07:03.480" starttime="20161215 05:07:00.458"></status>
</kw>
<msg timestamp="20161215 05:07:03.480" level="INFO">${l_ping} = True</msg>
<status status="PASS" endtime="20161215 05:07:03.480" starttime="20161215 05:07:00.457"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<status status="PASS" endtime="20161215 05:07:03.483" starttime="20161215 05:07:03.480"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Initialize OpenBMC</arg>
</arguments>
<assign>
<var>${l_rest}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161215 05:07:03.484" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161215 05:07:03.486" starttime="20161215 05:07:03.484"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161215 05:07:03.486" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161215 05:07:03.486" starttime="20161215 05:07:03.486"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161215 05:07:03.487" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161215 05:07:03.487" starttime="20161215 05:07:03.486"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161215 05:07:03.487" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161215 05:07:03.487" starttime="20161215 05:07:03.487"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161215 05:07:05.752" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161215 05:07:05.752" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161215 05:07:05.753" starttime="20161215 05:07:03.488"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161215 05:07:05.754" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161215 05:07:05.754" starttime="20161215 05:07:05.753"></status>
</kw>
<status status="PASS" endtime="20161215 05:07:05.754" starttime="20161215 05:07:03.484"></status>
</kw>
<msg timestamp="20161215 05:07:05.754" level="INFO">${l_rest} = True</msg>
<status status="PASS" endtime="20161215 05:07:05.754" starttime="20161215 05:07:03.483"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_rest}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<status status="PASS" endtime="20161215 05:07:05.759" starttime="20161215 05:07:05.755"></status>
</kw>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20161215 05:07:05.760" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20161215 05:07:05.761" starttime="20161215 05:07:05.760"></status>
</kw>
<msg timestamp="20161215 05:07:05.761" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20161215 05:07:05.761" starttime="20161215 05:07:05.760"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20161215 05:07:05.765" starttime="20161215 05:07:05.764"></status>
</kw>
<status status="PASS" endtime="20161215 05:07:05.765" starttime="20161215 05:07:05.761"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20161215 05:07:05.768" starttime="20161215 05:07:05.765"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20161215 05:07:05.769" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20161215 05:07:05.769" starttime="20161215 05:07:05.769"></status>
</kw>
<msg timestamp="20161215 05:07:05.769" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20161215 05:07:05.769" starttime="20161215 05:07:05.768"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20161215 05:07:05.773" starttime="20161215 05:07:05.773"></status>
</kw>
<status status="PASS" endtime="20161215 05:07:05.773" starttime="20161215 05:07:05.772"></status>
</kw>
<status status="PASS" endtime="20161215 05:07:05.773" starttime="20161215 05:07:05.769"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20161215 05:07:05.774" level="INFO">Logging into '9.3.23.30:22' as 'root'.</msg>
<msg timestamp="20161215 05:07:09.879" level="INFO">Read output: 7[r[999;999H[6n</msg>
<status status="PASS" endtime="20161215 05:07:09.879" starttime="20161215 05:07:05.774"></status>
</kw>
<status status="PASS" endtime="20161215 05:07:09.879" starttime="20161215 05:07:05.759"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>hostname</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${system}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20161215 05:07:09.880" level="INFO">Executing command 'hostname'.</msg>
<msg timestamp="20161215 05:07:10.575" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20161215 05:07:10.575" level="INFO">${system} = barreleye</msg>
<msg timestamp="20161215 05:07:10.575" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20161215 05:07:10.575" starttime="20161215 05:07:09.880"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20161215 05:07:10.576" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20161215 05:07:10.576" starttime="20161215 05:07:10.575"></status>
</kw>
<status status="PASS" endtime="20161215 05:07:10.576" starttime="20161215 05:07:00.456"></status>
</kw>
<status status="PASS" endtime="20161215 05:07:10.576" starttime="20161215 05:04:50.052"></status>
</kw>
<status status="PASS" endtime="20161215 05:07:10.576" starttime="20161215 05:04:50.051"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>1 min</arg>
</arguments>
<msg timestamp="20161215 05:08:10.580" level="INFO">Slept 1 minute</msg>
<status status="PASS" endtime="20161215 05:08:10.581" starttime="20161215 05:07:10.577"></status>
</kw>
<kw name="Validate BMC Version" library="code_update_utils">
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20161215 05:08:10.584" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20161215 05:08:10.584" starttime="20161215 05:08:10.584"></status>
</kw>
<msg timestamp="20161215 05:08:10.585" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20161215 05:08:10.585" starttime="20161215 05:08:10.583"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20161215 05:08:10.591" starttime="20161215 05:08:10.590"></status>
</kw>
<status status="PASS" endtime="20161215 05:08:10.591" starttime="20161215 05:08:10.585"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20161215 05:08:10.596" starttime="20161215 05:08:10.591"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20161215 05:08:10.598" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20161215 05:08:10.598" starttime="20161215 05:08:10.598"></status>
</kw>
<msg timestamp="20161215 05:08:10.598" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20161215 05:08:10.598" starttime="20161215 05:08:10.597"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20161215 05:08:10.602" starttime="20161215 05:08:10.602"></status>
</kw>
<status status="PASS" endtime="20161215 05:08:10.602" starttime="20161215 05:08:10.602"></status>
</kw>
<status status="PASS" endtime="20161215 05:08:10.602" starttime="20161215 05:08:10.599"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20161215 05:08:10.603" level="INFO">Logging into '9.3.23.30:22' as 'root'.</msg>
<msg timestamp="20161215 05:08:12.788" level="INFO">Read output: 7[r[999;999H[6n</msg>
<status status="PASS" endtime="20161215 05:08:12.788" starttime="20161215 05:08:10.602"></status>
</kw>
<status status="PASS" endtime="20161215 05:08:12.788" starttime="20161215 05:08:10.582"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>cat /etc/version</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${version}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20161215 05:08:12.789" level="INFO">Executing command 'cat /etc/version'.</msg>
<msg timestamp="20161215 05:08:12.857" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20161215 05:08:12.858" level="INFO">${version} = 20161214205840</msg>
<msg timestamp="20161215 05:08:12.858" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20161215 05:08:12.858" starttime="20161215 05:08:12.788"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20161215 05:08:12.859" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20161215 05:08:12.859" starttime="20161215 05:08:12.858"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${args}' == 'before'</arg>
<arg>Should not Contain</arg>
<arg>${FILE_PATH}</arg>
<arg>${version}</arg>
<arg>msg=Same version already installed</arg>
<arg>ELSE</arg>
<arg>Should Contain</arg>
<arg>${FILE_PATH}</arg>
<arg>${version}</arg>
<arg>msg=Code update Failed</arg>
</arguments>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${FILE_PATH}</arg>
<arg>${version}</arg>
<arg>msg=Code update Failed</arg>
</arguments>
<status status="PASS" endtime="20161215 05:08:12.865" starttime="20161215 05:08:12.864"></status>
</kw>
<status status="PASS" endtime="20161215 05:08:12.865" starttime="20161215 05:08:12.859"></status>
</kw>
<status status="PASS" endtime="20161215 05:08:12.865" starttime="20161215 05:08:10.582"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>10 min</arg>
<arg>10 sec</arg>
<arg>Verify BMC State</arg>
<arg>BMC_READY</arg>
</arguments>
<kw name="Verify BMC State" library="utils">
<doc>Get the BMC state and verify if the current</doc>
<arguments>
<arg>BMC_READY</arg>
</arguments>
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${current}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg timestamp="20161215 05:08:12.868" level="INFO">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161215 05:08:12.868" starttime="20161215 05:08:12.868"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20161215 05:08:12.869" level="INFO">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161215 05:08:12.869" starttime="20161215 05:08:12.869"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161215 05:08:12.871" level="INFO">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" endtime="20161215 05:08:12.871" starttime="20161215 05:08:12.870"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161215 05:08:12.873" level="INFO">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" endtime="20161215 05:08:12.873" starttime="20161215 05:08:12.872"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161215 05:08:12.873" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161215 05:08:12.873" starttime="20161215 05:08:12.873"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161215 05:08:12.874" starttime="20161215 05:08:12.874"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161215 05:08:12.878" level="INFO">${msg} = URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161215 05:08:12.878" starttime="20161215 05:08:12.878"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161215 05:08:12.879" level="INFO">URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161215 05:08:12.879" starttime="20161215 05:08:12.879"></status>
</kw>
<status status="PASS" endtime="20161215 05:08:12.879" starttime="20161215 05:08:12.878"></status>
</kw>
<status status="PASS" endtime="20161215 05:08:12.879" starttime="20161215 05:08:12.877"></status>
</kw>
<status status="PASS" endtime="20161215 05:08:12.879" starttime="20161215 05:08:12.874"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161215 05:08:12.880" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161215 05:08:12.881" starttime="20161215 05:08:12.880"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161215 05:08:12.881" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161215 05:08:12.882" starttime="20161215 05:08:12.881"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161215 05:08:12.882" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161215 05:08:12.883" starttime="20161215 05:08:12.882"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161215 05:08:12.883" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161215 05:08:12.883" starttime="20161215 05:08:12.883"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161215 05:08:13.215" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161215 05:08:13.215" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161215 05:08:13.215" starttime="20161215 05:08:12.883"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161215 05:08:13.216" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161215 05:08:13.216" starttime="20161215 05:08:13.216"></status>
</kw>
<status status="PASS" endtime="20161215 05:08:13.216" starttime="20161215 05:08:12.880"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161215 05:08:13.507" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161215 05:08:13.507" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161215 05:08:13.507" starttime="20161215 05:08:13.216"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161215 05:08:13.511" level="INFO">${msg} = Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161215 05:08:13.511" starttime="20161215 05:08:13.511"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161215 05:08:13.512" level="INFO">Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161215 05:08:13.512" starttime="20161215 05:08:13.512"></status>
</kw>
<status status="PASS" endtime="20161215 05:08:13.512" starttime="20161215 05:08:13.511"></status>
</kw>
<status status="PASS" endtime="20161215 05:08:13.512" starttime="20161215 05:08:13.510"></status>
</kw>
<status status="PASS" endtime="20161215 05:08:13.512" starttime="20161215 05:08:13.507"></status>
</kw>
<msg timestamp="20161215 05:08:13.513" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161215 05:08:13.513" starttime="20161215 05:08:12.871"></status>
</kw>
<msg timestamp="20161215 05:08:13.513" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161215 05:08:13.513" starttime="20161215 05:08:12.869"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161215 05:08:13.514" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161215 05:08:13.514" starttime="20161215 05:08:13.513"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20161215 05:08:13.514" level="INFO">To JSON using : content={
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20161215 05:08:13.514" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20161215 05:08:13.514" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'BMC_STARTING'}</msg>
<status status="PASS" endtime="20161215 05:08:13.514" starttime="20161215 05:08:13.514"></status>
</kw>
<msg timestamp="20161215 05:08:13.515" level="INFO">${current} = BMC_STARTING</msg>
<status status="PASS" endtime="20161215 05:08:13.515" starttime="20161215 05:08:12.867"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${expected}</arg>
<arg>${current}</arg>
</arguments>
<msg timestamp="20161215 05:08:13.515" level="FAIL">'BMC_READY' does not contain 'BMC_STARTING'</msg>
<status status="FAIL" endtime="20161215 05:08:13.515" starttime="20161215 05:08:13.515"></status>
</kw>
<status status="FAIL" endtime="20161215 05:08:13.515" starttime="20161215 05:08:12.866"></status>
</kw>
<kw name="Verify BMC State" library="utils">
<doc>Get the BMC state and verify if the current</doc>
<arguments>
<arg>BMC_READY</arg>
</arguments>
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${current}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg timestamp="20161215 05:08:23.518" level="INFO">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161215 05:08:23.518" starttime="20161215 05:08:23.517"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20161215 05:08:23.519" level="INFO">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161215 05:08:23.519" starttime="20161215 05:08:23.518"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161215 05:08:23.521" level="INFO">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" endtime="20161215 05:08:23.521" starttime="20161215 05:08:23.520"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161215 05:08:23.523" level="INFO">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" endtime="20161215 05:08:23.523" starttime="20161215 05:08:23.523"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161215 05:08:23.524" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161215 05:08:23.524" starttime="20161215 05:08:23.523"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161215 05:08:23.525" starttime="20161215 05:08:23.524"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161215 05:08:23.530" level="INFO">${msg} = URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161215 05:08:23.530" starttime="20161215 05:08:23.530"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161215 05:08:23.531" level="INFO">URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161215 05:08:23.531" starttime="20161215 05:08:23.531"></status>
</kw>
<status status="PASS" endtime="20161215 05:08:23.531" starttime="20161215 05:08:23.530"></status>
</kw>
<status status="PASS" endtime="20161215 05:08:23.531" starttime="20161215 05:08:23.529"></status>
</kw>
<status status="PASS" endtime="20161215 05:08:23.531" starttime="20161215 05:08:23.525"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161215 05:08:23.532" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161215 05:08:23.533" starttime="20161215 05:08:23.532"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161215 05:08:23.533" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161215 05:08:23.533" starttime="20161215 05:08:23.533"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161215 05:08:23.534" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161215 05:08:23.534" starttime="20161215 05:08:23.534"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161215 05:08:23.534" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161215 05:08:23.535" starttime="20161215 05:08:23.534"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161215 05:08:23.987" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161215 05:08:23.988" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161215 05:08:23.988" starttime="20161215 05:08:23.535"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161215 05:08:23.989" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161215 05:08:23.989" starttime="20161215 05:08:23.988"></status>
</kw>
<status status="PASS" endtime="20161215 05:08:23.990" starttime="20161215 05:08:23.532"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161215 05:08:24.261" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161215 05:08:24.261" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161215 05:08:24.261" starttime="20161215 05:08:23.990"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161215 05:08:24.270" level="INFO">${msg} = Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161215 05:08:24.270" starttime="20161215 05:08:24.270"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161215 05:08:24.272" level="INFO">Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161215 05:08:24.272" starttime="20161215 05:08:24.271"></status>
</kw>
<status status="PASS" endtime="20161215 05:08:24.272" starttime="20161215 05:08:24.271"></status>
</kw>
<status status="PASS" endtime="20161215 05:08:24.272" starttime="20161215 05:08:24.266"></status>
</kw>
<status status="PASS" endtime="20161215 05:08:24.272" starttime="20161215 05:08:24.261"></status>
</kw>
<msg timestamp="20161215 05:08:24.273" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161215 05:08:24.273" starttime="20161215 05:08:23.521"></status>
</kw>
<msg timestamp="20161215 05:08:24.274" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161215 05:08:24.274" starttime="20161215 05:08:23.519"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161215 05:08:24.275" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161215 05:08:24.275" starttime="20161215 05:08:24.274"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20161215 05:08:24.276" level="INFO">To JSON using : content={
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20161215 05:08:24.276" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20161215 05:08:24.276" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'BMC_STARTING'}</msg>
<status status="PASS" endtime="20161215 05:08:24.276" starttime="20161215 05:08:24.276"></status>
</kw>
<msg timestamp="20161215 05:08:24.277" level="INFO">${current} = BMC_STARTING</msg>
<status status="PASS" endtime="20161215 05:08:24.277" starttime="20161215 05:08:23.517"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${expected}</arg>
<arg>${current}</arg>
</arguments>
<msg timestamp="20161215 05:08:24.278" level="FAIL">'BMC_READY' does not contain 'BMC_STARTING'</msg>
<status status="FAIL" endtime="20161215 05:08:24.278" starttime="20161215 05:08:24.277"></status>
</kw>
<status status="FAIL" endtime="20161215 05:08:24.278" starttime="20161215 05:08:23.516"></status>
</kw>
<kw name="Verify BMC State" library="utils">
<doc>Get the BMC state and verify if the current</doc>
<arguments>
<arg>BMC_READY</arg>
</arguments>
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${current}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg timestamp="20161215 05:08:34.281" level="INFO">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161215 05:08:34.281" starttime="20161215 05:08:34.281"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20161215 05:08:34.282" level="INFO">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161215 05:08:34.283" starttime="20161215 05:08:34.282"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161215 05:08:34.284" level="INFO">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" endtime="20161215 05:08:34.285" starttime="20161215 05:08:34.284"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161215 05:08:34.287" level="INFO">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" endtime="20161215 05:08:34.287" starttime="20161215 05:08:34.286"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161215 05:08:34.287" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161215 05:08:34.288" starttime="20161215 05:08:34.287"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161215 05:08:34.288" starttime="20161215 05:08:34.288"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161215 05:08:34.296" level="INFO">${msg} = URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161215 05:08:34.296" starttime="20161215 05:08:34.295"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161215 05:08:34.297" level="INFO">URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161215 05:08:34.297" starttime="20161215 05:08:34.297"></status>
</kw>
<status status="PASS" endtime="20161215 05:08:34.297" starttime="20161215 05:08:34.296"></status>
</kw>
<status status="PASS" endtime="20161215 05:08:34.298" starttime="20161215 05:08:34.294"></status>
</kw>
<status status="PASS" endtime="20161215 05:08:34.298" starttime="20161215 05:08:34.289"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161215 05:08:34.299" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161215 05:08:34.300" starttime="20161215 05:08:34.299"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161215 05:08:34.300" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161215 05:08:34.300" starttime="20161215 05:08:34.300"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161215 05:08:34.301" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161215 05:08:34.301" starttime="20161215 05:08:34.301"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161215 05:08:34.301" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161215 05:08:34.302" starttime="20161215 05:08:34.301"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161215 05:08:34.763" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161215 05:08:34.763" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161215 05:08:34.764" starttime="20161215 05:08:34.302"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161215 05:08:34.765" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161215 05:08:34.765" starttime="20161215 05:08:34.764"></status>
</kw>
<status status="PASS" endtime="20161215 05:08:34.765" starttime="20161215 05:08:34.298"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161215 05:08:35.260" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161215 05:08:35.260" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161215 05:08:35.260" starttime="20161215 05:08:34.765"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161215 05:08:35.267" level="INFO">${msg} = Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161215 05:08:35.267" starttime="20161215 05:08:35.266"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161215 05:08:35.269" level="INFO">Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161215 05:08:35.270" starttime="20161215 05:08:35.269"></status>
</kw>
<status status="PASS" endtime="20161215 05:08:35.270" starttime="20161215 05:08:35.268"></status>
</kw>
<status status="PASS" endtime="20161215 05:08:35.270" starttime="20161215 05:08:35.266"></status>
</kw>
<status status="PASS" endtime="20161215 05:08:35.271" starttime="20161215 05:08:35.261"></status>
</kw>
<msg timestamp="20161215 05:08:35.271" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161215 05:08:35.271" starttime="20161215 05:08:34.285"></status>
</kw>
<msg timestamp="20161215 05:08:35.272" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161215 05:08:35.272" starttime="20161215 05:08:34.283"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161215 05:08:35.273" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161215 05:08:35.273" starttime="20161215 05:08:35.272"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20161215 05:08:35.274" level="INFO">To JSON using : content={
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20161215 05:08:35.274" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20161215 05:08:35.274" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'BMC_STARTING'}</msg>
<status status="PASS" endtime="20161215 05:08:35.274" starttime="20161215 05:08:35.273"></status>
</kw>
<msg timestamp="20161215 05:08:35.274" level="INFO">${current} = BMC_STARTING</msg>
<status status="PASS" endtime="20161215 05:08:35.274" starttime="20161215 05:08:34.280"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${expected}</arg>
<arg>${current}</arg>
</arguments>
<msg timestamp="20161215 05:08:35.275" level="FAIL">'BMC_READY' does not contain 'BMC_STARTING'</msg>
<status status="FAIL" endtime="20161215 05:08:35.276" starttime="20161215 05:08:35.275"></status>
</kw>
<status status="FAIL" endtime="20161215 05:08:35.276" starttime="20161215 05:08:34.279"></status>
</kw>
<kw name="Verify BMC State" library="utils">
<doc>Get the BMC state and verify if the current</doc>
<arguments>
<arg>BMC_READY</arg>
</arguments>
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${current}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg timestamp="20161215 05:08:45.278" level="INFO">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161215 05:08:45.278" starttime="20161215 05:08:45.278"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20161215 05:08:45.279" level="INFO">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161215 05:08:45.279" starttime="20161215 05:08:45.279"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161215 05:08:45.281" level="INFO">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" endtime="20161215 05:08:45.281" starttime="20161215 05:08:45.281"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161215 05:08:45.283" level="INFO">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" endtime="20161215 05:08:45.283" starttime="20161215 05:08:45.282"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161215 05:08:45.284" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161215 05:08:45.284" starttime="20161215 05:08:45.284"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161215 05:08:45.285" starttime="20161215 05:08:45.284"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161215 05:08:45.290" level="INFO">${msg} = URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161215 05:08:45.290" starttime="20161215 05:08:45.290"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161215 05:08:45.291" level="INFO">URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161215 05:08:45.297" starttime="20161215 05:08:45.291"></status>
</kw>
<status status="PASS" endtime="20161215 05:08:45.297" starttime="20161215 05:08:45.290"></status>
</kw>
<status status="PASS" endtime="20161215 05:08:45.297" starttime="20161215 05:08:45.289"></status>
</kw>
<status status="PASS" endtime="20161215 05:08:45.297" starttime="20161215 05:08:45.285"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161215 05:08:45.298" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161215 05:08:45.299" starttime="20161215 05:08:45.298"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161215 05:08:45.299" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161215 05:08:45.299" starttime="20161215 05:08:45.299"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161215 05:08:45.300" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161215 05:08:45.300" starttime="20161215 05:08:45.299"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161215 05:08:45.300" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161215 05:08:45.300" starttime="20161215 05:08:45.300"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161215 05:08:45.629" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161215 05:08:45.629" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161215 05:08:45.629" starttime="20161215 05:08:45.300"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161215 05:08:45.630" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161215 05:08:45.630" starttime="20161215 05:08:45.630"></status>
</kw>
<status status="PASS" endtime="20161215 05:08:45.630" starttime="20161215 05:08:45.297"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161215 05:08:45.934" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161215 05:08:45.934" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161215 05:08:45.934" starttime="20161215 05:08:45.630"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161215 05:08:45.941" level="INFO">${msg} = Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161215 05:08:45.942" starttime="20161215 05:08:45.940"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161215 05:08:45.943" level="INFO">Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161215 05:08:45.945" starttime="20161215 05:08:45.942"></status>
</kw>
<status status="PASS" endtime="20161215 05:08:45.945" starttime="20161215 05:08:45.942"></status>
</kw>
<status status="PASS" endtime="20161215 05:08:45.945" starttime="20161215 05:08:45.940"></status>
</kw>
<status status="PASS" endtime="20161215 05:08:45.945" starttime="20161215 05:08:45.935"></status>
</kw>
<msg timestamp="20161215 05:08:45.946" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161215 05:08:45.946" starttime="20161215 05:08:45.281"></status>
</kw>
<msg timestamp="20161215 05:08:45.946" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161215 05:08:45.946" starttime="20161215 05:08:45.280"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161215 05:08:45.947" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161215 05:08:45.947" starttime="20161215 05:08:45.947"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20161215 05:08:45.948" level="INFO">To JSON using : content={
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20161215 05:08:45.948" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20161215 05:08:45.948" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'BMC_STARTING'}</msg>
<status status="PASS" endtime="20161215 05:08:45.948" starttime="20161215 05:08:45.947"></status>
</kw>
<msg timestamp="20161215 05:08:45.949" level="INFO">${current} = BMC_STARTING</msg>
<status status="PASS" endtime="20161215 05:08:45.949" starttime="20161215 05:08:45.277"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${expected}</arg>
<arg>${current}</arg>
</arguments>
<msg timestamp="20161215 05:08:45.949" level="FAIL">'BMC_READY' does not contain 'BMC_STARTING'</msg>
<status status="FAIL" endtime="20161215 05:08:45.949" starttime="20161215 05:08:45.949"></status>
</kw>
<status status="FAIL" endtime="20161215 05:08:45.950" starttime="20161215 05:08:45.276"></status>
</kw>
<kw name="Verify BMC State" library="utils">
<doc>Get the BMC state and verify if the current</doc>
<arguments>
<arg>BMC_READY</arg>
</arguments>
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${current}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg timestamp="20161215 05:08:55.952" level="INFO">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161215 05:08:55.952" starttime="20161215 05:08:55.952"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20161215 05:08:55.953" level="INFO">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161215 05:08:55.953" starttime="20161215 05:08:55.953"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161215 05:08:55.955" level="INFO">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" endtime="20161215 05:08:55.955" starttime="20161215 05:08:55.955"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161215 05:08:55.957" level="INFO">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" endtime="20161215 05:08:55.957" starttime="20161215 05:08:55.957"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161215 05:08:55.958" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161215 05:08:55.958" starttime="20161215 05:08:55.958"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161215 05:08:55.959" starttime="20161215 05:08:55.959"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161215 05:08:55.966" level="INFO">${msg} = URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161215 05:08:55.966" starttime="20161215 05:08:55.965"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161215 05:08:55.968" level="INFO">URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161215 05:08:55.968" starttime="20161215 05:08:55.967"></status>
</kw>
<status status="PASS" endtime="20161215 05:08:55.968" starttime="20161215 05:08:55.966"></status>
</kw>
<status status="PASS" endtime="20161215 05:08:55.968" starttime="20161215 05:08:55.964"></status>
</kw>
<status status="PASS" endtime="20161215 05:08:55.968" starttime="20161215 05:08:55.959"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161215 05:08:55.970" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161215 05:08:55.970" starttime="20161215 05:08:55.969"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161215 05:08:55.971" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161215 05:08:55.971" starttime="20161215 05:08:55.970"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161215 05:08:55.972" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161215 05:08:55.972" starttime="20161215 05:08:55.971"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161215 05:08:55.972" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161215 05:08:55.972" starttime="20161215 05:08:55.972"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161215 05:08:56.302" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161215 05:08:56.302" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161215 05:08:56.302" starttime="20161215 05:08:55.972"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161215 05:08:56.302" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161215 05:08:56.302" starttime="20161215 05:08:56.302"></status>
</kw>
<status status="PASS" endtime="20161215 05:08:56.303" starttime="20161215 05:08:55.969"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161215 05:08:56.586" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161215 05:08:56.586" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161215 05:08:56.586" starttime="20161215 05:08:56.303"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161215 05:08:56.590" level="INFO">${msg} = Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161215 05:08:56.590" starttime="20161215 05:08:56.589"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161215 05:08:56.590" level="INFO">Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161215 05:08:56.591" starttime="20161215 05:08:56.590"></status>
</kw>
<status status="PASS" endtime="20161215 05:08:56.591" starttime="20161215 05:08:56.590"></status>
</kw>
<status status="PASS" endtime="20161215 05:08:56.591" starttime="20161215 05:08:56.589"></status>
</kw>
<status status="PASS" endtime="20161215 05:08:56.591" starttime="20161215 05:08:56.586"></status>
</kw>
<msg timestamp="20161215 05:08:56.591" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161215 05:08:56.591" starttime="20161215 05:08:55.955"></status>
</kw>
<msg timestamp="20161215 05:08:56.591" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161215 05:08:56.591" starttime="20161215 05:08:55.954"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161215 05:08:56.592" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161215 05:08:56.592" starttime="20161215 05:08:56.591"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20161215 05:08:56.593" level="INFO">To JSON using : content={
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20161215 05:08:56.593" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20161215 05:08:56.593" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'BMC_STARTING'}</msg>
<status status="PASS" endtime="20161215 05:08:56.593" starttime="20161215 05:08:56.592"></status>
</kw>
<msg timestamp="20161215 05:08:56.593" level="INFO">${current} = BMC_STARTING</msg>
<status status="PASS" endtime="20161215 05:08:56.593" starttime="20161215 05:08:55.951"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${expected}</arg>
<arg>${current}</arg>
</arguments>
<msg timestamp="20161215 05:08:56.594" level="FAIL">'BMC_READY' does not contain 'BMC_STARTING'</msg>
<status status="FAIL" endtime="20161215 05:08:56.594" starttime="20161215 05:08:56.593"></status>
</kw>
<status status="FAIL" endtime="20161215 05:08:56.594" starttime="20161215 05:08:55.950"></status>
</kw>
<kw name="Verify BMC State" library="utils">
<doc>Get the BMC state and verify if the current</doc>
<arguments>
<arg>BMC_READY</arg>
</arguments>
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${current}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg timestamp="20161215 05:09:06.596" level="INFO">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161215 05:09:06.596" starttime="20161215 05:09:06.596"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20161215 05:09:06.597" level="INFO">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161215 05:09:06.597" starttime="20161215 05:09:06.597"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161215 05:09:06.599" level="INFO">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" endtime="20161215 05:09:06.599" starttime="20161215 05:09:06.599"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161215 05:09:06.601" level="INFO">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" endtime="20161215 05:09:06.602" starttime="20161215 05:09:06.601"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161215 05:09:06.603" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161215 05:09:06.603" starttime="20161215 05:09:06.602"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161215 05:09:06.604" starttime="20161215 05:09:06.603"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161215 05:09:06.610" level="INFO">${msg} = URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161215 05:09:06.610" starttime="20161215 05:09:06.610"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161215 05:09:06.611" level="INFO">URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161215 05:09:06.612" starttime="20161215 05:09:06.611"></status>
</kw>
<status status="PASS" endtime="20161215 05:09:06.617" starttime="20161215 05:09:06.610"></status>
</kw>
<status status="PASS" endtime="20161215 05:09:06.617" starttime="20161215 05:09:06.609"></status>
</kw>
<status status="PASS" endtime="20161215 05:09:06.617" starttime="20161215 05:09:06.604"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161215 05:09:06.618" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161215 05:09:06.619" starttime="20161215 05:09:06.618"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161215 05:09:06.620" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161215 05:09:06.620" starttime="20161215 05:09:06.620"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161215 05:09:06.621" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161215 05:09:06.621" starttime="20161215 05:09:06.620"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161215 05:09:06.622" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161215 05:09:06.622" starttime="20161215 05:09:06.621"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161215 05:09:06.956" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161215 05:09:06.957" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161215 05:09:06.957" starttime="20161215 05:09:06.622"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161215 05:09:06.958" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161215 05:09:06.958" starttime="20161215 05:09:06.957"></status>
</kw>
<status status="PASS" endtime="20161215 05:09:06.959" starttime="20161215 05:09:06.617"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161215 05:09:07.301" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161215 05:09:07.301" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161215 05:09:07.301" starttime="20161215 05:09:06.959"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161215 05:09:07.308" level="INFO">${msg} = Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161215 05:09:07.308" starttime="20161215 05:09:07.307"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161215 05:09:07.309" level="INFO">Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161215 05:09:07.310" starttime="20161215 05:09:07.309"></status>
</kw>
<status status="PASS" endtime="20161215 05:09:07.310" starttime="20161215 05:09:07.308"></status>
</kw>
<status status="PASS" endtime="20161215 05:09:07.310" starttime="20161215 05:09:07.306"></status>
</kw>
<status status="PASS" endtime="20161215 05:09:07.310" starttime="20161215 05:09:07.301"></status>
</kw>
<msg timestamp="20161215 05:09:07.311" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161215 05:09:07.311" starttime="20161215 05:09:06.600"></status>
</kw>
<msg timestamp="20161215 05:09:07.311" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161215 05:09:07.311" starttime="20161215 05:09:06.598"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161215 05:09:07.312" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161215 05:09:07.312" starttime="20161215 05:09:07.312"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20161215 05:09:07.313" level="INFO">To JSON using : content={
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20161215 05:09:07.313" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20161215 05:09:07.313" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'BMC_STARTING'}</msg>
<status status="PASS" endtime="20161215 05:09:07.313" starttime="20161215 05:09:07.313"></status>
</kw>
<msg timestamp="20161215 05:09:07.314" level="INFO">${current} = BMC_STARTING</msg>
<status status="PASS" endtime="20161215 05:09:07.314" starttime="20161215 05:09:06.595"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${expected}</arg>
<arg>${current}</arg>
</arguments>
<msg timestamp="20161215 05:09:07.314" level="FAIL">'BMC_READY' does not contain 'BMC_STARTING'</msg>
<status status="FAIL" endtime="20161215 05:09:07.314" starttime="20161215 05:09:07.314"></status>
</kw>
<status status="FAIL" endtime="20161215 05:09:07.315" starttime="20161215 05:09:06.594"></status>
</kw>
<kw name="Verify BMC State" library="utils">
<doc>Get the BMC state and verify if the current</doc>
<arguments>
<arg>BMC_READY</arg>
</arguments>
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${current}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg timestamp="20161215 05:09:17.317" level="INFO">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161215 05:09:17.317" starttime="20161215 05:09:17.317"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20161215 05:09:17.318" level="INFO">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161215 05:09:17.318" starttime="20161215 05:09:17.317"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161215 05:09:17.320" level="INFO">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" endtime="20161215 05:09:17.320" starttime="20161215 05:09:17.319"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161215 05:09:17.322" level="INFO">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" endtime="20161215 05:09:17.322" starttime="20161215 05:09:17.321"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161215 05:09:17.323" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161215 05:09:17.323" starttime="20161215 05:09:17.322"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161215 05:09:17.324" starttime="20161215 05:09:17.323"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161215 05:09:17.330" level="INFO">${msg} = URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161215 05:09:17.330" starttime="20161215 05:09:17.330"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161215 05:09:17.331" level="INFO">URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161215 05:09:17.331" starttime="20161215 05:09:17.331"></status>
</kw>
<status status="PASS" endtime="20161215 05:09:17.331" starttime="20161215 05:09:17.330"></status>
</kw>
<status status="PASS" endtime="20161215 05:09:17.331" starttime="20161215 05:09:17.329"></status>
</kw>
<status status="PASS" endtime="20161215 05:09:17.331" starttime="20161215 05:09:17.324"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161215 05:09:17.332" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161215 05:09:17.333" starttime="20161215 05:09:17.332"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161215 05:09:17.333" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161215 05:09:17.333" starttime="20161215 05:09:17.333"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161215 05:09:17.334" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161215 05:09:17.334" starttime="20161215 05:09:17.334"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161215 05:09:17.335" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161215 05:09:17.335" starttime="20161215 05:09:17.334"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161215 05:09:17.672" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161215 05:09:17.672" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161215 05:09:17.672" starttime="20161215 05:09:17.335"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161215 05:09:17.673" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161215 05:09:17.673" starttime="20161215 05:09:17.673"></status>
</kw>
<status status="PASS" endtime="20161215 05:09:17.673" starttime="20161215 05:09:17.331"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161215 05:09:17.954" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161215 05:09:17.954" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161215 05:09:17.954" starttime="20161215 05:09:17.674"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161215 05:09:17.961" level="INFO">${msg} = Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161215 05:09:17.961" starttime="20161215 05:09:17.960"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161215 05:09:17.962" level="INFO">Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161215 05:09:17.962" starttime="20161215 05:09:17.962"></status>
</kw>
<status status="PASS" endtime="20161215 05:09:17.962" starttime="20161215 05:09:17.961"></status>
</kw>
<status status="PASS" endtime="20161215 05:09:17.963" starttime="20161215 05:09:17.959"></status>
</kw>
<status status="PASS" endtime="20161215 05:09:17.963" starttime="20161215 05:09:17.954"></status>
</kw>
<msg timestamp="20161215 05:09:17.963" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161215 05:09:17.963" starttime="20161215 05:09:17.320"></status>
</kw>
<msg timestamp="20161215 05:09:17.963" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161215 05:09:17.963" starttime="20161215 05:09:17.318"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161215 05:09:17.964" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161215 05:09:17.964" starttime="20161215 05:09:17.964"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20161215 05:09:17.965" level="INFO">To JSON using : content={
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20161215 05:09:17.965" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20161215 05:09:17.965" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'BMC_STARTING'}</msg>
<status status="PASS" endtime="20161215 05:09:17.965" starttime="20161215 05:09:17.965"></status>
</kw>
<msg timestamp="20161215 05:09:17.966" level="INFO">${current} = BMC_STARTING</msg>
<status status="PASS" endtime="20161215 05:09:17.966" starttime="20161215 05:09:17.316"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${expected}</arg>
<arg>${current}</arg>
</arguments>
<msg timestamp="20161215 05:09:17.967" level="FAIL">'BMC_READY' does not contain 'BMC_STARTING'</msg>
<status status="FAIL" endtime="20161215 05:09:17.967" starttime="20161215 05:09:17.966"></status>
</kw>
<status status="FAIL" endtime="20161215 05:09:17.967" starttime="20161215 05:09:17.315"></status>
</kw>
<kw name="Verify BMC State" library="utils">
<doc>Get the BMC state and verify if the current</doc>
<arguments>
<arg>BMC_READY</arg>
</arguments>
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${current}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg timestamp="20161215 05:09:27.969" level="INFO">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161215 05:09:27.969" starttime="20161215 05:09:27.969"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20161215 05:09:27.970" level="INFO">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161215 05:09:27.970" starttime="20161215 05:09:27.970"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161215 05:09:27.972" level="INFO">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" endtime="20161215 05:09:27.972" starttime="20161215 05:09:27.972"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161215 05:09:27.974" level="INFO">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" endtime="20161215 05:09:27.974" starttime="20161215 05:09:27.973"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161215 05:09:27.975" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161215 05:09:27.975" starttime="20161215 05:09:27.975"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161215 05:09:27.976" starttime="20161215 05:09:27.975"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161215 05:09:27.981" level="INFO">${msg} = URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161215 05:09:27.981" starttime="20161215 05:09:27.981"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161215 05:09:27.982" level="INFO">URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161215 05:09:27.983" starttime="20161215 05:09:27.982"></status>
</kw>
<status status="PASS" endtime="20161215 05:09:27.983" starttime="20161215 05:09:27.982"></status>
</kw>
<status status="PASS" endtime="20161215 05:09:27.983" starttime="20161215 05:09:27.980"></status>
</kw>
<status status="PASS" endtime="20161215 05:09:27.983" starttime="20161215 05:09:27.976"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161215 05:09:27.984" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161215 05:09:27.984" starttime="20161215 05:09:27.983"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161215 05:09:27.985" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161215 05:09:27.985" starttime="20161215 05:09:27.984"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161215 05:09:27.985" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161215 05:09:27.985" starttime="20161215 05:09:27.985"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161215 05:09:27.986" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161215 05:09:27.986" starttime="20161215 05:09:27.985"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161215 05:09:28.319" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161215 05:09:28.319" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161215 05:09:28.319" starttime="20161215 05:09:27.986"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161215 05:09:28.320" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161215 05:09:28.320" starttime="20161215 05:09:28.319"></status>
</kw>
<status status="PASS" endtime="20161215 05:09:28.320" starttime="20161215 05:09:27.983"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161215 05:09:28.597" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161215 05:09:28.597" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161215 05:09:28.597" starttime="20161215 05:09:28.320"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161215 05:09:28.602" level="INFO">${msg} = Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161215 05:09:28.602" starttime="20161215 05:09:28.601"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161215 05:09:28.602" level="INFO">Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161215 05:09:28.603" starttime="20161215 05:09:28.602"></status>
</kw>
<status status="PASS" endtime="20161215 05:09:28.603" starttime="20161215 05:09:28.602"></status>
</kw>
<status status="PASS" endtime="20161215 05:09:28.603" starttime="20161215 05:09:28.601"></status>
</kw>
<status status="PASS" endtime="20161215 05:09:28.603" starttime="20161215 05:09:28.598"></status>
</kw>
<msg timestamp="20161215 05:09:28.603" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161215 05:09:28.603" starttime="20161215 05:09:27.972"></status>
</kw>
<msg timestamp="20161215 05:09:28.603" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161215 05:09:28.603" starttime="20161215 05:09:27.971"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161215 05:09:28.604" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161215 05:09:28.604" starttime="20161215 05:09:28.603"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20161215 05:09:28.604" level="INFO">To JSON using : content={
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20161215 05:09:28.605" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20161215 05:09:28.605" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'BMC_STARTING'}</msg>
<status status="PASS" endtime="20161215 05:09:28.605" starttime="20161215 05:09:28.604"></status>
</kw>
<msg timestamp="20161215 05:09:28.605" level="INFO">${current} = BMC_STARTING</msg>
<status status="PASS" endtime="20161215 05:09:28.605" starttime="20161215 05:09:27.968"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${expected}</arg>
<arg>${current}</arg>
</arguments>
<msg timestamp="20161215 05:09:28.605" level="FAIL">'BMC_READY' does not contain 'BMC_STARTING'</msg>
<status status="FAIL" endtime="20161215 05:09:28.606" starttime="20161215 05:09:28.605"></status>
</kw>
<status status="FAIL" endtime="20161215 05:09:28.606" starttime="20161215 05:09:27.967"></status>
</kw>
<kw name="Verify BMC State" library="utils">
<doc>Get the BMC state and verify if the current</doc>
<arguments>
<arg>BMC_READY</arg>
</arguments>
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${current}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg timestamp="20161215 05:09:38.608" level="INFO">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161215 05:09:38.608" starttime="20161215 05:09:38.607"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20161215 05:09:38.609" level="INFO">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161215 05:09:38.609" starttime="20161215 05:09:38.608"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161215 05:09:38.611" level="INFO">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" endtime="20161215 05:09:38.611" starttime="20161215 05:09:38.610"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161215 05:09:38.612" level="INFO">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" endtime="20161215 05:09:38.613" starttime="20161215 05:09:38.612"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161215 05:09:38.613" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161215 05:09:38.613" starttime="20161215 05:09:38.613"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161215 05:09:38.614" starttime="20161215 05:09:38.614"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161215 05:09:38.620" level="INFO">${msg} = URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161215 05:09:38.620" starttime="20161215 05:09:38.620"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161215 05:09:38.621" level="INFO">URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161215 05:09:38.621" starttime="20161215 05:09:38.621"></status>
</kw>
<status status="PASS" endtime="20161215 05:09:38.621" starttime="20161215 05:09:38.620"></status>
</kw>
<status status="PASS" endtime="20161215 05:09:38.621" starttime="20161215 05:09:38.619"></status>
</kw>
<status status="PASS" endtime="20161215 05:09:38.622" starttime="20161215 05:09:38.614"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161215 05:09:38.622" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161215 05:09:38.623" starttime="20161215 05:09:38.622"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161215 05:09:38.624" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161215 05:09:38.624" starttime="20161215 05:09:38.623"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161215 05:09:38.624" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161215 05:09:38.624" starttime="20161215 05:09:38.624"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161215 05:09:38.625" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161215 05:09:38.625" starttime="20161215 05:09:38.624"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161215 05:09:39.010" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161215 05:09:39.010" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161215 05:09:39.011" starttime="20161215 05:09:38.625"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161215 05:09:39.011" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161215 05:09:39.012" starttime="20161215 05:09:39.011"></status>
</kw>
<status status="PASS" endtime="20161215 05:09:39.012" starttime="20161215 05:09:38.622"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161215 05:09:39.367" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161215 05:09:39.367" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161215 05:09:39.368" starttime="20161215 05:09:39.012"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161215 05:09:39.374" level="INFO">${msg} = Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161215 05:09:39.374" starttime="20161215 05:09:39.374"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161215 05:09:39.376" level="INFO">Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161215 05:09:39.376" starttime="20161215 05:09:39.375"></status>
</kw>
<status status="PASS" endtime="20161215 05:09:39.376" starttime="20161215 05:09:39.375"></status>
</kw>
<status status="PASS" endtime="20161215 05:09:39.376" starttime="20161215 05:09:39.373"></status>
</kw>
<status status="PASS" endtime="20161215 05:09:39.377" starttime="20161215 05:09:39.368"></status>
</kw>
<msg timestamp="20161215 05:09:39.377" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161215 05:09:39.377" starttime="20161215 05:09:38.611"></status>
</kw>
<msg timestamp="20161215 05:09:39.378" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161215 05:09:39.378" starttime="20161215 05:09:38.609"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161215 05:09:39.379" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161215 05:09:39.379" starttime="20161215 05:09:39.379"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20161215 05:09:39.380" level="INFO">To JSON using : content={
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20161215 05:09:39.380" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20161215 05:09:39.380" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'BMC_STARTING'}</msg>
<status status="PASS" endtime="20161215 05:09:39.380" starttime="20161215 05:09:39.380"></status>
</kw>
<msg timestamp="20161215 05:09:39.380" level="INFO">${current} = BMC_STARTING</msg>
<status status="PASS" endtime="20161215 05:09:39.380" starttime="20161215 05:09:38.607"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${expected}</arg>
<arg>${current}</arg>
</arguments>
<msg timestamp="20161215 05:09:39.381" level="FAIL">'BMC_READY' does not contain 'BMC_STARTING'</msg>
<status status="FAIL" endtime="20161215 05:09:39.381" starttime="20161215 05:09:39.381"></status>
</kw>
<status status="FAIL" endtime="20161215 05:09:39.381" starttime="20161215 05:09:38.606"></status>
</kw>
<kw name="Verify BMC State" library="utils">
<doc>Get the BMC state and verify if the current</doc>
<arguments>
<arg>BMC_READY</arg>
</arguments>
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${current}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg timestamp="20161215 05:09:49.384" level="INFO">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161215 05:09:49.384" starttime="20161215 05:09:49.383"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20161215 05:09:49.385" level="INFO">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161215 05:09:49.385" starttime="20161215 05:09:49.384"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161215 05:09:49.387" level="INFO">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" endtime="20161215 05:09:49.387" starttime="20161215 05:09:49.386"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161215 05:09:49.389" level="INFO">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" endtime="20161215 05:09:49.389" starttime="20161215 05:09:49.388"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161215 05:09:49.390" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161215 05:09:49.390" starttime="20161215 05:09:49.390"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161215 05:09:49.391" starttime="20161215 05:09:49.391"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161215 05:09:49.398" level="INFO">${msg} = URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161215 05:09:49.399" starttime="20161215 05:09:49.397"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161215 05:09:49.400" level="INFO">URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161215 05:09:49.400" starttime="20161215 05:09:49.400"></status>
</kw>
<status status="PASS" endtime="20161215 05:09:49.400" starttime="20161215 05:09:49.399"></status>
</kw>
<status status="PASS" endtime="20161215 05:09:49.400" starttime="20161215 05:09:49.396"></status>
</kw>
<status status="PASS" endtime="20161215 05:09:49.400" starttime="20161215 05:09:49.391"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161215 05:09:49.401" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161215 05:09:49.401" starttime="20161215 05:09:49.401"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161215 05:09:49.402" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161215 05:09:49.402" starttime="20161215 05:09:49.402"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161215 05:09:49.403" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161215 05:09:49.403" starttime="20161215 05:09:49.402"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161215 05:09:49.403" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161215 05:09:49.403" starttime="20161215 05:09:49.403"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161215 05:09:49.735" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161215 05:09:49.735" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161215 05:09:49.736" starttime="20161215 05:09:49.403"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161215 05:09:49.736" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161215 05:09:49.737" starttime="20161215 05:09:49.736"></status>
</kw>
<status status="PASS" endtime="20161215 05:09:49.737" starttime="20161215 05:09:49.400"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161215 05:09:50.015" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161215 05:09:50.015" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161215 05:09:50.015" starttime="20161215 05:09:49.737"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161215 05:09:50.025" level="INFO">${msg} = Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161215 05:09:50.025" starttime="20161215 05:09:50.024"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161215 05:09:50.027" level="INFO">Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161215 05:09:50.027" starttime="20161215 05:09:50.026"></status>
</kw>
<status status="PASS" endtime="20161215 05:09:50.027" starttime="20161215 05:09:50.025"></status>
</kw>
<status status="PASS" endtime="20161215 05:09:50.027" starttime="20161215 05:09:50.021"></status>
</kw>
<status status="PASS" endtime="20161215 05:09:50.027" starttime="20161215 05:09:50.015"></status>
</kw>
<msg timestamp="20161215 05:09:50.027" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161215 05:09:50.028" starttime="20161215 05:09:49.387"></status>
</kw>
<msg timestamp="20161215 05:09:50.029" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161215 05:09:50.030" starttime="20161215 05:09:49.385"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161215 05:09:50.030" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161215 05:09:50.030" starttime="20161215 05:09:50.030"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20161215 05:09:50.031" level="INFO">To JSON using : content={
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20161215 05:09:50.031" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20161215 05:09:50.031" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'BMC_STARTING'}</msg>
<status status="PASS" endtime="20161215 05:09:50.031" starttime="20161215 05:09:50.031"></status>
</kw>
<msg timestamp="20161215 05:09:50.032" level="INFO">${current} = BMC_STARTING</msg>
<status status="PASS" endtime="20161215 05:09:50.032" starttime="20161215 05:09:49.383"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${expected}</arg>
<arg>${current}</arg>
</arguments>
<msg timestamp="20161215 05:09:50.033" level="FAIL">'BMC_READY' does not contain 'BMC_STARTING'</msg>
<status status="FAIL" endtime="20161215 05:09:50.033" starttime="20161215 05:09:50.032"></status>
</kw>
<status status="FAIL" endtime="20161215 05:09:50.033" starttime="20161215 05:09:49.382"></status>
</kw>
<kw name="Verify BMC State" library="utils">
<doc>Get the BMC state and verify if the current</doc>
<arguments>
<arg>BMC_READY</arg>
</arguments>
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${current}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg timestamp="20161215 05:10:00.035" level="INFO">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161215 05:10:00.035" starttime="20161215 05:10:00.035"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20161215 05:10:00.036" level="INFO">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161215 05:10:00.036" starttime="20161215 05:10:00.036"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161215 05:10:00.038" level="INFO">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" endtime="20161215 05:10:00.038" starttime="20161215 05:10:00.038"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161215 05:10:00.041" level="INFO">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" endtime="20161215 05:10:00.041" starttime="20161215 05:10:00.040"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161215 05:10:00.042" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161215 05:10:00.042" starttime="20161215 05:10:00.041"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161215 05:10:00.043" starttime="20161215 05:10:00.042"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161215 05:10:00.050" level="INFO">${msg} = URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161215 05:10:00.050" starttime="20161215 05:10:00.049"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161215 05:10:00.051" level="INFO">URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161215 05:10:00.051" starttime="20161215 05:10:00.051"></status>
</kw>
<status status="PASS" endtime="20161215 05:10:00.057" starttime="20161215 05:10:00.050"></status>
</kw>
<status status="PASS" endtime="20161215 05:10:00.057" starttime="20161215 05:10:00.048"></status>
</kw>
<status status="PASS" endtime="20161215 05:10:00.057" starttime="20161215 05:10:00.043"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161215 05:10:00.058" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161215 05:10:00.058" starttime="20161215 05:10:00.058"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161215 05:10:00.059" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161215 05:10:00.059" starttime="20161215 05:10:00.058"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161215 05:10:00.060" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161215 05:10:00.060" starttime="20161215 05:10:00.059"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161215 05:10:00.060" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161215 05:10:00.060" starttime="20161215 05:10:00.060"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161215 05:10:00.394" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161215 05:10:00.394" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161215 05:10:00.394" starttime="20161215 05:10:00.060"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161215 05:10:00.394" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161215 05:10:00.394" starttime="20161215 05:10:00.394"></status>
</kw>
<status status="PASS" endtime="20161215 05:10:00.394" starttime="20161215 05:10:00.057"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161215 05:10:00.678" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161215 05:10:00.678" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161215 05:10:00.678" starttime="20161215 05:10:00.395"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161215 05:10:00.684" level="INFO">${msg} = Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161215 05:10:00.684" starttime="20161215 05:10:00.683"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161215 05:10:00.685" level="INFO">Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161215 05:10:00.685" starttime="20161215 05:10:00.685"></status>
</kw>
<status status="PASS" endtime="20161215 05:10:00.686" starttime="20161215 05:10:00.684"></status>
</kw>
<status status="PASS" endtime="20161215 05:10:00.686" starttime="20161215 05:10:00.683"></status>
</kw>
<status status="PASS" endtime="20161215 05:10:00.686" starttime="20161215 05:10:00.678"></status>
</kw>
<msg timestamp="20161215 05:10:00.686" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161215 05:10:00.686" starttime="20161215 05:10:00.039"></status>
</kw>
<msg timestamp="20161215 05:10:00.687" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161215 05:10:00.687" starttime="20161215 05:10:00.037"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161215 05:10:00.688" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161215 05:10:00.688" starttime="20161215 05:10:00.687"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20161215 05:10:00.690" level="INFO">To JSON using : content={
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20161215 05:10:00.690" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20161215 05:10:00.690" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'BMC_STARTING'}</msg>
<status status="PASS" endtime="20161215 05:10:00.690" starttime="20161215 05:10:00.688"></status>
</kw>
<msg timestamp="20161215 05:10:00.690" level="INFO">${current} = BMC_STARTING</msg>
<status status="PASS" endtime="20161215 05:10:00.690" starttime="20161215 05:10:00.034"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${expected}</arg>
<arg>${current}</arg>
</arguments>
<msg timestamp="20161215 05:10:00.691" level="FAIL">'BMC_READY' does not contain 'BMC_STARTING'</msg>
<status status="FAIL" endtime="20161215 05:10:00.691" starttime="20161215 05:10:00.690"></status>
</kw>
<status status="FAIL" endtime="20161215 05:10:00.691" starttime="20161215 05:10:00.033"></status>
</kw>
<kw name="Verify BMC State" library="utils">
<doc>Get the BMC state and verify if the current</doc>
<arguments>
<arg>BMC_READY</arg>
</arguments>
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${current}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg timestamp="20161215 05:10:10.693" level="INFO">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161215 05:10:10.693" starttime="20161215 05:10:10.693"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20161215 05:10:10.694" level="INFO">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161215 05:10:10.694" starttime="20161215 05:10:10.694"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161215 05:10:10.696" level="INFO">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" endtime="20161215 05:10:10.696" starttime="20161215 05:10:10.695"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161215 05:10:10.698" level="INFO">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" endtime="20161215 05:10:10.698" starttime="20161215 05:10:10.697"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161215 05:10:10.699" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161215 05:10:10.699" starttime="20161215 05:10:10.698"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161215 05:10:10.700" starttime="20161215 05:10:10.699"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161215 05:10:10.705" level="INFO">${msg} = URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161215 05:10:10.705" starttime="20161215 05:10:10.704"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161215 05:10:10.706" level="INFO">URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161215 05:10:10.706" starttime="20161215 05:10:10.706"></status>
</kw>
<status status="PASS" endtime="20161215 05:10:10.706" starttime="20161215 05:10:10.705"></status>
</kw>
<status status="PASS" endtime="20161215 05:10:10.706" starttime="20161215 05:10:10.704"></status>
</kw>
<status status="PASS" endtime="20161215 05:10:10.706" starttime="20161215 05:10:10.701"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161215 05:10:10.707" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161215 05:10:10.707" starttime="20161215 05:10:10.707"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161215 05:10:10.709" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161215 05:10:10.709" starttime="20161215 05:10:10.708"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161215 05:10:10.710" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161215 05:10:10.710" starttime="20161215 05:10:10.709"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161215 05:10:10.710" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161215 05:10:10.710" starttime="20161215 05:10:10.710"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161215 05:10:11.044" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161215 05:10:11.044" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161215 05:10:11.044" starttime="20161215 05:10:10.711"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161215 05:10:11.044" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161215 05:10:11.045" starttime="20161215 05:10:11.044"></status>
</kw>
<status status="PASS" endtime="20161215 05:10:11.045" starttime="20161215 05:10:10.706"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161215 05:10:11.351" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161215 05:10:11.351" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161215 05:10:11.351" starttime="20161215 05:10:11.045"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161215 05:10:11.355" level="INFO">${msg} = Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161215 05:10:11.355" starttime="20161215 05:10:11.355"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161215 05:10:11.356" level="INFO">Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161215 05:10:11.356" starttime="20161215 05:10:11.356"></status>
</kw>
<status status="PASS" endtime="20161215 05:10:11.357" starttime="20161215 05:10:11.355"></status>
</kw>
<status status="PASS" endtime="20161215 05:10:11.357" starttime="20161215 05:10:11.354"></status>
</kw>
<status status="PASS" endtime="20161215 05:10:11.357" starttime="20161215 05:10:11.352"></status>
</kw>
<msg timestamp="20161215 05:10:11.357" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161215 05:10:11.357" starttime="20161215 05:10:10.696"></status>
</kw>
<msg timestamp="20161215 05:10:11.357" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161215 05:10:11.357" starttime="20161215 05:10:10.694"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161215 05:10:11.358" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161215 05:10:11.358" starttime="20161215 05:10:11.358"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20161215 05:10:11.359" level="INFO">To JSON using : content={
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20161215 05:10:11.359" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20161215 05:10:11.359" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'BMC_STARTING'}</msg>
<status status="PASS" endtime="20161215 05:10:11.359" starttime="20161215 05:10:11.359"></status>
</kw>
<msg timestamp="20161215 05:10:11.359" level="INFO">${current} = BMC_STARTING</msg>
<status status="PASS" endtime="20161215 05:10:11.360" starttime="20161215 05:10:10.692"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${expected}</arg>
<arg>${current}</arg>
</arguments>
<msg timestamp="20161215 05:10:11.360" level="FAIL">'BMC_READY' does not contain 'BMC_STARTING'</msg>
<status status="FAIL" endtime="20161215 05:10:11.360" starttime="20161215 05:10:11.360"></status>
</kw>
<status status="FAIL" endtime="20161215 05:10:11.361" starttime="20161215 05:10:10.691"></status>
</kw>
<kw name="Verify BMC State" library="utils">
<doc>Get the BMC state and verify if the current</doc>
<arguments>
<arg>BMC_READY</arg>
</arguments>
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${current}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg timestamp="20161215 05:10:21.363" level="INFO">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161215 05:10:21.363" starttime="20161215 05:10:21.363"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20161215 05:10:21.364" level="INFO">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161215 05:10:21.364" starttime="20161215 05:10:21.363"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161215 05:10:21.366" level="INFO">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" endtime="20161215 05:10:21.366" starttime="20161215 05:10:21.365"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161215 05:10:21.368" level="INFO">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" endtime="20161215 05:10:21.368" starttime="20161215 05:10:21.367"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161215 05:10:21.369" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161215 05:10:21.369" starttime="20161215 05:10:21.368"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161215 05:10:21.370" starttime="20161215 05:10:21.369"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161215 05:10:21.374" level="INFO">${msg} = URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161215 05:10:21.374" starttime="20161215 05:10:21.374"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161215 05:10:21.375" level="INFO">URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161215 05:10:21.375" starttime="20161215 05:10:21.375"></status>
</kw>
<status status="PASS" endtime="20161215 05:10:21.375" starttime="20161215 05:10:21.374"></status>
</kw>
<status status="PASS" endtime="20161215 05:10:21.375" starttime="20161215 05:10:21.373"></status>
</kw>
<status status="PASS" endtime="20161215 05:10:21.375" starttime="20161215 05:10:21.370"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161215 05:10:21.377" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161215 05:10:21.377" starttime="20161215 05:10:21.376"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161215 05:10:21.377" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161215 05:10:21.377" starttime="20161215 05:10:21.377"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161215 05:10:21.378" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161215 05:10:21.378" starttime="20161215 05:10:21.378"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161215 05:10:21.379" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161215 05:10:21.379" starttime="20161215 05:10:21.378"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161215 05:10:21.708" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161215 05:10:21.709" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161215 05:10:21.709" starttime="20161215 05:10:21.379"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161215 05:10:21.710" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161215 05:10:21.710" starttime="20161215 05:10:21.709"></status>
</kw>
<status status="PASS" endtime="20161215 05:10:21.710" starttime="20161215 05:10:21.376"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161215 05:10:21.994" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161215 05:10:21.994" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161215 05:10:21.994" starttime="20161215 05:10:21.710"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161215 05:10:22.002" level="INFO">${msg} = Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161215 05:10:22.002" starttime="20161215 05:10:22.002"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161215 05:10:22.004" level="INFO">Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161215 05:10:22.004" starttime="20161215 05:10:22.003"></status>
</kw>
<status status="PASS" endtime="20161215 05:10:22.004" starttime="20161215 05:10:22.003"></status>
</kw>
<status status="PASS" endtime="20161215 05:10:22.004" starttime="20161215 05:10:22.001"></status>
</kw>
<status status="PASS" endtime="20161215 05:10:22.004" starttime="20161215 05:10:21.995"></status>
</kw>
<msg timestamp="20161215 05:10:22.005" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161215 05:10:22.005" starttime="20161215 05:10:21.366"></status>
</kw>
<msg timestamp="20161215 05:10:22.006" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161215 05:10:22.006" starttime="20161215 05:10:21.364"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161215 05:10:22.007" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161215 05:10:22.007" starttime="20161215 05:10:22.006"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20161215 05:10:22.007" level="INFO">To JSON using : content={
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20161215 05:10:22.008" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20161215 05:10:22.008" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'BMC_STARTING'}</msg>
<status status="PASS" endtime="20161215 05:10:22.008" starttime="20161215 05:10:22.007"></status>
</kw>
<msg timestamp="20161215 05:10:22.008" level="INFO">${current} = BMC_STARTING</msg>
<status status="PASS" endtime="20161215 05:10:22.008" starttime="20161215 05:10:21.362"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${expected}</arg>
<arg>${current}</arg>
</arguments>
<msg timestamp="20161215 05:10:22.009" level="FAIL">'BMC_READY' does not contain 'BMC_STARTING'</msg>
<status status="FAIL" endtime="20161215 05:10:22.009" starttime="20161215 05:10:22.009"></status>
</kw>
<status status="FAIL" endtime="20161215 05:10:22.010" starttime="20161215 05:10:21.361"></status>
</kw>
<kw name="Verify BMC State" library="utils">
<doc>Get the BMC state and verify if the current</doc>
<arguments>
<arg>BMC_READY</arg>
</arguments>
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${current}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg timestamp="20161215 05:10:32.013" level="INFO">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161215 05:10:32.013" starttime="20161215 05:10:32.013"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20161215 05:10:32.015" level="INFO">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161215 05:10:32.015" starttime="20161215 05:10:32.014"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161215 05:10:32.017" level="INFO">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" endtime="20161215 05:10:32.017" starttime="20161215 05:10:32.017"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161215 05:10:32.020" level="INFO">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" endtime="20161215 05:10:32.020" starttime="20161215 05:10:32.020"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161215 05:10:32.021" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161215 05:10:32.021" starttime="20161215 05:10:32.021"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161215 05:10:32.022" starttime="20161215 05:10:32.021"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161215 05:10:32.028" level="INFO">${msg} = URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161215 05:10:32.028" starttime="20161215 05:10:32.027"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161215 05:10:32.029" level="INFO">URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161215 05:10:32.029" starttime="20161215 05:10:32.029"></status>
</kw>
<status status="PASS" endtime="20161215 05:10:32.029" starttime="20161215 05:10:32.029"></status>
</kw>
<status status="PASS" endtime="20161215 05:10:32.030" starttime="20161215 05:10:32.027"></status>
</kw>
<status status="PASS" endtime="20161215 05:10:32.030" starttime="20161215 05:10:32.022"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161215 05:10:32.031" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161215 05:10:32.031" starttime="20161215 05:10:32.030"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161215 05:10:32.032" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161215 05:10:32.032" starttime="20161215 05:10:32.031"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161215 05:10:32.032" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161215 05:10:32.032" starttime="20161215 05:10:32.032"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161215 05:10:32.033" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161215 05:10:32.033" starttime="20161215 05:10:32.032"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161215 05:10:32.443" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161215 05:10:32.444" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161215 05:10:32.444" starttime="20161215 05:10:32.033"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161215 05:10:32.444" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161215 05:10:32.445" starttime="20161215 05:10:32.444"></status>
</kw>
<status status="PASS" endtime="20161215 05:10:32.445" starttime="20161215 05:10:32.030"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161215 05:10:32.840" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161215 05:10:32.840" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161215 05:10:32.840" starttime="20161215 05:10:32.445"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161215 05:10:32.848" level="INFO">${msg} = Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161215 05:10:32.848" starttime="20161215 05:10:32.846"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161215 05:10:32.849" level="INFO">Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161215 05:10:32.849" starttime="20161215 05:10:32.849"></status>
</kw>
<status status="PASS" endtime="20161215 05:10:32.850" starttime="20161215 05:10:32.848"></status>
</kw>
<status status="PASS" endtime="20161215 05:10:32.850" starttime="20161215 05:10:32.846"></status>
</kw>
<status status="PASS" endtime="20161215 05:10:32.850" starttime="20161215 05:10:32.841"></status>
</kw>
<msg timestamp="20161215 05:10:32.850" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161215 05:10:32.850" starttime="20161215 05:10:32.018"></status>
</kw>
<msg timestamp="20161215 05:10:32.851" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161215 05:10:32.851" starttime="20161215 05:10:32.015"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161215 05:10:32.851" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161215 05:10:32.851" starttime="20161215 05:10:32.851"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20161215 05:10:32.852" level="INFO">To JSON using : content={
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20161215 05:10:32.852" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20161215 05:10:32.852" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'BMC_STARTING'}</msg>
<status status="PASS" endtime="20161215 05:10:32.852" starttime="20161215 05:10:32.852"></status>
</kw>
<msg timestamp="20161215 05:10:32.852" level="INFO">${current} = BMC_STARTING</msg>
<status status="PASS" endtime="20161215 05:10:32.852" starttime="20161215 05:10:32.012"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${expected}</arg>
<arg>${current}</arg>
</arguments>
<msg timestamp="20161215 05:10:32.853" level="FAIL">'BMC_READY' does not contain 'BMC_STARTING'</msg>
<status status="FAIL" endtime="20161215 05:10:32.853" starttime="20161215 05:10:32.853"></status>
</kw>
<status status="FAIL" endtime="20161215 05:10:32.853" starttime="20161215 05:10:32.010"></status>
</kw>
<kw name="Verify BMC State" library="utils">
<doc>Get the BMC state and verify if the current</doc>
<arguments>
<arg>BMC_READY</arg>
</arguments>
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${current}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg timestamp="20161215 05:10:42.856" level="INFO">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161215 05:10:42.856" starttime="20161215 05:10:42.855"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20161215 05:10:42.857" level="INFO">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161215 05:10:42.857" starttime="20161215 05:10:42.856"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161215 05:10:42.859" level="INFO">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" endtime="20161215 05:10:42.859" starttime="20161215 05:10:42.858"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161215 05:10:42.861" level="INFO">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" endtime="20161215 05:10:42.861" starttime="20161215 05:10:42.860"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161215 05:10:42.861" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161215 05:10:42.861" starttime="20161215 05:10:42.861"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161215 05:10:42.862" starttime="20161215 05:10:42.862"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161215 05:10:42.868" level="INFO">${msg} = URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161215 05:10:42.868" starttime="20161215 05:10:42.867"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161215 05:10:42.870" level="INFO">URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161215 05:10:42.870" starttime="20161215 05:10:42.869"></status>
</kw>
<status status="PASS" endtime="20161215 05:10:42.870" starttime="20161215 05:10:42.869"></status>
</kw>
<status status="PASS" endtime="20161215 05:10:42.870" starttime="20161215 05:10:42.866"></status>
</kw>
<status status="PASS" endtime="20161215 05:10:42.870" starttime="20161215 05:10:42.862"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161215 05:10:42.871" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161215 05:10:42.872" starttime="20161215 05:10:42.871"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161215 05:10:42.872" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161215 05:10:42.872" starttime="20161215 05:10:42.872"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161215 05:10:42.873" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161215 05:10:42.873" starttime="20161215 05:10:42.872"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161215 05:10:42.874" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161215 05:10:42.874" starttime="20161215 05:10:42.873"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161215 05:10:43.200" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161215 05:10:43.200" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161215 05:10:43.200" starttime="20161215 05:10:42.874"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161215 05:10:43.201" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161215 05:10:43.201" starttime="20161215 05:10:43.201"></status>
</kw>
<status status="PASS" endtime="20161215 05:10:43.201" starttime="20161215 05:10:42.870"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161215 05:10:43.480" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161215 05:10:43.480" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161215 05:10:43.480" starttime="20161215 05:10:43.201"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161215 05:10:43.484" level="INFO">${msg} = Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161215 05:10:43.484" starttime="20161215 05:10:43.484"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161215 05:10:43.485" level="INFO">Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161215 05:10:43.485" starttime="20161215 05:10:43.485"></status>
</kw>
<status status="PASS" endtime="20161215 05:10:43.485" starttime="20161215 05:10:43.484"></status>
</kw>
<status status="PASS" endtime="20161215 05:10:43.485" starttime="20161215 05:10:43.483"></status>
</kw>
<status status="PASS" endtime="20161215 05:10:43.485" starttime="20161215 05:10:43.480"></status>
</kw>
<msg timestamp="20161215 05:10:43.486" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161215 05:10:43.486" starttime="20161215 05:10:42.859"></status>
</kw>
<msg timestamp="20161215 05:10:43.486" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161215 05:10:43.486" starttime="20161215 05:10:42.857"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161215 05:10:43.487" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161215 05:10:43.487" starttime="20161215 05:10:43.486"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20161215 05:10:43.488" level="INFO">To JSON using : content={
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20161215 05:10:43.488" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20161215 05:10:43.488" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'BMC_STARTING'}</msg>
<status status="PASS" endtime="20161215 05:10:43.488" starttime="20161215 05:10:43.487"></status>
</kw>
<msg timestamp="20161215 05:10:43.488" level="INFO">${current} = BMC_STARTING</msg>
<status status="PASS" endtime="20161215 05:10:43.488" starttime="20161215 05:10:42.855"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${expected}</arg>
<arg>${current}</arg>
</arguments>
<msg timestamp="20161215 05:10:43.489" level="FAIL">'BMC_READY' does not contain 'BMC_STARTING'</msg>
<status status="FAIL" endtime="20161215 05:10:43.489" starttime="20161215 05:10:43.488"></status>
</kw>
<status status="FAIL" endtime="20161215 05:10:43.489" starttime="20161215 05:10:42.854"></status>
</kw>
<kw name="Verify BMC State" library="utils">
<doc>Get the BMC state and verify if the current</doc>
<arguments>
<arg>BMC_READY</arg>
</arguments>
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${current}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg timestamp="20161215 05:10:53.492" level="INFO">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161215 05:10:53.492" starttime="20161215 05:10:53.491"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20161215 05:10:53.493" level="INFO">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161215 05:10:53.493" starttime="20161215 05:10:53.492"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161215 05:10:53.495" level="INFO">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" endtime="20161215 05:10:53.495" starttime="20161215 05:10:53.494"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161215 05:10:53.497" level="INFO">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" endtime="20161215 05:10:53.497" starttime="20161215 05:10:53.497"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161215 05:10:53.499" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161215 05:10:53.499" starttime="20161215 05:10:53.498"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161215 05:10:53.500" starttime="20161215 05:10:53.499"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161215 05:10:53.508" level="INFO">${msg} = URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161215 05:10:53.508" starttime="20161215 05:10:53.506"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161215 05:10:53.509" level="INFO">URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161215 05:10:53.509" starttime="20161215 05:10:53.509"></status>
</kw>
<status status="PASS" endtime="20161215 05:10:53.510" starttime="20161215 05:10:53.508"></status>
</kw>
<status status="PASS" endtime="20161215 05:10:53.510" starttime="20161215 05:10:53.505"></status>
</kw>
<status status="PASS" endtime="20161215 05:10:53.510" starttime="20161215 05:10:53.500"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161215 05:10:53.511" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161215 05:10:53.511" starttime="20161215 05:10:53.511"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161215 05:10:53.512" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161215 05:10:53.512" starttime="20161215 05:10:53.512"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161215 05:10:53.512" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161215 05:10:53.513" starttime="20161215 05:10:53.512"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161215 05:10:53.513" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161215 05:10:53.513" starttime="20161215 05:10:53.513"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161215 05:10:53.851" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161215 05:10:53.851" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161215 05:10:53.851" starttime="20161215 05:10:53.513"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161215 05:10:53.852" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161215 05:10:53.852" starttime="20161215 05:10:53.851"></status>
</kw>
<status status="PASS" endtime="20161215 05:10:53.852" starttime="20161215 05:10:53.510"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161215 05:10:54.130" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161215 05:10:54.130" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161215 05:10:54.130" starttime="20161215 05:10:53.853"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161215 05:10:54.138" level="INFO">${msg} = Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161215 05:10:54.138" starttime="20161215 05:10:54.136"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161215 05:10:54.139" level="INFO">Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161215 05:10:54.139" starttime="20161215 05:10:54.139"></status>
</kw>
<status status="PASS" endtime="20161215 05:10:54.139" starttime="20161215 05:10:54.138"></status>
</kw>
<status status="PASS" endtime="20161215 05:10:54.140" starttime="20161215 05:10:54.136"></status>
</kw>
<status status="PASS" endtime="20161215 05:10:54.140" starttime="20161215 05:10:54.131"></status>
</kw>
<msg timestamp="20161215 05:10:54.141" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161215 05:10:54.141" starttime="20161215 05:10:53.495"></status>
</kw>
<msg timestamp="20161215 05:10:54.141" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161215 05:10:54.141" starttime="20161215 05:10:53.493"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161215 05:10:54.142" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161215 05:10:54.142" starttime="20161215 05:10:54.141"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20161215 05:10:54.143" level="INFO">To JSON using : content={
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20161215 05:10:54.143" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20161215 05:10:54.143" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'BMC_STARTING'}</msg>
<status status="PASS" endtime="20161215 05:10:54.143" starttime="20161215 05:10:54.142"></status>
</kw>
<msg timestamp="20161215 05:10:54.144" level="INFO">${current} = BMC_STARTING</msg>
<status status="PASS" endtime="20161215 05:10:54.144" starttime="20161215 05:10:53.490"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${expected}</arg>
<arg>${current}</arg>
</arguments>
<msg timestamp="20161215 05:10:54.145" level="FAIL">'BMC_READY' does not contain 'BMC_STARTING'</msg>
<status status="FAIL" endtime="20161215 05:10:54.145" starttime="20161215 05:10:54.144"></status>
</kw>
<status status="FAIL" endtime="20161215 05:10:54.145" starttime="20161215 05:10:53.489"></status>
</kw>
<kw name="Verify BMC State" library="utils">
<doc>Get the BMC state and verify if the current</doc>
<arguments>
<arg>BMC_READY</arg>
</arguments>
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${current}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg timestamp="20161215 05:11:04.148" level="INFO">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161215 05:11:04.148" starttime="20161215 05:11:04.147"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20161215 05:11:04.149" level="INFO">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161215 05:11:04.149" starttime="20161215 05:11:04.148"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161215 05:11:04.151" level="INFO">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" endtime="20161215 05:11:04.151" starttime="20161215 05:11:04.150"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161215 05:11:04.152" level="INFO">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" endtime="20161215 05:11:04.152" starttime="20161215 05:11:04.152"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161215 05:11:04.153" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161215 05:11:04.153" starttime="20161215 05:11:04.152"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161215 05:11:04.153" starttime="20161215 05:11:04.153"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161215 05:11:04.159" level="INFO">${msg} = URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161215 05:11:04.159" starttime="20161215 05:11:04.158"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161215 05:11:04.160" level="INFO">URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161215 05:11:04.160" starttime="20161215 05:11:04.159"></status>
</kw>
<status status="PASS" endtime="20161215 05:11:04.160" starttime="20161215 05:11:04.159"></status>
</kw>
<status status="PASS" endtime="20161215 05:11:04.160" starttime="20161215 05:11:04.157"></status>
</kw>
<status status="PASS" endtime="20161215 05:11:04.160" starttime="20161215 05:11:04.154"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161215 05:11:04.161" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161215 05:11:04.162" starttime="20161215 05:11:04.161"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161215 05:11:04.163" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161215 05:11:04.163" starttime="20161215 05:11:04.162"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161215 05:11:04.163" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161215 05:11:04.163" starttime="20161215 05:11:04.163"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161215 05:11:04.164" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161215 05:11:04.164" starttime="20161215 05:11:04.163"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161215 05:11:04.611" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161215 05:11:04.611" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161215 05:11:04.611" starttime="20161215 05:11:04.164"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161215 05:11:04.612" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161215 05:11:04.612" starttime="20161215 05:11:04.611"></status>
</kw>
<status status="PASS" endtime="20161215 05:11:04.612" starttime="20161215 05:11:04.160"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161215 05:11:05.419" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161215 05:11:05.419" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161215 05:11:05.419" starttime="20161215 05:11:04.612"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161215 05:11:05.426" level="INFO">${msg} = Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161215 05:11:05.426" starttime="20161215 05:11:05.425"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161215 05:11:05.428" level="INFO">Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161215 05:11:05.428" starttime="20161215 05:11:05.427"></status>
</kw>
<status status="PASS" endtime="20161215 05:11:05.428" starttime="20161215 05:11:05.426"></status>
</kw>
<status status="PASS" endtime="20161215 05:11:05.429" starttime="20161215 05:11:05.424"></status>
</kw>
<status status="PASS" endtime="20161215 05:11:05.429" starttime="20161215 05:11:05.419"></status>
</kw>
<msg timestamp="20161215 05:11:05.429" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161215 05:11:05.429" starttime="20161215 05:11:04.151"></status>
</kw>
<msg timestamp="20161215 05:11:05.429" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161215 05:11:05.431" starttime="20161215 05:11:04.149"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161215 05:11:05.431" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161215 05:11:05.432" starttime="20161215 05:11:05.431"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20161215 05:11:05.432" level="INFO">To JSON using : content={
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20161215 05:11:05.432" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20161215 05:11:05.432" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'BMC_STARTING'}</msg>
<status status="PASS" endtime="20161215 05:11:05.432" starttime="20161215 05:11:05.432"></status>
</kw>
<msg timestamp="20161215 05:11:05.432" level="INFO">${current} = BMC_STARTING</msg>
<status status="PASS" endtime="20161215 05:11:05.432" starttime="20161215 05:11:04.146"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${expected}</arg>
<arg>${current}</arg>
</arguments>
<msg timestamp="20161215 05:11:05.433" level="FAIL">'BMC_READY' does not contain 'BMC_STARTING'</msg>
<status status="FAIL" endtime="20161215 05:11:05.433" starttime="20161215 05:11:05.433"></status>
</kw>
<status status="FAIL" endtime="20161215 05:11:05.433" starttime="20161215 05:11:04.146"></status>
</kw>
<kw name="Verify BMC State" library="utils">
<doc>Get the BMC state and verify if the current</doc>
<arguments>
<arg>BMC_READY</arg>
</arguments>
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${current}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg timestamp="20161215 05:11:15.436" level="INFO">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161215 05:11:15.436" starttime="20161215 05:11:15.435"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20161215 05:11:15.437" level="INFO">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161215 05:11:15.437" starttime="20161215 05:11:15.436"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161215 05:11:15.439" level="INFO">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" endtime="20161215 05:11:15.439" starttime="20161215 05:11:15.438"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161215 05:11:15.441" level="INFO">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" endtime="20161215 05:11:15.441" starttime="20161215 05:11:15.440"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161215 05:11:15.442" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161215 05:11:15.442" starttime="20161215 05:11:15.442"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161215 05:11:15.443" starttime="20161215 05:11:15.442"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161215 05:11:15.451" level="INFO">${msg} = URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161215 05:11:15.451" starttime="20161215 05:11:15.450"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161215 05:11:15.452" level="INFO">URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161215 05:11:15.452" starttime="20161215 05:11:15.452"></status>
</kw>
<status status="PASS" endtime="20161215 05:11:15.452" starttime="20161215 05:11:15.451"></status>
</kw>
<status status="PASS" endtime="20161215 05:11:15.453" starttime="20161215 05:11:15.449"></status>
</kw>
<status status="PASS" endtime="20161215 05:11:15.453" starttime="20161215 05:11:15.443"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161215 05:11:15.453" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161215 05:11:15.454" starttime="20161215 05:11:15.453"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161215 05:11:15.455" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161215 05:11:15.455" starttime="20161215 05:11:15.454"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161215 05:11:15.455" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161215 05:11:15.455" starttime="20161215 05:11:15.455"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161215 05:11:15.456" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161215 05:11:15.456" starttime="20161215 05:11:15.455"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161215 05:11:15.788" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161215 05:11:15.788" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161215 05:11:15.788" starttime="20161215 05:11:15.456"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161215 05:11:15.789" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161215 05:11:15.789" starttime="20161215 05:11:15.788"></status>
</kw>
<status status="PASS" endtime="20161215 05:11:15.789" starttime="20161215 05:11:15.453"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161215 05:11:16.072" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161215 05:11:16.073" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161215 05:11:16.073" starttime="20161215 05:11:15.790"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161215 05:11:16.082" level="INFO">${msg} = Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161215 05:11:16.082" starttime="20161215 05:11:16.081"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161215 05:11:16.082" level="INFO">Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161215 05:11:16.083" starttime="20161215 05:11:16.082"></status>
</kw>
<status status="PASS" endtime="20161215 05:11:16.083" starttime="20161215 05:11:16.082"></status>
</kw>
<status status="PASS" endtime="20161215 05:11:16.083" starttime="20161215 05:11:16.078"></status>
</kw>
<status status="PASS" endtime="20161215 05:11:16.083" starttime="20161215 05:11:16.073"></status>
</kw>
<msg timestamp="20161215 05:11:16.083" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161215 05:11:16.083" starttime="20161215 05:11:15.439"></status>
</kw>
<msg timestamp="20161215 05:11:16.083" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161215 05:11:16.083" starttime="20161215 05:11:15.437"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161215 05:11:16.084" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161215 05:11:16.084" starttime="20161215 05:11:16.083"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20161215 05:11:16.085" level="INFO">To JSON using : content={
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20161215 05:11:16.085" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20161215 05:11:16.085" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'BMC_STARTING'}</msg>
<status status="PASS" endtime="20161215 05:11:16.085" starttime="20161215 05:11:16.084"></status>
</kw>
<msg timestamp="20161215 05:11:16.085" level="INFO">${current} = BMC_STARTING</msg>
<status status="PASS" endtime="20161215 05:11:16.085" starttime="20161215 05:11:15.434"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${expected}</arg>
<arg>${current}</arg>
</arguments>
<msg timestamp="20161215 05:11:16.086" level="FAIL">'BMC_READY' does not contain 'BMC_STARTING'</msg>
<status status="FAIL" endtime="20161215 05:11:16.086" starttime="20161215 05:11:16.085"></status>
</kw>
<status status="FAIL" endtime="20161215 05:11:16.086" starttime="20161215 05:11:15.434"></status>
</kw>
<kw name="Verify BMC State" library="utils">
<doc>Get the BMC state and verify if the current</doc>
<arguments>
<arg>BMC_READY</arg>
</arguments>
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${current}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg timestamp="20161215 05:11:26.088" level="INFO">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161215 05:11:26.088" starttime="20161215 05:11:26.088"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20161215 05:11:26.089" level="INFO">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161215 05:11:26.089" starttime="20161215 05:11:26.088"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161215 05:11:26.091" level="INFO">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" endtime="20161215 05:11:26.091" starttime="20161215 05:11:26.090"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161215 05:11:26.093" level="INFO">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" endtime="20161215 05:11:26.093" starttime="20161215 05:11:26.092"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161215 05:11:26.094" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161215 05:11:26.094" starttime="20161215 05:11:26.093"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161215 05:11:26.095" starttime="20161215 05:11:26.094"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161215 05:11:26.101" level="INFO">${msg} = URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161215 05:11:26.101" starttime="20161215 05:11:26.100"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161215 05:11:26.102" level="INFO">URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161215 05:11:26.102" starttime="20161215 05:11:26.102"></status>
</kw>
<status status="PASS" endtime="20161215 05:11:26.102" starttime="20161215 05:11:26.101"></status>
</kw>
<status status="PASS" endtime="20161215 05:11:26.102" starttime="20161215 05:11:26.099"></status>
</kw>
<status status="PASS" endtime="20161215 05:11:26.102" starttime="20161215 05:11:26.095"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161215 05:11:26.103" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161215 05:11:26.103" starttime="20161215 05:11:26.103"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161215 05:11:26.104" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161215 05:11:26.104" starttime="20161215 05:11:26.104"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161215 05:11:26.105" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161215 05:11:26.105" starttime="20161215 05:11:26.104"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161215 05:11:26.105" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161215 05:11:26.106" starttime="20161215 05:11:26.105"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161215 05:11:26.472" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161215 05:11:26.472" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161215 05:11:26.472" starttime="20161215 05:11:26.106"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161215 05:11:26.472" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161215 05:11:26.473" starttime="20161215 05:11:26.472"></status>
</kw>
<status status="PASS" endtime="20161215 05:11:26.473" starttime="20161215 05:11:26.102"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161215 05:11:26.751" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161215 05:11:26.752" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161215 05:11:26.752" starttime="20161215 05:11:26.473"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161215 05:11:26.758" level="INFO">${msg} = Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161215 05:11:26.758" starttime="20161215 05:11:26.757"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161215 05:11:26.760" level="INFO">Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161215 05:11:26.760" starttime="20161215 05:11:26.759"></status>
</kw>
<status status="PASS" endtime="20161215 05:11:26.760" starttime="20161215 05:11:26.759"></status>
</kw>
<status status="PASS" endtime="20161215 05:11:26.760" starttime="20161215 05:11:26.757"></status>
</kw>
<status status="PASS" endtime="20161215 05:11:26.760" starttime="20161215 05:11:26.752"></status>
</kw>
<msg timestamp="20161215 05:11:26.761" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161215 05:11:26.761" starttime="20161215 05:11:26.091"></status>
</kw>
<msg timestamp="20161215 05:11:26.761" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161215 05:11:26.761" starttime="20161215 05:11:26.089"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161215 05:11:26.762" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161215 05:11:26.762" starttime="20161215 05:11:26.762"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20161215 05:11:26.763" level="INFO">To JSON using : content={
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20161215 05:11:26.763" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20161215 05:11:26.763" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'BMC_STARTING'}</msg>
<status status="PASS" endtime="20161215 05:11:26.764" starttime="20161215 05:11:26.763"></status>
</kw>
<msg timestamp="20161215 05:11:26.764" level="INFO">${current} = BMC_STARTING</msg>
<status status="PASS" endtime="20161215 05:11:26.764" starttime="20161215 05:11:26.087"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${expected}</arg>
<arg>${current}</arg>
</arguments>
<msg timestamp="20161215 05:11:26.765" level="FAIL">'BMC_READY' does not contain 'BMC_STARTING'</msg>
<status status="FAIL" endtime="20161215 05:11:26.765" starttime="20161215 05:11:26.765"></status>
</kw>
<status status="FAIL" endtime="20161215 05:11:26.766" starttime="20161215 05:11:26.086"></status>
</kw>
<kw name="Verify BMC State" library="utils">
<doc>Get the BMC state and verify if the current</doc>
<arguments>
<arg>BMC_READY</arg>
</arguments>
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${current}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg timestamp="20161215 05:11:36.768" level="INFO">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161215 05:11:36.768" starttime="20161215 05:11:36.767"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20161215 05:11:36.769" level="INFO">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161215 05:11:36.769" starttime="20161215 05:11:36.768"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161215 05:11:36.771" level="INFO">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" endtime="20161215 05:11:36.771" starttime="20161215 05:11:36.770"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161215 05:11:36.773" level="INFO">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" endtime="20161215 05:11:36.773" starttime="20161215 05:11:36.773"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161215 05:11:36.774" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161215 05:11:36.774" starttime="20161215 05:11:36.773"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161215 05:11:36.775" starttime="20161215 05:11:36.774"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161215 05:11:36.782" level="INFO">${msg} = URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161215 05:11:36.782" starttime="20161215 05:11:36.781"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161215 05:11:36.783" level="INFO">URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161215 05:11:36.783" starttime="20161215 05:11:36.783"></status>
</kw>
<status status="PASS" endtime="20161215 05:11:36.783" starttime="20161215 05:11:36.782"></status>
</kw>
<status status="PASS" endtime="20161215 05:11:36.784" starttime="20161215 05:11:36.780"></status>
</kw>
<status status="PASS" endtime="20161215 05:11:36.784" starttime="20161215 05:11:36.776"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161215 05:11:36.784" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161215 05:11:36.785" starttime="20161215 05:11:36.784"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161215 05:11:36.786" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161215 05:11:36.786" starttime="20161215 05:11:36.785"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161215 05:11:36.786" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161215 05:11:36.786" starttime="20161215 05:11:36.786"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161215 05:11:36.787" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161215 05:11:36.787" starttime="20161215 05:11:36.786"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161215 05:11:37.122" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161215 05:11:37.123" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161215 05:11:37.123" starttime="20161215 05:11:36.787"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161215 05:11:37.123" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161215 05:11:37.123" starttime="20161215 05:11:37.123"></status>
</kw>
<status status="PASS" endtime="20161215 05:11:37.123" starttime="20161215 05:11:36.784"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161215 05:11:37.405" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161215 05:11:37.405" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161215 05:11:37.405" starttime="20161215 05:11:37.123"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161215 05:11:37.409" level="INFO">${msg} = Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161215 05:11:37.409" starttime="20161215 05:11:37.409"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161215 05:11:37.410" level="INFO">Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161215 05:11:37.410" starttime="20161215 05:11:37.410"></status>
</kw>
<status status="PASS" endtime="20161215 05:11:37.410" starttime="20161215 05:11:37.409"></status>
</kw>
<status status="PASS" endtime="20161215 05:11:37.410" starttime="20161215 05:11:37.408"></status>
</kw>
<status status="PASS" endtime="20161215 05:11:37.411" starttime="20161215 05:11:37.406"></status>
</kw>
<msg timestamp="20161215 05:11:37.411" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161215 05:11:37.411" starttime="20161215 05:11:36.771"></status>
</kw>
<msg timestamp="20161215 05:11:37.411" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161215 05:11:37.411" starttime="20161215 05:11:36.769"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161215 05:11:37.412" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161215 05:11:37.412" starttime="20161215 05:11:37.411"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20161215 05:11:37.412" level="INFO">To JSON using : content={
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20161215 05:11:37.412" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20161215 05:11:37.413" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'BMC_STARTING'}</msg>
<status status="PASS" endtime="20161215 05:11:37.413" starttime="20161215 05:11:37.412"></status>
</kw>
<msg timestamp="20161215 05:11:37.413" level="INFO">${current} = BMC_STARTING</msg>
<status status="PASS" endtime="20161215 05:11:37.413" starttime="20161215 05:11:36.767"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${expected}</arg>
<arg>${current}</arg>
</arguments>
<msg timestamp="20161215 05:11:37.413" level="FAIL">'BMC_READY' does not contain 'BMC_STARTING'</msg>
<status status="FAIL" endtime="20161215 05:11:37.413" starttime="20161215 05:11:37.413"></status>
</kw>
<status status="FAIL" endtime="20161215 05:11:37.414" starttime="20161215 05:11:36.766"></status>
</kw>
<kw name="Verify BMC State" library="utils">
<doc>Get the BMC state and verify if the current</doc>
<arguments>
<arg>BMC_READY</arg>
</arguments>
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${current}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg timestamp="20161215 05:11:47.416" level="INFO">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161215 05:11:47.416" starttime="20161215 05:11:47.415"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20161215 05:11:47.417" level="INFO">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161215 05:11:47.417" starttime="20161215 05:11:47.416"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161215 05:11:47.419" level="INFO">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" endtime="20161215 05:11:47.419" starttime="20161215 05:11:47.418"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161215 05:11:47.421" level="INFO">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" endtime="20161215 05:11:47.421" starttime="20161215 05:11:47.420"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161215 05:11:47.422" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161215 05:11:47.422" starttime="20161215 05:11:47.421"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161215 05:11:47.423" starttime="20161215 05:11:47.422"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161215 05:11:47.429" level="INFO">${msg} = URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161215 05:11:47.429" starttime="20161215 05:11:47.428"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161215 05:11:47.430" level="INFO">URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161215 05:11:47.430" starttime="20161215 05:11:47.430"></status>
</kw>
<status status="PASS" endtime="20161215 05:11:47.431" starttime="20161215 05:11:47.429"></status>
</kw>
<status status="PASS" endtime="20161215 05:11:47.431" starttime="20161215 05:11:47.427"></status>
</kw>
<status status="PASS" endtime="20161215 05:11:47.431" starttime="20161215 05:11:47.423"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161215 05:11:47.432" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161215 05:11:47.433" starttime="20161215 05:11:47.432"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161215 05:11:47.433" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161215 05:11:47.433" starttime="20161215 05:11:47.433"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161215 05:11:47.434" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161215 05:11:47.434" starttime="20161215 05:11:47.433"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161215 05:11:47.435" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161215 05:11:47.435" starttime="20161215 05:11:47.434"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161215 05:11:47.878" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161215 05:11:47.878" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161215 05:11:47.878" starttime="20161215 05:11:47.435"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161215 05:11:47.879" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161215 05:11:47.880" starttime="20161215 05:11:47.879"></status>
</kw>
<status status="PASS" endtime="20161215 05:11:47.880" starttime="20161215 05:11:47.431"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161215 05:11:48.156" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161215 05:11:48.157" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161215 05:11:48.157" starttime="20161215 05:11:47.880"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161215 05:11:48.164" level="INFO">${msg} = Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161215 05:11:48.164" starttime="20161215 05:11:48.163"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161215 05:11:48.165" level="INFO">Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161215 05:11:48.165" starttime="20161215 05:11:48.165"></status>
</kw>
<status status="PASS" endtime="20161215 05:11:48.165" starttime="20161215 05:11:48.164"></status>
</kw>
<status status="PASS" endtime="20161215 05:11:48.166" starttime="20161215 05:11:48.162"></status>
</kw>
<status status="PASS" endtime="20161215 05:11:48.166" starttime="20161215 05:11:48.157"></status>
</kw>
<msg timestamp="20161215 05:11:48.166" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161215 05:11:48.166" starttime="20161215 05:11:47.419"></status>
</kw>
<msg timestamp="20161215 05:11:48.166" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161215 05:11:48.167" starttime="20161215 05:11:47.417"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161215 05:11:48.167" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161215 05:11:48.167" starttime="20161215 05:11:48.167"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20161215 05:11:48.168" level="INFO">To JSON using : content={
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20161215 05:11:48.168" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20161215 05:11:48.168" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'BMC_STARTING'}</msg>
<status status="PASS" endtime="20161215 05:11:48.168" starttime="20161215 05:11:48.167"></status>
</kw>
<msg timestamp="20161215 05:11:48.168" level="INFO">${current} = BMC_STARTING</msg>
<status status="PASS" endtime="20161215 05:11:48.168" starttime="20161215 05:11:47.415"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${expected}</arg>
<arg>${current}</arg>
</arguments>
<msg timestamp="20161215 05:11:48.169" level="FAIL">'BMC_READY' does not contain 'BMC_STARTING'</msg>
<status status="FAIL" endtime="20161215 05:11:48.169" starttime="20161215 05:11:48.169"></status>
</kw>
<status status="FAIL" endtime="20161215 05:11:48.169" starttime="20161215 05:11:47.414"></status>
</kw>
<kw name="Verify BMC State" library="utils">
<doc>Get the BMC state and verify if the current</doc>
<arguments>
<arg>BMC_READY</arg>
</arguments>
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${current}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg timestamp="20161215 05:11:58.172" level="INFO">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161215 05:11:58.172" starttime="20161215 05:11:58.171"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20161215 05:11:58.173" level="INFO">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161215 05:11:58.173" starttime="20161215 05:11:58.172"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161215 05:11:58.175" level="INFO">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" endtime="20161215 05:11:58.175" starttime="20161215 05:11:58.174"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161215 05:11:58.176" level="INFO">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" endtime="20161215 05:11:58.176" starttime="20161215 05:11:58.176"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161215 05:11:58.177" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161215 05:11:58.177" starttime="20161215 05:11:58.177"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161215 05:11:58.178" starttime="20161215 05:11:58.178"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161215 05:11:58.185" level="INFO">${msg} = URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161215 05:11:58.185" starttime="20161215 05:11:58.184"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161215 05:11:58.186" level="INFO">URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161215 05:11:58.186" starttime="20161215 05:11:58.186"></status>
</kw>
<status status="PASS" endtime="20161215 05:11:58.187" starttime="20161215 05:11:58.185"></status>
</kw>
<status status="PASS" endtime="20161215 05:11:58.187" starttime="20161215 05:11:58.184"></status>
</kw>
<status status="PASS" endtime="20161215 05:11:58.187" starttime="20161215 05:11:58.179"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161215 05:11:58.187" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161215 05:11:58.188" starttime="20161215 05:11:58.187"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161215 05:11:58.189" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161215 05:11:58.189" starttime="20161215 05:11:58.188"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161215 05:11:58.189" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161215 05:11:58.189" starttime="20161215 05:11:58.189"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161215 05:11:58.190" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161215 05:11:58.190" starttime="20161215 05:11:58.190"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161215 05:11:58.520" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161215 05:11:58.521" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161215 05:11:58.521" starttime="20161215 05:11:58.190"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161215 05:11:58.521" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161215 05:11:58.521" starttime="20161215 05:11:58.521"></status>
</kw>
<status status="PASS" endtime="20161215 05:11:58.521" starttime="20161215 05:11:58.187"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161215 05:11:58.805" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161215 05:11:58.805" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161215 05:11:58.805" starttime="20161215 05:11:58.522"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161215 05:11:58.813" level="INFO">${msg} = Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161215 05:11:58.813" starttime="20161215 05:11:58.812"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161215 05:11:58.814" level="INFO">Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161215 05:11:58.814" starttime="20161215 05:11:58.814"></status>
</kw>
<status status="PASS" endtime="20161215 05:11:58.815" starttime="20161215 05:11:58.813"></status>
</kw>
<status status="PASS" endtime="20161215 05:11:58.815" starttime="20161215 05:11:58.811"></status>
</kw>
<status status="PASS" endtime="20161215 05:11:58.815" starttime="20161215 05:11:58.806"></status>
</kw>
<msg timestamp="20161215 05:11:58.816" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161215 05:11:58.816" starttime="20161215 05:11:58.175"></status>
</kw>
<msg timestamp="20161215 05:11:58.816" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161215 05:11:58.816" starttime="20161215 05:11:58.173"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161215 05:11:58.817" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161215 05:11:58.817" starttime="20161215 05:11:58.816"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20161215 05:11:58.818" level="INFO">To JSON using : content={
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20161215 05:11:58.818" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20161215 05:11:58.818" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'BMC_STARTING'}</msg>
<status status="PASS" endtime="20161215 05:11:58.818" starttime="20161215 05:11:58.817"></status>
</kw>
<msg timestamp="20161215 05:11:58.818" level="INFO">${current} = BMC_STARTING</msg>
<status status="PASS" endtime="20161215 05:11:58.819" starttime="20161215 05:11:58.171"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${expected}</arg>
<arg>${current}</arg>
</arguments>
<msg timestamp="20161215 05:11:58.819" level="FAIL">'BMC_READY' does not contain 'BMC_STARTING'</msg>
<status status="FAIL" endtime="20161215 05:11:58.820" starttime="20161215 05:11:58.819"></status>
</kw>
<status status="FAIL" endtime="20161215 05:11:58.820" starttime="20161215 05:11:58.170"></status>
</kw>
<kw name="Verify BMC State" library="utils">
<doc>Get the BMC state and verify if the current</doc>
<arguments>
<arg>BMC_READY</arg>
</arguments>
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${current}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg timestamp="20161215 05:12:08.822" level="INFO">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161215 05:12:08.822" starttime="20161215 05:12:08.822"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20161215 05:12:08.823" level="INFO">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161215 05:12:08.823" starttime="20161215 05:12:08.823"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161215 05:12:08.825" level="INFO">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" endtime="20161215 05:12:08.825" starttime="20161215 05:12:08.825"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161215 05:12:08.827" level="INFO">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" endtime="20161215 05:12:08.827" starttime="20161215 05:12:08.827"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161215 05:12:08.828" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161215 05:12:08.828" starttime="20161215 05:12:08.828"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161215 05:12:08.829" starttime="20161215 05:12:08.829"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161215 05:12:08.837" level="INFO">${msg} = URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161215 05:12:08.837" starttime="20161215 05:12:08.836"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161215 05:12:08.838" level="INFO">URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161215 05:12:08.838" starttime="20161215 05:12:08.837"></status>
</kw>
<status status="PASS" endtime="20161215 05:12:08.838" starttime="20161215 05:12:08.837"></status>
</kw>
<status status="PASS" endtime="20161215 05:12:08.838" starttime="20161215 05:12:08.835"></status>
</kw>
<status status="PASS" endtime="20161215 05:12:08.838" starttime="20161215 05:12:08.830"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161215 05:12:08.839" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161215 05:12:08.840" starttime="20161215 05:12:08.839"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161215 05:12:08.840" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161215 05:12:08.840" starttime="20161215 05:12:08.840"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161215 05:12:08.841" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161215 05:12:08.841" starttime="20161215 05:12:08.840"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161215 05:12:08.842" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161215 05:12:08.842" starttime="20161215 05:12:08.841"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161215 05:12:10.629" level="FAIL">ConnectionError: HTTPSConnectionPool(host='9.3.23.30', port=443): Max retries exceeded with url: /login (Caused by ProtocolError('Connection aborted.', error(104, 'Connection reset by peer')))</msg>
<status status="FAIL" endtime="20161215 05:12:10.629" starttime="20161215 05:12:08.842"></status>
</kw>
<status status="FAIL" endtime="20161215 05:12:10.629" starttime="20161215 05:12:08.838"></status>
</kw>
<status status="FAIL" endtime="20161215 05:12:10.629" starttime="20161215 05:12:08.826"></status>
</kw>
<status status="FAIL" endtime="20161215 05:12:10.630" starttime="20161215 05:12:08.824"></status>
</kw>
<status status="FAIL" endtime="20161215 05:12:10.630" starttime="20161215 05:12:08.821"></status>
</kw>
<status status="FAIL" endtime="20161215 05:12:10.630" starttime="20161215 05:12:08.820"></status>
</kw>
<kw name="Verify BMC State" library="utils">
<doc>Get the BMC state and verify if the current</doc>
<arguments>
<arg>BMC_READY</arg>
</arguments>
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${current}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg timestamp="20161215 05:12:20.633" level="INFO">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161215 05:12:20.633" starttime="20161215 05:12:20.633"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20161215 05:12:20.634" level="INFO">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161215 05:12:20.635" starttime="20161215 05:12:20.634"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161215 05:12:20.636" level="INFO">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" endtime="20161215 05:12:20.636" starttime="20161215 05:12:20.636"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161215 05:12:20.638" level="INFO">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" endtime="20161215 05:12:20.638" starttime="20161215 05:12:20.638"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161215 05:12:20.639" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161215 05:12:20.639" starttime="20161215 05:12:20.639"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161215 05:12:20.640" starttime="20161215 05:12:20.640"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161215 05:12:20.645" level="INFO">${msg} = URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161215 05:12:20.645" starttime="20161215 05:12:20.645"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161215 05:12:20.646" level="INFO">URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161215 05:12:20.646" starttime="20161215 05:12:20.646"></status>
</kw>
<status status="PASS" endtime="20161215 05:12:20.646" starttime="20161215 05:12:20.645"></status>
</kw>
<status status="PASS" endtime="20161215 05:12:20.646" starttime="20161215 05:12:20.644"></status>
</kw>
<status status="PASS" endtime="20161215 05:12:20.646" starttime="20161215 05:12:20.641"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161215 05:12:20.647" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161215 05:12:20.647" starttime="20161215 05:12:20.647"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161215 05:12:20.648" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161215 05:12:20.648" starttime="20161215 05:12:20.648"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161215 05:12:20.649" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161215 05:12:20.649" starttime="20161215 05:12:20.649"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161215 05:12:20.650" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161215 05:12:20.650" starttime="20161215 05:12:20.649"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161215 05:12:23.051" level="FAIL">ConnectionError: HTTPSConnectionPool(host='9.3.23.30', port=443): Max retries exceeded with url: /login (Caused by ProtocolError('Connection aborted.', error(104, 'Connection reset by peer')))</msg>
<status status="FAIL" endtime="20161215 05:12:23.051" starttime="20161215 05:12:20.650"></status>
</kw>
<status status="FAIL" endtime="20161215 05:12:23.051" starttime="20161215 05:12:20.646"></status>
</kw>
<status status="FAIL" endtime="20161215 05:12:23.052" starttime="20161215 05:12:20.637"></status>
</kw>
<status status="FAIL" endtime="20161215 05:12:23.052" starttime="20161215 05:12:20.635"></status>
</kw>
<status status="FAIL" endtime="20161215 05:12:23.052" starttime="20161215 05:12:20.632"></status>
</kw>
<status status="FAIL" endtime="20161215 05:12:23.053" starttime="20161215 05:12:20.631"></status>
</kw>
<kw name="Verify BMC State" library="utils">
<doc>Get the BMC state and verify if the current</doc>
<arguments>
<arg>BMC_READY</arg>
</arguments>
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${current}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg timestamp="20161215 05:12:33.055" level="INFO">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161215 05:12:33.055" starttime="20161215 05:12:33.055"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20161215 05:12:33.057" level="INFO">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161215 05:12:33.057" starttime="20161215 05:12:33.056"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161215 05:12:33.059" level="INFO">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" endtime="20161215 05:12:33.059" starttime="20161215 05:12:33.058"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161215 05:12:33.061" level="INFO">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" endtime="20161215 05:12:33.061" starttime="20161215 05:12:33.060"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161215 05:12:33.062" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161215 05:12:33.062" starttime="20161215 05:12:33.061"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161215 05:12:33.063" starttime="20161215 05:12:33.062"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161215 05:12:33.067" level="INFO">${msg} = URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161215 05:12:33.067" starttime="20161215 05:12:33.066"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161215 05:12:33.068" level="INFO">URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161215 05:12:33.068" starttime="20161215 05:12:33.068"></status>
</kw>
<status status="PASS" endtime="20161215 05:12:33.068" starttime="20161215 05:12:33.067"></status>
</kw>
<status status="PASS" endtime="20161215 05:12:33.068" starttime="20161215 05:12:33.066"></status>
</kw>
<status status="PASS" endtime="20161215 05:12:33.068" starttime="20161215 05:12:33.063"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161215 05:12:33.069" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161215 05:12:33.069" starttime="20161215 05:12:33.069"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161215 05:12:33.070" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161215 05:12:33.070" starttime="20161215 05:12:33.070"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161215 05:12:33.070" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161215 05:12:33.070" starttime="20161215 05:12:33.070"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161215 05:12:33.071" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161215 05:12:33.071" starttime="20161215 05:12:33.071"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161215 05:13:13.718" level="FAIL">ConnectTimeout: HTTPSConnectionPool(host='9.3.23.30', port=443): Max retries exceeded with url: /login (Caused by ConnectTimeoutError(&lt;requests.packages.urllib3.connection.VerifiedHTTPSConnection object at 0x3fff7bf1a910&gt;, 'Connection to 9.3.23.30 timed out. (connect timeout=10.0)'))</msg>
<status status="FAIL" endtime="20161215 05:13:13.718" starttime="20161215 05:12:33.071"></status>
</kw>
<status status="FAIL" endtime="20161215 05:13:13.718" starttime="20161215 05:12:33.068"></status>
</kw>
<status status="FAIL" endtime="20161215 05:13:13.719" starttime="20161215 05:12:33.059"></status>
</kw>
<status status="FAIL" endtime="20161215 05:13:13.719" starttime="20161215 05:12:33.057"></status>
</kw>
<status status="FAIL" endtime="20161215 05:13:13.719" starttime="20161215 05:12:33.054"></status>
</kw>
<status status="FAIL" endtime="20161215 05:13:13.719" starttime="20161215 05:12:33.053"></status>
</kw>
<kw name="Verify BMC State" library="utils">
<doc>Get the BMC state and verify if the current</doc>
<arguments>
<arg>BMC_READY</arg>
</arguments>
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${current}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg timestamp="20161215 05:13:23.723" level="INFO">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161215 05:13:23.723" starttime="20161215 05:13:23.722"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20161215 05:13:23.724" level="INFO">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161215 05:13:23.724" starttime="20161215 05:13:23.723"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161215 05:13:23.726" level="INFO">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" endtime="20161215 05:13:23.726" starttime="20161215 05:13:23.725"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161215 05:13:23.728" level="INFO">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" endtime="20161215 05:13:23.728" starttime="20161215 05:13:23.727"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161215 05:13:23.728" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161215 05:13:23.728" starttime="20161215 05:13:23.728"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161215 05:13:23.729" starttime="20161215 05:13:23.729"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161215 05:13:23.735" level="INFO">${msg} = URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161215 05:13:23.735" starttime="20161215 05:13:23.734"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161215 05:13:23.736" level="INFO">URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161215 05:13:23.736" starttime="20161215 05:13:23.735"></status>
</kw>
<status status="PASS" endtime="20161215 05:13:23.736" starttime="20161215 05:13:23.735"></status>
</kw>
<status status="PASS" endtime="20161215 05:13:23.736" starttime="20161215 05:13:23.734"></status>
</kw>
<status status="PASS" endtime="20161215 05:13:23.736" starttime="20161215 05:13:23.730"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161215 05:13:23.737" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161215 05:13:23.737" starttime="20161215 05:13:23.737"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161215 05:13:23.738" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161215 05:13:23.738" starttime="20161215 05:13:23.737"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161215 05:13:23.738" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161215 05:13:23.738" starttime="20161215 05:13:23.738"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161215 05:13:23.739" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161215 05:13:23.739" starttime="20161215 05:13:23.739"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161215 05:14:04.394" level="FAIL">ConnectionError: HTTPSConnectionPool(host='9.3.23.30', port=443): Max retries exceeded with url: /login (Caused by ReadTimeoutError("HTTPSConnectionPool(host='9.3.23.30', port=443): Read timed out. (read timeout=10.0)",))</msg>
<status status="FAIL" endtime="20161215 05:14:04.394" starttime="20161215 05:13:23.739"></status>
</kw>
<status status="FAIL" endtime="20161215 05:14:04.394" starttime="20161215 05:13:23.736"></status>
</kw>
<status status="FAIL" endtime="20161215 05:14:04.395" starttime="20161215 05:13:23.726"></status>
</kw>
<status status="FAIL" endtime="20161215 05:14:04.395" starttime="20161215 05:13:23.724"></status>
</kw>
<status status="FAIL" endtime="20161215 05:14:04.395" starttime="20161215 05:13:23.721"></status>
</kw>
<status status="FAIL" endtime="20161215 05:14:04.395" starttime="20161215 05:13:23.720"></status>
</kw>
<kw name="Verify BMC State" library="utils">
<doc>Get the BMC state and verify if the current</doc>
<arguments>
<arg>BMC_READY</arg>
</arguments>
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${current}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg timestamp="20161215 05:14:14.398" level="INFO">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161215 05:14:14.398" starttime="20161215 05:14:14.398"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20161215 05:14:14.399" level="INFO">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161215 05:14:14.399" starttime="20161215 05:14:14.399"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161215 05:14:14.401" level="INFO">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" endtime="20161215 05:14:14.401" starttime="20161215 05:14:14.401"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161215 05:14:14.403" level="INFO">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" endtime="20161215 05:14:14.403" starttime="20161215 05:14:14.403"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161215 05:14:14.404" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161215 05:14:14.404" starttime="20161215 05:14:14.404"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161215 05:14:14.405" starttime="20161215 05:14:14.405"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161215 05:14:14.413" level="INFO">${msg} = URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161215 05:14:14.413" starttime="20161215 05:14:14.411"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161215 05:14:14.414" level="INFO">URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161215 05:14:14.414" starttime="20161215 05:14:14.414"></status>
</kw>
<status status="PASS" endtime="20161215 05:14:14.414" starttime="20161215 05:14:14.413"></status>
</kw>
<status status="PASS" endtime="20161215 05:14:14.414" starttime="20161215 05:14:14.410"></status>
</kw>
<status status="PASS" endtime="20161215 05:14:14.415" starttime="20161215 05:14:14.405"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161215 05:14:14.415" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161215 05:14:14.416" starttime="20161215 05:14:14.415"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161215 05:14:14.417" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161215 05:14:14.417" starttime="20161215 05:14:14.416"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161215 05:14:14.417" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161215 05:14:14.417" starttime="20161215 05:14:14.417"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161215 05:14:14.418" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161215 05:14:14.418" starttime="20161215 05:14:14.418"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161215 05:14:46.539" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161215 05:14:46.539" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161215 05:14:46.540" starttime="20161215 05:14:14.418"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161215 05:14:46.541" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161215 05:14:46.541" starttime="20161215 05:14:46.540"></status>
</kw>
<status status="PASS" endtime="20161215 05:14:46.541" starttime="20161215 05:14:14.415"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161215 05:14:50.088" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161215 05:14:50.088" level="INFO">${ret} = &lt;Response [503]&gt;</msg>
<status status="PASS" endtime="20161215 05:14:50.088" starttime="20161215 05:14:46.542"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161215 05:14:50.095" level="INFO">${msg} = Response code:503, Content:{
  "data": {
    "description": "org.freedesktop.DBus.Error.ObjectPathInUse: busy processing bus traffic"
  }, 
  "message": "503 Service Unavailable", 
  "status": "error"...</msg>
<status status="PASS" endtime="20161215 05:14:50.095" starttime="20161215 05:14:50.094"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161215 05:14:50.096" level="INFO">Response code:503, Content:{
  "data": {
    "description": "org.freedesktop.DBus.Error.ObjectPathInUse: busy processing bus traffic"
  }, 
  "message": "503 Service Unavailable", 
  "status": "error"
}</msg>
<status status="PASS" endtime="20161215 05:14:50.096" starttime="20161215 05:14:50.095"></status>
</kw>
<status status="PASS" endtime="20161215 05:14:50.096" starttime="20161215 05:14:50.095"></status>
</kw>
<status status="PASS" endtime="20161215 05:14:50.097" starttime="20161215 05:14:50.093"></status>
</kw>
<status status="PASS" endtime="20161215 05:14:50.097" starttime="20161215 05:14:50.089"></status>
</kw>
<msg timestamp="20161215 05:14:50.097" level="INFO">${resp} = &lt;Response [503]&gt;</msg>
<status status="PASS" endtime="20161215 05:14:50.097" starttime="20161215 05:14:14.401"></status>
</kw>
<msg timestamp="20161215 05:14:50.097" level="INFO">${resp} = &lt;Response [503]&gt;</msg>
<status status="PASS" endtime="20161215 05:14:50.097" starttime="20161215 05:14:14.399"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161215 05:14:50.098" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20161215 05:14:50.098" level="FAIL">503 != 200</msg>
<status status="FAIL" endtime="20161215 05:14:50.100" starttime="20161215 05:14:50.098"></status>
</kw>
<status status="FAIL" endtime="20161215 05:14:50.100" starttime="20161215 05:14:14.397"></status>
</kw>
<status status="FAIL" endtime="20161215 05:14:50.100" starttime="20161215 05:14:14.396"></status>
</kw>
<kw name="Verify BMC State" library="utils">
<doc>Get the BMC state and verify if the current</doc>
<arguments>
<arg>BMC_READY</arg>
</arguments>
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${current}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg timestamp="20161215 05:15:00.103" level="INFO">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161215 05:15:00.104" starttime="20161215 05:15:00.103"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20161215 05:15:00.105" level="INFO">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161215 05:15:00.105" starttime="20161215 05:15:00.104"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161215 05:15:00.106" level="INFO">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" endtime="20161215 05:15:00.107" starttime="20161215 05:15:00.106"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161215 05:15:00.109" level="INFO">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" endtime="20161215 05:15:00.109" starttime="20161215 05:15:00.108"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161215 05:15:00.109" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161215 05:15:00.110" starttime="20161215 05:15:00.109"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161215 05:15:00.110" starttime="20161215 05:15:00.110"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161215 05:15:00.119" level="INFO">${msg} = URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161215 05:15:00.119" starttime="20161215 05:15:00.118"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161215 05:15:00.120" level="INFO">URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161215 05:15:00.120" starttime="20161215 05:15:00.120"></status>
</kw>
<status status="PASS" endtime="20161215 05:15:00.120" starttime="20161215 05:15:00.119"></status>
</kw>
<status status="PASS" endtime="20161215 05:15:00.120" starttime="20161215 05:15:00.116"></status>
</kw>
<status status="PASS" endtime="20161215 05:15:00.120" starttime="20161215 05:15:00.111"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161215 05:15:00.121" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161215 05:15:00.122" starttime="20161215 05:15:00.121"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161215 05:15:00.122" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161215 05:15:00.122" starttime="20161215 05:15:00.122"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161215 05:15:00.123" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161215 05:15:00.123" starttime="20161215 05:15:00.122"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161215 05:15:00.123" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161215 05:15:00.123" starttime="20161215 05:15:00.123"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161215 05:15:01.208" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161215 05:15:01.209" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161215 05:15:01.209" starttime="20161215 05:15:00.124"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161215 05:15:01.210" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161215 05:15:01.210" starttime="20161215 05:15:01.209"></status>
</kw>
<status status="PASS" endtime="20161215 05:15:01.210" starttime="20161215 05:15:00.121"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161215 05:15:03.392" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161215 05:15:03.392" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161215 05:15:03.392" starttime="20161215 05:15:01.210"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161215 05:15:03.399" level="INFO">${msg} = Response code:200, Content:{
  "data": "BMC_READY", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161215 05:15:03.399" starttime="20161215 05:15:03.398"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161215 05:15:03.400" level="INFO">Response code:200, Content:{
  "data": "BMC_READY", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161215 05:15:03.400" starttime="20161215 05:15:03.400"></status>
</kw>
<status status="PASS" endtime="20161215 05:15:03.400" starttime="20161215 05:15:03.399"></status>
</kw>
<status status="PASS" endtime="20161215 05:15:03.401" starttime="20161215 05:15:03.397"></status>
</kw>
<status status="PASS" endtime="20161215 05:15:03.401" starttime="20161215 05:15:03.393"></status>
</kw>
<msg timestamp="20161215 05:15:03.401" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161215 05:15:03.401" starttime="20161215 05:15:00.107"></status>
</kw>
<msg timestamp="20161215 05:15:03.403" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161215 05:15:03.403" starttime="20161215 05:15:00.105"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161215 05:15:03.404" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161215 05:15:03.404" starttime="20161215 05:15:03.403"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20161215 05:15:03.405" level="INFO">To JSON using : content={
  "data": "BMC_READY", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20161215 05:15:03.405" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20161215 05:15:03.405" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'BMC_READY'}</msg>
<status status="PASS" endtime="20161215 05:15:03.405" starttime="20161215 05:15:03.405"></status>
</kw>
<msg timestamp="20161215 05:15:03.406" level="INFO">${current} = BMC_READY</msg>
<status status="PASS" endtime="20161215 05:15:03.406" starttime="20161215 05:15:00.102"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${expected}</arg>
<arg>${current}</arg>
</arguments>
<status status="PASS" endtime="20161215 05:15:03.407" starttime="20161215 05:15:03.407"></status>
</kw>
<status status="PASS" endtime="20161215 05:15:03.407" starttime="20161215 05:15:00.101"></status>
</kw>
<status status="PASS" endtime="20161215 05:15:03.407" starttime="20161215 05:08:12.865"></status>
</kw>
<doc>BMC code update process initiation</doc>
<status status="PASS" endtime="20161215 05:15:03.409" critical="yes" starttime="20161215 04:53:40.683"></status>
</test>
<test id="s1-t2" name="Test BMC CPU Mem Performance at Ready State">
<kw name="Check BMC CPU Performance" library="utils">
<doc>Minimal 10% of proc should be free in 3 sample</doc>
<kw type="for" name="${var} IN RANGE [ 1 | 4 ]">
<kw type="foritem" name="${var} = 1">
<kw name="BMC CPU Performance Check" library="utils">
<doc>Minimal 10% of proc should be free in this instance</doc>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${bmc_cpu_usage_cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_cpu_usage_output}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20161215 05:15:03.414" level="INFO">Executing command 'top -n 1 | grep CPU: | cut -c 7-9'.</msg>
<msg timestamp="20161215 05:15:03.415" level="FAIL">SSHException: SSH session not active</msg>
<status status="FAIL" endtime="20161215 05:15:03.415" starttime="20161215 05:15:03.413"></status>
</kw>
<status status="FAIL" endtime="20161215 05:15:03.415" starttime="20161215 05:15:03.412"></status>
</kw>
<status status="FAIL" endtime="20161215 05:15:03.415" starttime="20161215 05:15:03.412"></status>
</kw>
<status status="FAIL" endtime="20161215 05:15:03.415" starttime="20161215 05:15:03.411"></status>
</kw>
<status status="FAIL" endtime="20161215 05:15:03.415" starttime="20161215 05:15:03.411"></status>
</kw>
<status status="FAIL" endtime="20161215 05:15:03.416" critical="yes" starttime="20161215 05:15:03.410">SSHException: SSH session not active</status>
</test>
<doc>Trigger code update to a target BMC.
Execution Method :
python -m robot -v OPENBMC_HOST:&lt;hostname&gt;
-v FILE_PATH:&lt;path/*all.tar&gt; update_bmc.robot

Code update method BMC using REST
Update work flow sequence:
- User input BMC File existence check
- Ping Test and REST authentication
- Set Host Power host setting Policy to RESTORE_LAST_STATE
On reboot this policy would ensure the BMC comes
online and stays at HOST_POWERED_OFF state.
- Issue poweroff
- Prepare for Update
- Wait for BMC to come online clean
- Wait for BMC_READY state
- Apply preserve BMC Network setting
- SCP image to BMC
- Activate the flash image
- Warm Reset BMC to activate code
- Wait for BMC to come online time out 30 minutes
- Version check post update</doc>
<status status="FAIL" endtime="20161215 05:15:03.417" starttime="20161215 04:53:40.317"></status>
</suite>
<statistics>
<total>
<stat fail="1" pass="1">Critical Tests</stat>
<stat fail="1" pass="1">All Tests</stat>
</total>
<tag>
</tag>
<suite>
<stat fail="1" id="s1" name="Update Bmc" pass="1">Update Bmc</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
