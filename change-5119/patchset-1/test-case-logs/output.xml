<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 3.0.2 (Python 2.7.12 on linux2)" generated="20170706 17:12:08.862">
<suite id="s1" source="/tmp/fspcibld/13340/obmc-robot/tests" name="Tests">
<kw name="System Driver Data" type="setup">
<doc>System driver information.</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170706 17:12:09.490" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status endtime="20170706 17:12:09.490" status="FAIL" starttime="20170706 17:12:09.489"></status>
</kw>
<msg timestamp="20170706 17:12:09.490" level="INFO">${has_host} = False</msg>
<status endtime="20170706 17:12:09.490" status="PASS" starttime="20170706 17:12:09.489"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status endtime="20170706 17:12:09.491" status="PASS" starttime="20170706 17:12:09.491"></status>
</kw>
<status endtime="20170706 17:12:09.491" status="PASS" starttime="20170706 17:12:09.490"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg timestamp="20170706 17:12:09.492" level="INFO">${port_num} = 22</msg>
<status endtime="20170706 17:12:09.492" status="PASS" starttime="20170706 17:12:09.492"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg timestamp="20170706 17:12:09.493" level="INFO">${SSH_PORT} = 22</msg>
<status endtime="20170706 17:12:09.493" status="PASS" starttime="20170706 17:12:09.493"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg timestamp="20170706 17:12:09.493" level="INFO">${https_num} = 443</msg>
<status endtime="20170706 17:12:09.493" status="PASS" starttime="20170706 17:12:09.493"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg timestamp="20170706 17:12:09.494" level="INFO">${AUTH_URI} = https://9.3.21.61:443</msg>
<status endtime="20170706 17:12:09.494" status="PASS" starttime="20170706 17:12:09.494"></status>
</kw>
<status endtime="20170706 17:12:09.494" status="PASS" starttime="20170706 17:12:09.492"></status>
</kw>
<status endtime="20170706 17:12:09.494" status="PASS" starttime="20170706 17:12:09.491"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170706 17:12:09.495" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status endtime="20170706 17:12:09.495" status="FAIL" starttime="20170706 17:12:09.495"></status>
</kw>
<msg timestamp="20170706 17:12:09.496" level="INFO">${has_port} = False</msg>
<status endtime="20170706 17:12:09.496" status="PASS" starttime="20170706 17:12:09.495"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status endtime="20170706 17:12:09.498" status="PASS" starttime="20170706 17:12:09.497"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status endtime="20170706 17:12:09.498" status="PASS" starttime="20170706 17:12:09.498"></status>
</kw>
<status endtime="20170706 17:12:09.498" status="PASS" starttime="20170706 17:12:09.497"></status>
</kw>
<status endtime="20170706 17:12:09.498" status="PASS" starttime="20170706 17:12:09.496"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170706 17:12:09.499" level="INFO">Logging into '9.3.21.61:22' as 'root'.</msg>
<msg timestamp="20170706 17:12:11.315" level="INFO">Read output: root@witherspoon:~#</msg>
<status endtime="20170706 17:12:11.316" status="PASS" starttime="20170706 17:12:09.499"></status>
</kw>
<status endtime="20170706 17:12:11.316" status="PASS" starttime="20170706 17:12:09.488"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log BMC Driver Details</arg>
</arguments>
<kw name="Log BMC Driver Details">
<doc>Get BMC driver details and log.</doc>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${DRIVER_CMD}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${output}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170706 17:12:11.318" level="INFO">Executing command 'cat /etc/os-release | grep ^VERSION_ID='.</msg>
<msg timestamp="20170706 17:12:11.415" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170706 17:12:11.416" level="INFO">${output} = VERSION_ID="v1.99.7-82-g5ab2ef8"</msg>
<msg timestamp="20170706 17:12:11.416" level="INFO">${stderr} = </msg>
<status endtime="20170706 17:12:11.416" status="PASS" starttime="20170706 17:12:11.317"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170706 17:12:11.416" level="INFO">Length is 0</msg>
<status endtime="20170706 17:12:11.417" status="PASS" starttime="20170706 17:12:11.416"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20170706 17:12:11.417" level="INFO">VERSION_ID="v1.99.7-82-g5ab2ef8"</msg>
<status endtime="20170706 17:12:11.417" status="PASS" starttime="20170706 17:12:11.417"></status>
</kw>
<status endtime="20170706 17:12:11.417" status="PASS" starttime="20170706 17:12:11.317"></status>
</kw>
<status endtime="20170706 17:12:11.417" status="PASS" starttime="20170706 17:12:11.316"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log PNOR Driver Details</arg>
</arguments>
<kw name="Log PNOR Driver Details">
<doc>Get PNOR driver details and log.</doc>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>${PNOR_CMD}</arg>
</arguments>
<assign>
<var>${pnor_details}</var>
</assign>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170706 17:12:11.419" level="INFO">Executing command '/usr/sbin/pflash -r /tmp/out.txt -P VERSION; cat /tmp/out.txt'.</msg>
<msg timestamp="20170706 17:12:11.557" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170706 17:12:11.557" level="INFO">${stdout} = Reading to "/tmp/out.txt" from 0x02820000..0x02821000 !
[                                                  ] 0%[==================================================] 100%
IBM-witherspoon-ibm-OP9_v1.17...</msg>
<msg timestamp="20170706 17:12:11.557" level="INFO">${stderr} = </msg>
<status endtime="20170706 17:12:11.557" status="PASS" starttime="20170706 17:12:11.418"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170706 17:12:11.557" level="INFO">Length is 0</msg>
<status endtime="20170706 17:12:11.557" status="PASS" starttime="20170706 17:12:11.557"></status>
</kw>
<msg timestamp="20170706 17:12:11.558" level="INFO">${pnor_details} = Reading to "/tmp/out.txt" from 0x02820000..0x02821000 !
[                                                  ] 0%[==================================================] 100%
IBM-witherspoon-ibm-OP9_v1.17...</msg>
<status endtime="20170706 17:12:11.558" status="PASS" starttime="20170706 17:12:11.418"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>PNOR_INFO=${pnor_details}</arg>
</arguments>
<msg timestamp="20170706 17:12:11.558" level="INFO">PNOR_INFO=Reading to "/tmp/out.txt" from 0x02820000..0x02821000 !
[                                                  ] 0%[==================================================] 100%
IBM-witherspoon-ibm-OP9_v1.17_1.46
	op-build-v1.17-101-g1c57f18-dirty
	buildroot-2017.02.2-7-g23118ce
	skiboot-5.6.0-158-ga1e0a047b2a0
	hostboot-0ffbb55
	linux-4.11.6-openpower1-p57dd16e
	petitboot-v1.4.3-pfac92ff
	machine-xml-5b59a1d
	occ-1dc97a6
	hostboot-binaries-711147e
	capp-ucode-9c73e9f
	sbe-0df81aa
</msg>
<status endtime="20170706 17:12:11.559" status="PASS" starttime="20170706 17:12:11.558"></status>
</kw>
<status endtime="20170706 17:12:11.559" status="PASS" starttime="20170706 17:12:11.418"></status>
</kw>
<status endtime="20170706 17:12:11.559" status="PASS" starttime="20170706 17:12:11.417"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log BMC Model</arg>
</arguments>
<kw name="Log BMC Model">
<doc>Fetch BMC Model name from system and log.</doc>
<kw name="Get BMC System Model" library="utils">
<doc>Get the BMC model from the device tree.</doc>
<assign>
<var>${bmc_model}</var>
</assign>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170706 17:12:11.562" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status endtime="20170706 17:12:11.562" status="FAIL" starttime="20170706 17:12:11.561"></status>
</kw>
<msg timestamp="20170706 17:12:11.562" level="INFO">${has_host} = False</msg>
<status endtime="20170706 17:12:11.562" status="PASS" starttime="20170706 17:12:11.561"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status endtime="20170706 17:12:11.563" status="PASS" starttime="20170706 17:12:11.563"></status>
</kw>
<status endtime="20170706 17:12:11.563" status="PASS" starttime="20170706 17:12:11.562"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg timestamp="20170706 17:12:11.564" level="INFO">${port_num} = 22</msg>
<status endtime="20170706 17:12:11.564" status="PASS" starttime="20170706 17:12:11.564"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg timestamp="20170706 17:12:11.565" level="INFO">${SSH_PORT} = 22</msg>
<status endtime="20170706 17:12:11.565" status="PASS" starttime="20170706 17:12:11.565"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg timestamp="20170706 17:12:11.565" level="INFO">${https_num} = 443</msg>
<status endtime="20170706 17:12:11.565" status="PASS" starttime="20170706 17:12:11.565"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg timestamp="20170706 17:12:11.566" level="INFO">${AUTH_URI} = https://9.3.21.61:443</msg>
<status endtime="20170706 17:12:11.566" status="PASS" starttime="20170706 17:12:11.566"></status>
</kw>
<status endtime="20170706 17:12:11.567" status="PASS" starttime="20170706 17:12:11.564"></status>
</kw>
<status endtime="20170706 17:12:11.567" status="PASS" starttime="20170706 17:12:11.563"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170706 17:12:11.568" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status endtime="20170706 17:12:11.568" status="FAIL" starttime="20170706 17:12:11.567"></status>
</kw>
<msg timestamp="20170706 17:12:11.568" level="INFO">${has_port} = False</msg>
<status endtime="20170706 17:12:11.568" status="PASS" starttime="20170706 17:12:11.567"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status endtime="20170706 17:12:11.569" status="PASS" starttime="20170706 17:12:11.569"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status endtime="20170706 17:12:11.570" status="PASS" starttime="20170706 17:12:11.570"></status>
</kw>
<status endtime="20170706 17:12:11.570" status="PASS" starttime="20170706 17:12:11.569"></status>
</kw>
<status endtime="20170706 17:12:11.570" status="PASS" starttime="20170706 17:12:11.568"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170706 17:12:11.570" level="INFO">Logging into '9.3.21.61:22' as 'root'.</msg>
<msg timestamp="20170706 17:12:13.281" level="INFO">Read output: root@witherspoon:~#</msg>
<status endtime="20170706 17:12:13.281" status="PASS" starttime="20170706 17:12:11.570"></status>
</kw>
<status endtime="20170706 17:12:13.281" status="PASS" starttime="20170706 17:12:11.560"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170706 17:12:13.282" level="INFO">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg timestamp="20170706 17:12:13.359" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170706 17:12:13.360" level="INFO">${bmc_model} = Witherspoon</msg>
<msg timestamp="20170706 17:12:13.360" level="INFO">${stderr} = </msg>
<status endtime="20170706 17:12:13.360" status="PASS" starttime="20170706 17:12:13.281"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170706 17:12:13.360" level="INFO">Length is 0</msg>
<status endtime="20170706 17:12:13.360" status="PASS" starttime="20170706 17:12:13.360"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg timestamp="20170706 17:12:13.361" level="INFO">Length is 11</msg>
<status endtime="20170706 17:12:13.361" status="PASS" starttime="20170706 17:12:13.360"></status>
</kw>
<msg timestamp="20170706 17:12:13.361" level="INFO">${bmc_model} = Witherspoon</msg>
<status endtime="20170706 17:12:13.361" status="PASS" starttime="20170706 17:12:11.560"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>BMC Model=${bmc_model}</arg>
</arguments>
<msg timestamp="20170706 17:12:13.361" level="INFO">BMC Model=Witherspoon</msg>
<status endtime="20170706 17:12:13.361" status="PASS" starttime="20170706 17:12:13.361"></status>
</kw>
<status endtime="20170706 17:12:13.362" status="PASS" starttime="20170706 17:12:11.560"></status>
</kw>
<status endtime="20170706 17:12:13.362" status="PASS" starttime="20170706 17:12:11.560"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Enable Core Dump On BMC</arg>
</arguments>
<kw name="Enable Core Dump On BMC" library="utils">
<doc>Enable core dump collection.</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170706 17:12:13.364" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status endtime="20170706 17:12:13.364" status="FAIL" starttime="20170706 17:12:13.363"></status>
</kw>
<msg timestamp="20170706 17:12:13.364" level="INFO">${has_host} = False</msg>
<status endtime="20170706 17:12:13.364" status="PASS" starttime="20170706 17:12:13.363"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status endtime="20170706 17:12:13.365" status="PASS" starttime="20170706 17:12:13.365"></status>
</kw>
<status endtime="20170706 17:12:13.365" status="PASS" starttime="20170706 17:12:13.364"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg timestamp="20170706 17:12:13.367" level="INFO">${port_num} = 22</msg>
<status endtime="20170706 17:12:13.367" status="PASS" starttime="20170706 17:12:13.366"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg timestamp="20170706 17:12:13.367" level="INFO">${SSH_PORT} = 22</msg>
<status endtime="20170706 17:12:13.367" status="PASS" starttime="20170706 17:12:13.367"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg timestamp="20170706 17:12:13.368" level="INFO">${https_num} = 443</msg>
<status endtime="20170706 17:12:13.368" status="PASS" starttime="20170706 17:12:13.368"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg timestamp="20170706 17:12:13.369" level="INFO">${AUTH_URI} = https://9.3.21.61:443</msg>
<status endtime="20170706 17:12:13.369" status="PASS" starttime="20170706 17:12:13.368"></status>
</kw>
<status endtime="20170706 17:12:13.369" status="PASS" starttime="20170706 17:12:13.366"></status>
</kw>
<status endtime="20170706 17:12:13.369" status="PASS" starttime="20170706 17:12:13.365"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170706 17:12:13.370" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status endtime="20170706 17:12:13.370" status="FAIL" starttime="20170706 17:12:13.369"></status>
</kw>
<msg timestamp="20170706 17:12:13.370" level="INFO">${has_port} = False</msg>
<status endtime="20170706 17:12:13.370" status="PASS" starttime="20170706 17:12:13.369"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status endtime="20170706 17:12:13.371" status="PASS" starttime="20170706 17:12:13.371"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status endtime="20170706 17:12:13.372" status="PASS" starttime="20170706 17:12:13.372"></status>
</kw>
<status endtime="20170706 17:12:13.372" status="PASS" starttime="20170706 17:12:13.371"></status>
</kw>
<status endtime="20170706 17:12:13.372" status="PASS" starttime="20170706 17:12:13.370"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170706 17:12:13.373" level="INFO">Logging into '9.3.21.61:22' as 'root'.</msg>
<msg timestamp="20170706 17:12:15.183" level="INFO">Read output: root@witherspoon:~#</msg>
<status endtime="20170706 17:12:15.183" status="PASS" starttime="20170706 17:12:13.372"></status>
</kw>
<status endtime="20170706 17:12:15.183" status="PASS" starttime="20170706 17:12:13.362"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>echo '/tmp/core_%e.%p' | tee /proc/sys/kernel/core_pattern</arg>
</arguments>
<assign>
<var>${core_pattern}</var>
</assign>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170706 17:12:15.184" level="INFO">Executing command 'echo '/tmp/core_%e.%p' | tee /proc/sys/kernel/core_pattern'.</msg>
<msg timestamp="20170706 17:12:15.261" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170706 17:12:15.261" level="INFO">${stdout} = /tmp/core_%e.%p</msg>
<msg timestamp="20170706 17:12:15.261" level="INFO">${stderr} = </msg>
<status endtime="20170706 17:12:15.261" status="PASS" starttime="20170706 17:12:15.184"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170706 17:12:15.262" level="INFO">Length is 0</msg>
<status endtime="20170706 17:12:15.262" status="PASS" starttime="20170706 17:12:15.262"></status>
</kw>
<msg timestamp="20170706 17:12:15.262" level="INFO">${core_pattern} = /tmp/core_%e.%p</msg>
<status endtime="20170706 17:12:15.262" status="PASS" starttime="20170706 17:12:15.183"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${core_pattern}</arg>
<arg>/tmp/core_%e.%p</arg>
</arguments>
<status endtime="20170706 17:12:15.263" status="PASS" starttime="20170706 17:12:15.263"></status>
</kw>
<status endtime="20170706 17:12:15.263" status="PASS" starttime="20170706 17:12:13.362"></status>
</kw>
<status endtime="20170706 17:12:15.263" status="PASS" starttime="20170706 17:12:13.362"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${DEBUG_TARBALL_PATH}' != '${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Install Debug Tarball On BMC</arg>
<arg>${DEBUG_TARBALL_PATH}</arg>
</arguments>
<status endtime="20170706 17:12:15.264" status="PASS" starttime="20170706 17:12:15.264"></status>
</kw>
<status endtime="20170706 17:12:15.264" status="PASS" starttime="20170706 17:12:09.488"></status>
</kw>
<suite id="s1-s1" source="/tmp/fspcibld/13340/obmc-robot/tests/security" name="Security">
<suite id="s1-s1-s1" source="/tmp/fspcibld/13340/obmc-robot/tests/security/test_ssl.robot" name="Test Ssl">
<test id="s1-s1-s1-t1" name="Test SSL Connection">
<kw name="Initialize OpenBMC" library="rest_client">
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170706 17:12:15.347" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=20, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170706 17:12:15.348" status="PASS" starttime="20170706 17:12:15.347"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170706 17:12:15.348" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170706 17:12:15.349" status="PASS" starttime="20170706 17:12:15.348"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170706 17:12:15.349" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170706 17:12:15.349" status="PASS" starttime="20170706 17:12:15.349"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170706 17:12:15.350" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170706 17:12:15.350" status="PASS" starttime="20170706 17:12:15.349"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170706 17:12:15.545" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170706 17:12:15.545" status="PASS" starttime="20170706 17:12:15.350"></status>
</kw>
<msg timestamp="20170706 17:12:15.545" level="INFO">${status} = PASS</msg>
<msg timestamp="20170706 17:12:15.545" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170706 17:12:15.545" status="PASS" starttime="20170706 17:12:15.350"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170706 17:12:15.546" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170706 17:12:15.546" status="PASS" starttime="20170706 17:12:15.545"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170706 17:12:15.546" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170706 17:12:15.547" status="PASS" starttime="20170706 17:12:15.546"></status>
</kw>
<status endtime="20170706 17:12:15.547" status="PASS" starttime="20170706 17:12:15.346"></status>
</kw>
<status endtime="20170706 17:12:15.547" status="PASS" starttime="20170706 17:12:15.346"></status>
</kw>
<status endtime="20170706 17:12:15.547" status="PASS" starttime="20170706 17:12:15.345"></status>
</kw>
<kw name="FFDC On Test Case Fail" type="teardown" library="openbmc_ffdc">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw name="Is Host Quiesced" library="state_manager">
<doc>Check if host state is quiesced.</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170706 17:12:15.551" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170706 17:12:15.552" status="PASS" starttime="20170706 17:12:15.551"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170706 17:12:15.552" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170706 17:12:15.553" status="PASS" starttime="20170706 17:12:15.552"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170706 17:12:15.553" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170706 17:12:15.553" status="PASS" starttime="20170706 17:12:15.553"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170706 17:12:15.554" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170706 17:12:15.554" status="PASS" starttime="20170706 17:12:15.553"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170706 17:12:15.802" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170706 17:12:15.802" status="PASS" starttime="20170706 17:12:15.554"></status>
</kw>
<msg timestamp="20170706 17:12:15.802" level="INFO">${status} = PASS</msg>
<msg timestamp="20170706 17:12:15.803" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170706 17:12:15.803" status="PASS" starttime="20170706 17:12:15.554"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170706 17:12:15.803" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170706 17:12:15.803" status="PASS" starttime="20170706 17:12:15.803"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170706 17:12:15.804" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170706 17:12:15.804" status="PASS" starttime="20170706 17:12:15.804"></status>
</kw>
<status endtime="20170706 17:12:15.804" status="PASS" starttime="20170706 17:12:15.550"></status>
</kw>
<status endtime="20170706 17:12:15.804" status="PASS" starttime="20170706 17:12:15.550"></status>
</kw>
<status endtime="20170706 17:12:15.804" status="PASS" starttime="20170706 17:12:15.550"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170706 17:12:15.805" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170706 17:12:15.805" status="PASS" starttime="20170706 17:12:15.805"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170706 17:12:15.807" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170706 17:12:15.807" status="PASS" starttime="20170706 17:12:15.806"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170706 17:12:15.808" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170706 17:12:15.808" status="PASS" starttime="20170706 17:12:15.808"></status>
</kw>
<status endtime="20170706 17:12:15.808" status="PASS" starttime="20170706 17:12:15.807"></status>
</kw>
<status endtime="20170706 17:12:15.808" status="PASS" starttime="20170706 17:12:15.806"></status>
</kw>
<status endtime="20170706 17:12:15.808" status="PASS" starttime="20170706 17:12:15.805"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170706 17:12:15.937" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170706 17:12:15.937" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170706 17:12:15.937" status="PASS" starttime="20170706 17:12:15.809"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170706 17:12:15.939" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170706 17:12:15.939" status="PASS" starttime="20170706 17:12:15.938"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170706 17:12:15.940" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170706 17:12:15.940" status="PASS" starttime="20170706 17:12:15.939"></status>
</kw>
<status endtime="20170706 17:12:15.940" status="PASS" starttime="20170706 17:12:15.939"></status>
</kw>
<status endtime="20170706 17:12:15.940" status="PASS" starttime="20170706 17:12:15.937"></status>
</kw>
<status endtime="20170706 17:12:15.940" status="PASS" starttime="20170706 17:12:15.937"></status>
</kw>
<msg timestamp="20170706 17:12:15.940" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170706 17:12:15.940" status="PASS" starttime="20170706 17:12:15.549"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170706 17:12:15.941" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170706 17:12:15.941" status="PASS" starttime="20170706 17:12:15.941"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170706 17:12:15.942" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170706 17:12:15.942" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170706 17:12:15.942" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170706 17:12:15.942" status="PASS" starttime="20170706 17:12:15.941"></status>
</kw>
<msg timestamp="20170706 17:12:15.942" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170706 17:12:15.942" status="PASS" starttime="20170706 17:12:15.548"></status>
</kw>
<msg timestamp="20170706 17:12:15.942" level="INFO">${host_state} = Running</msg>
<status endtime="20170706 17:12:15.942" status="PASS" starttime="20170706 17:12:15.548"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<msg timestamp="20170706 17:12:15.943" level="FAIL">Running != Quiesced</msg>
<status endtime="20170706 17:12:15.944" status="FAIL" starttime="20170706 17:12:15.943"></status>
</kw>
<msg timestamp="20170706 17:12:15.944" level="INFO">${status} = False</msg>
<status endtime="20170706 17:12:15.944" status="PASS" starttime="20170706 17:12:15.943"></status>
</kw>
<msg timestamp="20170706 17:12:15.944" level="INFO">${status} = False</msg>
<status endtime="20170706 17:12:15.944" status="PASS" starttime="20170706 17:12:15.548"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL' or '${status}'=='True'</arg>
<arg>FFDC</arg>
</arguments>
<status endtime="20170706 17:12:15.945" status="PASS" starttime="20170706 17:12:15.944"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}'=='True'</arg>
<arg>Recover Quiesced Host</arg>
</arguments>
<status endtime="20170706 17:12:15.945" status="PASS" starttime="20170706 17:12:15.945"></status>
</kw>
<kw name="Log Test Case Status" library="openbmc_ffdc_methods">
<doc>Test case execution result history.</doc>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH_STYLE}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH_STYLE}</var>
</assign>
<msg timestamp="20170706 17:12:15.953" level="INFO">${FFDC_DIR_PATH_STYLE} = </msg>
<status endtime="20170706 17:12:15.953" status="PASS" starttime="20170706 17:12:15.946"></status>
</kw>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH}</var>
</assign>
<msg timestamp="20170706 17:12:15.962" level="INFO">${FFDC_DIR_PATH} = </msg>
<status endtime="20170706 17:12:15.962" status="PASS" starttime="20170706 17:12:15.954"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH}' == '${EMPTY}'</arg>
<arg>Set FFDC Defaults</arg>
</arguments>
<kw name="Set Ffdc Defaults" library="openbmc_ffdc">
<doc>Set a default value for ffdc_dir_path and ffdc_prefix if they don't</doc>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170706 17:12:15.963" level="INFO">${cur_time} = 2017-07-06 17:12:15:963269</msg>
<status endtime="20170706 17:12:15.964" status="PASS" starttime="20170706 17:12:15.963"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170706 17:12:15.964" level="INFO">${cur_time} = 20170706171215963269</msg>
<status endtime="20170706 17:12:15.964" status="PASS" starttime="20170706 17:12:15.964"></status>
</kw>
<status endtime="20170706 17:12:15.964" status="PASS" starttime="20170706 17:12:15.963"></status>
</kw>
<msg timestamp="20170706 17:12:15.970" level="INFO">${FFDC_TIME} = 20170706171215963269</msg>
<kw name="Get Test Dir and Name" library="openbmc_ffdc_utils">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20170706 17:12:15.971" level="INFO">${suite_name} = TestsSecurityTestSsl</msg>
<status endtime="20170706 17:12:15.971" status="PASS" starttime="20170706 17:12:15.970"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20170706 17:12:15.971" level="INFO">${suite_name} = 20170706171215963269_TestsSecurityTestSsl</msg>
<status endtime="20170706 17:12:15.971" status="PASS" starttime="20170706 17:12:15.971"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20170706 17:12:15.972" level="INFO">${test_name} = TestSSLConnection</msg>
<status endtime="20170706 17:12:15.972" status="PASS" starttime="20170706 17:12:15.972"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20170706 17:12:15.972" level="INFO">${test_name} = 20170706171215963269_TestSSLConnection</msg>
<status endtime="20170706 17:12:15.973" status="PASS" starttime="20170706 17:12:15.972"></status>
</kw>
<status endtime="20170706 17:12:15.973" status="PASS" starttime="20170706 17:12:15.970"></status>
</kw>
<msg timestamp="20170706 17:12:15.973" level="INFO">${FFDC_DIR_PATH} = /tmp/fspcibld/13340/obmc-robot/logs/20170706171215963269_TestsSecurityTestSsl/20170706171215963269_TestSSLConnection/</msg>
<msg timestamp="20170706 17:12:15.977" level="INFO">${FFDC_PREFIX} = 20170706171215963269_</msg>
<status endtime="20170706 17:12:15.977" status="PASS" starttime="20170706 17:12:15.962"></status>
</kw>
<status endtime="20170706 17:12:15.977" status="PASS" starttime="20170706 17:12:15.962"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH_STYLE}' == '${1}'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${FFDC_LOG_PATH}</arg>
<arg>${FFDC_DIR_PATH}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${TEST_HISTORY}</arg>
<arg>${FFDC_DIR_PATH}test_history.txt</arg>
</arguments>
<status endtime="20170706 17:12:15.978" status="PASS" starttime="20170706 17:12:15.978"></status>
</kw>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg timestamp="20170706 17:12:15.979" level="INFO" html="yes">Created directory '&lt;a href="file:///tmp/fspcibld/13340/obmc-robot/logs"&gt;/tmp/fspcibld/13340/obmc-robot/logs&lt;/a&gt;'.</msg>
<status endtime="20170706 17:12:15.979" status="PASS" starttime="20170706 17:12:15.978"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg timestamp="20170706 17:12:15.980" level="FAIL">File '/tmp/fspcibld/13340/obmc-robot/logs/test_history.txt' does not exist.</msg>
<status endtime="20170706 17:12:15.980" status="FAIL" starttime="20170706 17:12:15.979"></status>
</kw>
<msg timestamp="20170706 17:12:15.980" level="INFO">${exist} = False</msg>
<status endtime="20170706 17:12:15.980" status="PASS" starttime="20170706 17:12:15.979"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg timestamp="20170706 17:12:15.981" level="INFO" html="yes">Created file '&lt;a href="file:///tmp/fspcibld/13340/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/13340/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status endtime="20170706 17:12:15.981" status="PASS" starttime="20170706 17:12:15.981"></status>
</kw>
<status endtime="20170706 17:12:15.981" status="PASS" starttime="20170706 17:12:15.980"></status>
</kw>
<kw name="Rpvars" library="gen_robot_print">
<arguments>
<arg>TEST_HISTORY</arg>
</arguments>
<status endtime="20170706 17:12:15.982" status="PASS" starttime="20170706 17:12:15.982"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170706 17:12:15.983" level="INFO">${cur_time} = 2017-07-06 17:12:15:982709</msg>
<status endtime="20170706 17:12:15.983" status="PASS" starttime="20170706 17:12:15.983"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170706 17:12:15.983" level="INFO">${cur_time} = 20170706171215982709</msg>
<status endtime="20170706 17:12:15.983" status="PASS" starttime="20170706 17:12:15.983"></status>
</kw>
<msg timestamp="20170706 17:12:15.984" level="INFO">${cur_time} = 20170706171215982709</msg>
<status endtime="20170706 17:12:15.984" status="PASS" starttime="20170706 17:12:15.982"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg timestamp="20170706 17:12:15.984" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/13340/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/13340/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status endtime="20170706 17:12:15.985" status="PASS" starttime="20170706 17:12:15.984"></status>
</kw>
<status endtime="20170706 17:12:15.985" status="PASS" starttime="20170706 17:12:15.945"></status>
</kw>
<status endtime="20170706 17:12:15.985" status="PASS" starttime="20170706 17:12:15.547"></status>
</kw>
<doc>This testcase is for testing the SSL connection to the
OpenBMC machine.</doc>
<tags>
<tag>Test_SSL_Connection</tag>
</tags>
<status critical="yes" endtime="20170706 17:12:15.985" status="PASS" starttime="20170706 17:12:15.345"></status>
</test>
<kw name="Delete All Sessions" type="teardown" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170706 17:12:15.986" level="INFO">Delete All Sessions</msg>
<status endtime="20170706 17:12:15.986" status="PASS" starttime="20170706 17:12:15.986"></status>
</kw>
<doc>This testsuite is for testing SSL connection to OpenBMC</doc>
<status endtime="20170706 17:12:15.986" status="PASS" starttime="20170706 17:12:15.267"></status>
</suite>
<status endtime="20170706 17:12:15.987" status="PASS" starttime="20170706 17:12:15.265"></status>
</suite>
<suite id="s1-s2" source="/tmp/fspcibld/13340/obmc-robot/tests/test_basic_poweron.robot" name="Test Basic Poweron">
<test id="s1-s2-t1" name="Power On Test">
<kw name="Start SOL Console Logging" type="setup" library="utils">
<doc>Start system console log to file.</doc>
<kw name="Create OS Console File Path" library="utils">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg timestamp="20170706 17:12:16.022" level="INFO">${default_file_path} = /tmp/9.3.21.61_os_console</msg>
<status endtime="20170706 17:12:16.022" status="PASS" starttime="20170706 17:12:16.022"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg timestamp="20170706 17:12:16.023" level="INFO">${log_file_path} = /tmp/9.3.21.61_os_console</msg>
<status endtime="20170706 17:12:16.023" status="PASS" starttime="20170706 17:12:16.022"></status>
</kw>
<msg timestamp="20170706 17:12:16.023" level="INFO">${log_file_path} = /tmp/9.3.21.61_os_console</msg>
<status endtime="20170706 17:12:16.023" status="PASS" starttime="20170706 17:12:16.021"></status>
</kw>
<kw name="Stop SOL Console Logging" library="utils">
<doc>Stop system console logging and return log output.</doc>
<arguments>
<arg>${log_file_path}</arg>
<arg>return_data=${return_data}</arg>
</arguments>
<assign>
<var>${log_output}</var>
</assign>
<kw name="Create OS Console File Path" library="utils">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg timestamp="20170706 17:12:16.025" level="INFO">${default_file_path} = /tmp/9.3.21.61_os_console</msg>
<status endtime="20170706 17:12:16.025" status="PASS" starttime="20170706 17:12:16.025"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg timestamp="20170706 17:12:16.026" level="INFO">${log_file_path} = /tmp/9.3.21.61_os_console</msg>
<status endtime="20170706 17:12:16.026" status="PASS" starttime="20170706 17:12:16.025"></status>
</kw>
<msg timestamp="20170706 17:12:16.026" level="INFO">${log_file_path} = /tmp/9.3.21.61_os_console</msg>
<status endtime="20170706 17:12:16.026" status="PASS" starttime="20170706 17:12:16.024"></status>
</kw>
<kw name="Create OS Console Command String" library="utils">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${search_string}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170706 17:12:16.027" level="INFO">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status endtime="20170706 17:12:16.027" status="PASS" starttime="20170706 17:12:16.027"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170706 17:12:16.027" status="PASS" starttime="20170706 17:12:16.027"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170706 17:12:16.032" level="INFO">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg timestamp="20170706 17:12:16.034" level="INFO">${rc} = 0</msg>
<msg timestamp="20170706 17:12:16.034" level="INFO">${output} = /tmp/fspcibld/13340/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status endtime="20170706 17:12:16.034" status="PASS" starttime="20170706 17:12:16.028"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status endtime="20170706 17:12:16.037" status="PASS" starttime="20170706 17:12:16.036"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${output}\n</arg>
</arguments>
<status endtime="20170706 17:12:16.038" status="PASS" starttime="20170706 17:12:16.037"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>ssh_pw ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>-o "StrictHostKeyChecking no" ${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170706 17:12:16.039" level="INFO">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.21.61</msg>
<status endtime="20170706 17:12:16.039" status="PASS" starttime="20170706 17:12:16.038"></status>
</kw>
<msg timestamp="20170706 17:12:16.039" level="INFO">${search_string} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.21.61</msg>
<status endtime="20170706 17:12:16.039" status="PASS" starttime="20170706 17:12:16.026"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>echo $(ps -ef | egrep '${search_string}'</arg>
<arg>| egrep -v grep | cut -c10-14)</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170706 17:12:16.040" level="INFO">${cmd_buf} = echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.21.61' | egrep -v grep | cut -c10-14)</msg>
<status endtime="20170706 17:12:16.040" status="PASS" starttime="20170706 17:12:16.039"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170706 17:12:16.040" status="PASS" starttime="20170706 17:12:16.040"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${os_con_pid}</var>
</assign>
<msg timestamp="20170706 17:12:16.043" level="INFO">Running command 'echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.21.61' | egrep -v grep | cut -c10-14) 2&gt;&amp;1'.</msg>
<msg timestamp="20170706 17:12:16.055" level="INFO">${rc} = 0</msg>
<msg timestamp="20170706 17:12:16.055" level="INFO">${os_con_pid} = </msg>
<status endtime="20170706 17:12:16.056" status="PASS" starttime="20170706 17:12:16.040"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>os_con_pid</arg>
</arguments>
<status endtime="20170706 17:12:16.060" status="PASS" starttime="20170706 17:12:16.059"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>kill -9 ${os_con_pid}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170706 17:12:16.061" level="INFO">${cmd_buf} = kill -9 </msg>
<status endtime="20170706 17:12:16.061" status="PASS" starttime="20170706 17:12:16.060"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpissuing</arg>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170706 17:12:16.062" status="PASS" starttime="20170706 17:12:16.062"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Run And Return Rc And Output</arg>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170706 17:12:16.063" level="INFO">${rc} = None</msg>
<msg timestamp="20170706 17:12:16.063" level="INFO">${output} = None</msg>
<status endtime="20170706 17:12:16.063" status="PASS" starttime="20170706 17:12:16.063"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpvars</arg>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status endtime="20170706 17:12:16.064" status="PASS" starttime="20170706 17:12:16.064"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${targ_file_path}' != '${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<msg timestamp="20170706 17:12:16.067" level="FAIL">Source file '/tmp/9.3.21.61_os_console' does not exist.</msg>
<status endtime="20170706 17:12:16.067" status="FAIL" starttime="20170706 17:12:16.066"></status>
</kw>
<status endtime="20170706 17:12:16.067" status="PASS" starttime="20170706 17:12:16.066"></status>
</kw>
<status endtime="20170706 17:12:16.067" status="PASS" starttime="20170706 17:12:16.065"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20170706 17:12:16.068" level="INFO">${output} = </msg>
<status endtime="20170706 17:12:16.068" status="PASS" starttime="20170706 17:12:16.068"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${debug}^1</arg>
</arguments>
<assign>
<var>${loc_quiet}</var>
</assign>
<msg timestamp="20170706 17:12:16.068" level="INFO">${loc_quiet} = 1</msg>
<status endtime="20170706 17:12:16.068" status="PASS" starttime="20170706 17:12:16.068"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return_data}' == '${1}'</arg>
<arg>Cmd Fnc</arg>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<kw name="Cmd Fnc" library="gen_cmd">
<doc>Run the given command in a shell and return the shell return code.</doc>
<arguments>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<status endtime="20170706 17:12:16.507" status="PASS" starttime="20170706 17:12:16.069"></status>
</kw>
<msg timestamp="20170706 17:12:16.508" level="INFO">${rc} = 1</msg>
<msg timestamp="20170706 17:12:16.508" level="INFO">${output} = cat: /tmp/9.3.21.61_os_console: No such file or directory
</msg>
<status endtime="20170706 17:12:16.508" status="PASS" starttime="20170706 17:12:16.069"></status>
</kw>
<msg timestamp="20170706 17:12:16.509" level="INFO">${log_output} = cat: /tmp/9.3.21.61_os_console: No such file or directory
</msg>
<status endtime="20170706 17:12:16.509" status="PASS" starttime="20170706 17:12:16.023"></status>
</kw>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<msg timestamp="20170706 17:12:16.511" level="INFO" html="yes">Created file '&lt;a href="file:///tmp/9.3.21.61_os_console"&gt;/tmp/9.3.21.61_os_console&lt;/a&gt;'.</msg>
<status endtime="20170706 17:12:16.511" status="PASS" starttime="20170706 17:12:16.510"></status>
</kw>
<kw name="Create OS Console Command String" library="utils">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${sub_cmd_buf}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170706 17:12:16.512" level="INFO">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status endtime="20170706 17:12:16.512" status="PASS" starttime="20170706 17:12:16.512"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170706 17:12:16.512" status="PASS" starttime="20170706 17:12:16.512"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170706 17:12:16.516" level="INFO">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg timestamp="20170706 17:12:16.519" level="INFO">${rc} = 0</msg>
<msg timestamp="20170706 17:12:16.519" level="INFO">${output} = /tmp/fspcibld/13340/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status endtime="20170706 17:12:16.519" status="PASS" starttime="20170706 17:12:16.513"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status endtime="20170706 17:12:16.524" status="PASS" starttime="20170706 17:12:16.524"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${output}\n</arg>
</arguments>
<status endtime="20170706 17:12:16.525" status="PASS" starttime="20170706 17:12:16.525"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>ssh_pw ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>-o "StrictHostKeyChecking no" ${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170706 17:12:16.526" level="INFO">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.21.61</msg>
<status endtime="20170706 17:12:16.526" status="PASS" starttime="20170706 17:12:16.526"></status>
</kw>
<msg timestamp="20170706 17:12:16.526" level="INFO">${sub_cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.21.61</msg>
<status endtime="20170706 17:12:16.527" status="PASS" starttime="20170706 17:12:16.511"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${sub_cmd_buf} &gt; ${log_file_path} 2&gt;&amp;1 &amp;</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170706 17:12:16.527" level="INFO">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.21.61 &gt; /tmp/9.3.21.61_os_console 2&gt;&amp;1 &amp;</msg>
<status endtime="20170706 17:12:16.527" status="PASS" starttime="20170706 17:12:16.527"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170706 17:12:16.528" status="PASS" starttime="20170706 17:12:16.527"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170706 17:12:16.531" level="INFO">Running command 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.21.61 &gt; /tmp/9.3.21.61_os_console 2&gt;&amp;1 &amp;'.</msg>
<msg timestamp="20170706 17:12:16.534" level="INFO">${rc} = 0</msg>
<msg timestamp="20170706 17:12:16.534" level="INFO">${output} = </msg>
<status endtime="20170706 17:12:16.534" status="PASS" starttime="20170706 17:12:16.528"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
</arguments>
<status endtime="20170706 17:12:16.538" status="PASS" starttime="20170706 17:12:16.537"></status>
</kw>
<status endtime="20170706 17:12:16.538" status="PASS" starttime="20170706 17:12:16.021"></status>
</kw>
<kw name="Repeat Keyword" library="BuiltIn">
<doc>Executes the specified keyword multiple times.</doc>
<arguments>
<arg>${LOOP_COUNT} times</arg>
<arg>Host Off And On</arg>
</arguments>
<msg timestamp="20170706 17:12:16.539" level="INFO">Repeating keyword, round 1/2.</msg>
<kw name="Host Off And On">
<doc>Verify power off and on.</doc>
<kw name="Initiate Host PowerOff" library="state_manager">
<doc>Initiate host power off.</doc>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${HOST_POWEROFF_TRANS}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20170706 17:12:16.543" level="INFO">${args} = {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}</msg>
<status endtime="20170706 17:12:16.543" status="PASS" starttime="20170706 17:12:16.541"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>RequestedHostTransition</arg>
<arg>data=${args}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170706 17:12:16.547" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0/</msg>
<status endtime="20170706 17:12:16.547" status="PASS" starttime="20170706 17:12:16.547"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170706 17:12:16.551" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170706 17:12:16.552" status="PASS" starttime="20170706 17:12:16.551"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170706 17:12:16.553" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170706 17:12:16.553" status="PASS" starttime="20170706 17:12:16.552"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170706 17:12:16.553" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170706 17:12:16.553" status="PASS" starttime="20170706 17:12:16.553"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170706 17:12:16.554" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170706 17:12:16.554" status="PASS" starttime="20170706 17:12:16.554"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170706 17:12:17.258" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170706 17:12:17.258" status="PASS" starttime="20170706 17:12:16.555"></status>
</kw>
<msg timestamp="20170706 17:12:17.258" level="INFO">${status} = PASS</msg>
<msg timestamp="20170706 17:12:17.258" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170706 17:12:17.258" status="PASS" starttime="20170706 17:12:16.554"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170706 17:12:17.259" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170706 17:12:17.259" status="PASS" starttime="20170706 17:12:17.259"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170706 17:12:17.260" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170706 17:12:17.260" status="PASS" starttime="20170706 17:12:17.259"></status>
</kw>
<status endtime="20170706 17:12:17.260" status="PASS" starttime="20170706 17:12:16.550"></status>
</kw>
<status endtime="20170706 17:12:17.260" status="PASS" starttime="20170706 17:12:16.549"></status>
</kw>
<status endtime="20170706 17:12:17.260" status="PASS" starttime="20170706 17:12:16.548"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170706 17:12:17.261" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/RequestedHostTransition</msg>
<status endtime="20170706 17:12:17.261" status="PASS" starttime="20170706 17:12:17.260"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170706 17:12:17.261" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170706 17:12:17.261" status="PASS" starttime="20170706 17:12:17.261"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20170706 17:12:17.262" status="PASS" starttime="20170706 17:12:17.262"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170706 17:12:17.263" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-T...</msg>
<status endtime="20170706 17:12:17.263" status="PASS" starttime="20170706 17:12:17.263"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170706 17:12:17.264" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20170706 17:12:17.264" status="PASS" starttime="20170706 17:12:17.264"></status>
</kw>
<status endtime="20170706 17:12:17.265" status="PASS" starttime="20170706 17:12:17.264"></status>
</kw>
<status endtime="20170706 17:12:17.265" status="PASS" starttime="20170706 17:12:17.262"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170706 17:12:17.703" level="INFO">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, data={"data": "xyz.openbmc_project.State.Host.Transition.Off"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg timestamp="20170706 17:12:17.703" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170706 17:12:17.703" status="PASS" starttime="20170706 17:12:17.265"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170706 17:12:17.707" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170706 17:12:17.707" status="PASS" starttime="20170706 17:12:17.704"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170706 17:12:17.708" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170706 17:12:17.709" status="PASS" starttime="20170706 17:12:17.708"></status>
</kw>
<status endtime="20170706 17:12:17.709" status="PASS" starttime="20170706 17:12:17.708"></status>
</kw>
<status endtime="20170706 17:12:17.709" status="PASS" starttime="20170706 17:12:17.704"></status>
</kw>
<msg timestamp="20170706 17:12:17.709" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170706 17:12:17.709" status="PASS" starttime="20170706 17:12:16.547"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170706 17:12:17.710" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170706 17:12:17.710" status="PASS" starttime="20170706 17:12:17.709"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20170706 17:12:17.710" level="INFO">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170706 17:12:17.710" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170706 17:12:17.710" level="INFO">${json} = {u'status': u'ok', u'message': u'200 OK', u'data': None}</msg>
<status endtime="20170706 17:12:17.710" status="PASS" starttime="20170706 17:12:17.710"></status>
</kw>
<status endtime="20170706 17:12:17.711" status="PASS" starttime="20170706 17:12:16.544"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${wait}' == '${0}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<status endtime="20170706 17:12:17.711" status="PASS" starttime="20170706 17:12:17.711"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>3 min</arg>
<arg>10 sec</arg>
<arg>Is Host Off</arg>
</arguments>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170706 17:12:17.716" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170706 17:12:17.716" status="PASS" starttime="20170706 17:12:17.715"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170706 17:12:17.717" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170706 17:12:17.717" status="PASS" starttime="20170706 17:12:17.716"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170706 17:12:17.717" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170706 17:12:17.717" status="PASS" starttime="20170706 17:12:17.717"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170706 17:12:17.718" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170706 17:12:17.718" status="PASS" starttime="20170706 17:12:17.717"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170706 17:12:18.660" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170706 17:12:18.660" status="PASS" starttime="20170706 17:12:17.719"></status>
</kw>
<msg timestamp="20170706 17:12:18.661" level="INFO">${status} = PASS</msg>
<msg timestamp="20170706 17:12:18.661" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170706 17:12:18.661" status="PASS" starttime="20170706 17:12:17.718"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170706 17:12:18.661" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170706 17:12:18.661" status="PASS" starttime="20170706 17:12:18.661"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170706 17:12:18.662" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170706 17:12:18.662" status="PASS" starttime="20170706 17:12:18.662"></status>
</kw>
<status endtime="20170706 17:12:18.662" status="PASS" starttime="20170706 17:12:17.715"></status>
</kw>
<status endtime="20170706 17:12:18.662" status="PASS" starttime="20170706 17:12:17.714"></status>
</kw>
<status endtime="20170706 17:12:18.663" status="PASS" starttime="20170706 17:12:17.714"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170706 17:12:18.663" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170706 17:12:18.663" status="PASS" starttime="20170706 17:12:18.663"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170706 17:12:18.665" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170706 17:12:18.665" status="PASS" starttime="20170706 17:12:18.665"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170706 17:12:18.666" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170706 17:12:18.666" status="PASS" starttime="20170706 17:12:18.666"></status>
</kw>
<status endtime="20170706 17:12:18.667" status="PASS" starttime="20170706 17:12:18.666"></status>
</kw>
<status endtime="20170706 17:12:18.667" status="PASS" starttime="20170706 17:12:18.664"></status>
</kw>
<status endtime="20170706 17:12:18.667" status="PASS" starttime="20170706 17:12:18.663"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170706 17:12:27.140" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170706 17:12:27.141" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170706 17:12:27.141" status="PASS" starttime="20170706 17:12:18.667"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170706 17:12:27.143" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170706 17:12:27.143" status="PASS" starttime="20170706 17:12:27.142"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170706 17:12:27.144" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170706 17:12:27.144" status="PASS" starttime="20170706 17:12:27.143"></status>
</kw>
<status endtime="20170706 17:12:27.144" status="PASS" starttime="20170706 17:12:27.143"></status>
</kw>
<status endtime="20170706 17:12:27.144" status="PASS" starttime="20170706 17:12:27.142"></status>
</kw>
<status endtime="20170706 17:12:27.144" status="PASS" starttime="20170706 17:12:27.141"></status>
</kw>
<msg timestamp="20170706 17:12:27.144" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170706 17:12:27.144" status="PASS" starttime="20170706 17:12:17.713"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170706 17:12:27.145" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170706 17:12:27.145" status="PASS" starttime="20170706 17:12:27.145"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170706 17:12:27.145" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170706 17:12:27.146" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170706 17:12:27.146" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170706 17:12:27.146" status="PASS" starttime="20170706 17:12:27.145"></status>
</kw>
<msg timestamp="20170706 17:12:27.146" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170706 17:12:27.146" status="PASS" starttime="20170706 17:12:17.712"></status>
</kw>
<msg timestamp="20170706 17:12:27.146" level="INFO">${host_state} = Running</msg>
<status endtime="20170706 17:12:27.146" status="PASS" starttime="20170706 17:12:17.712"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170706 17:12:27.147" level="FAIL">Off != Running</msg>
<status endtime="20170706 17:12:27.147" status="FAIL" starttime="20170706 17:12:27.147"></status>
</kw>
<status endtime="20170706 17:12:27.147" status="FAIL" starttime="20170706 17:12:17.712"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170706 17:12:37.152" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170706 17:12:37.152" status="PASS" starttime="20170706 17:12:37.152"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170706 17:12:37.153" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170706 17:12:37.153" status="PASS" starttime="20170706 17:12:37.153"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170706 17:12:37.154" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170706 17:12:37.154" status="PASS" starttime="20170706 17:12:37.153"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170706 17:12:37.154" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170706 17:12:37.154" status="PASS" starttime="20170706 17:12:37.154"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170706 17:12:37.351" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170706 17:12:37.351" status="PASS" starttime="20170706 17:12:37.155"></status>
</kw>
<msg timestamp="20170706 17:12:37.351" level="INFO">${status} = PASS</msg>
<msg timestamp="20170706 17:12:37.351" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170706 17:12:37.351" status="PASS" starttime="20170706 17:12:37.155"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170706 17:12:37.352" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170706 17:12:37.352" status="PASS" starttime="20170706 17:12:37.352"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170706 17:12:37.353" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170706 17:12:37.353" status="PASS" starttime="20170706 17:12:37.352"></status>
</kw>
<status endtime="20170706 17:12:37.353" status="PASS" starttime="20170706 17:12:37.151"></status>
</kw>
<status endtime="20170706 17:12:37.353" status="PASS" starttime="20170706 17:12:37.150"></status>
</kw>
<status endtime="20170706 17:12:37.353" status="PASS" starttime="20170706 17:12:37.150"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170706 17:12:37.353" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170706 17:12:37.354" status="PASS" starttime="20170706 17:12:37.353"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170706 17:12:37.356" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170706 17:12:37.356" status="PASS" starttime="20170706 17:12:37.355"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170706 17:12:37.357" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170706 17:12:37.357" status="PASS" starttime="20170706 17:12:37.357"></status>
</kw>
<status endtime="20170706 17:12:37.357" status="PASS" starttime="20170706 17:12:37.356"></status>
</kw>
<status endtime="20170706 17:12:37.357" status="PASS" starttime="20170706 17:12:37.354"></status>
</kw>
<status endtime="20170706 17:12:37.357" status="PASS" starttime="20170706 17:12:37.354"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170706 17:12:37.480" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170706 17:12:37.481" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170706 17:12:37.481" status="PASS" starttime="20170706 17:12:37.358"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170706 17:12:37.482" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170706 17:12:37.482" status="PASS" starttime="20170706 17:12:37.482"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170706 17:12:37.484" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170706 17:12:37.484" status="PASS" starttime="20170706 17:12:37.483"></status>
</kw>
<status endtime="20170706 17:12:37.484" status="PASS" starttime="20170706 17:12:37.483"></status>
</kw>
<status endtime="20170706 17:12:37.484" status="PASS" starttime="20170706 17:12:37.481"></status>
</kw>
<status endtime="20170706 17:12:37.484" status="PASS" starttime="20170706 17:12:37.481"></status>
</kw>
<msg timestamp="20170706 17:12:37.484" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170706 17:12:37.484" status="PASS" starttime="20170706 17:12:37.149"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170706 17:12:37.485" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170706 17:12:37.485" status="PASS" starttime="20170706 17:12:37.485"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170706 17:12:37.485" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170706 17:12:37.486" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170706 17:12:37.486" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170706 17:12:37.486" status="PASS" starttime="20170706 17:12:37.485"></status>
</kw>
<msg timestamp="20170706 17:12:37.486" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170706 17:12:37.486" status="PASS" starttime="20170706 17:12:37.149"></status>
</kw>
<msg timestamp="20170706 17:12:37.486" level="INFO">${host_state} = Running</msg>
<status endtime="20170706 17:12:37.486" status="PASS" starttime="20170706 17:12:37.148"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170706 17:12:37.487" level="FAIL">Off != Running</msg>
<status endtime="20170706 17:12:37.487" status="FAIL" starttime="20170706 17:12:37.487"></status>
</kw>
<status endtime="20170706 17:12:37.487" status="FAIL" starttime="20170706 17:12:37.148"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170706 17:12:47.492" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170706 17:12:47.492" status="PASS" starttime="20170706 17:12:47.491"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170706 17:12:47.493" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170706 17:12:47.493" status="PASS" starttime="20170706 17:12:47.492"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170706 17:12:47.493" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170706 17:12:47.493" status="PASS" starttime="20170706 17:12:47.493"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170706 17:12:47.494" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170706 17:12:47.494" status="PASS" starttime="20170706 17:12:47.494"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170706 17:12:47.687" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170706 17:12:47.687" status="PASS" starttime="20170706 17:12:47.495"></status>
</kw>
<msg timestamp="20170706 17:12:47.688" level="INFO">${status} = PASS</msg>
<msg timestamp="20170706 17:12:47.688" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170706 17:12:47.688" status="PASS" starttime="20170706 17:12:47.494"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170706 17:12:47.688" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170706 17:12:47.688" status="PASS" starttime="20170706 17:12:47.688"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170706 17:12:47.689" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170706 17:12:47.689" status="PASS" starttime="20170706 17:12:47.689"></status>
</kw>
<status endtime="20170706 17:12:47.689" status="PASS" starttime="20170706 17:12:47.491"></status>
</kw>
<status endtime="20170706 17:12:47.690" status="PASS" starttime="20170706 17:12:47.490"></status>
</kw>
<status endtime="20170706 17:12:47.690" status="PASS" starttime="20170706 17:12:47.490"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170706 17:12:47.690" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170706 17:12:47.690" status="PASS" starttime="20170706 17:12:47.690"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170706 17:12:47.692" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170706 17:12:47.692" status="PASS" starttime="20170706 17:12:47.692"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170706 17:12:47.693" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170706 17:12:47.693" status="PASS" starttime="20170706 17:12:47.693"></status>
</kw>
<status endtime="20170706 17:12:47.693" status="PASS" starttime="20170706 17:12:47.693"></status>
</kw>
<status endtime="20170706 17:12:47.694" status="PASS" starttime="20170706 17:12:47.691"></status>
</kw>
<status endtime="20170706 17:12:47.694" status="PASS" starttime="20170706 17:12:47.691"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170706 17:12:47.759" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170706 17:12:47.759" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170706 17:12:47.759" status="PASS" starttime="20170706 17:12:47.694"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170706 17:12:47.761" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170706 17:12:47.761" status="PASS" starttime="20170706 17:12:47.760"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170706 17:12:47.761" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170706 17:12:47.762" status="PASS" starttime="20170706 17:12:47.761"></status>
</kw>
<status endtime="20170706 17:12:47.762" status="PASS" starttime="20170706 17:12:47.761"></status>
</kw>
<status endtime="20170706 17:12:47.762" status="PASS" starttime="20170706 17:12:47.760"></status>
</kw>
<status endtime="20170706 17:12:47.762" status="PASS" starttime="20170706 17:12:47.759"></status>
</kw>
<msg timestamp="20170706 17:12:47.762" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170706 17:12:47.762" status="PASS" starttime="20170706 17:12:47.489"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170706 17:12:47.763" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170706 17:12:47.763" status="PASS" starttime="20170706 17:12:47.762"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170706 17:12:47.763" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170706 17:12:47.764" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170706 17:12:47.764" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170706 17:12:47.764" status="PASS" starttime="20170706 17:12:47.763"></status>
</kw>
<msg timestamp="20170706 17:12:47.764" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170706 17:12:47.764" status="PASS" starttime="20170706 17:12:47.489"></status>
</kw>
<msg timestamp="20170706 17:12:47.764" level="INFO">${host_state} = Running</msg>
<status endtime="20170706 17:12:47.764" status="PASS" starttime="20170706 17:12:47.488"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170706 17:12:47.765" level="FAIL">Off != Running</msg>
<status endtime="20170706 17:12:47.765" status="FAIL" starttime="20170706 17:12:47.765"></status>
</kw>
<status endtime="20170706 17:12:47.765" status="FAIL" starttime="20170706 17:12:47.488"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170706 17:12:57.770" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170706 17:12:57.771" status="PASS" starttime="20170706 17:12:57.770"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170706 17:12:57.771" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170706 17:12:57.771" status="PASS" starttime="20170706 17:12:57.771"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170706 17:12:57.772" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170706 17:12:57.772" status="PASS" starttime="20170706 17:12:57.772"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170706 17:12:57.773" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170706 17:12:57.773" status="PASS" starttime="20170706 17:12:57.772"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170706 17:12:57.966" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170706 17:12:57.966" status="PASS" starttime="20170706 17:12:57.773"></status>
</kw>
<msg timestamp="20170706 17:12:57.966" level="INFO">${status} = PASS</msg>
<msg timestamp="20170706 17:12:57.966" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170706 17:12:57.966" status="PASS" starttime="20170706 17:12:57.773"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170706 17:12:57.967" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170706 17:12:57.967" status="PASS" starttime="20170706 17:12:57.966"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170706 17:12:57.967" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170706 17:12:57.967" status="PASS" starttime="20170706 17:12:57.967"></status>
</kw>
<status endtime="20170706 17:12:57.968" status="PASS" starttime="20170706 17:12:57.769"></status>
</kw>
<status endtime="20170706 17:12:57.968" status="PASS" starttime="20170706 17:12:57.768"></status>
</kw>
<status endtime="20170706 17:12:57.968" status="PASS" starttime="20170706 17:12:57.768"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170706 17:12:57.968" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170706 17:12:57.969" status="PASS" starttime="20170706 17:12:57.968"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170706 17:12:57.971" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170706 17:12:57.971" status="PASS" starttime="20170706 17:12:57.970"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170706 17:12:57.971" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170706 17:12:57.972" status="PASS" starttime="20170706 17:12:57.971"></status>
</kw>
<status endtime="20170706 17:12:57.972" status="PASS" starttime="20170706 17:12:57.971"></status>
</kw>
<status endtime="20170706 17:12:57.972" status="PASS" starttime="20170706 17:12:57.969"></status>
</kw>
<status endtime="20170706 17:12:57.972" status="PASS" starttime="20170706 17:12:57.969"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170706 17:12:58.037" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170706 17:12:58.037" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170706 17:12:58.037" status="PASS" starttime="20170706 17:12:57.972"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170706 17:12:58.039" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170706 17:12:58.039" status="PASS" starttime="20170706 17:12:58.038"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170706 17:12:58.040" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170706 17:12:58.040" status="PASS" starttime="20170706 17:12:58.040"></status>
</kw>
<status endtime="20170706 17:12:58.040" status="PASS" starttime="20170706 17:12:58.039"></status>
</kw>
<status endtime="20170706 17:12:58.041" status="PASS" starttime="20170706 17:12:58.038"></status>
</kw>
<status endtime="20170706 17:12:58.041" status="PASS" starttime="20170706 17:12:58.037"></status>
</kw>
<msg timestamp="20170706 17:12:58.041" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170706 17:12:58.041" status="PASS" starttime="20170706 17:12:57.767"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170706 17:12:58.041" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170706 17:12:58.041" status="PASS" starttime="20170706 17:12:58.041"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170706 17:12:58.042" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170706 17:12:58.042" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170706 17:12:58.042" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170706 17:12:58.042" status="PASS" starttime="20170706 17:12:58.042"></status>
</kw>
<msg timestamp="20170706 17:12:58.042" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170706 17:12:58.043" status="PASS" starttime="20170706 17:12:57.767"></status>
</kw>
<msg timestamp="20170706 17:12:58.043" level="INFO">${host_state} = Running</msg>
<status endtime="20170706 17:12:58.043" status="PASS" starttime="20170706 17:12:57.766"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170706 17:12:58.043" level="FAIL">Off != Running</msg>
<status endtime="20170706 17:12:58.043" status="FAIL" starttime="20170706 17:12:58.043"></status>
</kw>
<status endtime="20170706 17:12:58.044" status="FAIL" starttime="20170706 17:12:57.766"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170706 17:13:08.049" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170706 17:13:08.049" status="PASS" starttime="20170706 17:13:08.048"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170706 17:13:08.050" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170706 17:13:08.050" status="PASS" starttime="20170706 17:13:08.049"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170706 17:13:08.050" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170706 17:13:08.050" status="PASS" starttime="20170706 17:13:08.050"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170706 17:13:08.051" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170706 17:13:08.051" status="PASS" starttime="20170706 17:13:08.051"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170706 17:13:08.244" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170706 17:13:08.244" status="PASS" starttime="20170706 17:13:08.052"></status>
</kw>
<msg timestamp="20170706 17:13:08.244" level="INFO">${status} = PASS</msg>
<msg timestamp="20170706 17:13:08.244" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170706 17:13:08.244" status="PASS" starttime="20170706 17:13:08.051"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170706 17:13:08.245" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170706 17:13:08.245" status="PASS" starttime="20170706 17:13:08.244"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170706 17:13:08.246" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170706 17:13:08.246" status="PASS" starttime="20170706 17:13:08.245"></status>
</kw>
<status endtime="20170706 17:13:08.246" status="PASS" starttime="20170706 17:13:08.048"></status>
</kw>
<status endtime="20170706 17:13:08.246" status="PASS" starttime="20170706 17:13:08.047"></status>
</kw>
<status endtime="20170706 17:13:08.246" status="PASS" starttime="20170706 17:13:08.047"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170706 17:13:08.247" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170706 17:13:08.247" status="PASS" starttime="20170706 17:13:08.247"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170706 17:13:08.249" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170706 17:13:08.249" status="PASS" starttime="20170706 17:13:08.248"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170706 17:13:08.250" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170706 17:13:08.250" status="PASS" starttime="20170706 17:13:08.250"></status>
</kw>
<status endtime="20170706 17:13:08.250" status="PASS" starttime="20170706 17:13:08.249"></status>
</kw>
<status endtime="20170706 17:13:08.250" status="PASS" starttime="20170706 17:13:08.248"></status>
</kw>
<status endtime="20170706 17:13:08.250" status="PASS" starttime="20170706 17:13:08.247"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170706 17:13:08.315" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170706 17:13:08.315" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170706 17:13:08.315" status="PASS" starttime="20170706 17:13:08.251"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170706 17:13:08.317" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170706 17:13:08.317" status="PASS" starttime="20170706 17:13:08.317"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170706 17:13:08.318" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170706 17:13:08.318" status="PASS" starttime="20170706 17:13:08.318"></status>
</kw>
<status endtime="20170706 17:13:08.318" status="PASS" starttime="20170706 17:13:08.317"></status>
</kw>
<status endtime="20170706 17:13:08.318" status="PASS" starttime="20170706 17:13:08.316"></status>
</kw>
<status endtime="20170706 17:13:08.318" status="PASS" starttime="20170706 17:13:08.316"></status>
</kw>
<msg timestamp="20170706 17:13:08.319" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170706 17:13:08.319" status="PASS" starttime="20170706 17:13:08.046"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170706 17:13:08.319" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170706 17:13:08.319" status="PASS" starttime="20170706 17:13:08.319"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170706 17:13:08.320" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170706 17:13:08.320" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170706 17:13:08.320" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170706 17:13:08.320" status="PASS" starttime="20170706 17:13:08.320"></status>
</kw>
<msg timestamp="20170706 17:13:08.320" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170706 17:13:08.320" status="PASS" starttime="20170706 17:13:08.045"></status>
</kw>
<msg timestamp="20170706 17:13:08.321" level="INFO">${host_state} = Running</msg>
<status endtime="20170706 17:13:08.321" status="PASS" starttime="20170706 17:13:08.045"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170706 17:13:08.321" level="FAIL">Off != Running</msg>
<status endtime="20170706 17:13:08.321" status="FAIL" starttime="20170706 17:13:08.321"></status>
</kw>
<status endtime="20170706 17:13:08.322" status="FAIL" starttime="20170706 17:13:08.044"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170706 17:13:18.327" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170706 17:13:18.327" status="PASS" starttime="20170706 17:13:18.327"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170706 17:13:18.328" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170706 17:13:18.328" status="PASS" starttime="20170706 17:13:18.328"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170706 17:13:18.329" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170706 17:13:18.329" status="PASS" starttime="20170706 17:13:18.328"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170706 17:13:18.329" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170706 17:13:18.329" status="PASS" starttime="20170706 17:13:18.329"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170706 17:13:18.523" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170706 17:13:18.524" status="PASS" starttime="20170706 17:13:18.330"></status>
</kw>
<msg timestamp="20170706 17:13:18.524" level="INFO">${status} = PASS</msg>
<msg timestamp="20170706 17:13:18.524" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170706 17:13:18.524" status="PASS" starttime="20170706 17:13:18.330"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170706 17:13:18.525" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170706 17:13:18.525" status="PASS" starttime="20170706 17:13:18.525"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170706 17:13:18.526" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170706 17:13:18.526" status="PASS" starttime="20170706 17:13:18.525"></status>
</kw>
<status endtime="20170706 17:13:18.526" status="PASS" starttime="20170706 17:13:18.326"></status>
</kw>
<status endtime="20170706 17:13:18.526" status="PASS" starttime="20170706 17:13:18.325"></status>
</kw>
<status endtime="20170706 17:13:18.526" status="PASS" starttime="20170706 17:13:18.324"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170706 17:13:18.527" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170706 17:13:18.527" status="PASS" starttime="20170706 17:13:18.527"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170706 17:13:18.530" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170706 17:13:18.530" status="PASS" starttime="20170706 17:13:18.529"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170706 17:13:18.531" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170706 17:13:18.531" status="PASS" starttime="20170706 17:13:18.530"></status>
</kw>
<status endtime="20170706 17:13:18.531" status="PASS" starttime="20170706 17:13:18.530"></status>
</kw>
<status endtime="20170706 17:13:18.531" status="PASS" starttime="20170706 17:13:18.528"></status>
</kw>
<status endtime="20170706 17:13:18.531" status="PASS" starttime="20170706 17:13:18.528"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170706 17:13:18.598" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170706 17:13:18.598" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170706 17:13:18.598" status="PASS" starttime="20170706 17:13:18.531"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170706 17:13:18.600" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170706 17:13:18.600" status="PASS" starttime="20170706 17:13:18.600"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170706 17:13:18.602" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170706 17:13:18.602" status="PASS" starttime="20170706 17:13:18.601"></status>
</kw>
<status endtime="20170706 17:13:18.602" status="PASS" starttime="20170706 17:13:18.601"></status>
</kw>
<status endtime="20170706 17:13:18.602" status="PASS" starttime="20170706 17:13:18.599"></status>
</kw>
<status endtime="20170706 17:13:18.602" status="PASS" starttime="20170706 17:13:18.599"></status>
</kw>
<msg timestamp="20170706 17:13:18.602" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170706 17:13:18.602" status="PASS" starttime="20170706 17:13:18.324"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170706 17:13:18.603" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170706 17:13:18.603" status="PASS" starttime="20170706 17:13:18.602"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170706 17:13:18.603" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170706 17:13:18.603" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170706 17:13:18.604" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170706 17:13:18.604" status="PASS" starttime="20170706 17:13:18.603"></status>
</kw>
<msg timestamp="20170706 17:13:18.604" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170706 17:13:18.604" status="PASS" starttime="20170706 17:13:18.323"></status>
</kw>
<msg timestamp="20170706 17:13:18.604" level="INFO">${host_state} = Running</msg>
<status endtime="20170706 17:13:18.604" status="PASS" starttime="20170706 17:13:18.323"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170706 17:13:18.605" level="FAIL">Off != Running</msg>
<status endtime="20170706 17:13:18.605" status="FAIL" starttime="20170706 17:13:18.604"></status>
</kw>
<status endtime="20170706 17:13:18.605" status="FAIL" starttime="20170706 17:13:18.322"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170706 17:13:28.610" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170706 17:13:28.610" status="PASS" starttime="20170706 17:13:28.610"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170706 17:13:28.611" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170706 17:13:28.611" status="PASS" starttime="20170706 17:13:28.611"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170706 17:13:28.611" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170706 17:13:28.612" status="PASS" starttime="20170706 17:13:28.611"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170706 17:13:28.612" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170706 17:13:28.612" status="PASS" starttime="20170706 17:13:28.612"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170706 17:13:28.798" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170706 17:13:28.798" status="PASS" starttime="20170706 17:13:28.613"></status>
</kw>
<msg timestamp="20170706 17:13:28.799" level="INFO">${status} = PASS</msg>
<msg timestamp="20170706 17:13:28.799" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170706 17:13:28.799" status="PASS" starttime="20170706 17:13:28.612"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170706 17:13:28.799" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170706 17:13:28.799" status="PASS" starttime="20170706 17:13:28.799"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170706 17:13:28.801" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170706 17:13:28.801" status="PASS" starttime="20170706 17:13:28.800"></status>
</kw>
<status endtime="20170706 17:13:28.801" status="PASS" starttime="20170706 17:13:28.609"></status>
</kw>
<status endtime="20170706 17:13:28.801" status="PASS" starttime="20170706 17:13:28.609"></status>
</kw>
<status endtime="20170706 17:13:28.801" status="PASS" starttime="20170706 17:13:28.608"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170706 17:13:28.802" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170706 17:13:28.802" status="PASS" starttime="20170706 17:13:28.801"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170706 17:13:28.804" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170706 17:13:28.804" status="PASS" starttime="20170706 17:13:28.803"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170706 17:13:28.804" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170706 17:13:28.805" status="PASS" starttime="20170706 17:13:28.804"></status>
</kw>
<status endtime="20170706 17:13:28.805" status="PASS" starttime="20170706 17:13:28.804"></status>
</kw>
<status endtime="20170706 17:13:28.805" status="PASS" starttime="20170706 17:13:28.802"></status>
</kw>
<status endtime="20170706 17:13:28.805" status="PASS" starttime="20170706 17:13:28.802"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170706 17:13:28.870" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170706 17:13:28.870" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170706 17:13:28.870" status="PASS" starttime="20170706 17:13:28.805"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170706 17:13:28.872" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170706 17:13:28.872" status="PASS" starttime="20170706 17:13:28.872"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170706 17:13:28.873" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170706 17:13:28.873" status="PASS" starttime="20170706 17:13:28.873"></status>
</kw>
<status endtime="20170706 17:13:28.873" status="PASS" starttime="20170706 17:13:28.872"></status>
</kw>
<status endtime="20170706 17:13:28.873" status="PASS" starttime="20170706 17:13:28.871"></status>
</kw>
<status endtime="20170706 17:13:28.873" status="PASS" starttime="20170706 17:13:28.871"></status>
</kw>
<msg timestamp="20170706 17:13:28.874" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170706 17:13:28.874" status="PASS" starttime="20170706 17:13:28.607"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170706 17:13:28.874" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170706 17:13:28.874" status="PASS" starttime="20170706 17:13:28.874"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170706 17:13:28.875" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170706 17:13:28.875" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170706 17:13:28.875" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170706 17:13:28.875" status="PASS" starttime="20170706 17:13:28.875"></status>
</kw>
<msg timestamp="20170706 17:13:28.875" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170706 17:13:28.875" status="PASS" starttime="20170706 17:13:28.607"></status>
</kw>
<msg timestamp="20170706 17:13:28.876" level="INFO">${host_state} = Running</msg>
<status endtime="20170706 17:13:28.876" status="PASS" starttime="20170706 17:13:28.606"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170706 17:13:28.876" level="FAIL">Off != Running</msg>
<status endtime="20170706 17:13:28.876" status="FAIL" starttime="20170706 17:13:28.876"></status>
</kw>
<status endtime="20170706 17:13:28.877" status="FAIL" starttime="20170706 17:13:28.606"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170706 17:13:38.882" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170706 17:13:38.883" status="PASS" starttime="20170706 17:13:38.882"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170706 17:13:38.883" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170706 17:13:38.883" status="PASS" starttime="20170706 17:13:38.883"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170706 17:13:38.884" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170706 17:13:38.884" status="PASS" starttime="20170706 17:13:38.884"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170706 17:13:38.885" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170706 17:13:38.885" status="PASS" starttime="20170706 17:13:38.884"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170706 17:13:39.068" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170706 17:13:39.068" status="PASS" starttime="20170706 17:13:38.885"></status>
</kw>
<msg timestamp="20170706 17:13:39.068" level="INFO">${status} = PASS</msg>
<msg timestamp="20170706 17:13:39.068" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170706 17:13:39.068" status="PASS" starttime="20170706 17:13:38.885"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170706 17:13:39.069" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170706 17:13:39.069" status="PASS" starttime="20170706 17:13:39.069"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170706 17:13:39.070" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170706 17:13:39.070" status="PASS" starttime="20170706 17:13:39.069"></status>
</kw>
<status endtime="20170706 17:13:39.070" status="PASS" starttime="20170706 17:13:38.881"></status>
</kw>
<status endtime="20170706 17:13:39.070" status="PASS" starttime="20170706 17:13:38.881"></status>
</kw>
<status endtime="20170706 17:13:39.070" status="PASS" starttime="20170706 17:13:38.880"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170706 17:13:39.071" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170706 17:13:39.071" status="PASS" starttime="20170706 17:13:39.070"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170706 17:13:39.073" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170706 17:13:39.073" status="PASS" starttime="20170706 17:13:39.072"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170706 17:13:39.074" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170706 17:13:39.074" status="PASS" starttime="20170706 17:13:39.073"></status>
</kw>
<status endtime="20170706 17:13:39.074" status="PASS" starttime="20170706 17:13:39.073"></status>
</kw>
<status endtime="20170706 17:13:39.074" status="PASS" starttime="20170706 17:13:39.071"></status>
</kw>
<status endtime="20170706 17:13:39.074" status="PASS" starttime="20170706 17:13:39.071"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170706 17:13:39.139" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170706 17:13:39.140" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170706 17:13:39.140" status="PASS" starttime="20170706 17:13:39.074"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170706 17:13:39.141" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170706 17:13:39.141" status="PASS" starttime="20170706 17:13:39.141"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170706 17:13:39.145" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170706 17:13:39.145" status="PASS" starttime="20170706 17:13:39.142"></status>
</kw>
<status endtime="20170706 17:13:39.145" status="PASS" starttime="20170706 17:13:39.142"></status>
</kw>
<status endtime="20170706 17:13:39.145" status="PASS" starttime="20170706 17:13:39.140"></status>
</kw>
<status endtime="20170706 17:13:39.145" status="PASS" starttime="20170706 17:13:39.140"></status>
</kw>
<msg timestamp="20170706 17:13:39.145" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170706 17:13:39.145" status="PASS" starttime="20170706 17:13:38.879"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170706 17:13:39.146" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170706 17:13:39.146" status="PASS" starttime="20170706 17:13:39.146"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170706 17:13:39.147" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170706 17:13:39.147" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170706 17:13:39.147" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170706 17:13:39.147" status="PASS" starttime="20170706 17:13:39.146"></status>
</kw>
<msg timestamp="20170706 17:13:39.147" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170706 17:13:39.147" status="PASS" starttime="20170706 17:13:38.878"></status>
</kw>
<msg timestamp="20170706 17:13:39.148" level="INFO">${host_state} = Running</msg>
<status endtime="20170706 17:13:39.148" status="PASS" starttime="20170706 17:13:38.878"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170706 17:13:39.149" level="FAIL">Off != Running</msg>
<status endtime="20170706 17:13:39.149" status="FAIL" starttime="20170706 17:13:39.148"></status>
</kw>
<status endtime="20170706 17:13:39.149" status="FAIL" starttime="20170706 17:13:38.877"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170706 17:13:49.153" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170706 17:13:49.154" status="PASS" starttime="20170706 17:13:49.153"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170706 17:13:49.154" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170706 17:13:49.154" status="PASS" starttime="20170706 17:13:49.154"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170706 17:13:49.155" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170706 17:13:49.155" status="PASS" starttime="20170706 17:13:49.155"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170706 17:13:49.156" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170706 17:13:49.156" status="PASS" starttime="20170706 17:13:49.155"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170706 17:13:49.337" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170706 17:13:49.337" status="PASS" starttime="20170706 17:13:49.156"></status>
</kw>
<msg timestamp="20170706 17:13:49.338" level="INFO">${status} = PASS</msg>
<msg timestamp="20170706 17:13:49.338" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170706 17:13:49.338" status="PASS" starttime="20170706 17:13:49.156"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170706 17:13:49.338" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170706 17:13:49.339" status="PASS" starttime="20170706 17:13:49.338"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170706 17:13:49.339" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170706 17:13:49.339" status="PASS" starttime="20170706 17:13:49.339"></status>
</kw>
<status endtime="20170706 17:13:49.339" status="PASS" starttime="20170706 17:13:49.153"></status>
</kw>
<status endtime="20170706 17:13:49.339" status="PASS" starttime="20170706 17:13:49.152"></status>
</kw>
<status endtime="20170706 17:13:49.340" status="PASS" starttime="20170706 17:13:49.151"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170706 17:13:49.340" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170706 17:13:49.340" status="PASS" starttime="20170706 17:13:49.340"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170706 17:13:49.342" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170706 17:13:49.342" status="PASS" starttime="20170706 17:13:49.342"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170706 17:13:49.343" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170706 17:13:49.343" status="PASS" starttime="20170706 17:13:49.343"></status>
</kw>
<status endtime="20170706 17:13:49.344" status="PASS" starttime="20170706 17:13:49.343"></status>
</kw>
<status endtime="20170706 17:13:49.344" status="PASS" starttime="20170706 17:13:49.341"></status>
</kw>
<status endtime="20170706 17:13:49.344" status="PASS" starttime="20170706 17:13:49.340"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170706 17:13:49.410" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170706 17:13:49.410" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170706 17:13:49.410" status="PASS" starttime="20170706 17:13:49.344"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170706 17:13:49.412" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170706 17:13:49.412" status="PASS" starttime="20170706 17:13:49.411"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170706 17:13:49.413" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170706 17:13:49.413" status="PASS" starttime="20170706 17:13:49.413"></status>
</kw>
<status endtime="20170706 17:13:49.413" status="PASS" starttime="20170706 17:13:49.412"></status>
</kw>
<status endtime="20170706 17:13:49.413" status="PASS" starttime="20170706 17:13:49.411"></status>
</kw>
<status endtime="20170706 17:13:49.413" status="PASS" starttime="20170706 17:13:49.411"></status>
</kw>
<msg timestamp="20170706 17:13:49.413" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170706 17:13:49.414" status="PASS" starttime="20170706 17:13:49.151"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170706 17:13:49.414" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170706 17:13:49.414" status="PASS" starttime="20170706 17:13:49.414"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170706 17:13:49.415" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170706 17:13:49.415" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170706 17:13:49.415" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170706 17:13:49.415" status="PASS" starttime="20170706 17:13:49.414"></status>
</kw>
<msg timestamp="20170706 17:13:49.415" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170706 17:13:49.415" status="PASS" starttime="20170706 17:13:49.150"></status>
</kw>
<msg timestamp="20170706 17:13:49.415" level="INFO">${host_state} = Running</msg>
<status endtime="20170706 17:13:49.415" status="PASS" starttime="20170706 17:13:49.150"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170706 17:13:49.416" level="FAIL">Off != Running</msg>
<status endtime="20170706 17:13:49.416" status="FAIL" starttime="20170706 17:13:49.416"></status>
</kw>
<status endtime="20170706 17:13:49.416" status="FAIL" starttime="20170706 17:13:49.149"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170706 17:13:59.421" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170706 17:13:59.422" status="PASS" starttime="20170706 17:13:59.421"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170706 17:13:59.422" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170706 17:13:59.422" status="PASS" starttime="20170706 17:13:59.422"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170706 17:13:59.423" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170706 17:13:59.423" status="PASS" starttime="20170706 17:13:59.423"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170706 17:13:59.424" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170706 17:13:59.424" status="PASS" starttime="20170706 17:13:59.423"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170706 17:13:59.608" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170706 17:13:59.608" status="PASS" starttime="20170706 17:13:59.424"></status>
</kw>
<msg timestamp="20170706 17:13:59.608" level="INFO">${status} = PASS</msg>
<msg timestamp="20170706 17:13:59.608" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170706 17:13:59.609" status="PASS" starttime="20170706 17:13:59.424"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170706 17:13:59.609" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170706 17:13:59.609" status="PASS" starttime="20170706 17:13:59.609"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170706 17:13:59.610" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170706 17:13:59.610" status="PASS" starttime="20170706 17:13:59.609"></status>
</kw>
<status endtime="20170706 17:13:59.610" status="PASS" starttime="20170706 17:13:59.420"></status>
</kw>
<status endtime="20170706 17:13:59.610" status="PASS" starttime="20170706 17:13:59.420"></status>
</kw>
<status endtime="20170706 17:13:59.610" status="PASS" starttime="20170706 17:13:59.419"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170706 17:13:59.611" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170706 17:13:59.611" status="PASS" starttime="20170706 17:13:59.610"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170706 17:13:59.613" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170706 17:13:59.613" status="PASS" starttime="20170706 17:13:59.612"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170706 17:13:59.614" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170706 17:13:59.614" status="PASS" starttime="20170706 17:13:59.614"></status>
</kw>
<status endtime="20170706 17:13:59.614" status="PASS" starttime="20170706 17:13:59.613"></status>
</kw>
<status endtime="20170706 17:13:59.614" status="PASS" starttime="20170706 17:13:59.612"></status>
</kw>
<status endtime="20170706 17:13:59.614" status="PASS" starttime="20170706 17:13:59.611"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170706 17:13:59.689" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170706 17:13:59.689" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170706 17:13:59.689" status="PASS" starttime="20170706 17:13:59.614"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170706 17:13:59.691" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170706 17:13:59.691" status="PASS" starttime="20170706 17:13:59.691"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170706 17:13:59.692" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170706 17:13:59.692" status="PASS" starttime="20170706 17:13:59.692"></status>
</kw>
<status endtime="20170706 17:13:59.692" status="PASS" starttime="20170706 17:13:59.691"></status>
</kw>
<status endtime="20170706 17:13:59.692" status="PASS" starttime="20170706 17:13:59.690"></status>
</kw>
<status endtime="20170706 17:13:59.692" status="PASS" starttime="20170706 17:13:59.690"></status>
</kw>
<msg timestamp="20170706 17:13:59.693" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170706 17:13:59.693" status="PASS" starttime="20170706 17:13:59.418"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170706 17:13:59.693" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170706 17:13:59.693" status="PASS" starttime="20170706 17:13:59.693"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170706 17:13:59.694" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170706 17:13:59.694" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170706 17:13:59.694" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170706 17:13:59.694" status="PASS" starttime="20170706 17:13:59.693"></status>
</kw>
<msg timestamp="20170706 17:13:59.694" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170706 17:13:59.694" status="PASS" starttime="20170706 17:13:59.418"></status>
</kw>
<msg timestamp="20170706 17:13:59.694" level="INFO">${host_state} = Running</msg>
<status endtime="20170706 17:13:59.695" status="PASS" starttime="20170706 17:13:59.417"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170706 17:13:59.695" level="FAIL">Off != Running</msg>
<status endtime="20170706 17:13:59.695" status="FAIL" starttime="20170706 17:13:59.695"></status>
</kw>
<status endtime="20170706 17:13:59.695" status="FAIL" starttime="20170706 17:13:59.417"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170706 17:14:09.701" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170706 17:14:09.701" status="PASS" starttime="20170706 17:14:09.700"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170706 17:14:09.702" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170706 17:14:09.702" status="PASS" starttime="20170706 17:14:09.701"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170706 17:14:09.702" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170706 17:14:09.702" status="PASS" starttime="20170706 17:14:09.702"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170706 17:14:09.703" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170706 17:14:09.703" status="PASS" starttime="20170706 17:14:09.703"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170706 17:14:09.885" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170706 17:14:09.885" status="PASS" starttime="20170706 17:14:09.704"></status>
</kw>
<msg timestamp="20170706 17:14:09.885" level="INFO">${status} = PASS</msg>
<msg timestamp="20170706 17:14:09.886" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170706 17:14:09.886" status="PASS" starttime="20170706 17:14:09.703"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170706 17:14:09.886" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170706 17:14:09.886" status="PASS" starttime="20170706 17:14:09.886"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170706 17:14:09.887" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170706 17:14:09.887" status="PASS" starttime="20170706 17:14:09.887"></status>
</kw>
<status endtime="20170706 17:14:09.887" status="PASS" starttime="20170706 17:14:09.700"></status>
</kw>
<status endtime="20170706 17:14:09.887" status="PASS" starttime="20170706 17:14:09.699"></status>
</kw>
<status endtime="20170706 17:14:09.887" status="PASS" starttime="20170706 17:14:09.699"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170706 17:14:09.888" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170706 17:14:09.888" status="PASS" starttime="20170706 17:14:09.888"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170706 17:14:09.890" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170706 17:14:09.890" status="PASS" starttime="20170706 17:14:09.889"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170706 17:14:09.891" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170706 17:14:09.891" status="PASS" starttime="20170706 17:14:09.891"></status>
</kw>
<status endtime="20170706 17:14:09.891" status="PASS" starttime="20170706 17:14:09.890"></status>
</kw>
<status endtime="20170706 17:14:09.891" status="PASS" starttime="20170706 17:14:09.889"></status>
</kw>
<status endtime="20170706 17:14:09.891" status="PASS" starttime="20170706 17:14:09.888"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170706 17:14:09.957" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170706 17:14:09.957" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170706 17:14:09.957" status="PASS" starttime="20170706 17:14:09.892"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170706 17:14:09.959" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170706 17:14:09.959" status="PASS" starttime="20170706 17:14:09.958"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170706 17:14:09.960" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170706 17:14:09.960" status="PASS" starttime="20170706 17:14:09.959"></status>
</kw>
<status endtime="20170706 17:14:09.960" status="PASS" starttime="20170706 17:14:09.959"></status>
</kw>
<status endtime="20170706 17:14:09.960" status="PASS" starttime="20170706 17:14:09.958"></status>
</kw>
<status endtime="20170706 17:14:09.960" status="PASS" starttime="20170706 17:14:09.957"></status>
</kw>
<msg timestamp="20170706 17:14:09.960" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170706 17:14:09.960" status="PASS" starttime="20170706 17:14:09.698"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170706 17:14:09.961" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170706 17:14:09.961" status="PASS" starttime="20170706 17:14:09.960"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170706 17:14:09.961" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170706 17:14:09.961" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170706 17:14:09.961" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170706 17:14:09.962" status="PASS" starttime="20170706 17:14:09.961"></status>
</kw>
<msg timestamp="20170706 17:14:09.962" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170706 17:14:09.962" status="PASS" starttime="20170706 17:14:09.697"></status>
</kw>
<msg timestamp="20170706 17:14:09.962" level="INFO">${host_state} = Running</msg>
<status endtime="20170706 17:14:09.962" status="PASS" starttime="20170706 17:14:09.697"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170706 17:14:09.963" level="FAIL">Off != Running</msg>
<status endtime="20170706 17:14:09.963" status="FAIL" starttime="20170706 17:14:09.962"></status>
</kw>
<status endtime="20170706 17:14:09.963" status="FAIL" starttime="20170706 17:14:09.696"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170706 17:14:19.968" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170706 17:14:19.968" status="PASS" starttime="20170706 17:14:19.967"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170706 17:14:19.969" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170706 17:14:19.969" status="PASS" starttime="20170706 17:14:19.968"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170706 17:14:19.969" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170706 17:14:19.969" status="PASS" starttime="20170706 17:14:19.969"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170706 17:14:19.970" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170706 17:14:19.970" status="PASS" starttime="20170706 17:14:19.970"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170706 17:14:20.208" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170706 17:14:20.208" status="PASS" starttime="20170706 17:14:19.971"></status>
</kw>
<msg timestamp="20170706 17:14:20.208" level="INFO">${status} = PASS</msg>
<msg timestamp="20170706 17:14:20.209" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170706 17:14:20.209" status="PASS" starttime="20170706 17:14:19.970"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170706 17:14:20.209" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170706 17:14:20.209" status="PASS" starttime="20170706 17:14:20.209"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170706 17:14:20.210" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170706 17:14:20.210" status="PASS" starttime="20170706 17:14:20.210"></status>
</kw>
<status endtime="20170706 17:14:20.210" status="PASS" starttime="20170706 17:14:19.967"></status>
</kw>
<status endtime="20170706 17:14:20.210" status="PASS" starttime="20170706 17:14:19.966"></status>
</kw>
<status endtime="20170706 17:14:20.210" status="PASS" starttime="20170706 17:14:19.966"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170706 17:14:20.211" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170706 17:14:20.211" status="PASS" starttime="20170706 17:14:20.211"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170706 17:14:20.213" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170706 17:14:20.213" status="PASS" starttime="20170706 17:14:20.212"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170706 17:14:20.214" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170706 17:14:20.214" status="PASS" starttime="20170706 17:14:20.214"></status>
</kw>
<status endtime="20170706 17:14:20.214" status="PASS" starttime="20170706 17:14:20.213"></status>
</kw>
<status endtime="20170706 17:14:20.214" status="PASS" starttime="20170706 17:14:20.212"></status>
</kw>
<status endtime="20170706 17:14:20.214" status="PASS" starttime="20170706 17:14:20.211"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170706 17:14:20.282" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170706 17:14:20.282" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170706 17:14:20.283" status="PASS" starttime="20170706 17:14:20.215"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170706 17:14:20.284" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170706 17:14:20.284" status="PASS" starttime="20170706 17:14:20.284"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170706 17:14:20.285" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170706 17:14:20.285" status="PASS" starttime="20170706 17:14:20.285"></status>
</kw>
<status endtime="20170706 17:14:20.285" status="PASS" starttime="20170706 17:14:20.284"></status>
</kw>
<status endtime="20170706 17:14:20.286" status="PASS" starttime="20170706 17:14:20.283"></status>
</kw>
<status endtime="20170706 17:14:20.286" status="PASS" starttime="20170706 17:14:20.283"></status>
</kw>
<msg timestamp="20170706 17:14:20.286" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170706 17:14:20.286" status="PASS" starttime="20170706 17:14:19.965"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170706 17:14:20.286" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170706 17:14:20.286" status="PASS" starttime="20170706 17:14:20.286"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170706 17:14:20.287" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170706 17:14:20.287" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170706 17:14:20.287" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170706 17:14:20.287" status="PASS" starttime="20170706 17:14:20.287"></status>
</kw>
<msg timestamp="20170706 17:14:20.287" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170706 17:14:20.287" status="PASS" starttime="20170706 17:14:19.965"></status>
</kw>
<msg timestamp="20170706 17:14:20.288" level="INFO">${host_state} = Running</msg>
<status endtime="20170706 17:14:20.288" status="PASS" starttime="20170706 17:14:19.964"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170706 17:14:20.288" level="FAIL">Off != Running</msg>
<status endtime="20170706 17:14:20.288" status="FAIL" starttime="20170706 17:14:20.288"></status>
</kw>
<status endtime="20170706 17:14:20.289" status="FAIL" starttime="20170706 17:14:19.964"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170706 17:14:30.295" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170706 17:14:30.295" status="PASS" starttime="20170706 17:14:30.294"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170706 17:14:30.296" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170706 17:14:30.296" status="PASS" starttime="20170706 17:14:30.295"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170706 17:14:30.296" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170706 17:14:30.296" status="PASS" starttime="20170706 17:14:30.296"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170706 17:14:30.297" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170706 17:14:30.297" status="PASS" starttime="20170706 17:14:30.297"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170706 17:14:30.493" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170706 17:14:30.493" status="PASS" starttime="20170706 17:14:30.298"></status>
</kw>
<msg timestamp="20170706 17:14:30.493" level="INFO">${status} = PASS</msg>
<msg timestamp="20170706 17:14:30.493" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170706 17:14:30.493" status="PASS" starttime="20170706 17:14:30.297"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170706 17:14:30.494" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170706 17:14:30.494" status="PASS" starttime="20170706 17:14:30.494"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170706 17:14:30.495" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170706 17:14:30.495" status="PASS" starttime="20170706 17:14:30.494"></status>
</kw>
<status endtime="20170706 17:14:30.495" status="PASS" starttime="20170706 17:14:30.293"></status>
</kw>
<status endtime="20170706 17:14:30.495" status="PASS" starttime="20170706 17:14:30.293"></status>
</kw>
<status endtime="20170706 17:14:30.495" status="PASS" starttime="20170706 17:14:30.292"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170706 17:14:30.496" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170706 17:14:30.496" status="PASS" starttime="20170706 17:14:30.495"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170706 17:14:30.498" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170706 17:14:30.498" status="PASS" starttime="20170706 17:14:30.497"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170706 17:14:30.499" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170706 17:14:30.499" status="PASS" starttime="20170706 17:14:30.498"></status>
</kw>
<status endtime="20170706 17:14:30.499" status="PASS" starttime="20170706 17:14:30.498"></status>
</kw>
<status endtime="20170706 17:14:30.499" status="PASS" starttime="20170706 17:14:30.496"></status>
</kw>
<status endtime="20170706 17:14:30.499" status="PASS" starttime="20170706 17:14:30.496"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170706 17:14:30.564" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170706 17:14:30.565" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170706 17:14:30.565" status="PASS" starttime="20170706 17:14:30.499"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170706 17:14:30.567" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170706 17:14:30.567" status="PASS" starttime="20170706 17:14:30.566"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170706 17:14:30.568" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170706 17:14:30.568" status="PASS" starttime="20170706 17:14:30.567"></status>
</kw>
<status endtime="20170706 17:14:30.568" status="PASS" starttime="20170706 17:14:30.567"></status>
</kw>
<status endtime="20170706 17:14:30.568" status="PASS" starttime="20170706 17:14:30.565"></status>
</kw>
<status endtime="20170706 17:14:30.568" status="PASS" starttime="20170706 17:14:30.565"></status>
</kw>
<msg timestamp="20170706 17:14:30.569" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170706 17:14:30.569" status="PASS" starttime="20170706 17:14:30.291"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170706 17:14:30.569" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170706 17:14:30.569" status="PASS" starttime="20170706 17:14:30.569"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170706 17:14:30.570" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170706 17:14:30.570" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170706 17:14:30.570" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170706 17:14:30.570" status="PASS" starttime="20170706 17:14:30.569"></status>
</kw>
<msg timestamp="20170706 17:14:30.570" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170706 17:14:30.570" status="PASS" starttime="20170706 17:14:30.291"></status>
</kw>
<msg timestamp="20170706 17:14:30.571" level="INFO">${host_state} = Running</msg>
<status endtime="20170706 17:14:30.571" status="PASS" starttime="20170706 17:14:30.290"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170706 17:14:30.571" level="FAIL">Off != Running</msg>
<status endtime="20170706 17:14:30.571" status="FAIL" starttime="20170706 17:14:30.571"></status>
</kw>
<status endtime="20170706 17:14:30.572" status="FAIL" starttime="20170706 17:14:30.289"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170706 17:14:40.576" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170706 17:14:40.577" status="PASS" starttime="20170706 17:14:40.576"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170706 17:14:40.577" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170706 17:14:40.577" status="PASS" starttime="20170706 17:14:40.577"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170706 17:14:40.578" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170706 17:14:40.578" status="PASS" starttime="20170706 17:14:40.578"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170706 17:14:40.579" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170706 17:14:40.579" status="PASS" starttime="20170706 17:14:40.578"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170706 17:14:40.912" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170706 17:14:40.912" status="PASS" starttime="20170706 17:14:40.579"></status>
</kw>
<msg timestamp="20170706 17:14:40.912" level="INFO">${status} = PASS</msg>
<msg timestamp="20170706 17:14:40.912" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170706 17:14:40.912" status="PASS" starttime="20170706 17:14:40.579"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170706 17:14:40.913" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170706 17:14:40.913" status="PASS" starttime="20170706 17:14:40.913"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170706 17:14:40.914" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170706 17:14:40.914" status="PASS" starttime="20170706 17:14:40.914"></status>
</kw>
<status endtime="20170706 17:14:40.914" status="PASS" starttime="20170706 17:14:40.575"></status>
</kw>
<status endtime="20170706 17:14:40.914" status="PASS" starttime="20170706 17:14:40.575"></status>
</kw>
<status endtime="20170706 17:14:40.914" status="PASS" starttime="20170706 17:14:40.574"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170706 17:14:40.915" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170706 17:14:40.915" status="PASS" starttime="20170706 17:14:40.915"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170706 17:14:40.918" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170706 17:14:40.918" status="PASS" starttime="20170706 17:14:40.917"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170706 17:14:40.919" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170706 17:14:40.919" status="PASS" starttime="20170706 17:14:40.918"></status>
</kw>
<status endtime="20170706 17:14:40.919" status="PASS" starttime="20170706 17:14:40.918"></status>
</kw>
<status endtime="20170706 17:14:40.919" status="PASS" starttime="20170706 17:14:40.916"></status>
</kw>
<status endtime="20170706 17:14:40.919" status="PASS" starttime="20170706 17:14:40.915"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170706 17:14:41.007" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170706 17:14:41.007" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170706 17:14:41.008" status="PASS" starttime="20170706 17:14:40.920"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170706 17:14:41.010" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170706 17:14:41.010" status="PASS" starttime="20170706 17:14:41.009"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170706 17:14:41.011" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170706 17:14:41.011" status="PASS" starttime="20170706 17:14:41.010"></status>
</kw>
<status endtime="20170706 17:14:41.011" status="PASS" starttime="20170706 17:14:41.010"></status>
</kw>
<status endtime="20170706 17:14:41.011" status="PASS" starttime="20170706 17:14:41.009"></status>
</kw>
<status endtime="20170706 17:14:41.011" status="PASS" starttime="20170706 17:14:41.008"></status>
</kw>
<msg timestamp="20170706 17:14:41.011" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170706 17:14:41.011" status="PASS" starttime="20170706 17:14:40.574"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170706 17:14:41.012" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170706 17:14:41.012" status="PASS" starttime="20170706 17:14:41.012"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170706 17:14:41.013" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170706 17:14:41.013" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170706 17:14:41.013" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170706 17:14:41.013" status="PASS" starttime="20170706 17:14:41.012"></status>
</kw>
<msg timestamp="20170706 17:14:41.013" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170706 17:14:41.013" status="PASS" starttime="20170706 17:14:40.573"></status>
</kw>
<msg timestamp="20170706 17:14:41.014" level="INFO">${host_state} = Running</msg>
<status endtime="20170706 17:14:41.014" status="PASS" starttime="20170706 17:14:40.573"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170706 17:14:41.014" level="FAIL">Off != Running</msg>
<status endtime="20170706 17:14:41.014" status="FAIL" starttime="20170706 17:14:41.014"></status>
</kw>
<status endtime="20170706 17:14:41.015" status="FAIL" starttime="20170706 17:14:40.572"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170706 17:14:51.020" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170706 17:14:51.021" status="PASS" starttime="20170706 17:14:51.019"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170706 17:14:51.021" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170706 17:14:51.021" status="PASS" starttime="20170706 17:14:51.021"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170706 17:14:51.022" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170706 17:14:51.022" status="PASS" starttime="20170706 17:14:51.022"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170706 17:14:51.023" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170706 17:14:51.023" status="PASS" starttime="20170706 17:14:51.022"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170706 17:14:51.263" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170706 17:14:51.264" status="PASS" starttime="20170706 17:14:51.023"></status>
</kw>
<msg timestamp="20170706 17:14:51.264" level="INFO">${status} = PASS</msg>
<msg timestamp="20170706 17:14:51.264" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170706 17:14:51.264" status="PASS" starttime="20170706 17:14:51.023"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170706 17:14:51.264" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170706 17:14:51.265" status="PASS" starttime="20170706 17:14:51.264"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170706 17:14:51.265" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170706 17:14:51.265" status="PASS" starttime="20170706 17:14:51.265"></status>
</kw>
<status endtime="20170706 17:14:51.265" status="PASS" starttime="20170706 17:14:51.019"></status>
</kw>
<status endtime="20170706 17:14:51.265" status="PASS" starttime="20170706 17:14:51.018"></status>
</kw>
<status endtime="20170706 17:14:51.266" status="PASS" starttime="20170706 17:14:51.018"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170706 17:14:51.266" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170706 17:14:51.266" status="PASS" starttime="20170706 17:14:51.266"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170706 17:14:51.268" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170706 17:14:51.268" status="PASS" starttime="20170706 17:14:51.268"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170706 17:14:51.269" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170706 17:14:51.269" status="PASS" starttime="20170706 17:14:51.269"></status>
</kw>
<status endtime="20170706 17:14:51.269" status="PASS" starttime="20170706 17:14:51.268"></status>
</kw>
<status endtime="20170706 17:14:51.269" status="PASS" starttime="20170706 17:14:51.267"></status>
</kw>
<status endtime="20170706 17:14:51.270" status="PASS" starttime="20170706 17:14:51.266"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170706 17:14:51.335" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170706 17:14:51.335" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170706 17:14:51.335" status="PASS" starttime="20170706 17:14:51.270"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170706 17:14:51.337" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170706 17:14:51.337" status="PASS" starttime="20170706 17:14:51.337"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170706 17:14:51.338" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170706 17:14:51.338" status="PASS" starttime="20170706 17:14:51.338"></status>
</kw>
<status endtime="20170706 17:14:51.338" status="PASS" starttime="20170706 17:14:51.337"></status>
</kw>
<status endtime="20170706 17:14:51.338" status="PASS" starttime="20170706 17:14:51.336"></status>
</kw>
<status endtime="20170706 17:14:51.339" status="PASS" starttime="20170706 17:14:51.336"></status>
</kw>
<msg timestamp="20170706 17:14:51.339" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170706 17:14:51.339" status="PASS" starttime="20170706 17:14:51.017"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170706 17:14:51.339" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170706 17:14:51.339" status="PASS" starttime="20170706 17:14:51.339"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170706 17:14:51.340" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170706 17:14:51.340" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170706 17:14:51.340" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170706 17:14:51.340" status="PASS" starttime="20170706 17:14:51.340"></status>
</kw>
<msg timestamp="20170706 17:14:51.341" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170706 17:14:51.341" status="PASS" starttime="20170706 17:14:51.016"></status>
</kw>
<msg timestamp="20170706 17:14:51.341" level="INFO">${host_state} = Running</msg>
<status endtime="20170706 17:14:51.341" status="PASS" starttime="20170706 17:14:51.016"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170706 17:14:51.342" level="FAIL">Off != Running</msg>
<status endtime="20170706 17:14:51.342" status="FAIL" starttime="20170706 17:14:51.341"></status>
</kw>
<status endtime="20170706 17:14:51.342" status="FAIL" starttime="20170706 17:14:51.015"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170706 17:15:01.348" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170706 17:15:01.348" status="PASS" starttime="20170706 17:15:01.347"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170706 17:15:01.349" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170706 17:15:01.349" status="PASS" starttime="20170706 17:15:01.348"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170706 17:15:01.349" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170706 17:15:01.349" status="PASS" starttime="20170706 17:15:01.349"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170706 17:15:01.350" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170706 17:15:01.350" status="PASS" starttime="20170706 17:15:01.350"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170706 17:15:01.596" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170706 17:15:01.596" status="PASS" starttime="20170706 17:15:01.351"></status>
</kw>
<msg timestamp="20170706 17:15:01.597" level="INFO">${status} = PASS</msg>
<msg timestamp="20170706 17:15:01.597" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170706 17:15:01.597" status="PASS" starttime="20170706 17:15:01.350"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170706 17:15:01.597" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170706 17:15:01.597" status="PASS" starttime="20170706 17:15:01.597"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170706 17:15:01.598" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170706 17:15:01.598" status="PASS" starttime="20170706 17:15:01.598"></status>
</kw>
<status endtime="20170706 17:15:01.598" status="PASS" starttime="20170706 17:15:01.347"></status>
</kw>
<status endtime="20170706 17:15:01.598" status="PASS" starttime="20170706 17:15:01.346"></status>
</kw>
<status endtime="20170706 17:15:01.598" status="PASS" starttime="20170706 17:15:01.345"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170706 17:15:01.599" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170706 17:15:01.599" status="PASS" starttime="20170706 17:15:01.599"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170706 17:15:01.601" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170706 17:15:01.601" status="PASS" starttime="20170706 17:15:01.601"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170706 17:15:01.602" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170706 17:15:01.602" status="PASS" starttime="20170706 17:15:01.602"></status>
</kw>
<status endtime="20170706 17:15:01.603" status="PASS" starttime="20170706 17:15:01.601"></status>
</kw>
<status endtime="20170706 17:15:01.603" status="PASS" starttime="20170706 17:15:01.600"></status>
</kw>
<status endtime="20170706 17:15:01.603" status="PASS" starttime="20170706 17:15:01.599"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170706 17:15:01.677" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170706 17:15:01.677" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170706 17:15:01.677" status="PASS" starttime="20170706 17:15:01.603"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170706 17:15:01.679" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170706 17:15:01.679" status="PASS" starttime="20170706 17:15:01.679"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170706 17:15:01.680" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170706 17:15:01.680" status="PASS" starttime="20170706 17:15:01.680"></status>
</kw>
<status endtime="20170706 17:15:01.680" status="PASS" starttime="20170706 17:15:01.679"></status>
</kw>
<status endtime="20170706 17:15:01.680" status="PASS" starttime="20170706 17:15:01.678"></status>
</kw>
<status endtime="20170706 17:15:01.681" status="PASS" starttime="20170706 17:15:01.678"></status>
</kw>
<msg timestamp="20170706 17:15:01.681" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170706 17:15:01.681" status="PASS" starttime="20170706 17:15:01.345"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170706 17:15:01.681" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170706 17:15:01.681" status="PASS" starttime="20170706 17:15:01.681"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170706 17:15:01.682" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170706 17:15:01.682" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170706 17:15:01.682" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170706 17:15:01.682" status="PASS" starttime="20170706 17:15:01.682"></status>
</kw>
<msg timestamp="20170706 17:15:01.682" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170706 17:15:01.682" status="PASS" starttime="20170706 17:15:01.344"></status>
</kw>
<msg timestamp="20170706 17:15:01.683" level="INFO">${host_state} = Running</msg>
<status endtime="20170706 17:15:01.683" status="PASS" starttime="20170706 17:15:01.343"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170706 17:15:01.683" level="FAIL">Off != Running</msg>
<status endtime="20170706 17:15:01.683" status="FAIL" starttime="20170706 17:15:01.683"></status>
</kw>
<status endtime="20170706 17:15:01.684" status="FAIL" starttime="20170706 17:15:01.342"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170706 17:15:11.688" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170706 17:15:11.689" status="PASS" starttime="20170706 17:15:11.688"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170706 17:15:11.689" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170706 17:15:11.689" status="PASS" starttime="20170706 17:15:11.689"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170706 17:15:11.690" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170706 17:15:11.690" status="PASS" starttime="20170706 17:15:11.690"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170706 17:15:11.691" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170706 17:15:11.691" status="PASS" starttime="20170706 17:15:11.690"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170706 17:15:11.947" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170706 17:15:11.947" status="PASS" starttime="20170706 17:15:11.692"></status>
</kw>
<msg timestamp="20170706 17:15:11.947" level="INFO">${status} = PASS</msg>
<msg timestamp="20170706 17:15:11.947" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170706 17:15:11.947" status="PASS" starttime="20170706 17:15:11.691"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170706 17:15:11.948" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170706 17:15:11.948" status="PASS" starttime="20170706 17:15:11.948"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170706 17:15:11.949" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170706 17:15:11.949" status="PASS" starttime="20170706 17:15:11.948"></status>
</kw>
<status endtime="20170706 17:15:11.949" status="PASS" starttime="20170706 17:15:11.688"></status>
</kw>
<status endtime="20170706 17:15:11.949" status="PASS" starttime="20170706 17:15:11.687"></status>
</kw>
<status endtime="20170706 17:15:11.949" status="PASS" starttime="20170706 17:15:11.686"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170706 17:15:11.950" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170706 17:15:11.950" status="PASS" starttime="20170706 17:15:11.949"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170706 17:15:11.952" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170706 17:15:11.952" status="PASS" starttime="20170706 17:15:11.951"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170706 17:15:11.953" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170706 17:15:11.953" status="PASS" starttime="20170706 17:15:11.952"></status>
</kw>
<status endtime="20170706 17:15:11.953" status="PASS" starttime="20170706 17:15:11.952"></status>
</kw>
<status endtime="20170706 17:15:11.953" status="PASS" starttime="20170706 17:15:11.950"></status>
</kw>
<status endtime="20170706 17:15:11.953" status="PASS" starttime="20170706 17:15:11.950"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170706 17:15:12.023" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170706 17:15:12.023" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170706 17:15:12.023" status="PASS" starttime="20170706 17:15:11.953"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170706 17:15:12.025" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170706 17:15:12.025" status="PASS" starttime="20170706 17:15:12.025"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170706 17:15:12.026" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170706 17:15:12.026" status="PASS" starttime="20170706 17:15:12.026"></status>
</kw>
<status endtime="20170706 17:15:12.026" status="PASS" starttime="20170706 17:15:12.025"></status>
</kw>
<status endtime="20170706 17:15:12.026" status="PASS" starttime="20170706 17:15:12.024"></status>
</kw>
<status endtime="20170706 17:15:12.026" status="PASS" starttime="20170706 17:15:12.024"></status>
</kw>
<msg timestamp="20170706 17:15:12.027" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170706 17:15:12.027" status="PASS" starttime="20170706 17:15:11.686"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170706 17:15:12.027" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170706 17:15:12.027" status="PASS" starttime="20170706 17:15:12.027"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170706 17:15:12.028" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170706 17:15:12.028" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170706 17:15:12.028" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170706 17:15:12.028" status="PASS" starttime="20170706 17:15:12.028"></status>
</kw>
<msg timestamp="20170706 17:15:12.028" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170706 17:15:12.028" status="PASS" starttime="20170706 17:15:11.685"></status>
</kw>
<msg timestamp="20170706 17:15:12.029" level="INFO">${host_state} = Running</msg>
<status endtime="20170706 17:15:12.029" status="PASS" starttime="20170706 17:15:11.685"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170706 17:15:12.029" level="FAIL">Off != Running</msg>
<status endtime="20170706 17:15:12.029" status="FAIL" starttime="20170706 17:15:12.029"></status>
</kw>
<status endtime="20170706 17:15:12.030" status="FAIL" starttime="20170706 17:15:11.684"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170706 17:15:22.035" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170706 17:15:22.035" status="PASS" starttime="20170706 17:15:22.035"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170706 17:15:22.036" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170706 17:15:22.036" status="PASS" starttime="20170706 17:15:22.035"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170706 17:15:22.036" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170706 17:15:22.036" status="PASS" starttime="20170706 17:15:22.036"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170706 17:15:22.037" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170706 17:15:22.037" status="PASS" starttime="20170706 17:15:22.037"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170706 17:15:22.325" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170706 17:15:22.325" status="PASS" starttime="20170706 17:15:22.038"></status>
</kw>
<msg timestamp="20170706 17:15:22.325" level="INFO">${status} = PASS</msg>
<msg timestamp="20170706 17:15:22.325" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170706 17:15:22.325" status="PASS" starttime="20170706 17:15:22.037"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170706 17:15:22.326" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170706 17:15:22.326" status="PASS" starttime="20170706 17:15:22.325"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170706 17:15:22.326" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170706 17:15:22.326" status="PASS" starttime="20170706 17:15:22.326"></status>
</kw>
<status endtime="20170706 17:15:22.326" status="PASS" starttime="20170706 17:15:22.034"></status>
</kw>
<status endtime="20170706 17:15:22.327" status="PASS" starttime="20170706 17:15:22.033"></status>
</kw>
<status endtime="20170706 17:15:22.327" status="PASS" starttime="20170706 17:15:22.033"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170706 17:15:22.327" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170706 17:15:22.327" status="PASS" starttime="20170706 17:15:22.327"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170706 17:15:22.329" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170706 17:15:22.329" status="PASS" starttime="20170706 17:15:22.329"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170706 17:15:22.330" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170706 17:15:22.330" status="PASS" starttime="20170706 17:15:22.330"></status>
</kw>
<status endtime="20170706 17:15:22.331" status="PASS" starttime="20170706 17:15:22.330"></status>
</kw>
<status endtime="20170706 17:15:22.331" status="PASS" starttime="20170706 17:15:22.328"></status>
</kw>
<status endtime="20170706 17:15:22.331" status="PASS" starttime="20170706 17:15:22.328"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170706 17:15:22.396" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170706 17:15:22.396" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170706 17:15:22.396" status="PASS" starttime="20170706 17:15:22.331"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170706 17:15:22.398" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170706 17:15:22.398" status="PASS" starttime="20170706 17:15:22.397"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170706 17:15:22.399" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170706 17:15:22.399" status="PASS" starttime="20170706 17:15:22.398"></status>
</kw>
<status endtime="20170706 17:15:22.399" status="PASS" starttime="20170706 17:15:22.398"></status>
</kw>
<status endtime="20170706 17:15:22.399" status="PASS" starttime="20170706 17:15:22.397"></status>
</kw>
<status endtime="20170706 17:15:22.399" status="PASS" starttime="20170706 17:15:22.396"></status>
</kw>
<msg timestamp="20170706 17:15:22.400" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170706 17:15:22.400" status="PASS" starttime="20170706 17:15:22.032"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170706 17:15:22.400" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170706 17:15:22.400" status="PASS" starttime="20170706 17:15:22.400"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170706 17:15:22.401" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170706 17:15:22.401" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170706 17:15:22.401" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170706 17:15:22.401" status="PASS" starttime="20170706 17:15:22.401"></status>
</kw>
<msg timestamp="20170706 17:15:22.401" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170706 17:15:22.401" status="PASS" starttime="20170706 17:15:22.031"></status>
</kw>
<msg timestamp="20170706 17:15:22.402" level="INFO">${host_state} = Running</msg>
<status endtime="20170706 17:15:22.402" status="PASS" starttime="20170706 17:15:22.031"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170706 17:15:22.402" level="FAIL">Off != Running</msg>
<status endtime="20170706 17:15:22.402" status="FAIL" starttime="20170706 17:15:22.402"></status>
</kw>
<status endtime="20170706 17:15:22.403" status="FAIL" starttime="20170706 17:15:22.030"></status>
</kw>
<msg timestamp="20170706 17:15:22.403" level="FAIL">Keyword 'Is Host Off' failed after retrying for 3 minutes. The last error was: Off != Running</msg>
<status endtime="20170706 17:15:22.403" status="FAIL" starttime="20170706 17:12:17.711"></status>
</kw>
<status endtime="20170706 17:15:22.403" status="FAIL" starttime="20170706 17:12:16.539"></status>
</kw>
<status endtime="20170706 17:15:22.403" status="FAIL" starttime="20170706 17:12:16.539"></status>
</kw>
<status endtime="20170706 17:15:22.403" status="FAIL" starttime="20170706 17:12:16.538"></status>
</kw>
<kw name="Test Exit Logs" type="teardown">
<doc>Collect FFDC and SOL log.</doc>
<kw name="FFDC On Test Case Fail" library="openbmc_ffdc">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw name="Is Host Quiesced" library="state_manager">
<doc>Check if host state is quiesced.</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170706 17:15:22.408" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170706 17:15:22.408" status="PASS" starttime="20170706 17:15:22.408"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170706 17:15:22.409" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170706 17:15:22.409" status="PASS" starttime="20170706 17:15:22.409"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170706 17:15:22.410" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170706 17:15:22.410" status="PASS" starttime="20170706 17:15:22.409"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170706 17:15:22.410" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170706 17:15:22.410" status="PASS" starttime="20170706 17:15:22.410"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170706 17:15:22.591" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170706 17:15:22.591" status="PASS" starttime="20170706 17:15:22.411"></status>
</kw>
<msg timestamp="20170706 17:15:22.591" level="INFO">${status} = PASS</msg>
<msg timestamp="20170706 17:15:22.591" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170706 17:15:22.591" status="PASS" starttime="20170706 17:15:22.411"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170706 17:15:22.592" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170706 17:15:22.592" status="PASS" starttime="20170706 17:15:22.591"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170706 17:15:22.592" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170706 17:15:22.592" status="PASS" starttime="20170706 17:15:22.592"></status>
</kw>
<status endtime="20170706 17:15:22.592" status="PASS" starttime="20170706 17:15:22.407"></status>
</kw>
<status endtime="20170706 17:15:22.593" status="PASS" starttime="20170706 17:15:22.407"></status>
</kw>
<status endtime="20170706 17:15:22.593" status="PASS" starttime="20170706 17:15:22.406"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170706 17:15:22.593" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170706 17:15:22.593" status="PASS" starttime="20170706 17:15:22.593"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170706 17:15:22.595" level="INFO">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170706 17:15:22.595" status="PASS" starttime="20170706 17:15:22.595"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170706 17:15:22.596" level="INFO">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170706 17:15:22.596" status="PASS" starttime="20170706 17:15:22.596"></status>
</kw>
<status endtime="20170706 17:15:22.596" status="PASS" starttime="20170706 17:15:22.595"></status>
</kw>
<status endtime="20170706 17:15:22.597" status="PASS" starttime="20170706 17:15:22.594"></status>
</kw>
<status endtime="20170706 17:15:22.597" status="PASS" starttime="20170706 17:15:22.594"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170706 17:15:22.662" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170706 17:15:22.662" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170706 17:15:22.662" status="PASS" starttime="20170706 17:15:22.597"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170706 17:15:22.664" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170706 17:15:22.664" status="PASS" starttime="20170706 17:15:22.663"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170706 17:15:22.665" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170706 17:15:22.665" status="PASS" starttime="20170706 17:15:22.664"></status>
</kw>
<status endtime="20170706 17:15:22.665" status="PASS" starttime="20170706 17:15:22.664"></status>
</kw>
<status endtime="20170706 17:15:22.665" status="PASS" starttime="20170706 17:15:22.663"></status>
</kw>
<status endtime="20170706 17:15:22.665" status="PASS" starttime="20170706 17:15:22.662"></status>
</kw>
<msg timestamp="20170706 17:15:22.665" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170706 17:15:22.665" status="PASS" starttime="20170706 17:15:22.406"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170706 17:15:22.666" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170706 17:15:22.666" status="PASS" starttime="20170706 17:15:22.666"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170706 17:15:22.667" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170706 17:15:22.667" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170706 17:15:22.667" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170706 17:15:22.667" status="PASS" starttime="20170706 17:15:22.666"></status>
</kw>
<msg timestamp="20170706 17:15:22.667" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170706 17:15:22.667" status="PASS" starttime="20170706 17:15:22.405"></status>
</kw>
<msg timestamp="20170706 17:15:22.667" level="INFO">${host_state} = Running</msg>
<status endtime="20170706 17:15:22.667" status="PASS" starttime="20170706 17:15:22.405"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<msg timestamp="20170706 17:15:22.668" level="FAIL">Running != Quiesced</msg>
<status endtime="20170706 17:15:22.669" status="FAIL" starttime="20170706 17:15:22.668"></status>
</kw>
<msg timestamp="20170706 17:15:22.669" level="INFO">${status} = False</msg>
<status endtime="20170706 17:15:22.669" status="PASS" starttime="20170706 17:15:22.668"></status>
</kw>
<msg timestamp="20170706 17:15:22.669" level="INFO">${status} = False</msg>
<status endtime="20170706 17:15:22.669" status="PASS" starttime="20170706 17:15:22.404"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL' or '${status}'=='True'</arg>
<arg>FFDC</arg>
</arguments>
<kw name="Ffdc" library="openbmc_ffdc">
<doc>Gather First Failure Data Capture (FFDC).</doc>
<kw name="Ping Host" library="utils">
<arguments>
<arg>9.3.21.61</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170706 17:15:22.702" level="INFO">Length is 9</msg>
<status endtime="20170706 17:15:22.702" status="PASS" starttime="20170706 17:15:22.700"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170706 17:15:22.706" level="INFO">Running command 'ping -c 4 9.3.21.61 2&gt;&amp;1'.</msg>
<msg timestamp="20170706 17:15:25.726" level="INFO">${RC} = 0</msg>
<msg timestamp="20170706 17:15:25.726" level="INFO">${output} = PING 9.3.21.61 (9.3.21.61) 56(84) bytes of data.
64 bytes from 9.3.21.61: icmp_seq=1 ttl=62 time=1.54 ms
64 bytes from 9.3.21.61: icmp_seq=2 ttl=62 time=0.707 ms
64 bytes from 9.3.21.61: icmp_seq=3 tt...</msg>
<status endtime="20170706 17:15:25.727" status="PASS" starttime="20170706 17:15:22.702"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170706 17:15:25.730" level="INFO">RC: 0
Output:
PING 9.3.21.61 (9.3.21.61) 56(84) bytes of data.
64 bytes from 9.3.21.61: icmp_seq=1 ttl=62 time=1.54 ms
64 bytes from 9.3.21.61: icmp_seq=2 ttl=62 time=0.707 ms
64 bytes from 9.3.21.61: icmp_seq=3 ttl=62 time=1.33 ms
64 bytes from 9.3.21.61: icmp_seq=4 ttl=62 time=1.71 ms

--- 9.3.21.61 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 3004ms
rtt min/avg/max/mdev = 0.707/1.326/1.713/0.382 ms</msg>
<status endtime="20170706 17:15:25.730" status="PASS" starttime="20170706 17:15:25.729"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status endtime="20170706 17:15:25.731" status="PASS" starttime="20170706 17:15:25.730"></status>
</kw>
<status endtime="20170706 17:15:25.731" status="PASS" starttime="20170706 17:15:22.699"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170706 17:15:25.750" level="INFO">${cur_time} = 2017-07-06 17:15:25:749346</msg>
<status endtime="20170706 17:15:25.750" status="PASS" starttime="20170706 17:15:25.749"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170706 17:15:25.750" level="INFO">${cur_time} = 20170706171525749346</msg>
<status endtime="20170706 17:15:25.750" status="PASS" starttime="20170706 17:15:25.750"></status>
</kw>
<status endtime="20170706 17:15:25.750" status="PASS" starttime="20170706 17:15:25.748"></status>
</kw>
<msg timestamp="20170706 17:15:25.751" level="INFO">${FFDC_TIME} = 20170706171525749346</msg>
<kw name="Get Test Dir and Name" library="openbmc_ffdc_utils">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20170706 17:15:25.760" level="INFO">${suite_name} = TestsTestBasicPoweron</msg>
<status endtime="20170706 17:15:25.760" status="PASS" starttime="20170706 17:15:25.759"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20170706 17:15:25.760" level="INFO">${suite_name} = 20170706171525749346_TestsTestBasicPoweron</msg>
<status endtime="20170706 17:15:25.760" status="PASS" starttime="20170706 17:15:25.760"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20170706 17:15:25.761" level="INFO">${test_name} = PowerOnTest</msg>
<status endtime="20170706 17:15:25.761" status="PASS" starttime="20170706 17:15:25.761"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20170706 17:15:25.762" level="INFO">${test_name} = 20170706171525749346_PowerOnTest</msg>
<status endtime="20170706 17:15:25.762" status="PASS" starttime="20170706 17:15:25.761"></status>
</kw>
<status endtime="20170706 17:15:25.762" status="PASS" starttime="20170706 17:15:25.759"></status>
</kw>
<msg timestamp="20170706 17:15:25.762" level="INFO">${FFDC_DIR_PATH} = /tmp/fspcibld/13340/obmc-robot/logs/20170706171525749346_TestsTestBasicPoweron/20170706171525749346_PowerOnTest/</msg>
<msg timestamp="20170706 17:15:25.762" level="INFO">${FFDC_PREFIX} = 20170706171525749346_</msg>
<msg timestamp="20170706 17:15:25.796" level="INFO">${LOG_PREFIX} = /tmp/fspcibld/13340/obmc-robot/logs/20170706171525749346_TestsTestBasicPoweron/20170706171525749346_PowerOnTest/20170706171525749346_</msg>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>/tmp/fspcibld/13340/obmc-robot/logs/20170706171525749346_TestsTestBasicPoweron/20170706171525749346_PowerOnTest/</arg>
</arguments>
<msg timestamp="20170706 17:15:25.797" level="INFO" html="yes">Created directory '&lt;a href="file:///tmp/fspcibld/13340/obmc-robot/logs/20170706171525749346_TestsTestBasicPoweron/20170706171525749346_PowerOnTest"&gt;/tmp/fspcibld/13340/obmc-robot/logs/20170706171525749346_TestsTestBasicPoweron/20170706171525749346_PowerOnTest&lt;/a&gt;'.</msg>
<status endtime="20170706 17:15:25.797" status="PASS" starttime="20170706 17:15:25.796"></status>
</kw>
<msg timestamp="20170706 17:15:25.803" level="INFO">${FFDC_FILE_PATH} = /tmp/fspcibld/13340/obmc-robot/logs/20170706171525749346_TestsTestBasicPoweron/20170706171525749346_PowerOnTest/20170706171525749346_BMC_general.txt</msg>
<kw name="Header Message" library="openbmc_ffdc_utils">
<doc>Write header message to the report document manifest.</doc>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${HEADER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170706 17:15:25.836" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/13340/obmc-robot/logs/20170706171525749346_TestsTestBasicPoweron/20170706171525749346_PowerOnTest/20170706171525749346_BMC_general.txt"&gt;/tmp/fspcibld/13340/obmc-robot/logs/20170706171525749346_TestsTestBasicPoweron/20170706171525749346_PowerOnTest/20170706171525749346_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170706 17:15:25.836" status="PASS" starttime="20170706 17:15:25.835"></status>
</kw>
<status endtime="20170706 17:15:25.836" status="PASS" starttime="20170706 17:15:25.835"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170706 17:15:25.837" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/13340/obmc-robot/logs/20170706171525749346_TestsTestBasicPoweron/20170706171525749346_PowerOnTest/20170706171525749346_BMC_general.txt"&gt;/tmp/fspcibld/13340/obmc-robot/logs/20170706171525749346_TestsTestBasicPoweron/20170706171525749346_PowerOnTest/20170706171525749346_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170706 17:15:25.837" status="PASS" starttime="20170706 17:15:25.837"></status>
</kw>
<status endtime="20170706 17:15:25.837" status="PASS" starttime="20170706 17:15:25.836"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Suite File\t\t: ${SUITE_NAME} ${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170706 17:15:25.838" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/13340/obmc-robot/logs/20170706171525749346_TestsTestBasicPoweron/20170706171525749346_PowerOnTest/20170706171525749346_BMC_general.txt"&gt;/tmp/fspcibld/13340/obmc-robot/logs/20170706171525749346_TestsTestBasicPoweron/20170706171525749346_PowerOnTest/20170706171525749346_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170706 17:15:25.839" status="PASS" starttime="20170706 17:15:25.838"></status>
</kw>
<status endtime="20170706 17:15:25.839" status="PASS" starttime="20170706 17:15:25.837"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Case Name\t\t: ${TEST_NAME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170706 17:15:25.840" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/13340/obmc-robot/logs/20170706171525749346_TestsTestBasicPoweron/20170706171525749346_PowerOnTest/20170706171525749346_BMC_general.txt"&gt;/tmp/fspcibld/13340/obmc-robot/logs/20170706171525749346_TestsTestBasicPoweron/20170706171525749346_PowerOnTest/20170706171525749346_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170706 17:15:25.840" status="PASS" starttime="20170706 17:15:25.840"></status>
</kw>
<status endtime="20170706 17:15:25.840" status="PASS" starttime="20170706 17:15:25.839"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Source File\t: ${SUITE_SOURCE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170706 17:15:25.842" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/13340/obmc-robot/logs/20170706171525749346_TestsTestBasicPoweron/20170706171525749346_PowerOnTest/20170706171525749346_BMC_general.txt"&gt;/tmp/fspcibld/13340/obmc-robot/logs/20170706171525749346_TestsTestBasicPoweron/20170706171525749346_PowerOnTest/20170706171525749346_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170706 17:15:25.842" status="PASS" starttime="20170706 17:15:25.841"></status>
</kw>
<status endtime="20170706 17:15:25.842" status="PASS" starttime="20170706 17:15:25.841"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Failure Time Stamp\t: ${FFDC_TIME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170706 17:15:25.843" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/13340/obmc-robot/logs/20170706171525749346_TestsTestBasicPoweron/20170706171525749346_PowerOnTest/20170706171525749346_BMC_general.txt"&gt;/tmp/fspcibld/13340/obmc-robot/logs/20170706171525749346_TestsTestBasicPoweron/20170706171525749346_PowerOnTest/20170706171525749346_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170706 17:15:25.843" status="PASS" starttime="20170706 17:15:25.843"></status>
</kw>
<status endtime="20170706 17:15:25.843" status="PASS" starttime="20170706 17:15:25.842"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Error Message\t: ${TEST_MESSAGE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170706 17:15:25.844" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/13340/obmc-robot/logs/20170706171525749346_TestsTestBasicPoweron/20170706171525749346_PowerOnTest/20170706171525749346_BMC_general.txt"&gt;/tmp/fspcibld/13340/obmc-robot/logs/20170706171525749346_TestsTestBasicPoweron/20170706171525749346_PowerOnTest/20170706171525749346_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170706 17:15:25.845" status="PASS" starttime="20170706 17:15:25.844"></status>
</kw>
<status endtime="20170706 17:15:25.845" status="PASS" starttime="20170706 17:15:25.843"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Documentation\t:${\n}${TEST_DOCUMENTATION}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170706 17:15:25.846" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/13340/obmc-robot/logs/20170706171525749346_TestsTestBasicPoweron/20170706171525749346_PowerOnTest/20170706171525749346_BMC_general.txt"&gt;/tmp/fspcibld/13340/obmc-robot/logs/20170706171525749346_TestsTestBasicPoweron/20170706171525749346_PowerOnTest/20170706171525749346_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170706 17:15:25.846" status="PASS" starttime="20170706 17:15:25.846"></status>
</kw>
<status endtime="20170706 17:15:25.846" status="PASS" starttime="20170706 17:15:25.845"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170706 17:15:25.847" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/13340/obmc-robot/logs/20170706171525749346_TestsTestBasicPoweron/20170706171525749346_PowerOnTest/20170706171525749346_BMC_general.txt"&gt;/tmp/fspcibld/13340/obmc-robot/logs/20170706171525749346_TestsTestBasicPoweron/20170706171525749346_PowerOnTest/20170706171525749346_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170706 17:15:25.848" status="PASS" starttime="20170706 17:15:25.847"></status>
</kw>
<status endtime="20170706 17:15:25.848" status="PASS" starttime="20170706 17:15:25.847"></status>
</kw>
<kw name="Test Setup Info" library="openbmc_ffdc_utils">
<doc>BMC IP, Model and other information</doc>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170706 17:15:25.849" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/13340/obmc-robot/logs/20170706171525749346_TestsTestBasicPoweron/20170706171525749346_PowerOnTest/20170706171525749346_BMC_general.txt"&gt;/tmp/fspcibld/13340/obmc-robot/logs/20170706171525749346_TestsTestBasicPoweron/20170706171525749346_PowerOnTest/20170706171525749346_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170706 17:15:25.849" status="PASS" starttime="20170706 17:15:25.849"></status>
</kw>
<status endtime="20170706 17:15:25.849" status="PASS" starttime="20170706 17:15:25.848"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Setup Information:</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170706 17:15:25.851" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/13340/obmc-robot/logs/20170706171525749346_TestsTestBasicPoweron/20170706171525749346_PowerOnTest/20170706171525749346_BMC_general.txt"&gt;/tmp/fspcibld/13340/obmc-robot/logs/20170706171525749346_TestsTestBasicPoweron/20170706171525749346_PowerOnTest/20170706171525749346_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170706 17:15:25.851" status="PASS" starttime="20170706 17:15:25.850"></status>
</kw>
<status endtime="20170706 17:15:25.851" status="PASS" starttime="20170706 17:15:25.850"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170706 17:15:25.852" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/13340/obmc-robot/logs/20170706171525749346_TestsTestBasicPoweron/20170706171525749346_PowerOnTest/20170706171525749346_BMC_general.txt"&gt;/tmp/fspcibld/13340/obmc-robot/logs/20170706171525749346_TestsTestBasicPoweron/20170706171525749346_PowerOnTest/20170706171525749346_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170706 17:15:25.852" status="PASS" starttime="20170706 17:15:25.851"></status>
</kw>
<status endtime="20170706 17:15:25.852" status="PASS" starttime="20170706 17:15:25.851"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>OPENBMC HOST \t: ${OPENBMC_HOST}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170706 17:15:25.853" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/13340/obmc-robot/logs/20170706171525749346_TestsTestBasicPoweron/20170706171525749346_PowerOnTest/20170706171525749346_BMC_general.txt"&gt;/tmp/fspcibld/13340/obmc-robot/logs/20170706171525749346_TestsTestBasicPoweron/20170706171525749346_PowerOnTest/20170706171525749346_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170706 17:15:25.853" status="PASS" starttime="20170706 17:15:25.853"></status>
</kw>
<status endtime="20170706 17:15:25.854" status="PASS" starttime="20170706 17:15:25.852"></status>
</kw>
<kw name="Get BMC System Model" library="utils">
<doc>Get the BMC model from the device tree.</doc>
<assign>
<var>${model_name}</var>
</assign>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170706 17:15:25.856" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status endtime="20170706 17:15:25.856" status="FAIL" starttime="20170706 17:15:25.855"></status>
</kw>
<msg timestamp="20170706 17:15:25.856" level="INFO">${has_host} = False</msg>
<status endtime="20170706 17:15:25.856" status="PASS" starttime="20170706 17:15:25.855"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status endtime="20170706 17:15:25.857" status="PASS" starttime="20170706 17:15:25.857"></status>
</kw>
<status endtime="20170706 17:15:25.857" status="PASS" starttime="20170706 17:15:25.856"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg timestamp="20170706 17:15:25.859" level="INFO">${port_num} = 22</msg>
<status endtime="20170706 17:15:25.859" status="PASS" starttime="20170706 17:15:25.859"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg timestamp="20170706 17:15:25.860" level="INFO">${SSH_PORT} = 22</msg>
<status endtime="20170706 17:15:25.860" status="PASS" starttime="20170706 17:15:25.859"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg timestamp="20170706 17:15:25.860" level="INFO">${https_num} = 443</msg>
<status endtime="20170706 17:15:25.860" status="PASS" starttime="20170706 17:15:25.860"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg timestamp="20170706 17:15:25.861" level="INFO">${AUTH_URI} = https://9.3.21.61:443</msg>
<status endtime="20170706 17:15:25.861" status="PASS" starttime="20170706 17:15:25.861"></status>
</kw>
<status endtime="20170706 17:15:25.861" status="PASS" starttime="20170706 17:15:25.858"></status>
</kw>
<status endtime="20170706 17:15:25.861" status="PASS" starttime="20170706 17:15:25.858"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170706 17:15:25.862" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status endtime="20170706 17:15:25.862" status="FAIL" starttime="20170706 17:15:25.862"></status>
</kw>
<msg timestamp="20170706 17:15:25.862" level="INFO">${has_port} = False</msg>
<status endtime="20170706 17:15:25.862" status="PASS" starttime="20170706 17:15:25.862"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status endtime="20170706 17:15:25.864" status="PASS" starttime="20170706 17:15:25.864"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status endtime="20170706 17:15:25.865" status="PASS" starttime="20170706 17:15:25.864"></status>
</kw>
<status endtime="20170706 17:15:25.865" status="PASS" starttime="20170706 17:15:25.863"></status>
</kw>
<status endtime="20170706 17:15:25.865" status="PASS" starttime="20170706 17:15:25.863"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170706 17:15:25.866" level="INFO">Logging into '9.3.21.61:22' as 'root'.</msg>
<msg timestamp="20170706 17:15:27.520" level="INFO">Read output: root@witherspoon:~#</msg>
<status endtime="20170706 17:15:27.520" status="PASS" starttime="20170706 17:15:25.865"></status>
</kw>
<status endtime="20170706 17:15:27.521" status="PASS" starttime="20170706 17:15:25.854"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170706 17:15:27.521" level="INFO">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg timestamp="20170706 17:15:27.598" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170706 17:15:27.598" level="INFO">${bmc_model} = Witherspoon</msg>
<msg timestamp="20170706 17:15:27.598" level="INFO">${stderr} = </msg>
<status endtime="20170706 17:15:27.598" status="PASS" starttime="20170706 17:15:27.521"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170706 17:15:27.599" level="INFO">Length is 0</msg>
<status endtime="20170706 17:15:27.599" status="PASS" starttime="20170706 17:15:27.598"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg timestamp="20170706 17:15:27.599" level="INFO">Length is 11</msg>
<status endtime="20170706 17:15:27.599" status="PASS" starttime="20170706 17:15:27.599"></status>
</kw>
<msg timestamp="20170706 17:15:27.599" level="INFO">${model_name} = Witherspoon</msg>
<status endtime="20170706 17:15:27.600" status="PASS" starttime="20170706 17:15:25.854"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>SYSTEM TYPE \t: ${model_name}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170706 17:15:27.601" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/13340/obmc-robot/logs/20170706171525749346_TestsTestBasicPoweron/20170706171525749346_PowerOnTest/20170706171525749346_BMC_general.txt"&gt;/tmp/fspcibld/13340/obmc-robot/logs/20170706171525749346_TestsTestBasicPoweron/20170706171525749346_PowerOnTest/20170706171525749346_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170706 17:15:27.601" status="PASS" starttime="20170706 17:15:27.601"></status>
</kw>
<status endtime="20170706 17:15:27.602" status="PASS" starttime="20170706 17:15:27.600"></status>
</kw>
<status endtime="20170706 17:15:27.602" status="PASS" starttime="20170706 17:15:25.848"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${MSG_INTRO}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170706 17:15:27.603" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/13340/obmc-robot/logs/20170706171525749346_TestsTestBasicPoweron/20170706171525749346_PowerOnTest/20170706171525749346_BMC_general.txt"&gt;/tmp/fspcibld/13340/obmc-robot/logs/20170706171525749346_TestsTestBasicPoweron/20170706171525749346_PowerOnTest/20170706171525749346_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170706 17:15:27.603" status="PASS" starttime="20170706 17:15:27.602"></status>
</kw>
<status endtime="20170706 17:15:27.603" status="PASS" starttime="20170706 17:15:27.602"></status>
</kw>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170706 17:15:27.603" level="INFO">@{entries} = [ BMC DATA | DRIVER INFO | APPLICATION DATA ]</msg>
<status endtime="20170706 17:15:27.604" status="PASS" starttime="20170706 17:15:27.603"></status>
</kw>
<kw name="${index} IN [ @{entries} ]" type="for">
<kw name="${index} = BMC DATA" type="foritem">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170706 17:15:27.605" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/13340/obmc-robot/logs/20170706171525749346_TestsTestBasicPoweron/20170706171525749346_PowerOnTest/20170706171525749346_BMC_general.txt"&gt;/tmp/fspcibld/13340/obmc-robot/logs/20170706171525749346_TestsTestBasicPoweron/20170706171525749346_PowerOnTest/20170706171525749346_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170706 17:15:27.605" status="PASS" starttime="20170706 17:15:27.605"></status>
</kw>
<status endtime="20170706 17:15:27.605" status="PASS" starttime="20170706 17:15:27.604"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170706 17:15:27.606" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/13340/obmc-robot/logs/20170706171525749346_TestsTestBasicPoweron/20170706171525749346_PowerOnTest/20170706171525749346_BMC_general.txt"&gt;/tmp/fspcibld/13340/obmc-robot/logs/20170706171525749346_TestsTestBasicPoweron/20170706171525749346_PowerOnTest/20170706171525749346_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170706 17:15:27.606" status="PASS" starttime="20170706 17:15:27.606"></status>
</kw>
<status endtime="20170706 17:15:27.606" status="PASS" starttime="20170706 17:15:27.605"></status>
</kw>
<status endtime="20170706 17:15:27.607" status="PASS" starttime="20170706 17:15:27.604"></status>
</kw>
<kw name="${index} = DRIVER INFO" type="foritem">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170706 17:15:27.608" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/13340/obmc-robot/logs/20170706171525749346_TestsTestBasicPoweron/20170706171525749346_PowerOnTest/20170706171525749346_BMC_general.txt"&gt;/tmp/fspcibld/13340/obmc-robot/logs/20170706171525749346_TestsTestBasicPoweron/20170706171525749346_PowerOnTest/20170706171525749346_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170706 17:15:27.608" status="PASS" starttime="20170706 17:15:27.607"></status>
</kw>
<status endtime="20170706 17:15:27.608" status="PASS" starttime="20170706 17:15:27.607"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170706 17:15:27.609" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/13340/obmc-robot/logs/20170706171525749346_TestsTestBasicPoweron/20170706171525749346_PowerOnTest/20170706171525749346_BMC_general.txt"&gt;/tmp/fspcibld/13340/obmc-robot/logs/20170706171525749346_TestsTestBasicPoweron/20170706171525749346_PowerOnTest/20170706171525749346_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170706 17:15:27.609" status="PASS" starttime="20170706 17:15:27.609"></status>
</kw>
<status endtime="20170706 17:15:27.609" status="PASS" starttime="20170706 17:15:27.608"></status>
</kw>
<status endtime="20170706 17:15:27.609" status="PASS" starttime="20170706 17:15:27.607"></status>
</kw>
<kw name="${index} = APPLICATION DATA" type="foritem">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170706 17:15:27.611" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/13340/obmc-robot/logs/20170706171525749346_TestsTestBasicPoweron/20170706171525749346_PowerOnTest/20170706171525749346_BMC_general.txt"&gt;/tmp/fspcibld/13340/obmc-robot/logs/20170706171525749346_TestsTestBasicPoweron/20170706171525749346_PowerOnTest/20170706171525749346_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170706 17:15:27.611" status="PASS" starttime="20170706 17:15:27.610"></status>
</kw>
<status endtime="20170706 17:15:27.611" status="PASS" starttime="20170706 17:15:27.610"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170706 17:15:27.612" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/13340/obmc-robot/logs/20170706171525749346_TestsTestBasicPoweron/20170706171525749346_PowerOnTest/20170706171525749346_BMC_general.txt"&gt;/tmp/fspcibld/13340/obmc-robot/logs/20170706171525749346_TestsTestBasicPoweron/20170706171525749346_PowerOnTest/20170706171525749346_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170706 17:15:27.612" status="PASS" starttime="20170706 17:15:27.611"></status>
</kw>
<status endtime="20170706 17:15:27.612" status="PASS" starttime="20170706 17:15:27.611"></status>
</kw>
<status endtime="20170706 17:15:27.612" status="PASS" starttime="20170706 17:15:27.609"></status>
</kw>
<status endtime="20170706 17:15:27.612" status="PASS" starttime="20170706 17:15:27.604"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${MSG_DETAIL}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170706 17:15:27.613" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/13340/obmc-robot/logs/20170706171525749346_TestsTestBasicPoweron/20170706171525749346_PowerOnTest/20170706171525749346_BMC_general.txt"&gt;/tmp/fspcibld/13340/obmc-robot/logs/20170706171525749346_TestsTestBasicPoweron/20170706171525749346_PowerOnTest/20170706171525749346_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170706 17:15:27.613" status="PASS" starttime="20170706 17:15:27.613"></status>
</kw>
<status endtime="20170706 17:15:27.614" status="PASS" starttime="20170706 17:15:27.612"></status>
</kw>
<status endtime="20170706 17:15:27.614" status="PASS" starttime="20170706 17:15:25.834"></status>
</kw>
<kw name="Call FFDC Methods" library="openbmc_ffdc_methods">
<doc>Call into FFDC Keyword index list.</doc>
<arguments>
<arg>ffdc_function_list=</arg>
</arguments>
<kw name="Get Ffdc Method Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170706 17:15:27.625" level="INFO">@{entries} = [ BMC LOGS ]</msg>
<status endtime="20170706 17:15:27.625" status="PASS" starttime="20170706 17:15:27.624"></status>
</kw>
<kw name="${index} IN [ @{entries} ]" type="for">
<kw name="${index} = BMC LOGS" type="foritem">
<kw name="Method Call Keyword List" library="openbmc_ffdc_methods">
<doc>Iterate the list through keyword index.</doc>
<arguments>
<arg>${index}</arg>
<arg>${ffdc_function_list}</arg>
</arguments>
<kw name="Get Ffdc Method Call" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<assign>
<var>@{method_list}</var>
</assign>
<msg timestamp="20170706 17:15:27.626" level="INFO">@{method_list} = [ ('Get Request FFDC', 'BMC FFDC Get Requests') | ('OS FFDC', 'OS FFDC Files') | ('FFDC Generic Report', 'BMC FFDC Manifest') | ('BMC Specific Files', 'BMC FFDC Files') | ('SEL Log', 'Collect eSEL Log...</msg>
<status endtime="20170706 17:15:27.626" status="PASS" starttime="20170706 17:15:27.626"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ffdc_function_list}' == '${EMPTY}'</arg>
<arg>Get FFDC Method Desc</arg>
<arg>${index}</arg>
<arg>ELSE</arg>
<arg>Split String</arg>
<arg>${ffdc_function_list}</arg>
<arg>separator=:</arg>
</arguments>
<assign>
<var>@{ffdc_function_list}</var>
</assign>
<kw name="Get Ffdc Method Desc" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<status endtime="20170706 17:15:27.628" status="PASS" starttime="20170706 17:15:27.627"></status>
</kw>
<msg timestamp="20170706 17:15:27.628" level="INFO">@{ffdc_function_list} = [ Get Request FFDC | OS FFDC | FFDC Generic Report | BMC Specific Files | SEL Log | Core Files ]</msg>
<status endtime="20170706 17:15:27.628" status="PASS" starttime="20170706 17:15:27.626"></status>
</kw>
<kw name="${method} IN [ @{method_list} ]" type="for">
<kw name="${method} = ('Get Request FFDC', 'BMC FFDC Get Requests')" type="foritem">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status endtime="20170706 17:15:27.630" status="PASS" starttime="20170706 17:15:27.629"></status>
</kw>
<msg timestamp="20170706 17:15:27.630" level="INFO">${status} = PASS</msg>
<msg timestamp="20170706 17:15:27.630" level="INFO">${ret_values} = None</msg>
<status endtime="20170706 17:15:27.630" status="PASS" starttime="20170706 17:15:27.629"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status endtime="20170706 17:15:27.630" status="PASS" starttime="20170706 17:15:27.630"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Get Requests" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170706 17:15:27.695" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status endtime="20170706 17:15:27.695" status="FAIL" starttime="20170706 17:15:27.694"></status>
</kw>
<msg timestamp="20170706 17:15:27.695" level="INFO">${has_host} = False</msg>
<status endtime="20170706 17:15:27.695" status="PASS" starttime="20170706 17:15:27.692"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status endtime="20170706 17:15:27.697" status="PASS" starttime="20170706 17:15:27.696"></status>
</kw>
<status endtime="20170706 17:15:27.697" status="PASS" starttime="20170706 17:15:27.696"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg timestamp="20170706 17:15:27.699" level="INFO">${port_num} = 22</msg>
<status endtime="20170706 17:15:27.699" status="PASS" starttime="20170706 17:15:27.699"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg timestamp="20170706 17:15:27.700" level="INFO">${SSH_PORT} = 22</msg>
<status endtime="20170706 17:15:27.700" status="PASS" starttime="20170706 17:15:27.699"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg timestamp="20170706 17:15:27.704" level="INFO">${https_num} = 443</msg>
<status endtime="20170706 17:15:27.704" status="PASS" starttime="20170706 17:15:27.704"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg timestamp="20170706 17:15:27.705" level="INFO">${AUTH_URI} = https://9.3.21.61:443</msg>
<status endtime="20170706 17:15:27.705" status="PASS" starttime="20170706 17:15:27.704"></status>
</kw>
<status endtime="20170706 17:15:27.705" status="PASS" starttime="20170706 17:15:27.698"></status>
</kw>
<status endtime="20170706 17:15:27.705" status="PASS" starttime="20170706 17:15:27.697"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170706 17:15:27.706" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status endtime="20170706 17:15:27.706" status="FAIL" starttime="20170706 17:15:27.706"></status>
</kw>
<msg timestamp="20170706 17:15:27.706" level="INFO">${has_port} = False</msg>
<status endtime="20170706 17:15:27.706" status="PASS" starttime="20170706 17:15:27.705"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status endtime="20170706 17:15:27.708" status="PASS" starttime="20170706 17:15:27.708"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status endtime="20170706 17:15:27.709" status="PASS" starttime="20170706 17:15:27.709"></status>
</kw>
<status endtime="20170706 17:15:27.709" status="PASS" starttime="20170706 17:15:27.707"></status>
</kw>
<status endtime="20170706 17:15:27.709" status="PASS" starttime="20170706 17:15:27.707"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170706 17:15:27.710" level="INFO">Logging into '9.3.21.61:22' as 'root'.</msg>
<msg timestamp="20170706 17:15:29.457" level="INFO">Read output: root@witherspoon:~#</msg>
<status endtime="20170706 17:15:29.457" status="PASS" starttime="20170706 17:15:27.709"></status>
</kw>
<status endtime="20170706 17:15:29.457" status="PASS" starttime="20170706 17:15:27.691"></status>
</kw>
<kw name="Get Ffdc Get Request Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170706 17:15:29.458" level="INFO">@{entries} = [ GET REQUESTS ]</msg>
<status endtime="20170706 17:15:29.458" status="PASS" starttime="20170706 17:15:29.458"></status>
</kw>
<kw name="${index} IN [ @{entries} ]" type="for">
<kw name="${index} = GET REQUESTS" type="foritem">
<kw name="Log FFDC Get Requests" library="openbmc_ffdc_methods">
<doc>Create file in current FFDC log directory.</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Get Request" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170706 17:15:29.459" level="INFO">@{cmd_list} = [ ('BMC_record_log', '/org/openbmc/control/led/enumerate') | ('BMC_sensor_list', '/org/openbmc/sensors/enumerate') | ('BMC_inventory', '/xyz/openbmc_project/inventory/enumerate') | ('BMC_led', '/org/o...</msg>
<status endtime="20170706 17:15:29.459" status="PASS" starttime="20170706 17:15:29.459"></status>
</kw>
<kw name="${cmd} IN [ @{cmd_list} ]" type="for">
<kw name="${cmd} = ('BMC_record_log', '/org/openbmc/control/led/enumerate')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170706 17:15:29.460" level="INFO">${logpath} = /tmp/fspcibld/13340/obmc-robot/logs/20170706171525749346_TestsTestBasicPoweron/20170706171525749346_PowerOnTest/20170706171525749346_BMC_record_log.txt</msg>
<status endtime="20170706 17:15:29.460" status="PASS" starttime="20170706 17:15:29.460"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170706 17:15:29.463" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170706 17:15:29.464" status="PASS" starttime="20170706 17:15:29.463"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170706 17:15:29.465" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170706 17:15:29.465" status="PASS" starttime="20170706 17:15:29.464"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170706 17:15:29.465" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170706 17:15:29.465" status="PASS" starttime="20170706 17:15:29.465"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170706 17:15:29.466" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170706 17:15:29.466" status="PASS" starttime="20170706 17:15:29.466"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170706 17:15:29.645" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170706 17:15:29.646" status="PASS" starttime="20170706 17:15:29.467"></status>
</kw>
<msg timestamp="20170706 17:15:29.646" level="INFO">${status} = PASS</msg>
<msg timestamp="20170706 17:15:29.646" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170706 17:15:29.646" status="PASS" starttime="20170706 17:15:29.466"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170706 17:15:29.646" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170706 17:15:29.646" status="PASS" starttime="20170706 17:15:29.646"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170706 17:15:29.647" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170706 17:15:29.647" status="PASS" starttime="20170706 17:15:29.647"></status>
</kw>
<status endtime="20170706 17:15:29.647" status="PASS" starttime="20170706 17:15:29.462"></status>
</kw>
<status endtime="20170706 17:15:29.647" status="PASS" starttime="20170706 17:15:29.462"></status>
</kw>
<status endtime="20170706 17:15:29.647" status="PASS" starttime="20170706 17:15:29.461"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170706 17:15:29.648" level="INFO">${base_uri} = /org/openbmc/control/led/enumerate</msg>
<status endtime="20170706 17:15:29.648" status="PASS" starttime="20170706 17:15:29.648"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170706 17:15:29.649" status="PASS" starttime="20170706 17:15:29.648"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170706 17:15:29.696" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/led/enumerate, headers=None json=None</msg>
<msg timestamp="20170706 17:15:29.696" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status endtime="20170706 17:15:29.696" status="PASS" starttime="20170706 17:15:29.649"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170706 17:15:29.697" status="PASS" starttime="20170706 17:15:29.696"></status>
</kw>
<msg timestamp="20170706 17:15:29.697" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status endtime="20170706 17:15:29.697" status="PASS" starttime="20170706 17:15:29.460"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170706 17:15:29.698" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170706 17:15:29.698" level="FAIL">404 != 200</msg>
<status endtime="20170706 17:15:29.698" status="FAIL" starttime="20170706 17:15:29.698"></status>
</kw>
<msg timestamp="20170706 17:15:29.698" level="INFO">${status} = False</msg>
<status endtime="20170706 17:15:29.698" status="PASS" starttime="20170706 17:15:29.697"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg timestamp="20170706 17:15:29.699" level="INFO">Continuing for loop from the next iteration.</msg>
<status endtime="20170706 17:15:29.699" status="PASS" starttime="20170706 17:15:29.699"></status>
</kw>
<status endtime="20170706 17:15:29.699" status="PASS" starttime="20170706 17:15:29.699"></status>
</kw>
<status endtime="20170706 17:15:29.699" status="PASS" starttime="20170706 17:15:29.459"></status>
</kw>
<kw name="${cmd} = ('BMC_sensor_list', '/org/openbmc/sensors/enumerate')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170706 17:15:29.700" level="INFO">${logpath} = /tmp/fspcibld/13340/obmc-robot/logs/20170706171525749346_TestsTestBasicPoweron/20170706171525749346_PowerOnTest/20170706171525749346_BMC_sensor_list.txt</msg>
<status endtime="20170706 17:15:29.700" status="PASS" starttime="20170706 17:15:29.700"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170706 17:15:29.703" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170706 17:15:29.704" status="PASS" starttime="20170706 17:15:29.703"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170706 17:15:29.704" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170706 17:15:29.704" status="PASS" starttime="20170706 17:15:29.704"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170706 17:15:29.705" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170706 17:15:29.705" status="PASS" starttime="20170706 17:15:29.705"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170706 17:15:29.706" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170706 17:15:29.706" status="PASS" starttime="20170706 17:15:29.705"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170706 17:15:29.886" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170706 17:15:29.886" status="PASS" starttime="20170706 17:15:29.706"></status>
</kw>
<msg timestamp="20170706 17:15:29.886" level="INFO">${status} = PASS</msg>
<msg timestamp="20170706 17:15:29.886" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170706 17:15:29.886" status="PASS" starttime="20170706 17:15:29.706"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170706 17:15:29.887" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170706 17:15:29.887" status="PASS" starttime="20170706 17:15:29.886"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170706 17:15:29.887" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170706 17:15:29.887" status="PASS" starttime="20170706 17:15:29.887"></status>
</kw>
<status endtime="20170706 17:15:29.888" status="PASS" starttime="20170706 17:15:29.702"></status>
</kw>
<status endtime="20170706 17:15:29.888" status="PASS" starttime="20170706 17:15:29.702"></status>
</kw>
<status endtime="20170706 17:15:29.888" status="PASS" starttime="20170706 17:15:29.701"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170706 17:15:29.888" level="INFO">${base_uri} = /org/openbmc/sensors/enumerate</msg>
<status endtime="20170706 17:15:29.888" status="PASS" starttime="20170706 17:15:29.888"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170706 17:15:29.889" status="PASS" starttime="20170706 17:15:29.889"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170706 17:15:30.124" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/enumerate, headers=None json=None</msg>
<msg timestamp="20170706 17:15:30.124" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170706 17:15:30.124" status="PASS" starttime="20170706 17:15:29.889"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170706 17:15:30.125" status="PASS" starttime="20170706 17:15:30.124"></status>
</kw>
<msg timestamp="20170706 17:15:30.125" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170706 17:15:30.125" status="PASS" starttime="20170706 17:15:29.700"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170706 17:15:30.126" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170706 17:15:30.126" status="PASS" starttime="20170706 17:15:30.126"></status>
</kw>
<msg timestamp="20170706 17:15:30.126" level="INFO">${status} = True</msg>
<status endtime="20170706 17:15:30.126" status="PASS" starttime="20170706 17:15:30.125"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status endtime="20170706 17:15:30.127" status="PASS" starttime="20170706 17:15:30.126"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170706 17:15:30.128" level="INFO">To JSON using : content={
  "data": {
    "/org/openbmc/sensors/host/BootCount": {
      "error": 0, 
      "units": "", 
      "value": 1
    }, 
    "/org/openbmc/sensors/host/BootProgress": {
      "error": 0, 
      "units": "", 
      "value": "FW Progress, Starting OS"
    }, 
    "/org/openbmc/sensors/host/OperatingSystemStatus": {
      "error": 0, 
      "units": "", 
      "value": "Off"
    }, 
    "/org/openbmc/sensors/host/PowerSupplyDerating": {
      "error": 0, 
      "units": "", 
      "value": 10
    }, 
    "/org/openbmc/sensors/host/PowerSupplyRedundancy": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/TurboAllowed": {
      "error": 0, 
      "units": "", 
      "value": 0
    }, 
    "/org/openbmc/sensors/host/cpu0/OccStatus": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/cpu1/OccStatus": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/powercap": {
      "error": 0, 
      "units": "", 
      "value": 0
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170706 17:15:30.128" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170706 17:15:30.128" level="INFO">${jsondata} = {
    "data": {
        "/org/openbmc/sensors/host/BootCount": {
            "error": 0,
            "units": "",
            "value": 1
        },
        "/org/openbmc/sensors/host/BootProgress": {
...</msg>
<status endtime="20170706 17:15:30.128" status="PASS" starttime="20170706 17:15:30.127"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170706 17:15:30.129" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/13340/obmc-robot/logs/20170706171525749346_TestsTestBasicPoweron/20170706171525749346_PowerOnTest/20170706171525749346_BMC_sensor_list.txt"&gt;/tmp/fspcibld/13340/obmc-robot/logs/20170706171525749346_TestsTestBasicPoweron/20170706171525749346_PowerOnTest/20170706171525749346_BMC_sensor_list.txt&lt;/a&gt;'.</msg>
<status endtime="20170706 17:15:30.129" status="PASS" starttime="20170706 17:15:30.129"></status>
</kw>
<status endtime="20170706 17:15:30.129" status="PASS" starttime="20170706 17:15:30.128"></status>
</kw>
<status endtime="20170706 17:15:30.130" status="PASS" starttime="20170706 17:15:29.700"></status>
</kw>
<kw name="${cmd} = ('BMC_inventory', '/xyz/openbmc_project/inventory/enumerate')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170706 17:15:30.130" level="INFO">${logpath} = /tmp/fspcibld/13340/obmc-robot/logs/20170706171525749346_TestsTestBasicPoweron/20170706171525749346_PowerOnTest/20170706171525749346_BMC_inventory.txt</msg>
<status endtime="20170706 17:15:30.130" status="PASS" starttime="20170706 17:15:30.130"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170706 17:15:30.135" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170706 17:15:30.135" status="PASS" starttime="20170706 17:15:30.133"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170706 17:15:30.136" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170706 17:15:30.136" status="PASS" starttime="20170706 17:15:30.135"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170706 17:15:30.136" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170706 17:15:30.136" status="PASS" starttime="20170706 17:15:30.136"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170706 17:15:30.137" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170706 17:15:30.137" status="PASS" starttime="20170706 17:15:30.137"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170706 17:15:30.339" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170706 17:15:30.340" status="PASS" starttime="20170706 17:15:30.138"></status>
</kw>
<msg timestamp="20170706 17:15:30.340" level="INFO">${status} = PASS</msg>
<msg timestamp="20170706 17:15:30.340" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170706 17:15:30.340" status="PASS" starttime="20170706 17:15:30.137"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170706 17:15:30.341" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170706 17:15:30.341" status="PASS" starttime="20170706 17:15:30.340"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170706 17:15:30.342" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170706 17:15:30.342" status="PASS" starttime="20170706 17:15:30.341"></status>
</kw>
<status endtime="20170706 17:15:30.342" status="PASS" starttime="20170706 17:15:30.132"></status>
</kw>
<status endtime="20170706 17:15:30.342" status="PASS" starttime="20170706 17:15:30.132"></status>
</kw>
<status endtime="20170706 17:15:30.342" status="PASS" starttime="20170706 17:15:30.131"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170706 17:15:30.343" level="INFO">${base_uri} = /xyz/openbmc_project/inventory/enumerate</msg>
<status endtime="20170706 17:15:30.343" status="PASS" starttime="20170706 17:15:30.342"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170706 17:15:30.344" status="PASS" starttime="20170706 17:15:30.343"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170706 17:15:32.281" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/inventory/enumerate, headers=None json=None</msg>
<msg timestamp="20170706 17:15:32.282" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170706 17:15:32.282" status="PASS" starttime="20170706 17:15:30.344"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170706 17:15:32.282" status="PASS" starttime="20170706 17:15:32.282"></status>
</kw>
<msg timestamp="20170706 17:15:32.283" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170706 17:15:32.283" status="PASS" starttime="20170706 17:15:30.130"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170706 17:15:32.284" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170706 17:15:32.284" status="PASS" starttime="20170706 17:15:32.283"></status>
</kw>
<msg timestamp="20170706 17:15:32.284" level="INFO">${status} = True</msg>
<status endtime="20170706 17:15:32.284" status="PASS" starttime="20170706 17:15:32.283"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status endtime="20170706 17:15:32.284" status="PASS" starttime="20170706 17:15:32.284"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170706 17:15:32.287" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/inventory/system": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 0, 
      "Manufacturer": "", 
      "Model": "8335-GTC", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "", 
      "SerialNumber": "13186FA"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis": {
      "AirCooled": 1, 
      "WaterCooled": 1
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard": {
      "BuildDate": "", 
      "Manufacturer": "0000000000000000", 
      "Model": "", 
      "PartNumber": "00VK614         ", 
      "Present": 0, 
      "PrettyName": "SYSTEM PLANAR   ", 
      "SerialNumber": "YL30UF759004    "
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc": {
      "BuildDate": "", 
      "FieldReplaceable": 0, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01DH118", 
      "Present": 1, 
      "PrettyName": "BMC PLANAR  ", 
      "SerialNumber": "000000000000"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc/ethernet": {
      "FieldReplaceable": 0, 
      "MACAddress": "00:00:00:00:00:00", 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01HL983", 
      "Present": 1, 
      "PrettyName": "PROCESSOR MODULE", 
      "SerialNumber": "YA3933820456", 
      "Version": "10"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core0": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core1": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core10": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core11": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core12": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core13": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core14": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core15": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core16": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core17": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core18": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core19": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core2": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core20": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core21": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core22": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core23": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core3": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core4": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core5": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core6": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core7": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core8": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core9": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01HL983", 
      "Present": 1, 
      "PrettyName": "PROCESSOR MODULE", 
      "SerialNumber": "YA3933817667", 
      "Version": "10"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core0": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core1": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core10": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core11": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core12": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core13": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core14": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core15": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core16": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core17": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core18": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core19": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core2": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core20": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core21": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core22": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core23": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core3": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core4": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core5": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core6": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core7": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core8": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core9": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm0": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "18ASF1G72PZ-2G6B1   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x16c7bbd9", 
      "Version": "0x31"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm1": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "18ASF1G72PZ-2G6B1   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x16c7b8a5", 
      "Version": "0x31"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm10": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm11": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm12": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm13": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm14": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "18ASF1G72PZ-2G6B1   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x16c7b974", 
      "Version": "0x31"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm15": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm2": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm3": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm4": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm5": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm6": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "18ASF1G72PZ-2G6B1   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x16c7bbab", 
      "Version": "0x31"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm7": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "18ASF1G72PZ-2G6B1   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x16c7e64d", 
      "Version": "0x31"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm8": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "18ASF1G72PZ-2G6B1   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x16c7bbea", 
      "Version": "0x31"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm9": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "18ASF1G72PZ-2G6B1   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x16c7bbcf", 
      "Version": "0x31"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan0": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": "fan0"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan1": {
      "Functional": 0, 
      "Present": 1, 
      "PrettyName": "fan1"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan2": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": "fan2"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan3": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": "fan3"
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170706 17:15:32.288" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170706 17:15:32.288" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/inventory/system": {
            "BuildDate": "",
            "Cached": 0,
            "FieldReplaceable": 0,
            "Manufacturer": "",
            ...</msg>
<status endtime="20170706 17:15:32.288" status="PASS" starttime="20170706 17:15:32.285"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170706 17:15:32.289" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/13340/obmc-robot/logs/20170706171525749346_TestsTestBasicPoweron/20170706171525749346_PowerOnTest/20170706171525749346_BMC_inventory.txt"&gt;/tmp/fspcibld/13340/obmc-robot/logs/20170706171525749346_TestsTestBasicPoweron/20170706171525749346_PowerOnTest/20170706171525749346_BMC_inventory.txt&lt;/a&gt;'.</msg>
<status endtime="20170706 17:15:32.290" status="PASS" starttime="20170706 17:15:32.289"></status>
</kw>
<status endtime="20170706 17:15:32.290" status="PASS" starttime="20170706 17:15:32.288"></status>
</kw>
<status endtime="20170706 17:15:32.290" status="PASS" starttime="20170706 17:15:30.130"></status>
</kw>
<kw name="${cmd} = ('BMC_led', '/org/openbmc/records/events/enumerate')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170706 17:15:32.291" level="INFO">${logpath} = /tmp/fspcibld/13340/obmc-robot/logs/20170706171525749346_TestsTestBasicPoweron/20170706171525749346_PowerOnTest/20170706171525749346_BMC_led.txt</msg>
<status endtime="20170706 17:15:32.291" status="PASS" starttime="20170706 17:15:32.290"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170706 17:15:32.321" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170706 17:15:32.321" status="PASS" starttime="20170706 17:15:32.320"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170706 17:15:32.322" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170706 17:15:32.322" status="PASS" starttime="20170706 17:15:32.321"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170706 17:15:32.323" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170706 17:15:32.323" status="PASS" starttime="20170706 17:15:32.322"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170706 17:15:32.324" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170706 17:15:32.324" status="PASS" starttime="20170706 17:15:32.323"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170706 17:15:32.515" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170706 17:15:32.515" status="PASS" starttime="20170706 17:15:32.325"></status>
</kw>
<msg timestamp="20170706 17:15:32.516" level="INFO">${status} = PASS</msg>
<msg timestamp="20170706 17:15:32.516" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170706 17:15:32.516" status="PASS" starttime="20170706 17:15:32.324"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170706 17:15:32.516" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170706 17:15:32.516" status="PASS" starttime="20170706 17:15:32.516"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170706 17:15:32.517" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170706 17:15:32.517" status="PASS" starttime="20170706 17:15:32.516"></status>
</kw>
<status endtime="20170706 17:15:32.517" status="PASS" starttime="20170706 17:15:32.292"></status>
</kw>
<status endtime="20170706 17:15:32.517" status="PASS" starttime="20170706 17:15:32.292"></status>
</kw>
<status endtime="20170706 17:15:32.517" status="PASS" starttime="20170706 17:15:32.291"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170706 17:15:32.518" level="INFO">${base_uri} = /org/openbmc/records/events/enumerate</msg>
<status endtime="20170706 17:15:32.518" status="PASS" starttime="20170706 17:15:32.517"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170706 17:15:32.518" status="PASS" starttime="20170706 17:15:32.518"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170706 17:15:32.593" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/records/events/enumerate, headers=None json=None</msg>
<msg timestamp="20170706 17:15:32.593" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status endtime="20170706 17:15:32.593" status="PASS" starttime="20170706 17:15:32.519"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170706 17:15:32.594" status="PASS" starttime="20170706 17:15:32.593"></status>
</kw>
<msg timestamp="20170706 17:15:32.594" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status endtime="20170706 17:15:32.594" status="PASS" starttime="20170706 17:15:32.291"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170706 17:15:32.595" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170706 17:15:32.595" level="FAIL">404 != 200</msg>
<status endtime="20170706 17:15:32.595" status="FAIL" starttime="20170706 17:15:32.594"></status>
</kw>
<msg timestamp="20170706 17:15:32.595" level="INFO">${status} = False</msg>
<status endtime="20170706 17:15:32.595" status="PASS" starttime="20170706 17:15:32.594"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg timestamp="20170706 17:15:32.596" level="INFO">Continuing for loop from the next iteration.</msg>
<status endtime="20170706 17:15:32.596" status="PASS" starttime="20170706 17:15:32.596"></status>
</kw>
<status endtime="20170706 17:15:32.596" status="PASS" starttime="20170706 17:15:32.595"></status>
</kw>
<status endtime="20170706 17:15:32.596" status="PASS" starttime="20170706 17:15:32.290"></status>
</kw>
<kw name="${cmd} = ('BMC_elog', '/xyz/openbmc_project/logging/entry/enumerate')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170706 17:15:32.597" level="INFO">${logpath} = /tmp/fspcibld/13340/obmc-robot/logs/20170706171525749346_TestsTestBasicPoweron/20170706171525749346_PowerOnTest/20170706171525749346_BMC_elog.txt</msg>
<status endtime="20170706 17:15:32.597" status="PASS" starttime="20170706 17:15:32.597"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170706 17:15:32.600" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170706 17:15:32.600" status="PASS" starttime="20170706 17:15:32.600"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170706 17:15:32.601" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170706 17:15:32.601" status="PASS" starttime="20170706 17:15:32.600"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170706 17:15:32.601" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170706 17:15:32.601" status="PASS" starttime="20170706 17:15:32.601"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170706 17:15:32.602" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170706 17:15:32.602" status="PASS" starttime="20170706 17:15:32.602"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170706 17:15:32.811" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170706 17:15:32.811" status="PASS" starttime="20170706 17:15:32.603"></status>
</kw>
<msg timestamp="20170706 17:15:32.811" level="INFO">${status} = PASS</msg>
<msg timestamp="20170706 17:15:32.811" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170706 17:15:32.811" status="PASS" starttime="20170706 17:15:32.602"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170706 17:15:32.811" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170706 17:15:32.812" status="PASS" starttime="20170706 17:15:32.811"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170706 17:15:32.812" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170706 17:15:32.812" status="PASS" starttime="20170706 17:15:32.812"></status>
</kw>
<status endtime="20170706 17:15:32.812" status="PASS" starttime="20170706 17:15:32.599"></status>
</kw>
<status endtime="20170706 17:15:32.812" status="PASS" starttime="20170706 17:15:32.599"></status>
</kw>
<status endtime="20170706 17:15:32.813" status="PASS" starttime="20170706 17:15:32.598"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170706 17:15:32.813" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/enumerate</msg>
<status endtime="20170706 17:15:32.813" status="PASS" starttime="20170706 17:15:32.813"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170706 17:15:32.814" status="PASS" starttime="20170706 17:15:32.813"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170706 17:15:32.887" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/enumerate, headers=None json=None</msg>
<msg timestamp="20170706 17:15:32.887" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status endtime="20170706 17:15:32.887" status="PASS" starttime="20170706 17:15:32.814"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170706 17:15:32.888" status="PASS" starttime="20170706 17:15:32.888"></status>
</kw>
<msg timestamp="20170706 17:15:32.888" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status endtime="20170706 17:15:32.888" status="PASS" starttime="20170706 17:15:32.597"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170706 17:15:32.889" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170706 17:15:32.889" level="FAIL">404 != 200</msg>
<status endtime="20170706 17:15:32.889" status="FAIL" starttime="20170706 17:15:32.889"></status>
</kw>
<msg timestamp="20170706 17:15:32.890" level="INFO">${status} = False</msg>
<status endtime="20170706 17:15:32.890" status="PASS" starttime="20170706 17:15:32.889"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg timestamp="20170706 17:15:32.891" level="INFO">Continuing for loop from the next iteration.</msg>
<status endtime="20170706 17:15:32.891" status="PASS" starttime="20170706 17:15:32.890"></status>
</kw>
<status endtime="20170706 17:15:32.891" status="PASS" starttime="20170706 17:15:32.890"></status>
</kw>
<status endtime="20170706 17:15:32.891" status="PASS" starttime="20170706 17:15:32.596"></status>
</kw>
<status endtime="20170706 17:15:32.891" status="PASS" starttime="20170706 17:15:29.459"></status>
</kw>
<status endtime="20170706 17:15:32.891" status="PASS" starttime="20170706 17:15:29.458"></status>
</kw>
<status endtime="20170706 17:15:32.891" status="PASS" starttime="20170706 17:15:29.458"></status>
</kw>
<status endtime="20170706 17:15:32.891" status="PASS" starttime="20170706 17:15:29.458"></status>
</kw>
<status endtime="20170706 17:15:32.891" status="PASS" starttime="20170706 17:15:27.691"></status>
</kw>
<status endtime="20170706 17:15:32.891" status="PASS" starttime="20170706 17:15:27.631"></status>
</kw>
<status endtime="20170706 17:15:32.891" status="PASS" starttime="20170706 17:15:27.628"></status>
</kw>
<status endtime="20170706 17:15:32.891" status="PASS" starttime="20170706 17:15:27.628"></status>
</kw>
<kw name="${method} = ('OS FFDC', 'OS FFDC Files')" type="foritem">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status endtime="20170706 17:15:32.893" status="PASS" starttime="20170706 17:15:32.893"></status>
</kw>
<msg timestamp="20170706 17:15:32.893" level="INFO">${status} = PASS</msg>
<msg timestamp="20170706 17:15:32.893" level="INFO">${ret_values} = None</msg>
<status endtime="20170706 17:15:32.893" status="PASS" starttime="20170706 17:15:32.893"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status endtime="20170706 17:15:32.894" status="PASS" starttime="20170706 17:15:32.894"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="OS FFDC Files" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${OS_HOST}' == '${EMPTY}'</arg>
<arg>No OS Host Provided</arg>
</arguments>
<msg timestamp="20170706 17:15:32.944" level="INFO">Returning from the enclosing user keyword.</msg>
<status endtime="20170706 17:15:32.944" status="PASS" starttime="20170706 17:15:32.943"></status>
</kw>
<status endtime="20170706 17:15:32.944" status="PASS" starttime="20170706 17:15:32.943"></status>
</kw>
<status endtime="20170706 17:15:32.944" status="PASS" starttime="20170706 17:15:32.894"></status>
</kw>
<status endtime="20170706 17:15:32.944" status="PASS" starttime="20170706 17:15:32.892"></status>
</kw>
<status endtime="20170706 17:15:32.944" status="PASS" starttime="20170706 17:15:32.892"></status>
</kw>
<kw name="${method} = ('FFDC Generic Report', 'BMC FFDC Manifest')" type="foritem">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status endtime="20170706 17:15:32.946" status="PASS" starttime="20170706 17:15:32.946"></status>
</kw>
<msg timestamp="20170706 17:15:32.946" level="INFO">${status} = PASS</msg>
<msg timestamp="20170706 17:15:32.946" level="INFO">${ret_values} = None</msg>
<status endtime="20170706 17:15:32.946" status="PASS" starttime="20170706 17:15:32.945"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status endtime="20170706 17:15:32.947" status="PASS" starttime="20170706 17:15:32.946"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Manifest" library="openbmc_ffdc_methods">
<doc>Get the commands index for the FFDC_BMC_CMD,</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170706 17:15:32.988" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status endtime="20170706 17:15:32.988" status="FAIL" starttime="20170706 17:15:32.988"></status>
</kw>
<msg timestamp="20170706 17:15:32.988" level="INFO">${has_host} = False</msg>
<status endtime="20170706 17:15:32.988" status="PASS" starttime="20170706 17:15:32.987"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status endtime="20170706 17:15:32.989" status="PASS" starttime="20170706 17:15:32.989"></status>
</kw>
<status endtime="20170706 17:15:32.990" status="PASS" starttime="20170706 17:15:32.989"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg timestamp="20170706 17:15:32.991" level="INFO">${port_num} = 22</msg>
<status endtime="20170706 17:15:32.991" status="PASS" starttime="20170706 17:15:32.991"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg timestamp="20170706 17:15:32.992" level="INFO">${SSH_PORT} = 22</msg>
<status endtime="20170706 17:15:32.992" status="PASS" starttime="20170706 17:15:32.991"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg timestamp="20170706 17:15:32.999" level="INFO">${https_num} = 443</msg>
<status endtime="20170706 17:15:32.999" status="PASS" starttime="20170706 17:15:32.992"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg timestamp="20170706 17:15:33.000" level="INFO">${AUTH_URI} = https://9.3.21.61:443</msg>
<status endtime="20170706 17:15:33.000" status="PASS" starttime="20170706 17:15:32.999"></status>
</kw>
<status endtime="20170706 17:15:33.000" status="PASS" starttime="20170706 17:15:32.990"></status>
</kw>
<status endtime="20170706 17:15:33.000" status="PASS" starttime="20170706 17:15:32.990"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170706 17:15:33.001" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status endtime="20170706 17:15:33.001" status="FAIL" starttime="20170706 17:15:33.001"></status>
</kw>
<msg timestamp="20170706 17:15:33.001" level="INFO">${has_port} = False</msg>
<status endtime="20170706 17:15:33.001" status="PASS" starttime="20170706 17:15:33.001"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status endtime="20170706 17:15:33.003" status="PASS" starttime="20170706 17:15:33.003"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status endtime="20170706 17:15:33.004" status="PASS" starttime="20170706 17:15:33.003"></status>
</kw>
<status endtime="20170706 17:15:33.004" status="PASS" starttime="20170706 17:15:33.002"></status>
</kw>
<status endtime="20170706 17:15:33.004" status="PASS" starttime="20170706 17:15:33.002"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170706 17:15:33.005" level="INFO">Logging into '9.3.21.61:22' as 'root'.</msg>
<msg timestamp="20170706 17:15:34.682" level="INFO">Read output: root@witherspoon:~#</msg>
<status endtime="20170706 17:15:34.683" status="PASS" starttime="20170706 17:15:33.005"></status>
</kw>
<status endtime="20170706 17:15:34.683" status="PASS" starttime="20170706 17:15:32.987"></status>
</kw>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170706 17:15:34.684" level="INFO">@{entries} = [ BMC DATA | DRIVER INFO | APPLICATION DATA ]</msg>
<status endtime="20170706 17:15:34.684" status="PASS" starttime="20170706 17:15:34.683"></status>
</kw>
<kw name="${index} IN [ @{entries} ]" type="for">
<kw name="${index} = BMC DATA" type="foritem">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170706 17:15:34.685" level="INFO">@{cmd_list} = [ ('BMC OS', 'uname -a') | ('BMC Uptime', 'uptime') | ('BMC File System Disk Space Usage', 'df -hT') ]</msg>
<status endtime="20170706 17:15:34.685" status="PASS" starttime="20170706 17:15:34.685"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170706 17:15:34.690" level="INFO">${ENTRY_INDEX} = BMC DATA</msg>
<status endtime="20170706 17:15:34.690" status="PASS" starttime="20170706 17:15:34.686"></status>
</kw>
<kw name="${cmd} IN [ @{cmd_list} ]" type="for">
<kw name="${cmd} = ('BMC OS', 'uname -a')" type="foritem">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170706 17:15:34.693" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/13340/obmc-robot/logs/20170706171525749346_TestsTestBasicPoweron/20170706171525749346_PowerOnTest/20170706171525749346_BMC_general.txt"&gt;/tmp/fspcibld/13340/obmc-robot/logs/20170706171525749346_TestsTestBasicPoweron/20170706171525749346_PowerOnTest/20170706171525749346_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170706 17:15:34.693" status="PASS" starttime="20170706 17:15:34.693"></status>
</kw>
<status endtime="20170706 17:15:34.694" status="PASS" starttime="20170706 17:15:34.692"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170706 17:15:34.695" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/13340/obmc-robot/logs/20170706171525749346_TestsTestBasicPoweron/20170706171525749346_PowerOnTest/20170706171525749346_BMC_general.txt"&gt;/tmp/fspcibld/13340/obmc-robot/logs/20170706171525749346_TestsTestBasicPoweron/20170706171525749346_PowerOnTest/20170706171525749346_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170706 17:15:34.695" status="PASS" starttime="20170706 17:15:34.694"></status>
</kw>
<status endtime="20170706 17:15:34.695" status="PASS" starttime="20170706 17:15:34.694"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170706 17:15:34.696" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/13340/obmc-robot/logs/20170706171525749346_TestsTestBasicPoweron/20170706171525749346_PowerOnTest/20170706171525749346_BMC_general.txt"&gt;/tmp/fspcibld/13340/obmc-robot/logs/20170706171525749346_TestsTestBasicPoweron/20170706171525749346_PowerOnTest/20170706171525749346_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170706 17:15:34.696" status="PASS" starttime="20170706 17:15:34.696"></status>
</kw>
<status endtime="20170706 17:15:34.697" status="PASS" starttime="20170706 17:15:34.695"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170706 17:15:34.698" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/13340/obmc-robot/logs/20170706171525749346_TestsTestBasicPoweron/20170706171525749346_PowerOnTest/20170706171525749346_BMC_general.txt"&gt;/tmp/fspcibld/13340/obmc-robot/logs/20170706171525749346_TestsTestBasicPoweron/20170706171525749346_PowerOnTest/20170706171525749346_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170706 17:15:34.698" status="PASS" starttime="20170706 17:15:34.697"></status>
</kw>
<status endtime="20170706 17:15:34.698" status="PASS" starttime="20170706 17:15:34.697"></status>
</kw>
<status endtime="20170706 17:15:34.698" status="PASS" starttime="20170706 17:15:34.692"></status>
</kw>
<status endtime="20170706 17:15:34.698" status="PASS" starttime="20170706 17:15:34.691"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170706 17:15:34.699" level="INFO">Executing command 'uname -a'.</msg>
<msg timestamp="20170706 17:15:34.757" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170706 17:15:34.757" level="INFO">${stdout} = Linux witherspoon 4.10.17-990f06c35b7e119f00967e90f0514dbbd2e1b51b #1 Thu Jul 6 16:30:45 UTC 2017 armv6l GNU/Linux</msg>
<msg timestamp="20170706 17:15:34.757" level="INFO">${stderr} = </msg>
<status endtime="20170706 17:15:34.757" status="PASS" starttime="20170706 17:15:34.698"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170706 17:15:34.763" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/13340/obmc-robot/logs/20170706171525749346_TestsTestBasicPoweron/20170706171525749346_PowerOnTest/20170706171525749346_BMC_general.txt"&gt;/tmp/fspcibld/13340/obmc-robot/logs/20170706171525749346_TestsTestBasicPoweron/20170706171525749346_PowerOnTest/20170706171525749346_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170706 17:15:34.763" status="PASS" starttime="20170706 17:15:34.763"></status>
</kw>
<status endtime="20170706 17:15:34.763" status="PASS" starttime="20170706 17:15:34.762"></status>
</kw>
<status endtime="20170706 17:15:34.764" status="PASS" starttime="20170706 17:15:34.757"></status>
</kw>
<status endtime="20170706 17:15:34.764" status="PASS" starttime="20170706 17:15:34.691"></status>
</kw>
<status endtime="20170706 17:15:34.764" status="PASS" starttime="20170706 17:15:34.690"></status>
</kw>
<kw name="${cmd} = ('BMC Uptime', 'uptime')" type="foritem">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170706 17:15:34.767" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/13340/obmc-robot/logs/20170706171525749346_TestsTestBasicPoweron/20170706171525749346_PowerOnTest/20170706171525749346_BMC_general.txt"&gt;/tmp/fspcibld/13340/obmc-robot/logs/20170706171525749346_TestsTestBasicPoweron/20170706171525749346_PowerOnTest/20170706171525749346_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170706 17:15:34.767" status="PASS" starttime="20170706 17:15:34.766"></status>
</kw>
<status endtime="20170706 17:15:34.767" status="PASS" starttime="20170706 17:15:34.766"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170706 17:15:34.768" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/13340/obmc-robot/logs/20170706171525749346_TestsTestBasicPoweron/20170706171525749346_PowerOnTest/20170706171525749346_BMC_general.txt"&gt;/tmp/fspcibld/13340/obmc-robot/logs/20170706171525749346_TestsTestBasicPoweron/20170706171525749346_PowerOnTest/20170706171525749346_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170706 17:15:34.768" status="PASS" starttime="20170706 17:15:34.768"></status>
</kw>
<status endtime="20170706 17:15:34.768" status="PASS" starttime="20170706 17:15:34.767"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170706 17:15:34.769" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/13340/obmc-robot/logs/20170706171525749346_TestsTestBasicPoweron/20170706171525749346_PowerOnTest/20170706171525749346_BMC_general.txt"&gt;/tmp/fspcibld/13340/obmc-robot/logs/20170706171525749346_TestsTestBasicPoweron/20170706171525749346_PowerOnTest/20170706171525749346_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170706 17:15:34.769" status="PASS" starttime="20170706 17:15:34.769"></status>
</kw>
<status endtime="20170706 17:15:34.769" status="PASS" starttime="20170706 17:15:34.768"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170706 17:15:34.771" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/13340/obmc-robot/logs/20170706171525749346_TestsTestBasicPoweron/20170706171525749346_PowerOnTest/20170706171525749346_BMC_general.txt"&gt;/tmp/fspcibld/13340/obmc-robot/logs/20170706171525749346_TestsTestBasicPoweron/20170706171525749346_PowerOnTest/20170706171525749346_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170706 17:15:34.771" status="PASS" starttime="20170706 17:15:34.770"></status>
</kw>
<status endtime="20170706 17:15:34.771" status="PASS" starttime="20170706 17:15:34.770"></status>
</kw>
<status endtime="20170706 17:15:34.771" status="PASS" starttime="20170706 17:15:34.765"></status>
</kw>
<status endtime="20170706 17:15:34.771" status="PASS" starttime="20170706 17:15:34.765"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170706 17:15:34.772" level="INFO">Executing command 'uptime'.</msg>
<msg timestamp="20170706 17:15:34.857" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170706 17:15:34.857" level="INFO">${stdout} =  17:15:35 up 15 min,  load average: 0.25, 0.95, 1.06</msg>
<msg timestamp="20170706 17:15:34.857" level="INFO">${stderr} = </msg>
<status endtime="20170706 17:15:34.857" status="PASS" starttime="20170706 17:15:34.771"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170706 17:15:34.863" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/13340/obmc-robot/logs/20170706171525749346_TestsTestBasicPoweron/20170706171525749346_PowerOnTest/20170706171525749346_BMC_general.txt"&gt;/tmp/fspcibld/13340/obmc-robot/logs/20170706171525749346_TestsTestBasicPoweron/20170706171525749346_PowerOnTest/20170706171525749346_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170706 17:15:34.863" status="PASS" starttime="20170706 17:15:34.862"></status>
</kw>
<status endtime="20170706 17:15:34.863" status="PASS" starttime="20170706 17:15:34.862"></status>
</kw>
<status endtime="20170706 17:15:34.863" status="PASS" starttime="20170706 17:15:34.857"></status>
</kw>
<status endtime="20170706 17:15:34.863" status="PASS" starttime="20170706 17:15:34.764"></status>
</kw>
<status endtime="20170706 17:15:34.863" status="PASS" starttime="20170706 17:15:34.764"></status>
</kw>
<kw name="${cmd} = ('BMC File System Disk Space Usage', 'df -hT')" type="foritem">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170706 17:15:34.866" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/13340/obmc-robot/logs/20170706171525749346_TestsTestBasicPoweron/20170706171525749346_PowerOnTest/20170706171525749346_BMC_general.txt"&gt;/tmp/fspcibld/13340/obmc-robot/logs/20170706171525749346_TestsTestBasicPoweron/20170706171525749346_PowerOnTest/20170706171525749346_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170706 17:15:34.866" status="PASS" starttime="20170706 17:15:34.866"></status>
</kw>
<status endtime="20170706 17:15:34.866" status="PASS" starttime="20170706 17:15:34.865"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170706 17:15:34.868" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/13340/obmc-robot/logs/20170706171525749346_TestsTestBasicPoweron/20170706171525749346_PowerOnTest/20170706171525749346_BMC_general.txt"&gt;/tmp/fspcibld/13340/obmc-robot/logs/20170706171525749346_TestsTestBasicPoweron/20170706171525749346_PowerOnTest/20170706171525749346_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170706 17:15:34.868" status="PASS" starttime="20170706 17:15:34.867"></status>
</kw>
<status endtime="20170706 17:15:34.868" status="PASS" starttime="20170706 17:15:34.867"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170706 17:15:34.869" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/13340/obmc-robot/logs/20170706171525749346_TestsTestBasicPoweron/20170706171525749346_PowerOnTest/20170706171525749346_BMC_general.txt"&gt;/tmp/fspcibld/13340/obmc-robot/logs/20170706171525749346_TestsTestBasicPoweron/20170706171525749346_PowerOnTest/20170706171525749346_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170706 17:15:34.869" status="PASS" starttime="20170706 17:15:34.869"></status>
</kw>
<status endtime="20170706 17:15:34.869" status="PASS" starttime="20170706 17:15:34.868"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170706 17:15:34.870" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/13340/obmc-robot/logs/20170706171525749346_TestsTestBasicPoweron/20170706171525749346_PowerOnTest/20170706171525749346_BMC_general.txt"&gt;/tmp/fspcibld/13340/obmc-robot/logs/20170706171525749346_TestsTestBasicPoweron/20170706171525749346_PowerOnTest/20170706171525749346_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170706 17:15:34.870" status="PASS" starttime="20170706 17:15:34.870"></status>
</kw>
<status endtime="20170706 17:15:34.870" status="PASS" starttime="20170706 17:15:34.869"></status>
</kw>
<status endtime="20170706 17:15:34.871" status="PASS" starttime="20170706 17:15:34.865"></status>
</kw>
<status endtime="20170706 17:15:34.871" status="PASS" starttime="20170706 17:15:34.864"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170706 17:15:34.871" level="INFO">Executing command 'df -hT'.</msg>
<msg timestamp="20170706 17:15:34.957" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170706 17:15:34.957" level="INFO">${stdout} = Filesystem           Type            Size      Used Available Use% Mounted on
dev                  devtmpfs      210.2M         0    210.2M   0% /dev
tmpfs                tmpfs         211.1M     14.0...</msg>
<msg timestamp="20170706 17:15:34.957" level="INFO">${stderr} = </msg>
<status endtime="20170706 17:15:34.957" status="PASS" starttime="20170706 17:15:34.871"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170706 17:15:34.963" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/13340/obmc-robot/logs/20170706171525749346_TestsTestBasicPoweron/20170706171525749346_PowerOnTest/20170706171525749346_BMC_general.txt"&gt;/tmp/fspcibld/13340/obmc-robot/logs/20170706171525749346_TestsTestBasicPoweron/20170706171525749346_PowerOnTest/20170706171525749346_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170706 17:15:34.963" status="PASS" starttime="20170706 17:15:34.963"></status>
</kw>
<status endtime="20170706 17:15:34.963" status="PASS" starttime="20170706 17:15:34.962"></status>
</kw>
<status endtime="20170706 17:15:34.963" status="PASS" starttime="20170706 17:15:34.957"></status>
</kw>
<status endtime="20170706 17:15:34.963" status="PASS" starttime="20170706 17:15:34.864"></status>
</kw>
<status endtime="20170706 17:15:34.964" status="PASS" starttime="20170706 17:15:34.863"></status>
</kw>
<status endtime="20170706 17:15:34.964" status="PASS" starttime="20170706 17:15:34.690"></status>
</kw>
<status endtime="20170706 17:15:34.964" status="PASS" starttime="20170706 17:15:34.684"></status>
</kw>
<status endtime="20170706 17:15:34.964" status="PASS" starttime="20170706 17:15:34.684"></status>
</kw>
<kw name="${index} = DRIVER INFO" type="foritem">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170706 17:15:34.965" level="INFO">@{cmd_list} = [ ('Build Info', 'cat /etc/version') | ('FW Level', 'cat /etc/os-release') ]</msg>
<status endtime="20170706 17:15:34.965" status="PASS" starttime="20170706 17:15:34.964"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170706 17:15:34.966" level="INFO">${ENTRY_INDEX} = DRIVER INFO</msg>
<status endtime="20170706 17:15:34.966" status="PASS" starttime="20170706 17:15:34.965"></status>
</kw>
<kw name="${cmd} IN [ @{cmd_list} ]" type="for">
<kw name="${cmd} = ('Build Info', 'cat /etc/version')" type="foritem">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170706 17:15:34.969" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/13340/obmc-robot/logs/20170706171525749346_TestsTestBasicPoweron/20170706171525749346_PowerOnTest/20170706171525749346_BMC_general.txt"&gt;/tmp/fspcibld/13340/obmc-robot/logs/20170706171525749346_TestsTestBasicPoweron/20170706171525749346_PowerOnTest/20170706171525749346_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170706 17:15:34.969" status="PASS" starttime="20170706 17:15:34.969"></status>
</kw>
<status endtime="20170706 17:15:34.969" status="PASS" starttime="20170706 17:15:34.968"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170706 17:15:34.971" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/13340/obmc-robot/logs/20170706171525749346_TestsTestBasicPoweron/20170706171525749346_PowerOnTest/20170706171525749346_BMC_general.txt"&gt;/tmp/fspcibld/13340/obmc-robot/logs/20170706171525749346_TestsTestBasicPoweron/20170706171525749346_PowerOnTest/20170706171525749346_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170706 17:15:34.971" status="PASS" starttime="20170706 17:15:34.970"></status>
</kw>
<status endtime="20170706 17:15:34.971" status="PASS" starttime="20170706 17:15:34.969"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170706 17:15:34.972" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/13340/obmc-robot/logs/20170706171525749346_TestsTestBasicPoweron/20170706171525749346_PowerOnTest/20170706171525749346_BMC_general.txt"&gt;/tmp/fspcibld/13340/obmc-robot/logs/20170706171525749346_TestsTestBasicPoweron/20170706171525749346_PowerOnTest/20170706171525749346_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170706 17:15:34.972" status="PASS" starttime="20170706 17:15:34.971"></status>
</kw>
<status endtime="20170706 17:15:34.972" status="PASS" starttime="20170706 17:15:34.971"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170706 17:15:34.973" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/13340/obmc-robot/logs/20170706171525749346_TestsTestBasicPoweron/20170706171525749346_PowerOnTest/20170706171525749346_BMC_general.txt"&gt;/tmp/fspcibld/13340/obmc-robot/logs/20170706171525749346_TestsTestBasicPoweron/20170706171525749346_PowerOnTest/20170706171525749346_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170706 17:15:34.973" status="PASS" starttime="20170706 17:15:34.973"></status>
</kw>
<status endtime="20170706 17:15:34.973" status="PASS" starttime="20170706 17:15:34.972"></status>
</kw>
<status endtime="20170706 17:15:34.973" status="PASS" starttime="20170706 17:15:34.968"></status>
</kw>
<status endtime="20170706 17:15:34.974" status="PASS" starttime="20170706 17:15:34.967"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170706 17:15:34.974" level="INFO">Executing command 'cat /etc/version'.</msg>
<msg timestamp="20170706 17:15:35.059" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20170706 17:15:35.059" level="INFO">${stdout} = </msg>
<msg timestamp="20170706 17:15:35.059" level="INFO">${stderr} = cat: can't open '/etc/version': No such file or directory</msg>
<status endtime="20170706 17:15:35.059" status="PASS" starttime="20170706 17:15:34.974"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170706 17:15:35.065" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/13340/obmc-robot/logs/20170706171525749346_TestsTestBasicPoweron/20170706171525749346_PowerOnTest/20170706171525749346_BMC_general.txt"&gt;/tmp/fspcibld/13340/obmc-robot/logs/20170706171525749346_TestsTestBasicPoweron/20170706171525749346_PowerOnTest/20170706171525749346_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170706 17:15:35.065" status="PASS" starttime="20170706 17:15:35.065"></status>
</kw>
<status endtime="20170706 17:15:35.065" status="PASS" starttime="20170706 17:15:35.064"></status>
</kw>
<status endtime="20170706 17:15:35.065" status="PASS" starttime="20170706 17:15:35.059"></status>
</kw>
<status endtime="20170706 17:15:35.066" status="PASS" starttime="20170706 17:15:34.966"></status>
</kw>
<status endtime="20170706 17:15:35.066" status="PASS" starttime="20170706 17:15:34.966"></status>
</kw>
<kw name="${cmd} = ('FW Level', 'cat /etc/os-release')" type="foritem">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170706 17:15:35.068" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/13340/obmc-robot/logs/20170706171525749346_TestsTestBasicPoweron/20170706171525749346_PowerOnTest/20170706171525749346_BMC_general.txt"&gt;/tmp/fspcibld/13340/obmc-robot/logs/20170706171525749346_TestsTestBasicPoweron/20170706171525749346_PowerOnTest/20170706171525749346_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170706 17:15:35.069" status="PASS" starttime="20170706 17:15:35.068"></status>
</kw>
<status endtime="20170706 17:15:35.069" status="PASS" starttime="20170706 17:15:35.068"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170706 17:15:35.070" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/13340/obmc-robot/logs/20170706171525749346_TestsTestBasicPoweron/20170706171525749346_PowerOnTest/20170706171525749346_BMC_general.txt"&gt;/tmp/fspcibld/13340/obmc-robot/logs/20170706171525749346_TestsTestBasicPoweron/20170706171525749346_PowerOnTest/20170706171525749346_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170706 17:15:35.070" status="PASS" starttime="20170706 17:15:35.070"></status>
</kw>
<status endtime="20170706 17:15:35.070" status="PASS" starttime="20170706 17:15:35.069"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170706 17:15:35.071" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/13340/obmc-robot/logs/20170706171525749346_TestsTestBasicPoweron/20170706171525749346_PowerOnTest/20170706171525749346_BMC_general.txt"&gt;/tmp/fspcibld/13340/obmc-robot/logs/20170706171525749346_TestsTestBasicPoweron/20170706171525749346_PowerOnTest/20170706171525749346_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170706 17:15:35.071" status="PASS" starttime="20170706 17:15:35.071"></status>
</kw>
<status endtime="20170706 17:15:35.071" status="PASS" starttime="20170706 17:15:35.070"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170706 17:15:35.073" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/13340/obmc-robot/logs/20170706171525749346_TestsTestBasicPoweron/20170706171525749346_PowerOnTest/20170706171525749346_BMC_general.txt"&gt;/tmp/fspcibld/13340/obmc-robot/logs/20170706171525749346_TestsTestBasicPoweron/20170706171525749346_PowerOnTest/20170706171525749346_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170706 17:15:35.073" status="PASS" starttime="20170706 17:15:35.072"></status>
</kw>
<status endtime="20170706 17:15:35.073" status="PASS" starttime="20170706 17:15:35.072"></status>
</kw>
<status endtime="20170706 17:15:35.073" status="PASS" starttime="20170706 17:15:35.067"></status>
</kw>
<status endtime="20170706 17:15:35.073" status="PASS" starttime="20170706 17:15:35.067"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170706 17:15:35.074" level="INFO">Executing command 'cat /etc/os-release'.</msg>
<msg timestamp="20170706 17:15:35.169" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170706 17:15:35.170" level="INFO">${stdout} = ID="openbmc-phosphor"
NAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"
VERSION="v1.99.7-82"
VERSION_ID="v1.99.7-82-g5ab2ef8"
PRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC Project ...</msg>
<msg timestamp="20170706 17:15:35.170" level="INFO">${stderr} = </msg>
<status endtime="20170706 17:15:35.170" status="PASS" starttime="20170706 17:15:35.073"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170706 17:15:35.176" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/13340/obmc-robot/logs/20170706171525749346_TestsTestBasicPoweron/20170706171525749346_PowerOnTest/20170706171525749346_BMC_general.txt"&gt;/tmp/fspcibld/13340/obmc-robot/logs/20170706171525749346_TestsTestBasicPoweron/20170706171525749346_PowerOnTest/20170706171525749346_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170706 17:15:35.176" status="PASS" starttime="20170706 17:15:35.176"></status>
</kw>
<status endtime="20170706 17:15:35.176" status="PASS" starttime="20170706 17:15:35.175"></status>
</kw>
<status endtime="20170706 17:15:35.177" status="PASS" starttime="20170706 17:15:35.170"></status>
</kw>
<status endtime="20170706 17:15:35.177" status="PASS" starttime="20170706 17:15:35.066"></status>
</kw>
<status endtime="20170706 17:15:35.177" status="PASS" starttime="20170706 17:15:35.066"></status>
</kw>
<status endtime="20170706 17:15:35.177" status="PASS" starttime="20170706 17:15:34.966"></status>
</kw>
<status endtime="20170706 17:15:35.177" status="PASS" starttime="20170706 17:15:34.964"></status>
</kw>
<status endtime="20170706 17:15:35.177" status="PASS" starttime="20170706 17:15:34.964"></status>
</kw>
<kw name="${index} = APPLICATION DATA" type="foritem">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170706 17:15:35.178" level="INFO">@{cmd_list} = [ ('BMC state', '/usr/sbin/obmcutil  state') ]</msg>
<status endtime="20170706 17:15:35.178" status="PASS" starttime="20170706 17:15:35.178"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170706 17:15:35.179" level="INFO">${ENTRY_INDEX} = APPLICATION DATA</msg>
<status endtime="20170706 17:15:35.179" status="PASS" starttime="20170706 17:15:35.178"></status>
</kw>
<kw name="${cmd} IN [ @{cmd_list} ]" type="for">
<kw name="${cmd} = ('BMC state', '/usr/sbin/obmcutil  state')" type="foritem">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170706 17:15:35.182" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/13340/obmc-robot/logs/20170706171525749346_TestsTestBasicPoweron/20170706171525749346_PowerOnTest/20170706171525749346_BMC_general.txt"&gt;/tmp/fspcibld/13340/obmc-robot/logs/20170706171525749346_TestsTestBasicPoweron/20170706171525749346_PowerOnTest/20170706171525749346_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170706 17:15:35.182" status="PASS" starttime="20170706 17:15:35.181"></status>
</kw>
<status endtime="20170706 17:15:35.182" status="PASS" starttime="20170706 17:15:35.181"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170706 17:15:35.183" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/13340/obmc-robot/logs/20170706171525749346_TestsTestBasicPoweron/20170706171525749346_PowerOnTest/20170706171525749346_BMC_general.txt"&gt;/tmp/fspcibld/13340/obmc-robot/logs/20170706171525749346_TestsTestBasicPoweron/20170706171525749346_PowerOnTest/20170706171525749346_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170706 17:15:35.183" status="PASS" starttime="20170706 17:15:35.183"></status>
</kw>
<status endtime="20170706 17:15:35.183" status="PASS" starttime="20170706 17:15:35.182"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170706 17:15:35.184" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/13340/obmc-robot/logs/20170706171525749346_TestsTestBasicPoweron/20170706171525749346_PowerOnTest/20170706171525749346_BMC_general.txt"&gt;/tmp/fspcibld/13340/obmc-robot/logs/20170706171525749346_TestsTestBasicPoweron/20170706171525749346_PowerOnTest/20170706171525749346_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170706 17:15:35.185" status="PASS" starttime="20170706 17:15:35.184"></status>
</kw>
<status endtime="20170706 17:15:35.185" status="PASS" starttime="20170706 17:15:35.184"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170706 17:15:35.186" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/13340/obmc-robot/logs/20170706171525749346_TestsTestBasicPoweron/20170706171525749346_PowerOnTest/20170706171525749346_BMC_general.txt"&gt;/tmp/fspcibld/13340/obmc-robot/logs/20170706171525749346_TestsTestBasicPoweron/20170706171525749346_PowerOnTest/20170706171525749346_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170706 17:15:35.186" status="PASS" starttime="20170706 17:15:35.185"></status>
</kw>
<status endtime="20170706 17:15:35.186" status="PASS" starttime="20170706 17:15:35.185"></status>
</kw>
<status endtime="20170706 17:15:35.186" status="PASS" starttime="20170706 17:15:35.180"></status>
</kw>
<status endtime="20170706 17:15:35.186" status="PASS" starttime="20170706 17:15:35.180"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170706 17:15:35.187" level="INFO">Executing command '/usr/sbin/obmcutil  state'.</msg>
<msg timestamp="20170706 17:15:36.645" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170706 17:15:36.646" level="INFO">${stdout} = CurrentBMCState:    xyz.openbmc_project.State.BMC.BMCState.Ready
CurrentPowerState:  xyz.openbmc_project.State.Chassis.PowerState.On
CurrentHostState:   xyz.openbmc_project.State.Host.HostState.Runnin...</msg>
<msg timestamp="20170706 17:15:36.646" level="INFO">${stderr} = </msg>
<status endtime="20170706 17:15:36.646" status="PASS" starttime="20170706 17:15:35.186"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170706 17:15:36.652" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/13340/obmc-robot/logs/20170706171525749346_TestsTestBasicPoweron/20170706171525749346_PowerOnTest/20170706171525749346_BMC_general.txt"&gt;/tmp/fspcibld/13340/obmc-robot/logs/20170706171525749346_TestsTestBasicPoweron/20170706171525749346_PowerOnTest/20170706171525749346_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170706 17:15:36.652" status="PASS" starttime="20170706 17:15:36.652"></status>
</kw>
<status endtime="20170706 17:15:36.652" status="PASS" starttime="20170706 17:15:36.651"></status>
</kw>
<status endtime="20170706 17:15:36.652" status="PASS" starttime="20170706 17:15:36.646"></status>
</kw>
<status endtime="20170706 17:15:36.653" status="PASS" starttime="20170706 17:15:35.179"></status>
</kw>
<status endtime="20170706 17:15:36.653" status="PASS" starttime="20170706 17:15:35.179"></status>
</kw>
<status endtime="20170706 17:15:36.653" status="PASS" starttime="20170706 17:15:35.179"></status>
</kw>
<status endtime="20170706 17:15:36.653" status="PASS" starttime="20170706 17:15:35.177"></status>
</kw>
<status endtime="20170706 17:15:36.653" status="PASS" starttime="20170706 17:15:35.177"></status>
</kw>
<status endtime="20170706 17:15:36.653" status="PASS" starttime="20170706 17:15:34.684"></status>
</kw>
<status endtime="20170706 17:15:36.653" status="PASS" starttime="20170706 17:15:32.986"></status>
</kw>
<status endtime="20170706 17:15:36.653" status="PASS" starttime="20170706 17:15:32.947"></status>
</kw>
<status endtime="20170706 17:15:36.653" status="PASS" starttime="20170706 17:15:32.944"></status>
</kw>
<status endtime="20170706 17:15:36.653" status="PASS" starttime="20170706 17:15:32.944"></status>
</kw>
<kw name="${method} = ('BMC Specific Files', 'BMC FFDC Files')" type="foritem">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status endtime="20170706 17:15:36.655" status="PASS" starttime="20170706 17:15:36.655"></status>
</kw>
<msg timestamp="20170706 17:15:36.655" level="INFO">${status} = PASS</msg>
<msg timestamp="20170706 17:15:36.655" level="INFO">${ret_values} = None</msg>
<status endtime="20170706 17:15:36.655" status="PASS" starttime="20170706 17:15:36.655"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status endtime="20170706 17:15:36.656" status="PASS" starttime="20170706 17:15:36.656"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Files" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170706 17:15:36.701" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status endtime="20170706 17:15:36.702" status="FAIL" starttime="20170706 17:15:36.701"></status>
</kw>
<msg timestamp="20170706 17:15:36.702" level="INFO">${has_host} = False</msg>
<status endtime="20170706 17:15:36.702" status="PASS" starttime="20170706 17:15:36.700"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status endtime="20170706 17:15:36.703" status="PASS" starttime="20170706 17:15:36.703"></status>
</kw>
<status endtime="20170706 17:15:36.703" status="PASS" starttime="20170706 17:15:36.702"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg timestamp="20170706 17:15:36.704" level="INFO">${port_num} = 22</msg>
<status endtime="20170706 17:15:36.705" status="PASS" starttime="20170706 17:15:36.704"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg timestamp="20170706 17:15:36.705" level="INFO">${SSH_PORT} = 22</msg>
<status endtime="20170706 17:15:36.705" status="PASS" starttime="20170706 17:15:36.705"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg timestamp="20170706 17:15:36.706" level="INFO">${https_num} = 443</msg>
<status endtime="20170706 17:15:36.706" status="PASS" starttime="20170706 17:15:36.705"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg timestamp="20170706 17:15:36.706" level="INFO">${AUTH_URI} = https://9.3.21.61:443</msg>
<status endtime="20170706 17:15:36.706" status="PASS" starttime="20170706 17:15:36.706"></status>
</kw>
<status endtime="20170706 17:15:36.707" status="PASS" starttime="20170706 17:15:36.704"></status>
</kw>
<status endtime="20170706 17:15:36.707" status="PASS" starttime="20170706 17:15:36.703"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170706 17:15:36.708" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status endtime="20170706 17:15:36.708" status="FAIL" starttime="20170706 17:15:36.707"></status>
</kw>
<msg timestamp="20170706 17:15:36.708" level="INFO">${has_port} = False</msg>
<status endtime="20170706 17:15:36.708" status="PASS" starttime="20170706 17:15:36.707"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status endtime="20170706 17:15:36.710" status="PASS" starttime="20170706 17:15:36.709"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status endtime="20170706 17:15:36.710" status="PASS" starttime="20170706 17:15:36.710"></status>
</kw>
<status endtime="20170706 17:15:36.710" status="PASS" starttime="20170706 17:15:36.709"></status>
</kw>
<status endtime="20170706 17:15:36.710" status="PASS" starttime="20170706 17:15:36.708"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170706 17:15:36.711" level="INFO">Logging into '9.3.21.61:22' as 'root'.</msg>
<msg timestamp="20170706 17:15:38.361" level="INFO">Read output: root@witherspoon:~#</msg>
<status endtime="20170706 17:15:38.361" status="PASS" starttime="20170706 17:15:36.711"></status>
</kw>
<status endtime="20170706 17:15:38.362" status="PASS" starttime="20170706 17:15:36.695"></status>
</kw>
<kw name="Get Ffdc File Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170706 17:15:38.362" level="INFO">@{entries} = [ BMC FILES ]</msg>
<status endtime="20170706 17:15:38.362" status="PASS" starttime="20170706 17:15:38.362"></status>
</kw>
<kw name="${index} IN [ @{entries} ]" type="for">
<kw name="${index} = BMC FILES" type="foritem">
<kw name="Create File and Write Data" library="openbmc_ffdc_methods">
<doc>Create files to current FFDC log directory,</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc File" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170706 17:15:38.364" level="INFO">@{cmd_list} = [ ('BMC_procinfo', 'cat /proc/cpuinfo') | ('BMC_meminfo', 'cat /proc/meminfo') | ('BMC_proc_list', 'top -n 1 -b') | ('BMC_dmesg', 'dmesg') | ('BMC_journalctl', 'journalctl --no-pager') ]</msg>
<status endtime="20170706 17:15:38.364" status="PASS" starttime="20170706 17:15:38.364"></status>
</kw>
<kw name="${cmd} IN [ @{cmd_list} ]" type="for">
<kw name="${cmd} = ('BMC_procinfo', 'cat /proc/cpuinfo')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170706 17:15:38.365" level="INFO">${logpath} = /tmp/fspcibld/13340/obmc-robot/logs/20170706171525749346_TestsTestBasicPoweron/20170706171525749346_PowerOnTest/20170706171525749346_BMC_procinfo.txt</msg>
<status endtime="20170706 17:15:38.365" status="PASS" starttime="20170706 17:15:38.364"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status endtime="20170706 17:15:38.366" status="PASS" starttime="20170706 17:15:38.366"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170706 17:15:38.367" level="INFO">Executing command 'cat /proc/cpuinfo'.</msg>
<msg timestamp="20170706 17:15:38.424" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170706 17:15:38.424" level="INFO">${stdout} = processor	: 0
model name	: ARMv6-compatible processor rev 7 (v6l)
BogoMIPS	: 789.70
Features	: half thumb fastmult edsp java tls 
CPU implementer	: 0x41
CPU architecture: 7
CPU variant	: 0x0
CPU part	...</msg>
<msg timestamp="20170706 17:15:38.424" level="INFO">${stderr} = </msg>
<status endtime="20170706 17:15:38.425" status="PASS" starttime="20170706 17:15:38.366"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170706 17:15:38.431" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/13340/obmc-robot/logs/20170706171525749346_TestsTestBasicPoweron/20170706171525749346_PowerOnTest/20170706171525749346_BMC_procinfo.txt"&gt;/tmp/fspcibld/13340/obmc-robot/logs/20170706171525749346_TestsTestBasicPoweron/20170706171525749346_PowerOnTest/20170706171525749346_BMC_procinfo.txt&lt;/a&gt;'.</msg>
<status endtime="20170706 17:15:38.431" status="PASS" starttime="20170706 17:15:38.430"></status>
</kw>
<status endtime="20170706 17:15:38.431" status="PASS" starttime="20170706 17:15:38.430"></status>
</kw>
<status endtime="20170706 17:15:38.431" status="PASS" starttime="20170706 17:15:38.425"></status>
</kw>
<status endtime="20170706 17:15:38.431" status="PASS" starttime="20170706 17:15:38.365"></status>
</kw>
<status endtime="20170706 17:15:38.432" status="PASS" starttime="20170706 17:15:38.364"></status>
</kw>
<kw name="${cmd} = ('BMC_meminfo', 'cat /proc/meminfo')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170706 17:15:38.432" level="INFO">${logpath} = /tmp/fspcibld/13340/obmc-robot/logs/20170706171525749346_TestsTestBasicPoweron/20170706171525749346_PowerOnTest/20170706171525749346_BMC_meminfo.txt</msg>
<status endtime="20170706 17:15:38.432" status="PASS" starttime="20170706 17:15:38.432"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status endtime="20170706 17:15:38.434" status="PASS" starttime="20170706 17:15:38.433"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170706 17:15:38.434" level="INFO">Executing command 'cat /proc/meminfo'.</msg>
<msg timestamp="20170706 17:15:38.519" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170706 17:15:38.519" level="INFO">${stdout} = MemTotal:         432332 kB
MemFree:          273264 kB
MemAvailable:     317692 kB
Buffers:           10904 kB
Cached:            51096 kB
SwapCached:            0 kB
Active:           107256 kB
Inac...</msg>
<msg timestamp="20170706 17:15:38.519" level="INFO">${stderr} = </msg>
<status endtime="20170706 17:15:38.519" status="PASS" starttime="20170706 17:15:38.434"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170706 17:15:38.526" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/13340/obmc-robot/logs/20170706171525749346_TestsTestBasicPoweron/20170706171525749346_PowerOnTest/20170706171525749346_BMC_meminfo.txt"&gt;/tmp/fspcibld/13340/obmc-robot/logs/20170706171525749346_TestsTestBasicPoweron/20170706171525749346_PowerOnTest/20170706171525749346_BMC_meminfo.txt&lt;/a&gt;'.</msg>
<status endtime="20170706 17:15:38.526" status="PASS" starttime="20170706 17:15:38.525"></status>
</kw>
<status endtime="20170706 17:15:38.526" status="PASS" starttime="20170706 17:15:38.524"></status>
</kw>
<status endtime="20170706 17:15:38.526" status="PASS" starttime="20170706 17:15:38.520"></status>
</kw>
<status endtime="20170706 17:15:38.526" status="PASS" starttime="20170706 17:15:38.433"></status>
</kw>
<status endtime="20170706 17:15:38.526" status="PASS" starttime="20170706 17:15:38.432"></status>
</kw>
<kw name="${cmd} = ('BMC_proc_list', 'top -n 1 -b')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170706 17:15:38.527" level="INFO">${logpath} = /tmp/fspcibld/13340/obmc-robot/logs/20170706171525749346_TestsTestBasicPoweron/20170706171525749346_PowerOnTest/20170706171525749346_BMC_proc_list.txt</msg>
<status endtime="20170706 17:15:38.527" status="PASS" starttime="20170706 17:15:38.526"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status endtime="20170706 17:15:38.528" status="PASS" starttime="20170706 17:15:38.528"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170706 17:15:38.529" level="INFO">Executing command 'top -n 1 -b'.</msg>
<msg timestamp="20170706 17:15:38.956" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170706 17:15:38.956" level="INFO">${stdout} = Mem: 159160K used, 273172K free, 14696K shrd, 10904K buff, 51100K cached
CPU:   0% usr  25% sys   0% nic  75% idle   0% io   0% irq   0% sirq
Load average: 0.25 0.96 1.06 1/149 1902
  PID  PPID USER  ...</msg>
<msg timestamp="20170706 17:15:38.956" level="INFO">${stderr} = </msg>
<status endtime="20170706 17:15:38.956" status="PASS" starttime="20170706 17:15:38.528"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170706 17:15:38.964" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/13340/obmc-robot/logs/20170706171525749346_TestsTestBasicPoweron/20170706171525749346_PowerOnTest/20170706171525749346_BMC_proc_list.txt"&gt;/tmp/fspcibld/13340/obmc-robot/logs/20170706171525749346_TestsTestBasicPoweron/20170706171525749346_PowerOnTest/20170706171525749346_BMC_proc_list.txt&lt;/a&gt;'.</msg>
<status endtime="20170706 17:15:38.964" status="PASS" starttime="20170706 17:15:38.963"></status>
</kw>
<status endtime="20170706 17:15:38.964" status="PASS" starttime="20170706 17:15:38.962"></status>
</kw>
<status endtime="20170706 17:15:38.964" status="PASS" starttime="20170706 17:15:38.957"></status>
</kw>
<status endtime="20170706 17:15:38.964" status="PASS" starttime="20170706 17:15:38.527"></status>
</kw>
<status endtime="20170706 17:15:38.964" status="PASS" starttime="20170706 17:15:38.526"></status>
</kw>
<kw name="${cmd} = ('BMC_dmesg', 'dmesg')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170706 17:15:38.965" level="INFO">${logpath} = /tmp/fspcibld/13340/obmc-robot/logs/20170706171525749346_TestsTestBasicPoweron/20170706171525749346_PowerOnTest/20170706171525749346_BMC_dmesg.txt</msg>
<status endtime="20170706 17:15:38.965" status="PASS" starttime="20170706 17:15:38.965"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status endtime="20170706 17:15:38.966" status="PASS" starttime="20170706 17:15:38.966"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170706 17:15:38.967" level="INFO">Executing command 'dmesg'.</msg>
<msg timestamp="20170706 17:15:39.094" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170706 17:15:39.094" level="INFO">${stdout} = [    4.810000] Freeing unused kernel memory: 276K
[    4.810000] This architecture does not have kernel memory protection.
[    6.620000] jffs2: notice: (513) jffs2_build_xattr_subsystem: complete bui...</msg>
<msg timestamp="20170706 17:15:39.094" level="INFO">${stderr} = </msg>
<status endtime="20170706 17:15:39.094" status="PASS" starttime="20170706 17:15:38.967"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170706 17:15:39.101" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/13340/obmc-robot/logs/20170706171525749346_TestsTestBasicPoweron/20170706171525749346_PowerOnTest/20170706171525749346_BMC_dmesg.txt"&gt;/tmp/fspcibld/13340/obmc-robot/logs/20170706171525749346_TestsTestBasicPoweron/20170706171525749346_PowerOnTest/20170706171525749346_BMC_dmesg.txt&lt;/a&gt;'.</msg>
<status endtime="20170706 17:15:39.101" status="PASS" starttime="20170706 17:15:39.100"></status>
</kw>
<status endtime="20170706 17:15:39.101" status="PASS" starttime="20170706 17:15:39.099"></status>
</kw>
<status endtime="20170706 17:15:39.101" status="PASS" starttime="20170706 17:15:39.095"></status>
</kw>
<status endtime="20170706 17:15:39.101" status="PASS" starttime="20170706 17:15:38.965"></status>
</kw>
<status endtime="20170706 17:15:39.101" status="PASS" starttime="20170706 17:15:38.965"></status>
</kw>
<kw name="${cmd} = ('BMC_journalctl', 'journalctl --no-pager')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170706 17:15:39.102" level="INFO">${logpath} = /tmp/fspcibld/13340/obmc-robot/logs/20170706171525749346_TestsTestBasicPoweron/20170706171525749346_PowerOnTest/20170706171525749346_BMC_journalctl.txt</msg>
<status endtime="20170706 17:15:39.102" status="PASS" starttime="20170706 17:15:39.101"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status endtime="20170706 17:15:39.103" status="PASS" starttime="20170706 17:15:39.103"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170706 17:15:39.104" level="INFO">Executing command 'journalctl --no-pager'.</msg>
<msg timestamp="20170706 17:15:42.046" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170706 17:15:42.048" level="INFO">${stdout} = -- Logs begin at Thu 2017-07-06 17:00:17 UTC, end at Thu 2017-07-06 17:15:37 UTC. --
Jul 06 17:00:17 witherspoon kernel: Booting Linux on physical CPU 0x0
Jul 06 17:00:17 witherspoon kernel: Linux ver...</msg>
<msg timestamp="20170706 17:15:42.048" level="INFO">${stderr} = </msg>
<status endtime="20170706 17:15:42.048" status="PASS" starttime="20170706 17:15:39.103"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170706 17:15:42.060" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/13340/obmc-robot/logs/20170706171525749346_TestsTestBasicPoweron/20170706171525749346_PowerOnTest/20170706171525749346_BMC_journalctl.txt"&gt;/tmp/fspcibld/13340/obmc-robot/logs/20170706171525749346_TestsTestBasicPoweron/20170706171525749346_PowerOnTest/20170706171525749346_BMC_journalctl.txt&lt;/a&gt;'.</msg>
<status endtime="20170706 17:15:42.060" status="PASS" starttime="20170706 17:15:42.058"></status>
</kw>
<status endtime="20170706 17:15:42.060" status="PASS" starttime="20170706 17:15:42.056"></status>
</kw>
<status endtime="20170706 17:15:42.060" status="PASS" starttime="20170706 17:15:42.049"></status>
</kw>
<status endtime="20170706 17:15:42.060" status="PASS" starttime="20170706 17:15:39.102"></status>
</kw>
<status endtime="20170706 17:15:42.060" status="PASS" starttime="20170706 17:15:39.101"></status>
</kw>
<status endtime="20170706 17:15:42.060" status="PASS" starttime="20170706 17:15:38.364"></status>
</kw>
<status endtime="20170706 17:15:42.060" status="PASS" starttime="20170706 17:15:38.363"></status>
</kw>
<status endtime="20170706 17:15:42.060" status="PASS" starttime="20170706 17:15:38.363"></status>
</kw>
<status endtime="20170706 17:15:42.060" status="PASS" starttime="20170706 17:15:38.362"></status>
</kw>
<status endtime="20170706 17:15:42.061" status="PASS" starttime="20170706 17:15:36.695"></status>
</kw>
<status endtime="20170706 17:15:42.061" status="PASS" starttime="20170706 17:15:36.656"></status>
</kw>
<status endtime="20170706 17:15:42.061" status="PASS" starttime="20170706 17:15:36.654"></status>
</kw>
<status endtime="20170706 17:15:42.061" status="PASS" starttime="20170706 17:15:36.654"></status>
</kw>
<kw name="${method} = ('SEL Log', 'Collect eSEL Log')" type="foritem">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status endtime="20170706 17:15:42.063" status="PASS" starttime="20170706 17:15:42.062"></status>
</kw>
<msg timestamp="20170706 17:15:42.063" level="INFO">${status} = PASS</msg>
<msg timestamp="20170706 17:15:42.063" level="INFO">${ret_values} = None</msg>
<status endtime="20170706 17:15:42.063" status="PASS" starttime="20170706 17:15:42.062"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status endtime="20170706 17:15:42.063" status="PASS" starttime="20170706 17:15:42.063"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="Collect eSEL Log" library="openbmc_ffdc_methods">
<doc>Collect eSEL log from logging entry and convert eSEL data</doc>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${BMC_LOGGING_ENTRY}/enumerate</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170706 17:15:42.109" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170706 17:15:42.110" status="PASS" starttime="20170706 17:15:42.109"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170706 17:15:42.111" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170706 17:15:42.111" status="PASS" starttime="20170706 17:15:42.111"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170706 17:15:42.112" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170706 17:15:42.112" status="PASS" starttime="20170706 17:15:42.111"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170706 17:15:42.112" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170706 17:15:42.113" status="PASS" starttime="20170706 17:15:42.112"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170706 17:15:42.327" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170706 17:15:42.327" status="PASS" starttime="20170706 17:15:42.113"></status>
</kw>
<msg timestamp="20170706 17:15:42.327" level="INFO">${status} = PASS</msg>
<msg timestamp="20170706 17:15:42.327" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170706 17:15:42.327" status="PASS" starttime="20170706 17:15:42.113"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170706 17:15:42.328" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170706 17:15:42.328" status="PASS" starttime="20170706 17:15:42.327"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170706 17:15:42.328" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170706 17:15:42.329" status="PASS" starttime="20170706 17:15:42.328"></status>
</kw>
<status endtime="20170706 17:15:42.329" status="PASS" starttime="20170706 17:15:42.108"></status>
</kw>
<status endtime="20170706 17:15:42.329" status="PASS" starttime="20170706 17:15:42.108"></status>
</kw>
<status endtime="20170706 17:15:42.329" status="PASS" starttime="20170706 17:15:42.107"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170706 17:15:42.329" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry//enumerate</msg>
<status endtime="20170706 17:15:42.329" status="PASS" starttime="20170706 17:15:42.329"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170706 17:15:42.330" status="PASS" starttime="20170706 17:15:42.330"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170706 17:15:42.374" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry//enumerate, headers=None json=None</msg>
<msg timestamp="20170706 17:15:42.375" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status endtime="20170706 17:15:42.375" status="PASS" starttime="20170706 17:15:42.330"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170706 17:15:42.375" status="PASS" starttime="20170706 17:15:42.375"></status>
</kw>
<msg timestamp="20170706 17:15:42.375" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status endtime="20170706 17:15:42.375" status="PASS" starttime="20170706 17:15:42.106"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170706 17:15:42.376" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170706 17:15:42.377" level="FAIL">404 != 200</msg>
<status endtime="20170706 17:15:42.377" status="FAIL" starttime="20170706 17:15:42.376"></status>
</kw>
<msg timestamp="20170706 17:15:42.377" level="INFO">${status} = False</msg>
<status endtime="20170706 17:15:42.377" status="PASS" starttime="20170706 17:15:42.376"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
</arguments>
<msg timestamp="20170706 17:15:42.377" level="INFO">Returning from the enclosing user keyword.</msg>
<status endtime="20170706 17:15:42.378" status="PASS" starttime="20170706 17:15:42.377"></status>
</kw>
<status endtime="20170706 17:15:42.378" status="PASS" starttime="20170706 17:15:42.106"></status>
</kw>
<status endtime="20170706 17:15:42.378" status="PASS" starttime="20170706 17:15:42.064"></status>
</kw>
<status endtime="20170706 17:15:42.378" status="PASS" starttime="20170706 17:15:42.061"></status>
</kw>
<status endtime="20170706 17:15:42.378" status="PASS" starttime="20170706 17:15:42.061"></status>
</kw>
<kw name="${method} = ('Core Files', 'SCP Coredump Files')" type="foritem">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status endtime="20170706 17:15:42.380" status="PASS" starttime="20170706 17:15:42.379"></status>
</kw>
<msg timestamp="20170706 17:15:42.380" level="INFO">${status} = PASS</msg>
<msg timestamp="20170706 17:15:42.380" level="INFO">${ret_values} = None</msg>
<status endtime="20170706 17:15:42.380" status="PASS" starttime="20170706 17:15:42.379"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status endtime="20170706 17:15:42.381" status="PASS" starttime="20170706 17:15:42.380"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="SCP Coredump Files" library="openbmc_ffdc_methods">
<doc>Copy core dump file from BMC to local system.</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170706 17:15:42.426" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status endtime="20170706 17:15:42.426" status="FAIL" starttime="20170706 17:15:42.425"></status>
</kw>
<msg timestamp="20170706 17:15:42.426" level="INFO">${has_host} = False</msg>
<status endtime="20170706 17:15:42.426" status="PASS" starttime="20170706 17:15:42.425"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status endtime="20170706 17:15:42.429" status="PASS" starttime="20170706 17:15:42.427"></status>
</kw>
<status endtime="20170706 17:15:42.429" status="PASS" starttime="20170706 17:15:42.426"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg timestamp="20170706 17:15:42.430" level="INFO">${port_num} = 22</msg>
<status endtime="20170706 17:15:42.430" status="PASS" starttime="20170706 17:15:42.430"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg timestamp="20170706 17:15:42.431" level="INFO">${SSH_PORT} = 22</msg>
<status endtime="20170706 17:15:42.431" status="PASS" starttime="20170706 17:15:42.431"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg timestamp="20170706 17:15:42.431" level="INFO">${https_num} = 443</msg>
<status endtime="20170706 17:15:42.432" status="PASS" starttime="20170706 17:15:42.431"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg timestamp="20170706 17:15:42.432" level="INFO">${AUTH_URI} = https://9.3.21.61:443</msg>
<status endtime="20170706 17:15:42.432" status="PASS" starttime="20170706 17:15:42.432"></status>
</kw>
<status endtime="20170706 17:15:42.433" status="PASS" starttime="20170706 17:15:42.430"></status>
</kw>
<status endtime="20170706 17:15:42.433" status="PASS" starttime="20170706 17:15:42.429"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170706 17:15:42.434" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status endtime="20170706 17:15:42.434" status="FAIL" starttime="20170706 17:15:42.433"></status>
</kw>
<msg timestamp="20170706 17:15:42.434" level="INFO">${has_port} = False</msg>
<status endtime="20170706 17:15:42.434" status="PASS" starttime="20170706 17:15:42.433"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status endtime="20170706 17:15:42.435" status="PASS" starttime="20170706 17:15:42.435"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status endtime="20170706 17:15:42.436" status="PASS" starttime="20170706 17:15:42.436"></status>
</kw>
<status endtime="20170706 17:15:42.436" status="PASS" starttime="20170706 17:15:42.435"></status>
</kw>
<status endtime="20170706 17:15:42.436" status="PASS" starttime="20170706 17:15:42.434"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170706 17:15:42.437" level="INFO">Logging into '9.3.21.61:22' as 'root'.</msg>
<msg timestamp="20170706 17:15:44.292" level="INFO">Read output: root@witherspoon:~#</msg>
<status endtime="20170706 17:15:44.292" status="PASS" starttime="20170706 17:15:42.437"></status>
</kw>
<status endtime="20170706 17:15:44.292" status="PASS" starttime="20170706 17:15:42.424"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls /tmp/core_*</arg>
</arguments>
<assign>
<var>${core_files}</var>
</assign>
<msg timestamp="20170706 17:15:44.293" level="INFO">Executing command 'ls /tmp/core_*'.</msg>
<msg timestamp="20170706 17:15:44.384" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20170706 17:15:44.384" level="INFO">${core_files} = </msg>
<status endtime="20170706 17:15:44.385" status="PASS" starttime="20170706 17:15:44.293"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${core_files}</arg>
</arguments>
<assign>
<var>@{core_list}</var>
</assign>
<msg timestamp="20170706 17:15:44.385" level="INFO">@{core_list} = [ ]</msg>
<status endtime="20170706 17:15:44.385" status="PASS" starttime="20170706 17:15:44.385"></status>
</kw>
<kw name="Open Connection for SCP" library="connection_client">
<kw name="Import Library" library="BuiltIn">
<doc>Imports a library with the given name and optional arguments.</doc>
<arguments>
<arg>SCPLibrary</arg>
<arg>WITH NAME</arg>
<arg>scp</arg>
</arguments>
<status endtime="20170706 17:15:44.396" status="PASS" starttime="20170706 17:15:44.386"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' == '${EMPTY}'</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw name="Open Connection" library="scp">
<doc>Opens a new SCP connection to the given host.</doc>
<arguments>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<status endtime="20170706 17:15:45.133" status="PASS" starttime="20170706 17:15:44.397"></status>
</kw>
<status endtime="20170706 17:15:45.133" status="PASS" starttime="20170706 17:15:44.397"></status>
</kw>
<status endtime="20170706 17:15:45.133" status="PASS" starttime="20170706 17:15:44.396"></status>
</kw>
<status endtime="20170706 17:15:45.133" status="PASS" starttime="20170706 17:15:44.386"></status>
</kw>
<kw name="${index} IN [ @{core_list} ]" type="for">
<status endtime="20170706 17:15:45.133" status="PASS" starttime="20170706 17:15:45.133"></status>
</kw>
<status endtime="20170706 17:15:45.133" status="PASS" starttime="20170706 17:15:42.424"></status>
</kw>
<status endtime="20170706 17:15:45.133" status="PASS" starttime="20170706 17:15:42.381"></status>
</kw>
<status endtime="20170706 17:15:45.133" status="PASS" starttime="20170706 17:15:42.378"></status>
</kw>
<status endtime="20170706 17:15:45.134" status="PASS" starttime="20170706 17:15:42.378"></status>
</kw>
<status endtime="20170706 17:15:45.134" status="PASS" starttime="20170706 17:15:27.628"></status>
</kw>
<status endtime="20170706 17:15:45.134" status="PASS" starttime="20170706 17:15:27.625"></status>
</kw>
<status endtime="20170706 17:15:45.134" status="PASS" starttime="20170706 17:15:27.625"></status>
</kw>
<status endtime="20170706 17:15:45.134" status="PASS" starttime="20170706 17:15:27.625"></status>
</kw>
<kw name="Close All Connections" library="SSHLibrary">
<doc>Closes all open connections.</doc>
<status endtime="20170706 17:15:45.200" status="PASS" starttime="20170706 17:15:45.134"></status>
</kw>
<status endtime="20170706 17:15:45.200" status="PASS" starttime="20170706 17:15:27.624"></status>
</kw>
<status endtime="20170706 17:15:45.200" status="PASS" starttime="20170706 17:15:22.670"></status>
</kw>
<status endtime="20170706 17:15:45.200" status="PASS" starttime="20170706 17:15:22.669"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}'=='True'</arg>
<arg>Recover Quiesced Host</arg>
</arguments>
<status endtime="20170706 17:15:45.201" status="PASS" starttime="20170706 17:15:45.201"></status>
</kw>
<kw name="Log Test Case Status" library="openbmc_ffdc_methods">
<doc>Test case execution result history.</doc>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH_STYLE}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH_STYLE}</var>
</assign>
<msg timestamp="20170706 17:15:45.210" level="INFO">${FFDC_DIR_PATH_STYLE} = </msg>
<status endtime="20170706 17:15:45.210" status="PASS" starttime="20170706 17:15:45.202"></status>
</kw>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH}</var>
</assign>
<msg timestamp="20170706 17:15:45.210" level="INFO">${FFDC_DIR_PATH} = /tmp/fspcibld/13340/obmc-robot/logs/20170706171525749346_TestsTestBasicPoweron/20170706171525749346_PowerOnTest/</msg>
<status endtime="20170706 17:15:45.210" status="PASS" starttime="20170706 17:15:45.210"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH}' == '${EMPTY}'</arg>
<arg>Set FFDC Defaults</arg>
</arguments>
<status endtime="20170706 17:15:45.211" status="PASS" starttime="20170706 17:15:45.211"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH_STYLE}' == '${1}'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${FFDC_LOG_PATH}</arg>
<arg>${FFDC_DIR_PATH}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${TEST_HISTORY}</arg>
<arg>${FFDC_DIR_PATH}test_history.txt</arg>
</arguments>
<status endtime="20170706 17:15:45.212" status="PASS" starttime="20170706 17:15:45.211"></status>
</kw>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg timestamp="20170706 17:15:45.212" level="INFO" html="yes">Directory '&lt;a href="file:///tmp/fspcibld/13340/obmc-robot/logs"&gt;/tmp/fspcibld/13340/obmc-robot/logs&lt;/a&gt;' already exists.</msg>
<status endtime="20170706 17:15:45.212" status="PASS" starttime="20170706 17:15:45.212"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg timestamp="20170706 17:15:45.213" level="INFO" html="yes">File '&lt;a href="file:///tmp/fspcibld/13340/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/13340/obmc-robot/logs/test_history.txt&lt;/a&gt;' exists.</msg>
<status endtime="20170706 17:15:45.213" status="PASS" starttime="20170706 17:15:45.213"></status>
</kw>
<msg timestamp="20170706 17:15:45.213" level="INFO">${exist} = True</msg>
<status endtime="20170706 17:15:45.213" status="PASS" starttime="20170706 17:15:45.212"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<status endtime="20170706 17:15:45.214" status="PASS" starttime="20170706 17:15:45.214"></status>
</kw>
<kw name="Rpvars" library="gen_robot_print">
<arguments>
<arg>TEST_HISTORY</arg>
</arguments>
<status endtime="20170706 17:15:45.214" status="PASS" starttime="20170706 17:15:45.214"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170706 17:15:45.215" level="INFO">${cur_time} = 2017-07-06 17:15:45:215239</msg>
<status endtime="20170706 17:15:45.215" status="PASS" starttime="20170706 17:15:45.215"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170706 17:15:45.216" level="INFO">${cur_time} = 20170706171545215239</msg>
<status endtime="20170706 17:15:45.216" status="PASS" starttime="20170706 17:15:45.216"></status>
</kw>
<msg timestamp="20170706 17:15:45.216" level="INFO">${cur_time} = 20170706171545215239</msg>
<status endtime="20170706 17:15:45.216" status="PASS" starttime="20170706 17:15:45.215"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg timestamp="20170706 17:15:45.217" level="INFO" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/13340/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/13340/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status endtime="20170706 17:15:45.217" status="PASS" starttime="20170706 17:15:45.216"></status>
</kw>
<status endtime="20170706 17:15:45.217" status="PASS" starttime="20170706 17:15:45.201"></status>
</kw>
<status endtime="20170706 17:15:45.217" status="PASS" starttime="20170706 17:15:22.404"></status>
</kw>
<kw name="Stop SOL Console Logging" library="utils">
<doc>Stop system console logging and return log output.</doc>
<assign>
<var>${sol_log}</var>
</assign>
<kw name="Create OS Console File Path" library="utils">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg timestamp="20170706 17:15:45.219" level="INFO">${default_file_path} = /tmp/9.3.21.61_os_console</msg>
<status endtime="20170706 17:15:45.219" status="PASS" starttime="20170706 17:15:45.219"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg timestamp="20170706 17:15:45.220" level="INFO">${log_file_path} = /tmp/9.3.21.61_os_console</msg>
<status endtime="20170706 17:15:45.220" status="PASS" starttime="20170706 17:15:45.219"></status>
</kw>
<msg timestamp="20170706 17:15:45.220" level="INFO">${log_file_path} = /tmp/9.3.21.61_os_console</msg>
<status endtime="20170706 17:15:45.220" status="PASS" starttime="20170706 17:15:45.218"></status>
</kw>
<kw name="Create OS Console Command String" library="utils">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${search_string}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170706 17:15:45.221" level="INFO">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status endtime="20170706 17:15:45.221" status="PASS" starttime="20170706 17:15:45.221"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170706 17:15:45.221" status="PASS" starttime="20170706 17:15:45.221"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170706 17:15:45.226" level="INFO">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg timestamp="20170706 17:15:45.229" level="INFO">${rc} = 0</msg>
<msg timestamp="20170706 17:15:45.230" level="INFO">${output} = /tmp/fspcibld/13340/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status endtime="20170706 17:15:45.230" status="PASS" starttime="20170706 17:15:45.222"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status endtime="20170706 17:15:45.234" status="PASS" starttime="20170706 17:15:45.232"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${output}\n</arg>
</arguments>
<status endtime="20170706 17:15:45.235" status="PASS" starttime="20170706 17:15:45.234"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>ssh_pw ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>-o "StrictHostKeyChecking no" ${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170706 17:15:45.236" level="INFO">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.21.61</msg>
<status endtime="20170706 17:15:45.236" status="PASS" starttime="20170706 17:15:45.235"></status>
</kw>
<msg timestamp="20170706 17:15:45.236" level="INFO">${search_string} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.21.61</msg>
<status endtime="20170706 17:15:45.236" status="PASS" starttime="20170706 17:15:45.220"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>echo $(ps -ef | egrep '${search_string}'</arg>
<arg>| egrep -v grep | cut -c10-14)</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170706 17:15:45.237" level="INFO">${cmd_buf} = echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.21.61' | egrep -v grep | cut -c10-14)</msg>
<status endtime="20170706 17:15:45.237" status="PASS" starttime="20170706 17:15:45.236"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170706 17:15:45.237" status="PASS" starttime="20170706 17:15:45.237"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${os_con_pid}</var>
</assign>
<msg timestamp="20170706 17:15:45.242" level="INFO">Running command 'echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.21.61' | egrep -v grep | cut -c10-14) 2&gt;&amp;1'.</msg>
<msg timestamp="20170706 17:15:45.261" level="INFO">${rc} = 0</msg>
<msg timestamp="20170706 17:15:45.261" level="INFO">${os_con_pid} = </msg>
<status endtime="20170706 17:15:45.261" status="PASS" starttime="20170706 17:15:45.238"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>os_con_pid</arg>
</arguments>
<status endtime="20170706 17:15:45.265" status="PASS" starttime="20170706 17:15:45.264"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>kill -9 ${os_con_pid}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170706 17:15:45.265" level="INFO">${cmd_buf} = kill -9 </msg>
<status endtime="20170706 17:15:45.265" status="PASS" starttime="20170706 17:15:45.265"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpissuing</arg>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170706 17:15:45.268" status="PASS" starttime="20170706 17:15:45.266"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Run And Return Rc And Output</arg>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170706 17:15:45.270" level="INFO">${rc} = None</msg>
<msg timestamp="20170706 17:15:45.270" level="INFO">${output} = None</msg>
<status endtime="20170706 17:15:45.270" status="PASS" starttime="20170706 17:15:45.269"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpvars</arg>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status endtime="20170706 17:15:45.271" status="PASS" starttime="20170706 17:15:45.270"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${targ_file_path}' != '${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<msg timestamp="20170706 17:15:45.276" level="INFO" html="yes">Copied file from '&lt;a href="file:///tmp/9.3.21.61_os_console"&gt;/tmp/9.3.21.61_os_console&lt;/a&gt;' to '&lt;a href="file:///tmp/fspcibld/13340/obmc-robot/logs/9.3.21.61_os_console"&gt;/tmp/fspcibld/13340/obmc-robot/logs/9.3.21.61_os_console&lt;/a&gt;'.</msg>
<status endtime="20170706 17:15:45.276" status="PASS" starttime="20170706 17:15:45.273"></status>
</kw>
<status endtime="20170706 17:15:45.276" status="PASS" starttime="20170706 17:15:45.272"></status>
</kw>
<status endtime="20170706 17:15:45.276" status="PASS" starttime="20170706 17:15:45.271"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20170706 17:15:45.277" level="INFO">${output} = </msg>
<status endtime="20170706 17:15:45.277" status="PASS" starttime="20170706 17:15:45.277"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${debug}^1</arg>
</arguments>
<assign>
<var>${loc_quiet}</var>
</assign>
<msg timestamp="20170706 17:15:45.277" level="INFO">${loc_quiet} = 1</msg>
<status endtime="20170706 17:15:45.277" status="PASS" starttime="20170706 17:15:45.277"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return_data}' == '${1}'</arg>
<arg>Cmd Fnc</arg>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<kw name="Cmd Fnc" library="gen_cmd">
<doc>Run the given command in a shell and return the shell return code.</doc>
<arguments>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<status endtime="20170706 17:15:45.327" status="PASS" starttime="20170706 17:15:45.278"></status>
</kw>
<msg timestamp="20170706 17:15:45.329" level="INFO">${rc} = 0</msg>
<msg timestamp="20170706 17:15:45.329" level="INFO">${output} = spawn ssh -p 2200 -o StrictHostKeyChecking no root@9.3.21.61
Warning: Permanently added '[9.3.21.61]:2200' (RSA) to the list of known hosts.
root@9.3.21.61's password: 
rebootThe system is go...</msg>
<status endtime="20170706 17:15:45.329" status="PASS" starttime="20170706 17:15:45.278"></status>
</kw>
<msg timestamp="20170706 17:15:45.330" level="INFO">${sol_log} = spawn ssh -p 2200 -o StrictHostKeyChecking no root@9.3.21.61
Warning: Permanently added '[9.3.21.61]:2200' (RSA) to the list of known hosts.
root@9.3.21.61's password: 
rebootThe system is go...</msg>
<status endtime="20170706 17:15:45.330" status="PASS" starttime="20170706 17:15:45.218"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${sol_log}</arg>
</arguments>
<msg timestamp="20170706 17:15:45.332" level="INFO">spawn ssh -p 2200 -o StrictHostKeyChecking no root@9.3.21.61
Warning: Permanently added '[9.3.21.61]:2200' (RSA) to the list of known hosts.
root@9.3.21.61's password: 
rebootThe system is going down NOW!
Sent SIGTERM to all processes
[   50.001946624,5] IPMI: Soft shutdown requested
Sent SIGKILL to all processes
[   34.683853] kexec_core: Starting new kernel
[   52.466085328,5] OPAL: Switch to big-endian OS
[   53.037871536,5] OPAL: Switch to little-endian OS
 -&gt; smp_release_cpus()
spinning_secondaries = 15
 &lt;- smp_release_cpus()
[    0.633015] Severe Machine check interrupt [[Not recovered]
[    0.633076]   I[   54.176099488,0] OPAL: Reboot requested due to Platform error.
[   54.176147712,3] OPAL: Reboot requested due to Platform error.nitiator: CPU
[    0.633130]   Error type: UE [Load/Store]
[    0.633173]     Effective address: 0000000003186b01
[    0.633451] opal: Reboot type 1 not supported
[    0.633534] Kernel panic - not syncing: PowerNV Unrecovered Machine Check
[    0.633654] CPU: 1 PID: 1 Comm: swapper/0 Tainted: G   M            [   54.279841024,4] IPMI: Dropped eSEL: BMC code is buggy/missing
4.10.0-26-generic #30-Ubuntu
[    0.633812] Call Trace:
[    2.044141] ---[ end Kernel panic - not syncing: PowerNV Unrecov</msg>
<status endtime="20170706 17:15:45.332" status="PASS" starttime="20170706 17:15:45.332"></status>
</kw>
<status endtime="20170706 17:15:45.333" status="PASS" starttime="20170706 17:15:22.403"></status>
</kw>
<doc>Power off and on.</doc>
<tags>
<tag>chassisboot</tag>
<tag>Power_On_Test</tag>
</tags>
<status critical="yes" endtime="20170706 17:15:45.333" status="FAIL" starttime="20170706 17:12:16.020">Keyword 'Is Host Off' failed after retrying for 3 minutes. The last error was: Off != Running</status>
</test>
<doc>Test power on for HW CI.</doc>
<status endtime="20170706 17:15:45.335" status="FAIL" starttime="20170706 17:12:15.988"></status>
</suite>
<doc>Set metadata for test suite.</doc>
<status endtime="20170706 17:15:45.338" status="FAIL" starttime="20170706 17:12:08.864"></status>
</suite>
<statistics>
<total>
<stat pass="1" fail="1">Critical Tests</stat>
<stat pass="1" fail="1">All Tests</stat>
</total>
<tag>
<stat pass="0" fail="1">chassisboot</stat>
<stat pass="0" fail="1">Power_On_Test</stat>
<stat pass="1" fail="0">Test_SSL_Connection</stat>
</tag>
<suite>
<stat id="s1" pass="1" fail="1" name="Tests">Tests</stat>
<stat id="s1-s1" pass="1" fail="0" name="Security">Tests.Security</stat>
<stat id="s1-s1-s1" pass="1" fail="0" name="Test Ssl">Tests.Security.Test Ssl</stat>
<stat id="s1-s2" pass="0" fail="1" name="Test Basic Poweron">Tests.Test Basic Poweron</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
