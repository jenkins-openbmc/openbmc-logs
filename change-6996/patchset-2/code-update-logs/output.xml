<?xml version="1.0" encoding="UTF-8"?>
<robot generated="20170928 23:22:32.627" generator="Robot 3.0.2 (Python 2.7.12 on linux2)">
<suite source="/home/fspcibld/openbmc-test-automation/extended/code_update/bmc_code_update.robot" id="s1" name="Bmc Code Update">
<test id="s1-t1" name="REST BMC Code Update">
<kw type="setup" name="Code Update Setup">
<doc>Do code update test case setup.</doc>
<kw name="Delete All Dumps" library="dump_utils">
<doc>Delete all dumps.</doc>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${DUMP_ENTRY_URI}list</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170928 23:22:33.825" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170928 23:22:33.825" starttime="20170928 23:22:33.824"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170928 23:22:33.826" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170928 23:22:33.826" starttime="20170928 23:22:33.826"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170928 23:22:33.827" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170928 23:22:33.827" starttime="20170928 23:22:33.826"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170928 23:22:33.827" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170928 23:22:33.828" starttime="20170928 23:22:33.827"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170928 23:22:34.041" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170928 23:22:34.041" starttime="20170928 23:22:33.828"></status>
</kw>
<msg timestamp="20170928 23:22:34.041" level="INFO">${status} = PASS</msg>
<msg timestamp="20170928 23:22:34.041" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170928 23:22:34.041" starttime="20170928 23:22:33.828"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170928 23:22:34.042" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170928 23:22:34.042" starttime="20170928 23:22:34.042"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170928 23:22:34.043" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170928 23:22:34.043" starttime="20170928 23:22:34.043"></status>
</kw>
<status status="PASS" endtime="20170928 23:22:34.043" starttime="20170928 23:22:33.823"></status>
</kw>
<status status="PASS" endtime="20170928 23:22:34.043" starttime="20170928 23:22:33.823"></status>
</kw>
<status status="PASS" endtime="20170928 23:22:34.043" starttime="20170928 23:22:33.822"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170928 23:22:34.044" level="INFO">${base_uri} = /xyz/openbmc_project/dump/entry/list</msg>
<status status="PASS" endtime="20170928 23:22:34.044" starttime="20170928 23:22:34.044"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170928 23:22:34.045" starttime="20170928 23:22:34.044"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170928 23:22:34.106" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/dump/entry/list, headers=None json=None</msg>
<msg timestamp="20170928 23:22:34.106" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170928 23:22:34.106" starttime="20170928 23:22:34.045"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170928 23:22:34.107" starttime="20170928 23:22:34.106"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170928 23:22:34.107" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170928 23:22:34.107" starttime="20170928 23:22:34.107"></status>
</kw>
<msg timestamp="20170928 23:22:34.108" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170928 23:22:34.108" starttime="20170928 23:22:33.821"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>${resp.status_code} == ${HTTP_NOT_FOUND}</arg>
</arguments>
<msg timestamp="20170928 23:22:34.108" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20170928 23:22:34.108" starttime="20170928 23:22:34.108"></status>
</kw>
<status status="PASS" endtime="20170928 23:22:34.108" starttime="20170928 23:22:33.821"></status>
</kw>
<status status="PASS" endtime="20170928 23:22:34.109" starttime="20170928 23:22:33.821"></status>
</kw>
<kw name="Upload And Activate Image" library="code_update_utils">
<doc>Upload an image to the BMC and activate it with REST.</doc>
<arguments>
<arg>${IMAGE_FILE_PATH}</arg>
<arg>skip_if_active=${SKIP_UPDATE_IF_ACTIVE}</arg>
</arguments>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${image_file_path}</arg>
</arguments>
<msg timestamp="20170928 23:22:34.110" html="yes" level="INFO">File '&lt;a href="file:///home/fspcibld/obmc-phosphor-image-witherspoon.ubi.mtd.tar"&gt;/home/fspcibld/obmc-phosphor-image-witherspoon.ubi.mtd.tar&lt;/a&gt;' exists.</msg>
<status status="PASS" endtime="20170928 23:22:34.110" starttime="20170928 23:22:34.110"></status>
</kw>
<kw name="Get Version Tar" library="code_update_utils">
<doc>Read the image version from the MANIFEST inside the tarball.</doc>
<arguments>
<arg>${image_file_path}</arg>
</arguments>
<assign>
<var>${image_version}</var>
</assign>
<msg timestamp="20170928 23:22:34.133" level="INFO">${image_version} = v1.99.10-62-gc437390</msg>
<status status="PASS" endtime="20170928 23:22:34.133" starttime="20170928 23:22:34.111"></status>
</kw>
<kw name="Get Binary File" library="OperatingSystem">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${image_file_path}</arg>
</arguments>
<assign>
<var>${image_data}</var>
</assign>
<msg timestamp="20170928 23:22:34.133" html="yes" level="INFO">Getting file '&lt;a href="file:///home/fspcibld/obmc-phosphor-image-witherspoon.ubi.mtd.tar"&gt;/home/fspcibld/obmc-phosphor-image-witherspoon.ubi.mtd.tar&lt;/a&gt;'.</msg>
<msg timestamp="20170928 23:22:44.865" level="INFO">${image_data} = image-u-boot0000644000175100017520000113170013151356420013160 0...</msg>
<status status="PASS" endtime="20170928 23:22:44.866" starttime="20170928 23:22:34.133"></status>
</kw>
<kw name="Upload Image To BMC" library="rest_client">
<arguments>
<arg>/upload/image</arg>
<arg>data=${image_data}</arg>
</arguments>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170928 23:22:44.869" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170928 23:22:44.869" starttime="20170928 23:22:44.869"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170928 23:22:44.870" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170928 23:22:44.870" starttime="20170928 23:22:44.870"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170928 23:22:44.871" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170928 23:22:44.871" starttime="20170928 23:22:44.870"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170928 23:22:44.871" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170928 23:22:44.871" starttime="20170928 23:22:44.871"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170928 23:22:45.057" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170928 23:22:45.057" starttime="20170928 23:22:44.872"></status>
</kw>
<msg timestamp="20170928 23:22:45.058" level="INFO">${status} = PASS</msg>
<msg timestamp="20170928 23:22:45.058" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170928 23:22:45.058" starttime="20170928 23:22:44.872"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170928 23:22:45.058" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170928 23:22:45.059" starttime="20170928 23:22:45.058"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170928 23:22:45.059" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170928 23:22:45.059" starttime="20170928 23:22:45.059"></status>
</kw>
<status status="PASS" endtime="20170928 23:22:45.059" starttime="20170928 23:22:44.868"></status>
</kw>
<status status="PASS" endtime="20170928 23:22:45.059" starttime="20170928 23:22:44.868"></status>
</kw>
<status status="PASS" endtime="20170928 23:22:45.060" starttime="20170928 23:22:44.867"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170928 23:22:45.060" level="INFO">${base_uri} = /upload/image</msg>
<status status="PASS" endtime="20170928 23:22:45.060" starttime="20170928 23:22:45.060"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/octet-stream</arg>
<arg>Accept=application/octet-stream</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170928 23:22:45.061" level="INFO">${headers} = {u'Content-Type': u'application/octet-stream', u'Accept': u'application/octet-stream'}</msg>
<status status="PASS" endtime="20170928 23:22:45.061" starttime="20170928 23:22:45.061"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20170928 23:22:45.062" starttime="20170928 23:22:45.061"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170928 23:22:45.062" starttime="20170928 23:22:45.062"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170928 23:22:55.080" level="FAIL">SSLError: ('The write operation timed out',)</msg>
<status status="FAIL" endtime="20170928 23:22:55.081" starttime="20170928 23:22:45.063"></status>
</kw>
<status status="FAIL" endtime="20170928 23:22:55.081" starttime="20170928 23:22:44.866"></status>
</kw>
<status status="FAIL" endtime="20170928 23:22:55.081" starttime="20170928 23:22:34.109"></status>
</kw>
<kw type="teardown" name="Code Update Test Teardown">
<doc>Do code update test case teardown.</doc>
<kw name="FFDC On Test Case Fail" library="openbmc_ffdc">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL'</arg>
<arg>FFDC</arg>
</arguments>
<kw name="Ffdc" library="openbmc_ffdc">
<doc>Gather First Failure Data Capture (FFDC).</doc>
<kw name="Ping Host" library="utils">
<arguments>
<arg>9.3.86.161</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170928 23:22:55.099" level="INFO">Length is 10</msg>
<status status="PASS" endtime="20170928 23:22:55.099" starttime="20170928 23:22:55.098"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170928 23:22:55.105" level="INFO">Running command 'ping -c 4 9.3.86.161 2&gt;&amp;1'.</msg>
<msg timestamp="20170928 23:22:58.106" level="INFO">${RC} = 0</msg>
<msg timestamp="20170928 23:22:58.106" level="INFO">${output} = PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=0.676 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=0.599 ms
64 bytes from 9.3.86.161: icmp_se...</msg>
<status status="PASS" endtime="20170928 23:22:58.107" starttime="20170928 23:22:55.099"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170928 23:22:58.110" level="INFO">RC: 0
Output:
PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=0.676 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=0.599 ms
64 bytes from 9.3.86.161: icmp_seq=3 ttl=62 time=0.583 ms
64 bytes from 9.3.86.161: icmp_seq=4 ttl=62 time=0.571 ms

--- 9.3.86.161 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 2998ms
rtt min/avg/max/mdev = 0.571/0.607/0.676/0.044 ms</msg>
<status status="PASS" endtime="20170928 23:22:58.110" starttime="20170928 23:22:58.109"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20170928 23:22:58.111" starttime="20170928 23:22:58.111"></status>
</kw>
<status status="PASS" endtime="20170928 23:22:58.111" starttime="20170928 23:22:55.098"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170928 23:22:58.126" level="INFO">${cur_time} = 2017-09-28 23:22:58:126284</msg>
<status status="PASS" endtime="20170928 23:22:58.127" starttime="20170928 23:22:58.126"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170928 23:22:58.127" level="INFO">${cur_time} = 20170928232258126284</msg>
<status status="PASS" endtime="20170928 23:22:58.127" starttime="20170928 23:22:58.127"></status>
</kw>
<status status="PASS" endtime="20170928 23:22:58.127" starttime="20170928 23:22:58.125"></status>
</kw>
<msg timestamp="20170928 23:22:58.134" level="INFO">${FFDC_TIME} = 20170928232258126284</msg>
<kw name="Get Test Dir and Name" library="openbmc_ffdc_utils">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20170928 23:22:58.135" level="INFO">${suite_name} = BmcCodeUpdate</msg>
<status status="PASS" endtime="20170928 23:22:58.135" starttime="20170928 23:22:58.135"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20170928 23:22:58.136" level="INFO">${suite_name} = 20170928232258126284_BmcCodeUpdate</msg>
<status status="PASS" endtime="20170928 23:22:58.136" starttime="20170928 23:22:58.136"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20170928 23:22:58.137" level="INFO">${test_name} = RESTBMCCodeUpdate</msg>
<status status="PASS" endtime="20170928 23:22:58.137" starttime="20170928 23:22:58.136"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20170928 23:22:58.137" level="INFO">${test_name} = 20170928232258126284_RESTBMCCodeUpdate</msg>
<status status="PASS" endtime="20170928 23:22:58.137" starttime="20170928 23:22:58.137"></status>
</kw>
<status status="PASS" endtime="20170928 23:22:58.137" starttime="20170928 23:22:58.134"></status>
</kw>
<msg timestamp="20170928 23:22:58.144" level="INFO">${FFDC_DIR_PATH} = /home/fspcibld/logs/20170928232258126284_BmcCodeUpdate/20170928232258126284_RESTBMCCodeUpdate/</msg>
<msg timestamp="20170928 23:22:58.149" level="INFO">${FFDC_PREFIX} = 20170928232258126284_</msg>
<msg timestamp="20170928 23:22:58.171" level="INFO">${LOG_PREFIX} = /home/fspcibld/logs/20170928232258126284_BmcCodeUpdate/20170928232258126284_RESTBMCCodeUpdate/20170928232258126284_</msg>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>/home/fspcibld/logs/20170928232258126284_BmcCodeUpdate/20170928232258126284_RESTBMCCodeUpdate/</arg>
</arguments>
<msg timestamp="20170928 23:22:58.172" html="yes" level="INFO">Created directory '&lt;a href="file:///home/fspcibld/logs/20170928232258126284_BmcCodeUpdate/20170928232258126284_RESTBMCCodeUpdate"&gt;/home/fspcibld/logs/20170928232258126284_BmcCodeUpdate/20170928232258126284_RESTBMCCodeUpdate&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 23:22:58.173" starttime="20170928 23:22:58.172"></status>
</kw>
<msg timestamp="20170928 23:22:58.178" level="INFO">${FFDC_FILE_PATH} = /home/fspcibld/logs/20170928232258126284_BmcCodeUpdate/20170928232258126284_RESTBMCCodeUpdate/20170928232258126284_BMC_general.txt</msg>
<kw name="Header Message" library="openbmc_ffdc_utils">
<doc>Write header message to the report document manifest.</doc>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${HEADER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 23:22:58.192" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928232258126284_BmcCodeUpdate/20170928232258126284_RESTBMCCodeUpdate/20170928232258126284_BMC_general.txt"&gt;/home/fspcibld/logs/20170928232258126284_BmcCodeUpdate/20170928232258126284_RESTBMCCodeUpdate/20170928232258126284_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 23:22:58.193" starttime="20170928 23:22:58.192"></status>
</kw>
<status status="PASS" endtime="20170928 23:22:58.193" starttime="20170928 23:22:58.191"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 23:22:58.194" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928232258126284_BmcCodeUpdate/20170928232258126284_RESTBMCCodeUpdate/20170928232258126284_BMC_general.txt"&gt;/home/fspcibld/logs/20170928232258126284_BmcCodeUpdate/20170928232258126284_RESTBMCCodeUpdate/20170928232258126284_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 23:22:58.194" starttime="20170928 23:22:58.193"></status>
</kw>
<status status="PASS" endtime="20170928 23:22:58.194" starttime="20170928 23:22:58.193"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Suite File\t\t: ${SUITE_NAME} ${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 23:22:58.195" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928232258126284_BmcCodeUpdate/20170928232258126284_RESTBMCCodeUpdate/20170928232258126284_BMC_general.txt"&gt;/home/fspcibld/logs/20170928232258126284_BmcCodeUpdate/20170928232258126284_RESTBMCCodeUpdate/20170928232258126284_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 23:22:58.195" starttime="20170928 23:22:58.195"></status>
</kw>
<status status="PASS" endtime="20170928 23:22:58.195" starttime="20170928 23:22:58.194"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Case Name\t\t: ${TEST_NAME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 23:22:58.198" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928232258126284_BmcCodeUpdate/20170928232258126284_RESTBMCCodeUpdate/20170928232258126284_BMC_general.txt"&gt;/home/fspcibld/logs/20170928232258126284_BmcCodeUpdate/20170928232258126284_RESTBMCCodeUpdate/20170928232258126284_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 23:22:58.198" starttime="20170928 23:22:58.197"></status>
</kw>
<status status="PASS" endtime="20170928 23:22:58.198" starttime="20170928 23:22:58.196"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Source File\t: ${SUITE_SOURCE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 23:22:58.199" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928232258126284_BmcCodeUpdate/20170928232258126284_RESTBMCCodeUpdate/20170928232258126284_BMC_general.txt"&gt;/home/fspcibld/logs/20170928232258126284_BmcCodeUpdate/20170928232258126284_RESTBMCCodeUpdate/20170928232258126284_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 23:22:58.199" starttime="20170928 23:22:58.199"></status>
</kw>
<status status="PASS" endtime="20170928 23:22:58.199" starttime="20170928 23:22:58.198"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Failure Time Stamp\t: ${FFDC_TIME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 23:22:58.200" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928232258126284_BmcCodeUpdate/20170928232258126284_RESTBMCCodeUpdate/20170928232258126284_BMC_general.txt"&gt;/home/fspcibld/logs/20170928232258126284_BmcCodeUpdate/20170928232258126284_RESTBMCCodeUpdate/20170928232258126284_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 23:22:58.201" starttime="20170928 23:22:58.200"></status>
</kw>
<status status="PASS" endtime="20170928 23:22:58.201" starttime="20170928 23:22:58.199"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Error Message\t: ${TEST_MESSAGE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 23:22:58.202" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928232258126284_BmcCodeUpdate/20170928232258126284_RESTBMCCodeUpdate/20170928232258126284_BMC_general.txt"&gt;/home/fspcibld/logs/20170928232258126284_BmcCodeUpdate/20170928232258126284_RESTBMCCodeUpdate/20170928232258126284_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 23:22:58.202" starttime="20170928 23:22:58.201"></status>
</kw>
<status status="PASS" endtime="20170928 23:22:58.202" starttime="20170928 23:22:58.201"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Documentation\t:${\n}${TEST_DOCUMENTATION}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 23:22:58.204" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928232258126284_BmcCodeUpdate/20170928232258126284_RESTBMCCodeUpdate/20170928232258126284_BMC_general.txt"&gt;/home/fspcibld/logs/20170928232258126284_BmcCodeUpdate/20170928232258126284_RESTBMCCodeUpdate/20170928232258126284_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 23:22:58.204" starttime="20170928 23:22:58.203"></status>
</kw>
<status status="PASS" endtime="20170928 23:22:58.204" starttime="20170928 23:22:58.202"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 23:22:58.206" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928232258126284_BmcCodeUpdate/20170928232258126284_RESTBMCCodeUpdate/20170928232258126284_BMC_general.txt"&gt;/home/fspcibld/logs/20170928232258126284_BmcCodeUpdate/20170928232258126284_RESTBMCCodeUpdate/20170928232258126284_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 23:22:58.206" starttime="20170928 23:22:58.206"></status>
</kw>
<status status="PASS" endtime="20170928 23:22:58.206" starttime="20170928 23:22:58.204"></status>
</kw>
<kw name="Test Setup Info" library="openbmc_ffdc_utils">
<doc>BMC IP, Model and other information</doc>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 23:22:58.208" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928232258126284_BmcCodeUpdate/20170928232258126284_RESTBMCCodeUpdate/20170928232258126284_BMC_general.txt"&gt;/home/fspcibld/logs/20170928232258126284_BmcCodeUpdate/20170928232258126284_RESTBMCCodeUpdate/20170928232258126284_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 23:22:58.208" starttime="20170928 23:22:58.208"></status>
</kw>
<status status="PASS" endtime="20170928 23:22:58.208" starttime="20170928 23:22:58.207"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Setup Information:</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 23:22:58.209" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928232258126284_BmcCodeUpdate/20170928232258126284_RESTBMCCodeUpdate/20170928232258126284_BMC_general.txt"&gt;/home/fspcibld/logs/20170928232258126284_BmcCodeUpdate/20170928232258126284_RESTBMCCodeUpdate/20170928232258126284_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 23:22:58.209" starttime="20170928 23:22:58.209"></status>
</kw>
<status status="PASS" endtime="20170928 23:22:58.209" starttime="20170928 23:22:58.208"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 23:22:58.210" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928232258126284_BmcCodeUpdate/20170928232258126284_RESTBMCCodeUpdate/20170928232258126284_BMC_general.txt"&gt;/home/fspcibld/logs/20170928232258126284_BmcCodeUpdate/20170928232258126284_RESTBMCCodeUpdate/20170928232258126284_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 23:22:58.211" starttime="20170928 23:22:58.210"></status>
</kw>
<status status="PASS" endtime="20170928 23:22:58.211" starttime="20170928 23:22:58.210"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>OPENBMC HOST \t: ${OPENBMC_HOST}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 23:22:58.212" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928232258126284_BmcCodeUpdate/20170928232258126284_RESTBMCCodeUpdate/20170928232258126284_BMC_general.txt"&gt;/home/fspcibld/logs/20170928232258126284_BmcCodeUpdate/20170928232258126284_RESTBMCCodeUpdate/20170928232258126284_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 23:22:58.212" starttime="20170928 23:22:58.212"></status>
</kw>
<status status="PASS" endtime="20170928 23:22:58.212" starttime="20170928 23:22:58.211"></status>
</kw>
<kw name="Get BMC System Model" library="utils">
<doc>Get the BMC model from the device tree.</doc>
<assign>
<var>${model_name}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20170928 23:22:58.234" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170928 23:22:58.234" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170928 23:22:59.031" level="INFO">Read output: root@witherspoon:~#</msg>
<msg timestamp="20170928 23:22:59.031" level="INFO">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg timestamp="20170928 23:22:59.098" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170928 23:22:59.108" level="INFO">${bmc_model} = Witherspoon</msg>
<msg timestamp="20170928 23:22:59.108" level="INFO">${stderr} = </msg>
<msg timestamp="20170928 23:22:59.108" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20170928 23:22:59.109" starttime="20170928 23:22:58.213"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170928 23:22:59.109" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170928 23:22:59.109" starttime="20170928 23:22:59.109"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg timestamp="20170928 23:22:59.110" level="INFO">Length is 11</msg>
<status status="PASS" endtime="20170928 23:22:59.110" starttime="20170928 23:22:59.110"></status>
</kw>
<msg timestamp="20170928 23:22:59.110" level="INFO">${model_name} = Witherspoon</msg>
<status status="PASS" endtime="20170928 23:22:59.110" starttime="20170928 23:22:58.212"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>SYSTEM TYPE \t: ${model_name}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 23:22:59.112" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928232258126284_BmcCodeUpdate/20170928232258126284_RESTBMCCodeUpdate/20170928232258126284_BMC_general.txt"&gt;/home/fspcibld/logs/20170928232258126284_BmcCodeUpdate/20170928232258126284_RESTBMCCodeUpdate/20170928232258126284_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 23:22:59.112" starttime="20170928 23:22:59.111"></status>
</kw>
<status status="PASS" endtime="20170928 23:22:59.112" starttime="20170928 23:22:59.110"></status>
</kw>
<status status="PASS" endtime="20170928 23:22:59.112" starttime="20170928 23:22:58.206"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${MSG_INTRO}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 23:22:59.113" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928232258126284_BmcCodeUpdate/20170928232258126284_RESTBMCCodeUpdate/20170928232258126284_BMC_general.txt"&gt;/home/fspcibld/logs/20170928232258126284_BmcCodeUpdate/20170928232258126284_RESTBMCCodeUpdate/20170928232258126284_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 23:22:59.113" starttime="20170928 23:22:59.113"></status>
</kw>
<status status="PASS" endtime="20170928 23:22:59.113" starttime="20170928 23:22:59.112"></status>
</kw>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170928 23:22:59.114" level="INFO">@{entries} = [ APPLICATION DATA | DRIVER INFO | BMC DATA ]</msg>
<status status="PASS" endtime="20170928 23:22:59.114" starttime="20170928 23:22:59.114"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = APPLICATION DATA">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 23:22:59.115" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928232258126284_BmcCodeUpdate/20170928232258126284_RESTBMCCodeUpdate/20170928232258126284_BMC_general.txt"&gt;/home/fspcibld/logs/20170928232258126284_BmcCodeUpdate/20170928232258126284_RESTBMCCodeUpdate/20170928232258126284_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 23:22:59.116" starttime="20170928 23:22:59.115"></status>
</kw>
<status status="PASS" endtime="20170928 23:22:59.116" starttime="20170928 23:22:59.114"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 23:22:59.117" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928232258126284_BmcCodeUpdate/20170928232258126284_RESTBMCCodeUpdate/20170928232258126284_BMC_general.txt"&gt;/home/fspcibld/logs/20170928232258126284_BmcCodeUpdate/20170928232258126284_RESTBMCCodeUpdate/20170928232258126284_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 23:22:59.117" starttime="20170928 23:22:59.117"></status>
</kw>
<status status="PASS" endtime="20170928 23:22:59.117" starttime="20170928 23:22:59.116"></status>
</kw>
<status status="PASS" endtime="20170928 23:22:59.117" starttime="20170928 23:22:59.114"></status>
</kw>
<kw type="foritem" name="${index} = DRIVER INFO">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 23:22:59.119" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928232258126284_BmcCodeUpdate/20170928232258126284_RESTBMCCodeUpdate/20170928232258126284_BMC_general.txt"&gt;/home/fspcibld/logs/20170928232258126284_BmcCodeUpdate/20170928232258126284_RESTBMCCodeUpdate/20170928232258126284_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 23:22:59.119" starttime="20170928 23:22:59.118"></status>
</kw>
<status status="PASS" endtime="20170928 23:22:59.119" starttime="20170928 23:22:59.118"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 23:22:59.120" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928232258126284_BmcCodeUpdate/20170928232258126284_RESTBMCCodeUpdate/20170928232258126284_BMC_general.txt"&gt;/home/fspcibld/logs/20170928232258126284_BmcCodeUpdate/20170928232258126284_RESTBMCCodeUpdate/20170928232258126284_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 23:22:59.120" starttime="20170928 23:22:59.120"></status>
</kw>
<status status="PASS" endtime="20170928 23:22:59.120" starttime="20170928 23:22:59.119"></status>
</kw>
<status status="PASS" endtime="20170928 23:22:59.120" starttime="20170928 23:22:59.117"></status>
</kw>
<kw type="foritem" name="${index} = BMC DATA">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 23:22:59.122" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928232258126284_BmcCodeUpdate/20170928232258126284_RESTBMCCodeUpdate/20170928232258126284_BMC_general.txt"&gt;/home/fspcibld/logs/20170928232258126284_BmcCodeUpdate/20170928232258126284_RESTBMCCodeUpdate/20170928232258126284_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 23:22:59.122" starttime="20170928 23:22:59.121"></status>
</kw>
<status status="PASS" endtime="20170928 23:22:59.122" starttime="20170928 23:22:59.121"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 23:22:59.123" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928232258126284_BmcCodeUpdate/20170928232258126284_RESTBMCCodeUpdate/20170928232258126284_BMC_general.txt"&gt;/home/fspcibld/logs/20170928232258126284_BmcCodeUpdate/20170928232258126284_RESTBMCCodeUpdate/20170928232258126284_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 23:22:59.123" starttime="20170928 23:22:59.123"></status>
</kw>
<status status="PASS" endtime="20170928 23:22:59.123" starttime="20170928 23:22:59.122"></status>
</kw>
<status status="PASS" endtime="20170928 23:22:59.123" starttime="20170928 23:22:59.121"></status>
</kw>
<status status="PASS" endtime="20170928 23:22:59.123" starttime="20170928 23:22:59.114"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${MSG_DETAIL}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 23:22:59.125" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928232258126284_BmcCodeUpdate/20170928232258126284_RESTBMCCodeUpdate/20170928232258126284_BMC_general.txt"&gt;/home/fspcibld/logs/20170928232258126284_BmcCodeUpdate/20170928232258126284_RESTBMCCodeUpdate/20170928232258126284_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 23:22:59.125" starttime="20170928 23:22:59.125"></status>
</kw>
<status status="PASS" endtime="20170928 23:22:59.125" starttime="20170928 23:22:59.123"></status>
</kw>
<status status="PASS" endtime="20170928 23:22:59.126" starttime="20170928 23:22:58.190"></status>
</kw>
<kw name="Call FFDC Methods" library="openbmc_ffdc_methods">
<doc>Call into FFDC Keyword index list.</doc>
<arguments>
<arg>ffdc_function_list=</arg>
</arguments>
<kw name="Get Ffdc Method Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170928 23:22:59.133" level="INFO">@{entries} = [ BMC LOGS ]</msg>
<status status="PASS" endtime="20170928 23:22:59.133" starttime="20170928 23:22:59.133"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC LOGS">
<kw name="Method Call Keyword List" library="openbmc_ffdc_methods">
<doc>Iterate the list through keyword index.</doc>
<arguments>
<arg>${index}</arg>
<arg>${ffdc_function_list}</arg>
</arguments>
<kw name="Get Ffdc Method Call" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<assign>
<var>@{method_list}</var>
</assign>
<msg timestamp="20170928 23:22:59.134" level="INFO">@{method_list} = [ ('FFDC Generic Report', 'BMC FFDC Manifest') | ('Get Request FFDC', 'BMC FFDC Get Requests') | ('Sys Inventory Files', 'System Inventory Files') | ('Core Files', 'SCP Coredump Files') | ('BMC Specif...</msg>
<status status="PASS" endtime="20170928 23:22:59.134" starttime="20170928 23:22:59.134"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ffdc_function_list}' == '${EMPTY}'</arg>
<arg>Get FFDC Method Desc</arg>
<arg>${index}</arg>
<arg>ELSE</arg>
<arg>Split String</arg>
<arg>${ffdc_function_list}</arg>
<arg>separator=:</arg>
</arguments>
<assign>
<var>@{ffdc_function_list}</var>
</assign>
<kw name="Get Ffdc Method Desc" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<status status="PASS" endtime="20170928 23:22:59.136" starttime="20170928 23:22:59.135"></status>
</kw>
<msg timestamp="20170928 23:22:59.136" level="INFO">@{ffdc_function_list} = [ FFDC Generic Report | Get Request FFDC | Sys Inventory Files | Core Files | BMC Specific Files | SEL Log | OS FFDC ]</msg>
<status status="PASS" endtime="20170928 23:22:59.136" starttime="20170928 23:22:59.135"></status>
</kw>
<kw type="for" name="${method} IN [ @{method_list} ]">
<kw type="foritem" name="${method} = ('FFDC Generic Report', 'BMC FFDC Manifest')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170928 23:22:59.138" starttime="20170928 23:22:59.137"></status>
</kw>
<msg timestamp="20170928 23:22:59.138" level="INFO">${status} = PASS</msg>
<msg timestamp="20170928 23:22:59.138" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170928 23:22:59.138" starttime="20170928 23:22:59.137"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170928 23:22:59.139" starttime="20170928 23:22:59.138"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Manifest" library="openbmc_ffdc_methods">
<doc>Get the commands index for the FFDC_BMC_CMD,</doc>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170928 23:22:59.158" level="INFO">@{entries} = [ APPLICATION DATA | DRIVER INFO | BMC DATA ]</msg>
<status status="PASS" endtime="20170928 23:22:59.158" starttime="20170928 23:22:59.158"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = APPLICATION DATA">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170928 23:22:59.160" level="INFO">@{cmd_list} = [ ('BMC state', '/usr/sbin/obmcutil state') ]</msg>
<status status="PASS" endtime="20170928 23:22:59.160" starttime="20170928 23:22:59.159"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170928 23:22:59.167" level="INFO">${ENTRY_INDEX} = APPLICATION DATA</msg>
<status status="PASS" endtime="20170928 23:22:59.167" starttime="20170928 23:22:59.160"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC state', '/usr/sbin/obmcutil state')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 23:22:59.170" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928232258126284_BmcCodeUpdate/20170928232258126284_RESTBMCCodeUpdate/20170928232258126284_BMC_general.txt"&gt;/home/fspcibld/logs/20170928232258126284_BmcCodeUpdate/20170928232258126284_RESTBMCCodeUpdate/20170928232258126284_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 23:22:59.170" starttime="20170928 23:22:59.170"></status>
</kw>
<status status="PASS" endtime="20170928 23:22:59.170" starttime="20170928 23:22:59.169"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 23:22:59.171" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928232258126284_BmcCodeUpdate/20170928232258126284_RESTBMCCodeUpdate/20170928232258126284_BMC_general.txt"&gt;/home/fspcibld/logs/20170928232258126284_BmcCodeUpdate/20170928232258126284_RESTBMCCodeUpdate/20170928232258126284_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 23:22:59.172" starttime="20170928 23:22:59.171"></status>
</kw>
<status status="PASS" endtime="20170928 23:22:59.172" starttime="20170928 23:22:59.170"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 23:22:59.173" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928232258126284_BmcCodeUpdate/20170928232258126284_RESTBMCCodeUpdate/20170928232258126284_BMC_general.txt"&gt;/home/fspcibld/logs/20170928232258126284_BmcCodeUpdate/20170928232258126284_RESTBMCCodeUpdate/20170928232258126284_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 23:22:59.173" starttime="20170928 23:22:59.172"></status>
</kw>
<status status="PASS" endtime="20170928 23:22:59.173" starttime="20170928 23:22:59.172"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 23:22:59.174" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928232258126284_BmcCodeUpdate/20170928232258126284_RESTBMCCodeUpdate/20170928232258126284_BMC_general.txt"&gt;/home/fspcibld/logs/20170928232258126284_BmcCodeUpdate/20170928232258126284_RESTBMCCodeUpdate/20170928232258126284_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 23:22:59.174" starttime="20170928 23:22:59.174"></status>
</kw>
<status status="PASS" endtime="20170928 23:22:59.174" starttime="20170928 23:22:59.173"></status>
</kw>
<status status="PASS" endtime="20170928 23:22:59.175" starttime="20170928 23:22:59.168"></status>
</kw>
<status status="PASS" endtime="20170928 23:22:59.175" starttime="20170928 23:22:59.168"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170928 23:22:59.175" level="INFO">${cmd_buf} = BMC Execute Command  /usr/sbin/obmcutil state  ignore_err=1</msg>
<status status="PASS" endtime="20170928 23:22:59.175" starttime="20170928 23:22:59.175"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>/usr/sbin/obmcutil state</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170928 23:22:59.238" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170928 23:22:59.239" level="INFO">Executing command '/usr/sbin/obmcutil state'.</msg>
<msg timestamp="20170928 23:23:00.584" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170928 23:23:00.585" starttime="20170928 23:22:59.203"></status>
</kw>
<msg timestamp="20170928 23:23:00.585" level="INFO">${status} = PASS</msg>
<msg timestamp="20170928 23:23:00.585" level="INFO">${ret_values} = (u'CurrentBMCState:    xyz.openbmc_project.State.BMC.BMCState.Ready\nCurrentPowerState:  xyz.openbmc_project.State.Chassis.PowerState.Off\nCurrentHostState:   xyz.openbmc_project.State.Host.HostState....</msg>
<status status="PASS" endtime="20170928 23:23:00.585" starttime="20170928 23:22:59.176"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170928 23:23:00.586" level="INFO">${stdout} = CurrentBMCState:    xyz.openbmc_project.State.BMC.BMCState.Ready
CurrentPowerState:  xyz.openbmc_project.State.Chassis.PowerState.Off
CurrentHostState:   xyz.openbmc_project.State.Host.HostState.Off</msg>
<status status="PASS" endtime="20170928 23:23:00.586" starttime="20170928 23:23:00.585"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170928 23:23:00.586" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170928 23:23:00.586" starttime="20170928 23:23:00.586"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 23:23:00.594" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928232258126284_BmcCodeUpdate/20170928232258126284_RESTBMCCodeUpdate/20170928232258126284_BMC_general.txt"&gt;/home/fspcibld/logs/20170928232258126284_BmcCodeUpdate/20170928232258126284_RESTBMCCodeUpdate/20170928232258126284_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 23:23:00.594" starttime="20170928 23:23:00.593"></status>
</kw>
<status status="PASS" endtime="20170928 23:23:00.594" starttime="20170928 23:23:00.593"></status>
</kw>
<status status="PASS" endtime="20170928 23:23:00.594" starttime="20170928 23:23:00.587"></status>
</kw>
<status status="PASS" endtime="20170928 23:23:00.594" starttime="20170928 23:22:59.167"></status>
</kw>
<status status="PASS" endtime="20170928 23:23:00.594" starttime="20170928 23:22:59.167"></status>
</kw>
<status status="PASS" endtime="20170928 23:23:00.594" starttime="20170928 23:22:59.167"></status>
</kw>
<status status="PASS" endtime="20170928 23:23:00.594" starttime="20170928 23:22:59.159"></status>
</kw>
<status status="PASS" endtime="20170928 23:23:00.594" starttime="20170928 23:22:59.159"></status>
</kw>
<kw type="foritem" name="${index} = DRIVER INFO">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170928 23:23:00.596" level="INFO">@{cmd_list} = [ ('FW Timestamp', 'cat /etc/timestamp') | ('FW Level', 'cat /etc/os-release') ]</msg>
<status status="PASS" endtime="20170928 23:23:00.596" starttime="20170928 23:23:00.595"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170928 23:23:00.596" level="INFO">${ENTRY_INDEX} = DRIVER INFO</msg>
<status status="PASS" endtime="20170928 23:23:00.596" starttime="20170928 23:23:00.596"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('FW Timestamp', 'cat /etc/timestamp')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 23:23:00.600" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928232258126284_BmcCodeUpdate/20170928232258126284_RESTBMCCodeUpdate/20170928232258126284_BMC_general.txt"&gt;/home/fspcibld/logs/20170928232258126284_BmcCodeUpdate/20170928232258126284_RESTBMCCodeUpdate/20170928232258126284_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 23:23:00.600" starttime="20170928 23:23:00.599"></status>
</kw>
<status status="PASS" endtime="20170928 23:23:00.600" starttime="20170928 23:23:00.599"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 23:23:00.601" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928232258126284_BmcCodeUpdate/20170928232258126284_RESTBMCCodeUpdate/20170928232258126284_BMC_general.txt"&gt;/home/fspcibld/logs/20170928232258126284_BmcCodeUpdate/20170928232258126284_RESTBMCCodeUpdate/20170928232258126284_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 23:23:00.601" starttime="20170928 23:23:00.601"></status>
</kw>
<status status="PASS" endtime="20170928 23:23:00.601" starttime="20170928 23:23:00.600"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 23:23:00.602" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928232258126284_BmcCodeUpdate/20170928232258126284_RESTBMCCodeUpdate/20170928232258126284_BMC_general.txt"&gt;/home/fspcibld/logs/20170928232258126284_BmcCodeUpdate/20170928232258126284_RESTBMCCodeUpdate/20170928232258126284_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 23:23:00.602" starttime="20170928 23:23:00.602"></status>
</kw>
<status status="PASS" endtime="20170928 23:23:00.603" starttime="20170928 23:23:00.601"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 23:23:00.604" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928232258126284_BmcCodeUpdate/20170928232258126284_RESTBMCCodeUpdate/20170928232258126284_BMC_general.txt"&gt;/home/fspcibld/logs/20170928232258126284_BmcCodeUpdate/20170928232258126284_RESTBMCCodeUpdate/20170928232258126284_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 23:23:00.604" starttime="20170928 23:23:00.603"></status>
</kw>
<status status="PASS" endtime="20170928 23:23:00.604" starttime="20170928 23:23:00.603"></status>
</kw>
<status status="PASS" endtime="20170928 23:23:00.604" starttime="20170928 23:23:00.598"></status>
</kw>
<status status="PASS" endtime="20170928 23:23:00.604" starttime="20170928 23:23:00.598"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170928 23:23:00.605" level="INFO">${cmd_buf} = BMC Execute Command  cat /etc/timestamp  ignore_err=1</msg>
<status status="PASS" endtime="20170928 23:23:00.605" starttime="20170928 23:23:00.605"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /etc/timestamp</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170928 23:23:00.664" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170928 23:23:00.664" level="INFO">Executing command 'cat /etc/timestamp'.</msg>
<msg timestamp="20170928 23:23:00.721" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170928 23:23:00.721" starttime="20170928 23:23:00.629"></status>
</kw>
<msg timestamp="20170928 23:23:00.722" level="INFO">${status} = PASS</msg>
<msg timestamp="20170928 23:23:00.722" level="INFO">${ret_values} = (u'20170928201615', u'', 0)</msg>
<status status="PASS" endtime="20170928 23:23:00.722" starttime="20170928 23:23:00.605"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170928 23:23:00.722" level="INFO">${stdout} = 20170928201615</msg>
<status status="PASS" endtime="20170928 23:23:00.722" starttime="20170928 23:23:00.722"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170928 23:23:00.723" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170928 23:23:00.723" starttime="20170928 23:23:00.723"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 23:23:00.731" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928232258126284_BmcCodeUpdate/20170928232258126284_RESTBMCCodeUpdate/20170928232258126284_BMC_general.txt"&gt;/home/fspcibld/logs/20170928232258126284_BmcCodeUpdate/20170928232258126284_RESTBMCCodeUpdate/20170928232258126284_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 23:23:00.731" starttime="20170928 23:23:00.730"></status>
</kw>
<status status="PASS" endtime="20170928 23:23:00.731" starttime="20170928 23:23:00.730"></status>
</kw>
<status status="PASS" endtime="20170928 23:23:00.731" starttime="20170928 23:23:00.723"></status>
</kw>
<status status="PASS" endtime="20170928 23:23:00.731" starttime="20170928 23:23:00.597"></status>
</kw>
<status status="PASS" endtime="20170928 23:23:00.731" starttime="20170928 23:23:00.597"></status>
</kw>
<kw type="foritem" name="${cmd} = ('FW Level', 'cat /etc/os-release')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 23:23:00.734" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928232258126284_BmcCodeUpdate/20170928232258126284_RESTBMCCodeUpdate/20170928232258126284_BMC_general.txt"&gt;/home/fspcibld/logs/20170928232258126284_BmcCodeUpdate/20170928232258126284_RESTBMCCodeUpdate/20170928232258126284_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 23:23:00.734" starttime="20170928 23:23:00.734"></status>
</kw>
<status status="PASS" endtime="20170928 23:23:00.735" starttime="20170928 23:23:00.733"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 23:23:00.736" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928232258126284_BmcCodeUpdate/20170928232258126284_RESTBMCCodeUpdate/20170928232258126284_BMC_general.txt"&gt;/home/fspcibld/logs/20170928232258126284_BmcCodeUpdate/20170928232258126284_RESTBMCCodeUpdate/20170928232258126284_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 23:23:00.736" starttime="20170928 23:23:00.735"></status>
</kw>
<status status="PASS" endtime="20170928 23:23:00.736" starttime="20170928 23:23:00.735"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 23:23:00.737" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928232258126284_BmcCodeUpdate/20170928232258126284_RESTBMCCodeUpdate/20170928232258126284_BMC_general.txt"&gt;/home/fspcibld/logs/20170928232258126284_BmcCodeUpdate/20170928232258126284_RESTBMCCodeUpdate/20170928232258126284_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 23:23:00.737" starttime="20170928 23:23:00.737"></status>
</kw>
<status status="PASS" endtime="20170928 23:23:00.737" starttime="20170928 23:23:00.736"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 23:23:00.738" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928232258126284_BmcCodeUpdate/20170928232258126284_RESTBMCCodeUpdate/20170928232258126284_BMC_general.txt"&gt;/home/fspcibld/logs/20170928232258126284_BmcCodeUpdate/20170928232258126284_RESTBMCCodeUpdate/20170928232258126284_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 23:23:00.739" starttime="20170928 23:23:00.738"></status>
</kw>
<status status="PASS" endtime="20170928 23:23:00.739" starttime="20170928 23:23:00.737"></status>
</kw>
<status status="PASS" endtime="20170928 23:23:00.739" starttime="20170928 23:23:00.733"></status>
</kw>
<status status="PASS" endtime="20170928 23:23:00.739" starttime="20170928 23:23:00.732"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170928 23:23:00.740" level="INFO">${cmd_buf} = BMC Execute Command  cat /etc/os-release  ignore_err=1</msg>
<status status="PASS" endtime="20170928 23:23:00.740" starttime="20170928 23:23:00.739"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /etc/os-release</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170928 23:23:00.803" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170928 23:23:00.804" level="INFO">Executing command 'cat /etc/os-release'.</msg>
<msg timestamp="20170928 23:23:00.851" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170928 23:23:00.851" starttime="20170928 23:23:00.765"></status>
</kw>
<msg timestamp="20170928 23:23:00.851" level="INFO">${status} = PASS</msg>
<msg timestamp="20170928 23:23:00.851" level="INFO">${ret_values} = (u'ID="openbmc-phosphor"\nNAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"\nVERSION="v1.99.10-63"\nVERSION_ID="v1.99.10-63-g7c65384"\nPRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC...</msg>
<status status="PASS" endtime="20170928 23:23:00.851" starttime="20170928 23:23:00.740"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170928 23:23:00.852" level="INFO">${stdout} = ID="openbmc-phosphor"
NAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"
VERSION="v1.99.10-63"
VERSION_ID="v1.99.10-63-g7c65384"
PRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC Projec...</msg>
<status status="PASS" endtime="20170928 23:23:00.852" starttime="20170928 23:23:00.852"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170928 23:23:00.853" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170928 23:23:00.853" starttime="20170928 23:23:00.852"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 23:23:00.860" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928232258126284_BmcCodeUpdate/20170928232258126284_RESTBMCCodeUpdate/20170928232258126284_BMC_general.txt"&gt;/home/fspcibld/logs/20170928232258126284_BmcCodeUpdate/20170928232258126284_RESTBMCCodeUpdate/20170928232258126284_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 23:23:00.860" starttime="20170928 23:23:00.860"></status>
</kw>
<status status="PASS" endtime="20170928 23:23:00.860" starttime="20170928 23:23:00.859"></status>
</kw>
<status status="PASS" endtime="20170928 23:23:00.860" starttime="20170928 23:23:00.853"></status>
</kw>
<status status="PASS" endtime="20170928 23:23:00.861" starttime="20170928 23:23:00.732"></status>
</kw>
<status status="PASS" endtime="20170928 23:23:00.861" starttime="20170928 23:23:00.731"></status>
</kw>
<status status="PASS" endtime="20170928 23:23:00.861" starttime="20170928 23:23:00.597"></status>
</kw>
<status status="PASS" endtime="20170928 23:23:00.861" starttime="20170928 23:23:00.595"></status>
</kw>
<status status="PASS" endtime="20170928 23:23:00.861" starttime="20170928 23:23:00.595"></status>
</kw>
<kw type="foritem" name="${index} = BMC DATA">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170928 23:23:00.862" level="INFO">@{cmd_list} = [ ('BMC Uptime', 'uptime') | ('BMC File System Disk Space Usage', 'df -hT') | ('BMC OS', 'uname -a') ]</msg>
<status status="PASS" endtime="20170928 23:23:00.862" starttime="20170928 23:23:00.862"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170928 23:23:00.863" level="INFO">${ENTRY_INDEX} = BMC DATA</msg>
<status status="PASS" endtime="20170928 23:23:00.863" starttime="20170928 23:23:00.862"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC Uptime', 'uptime')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 23:23:00.866" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928232258126284_BmcCodeUpdate/20170928232258126284_RESTBMCCodeUpdate/20170928232258126284_BMC_general.txt"&gt;/home/fspcibld/logs/20170928232258126284_BmcCodeUpdate/20170928232258126284_RESTBMCCodeUpdate/20170928232258126284_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 23:23:00.866" starttime="20170928 23:23:00.866"></status>
</kw>
<status status="PASS" endtime="20170928 23:23:00.866" starttime="20170928 23:23:00.865"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 23:23:00.868" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928232258126284_BmcCodeUpdate/20170928232258126284_RESTBMCCodeUpdate/20170928232258126284_BMC_general.txt"&gt;/home/fspcibld/logs/20170928232258126284_BmcCodeUpdate/20170928232258126284_RESTBMCCodeUpdate/20170928232258126284_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 23:23:00.868" starttime="20170928 23:23:00.867"></status>
</kw>
<status status="PASS" endtime="20170928 23:23:00.868" starttime="20170928 23:23:00.866"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 23:23:00.869" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928232258126284_BmcCodeUpdate/20170928232258126284_RESTBMCCodeUpdate/20170928232258126284_BMC_general.txt"&gt;/home/fspcibld/logs/20170928232258126284_BmcCodeUpdate/20170928232258126284_RESTBMCCodeUpdate/20170928232258126284_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 23:23:00.869" starttime="20170928 23:23:00.869"></status>
</kw>
<status status="PASS" endtime="20170928 23:23:00.869" starttime="20170928 23:23:00.868"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 23:23:00.870" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928232258126284_BmcCodeUpdate/20170928232258126284_RESTBMCCodeUpdate/20170928232258126284_BMC_general.txt"&gt;/home/fspcibld/logs/20170928232258126284_BmcCodeUpdate/20170928232258126284_RESTBMCCodeUpdate/20170928232258126284_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 23:23:00.870" starttime="20170928 23:23:00.870"></status>
</kw>
<status status="PASS" endtime="20170928 23:23:00.870" starttime="20170928 23:23:00.869"></status>
</kw>
<status status="PASS" endtime="20170928 23:23:00.871" starttime="20170928 23:23:00.865"></status>
</kw>
<status status="PASS" endtime="20170928 23:23:00.871" starttime="20170928 23:23:00.864"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170928 23:23:00.871" level="INFO">${cmd_buf} = BMC Execute Command  uptime  ignore_err=1</msg>
<status status="PASS" endtime="20170928 23:23:00.871" starttime="20170928 23:23:00.871"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>uptime</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170928 23:23:00.931" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170928 23:23:00.932" level="INFO">Executing command 'uptime'.</msg>
<msg timestamp="20170928 23:23:00.983" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170928 23:23:00.983" starttime="20170928 23:23:00.899"></status>
</kw>
<msg timestamp="20170928 23:23:00.983" level="INFO">${status} = PASS</msg>
<msg timestamp="20170928 23:23:00.983" level="INFO">${ret_values} = (u' 23:23:14 up  1:58,  load average: 0.31, 0.26, 0.26', u'', 0)</msg>
<status status="PASS" endtime="20170928 23:23:00.983" starttime="20170928 23:23:00.872"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170928 23:23:00.984" level="INFO">${stdout} =  23:23:14 up  1:58,  load average: 0.31, 0.26, 0.26</msg>
<status status="PASS" endtime="20170928 23:23:00.984" starttime="20170928 23:23:00.984"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170928 23:23:00.985" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170928 23:23:00.985" starttime="20170928 23:23:00.984"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 23:23:00.992" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928232258126284_BmcCodeUpdate/20170928232258126284_RESTBMCCodeUpdate/20170928232258126284_BMC_general.txt"&gt;/home/fspcibld/logs/20170928232258126284_BmcCodeUpdate/20170928232258126284_RESTBMCCodeUpdate/20170928232258126284_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 23:23:00.992" starttime="20170928 23:23:00.992"></status>
</kw>
<status status="PASS" endtime="20170928 23:23:00.992" starttime="20170928 23:23:00.991"></status>
</kw>
<status status="PASS" endtime="20170928 23:23:00.992" starttime="20170928 23:23:00.985"></status>
</kw>
<status status="PASS" endtime="20170928 23:23:00.992" starttime="20170928 23:23:00.863"></status>
</kw>
<status status="PASS" endtime="20170928 23:23:00.992" starttime="20170928 23:23:00.863"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC File System Disk Space Usage', 'df -hT')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 23:23:00.996" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928232258126284_BmcCodeUpdate/20170928232258126284_RESTBMCCodeUpdate/20170928232258126284_BMC_general.txt"&gt;/home/fspcibld/logs/20170928232258126284_BmcCodeUpdate/20170928232258126284_RESTBMCCodeUpdate/20170928232258126284_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 23:23:00.996" starttime="20170928 23:23:00.995"></status>
</kw>
<status status="PASS" endtime="20170928 23:23:00.996" starttime="20170928 23:23:00.995"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 23:23:00.997" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928232258126284_BmcCodeUpdate/20170928232258126284_RESTBMCCodeUpdate/20170928232258126284_BMC_general.txt"&gt;/home/fspcibld/logs/20170928232258126284_BmcCodeUpdate/20170928232258126284_RESTBMCCodeUpdate/20170928232258126284_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 23:23:00.997" starttime="20170928 23:23:00.997"></status>
</kw>
<status status="PASS" endtime="20170928 23:23:00.997" starttime="20170928 23:23:00.996"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 23:23:00.998" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928232258126284_BmcCodeUpdate/20170928232258126284_RESTBMCCodeUpdate/20170928232258126284_BMC_general.txt"&gt;/home/fspcibld/logs/20170928232258126284_BmcCodeUpdate/20170928232258126284_RESTBMCCodeUpdate/20170928232258126284_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 23:23:00.998" starttime="20170928 23:23:00.998"></status>
</kw>
<status status="PASS" endtime="20170928 23:23:00.999" starttime="20170928 23:23:00.997"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 23:23:01.000" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928232258126284_BmcCodeUpdate/20170928232258126284_RESTBMCCodeUpdate/20170928232258126284_BMC_general.txt"&gt;/home/fspcibld/logs/20170928232258126284_BmcCodeUpdate/20170928232258126284_RESTBMCCodeUpdate/20170928232258126284_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 23:23:01.000" starttime="20170928 23:23:00.999"></status>
</kw>
<status status="PASS" endtime="20170928 23:23:01.000" starttime="20170928 23:23:00.999"></status>
</kw>
<status status="PASS" endtime="20170928 23:23:01.000" starttime="20170928 23:23:00.994"></status>
</kw>
<status status="PASS" endtime="20170928 23:23:01.000" starttime="20170928 23:23:00.994"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170928 23:23:01.001" level="INFO">${cmd_buf} = BMC Execute Command  df -hT  ignore_err=1</msg>
<status status="PASS" endtime="20170928 23:23:01.001" starttime="20170928 23:23:01.000"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>df -hT</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170928 23:23:01.063" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170928 23:23:01.064" level="INFO">Executing command 'df -hT'.</msg>
<msg timestamp="20170928 23:23:01.131" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170928 23:23:01.131" starttime="20170928 23:23:01.027"></status>
</kw>
<msg timestamp="20170928 23:23:01.131" level="INFO">${status} = PASS</msg>
<msg timestamp="20170928 23:23:01.132" level="INFO">${ret_values} = (u'Filesystem           Type            Size      Used Available Use% Mounted on\n/dev/root            squashfs       14.3M     14.3M         0 100% /\ndevtmpfs             devtmpfs      210.9M       ...</msg>
<status status="PASS" endtime="20170928 23:23:01.132" starttime="20170928 23:23:01.001"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170928 23:23:01.132" level="INFO">${stdout} = Filesystem           Type            Size      Used Available Use% Mounted on
/dev/root            squashfs       14.3M     14.3M         0 100% /
devtmpfs             devtmpfs      210.9M         0  ...</msg>
<status status="PASS" endtime="20170928 23:23:01.132" starttime="20170928 23:23:01.132"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170928 23:23:01.133" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170928 23:23:01.133" starttime="20170928 23:23:01.133"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 23:23:01.141" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928232258126284_BmcCodeUpdate/20170928232258126284_RESTBMCCodeUpdate/20170928232258126284_BMC_general.txt"&gt;/home/fspcibld/logs/20170928232258126284_BmcCodeUpdate/20170928232258126284_RESTBMCCodeUpdate/20170928232258126284_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 23:23:01.141" starttime="20170928 23:23:01.140"></status>
</kw>
<status status="PASS" endtime="20170928 23:23:01.141" starttime="20170928 23:23:01.139"></status>
</kw>
<status status="PASS" endtime="20170928 23:23:01.141" starttime="20170928 23:23:01.133"></status>
</kw>
<status status="PASS" endtime="20170928 23:23:01.141" starttime="20170928 23:23:00.993"></status>
</kw>
<status status="PASS" endtime="20170928 23:23:01.141" starttime="20170928 23:23:00.993"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC OS', 'uname -a')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 23:23:01.144" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928232258126284_BmcCodeUpdate/20170928232258126284_RESTBMCCodeUpdate/20170928232258126284_BMC_general.txt"&gt;/home/fspcibld/logs/20170928232258126284_BmcCodeUpdate/20170928232258126284_RESTBMCCodeUpdate/20170928232258126284_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 23:23:01.144" starttime="20170928 23:23:01.144"></status>
</kw>
<status status="PASS" endtime="20170928 23:23:01.144" starttime="20170928 23:23:01.143"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 23:23:01.146" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928232258126284_BmcCodeUpdate/20170928232258126284_RESTBMCCodeUpdate/20170928232258126284_BMC_general.txt"&gt;/home/fspcibld/logs/20170928232258126284_BmcCodeUpdate/20170928232258126284_RESTBMCCodeUpdate/20170928232258126284_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 23:23:01.146" starttime="20170928 23:23:01.145"></status>
</kw>
<status status="PASS" endtime="20170928 23:23:01.146" starttime="20170928 23:23:01.144"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 23:23:01.147" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928232258126284_BmcCodeUpdate/20170928232258126284_RESTBMCCodeUpdate/20170928232258126284_BMC_general.txt"&gt;/home/fspcibld/logs/20170928232258126284_BmcCodeUpdate/20170928232258126284_RESTBMCCodeUpdate/20170928232258126284_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 23:23:01.147" starttime="20170928 23:23:01.147"></status>
</kw>
<status status="PASS" endtime="20170928 23:23:01.147" starttime="20170928 23:23:01.146"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 23:23:01.148" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928232258126284_BmcCodeUpdate/20170928232258126284_RESTBMCCodeUpdate/20170928232258126284_BMC_general.txt"&gt;/home/fspcibld/logs/20170928232258126284_BmcCodeUpdate/20170928232258126284_RESTBMCCodeUpdate/20170928232258126284_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 23:23:01.148" starttime="20170928 23:23:01.148"></status>
</kw>
<status status="PASS" endtime="20170928 23:23:01.148" starttime="20170928 23:23:01.147"></status>
</kw>
<status status="PASS" endtime="20170928 23:23:01.149" starttime="20170928 23:23:01.143"></status>
</kw>
<status status="PASS" endtime="20170928 23:23:01.149" starttime="20170928 23:23:01.142"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170928 23:23:01.149" level="INFO">${cmd_buf} = BMC Execute Command  uname -a  ignore_err=1</msg>
<status status="PASS" endtime="20170928 23:23:01.149" starttime="20170928 23:23:01.149"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>uname -a</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170928 23:23:01.209" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170928 23:23:01.210" level="INFO">Executing command 'uname -a'.</msg>
<msg timestamp="20170928 23:23:01.278" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170928 23:23:01.278" starttime="20170928 23:23:01.176"></status>
</kw>
<msg timestamp="20170928 23:23:01.278" level="INFO">${status} = PASS</msg>
<msg timestamp="20170928 23:23:01.278" level="INFO">${ret_values} = (u'Linux witherspoon 4.10.17-00cd954c889746a65f9022088c5d83f9f43bfddc #1 Fri Sep 22 12:34:59 UTC 2017 armv6l GNU/Linux', u'', 0)</msg>
<status status="PASS" endtime="20170928 23:23:01.278" starttime="20170928 23:23:01.150"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170928 23:23:01.279" level="INFO">${stdout} = Linux witherspoon 4.10.17-00cd954c889746a65f9022088c5d83f9f43bfddc #1 Fri Sep 22 12:34:59 UTC 2017 armv6l GNU/Linux</msg>
<status status="PASS" endtime="20170928 23:23:01.279" starttime="20170928 23:23:01.279"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170928 23:23:01.279" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170928 23:23:01.280" starttime="20170928 23:23:01.279"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 23:23:01.288" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928232258126284_BmcCodeUpdate/20170928232258126284_RESTBMCCodeUpdate/20170928232258126284_BMC_general.txt"&gt;/home/fspcibld/logs/20170928232258126284_BmcCodeUpdate/20170928232258126284_RESTBMCCodeUpdate/20170928232258126284_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 23:23:01.288" starttime="20170928 23:23:01.287"></status>
</kw>
<status status="PASS" endtime="20170928 23:23:01.288" starttime="20170928 23:23:01.286"></status>
</kw>
<status status="PASS" endtime="20170928 23:23:01.288" starttime="20170928 23:23:01.280"></status>
</kw>
<status status="PASS" endtime="20170928 23:23:01.288" starttime="20170928 23:23:01.141"></status>
</kw>
<status status="PASS" endtime="20170928 23:23:01.288" starttime="20170928 23:23:01.141"></status>
</kw>
<status status="PASS" endtime="20170928 23:23:01.288" starttime="20170928 23:23:00.863"></status>
</kw>
<status status="PASS" endtime="20170928 23:23:01.288" starttime="20170928 23:23:00.861"></status>
</kw>
<status status="PASS" endtime="20170928 23:23:01.288" starttime="20170928 23:23:00.861"></status>
</kw>
<status status="PASS" endtime="20170928 23:23:01.288" starttime="20170928 23:22:59.158"></status>
</kw>
<status status="PASS" endtime="20170928 23:23:01.288" starttime="20170928 23:22:59.157"></status>
</kw>
<status status="PASS" endtime="20170928 23:23:01.288" starttime="20170928 23:22:59.139"></status>
</kw>
<status status="PASS" endtime="20170928 23:23:01.289" starttime="20170928 23:22:59.136"></status>
</kw>
<status status="PASS" endtime="20170928 23:23:01.289" starttime="20170928 23:22:59.136"></status>
</kw>
<kw type="foritem" name="${method} = ('Get Request FFDC', 'BMC FFDC Get Requests')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170928 23:23:01.291" starttime="20170928 23:23:01.290"></status>
</kw>
<msg timestamp="20170928 23:23:01.291" level="INFO">${status} = PASS</msg>
<msg timestamp="20170928 23:23:01.291" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170928 23:23:01.291" starttime="20170928 23:23:01.290"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170928 23:23:01.291" starttime="20170928 23:23:01.291"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Get Requests" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Get Ffdc Get Request Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170928 23:23:01.311" level="INFO">@{entries} = [ GET REQUESTS ]</msg>
<status status="PASS" endtime="20170928 23:23:01.311" starttime="20170928 23:23:01.310"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = GET REQUESTS">
<kw name="Log FFDC Get Requests" library="openbmc_ffdc_methods">
<doc>Create file in current FFDC log directory.</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Get Request" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170928 23:23:01.312" level="INFO">@{cmd_list} = [ ('BMC_sensor_list', '/xyz/openbmc_project/sensors/enumerate') | ('OCC_state', '/org/open_power/control/enumerate') | ('BMC_control_list', '/xyz/openbmc_project/control/enumerate') | ('BMC_led', '/xy...</msg>
<status status="PASS" endtime="20170928 23:23:01.312" starttime="20170928 23:23:01.312"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC_sensor_list', '/xyz/openbmc_project/sensors/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170928 23:23:01.313" level="INFO">${logpath} = /home/fspcibld/logs/20170928232258126284_BmcCodeUpdate/20170928232258126284_RESTBMCCodeUpdate/20170928232258126284_BMC_sensor_list.txt</msg>
<status status="PASS" endtime="20170928 23:23:01.313" starttime="20170928 23:23:01.313"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170928 23:23:01.317" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170928 23:23:01.318" starttime="20170928 23:23:01.317"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170928 23:23:01.318" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170928 23:23:01.318" starttime="20170928 23:23:01.318"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170928 23:23:01.319" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170928 23:23:01.319" starttime="20170928 23:23:01.319"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170928 23:23:01.320" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170928 23:23:01.320" starttime="20170928 23:23:01.319"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170928 23:23:01.520" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170928 23:23:01.520" starttime="20170928 23:23:01.320"></status>
</kw>
<msg timestamp="20170928 23:23:01.521" level="INFO">${status} = PASS</msg>
<msg timestamp="20170928 23:23:01.521" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170928 23:23:01.521" starttime="20170928 23:23:01.320"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170928 23:23:01.522" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170928 23:23:01.522" starttime="20170928 23:23:01.521"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170928 23:23:01.522" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170928 23:23:01.522" starttime="20170928 23:23:01.522"></status>
</kw>
<status status="PASS" endtime="20170928 23:23:01.523" starttime="20170928 23:23:01.315"></status>
</kw>
<status status="PASS" endtime="20170928 23:23:01.523" starttime="20170928 23:23:01.315"></status>
</kw>
<status status="PASS" endtime="20170928 23:23:01.523" starttime="20170928 23:23:01.314"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170928 23:23:01.523" level="INFO">${base_uri} = /xyz/openbmc_project/sensors/enumerate</msg>
<status status="PASS" endtime="20170928 23:23:01.523" starttime="20170928 23:23:01.523"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170928 23:23:01.524" starttime="20170928 23:23:01.524"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170928 23:23:02.118" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/sensors/enumerate, headers=None json=None</msg>
<msg timestamp="20170928 23:23:02.119" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170928 23:23:02.119" starttime="20170928 23:23:01.524"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170928 23:23:02.120" starttime="20170928 23:23:02.119"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170928 23:23:02.120" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170928 23:23:02.120" starttime="20170928 23:23:02.120"></status>
</kw>
<msg timestamp="20170928 23:23:02.121" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170928 23:23:02.121" starttime="20170928 23:23:01.313"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170928 23:23:02.122" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170928 23:23:02.122" starttime="20170928 23:23:02.121"></status>
</kw>
<msg timestamp="20170928 23:23:02.122" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170928 23:23:02.122" starttime="20170928 23:23:02.121"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20170928 23:23:02.123" starttime="20170928 23:23:02.122"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170928 23:23:02.124" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/sensors/current/ps0_output_current": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Amperes", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/current/ps1_output_current": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Amperes", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan0_0": {
      "Scale": 0, 
      "Target": 10500, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan0_1": {
      "Scale": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan1_0": {
      "Scale": 0, 
      "Target": 10500, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan1_1": {
      "Scale": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan2_0": {
      "Scale": 0, 
      "Target": 10500, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan2_1": {
      "Scale": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan3_0": {
      "Scale": 0, 
      "Target": 10500, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan3_1": {
      "Scale": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/power/ps0_input_power": {
      "Scale": -6, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Watts", 
      "Value": 4000000
    }, 
    "/xyz/openbmc_project/sensors/power/ps1_input_power": {
      "Scale": -6, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Watts", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/temperature/ambient": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 27480
    }, 
    "/xyz/openbmc_project/sensors/temperature/p0_vcs_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 3000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p0_vdd_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 4000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p0_vddr_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 3000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p0_vdn_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 3000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p1_vcs_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 3000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p1_vdd_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 3000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p1_vddr_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 3000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p1_vdn_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 3000
    }, 
    "/xyz/openbmc_project/sensors/voltage/ps0_input_voltage": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Volts", 
      "Value": 209500
    }, 
    "/xyz/openbmc_project/sensors/voltage/ps0_output_voltage": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Volts", 
      "Value": 312
    }, 
    "/xyz/openbmc_project/sensors/voltage/ps1_input_voltage": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Volts", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/voltage/ps1_output_voltage": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Volts", 
      "Value": 0
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170928 23:23:02.124" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170928 23:23:02.124" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/sensors/current/ps0_output_current": {
            "Scale": -3,
            "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Amperes",
            "Value": ...</msg>
<status status="PASS" endtime="20170928 23:23:02.124" starttime="20170928 23:23:02.123"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 23:23:02.126" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928232258126284_BmcCodeUpdate/20170928232258126284_RESTBMCCodeUpdate/20170928232258126284_BMC_sensor_list.txt"&gt;/home/fspcibld/logs/20170928232258126284_BmcCodeUpdate/20170928232258126284_RESTBMCCodeUpdate/20170928232258126284_BMC_sensor_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 23:23:02.126" starttime="20170928 23:23:02.126"></status>
</kw>
<status status="PASS" endtime="20170928 23:23:02.126" starttime="20170928 23:23:02.125"></status>
</kw>
<status status="PASS" endtime="20170928 23:23:02.126" starttime="20170928 23:23:01.312"></status>
</kw>
<kw type="foritem" name="${cmd} = ('OCC_state', '/org/open_power/control/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170928 23:23:02.127" level="INFO">${logpath} = /home/fspcibld/logs/20170928232258126284_BmcCodeUpdate/20170928232258126284_RESTBMCCodeUpdate/20170928232258126284_OCC_state.txt</msg>
<status status="PASS" endtime="20170928 23:23:02.127" starttime="20170928 23:23:02.127"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170928 23:23:02.130" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170928 23:23:02.131" starttime="20170928 23:23:02.130"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170928 23:23:02.131" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170928 23:23:02.131" starttime="20170928 23:23:02.131"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170928 23:23:02.132" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170928 23:23:02.132" starttime="20170928 23:23:02.132"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170928 23:23:02.133" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170928 23:23:02.133" starttime="20170928 23:23:02.132"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170928 23:23:02.316" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170928 23:23:02.316" starttime="20170928 23:23:02.133"></status>
</kw>
<msg timestamp="20170928 23:23:02.316" level="INFO">${status} = PASS</msg>
<msg timestamp="20170928 23:23:02.316" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170928 23:23:02.317" starttime="20170928 23:23:02.133"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170928 23:23:02.317" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170928 23:23:02.317" starttime="20170928 23:23:02.317"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170928 23:23:02.318" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170928 23:23:02.318" starttime="20170928 23:23:02.318"></status>
</kw>
<status status="PASS" endtime="20170928 23:23:02.318" starttime="20170928 23:23:02.129"></status>
</kw>
<status status="PASS" endtime="20170928 23:23:02.318" starttime="20170928 23:23:02.129"></status>
</kw>
<status status="PASS" endtime="20170928 23:23:02.318" starttime="20170928 23:23:02.128"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170928 23:23:02.319" level="INFO">${base_uri} = /org/open_power/control/enumerate</msg>
<status status="PASS" endtime="20170928 23:23:02.319" starttime="20170928 23:23:02.319"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170928 23:23:02.320" starttime="20170928 23:23:02.319"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170928 23:23:02.460" level="INFO">Get Request using : alias=openbmc, uri=/org/open_power/control/enumerate, headers=None json=None</msg>
<msg timestamp="20170928 23:23:02.461" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170928 23:23:02.461" starttime="20170928 23:23:02.320"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170928 23:23:02.462" starttime="20170928 23:23:02.461"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170928 23:23:02.462" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170928 23:23:02.462" starttime="20170928 23:23:02.462"></status>
</kw>
<msg timestamp="20170928 23:23:02.462" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170928 23:23:02.462" starttime="20170928 23:23:02.128"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170928 23:23:02.463" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170928 23:23:02.464" starttime="20170928 23:23:02.463"></status>
</kw>
<msg timestamp="20170928 23:23:02.464" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170928 23:23:02.464" starttime="20170928 23:23:02.463"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20170928 23:23:02.464" starttime="20170928 23:23:02.464"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170928 23:23:02.465" level="INFO">To JSON using : content={
  "data": {
    "/org/open_power/control/host0": {}, 
    "/org/open_power/control/occ0": {
      "OccActive": 0
    }, 
    "/org/open_power/control/occ1": {
      "OccActive": 0
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170928 23:23:02.465" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170928 23:23:02.465" level="INFO">${jsondata} = {
    "data": {
        "/org/open_power/control/host0": {},
        "/org/open_power/control/occ0": {
            "OccActive": 0
        },
        "/org/open_power/control/occ1": {
            "OccA...</msg>
<status status="PASS" endtime="20170928 23:23:02.465" starttime="20170928 23:23:02.465"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 23:23:02.467" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928232258126284_BmcCodeUpdate/20170928232258126284_RESTBMCCodeUpdate/20170928232258126284_OCC_state.txt"&gt;/home/fspcibld/logs/20170928232258126284_BmcCodeUpdate/20170928232258126284_RESTBMCCodeUpdate/20170928232258126284_OCC_state.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 23:23:02.467" starttime="20170928 23:23:02.466"></status>
</kw>
<status status="PASS" endtime="20170928 23:23:02.467" starttime="20170928 23:23:02.465"></status>
</kw>
<status status="PASS" endtime="20170928 23:23:02.467" starttime="20170928 23:23:02.126"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_control_list', '/xyz/openbmc_project/control/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170928 23:23:02.468" level="INFO">${logpath} = /home/fspcibld/logs/20170928232258126284_BmcCodeUpdate/20170928232258126284_RESTBMCCodeUpdate/20170928232258126284_BMC_control_list.txt</msg>
<status status="PASS" endtime="20170928 23:23:02.468" starttime="20170928 23:23:02.467"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170928 23:23:02.470" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170928 23:23:02.471" starttime="20170928 23:23:02.470"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170928 23:23:02.471" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170928 23:23:02.471" starttime="20170928 23:23:02.471"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170928 23:23:02.472" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170928 23:23:02.473" starttime="20170928 23:23:02.472"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170928 23:23:02.474" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170928 23:23:02.474" starttime="20170928 23:23:02.473"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170928 23:23:02.667" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170928 23:23:02.667" starttime="20170928 23:23:02.475"></status>
</kw>
<msg timestamp="20170928 23:23:02.667" level="INFO">${status} = PASS</msg>
<msg timestamp="20170928 23:23:02.667" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170928 23:23:02.667" starttime="20170928 23:23:02.474"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170928 23:23:02.668" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170928 23:23:02.668" starttime="20170928 23:23:02.668"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170928 23:23:02.669" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170928 23:23:02.669" starttime="20170928 23:23:02.668"></status>
</kw>
<status status="PASS" endtime="20170928 23:23:02.669" starttime="20170928 23:23:02.470"></status>
</kw>
<status status="PASS" endtime="20170928 23:23:02.669" starttime="20170928 23:23:02.469"></status>
</kw>
<status status="PASS" endtime="20170928 23:23:02.669" starttime="20170928 23:23:02.468"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170928 23:23:02.670" level="INFO">${base_uri} = /xyz/openbmc_project/control/enumerate</msg>
<status status="PASS" endtime="20170928 23:23:02.670" starttime="20170928 23:23:02.669"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170928 23:23:02.670" starttime="20170928 23:23:02.670"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170928 23:23:02.941" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/control/enumerate, headers=None json=None</msg>
<msg timestamp="20170928 23:23:02.941" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170928 23:23:02.941" starttime="20170928 23:23:02.671"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170928 23:23:02.942" starttime="20170928 23:23:02.941"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170928 23:23:02.942" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170928 23:23:02.942" starttime="20170928 23:23:02.942"></status>
</kw>
<msg timestamp="20170928 23:23:02.942" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170928 23:23:02.942" starttime="20170928 23:23:02.468"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170928 23:23:02.944" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170928 23:23:02.944" starttime="20170928 23:23:02.943"></status>
</kw>
<msg timestamp="20170928 23:23:02.944" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170928 23:23:02.944" starttime="20170928 23:23:02.943"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20170928 23:23:02.944" starttime="20170928 23:23:02.944"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170928 23:23:02.945" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/control/host0": {}, 
    "/xyz/openbmc_project/control/host0/TPMEnable": {
      "TPMEnable": 0
    }, 
    "/xyz/openbmc_project/control/host0/auto_reboot": {
      "AutoReboot": 1
    }, 
    "/xyz/openbmc_project/control/host0/boot": {
      "BootMode": "xyz.openbmc_project.Control.Boot.Mode.Modes.Regular", 
      "BootSource": "xyz.openbmc_project.Control.Boot.Source.Sources.Default"
    }, 
    "/xyz/openbmc_project/control/host0/boot/one_time": {
      "BootMode": "xyz.openbmc_project.Control.Boot.Mode.Modes.Regular", 
      "BootSource": "xyz.openbmc_project.Control.Boot.Source.Sources.Default", 
      "Enabled": 1
    }, 
    "/xyz/openbmc_project/control/host0/power_cap": {
      "PowerCap": 0, 
      "PowerCapEnable": 0
    }, 
    "/xyz/openbmc_project/control/host0/power_restore_policy": {
      "PowerRestorePolicy": "xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore"
    }, 
    "/xyz/openbmc_project/control/host0/restriction_mode": {
      "RestrictionMode": "xyz.openbmc_project.Control.Security.RestrictionMode.Modes.None"
    }, 
    "/xyz/openbmc_project/control/minimum_ship_level_required": {
      "MinimumShipLevelRequired": 1
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170928 23:23:02.945" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170928 23:23:02.945" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/control/host0": {},
        "/xyz/openbmc_project/control/host0/TPMEnable": {
            "TPMEnable": 0
        },
        "/xyz/openbmc_project/control/...</msg>
<status status="PASS" endtime="20170928 23:23:02.945" starttime="20170928 23:23:02.945"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 23:23:02.947" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928232258126284_BmcCodeUpdate/20170928232258126284_RESTBMCCodeUpdate/20170928232258126284_BMC_control_list.txt"&gt;/home/fspcibld/logs/20170928232258126284_BmcCodeUpdate/20170928232258126284_RESTBMCCodeUpdate/20170928232258126284_BMC_control_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 23:23:02.947" starttime="20170928 23:23:02.946"></status>
</kw>
<status status="PASS" endtime="20170928 23:23:02.947" starttime="20170928 23:23:02.946"></status>
</kw>
<status status="PASS" endtime="20170928 23:23:02.947" starttime="20170928 23:23:02.467"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_led', '/xyz/openbmc_project/led/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170928 23:23:02.948" level="INFO">${logpath} = /home/fspcibld/logs/20170928232258126284_BmcCodeUpdate/20170928232258126284_RESTBMCCodeUpdate/20170928232258126284_BMC_led.txt</msg>
<status status="PASS" endtime="20170928 23:23:02.948" starttime="20170928 23:23:02.948"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170928 23:23:02.951" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170928 23:23:02.951" starttime="20170928 23:23:02.951"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170928 23:23:02.952" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170928 23:23:02.952" starttime="20170928 23:23:02.952"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170928 23:23:02.953" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170928 23:23:02.953" starttime="20170928 23:23:02.952"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170928 23:23:02.953" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170928 23:23:02.953" starttime="20170928 23:23:02.953"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170928 23:23:03.188" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170928 23:23:03.188" starttime="20170928 23:23:02.954"></status>
</kw>
<msg timestamp="20170928 23:23:03.188" level="INFO">${status} = PASS</msg>
<msg timestamp="20170928 23:23:03.188" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170928 23:23:03.188" starttime="20170928 23:23:02.954"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170928 23:23:03.189" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170928 23:23:03.189" starttime="20170928 23:23:03.189"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170928 23:23:03.190" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170928 23:23:03.190" starttime="20170928 23:23:03.190"></status>
</kw>
<status status="PASS" endtime="20170928 23:23:03.190" starttime="20170928 23:23:02.950"></status>
</kw>
<status status="PASS" endtime="20170928 23:23:03.190" starttime="20170928 23:23:02.950"></status>
</kw>
<status status="PASS" endtime="20170928 23:23:03.190" starttime="20170928 23:23:02.949"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170928 23:23:03.191" level="INFO">${base_uri} = /xyz/openbmc_project/led/enumerate</msg>
<status status="PASS" endtime="20170928 23:23:03.191" starttime="20170928 23:23:03.191"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170928 23:23:03.192" starttime="20170928 23:23:03.191"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170928 23:23:04.762" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/led/enumerate, headers=None json=None</msg>
<msg timestamp="20170928 23:23:04.763" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170928 23:23:04.763" starttime="20170928 23:23:03.192"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170928 23:23:04.764" starttime="20170928 23:23:04.763"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170928 23:23:04.764" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170928 23:23:04.764" starttime="20170928 23:23:04.764"></status>
</kw>
<msg timestamp="20170928 23:23:04.764" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170928 23:23:04.764" starttime="20170928 23:23:02.948"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170928 23:23:04.766" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170928 23:23:04.766" starttime="20170928 23:23:04.765"></status>
</kw>
<msg timestamp="20170928 23:23:04.766" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170928 23:23:04.766" starttime="20170928 23:23:04.765"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20170928 23:23:04.766" starttime="20170928 23:23:04.766"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170928 23:23:04.768" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/led/groups": {}, 
    "/xyz/openbmc_project/led/groups/bmc_booted": {
      "Asserted": 1
    }, 
    "/xyz/openbmc_project/led/groups/bmc_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/boxelder_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core0_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core10_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core11_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core12_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core13_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core14_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core15_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core16_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core17_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core18_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core19_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core1_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core20_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core21_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core22_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core23_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core2_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core3_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core4_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core5_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core6_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core7_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core8_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core9_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/cpu0_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/cpu1_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm0_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm10_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm11_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm12_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm13_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm14_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm15_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm1_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm2_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm3_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm4_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm5_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm6_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm7_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm8_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm9_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/enclosure_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/enclosure_identify": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan0_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan0_identify": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan1_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan1_identify": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan2_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan2_identify": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan3_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan3_identify": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/gv100card0_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/gv100card1_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/gv100card2_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/gv100card3_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/gv100card4_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/gv100card5_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/lamp_test": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/motherboard_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/occ_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/power_on": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/powersupply0_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/powersupply1_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/system_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/physical/fan0": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/fan1": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/fan2": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/fan3": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/front_fault": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/front_id": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/front_power": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Blink"
    }, 
    "/xyz/openbmc_project/led/physical/rear_fault": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/rear_id": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/rear_power": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Blink"
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170928 23:23:04.769" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170928 23:23:04.769" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/led/groups": {},
        "/xyz/openbmc_project/led/groups/bmc_booted": {
            "Asserted": 1
        },
        "/xyz/openbmc_project/led/groups/bmc...</msg>
<status status="PASS" endtime="20170928 23:23:04.769" starttime="20170928 23:23:04.767"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 23:23:04.770" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928232258126284_BmcCodeUpdate/20170928232258126284_RESTBMCCodeUpdate/20170928232258126284_BMC_led.txt"&gt;/home/fspcibld/logs/20170928232258126284_BmcCodeUpdate/20170928232258126284_RESTBMCCodeUpdate/20170928232258126284_BMC_led.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 23:23:04.771" starttime="20170928 23:23:04.770"></status>
</kw>
<status status="PASS" endtime="20170928 23:23:04.771" starttime="20170928 23:23:04.769"></status>
</kw>
<status status="PASS" endtime="20170928 23:23:04.771" starttime="20170928 23:23:02.947"></status>
</kw>
<kw type="foritem" name="${cmd} = ('FIRMWARE_list', '/xyz/openbmc_project/software/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170928 23:23:04.771" level="INFO">${logpath} = /home/fspcibld/logs/20170928232258126284_BmcCodeUpdate/20170928232258126284_RESTBMCCodeUpdate/20170928232258126284_FIRMWARE_list.txt</msg>
<status status="PASS" endtime="20170928 23:23:04.772" starttime="20170928 23:23:04.771"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170928 23:23:04.774" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170928 23:23:04.775" starttime="20170928 23:23:04.774"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170928 23:23:04.775" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170928 23:23:04.775" starttime="20170928 23:23:04.775"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170928 23:23:04.776" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170928 23:23:04.776" starttime="20170928 23:23:04.776"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170928 23:23:04.777" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170928 23:23:04.777" starttime="20170928 23:23:04.777"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170928 23:23:04.970" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170928 23:23:04.970" starttime="20170928 23:23:04.778"></status>
</kw>
<msg timestamp="20170928 23:23:04.970" level="INFO">${status} = PASS</msg>
<msg timestamp="20170928 23:23:04.970" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170928 23:23:04.970" starttime="20170928 23:23:04.777"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170928 23:23:04.971" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170928 23:23:04.971" starttime="20170928 23:23:04.970"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170928 23:23:04.972" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170928 23:23:04.972" starttime="20170928 23:23:04.971"></status>
</kw>
<status status="PASS" endtime="20170928 23:23:04.972" starttime="20170928 23:23:04.773"></status>
</kw>
<status status="PASS" endtime="20170928 23:23:04.972" starttime="20170928 23:23:04.773"></status>
</kw>
<status status="PASS" endtime="20170928 23:23:04.972" starttime="20170928 23:23:04.772"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170928 23:23:04.973" level="INFO">${base_uri} = /xyz/openbmc_project/software/enumerate</msg>
<status status="PASS" endtime="20170928 23:23:04.973" starttime="20170928 23:23:04.972"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170928 23:23:04.973" starttime="20170928 23:23:04.973"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170928 23:23:05.345" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/enumerate, headers=None json=None</msg>
<msg timestamp="20170928 23:23:05.346" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170928 23:23:05.346" starttime="20170928 23:23:04.974"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170928 23:23:05.346" starttime="20170928 23:23:05.346"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170928 23:23:05.347" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170928 23:23:05.347" starttime="20170928 23:23:05.347"></status>
</kw>
<msg timestamp="20170928 23:23:05.347" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170928 23:23:05.347" starttime="20170928 23:23:04.772"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170928 23:23:05.348" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170928 23:23:05.348" starttime="20170928 23:23:05.348"></status>
</kw>
<msg timestamp="20170928 23:23:05.348" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170928 23:23:05.348" starttime="20170928 23:23:05.347"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20170928 23:23:05.349" starttime="20170928 23:23:05.349"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170928 23:23:05.350" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/software/2a6e1150": {
      "Activation": "xyz.openbmc_project.Software.Activation.Activations.Active", 
      "Path": "", 
      "Priority": 0, 
      "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
      "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.None", 
      "Version": "v1.99.10-63-g7c65384", 
      "associations": [
        [
          "inventory", 
          "activation", 
          "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
        ]
      ]
    }, 
    "/xyz/openbmc_project/software/2a6e1150/inventory": {
      "endpoints": [
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    }, 
    "/xyz/openbmc_project/software/2a6e1150/software_version": {
      "endpoints": [
        "/xyz/openbmc_project/software"
      ]
    }, 
    "/xyz/openbmc_project/software/7a9ef57c": {
      "Activation": "xyz.openbmc_project.Software.Activation.Activations.Active", 
      "ExtendedVersion": "op-build-57a0c70-dirty,buildroot-2017.08-6-g319c6e1,skiboot-v5.8-90-g398a98123641-pf316294,hostboot-3d6c541,linux-4.13-openpower1-pe0f5c53,petitboot-v1.5.1-pd10dfac,machine-xml-f8aaa73,occ-a43395b,hostboot-binaries-836385d,capp-ucode-9c73e9f,sbe-8d90ab2", 
      "Path": "", 
      "Priority": 1, 
      "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.Host", 
      "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.None", 
      "Version": "IBM-witherspoon-sequoia-ibm-OP9_v1.19_1.35", 
      "associations": [
        [
          "inventory", 
          "activation", 
          "/xyz/openbmc_project/inventory/system/chassis"
        ]
      ]
    }, 
    "/xyz/openbmc_project/software/7a9ef57c/inventory": {
      "endpoints": [
        "/xyz/openbmc_project/inventory/system/chassis"
      ]
    }, 
    "/xyz/openbmc_project/software/7a9ef57c/software_version": {
      "endpoints": [
        "/xyz/openbmc_project/software"
      ]
    }, 
    "/xyz/openbmc_project/software/8764baa3": {
      "Activation": "xyz.openbmc_project.Software.Activation.Activations.Active", 
      "ExtendedVersion": "op-build-v1.7-1321-g6eef393-dirty,buildroot-2017.05-163-g8035745,skiboot-v5.8-rc1-pd9d2012,hostboot-c68be97,linux-4.12.8-openpower1-p919e663,petitboot-v1.5.1-p848cad7,machine-xml-c1e49a6-pbb9f626,occ-854999a,hostboot-binaries-67a15fd,capp-ucode-9c73e9f,sbe-4a62126-p180ac2a", 
      "Path": "", 
      "Priority": 0, 
      "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.Host", 
      "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.None", 
      "Version": "IBM-witherspoon-sequoia-ibm-OP9_v1.18_1.54", 
      "associations": [
        [
          "inventory", 
          "activation", 
          "/xyz/openbmc_project/inventory/system/chassis"
        ]
      ]
    }, 
    "/xyz/openbmc_project/software/8764baa3/inventory": {
      "endpoints": [
        "/xyz/openbmc_project/inventory/system/chassis"
      ]
    }, 
    "/xyz/openbmc_project/software/8764baa3/software_version": {
      "endpoints": [
        "/xyz/openbmc_project/software"
      ]
    }, 
    "/xyz/openbmc_project/software/a4417d5c": {
      "Activation": "xyz.openbmc_project.Software.Activation.Activations.Active", 
      "Path": "", 
      "Priority": 1, 
      "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
      "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.None", 
      "Version": "v1.99.10-62-g5b0adc7", 
      "associations": [
        [
          "inventory", 
          "activation", 
          "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
        ]
      ]
    }, 
    "/xyz/openbmc_project/software/a4417d5c/inventory": {
      "endpoints": [
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    }, 
    "/xyz/openbmc_project/software/a4417d5c/software_version": {
      "endpoints": [
        "/xyz/openbmc_project/software"
      ]
    }, 
    "/xyz/openbmc_project/software/active": {
      "endpoints": [
        "/xyz/openbmc_project/software/2a6e1150", 
        "/xyz/openbmc_project/software/8764baa3", 
        "/xyz/openbmc_project/software/a4417d5c", 
        "/xyz/openbmc_project/software/7a9ef57c"
      ]
    }, 
    "/xyz/openbmc_project/software/functional": {
      "endpoints": [
        "/xyz/openbmc_project/software/2a6e1150"
      ]
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170928 23:23:05.350" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170928 23:23:05.351" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/software/2a6e1150": {
            "Activation": "xyz.openbmc_project.Software.Activation.Activations.Active",
            "Path": "",
            "Priorit...</msg>
<status status="PASS" endtime="20170928 23:23:05.351" starttime="20170928 23:23:05.349"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 23:23:05.352" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928232258126284_BmcCodeUpdate/20170928232258126284_RESTBMCCodeUpdate/20170928232258126284_FIRMWARE_list.txt"&gt;/home/fspcibld/logs/20170928232258126284_BmcCodeUpdate/20170928232258126284_RESTBMCCodeUpdate/20170928232258126284_FIRMWARE_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 23:23:05.352" starttime="20170928 23:23:05.352"></status>
</kw>
<status status="PASS" endtime="20170928 23:23:05.352" starttime="20170928 23:23:05.351"></status>
</kw>
<status status="PASS" endtime="20170928 23:23:05.352" starttime="20170928 23:23:04.771"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_elog', '/xyz/openbmc_project/logging/entry/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170928 23:23:05.353" level="INFO">${logpath} = /home/fspcibld/logs/20170928232258126284_BmcCodeUpdate/20170928232258126284_RESTBMCCodeUpdate/20170928232258126284_BMC_elog.txt</msg>
<status status="PASS" endtime="20170928 23:23:05.353" starttime="20170928 23:23:05.353"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170928 23:23:05.356" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170928 23:23:05.357" starttime="20170928 23:23:05.356"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170928 23:23:05.357" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170928 23:23:05.357" starttime="20170928 23:23:05.357"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170928 23:23:05.358" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170928 23:23:05.358" starttime="20170928 23:23:05.358"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170928 23:23:05.359" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170928 23:23:05.359" starttime="20170928 23:23:05.358"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170928 23:23:05.581" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170928 23:23:05.581" starttime="20170928 23:23:05.360"></status>
</kw>
<msg timestamp="20170928 23:23:05.581" level="INFO">${status} = PASS</msg>
<msg timestamp="20170928 23:23:05.581" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170928 23:23:05.581" starttime="20170928 23:23:05.359"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170928 23:23:05.582" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170928 23:23:05.582" starttime="20170928 23:23:05.581"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170928 23:23:05.582" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170928 23:23:05.582" starttime="20170928 23:23:05.582"></status>
</kw>
<status status="PASS" endtime="20170928 23:23:05.583" starttime="20170928 23:23:05.355"></status>
</kw>
<status status="PASS" endtime="20170928 23:23:05.583" starttime="20170928 23:23:05.355"></status>
</kw>
<status status="PASS" endtime="20170928 23:23:05.583" starttime="20170928 23:23:05.354"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170928 23:23:05.583" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/enumerate</msg>
<status status="PASS" endtime="20170928 23:23:05.584" starttime="20170928 23:23:05.583"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170928 23:23:05.584" starttime="20170928 23:23:05.584"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170928 23:23:05.626" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/enumerate, headers=None json=None</msg>
<msg timestamp="20170928 23:23:05.626" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170928 23:23:05.626" starttime="20170928 23:23:05.584"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170928 23:23:05.627" starttime="20170928 23:23:05.626"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170928 23:23:05.627" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170928 23:23:05.627" starttime="20170928 23:23:05.627"></status>
</kw>
<msg timestamp="20170928 23:23:05.627" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170928 23:23:05.628" starttime="20170928 23:23:05.353"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170928 23:23:05.629" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170928 23:23:05.629" level="FAIL">404 != 200</msg>
<status status="FAIL" endtime="20170928 23:23:05.629" starttime="20170928 23:23:05.628"></status>
</kw>
<msg timestamp="20170928 23:23:05.629" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170928 23:23:05.629" starttime="20170928 23:23:05.628"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg timestamp="20170928 23:23:05.630" level="INFO">Continuing for loop from the next iteration.</msg>
<status status="PASS" endtime="20170928 23:23:05.630" starttime="20170928 23:23:05.630"></status>
</kw>
<status status="PASS" endtime="20170928 23:23:05.630" starttime="20170928 23:23:05.629"></status>
</kw>
<status status="PASS" endtime="20170928 23:23:05.630" starttime="20170928 23:23:05.352"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_inventory', '/xyz/openbmc_project/inventory/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170928 23:23:05.631" level="INFO">${logpath} = /home/fspcibld/logs/20170928232258126284_BmcCodeUpdate/20170928232258126284_RESTBMCCodeUpdate/20170928232258126284_BMC_inventory.txt</msg>
<status status="PASS" endtime="20170928 23:23:05.631" starttime="20170928 23:23:05.631"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170928 23:23:05.634" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170928 23:23:05.637" starttime="20170928 23:23:05.634"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170928 23:23:05.637" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170928 23:23:05.637" starttime="20170928 23:23:05.637"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170928 23:23:05.638" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170928 23:23:05.638" starttime="20170928 23:23:05.638"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170928 23:23:05.639" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170928 23:23:05.639" starttime="20170928 23:23:05.638"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170928 23:23:05.828" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170928 23:23:05.828" starttime="20170928 23:23:05.640"></status>
</kw>
<msg timestamp="20170928 23:23:05.828" level="INFO">${status} = PASS</msg>
<msg timestamp="20170928 23:23:05.828" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170928 23:23:05.828" starttime="20170928 23:23:05.639"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170928 23:23:05.829" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170928 23:23:05.829" starttime="20170928 23:23:05.829"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170928 23:23:05.830" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170928 23:23:05.830" starttime="20170928 23:23:05.829"></status>
</kw>
<status status="PASS" endtime="20170928 23:23:05.830" starttime="20170928 23:23:05.633"></status>
</kw>
<status status="PASS" endtime="20170928 23:23:05.830" starttime="20170928 23:23:05.633"></status>
</kw>
<status status="PASS" endtime="20170928 23:23:05.830" starttime="20170928 23:23:05.632"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170928 23:23:05.831" level="INFO">${base_uri} = /xyz/openbmc_project/inventory/enumerate</msg>
<status status="PASS" endtime="20170928 23:23:05.831" starttime="20170928 23:23:05.830"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170928 23:23:05.831" starttime="20170928 23:23:05.831"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170928 23:23:07.986" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/inventory/enumerate, headers=None json=None</msg>
<msg timestamp="20170928 23:23:07.986" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170928 23:23:07.986" starttime="20170928 23:23:05.832"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170928 23:23:07.987" starttime="20170928 23:23:07.987"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170928 23:23:07.988" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170928 23:23:07.988" starttime="20170928 23:23:07.988"></status>
</kw>
<msg timestamp="20170928 23:23:07.988" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170928 23:23:07.988" starttime="20170928 23:23:05.631"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170928 23:23:07.989" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170928 23:23:07.989" starttime="20170928 23:23:07.989"></status>
</kw>
<msg timestamp="20170928 23:23:07.990" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170928 23:23:07.990" starttime="20170928 23:23:07.989"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20170928 23:23:07.990" starttime="20170928 23:23:07.990"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170928 23:23:07.993" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/inventory/system": {
      "AssetTag": "", 
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 0, 
      "Manufacturer": "", 
      "Model": "0000000000000000", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "", 
      "SerialNumber": "0000000000000000"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis": {
      "AirCooled": 1, 
      "WaterCooled": 0
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/activation": {
      "endpoints": [
        "/xyz/openbmc_project/software/8764baa3", 
        "/xyz/openbmc_project/software/7a9ef57c"
      ]
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard": {
      "BuildDate": "1996-01-01 - 00:00:00", 
      "Cached": 0, 
      "FieldReplaceable": 0, 
      "Manufacturer": "0000000000000000", 
      "Model": "", 
      "PartNumber": "00VK525         ", 
      "Present": 1, 
      "PrettyName": "SYSTEM PLANAR   ", 
      "SerialNumber": "Y130UF72700J    "
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc": {
      "BuildDate": "", 
      "FieldReplaceable": 0, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01DH051", 
      "Present": 1, 
      "PrettyName": "BMC PLANAR  ", 
      "SerialNumber": "000000000000", 
      "UUID": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc/activation": {
      "endpoints": [
        "/xyz/openbmc_project/software/2a6e1150", 
        "/xyz/openbmc_project/software/a4417d5c"
      ]
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc/ethernet": {
      "FieldReplaceable": 0, 
      "MACAddress": "70:e2:84:14:23:e1", 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0": {
      "BuildDate": "1996-01-01 - 00:00:00", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01HL906", 
      "Present": 1, 
      "PrettyName": "PROCESSOR MODULE", 
      "SerialNumber": "YA3933943218", 
      "Version": "20"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core0": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core1": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core10": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core11": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core12": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core13": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core14": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core15": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core16": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core17": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core18": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core19": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core2": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core20": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core21": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core22": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core23": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core3": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core4": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core5": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core6": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core7": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core8": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core9": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1": {
      "BuildDate": "1996-01-01 - 00:00:00", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01HL906", 
      "Present": 1, 
      "PrettyName": "PROCESSOR MODULE", 
      "SerialNumber": "YA3933943264", 
      "Version": "20"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core0": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core1": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core10": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core11": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core12": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core13": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core14": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core15": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core16": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core17": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core18": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core19": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core2": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core20": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core21": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core22": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core23": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core3": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core4": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core5": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core6": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core7": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core8": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core9": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm0": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db196b", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm1": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db196a", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm10": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db17ef", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm11": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db1801", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm12": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm13": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db1824", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm14": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 0, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db1907", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm15": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db18d0", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm2": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db196c", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm3": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db196d", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm4": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db1971", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm5": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db17e7", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm6": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db1973", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm7": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db1970", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm8": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm9": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db17ed", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan0": {
      "Functional": 1, 
      "MeetsMinimumShipLevel": 1, 
      "Present": 1, 
      "PrettyName": "fan0"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan1": {
      "Functional": 1, 
      "MeetsMinimumShipLevel": 1, 
      "Present": 1, 
      "PrettyName": "fan1"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan2": {
      "Functional": 1, 
      "MeetsMinimumShipLevel": 1, 
      "Present": 1, 
      "PrettyName": "fan2"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan3": {
      "Functional": 1, 
      "MeetsMinimumShipLevel": 1, 
      "Present": 1, 
      "PrettyName": "fan3"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/power_supply0": {
      "Present": 1, 
      "PrettyName": "power_supply0"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/power_supply1": {
      "Present": 1, 
      "PrettyName": "power_supply1"
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170928 23:23:07.994" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170928 23:23:07.994" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/inventory/system": {
            "AssetTag": "",
            "BuildDate": "",
            "Cached": 0,
            "FieldReplaceable": 0,
            "Man...</msg>
<status status="PASS" endtime="20170928 23:23:07.994" starttime="20170928 23:23:07.990"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 23:23:07.996" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928232258126284_BmcCodeUpdate/20170928232258126284_RESTBMCCodeUpdate/20170928232258126284_BMC_inventory.txt"&gt;/home/fspcibld/logs/20170928232258126284_BmcCodeUpdate/20170928232258126284_RESTBMCCodeUpdate/20170928232258126284_BMC_inventory.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 23:23:07.996" starttime="20170928 23:23:07.995"></status>
</kw>
<status status="PASS" endtime="20170928 23:23:07.996" starttime="20170928 23:23:07.994"></status>
</kw>
<status status="PASS" endtime="20170928 23:23:07.996" starttime="20170928 23:23:05.630"></status>
</kw>
<status status="PASS" endtime="20170928 23:23:07.996" starttime="20170928 23:23:01.312"></status>
</kw>
<status status="PASS" endtime="20170928 23:23:07.996" starttime="20170928 23:23:01.311"></status>
</kw>
<status status="PASS" endtime="20170928 23:23:07.996" starttime="20170928 23:23:01.311"></status>
</kw>
<status status="PASS" endtime="20170928 23:23:07.996" starttime="20170928 23:23:01.311"></status>
</kw>
<status status="PASS" endtime="20170928 23:23:07.997" starttime="20170928 23:23:01.310"></status>
</kw>
<status status="PASS" endtime="20170928 23:23:07.997" starttime="20170928 23:23:01.292"></status>
</kw>
<status status="PASS" endtime="20170928 23:23:07.997" starttime="20170928 23:23:01.289"></status>
</kw>
<status status="PASS" endtime="20170928 23:23:07.997" starttime="20170928 23:23:01.289"></status>
</kw>
<kw type="foritem" name="${method} = ('Sys Inventory Files', 'System Inventory Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170928 23:23:07.999" starttime="20170928 23:23:07.999"></status>
</kw>
<msg timestamp="20170928 23:23:07.999" level="INFO">${status} = PASS</msg>
<msg timestamp="20170928 23:23:07.999" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170928 23:23:07.999" starttime="20170928 23:23:07.998"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170928 23:23:08.000" starttime="20170928 23:23:07.999"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="System Inventory Files" library="openbmc_ffdc_methods">
<doc>Copy systest os_inventory files.</doc>
<kw name="Copy Files" library="OperatingSystem">
<doc>Copies specified files to the target directory.</doc>
<arguments>
<arg>os_inventory_*.json</arg>
<arg>${ffdc_dir_path}</arg>
</arguments>
<status status="PASS" endtime="20170928 23:23:08.023" starttime="20170928 23:23:08.018"></status>
</kw>
<kw name="Remove Files" library="OperatingSystem">
<doc>Uses `Remove File` to remove multiple files one-by-one.</doc>
<arguments>
<arg>os_inventory_*.json</arg>
</arguments>
<msg timestamp="20170928 23:23:08.025" html="yes" level="INFO">File '&lt;a href="file:///home/fspcibld/os_inventory_*.json"&gt;/home/fspcibld/os_inventory_*.json&lt;/a&gt;' does not exist.</msg>
<status status="PASS" endtime="20170928 23:23:08.025" starttime="20170928 23:23:08.023"></status>
</kw>
<status status="PASS" endtime="20170928 23:23:08.026" starttime="20170928 23:23:08.018"></status>
</kw>
<status status="PASS" endtime="20170928 23:23:08.026" starttime="20170928 23:23:08.000"></status>
</kw>
<status status="PASS" endtime="20170928 23:23:08.026" starttime="20170928 23:23:07.997"></status>
</kw>
<status status="PASS" endtime="20170928 23:23:08.026" starttime="20170928 23:23:07.997"></status>
</kw>
<kw type="foritem" name="${method} = ('Core Files', 'SCP Coredump Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170928 23:23:08.028" starttime="20170928 23:23:08.027"></status>
</kw>
<msg timestamp="20170928 23:23:08.028" level="INFO">${status} = PASS</msg>
<msg timestamp="20170928 23:23:08.028" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170928 23:23:08.028" starttime="20170928 23:23:08.027"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170928 23:23:08.030" starttime="20170928 23:23:08.030"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="SCP Coredump Files" library="openbmc_ffdc_methods">
<doc>Copy core dump file from BMC to local system.</doc>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>ls /tmp/core_*</arg>
</arguments>
<assign>
<var>${core_files}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20170928 23:23:08.076" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170928 23:23:08.079" level="INFO">Executing command 'ls /tmp/core_*'.</msg>
<msg timestamp="20170928 23:23:08.125" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20170928 23:23:08.139" level="INFO">${core_files} = None</msg>
<msg timestamp="20170928 23:23:08.139" level="INFO">${stderr} = None</msg>
<msg timestamp="20170928 23:23:08.139" level="INFO">${rc} = None</msg>
<msg timestamp="20170928 23:23:08.139" level="FAIL">#(UTC) 2017/09/28 23:23:08.137852 -    0.062522 - **ERROR** The prior SSH command returned a non-zero return code:
rc:                                               0x00000001
ls: /tmp/core_*: No such file or directory
: 1 != 0</msg>
<status status="FAIL" endtime="20170928 23:23:08.139" starttime="20170928 23:23:08.049"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${core_files}</arg>
</arguments>
<assign>
<var>@{core_list}</var>
</assign>
<msg timestamp="20170928 23:23:08.140" level="INFO">@{core_list} = [ ]</msg>
<msg timestamp="20170928 23:23:08.140" level="FAIL">AttributeError: 'NoneType' object has no attribute 'split'</msg>
<status status="FAIL" endtime="20170928 23:23:08.140" starttime="20170928 23:23:08.140"></status>
</kw>
<kw name="Run Key U" library="gen_robot_keyword">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>Open Connection for SCP</arg>
</arguments>
<kw name="Open Connection for SCP" library="connection_client">
<kw name="Import Library" library="BuiltIn">
<doc>Imports a library with the given name and optional arguments.</doc>
<arguments>
<arg>SCPLibrary</arg>
<arg>WITH NAME</arg>
<arg>scp</arg>
</arguments>
<status status="PASS" endtime="20170928 23:23:08.162" starttime="20170928 23:23:08.152"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' == '${EMPTY}'</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw name="Open Connection" library="scp">
<doc>Opens a new SCP connection to the given host.</doc>
<arguments>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<status status="PASS" endtime="20170928 23:23:08.830" starttime="20170928 23:23:08.163"></status>
</kw>
<status status="PASS" endtime="20170928 23:23:08.830" starttime="20170928 23:23:08.163"></status>
</kw>
<status status="PASS" endtime="20170928 23:23:08.830" starttime="20170928 23:23:08.152"></status>
</kw>
<status status="PASS" endtime="20170928 23:23:08.830" starttime="20170928 23:23:08.141"></status>
</kw>
<kw type="for" name="${index} IN [ @{core_list} ]">
<status status="PASS" endtime="20170928 23:23:08.830" starttime="20170928 23:23:08.830"></status>
</kw>
<status status="FAIL" endtime="20170928 23:23:08.831" starttime="20170928 23:23:08.047"></status>
</kw>
<status status="PASS" endtime="20170928 23:23:08.831" starttime="20170928 23:23:08.030"></status>
</kw>
<status status="PASS" endtime="20170928 23:23:08.831" starttime="20170928 23:23:08.026"></status>
</kw>
<status status="PASS" endtime="20170928 23:23:08.831" starttime="20170928 23:23:08.026"></status>
</kw>
<kw type="foritem" name="${method} = ('BMC Specific Files', 'BMC FFDC Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170928 23:23:08.833" starttime="20170928 23:23:08.833"></status>
</kw>
<msg timestamp="20170928 23:23:08.833" level="INFO">${status} = PASS</msg>
<msg timestamp="20170928 23:23:08.833" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170928 23:23:08.833" starttime="20170928 23:23:08.832"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170928 23:23:08.834" starttime="20170928 23:23:08.834"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Files" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Get Ffdc File Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170928 23:23:08.853" level="INFO">@{entries} = [ BMC FILES ]</msg>
<status status="PASS" endtime="20170928 23:23:08.853" starttime="20170928 23:23:08.853"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC FILES">
<kw name="Create File and Write Data" library="openbmc_ffdc_methods">
<doc>Create files to current FFDC log directory,</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc File" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170928 23:23:08.855" level="INFO">@{cmd_list} = [ ('BMC_procinfo', 'cat /proc/cpuinfo') | ('BMC_proc_fd_active_list', 'ls -Al /proc/*/fd/') | ('BMC_journalctl_nopager', 'journalctl --no-pager') | ('BMC_journalctl_pretty', 'journalctl -o json-pretty...</msg>
<status status="PASS" endtime="20170928 23:23:08.855" starttime="20170928 23:23:08.854"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC_procinfo', 'cat /proc/cpuinfo')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170928 23:23:08.855" level="INFO">${logpath} = /home/fspcibld/logs/20170928232258126284_BmcCodeUpdate/20170928232258126284_RESTBMCCodeUpdate/20170928232258126284_BMC_procinfo.txt</msg>
<status status="PASS" endtime="20170928 23:23:08.856" starttime="20170928 23:23:08.855"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170928 23:23:08.857" starttime="20170928 23:23:08.857"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170928 23:23:08.858" level="INFO">${cmd_buf} = BMC Execute Command  cat /proc/cpuinfo  ignore_err=1</msg>
<status status="PASS" endtime="20170928 23:23:08.858" starttime="20170928 23:23:08.857"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /proc/cpuinfo</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170928 23:23:08.918" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170928 23:23:08.919" level="INFO">Executing command 'cat /proc/cpuinfo'.</msg>
<msg timestamp="20170928 23:23:08.966" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170928 23:23:08.966" starttime="20170928 23:23:08.886"></status>
</kw>
<msg timestamp="20170928 23:23:08.967" level="INFO">${status} = PASS</msg>
<msg timestamp="20170928 23:23:08.967" level="INFO">${ret_values} = (u'processor\t: 0\nmodel name\t: ARMv6-compatible processor rev 7 (v6l)\nBogoMIPS\t: 789.70\nFeatures\t: half thumb fastmult edsp java tls \nCPU implementer\t: 0x41\nCPU architecture: 7\nCPU variant\t...</msg>
<status status="PASS" endtime="20170928 23:23:08.967" starttime="20170928 23:23:08.858"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170928 23:23:08.968" level="INFO">${stdout} = processor	: 0
model name	: ARMv6-compatible processor rev 7 (v6l)
BogoMIPS	: 789.70
Features	: half thumb fastmult edsp java tls 
CPU implementer	: 0x41
CPU architecture: 7
CPU variant	: 0x0
CPU part	...</msg>
<status status="PASS" endtime="20170928 23:23:08.968" starttime="20170928 23:23:08.967"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170928 23:23:08.968" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170928 23:23:08.968" starttime="20170928 23:23:08.968"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 23:23:08.976" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928232258126284_BmcCodeUpdate/20170928232258126284_RESTBMCCodeUpdate/20170928232258126284_BMC_procinfo.txt"&gt;/home/fspcibld/logs/20170928232258126284_BmcCodeUpdate/20170928232258126284_RESTBMCCodeUpdate/20170928232258126284_BMC_procinfo.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 23:23:08.976" starttime="20170928 23:23:08.975"></status>
</kw>
<status status="PASS" endtime="20170928 23:23:08.976" starttime="20170928 23:23:08.975"></status>
</kw>
<status status="PASS" endtime="20170928 23:23:08.976" starttime="20170928 23:23:08.969"></status>
</kw>
<status status="PASS" endtime="20170928 23:23:08.976" starttime="20170928 23:23:08.856"></status>
</kw>
<status status="PASS" endtime="20170928 23:23:08.976" starttime="20170928 23:23:08.855"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_proc_fd_active_list', 'ls -Al /proc/*/fd/')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170928 23:23:08.977" level="INFO">${logpath} = /home/fspcibld/logs/20170928232258126284_BmcCodeUpdate/20170928232258126284_RESTBMCCodeUpdate/20170928232258126284_BMC_proc_fd_active_list.txt</msg>
<status status="PASS" endtime="20170928 23:23:08.977" starttime="20170928 23:23:08.977"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170928 23:23:08.979" starttime="20170928 23:23:08.978"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170928 23:23:08.979" level="INFO">${cmd_buf} = BMC Execute Command  ls -Al /proc/*/fd/  ignore_err=1</msg>
<status status="PASS" endtime="20170928 23:23:08.979" starttime="20170928 23:23:08.979"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>ls -Al /proc/*/fd/</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170928 23:23:09.041" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170928 23:23:09.042" level="INFO">Executing command 'ls -Al /proc/*/fd/'.</msg>
<msg timestamp="20170928 23:23:09.621" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170928 23:23:09.622" starttime="20170928 23:23:09.005"></status>
</kw>
<msg timestamp="20170928 23:23:09.622" level="INFO">${status} = PASS</msg>
<msg timestamp="20170928 23:23:09.623" level="INFO">${ret_values} = (u'/proc/1/fd/:\ntotal 0\nlrwx------    1 root     root            64 Sep 28 21:41 0 -&gt; /dev/null\nlrwx------    1 root     root            64 Sep 28 21:41 1 -&gt; /dev/null\nlr-x------    1 root     roo...</msg>
<status status="PASS" endtime="20170928 23:23:09.623" starttime="20170928 23:23:08.980"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170928 23:23:09.624" level="INFO">${stdout} = /proc/1/fd/:
total 0
lrwx------    1 root     root            64 Sep 28 21:41 0 -&gt; /dev/null
lrwx------    1 root     root            64 Sep 28 21:41 1 -&gt; /dev/null
lr-x------    1 root     root      ...</msg>
<status status="PASS" endtime="20170928 23:23:09.624" starttime="20170928 23:23:09.623"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170928 23:23:09.625" level="INFO">${stderr} = ls: /proc/2701/fd/3: cannot read link: No such file or directory
ls: /proc/self/fd/3: cannot read link: No such file or directory
ls: /proc/thread-self/fd/3: cannot read link: No such file or director...</msg>
<status status="PASS" endtime="20170928 23:23:09.625" starttime="20170928 23:23:09.624"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 23:23:09.635" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928232258126284_BmcCodeUpdate/20170928232258126284_RESTBMCCodeUpdate/20170928232258126284_BMC_proc_fd_active_list.txt"&gt;/home/fspcibld/logs/20170928232258126284_BmcCodeUpdate/20170928232258126284_RESTBMCCodeUpdate/20170928232258126284_BMC_proc_fd_active_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 23:23:09.636" starttime="20170928 23:23:09.635"></status>
</kw>
<status status="PASS" endtime="20170928 23:23:09.636" starttime="20170928 23:23:09.633"></status>
</kw>
<status status="PASS" endtime="20170928 23:23:09.636" starttime="20170928 23:23:09.625"></status>
</kw>
<status status="PASS" endtime="20170928 23:23:09.636" starttime="20170928 23:23:08.977"></status>
</kw>
<status status="PASS" endtime="20170928 23:23:09.636" starttime="20170928 23:23:08.976"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_journalctl_nopager', 'journalctl --no-pager')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170928 23:23:09.637" level="INFO">${logpath} = /home/fspcibld/logs/20170928232258126284_BmcCodeUpdate/20170928232258126284_RESTBMCCodeUpdate/20170928232258126284_BMC_journalctl_nopager.txt</msg>
<status status="PASS" endtime="20170928 23:23:09.637" starttime="20170928 23:23:09.636"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170928 23:23:09.638" starttime="20170928 23:23:09.638"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170928 23:23:09.639" level="INFO">${cmd_buf} = BMC Execute Command  journalctl --no-pager  ignore_err=1</msg>
<status status="PASS" endtime="20170928 23:23:09.639" starttime="20170928 23:23:09.638"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>journalctl --no-pager</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170928 23:23:09.699" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170928 23:23:09.700" level="INFO">Executing command 'journalctl --no-pager'.</msg>
<msg timestamp="20170928 23:23:12.781" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170928 23:23:12.781" starttime="20170928 23:23:09.663"></status>
</kw>
<msg timestamp="20170928 23:23:12.781" level="INFO">${status} = PASS</msg>
<msg timestamp="20170928 23:23:12.786" level="INFO">${ret_values} = (u'-- Logs begin at Thu 2017-09-28 21:25:32 UTC, end at Thu 2017-09-28 23:23:22 UTC. --\nSep 28 21:25:32 witherspoon kernel: Booting Linux on physical CPU 0x0\nSep 28 21:25:32 witherspoon kernel: Linu...</msg>
<status status="PASS" endtime="20170928 23:23:12.786" starttime="20170928 23:23:09.639"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170928 23:23:12.788" level="INFO">${stdout} = -- Logs begin at Thu 2017-09-28 21:25:32 UTC, end at Thu 2017-09-28 23:23:22 UTC. --
Sep 28 21:25:32 witherspoon kernel: Booting Linux on physical CPU 0x0
Sep 28 21:25:32 witherspoon kernel: Linux ver...</msg>
<status status="PASS" endtime="20170928 23:23:12.788" starttime="20170928 23:23:12.787"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170928 23:23:12.789" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170928 23:23:12.789" starttime="20170928 23:23:12.789"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 23:23:12.799" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928232258126284_BmcCodeUpdate/20170928232258126284_RESTBMCCodeUpdate/20170928232258126284_BMC_journalctl_nopager.txt"&gt;/home/fspcibld/logs/20170928232258126284_BmcCodeUpdate/20170928232258126284_RESTBMCCodeUpdate/20170928232258126284_BMC_journalctl_nopager.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 23:23:12.799" starttime="20170928 23:23:12.797"></status>
</kw>
<status status="PASS" endtime="20170928 23:23:12.799" starttime="20170928 23:23:12.795"></status>
</kw>
<status status="PASS" endtime="20170928 23:23:12.799" starttime="20170928 23:23:12.789"></status>
</kw>
<status status="PASS" endtime="20170928 23:23:12.799" starttime="20170928 23:23:09.637"></status>
</kw>
<status status="PASS" endtime="20170928 23:23:12.799" starttime="20170928 23:23:09.636"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_journalctl_pretty', 'journalctl -o json-pretty')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170928 23:23:12.800" level="INFO">${logpath} = /home/fspcibld/logs/20170928232258126284_BmcCodeUpdate/20170928232258126284_RESTBMCCodeUpdate/20170928232258126284_BMC_journalctl_pretty.txt</msg>
<status status="PASS" endtime="20170928 23:23:12.800" starttime="20170928 23:23:12.800"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170928 23:23:12.802" starttime="20170928 23:23:12.801"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170928 23:23:12.802" level="INFO">${cmd_buf} = BMC Execute Command  journalctl -o json-pretty  ignore_err=1</msg>
<status status="PASS" endtime="20170928 23:23:12.802" starttime="20170928 23:23:12.802"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>journalctl -o json-pretty</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170928 23:23:12.860" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170928 23:23:12.864" level="INFO">Executing command 'journalctl -o json-pretty'.</msg>
<msg timestamp="20170928 23:23:22.543" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170928 23:23:22.555" starttime="20170928 23:23:12.827"></status>
</kw>
<msg timestamp="20170928 23:23:22.556" level="INFO">${status} = PASS</msg>
<msg timestamp="20170928 23:23:22.611" level="INFO">${ret_values} = (u'{\n\t"__CURSOR" : "s=9e9fba8cd3ed468c84d15786970f3952;i=1;b=4bc1ae31dce94d849a229b00ccf25611;m=14fb99c;t=55a468c577b1d;x=c86999e29a3d1e2c",\n\t"__REALTIME_TIMESTAMP" : "1506633932307229",\n\t"__MON...</msg>
<status status="PASS" endtime="20170928 23:23:22.611" starttime="20170928 23:23:12.803"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170928 23:23:22.624" level="INFO">${stdout} = {
	"__CURSOR" : "s=9e9fba8cd3ed468c84d15786970f3952;i=1;b=4bc1ae31dce94d849a229b00ccf25611;m=14fb99c;t=55a468c577b1d;x=c86999e29a3d1e2c",
	"__REALTIME_TIMESTAMP" : "1506633932307229",
	"__MONOTONIC_TI...</msg>
<status status="PASS" endtime="20170928 23:23:22.624" starttime="20170928 23:23:22.612"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170928 23:23:22.625" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170928 23:23:22.625" starttime="20170928 23:23:22.624"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 23:23:22.664" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928232258126284_BmcCodeUpdate/20170928232258126284_RESTBMCCodeUpdate/20170928232258126284_BMC_journalctl_pretty.txt"&gt;/home/fspcibld/logs/20170928232258126284_BmcCodeUpdate/20170928232258126284_RESTBMCCodeUpdate/20170928232258126284_BMC_journalctl_pretty.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 23:23:22.664" starttime="20170928 23:23:22.655"></status>
</kw>
<status status="PASS" endtime="20170928 23:23:22.664" starttime="20170928 23:23:22.635"></status>
</kw>
<status status="PASS" endtime="20170928 23:23:22.664" starttime="20170928 23:23:22.625"></status>
</kw>
<status status="PASS" endtime="20170928 23:23:22.664" starttime="20170928 23:23:12.800"></status>
</kw>
<status status="PASS" endtime="20170928 23:23:22.664" starttime="20170928 23:23:12.799"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_meminfo', 'cat /proc/meminfo')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170928 23:23:22.665" level="INFO">${logpath} = /home/fspcibld/logs/20170928232258126284_BmcCodeUpdate/20170928232258126284_RESTBMCCodeUpdate/20170928232258126284_BMC_meminfo.txt</msg>
<status status="PASS" endtime="20170928 23:23:22.665" starttime="20170928 23:23:22.665"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170928 23:23:22.667" starttime="20170928 23:23:22.667"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170928 23:23:22.668" level="INFO">${cmd_buf} = BMC Execute Command  cat /proc/meminfo  ignore_err=1</msg>
<status status="PASS" endtime="20170928 23:23:22.668" starttime="20170928 23:23:22.667"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /proc/meminfo</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170928 23:23:22.733" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170928 23:23:22.734" level="INFO">Executing command 'cat /proc/meminfo'.</msg>
<msg timestamp="20170928 23:23:22.782" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170928 23:23:22.782" starttime="20170928 23:23:22.692"></status>
</kw>
<msg timestamp="20170928 23:23:22.782" level="INFO">${status} = PASS</msg>
<msg timestamp="20170928 23:23:22.782" level="INFO">${ret_values} = (u'MemTotal:         432244 kB\nMemFree:          220236 kB\nMemAvailable:     322572 kB\nBuffers:           31692 kB\nCached:            81240 kB\nSwapCached:            0 kB\nActive:           16176...</msg>
<status status="PASS" endtime="20170928 23:23:22.783" starttime="20170928 23:23:22.668"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170928 23:23:22.783" level="INFO">${stdout} = MemTotal:         432244 kB
MemFree:          220236 kB
MemAvailable:     322572 kB
Buffers:           31692 kB
Cached:            81240 kB
SwapCached:            0 kB
Active:           161760 kB
Inac...</msg>
<status status="PASS" endtime="20170928 23:23:22.783" starttime="20170928 23:23:22.783"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170928 23:23:22.784" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170928 23:23:22.784" starttime="20170928 23:23:22.784"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 23:23:22.792" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928232258126284_BmcCodeUpdate/20170928232258126284_RESTBMCCodeUpdate/20170928232258126284_BMC_meminfo.txt"&gt;/home/fspcibld/logs/20170928232258126284_BmcCodeUpdate/20170928232258126284_RESTBMCCodeUpdate/20170928232258126284_BMC_meminfo.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 23:23:22.792" starttime="20170928 23:23:22.791"></status>
</kw>
<status status="PASS" endtime="20170928 23:23:22.792" starttime="20170928 23:23:22.790"></status>
</kw>
<status status="PASS" endtime="20170928 23:23:22.792" starttime="20170928 23:23:22.784"></status>
</kw>
<status status="PASS" endtime="20170928 23:23:22.792" starttime="20170928 23:23:22.666"></status>
</kw>
<status status="PASS" endtime="20170928 23:23:22.792" starttime="20170928 23:23:22.664"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_proc_list', 'top -n 1 -b')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170928 23:23:22.793" level="INFO">${logpath} = /home/fspcibld/logs/20170928232258126284_BmcCodeUpdate/20170928232258126284_RESTBMCCodeUpdate/20170928232258126284_BMC_proc_list.txt</msg>
<status status="PASS" endtime="20170928 23:23:22.793" starttime="20170928 23:23:22.792"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170928 23:23:22.794" starttime="20170928 23:23:22.794"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170928 23:23:22.795" level="INFO">${cmd_buf} = BMC Execute Command  top -n 1 -b  ignore_err=1</msg>
<status status="PASS" endtime="20170928 23:23:22.795" starttime="20170928 23:23:22.795"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>top -n 1 -b</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170928 23:23:22.854" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170928 23:23:22.856" level="INFO">Executing command 'top -n 1 -b'.</msg>
<msg timestamp="20170928 23:23:23.126" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170928 23:23:23.126" starttime="20170928 23:23:22.820"></status>
</kw>
<msg timestamp="20170928 23:23:23.127" level="INFO">${status} = PASS</msg>
<msg timestamp="20170928 23:23:23.127" level="INFO">${ret_values} = (u'Mem: 212008K used, 220236K free, 8944K shrd, 31692K buff, 81240K cached\nCPU:   0% usr  23% sys   0% nic  76% idle   0% io   0% irq   0% sirq\nLoad average: 0.63 0.35 0.29 1/154 2706\n  PID  PPID U...</msg>
<status status="PASS" endtime="20170928 23:23:23.127" starttime="20170928 23:23:22.795"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170928 23:23:23.128" level="INFO">${stdout} = Mem: 212008K used, 220236K free, 8944K shrd, 31692K buff, 81240K cached
CPU:   0% usr  23% sys   0% nic  76% idle   0% io   0% irq   0% sirq
Load average: 0.63 0.35 0.29 1/154 2706
  PID  PPID USER   ...</msg>
<status status="PASS" endtime="20170928 23:23:23.128" starttime="20170928 23:23:23.127"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170928 23:23:23.129" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170928 23:23:23.129" starttime="20170928 23:23:23.128"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 23:23:23.140" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928232258126284_BmcCodeUpdate/20170928232258126284_RESTBMCCodeUpdate/20170928232258126284_BMC_proc_list.txt"&gt;/home/fspcibld/logs/20170928232258126284_BmcCodeUpdate/20170928232258126284_RESTBMCCodeUpdate/20170928232258126284_BMC_proc_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 23:23:23.141" starttime="20170928 23:23:23.140"></status>
</kw>
<status status="PASS" endtime="20170928 23:23:23.141" starttime="20170928 23:23:23.138"></status>
</kw>
<status status="PASS" endtime="20170928 23:23:23.141" starttime="20170928 23:23:23.129"></status>
</kw>
<status status="PASS" endtime="20170928 23:23:23.141" starttime="20170928 23:23:22.793"></status>
</kw>
<status status="PASS" endtime="20170928 23:23:23.141" starttime="20170928 23:23:22.792"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_dmesg', 'dmesg')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170928 23:23:23.142" level="INFO">${logpath} = /home/fspcibld/logs/20170928232258126284_BmcCodeUpdate/20170928232258126284_RESTBMCCodeUpdate/20170928232258126284_BMC_dmesg.txt</msg>
<status status="PASS" endtime="20170928 23:23:23.142" starttime="20170928 23:23:23.141"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170928 23:23:23.143" starttime="20170928 23:23:23.143"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170928 23:23:23.144" level="INFO">${cmd_buf} = BMC Execute Command  dmesg  ignore_err=1</msg>
<status status="PASS" endtime="20170928 23:23:23.144" starttime="20170928 23:23:23.144"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>dmesg</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170928 23:23:23.204" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170928 23:23:23.205" level="INFO">Executing command 'dmesg'.</msg>
<msg timestamp="20170928 23:23:23.283" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170928 23:23:23.283" starttime="20170928 23:23:23.168"></status>
</kw>
<msg timestamp="20170928 23:23:23.284" level="INFO">${status} = PASS</msg>
<msg timestamp="20170928 23:23:23.284" level="INFO">${ret_values} = (u'[    0.290000] 1e787000.vuart: ttyS5 at MMIO 0x1e787000 (irq = 22, base_baud = 1500000) is a 16550A\n[    0.290000] 1e783000.serial: ttyS0 at MMIO 0x1e783000 (irq = 23, base_baud = 1500000) is a 16...</msg>
<status status="PASS" endtime="20170928 23:23:23.284" starttime="20170928 23:23:23.144"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170928 23:23:23.285" level="INFO">${stdout} = [    0.290000] 1e787000.vuart: ttyS5 at MMIO 0x1e787000 (irq = 22, base_baud = 1500000) is a 16550A
[    0.290000] 1e783000.serial: ttyS0 at MMIO 0x1e783000 (irq = 23, base_baud = 1500000) is a 16550A...</msg>
<status status="PASS" endtime="20170928 23:23:23.285" starttime="20170928 23:23:23.284"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170928 23:23:23.285" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170928 23:23:23.285" starttime="20170928 23:23:23.285"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170928 23:23:23.293" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170928232258126284_BmcCodeUpdate/20170928232258126284_RESTBMCCodeUpdate/20170928232258126284_BMC_dmesg.txt"&gt;/home/fspcibld/logs/20170928232258126284_BmcCodeUpdate/20170928232258126284_RESTBMCCodeUpdate/20170928232258126284_BMC_dmesg.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 23:23:23.293" starttime="20170928 23:23:23.293"></status>
</kw>
<status status="PASS" endtime="20170928 23:23:23.293" starttime="20170928 23:23:23.292"></status>
</kw>
<status status="PASS" endtime="20170928 23:23:23.293" starttime="20170928 23:23:23.286"></status>
</kw>
<status status="PASS" endtime="20170928 23:23:23.294" starttime="20170928 23:23:23.142"></status>
</kw>
<status status="PASS" endtime="20170928 23:23:23.294" starttime="20170928 23:23:23.141"></status>
</kw>
<status status="PASS" endtime="20170928 23:23:23.294" starttime="20170928 23:23:08.855"></status>
</kw>
<status status="PASS" endtime="20170928 23:23:23.294" starttime="20170928 23:23:08.854"></status>
</kw>
<status status="PASS" endtime="20170928 23:23:23.294" starttime="20170928 23:23:08.853"></status>
</kw>
<status status="PASS" endtime="20170928 23:23:23.294" starttime="20170928 23:23:08.853"></status>
</kw>
<status status="PASS" endtime="20170928 23:23:23.294" starttime="20170928 23:23:08.852"></status>
</kw>
<status status="PASS" endtime="20170928 23:23:23.294" starttime="20170928 23:23:08.834"></status>
</kw>
<status status="PASS" endtime="20170928 23:23:23.294" starttime="20170928 23:23:08.831"></status>
</kw>
<status status="PASS" endtime="20170928 23:23:23.294" starttime="20170928 23:23:08.831"></status>
</kw>
<kw type="foritem" name="${method} = ('SEL Log', 'Collect eSEL Log')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170928 23:23:23.296" starttime="20170928 23:23:23.296"></status>
</kw>
<msg timestamp="20170928 23:23:23.296" level="INFO">${status} = PASS</msg>
<msg timestamp="20170928 23:23:23.296" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170928 23:23:23.297" starttime="20170928 23:23:23.295"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170928 23:23:23.297" starttime="20170928 23:23:23.297"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="Collect eSEL Log" library="openbmc_ffdc_methods">
<doc>Collect eSEL log from logging entry and convert eSEL data</doc>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${BMC_LOGGING_ENTRY}/enumerate</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170928 23:23:23.319" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170928 23:23:23.319" starttime="20170928 23:23:23.319"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170928 23:23:23.322" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170928 23:23:23.322" starttime="20170928 23:23:23.320"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170928 23:23:23.322" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170928 23:23:23.322" starttime="20170928 23:23:23.322"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170928 23:23:23.323" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170928 23:23:23.323" starttime="20170928 23:23:23.323"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170928 23:23:23.563" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170928 23:23:23.563" starttime="20170928 23:23:23.324"></status>
</kw>
<msg timestamp="20170928 23:23:23.564" level="INFO">${status} = PASS</msg>
<msg timestamp="20170928 23:23:23.564" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170928 23:23:23.564" starttime="20170928 23:23:23.323"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170928 23:23:23.564" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170928 23:23:23.565" starttime="20170928 23:23:23.564"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170928 23:23:23.565" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170928 23:23:23.565" starttime="20170928 23:23:23.565"></status>
</kw>
<status status="PASS" endtime="20170928 23:23:23.565" starttime="20170928 23:23:23.318"></status>
</kw>
<status status="PASS" endtime="20170928 23:23:23.566" starttime="20170928 23:23:23.317"></status>
</kw>
<status status="PASS" endtime="20170928 23:23:23.566" starttime="20170928 23:23:23.316"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170928 23:23:23.566" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry//enumerate</msg>
<status status="PASS" endtime="20170928 23:23:23.566" starttime="20170928 23:23:23.566"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170928 23:23:23.567" starttime="20170928 23:23:23.567"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170928 23:23:23.621" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry//enumerate, headers=None json=None</msg>
<msg timestamp="20170928 23:23:23.622" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170928 23:23:23.622" starttime="20170928 23:23:23.567"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170928 23:23:23.622" starttime="20170928 23:23:23.622"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170928 23:23:23.623" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170928 23:23:23.623" starttime="20170928 23:23:23.623"></status>
</kw>
<msg timestamp="20170928 23:23:23.623" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170928 23:23:23.623" starttime="20170928 23:23:23.316"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170928 23:23:23.624" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170928 23:23:23.625" level="FAIL">404 != 200</msg>
<status status="FAIL" endtime="20170928 23:23:23.625" starttime="20170928 23:23:23.624"></status>
</kw>
<msg timestamp="20170928 23:23:23.625" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170928 23:23:23.625" starttime="20170928 23:23:23.623"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
</arguments>
<msg timestamp="20170928 23:23:23.625" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20170928 23:23:23.626" starttime="20170928 23:23:23.625"></status>
</kw>
<status status="PASS" endtime="20170928 23:23:23.626" starttime="20170928 23:23:23.315"></status>
</kw>
<status status="PASS" endtime="20170928 23:23:23.626" starttime="20170928 23:23:23.297"></status>
</kw>
<status status="PASS" endtime="20170928 23:23:23.626" starttime="20170928 23:23:23.295"></status>
</kw>
<status status="PASS" endtime="20170928 23:23:23.626" starttime="20170928 23:23:23.294"></status>
</kw>
<kw type="foritem" name="${method} = ('OS FFDC', 'OS FFDC Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170928 23:23:23.628" starttime="20170928 23:23:23.628"></status>
</kw>
<msg timestamp="20170928 23:23:23.628" level="INFO">${status} = PASS</msg>
<msg timestamp="20170928 23:23:23.628" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170928 23:23:23.628" starttime="20170928 23:23:23.627"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170928 23:23:23.629" starttime="20170928 23:23:23.628"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="OS FFDC Files" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${OS_HOST}' == '${EMPTY}'</arg>
<arg>No OS Host Provided</arg>
</arguments>
<msg timestamp="20170928 23:23:23.649" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20170928 23:23:23.649" starttime="20170928 23:23:23.648"></status>
</kw>
<status status="PASS" endtime="20170928 23:23:23.649" starttime="20170928 23:23:23.647"></status>
</kw>
<status status="PASS" endtime="20170928 23:23:23.649" starttime="20170928 23:23:23.629"></status>
</kw>
<status status="PASS" endtime="20170928 23:23:23.649" starttime="20170928 23:23:23.626"></status>
</kw>
<status status="PASS" endtime="20170928 23:23:23.650" starttime="20170928 23:23:23.626"></status>
</kw>
<status status="PASS" endtime="20170928 23:23:23.650" starttime="20170928 23:22:59.136"></status>
</kw>
<status status="PASS" endtime="20170928 23:23:23.650" starttime="20170928 23:22:59.133"></status>
</kw>
<status status="PASS" endtime="20170928 23:23:23.650" starttime="20170928 23:22:59.133"></status>
</kw>
<status status="PASS" endtime="20170928 23:23:23.650" starttime="20170928 23:22:59.133"></status>
</kw>
<kw name="Run Key U" library="gen_robot_keyword">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>SSHLibrary.Close All Connections</arg>
</arguments>
<kw name="Close All Connections" library="SSHLibrary">
<doc>Closes all open connections.</doc>
<status status="PASS" endtime="20170928 23:23:23.660" starttime="20170928 23:23:23.659"></status>
</kw>
<status status="PASS" endtime="20170928 23:23:23.660" starttime="20170928 23:23:23.650"></status>
</kw>
<status status="PASS" endtime="20170928 23:23:23.661" starttime="20170928 23:22:59.131"></status>
</kw>
<status status="PASS" endtime="20170928 23:23:23.662" starttime="20170928 23:22:55.083"></status>
</kw>
<status status="PASS" endtime="20170928 23:23:23.662" starttime="20170928 23:22:55.083"></status>
</kw>
<kw name="Log Test Case Status" library="openbmc_ffdc_methods">
<doc>Test case execution result history.</doc>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH_STYLE}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH_STYLE}</var>
</assign>
<msg timestamp="20170928 23:23:23.663" level="INFO">${FFDC_DIR_PATH_STYLE} = </msg>
<status status="PASS" endtime="20170928 23:23:23.663" starttime="20170928 23:23:23.663"></status>
</kw>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH}</var>
</assign>
<msg timestamp="20170928 23:23:23.664" level="INFO">${FFDC_DIR_PATH} = /home/fspcibld/logs/20170928232258126284_BmcCodeUpdate/20170928232258126284_RESTBMCCodeUpdate/</msg>
<status status="PASS" endtime="20170928 23:23:23.664" starttime="20170928 23:23:23.664"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH}' == '${EMPTY}'</arg>
<arg>Set FFDC Defaults</arg>
</arguments>
<status status="PASS" endtime="20170928 23:23:23.665" starttime="20170928 23:23:23.664"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH_STYLE}' == '${1}'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${FFDC_LOG_PATH}</arg>
<arg>${FFDC_DIR_PATH}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${TEST_HISTORY}</arg>
<arg>${FFDC_DIR_PATH}test_history.txt</arg>
</arguments>
<status status="PASS" endtime="20170928 23:23:23.665" starttime="20170928 23:23:23.665"></status>
</kw>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg timestamp="20170928 23:23:23.666" html="yes" level="INFO">Directory '&lt;a href="file:///home/fspcibld/logs"&gt;/home/fspcibld/logs&lt;/a&gt;' already exists.</msg>
<status status="PASS" endtime="20170928 23:23:23.666" starttime="20170928 23:23:23.666"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg timestamp="20170928 23:23:23.667" level="FAIL">File '/home/fspcibld/logs/test_history.txt' does not exist.</msg>
<status status="FAIL" endtime="20170928 23:23:23.667" starttime="20170928 23:23:23.667"></status>
</kw>
<msg timestamp="20170928 23:23:23.667" level="INFO">${exist} = False</msg>
<status status="PASS" endtime="20170928 23:23:23.667" starttime="20170928 23:23:23.666"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg timestamp="20170928 23:23:23.670" html="yes" level="INFO">Created file '&lt;a href="file:///home/fspcibld/logs/test_history.txt"&gt;/home/fspcibld/logs/test_history.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 23:23:23.670" starttime="20170928 23:23:23.669"></status>
</kw>
<status status="PASS" endtime="20170928 23:23:23.670" starttime="20170928 23:23:23.668"></status>
</kw>
<kw name="Rpvars" library="gen_robot_print">
<arguments>
<arg>TEST_HISTORY</arg>
</arguments>
<status status="PASS" endtime="20170928 23:23:23.670" starttime="20170928 23:23:23.670"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170928 23:23:23.672" level="INFO">${cur_time} = 2017-09-28 23:23:23:671363</msg>
<status status="PASS" endtime="20170928 23:23:23.672" starttime="20170928 23:23:23.671"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170928 23:23:23.672" level="INFO">${cur_time} = 20170928232323671363</msg>
<status status="PASS" endtime="20170928 23:23:23.672" starttime="20170928 23:23:23.672"></status>
</kw>
<msg timestamp="20170928 23:23:23.672" level="INFO">${cur_time} = 20170928232323671363</msg>
<status status="PASS" endtime="20170928 23:23:23.672" starttime="20170928 23:23:23.670"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg timestamp="20170928 23:23:23.673" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/test_history.txt"&gt;/home/fspcibld/logs/test_history.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170928 23:23:23.673" starttime="20170928 23:23:23.673"></status>
</kw>
<status status="PASS" endtime="20170928 23:23:23.674" starttime="20170928 23:23:23.662"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL'</arg>
<arg>Run Keywords</arg>
<arg>Delete Error Logs</arg>
<arg>AND</arg>
<arg>Delete All Dumps</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Delete Error Logs</arg>
<arg>AND</arg>
<arg>Delete All Dumps</arg>
</arguments>
<kw name="Delete Error Logs" library="utils">
<doc>Delete error logs.</doc>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${BMC_LOGGING_ENTRY}${/}list</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170928 23:23:23.678" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170928 23:23:23.679" starttime="20170928 23:23:23.678"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170928 23:23:23.679" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170928 23:23:23.679" starttime="20170928 23:23:23.679"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170928 23:23:23.680" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170928 23:23:23.680" starttime="20170928 23:23:23.680"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170928 23:23:23.681" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170928 23:23:23.681" starttime="20170928 23:23:23.680"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170928 23:23:23.867" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170928 23:23:23.867" starttime="20170928 23:23:23.682"></status>
</kw>
<msg timestamp="20170928 23:23:23.867" level="INFO">${status} = PASS</msg>
<msg timestamp="20170928 23:23:23.867" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170928 23:23:23.868" starttime="20170928 23:23:23.681"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170928 23:23:23.868" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170928 23:23:23.868" starttime="20170928 23:23:23.868"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170928 23:23:23.869" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170928 23:23:23.869" starttime="20170928 23:23:23.869"></status>
</kw>
<status status="PASS" endtime="20170928 23:23:23.869" starttime="20170928 23:23:23.677"></status>
</kw>
<status status="PASS" endtime="20170928 23:23:23.869" starttime="20170928 23:23:23.677"></status>
</kw>
<status status="PASS" endtime="20170928 23:23:23.870" starttime="20170928 23:23:23.676"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170928 23:23:23.870" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry//list</msg>
<status status="PASS" endtime="20170928 23:23:23.870" starttime="20170928 23:23:23.870"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170928 23:23:23.871" starttime="20170928 23:23:23.871"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170928 23:23:23.912" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry//list, headers=None json=None</msg>
<msg timestamp="20170928 23:23:23.912" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170928 23:23:23.912" starttime="20170928 23:23:23.871"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170928 23:23:23.913" starttime="20170928 23:23:23.913"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170928 23:23:23.913" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170928 23:23:23.914" starttime="20170928 23:23:23.913"></status>
</kw>
<msg timestamp="20170928 23:23:23.914" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170928 23:23:23.914" starttime="20170928 23:23:23.675"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>${resp.status_code} == ${HTTP_NOT_FOUND}</arg>
</arguments>
<msg timestamp="20170928 23:23:23.914" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20170928 23:23:23.915" starttime="20170928 23:23:23.914"></status>
</kw>
<status status="PASS" endtime="20170928 23:23:23.915" starttime="20170928 23:23:23.675"></status>
</kw>
<kw name="Delete All Dumps" library="dump_utils">
<doc>Delete all dumps.</doc>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${DUMP_ENTRY_URI}list</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170928 23:23:23.918" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170928 23:23:23.918" starttime="20170928 23:23:23.918"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170928 23:23:23.919" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170928 23:23:23.919" starttime="20170928 23:23:23.919"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170928 23:23:23.920" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170928 23:23:23.920" starttime="20170928 23:23:23.919"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170928 23:23:23.920" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170928 23:23:23.920" starttime="20170928 23:23:23.920"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170928 23:23:24.106" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170928 23:23:24.106" starttime="20170928 23:23:23.921"></status>
</kw>
<msg timestamp="20170928 23:23:24.107" level="INFO">${status} = PASS</msg>
<msg timestamp="20170928 23:23:24.107" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170928 23:23:24.107" starttime="20170928 23:23:23.921"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170928 23:23:24.107" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170928 23:23:24.108" starttime="20170928 23:23:24.107"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170928 23:23:24.108" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170928 23:23:24.108" starttime="20170928 23:23:24.108"></status>
</kw>
<status status="PASS" endtime="20170928 23:23:24.109" starttime="20170928 23:23:23.917"></status>
</kw>
<status status="PASS" endtime="20170928 23:23:24.109" starttime="20170928 23:23:23.917"></status>
</kw>
<status status="PASS" endtime="20170928 23:23:24.109" starttime="20170928 23:23:23.916"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170928 23:23:24.109" level="INFO">${base_uri} = /xyz/openbmc_project/dump/entry/list</msg>
<status status="PASS" endtime="20170928 23:23:24.109" starttime="20170928 23:23:24.109"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170928 23:23:24.110" starttime="20170928 23:23:24.110"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170928 23:23:24.154" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/dump/entry/list, headers=None json=None</msg>
<msg timestamp="20170928 23:23:24.154" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170928 23:23:24.154" starttime="20170928 23:23:24.110"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170928 23:23:24.155" starttime="20170928 23:23:24.155"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170928 23:23:24.156" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170928 23:23:24.156" starttime="20170928 23:23:24.156"></status>
</kw>
<msg timestamp="20170928 23:23:24.156" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170928 23:23:24.156" starttime="20170928 23:23:23.915"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>${resp.status_code} == ${HTTP_NOT_FOUND}</arg>
</arguments>
<msg timestamp="20170928 23:23:24.157" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20170928 23:23:24.157" starttime="20170928 23:23:24.157"></status>
</kw>
<status status="PASS" endtime="20170928 23:23:24.157" starttime="20170928 23:23:23.915"></status>
</kw>
<status status="PASS" endtime="20170928 23:23:24.157" starttime="20170928 23:23:23.674"></status>
</kw>
<status status="PASS" endtime="20170928 23:23:24.157" starttime="20170928 23:23:23.674"></status>
</kw>
<status status="PASS" endtime="20170928 23:23:24.157" starttime="20170928 23:22:55.082"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'PASS'</arg>
<arg>Check Error And Collect FFDC</arg>
</arguments>
<status status="PASS" endtime="20170928 23:23:24.158" starttime="20170928 23:23:24.158"></status>
</kw>
<status status="PASS" endtime="20170928 23:23:24.158" starttime="20170928 23:22:55.081"></status>
</kw>
<doc>Do a BMC code update by uploading image on BMC via REST.</doc>
<tags>
<tag>REST_BMC_Code_Update</tag>
</tags>
<status status="FAIL" endtime="20170928 23:23:24.158" critical="yes" starttime="20170928 23:22:33.820">SSLError: ('The write operation timed out',)</status>
</test>
<doc>Update the BMC code on a target BMC.
Execution Method:
python -m robot -v OPENBMC_HOST:&lt;hostname&gt;
-v IMAGE_FILE_PATH:&lt;path/*.tar&gt; bmc_code_update.robot</doc>
<status status="FAIL" endtime="20170928 23:23:24.159" starttime="20170928 23:22:32.629"></status>
</suite>
<statistics>
<total>
<stat fail="1" pass="0">Critical Tests</stat>
<stat fail="1" pass="0">All Tests</stat>
</total>
<tag>
<stat fail="1" pass="0">REST_BMC_Code_Update</stat>
</tag>
<suite>
<stat fail="1" id="s1" name="Bmc Code Update" pass="0">Bmc Code Update</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
