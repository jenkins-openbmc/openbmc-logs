<?xml version="1.0" encoding="UTF-8"?>
<robot generated="20170816 07:22:07.869" generator="Robot 3.0.2 (Python 2.7.12 on linux2)">
<suite source="/tmp/fspcibld/2147/obmc-robot/tests" id="s1" name="Tests">
<kw type="setup" name="System Driver Data">
<doc>System driver information.</doc>
<kw library="connection_client" name="Open Connection And Log In">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170816 07:22:08.330" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" starttime="20170816 07:22:08.330" endtime="20170816 07:22:08.330"></status>
</kw>
<msg timestamp="20170816 07:22:08.331" level="INFO">${has_host} = False</msg>
<status status="PASS" starttime="20170816 07:22:08.330" endtime="20170816 07:22:08.331"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" starttime="20170816 07:22:08.331" endtime="20170816 07:22:08.332"></status>
</kw>
<status status="PASS" starttime="20170816 07:22:08.331" endtime="20170816 07:22:08.332"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw library="connection_client" name="User input SSH and HTTPs Ports">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg timestamp="20170816 07:22:08.333" level="INFO">${port_num} = 22</msg>
<status status="PASS" starttime="20170816 07:22:08.333" endtime="20170816 07:22:08.333"></status>
</kw>
<kw library="BuiltIn" name="Replace Variables">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg timestamp="20170816 07:22:08.334" level="INFO">${SSH_PORT} = 22</msg>
<status status="PASS" starttime="20170816 07:22:08.333" endtime="20170816 07:22:08.334"></status>
</kw>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg timestamp="20170816 07:22:08.334" level="INFO">${https_num} = 443</msg>
<status status="PASS" starttime="20170816 07:22:08.334" endtime="20170816 07:22:08.334"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg timestamp="20170816 07:22:08.336" level="INFO">${AUTH_URI} = https://9.41.166.169:443</msg>
<status status="PASS" starttime="20170816 07:22:08.334" endtime="20170816 07:22:08.336"></status>
</kw>
<status status="PASS" starttime="20170816 07:22:08.332" endtime="20170816 07:22:08.336"></status>
</kw>
<status status="PASS" starttime="20170816 07:22:08.332" endtime="20170816 07:22:08.336"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170816 07:22:08.337" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" starttime="20170816 07:22:08.337" endtime="20170816 07:22:08.337"></status>
</kw>
<msg timestamp="20170816 07:22:08.337" level="INFO">${has_port} = False</msg>
<status status="PASS" starttime="20170816 07:22:08.336" endtime="20170816 07:22:08.337"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keywords">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status status="PASS" starttime="20170816 07:22:08.339" endtime="20170816 07:22:08.339"></status>
</kw>
<kw library="SSHLibrary" name="Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" starttime="20170816 07:22:08.339" endtime="20170816 07:22:08.340"></status>
</kw>
<status status="PASS" starttime="20170816 07:22:08.338" endtime="20170816 07:22:08.340"></status>
</kw>
<status status="PASS" starttime="20170816 07:22:08.338" endtime="20170816 07:22:08.340"></status>
</kw>
<kw library="SSHLibrary" name="Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170816 07:22:08.340" level="INFO">Logging into '9.41.166.169:22' as 'root'.</msg>
<msg timestamp="20170816 07:22:10.085" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" starttime="20170816 07:22:08.340" endtime="20170816 07:22:10.085"></status>
</kw>
<status status="PASS" starttime="20170816 07:22:08.329" endtime="20170816 07:22:10.086"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log BMC Driver Details</arg>
</arguments>
<kw name="Log BMC Driver Details">
<doc>Get BMC driver details and log.</doc>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${DRIVER_CMD}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${output}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170816 07:22:10.087" level="INFO">Executing command 'cat /etc/os-release | grep ^VERSION_ID='.</msg>
<msg timestamp="20170816 07:22:10.164" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170816 07:22:10.164" level="INFO">${output} = VERSION_ID="v1.99.8-250-gc0f9bc6"</msg>
<msg timestamp="20170816 07:22:10.164" level="INFO">${stderr} = </msg>
<status status="PASS" starttime="20170816 07:22:10.087" endtime="20170816 07:22:10.164"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170816 07:22:10.165" level="INFO">Length is 0</msg>
<status status="PASS" starttime="20170816 07:22:10.164" endtime="20170816 07:22:10.165"></status>
</kw>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20170816 07:22:10.165" level="INFO">VERSION_ID="v1.99.8-250-gc0f9bc6"</msg>
<status status="PASS" starttime="20170816 07:22:10.165" endtime="20170816 07:22:10.165"></status>
</kw>
<status status="PASS" starttime="20170816 07:22:10.086" endtime="20170816 07:22:10.165"></status>
</kw>
<status status="PASS" starttime="20170816 07:22:10.086" endtime="20170816 07:22:10.165"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log PNOR Driver Details</arg>
</arguments>
<kw name="Log PNOR Driver Details">
<doc>Get PNOR driver details and log.</doc>
<kw library="utils" name="Execute Command On BMC">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>${PNOR_CMD}</arg>
</arguments>
<assign>
<var>${pnor_details}</var>
</assign>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170816 07:22:10.167" level="INFO">Executing command '/usr/sbin/pflash -r /tmp/out.txt -P VERSION; cat /tmp/out.txt'.</msg>
<msg timestamp="20170816 07:22:10.293" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20170816 07:22:10.294" level="INFO">${stdout} = </msg>
<msg timestamp="20170816 07:22:10.294" level="INFO">${stderr} = sh: /usr/sbin/pflash: No such file or directory
cat: can't open '/tmp/out.txt': No such file or directory</msg>
<status status="PASS" starttime="20170816 07:22:10.167" endtime="20170816 07:22:10.294"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170816 07:22:10.294" level="INFO">Length is 105</msg>
<msg timestamp="20170816 07:22:10.294" level="FAIL">'sh: /usr/sbin/pflash: No such file or directory
cat: can't open '/tmp/out.txt': No such file or directory' should be empty.</msg>
<status status="FAIL" starttime="20170816 07:22:10.294" endtime="20170816 07:22:10.294"></status>
</kw>
<status status="FAIL" starttime="20170816 07:22:10.166" endtime="20170816 07:22:10.295"></status>
</kw>
<status status="FAIL" starttime="20170816 07:22:10.166" endtime="20170816 07:22:10.295"></status>
</kw>
<status status="PASS" starttime="20170816 07:22:10.166" endtime="20170816 07:22:10.295"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log BMC Model</arg>
</arguments>
<kw name="Log BMC Model">
<doc>Fetch BMC Model name from system and log.</doc>
<kw library="utils" name="Get BMC System Model">
<doc>Get the BMC model from the device tree.</doc>
<assign>
<var>${bmc_model}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20170816 07:22:10.479" level="INFO">encoding=UTF-8
prompt=# 
alias=bmc_connection
term_type=vt100
newline=

host=9.41.166.169
width=80
port=22
timeout=25 seconds
path_separator=/
index=1
height=24</msg>
<msg timestamp="20170816 07:22:10.479" level="INFO">Logging into '9.41.166.169:22' as 'root'.</msg>
<msg timestamp="20170816 07:22:11.211" level="INFO">Read output: root@witherspoon:~#</msg>
<msg timestamp="20170816 07:22:11.211" level="INFO">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg timestamp="20170816 07:22:11.308" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170816 07:22:11.316" level="INFO">${bmc_model} = Witherspoon</msg>
<msg timestamp="20170816 07:22:11.316" level="INFO">${stderr} = </msg>
<msg timestamp="20170816 07:22:11.316" level="INFO">${rc} = 0</msg>
<status status="PASS" starttime="20170816 07:22:10.296" endtime="20170816 07:22:11.316"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170816 07:22:11.317" level="INFO">Length is 0</msg>
<status status="PASS" starttime="20170816 07:22:11.317" endtime="20170816 07:22:11.317"></status>
</kw>
<kw library="BuiltIn" name="Should Not Be Empty">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg timestamp="20170816 07:22:11.317" level="INFO">Length is 11</msg>
<status status="PASS" starttime="20170816 07:22:11.317" endtime="20170816 07:22:11.317"></status>
</kw>
<msg timestamp="20170816 07:22:11.318" level="INFO">${bmc_model} = Witherspoon</msg>
<status status="PASS" starttime="20170816 07:22:10.295" endtime="20170816 07:22:11.318"></status>
</kw>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>BMC Model=${bmc_model}</arg>
</arguments>
<msg timestamp="20170816 07:22:11.318" level="INFO">BMC Model=Witherspoon</msg>
<status status="PASS" starttime="20170816 07:22:11.318" endtime="20170816 07:22:11.318"></status>
</kw>
<status status="PASS" starttime="20170816 07:22:10.295" endtime="20170816 07:22:11.318"></status>
</kw>
<status status="PASS" starttime="20170816 07:22:10.295" endtime="20170816 07:22:11.318"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Enable Core Dump On BMC</arg>
</arguments>
<kw library="utils" name="Enable Core Dump On BMC">
<doc>Enable core dump collection.</doc>
<kw library="connection_client" name="Open Connection And Log In">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170816 07:22:11.320" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" starttime="20170816 07:22:11.320" endtime="20170816 07:22:11.320"></status>
</kw>
<msg timestamp="20170816 07:22:11.321" level="INFO">${has_host} = False</msg>
<status status="PASS" starttime="20170816 07:22:11.320" endtime="20170816 07:22:11.321"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" starttime="20170816 07:22:11.321" endtime="20170816 07:22:11.322"></status>
</kw>
<status status="PASS" starttime="20170816 07:22:11.321" endtime="20170816 07:22:11.322"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw library="connection_client" name="User input SSH and HTTPs Ports">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg timestamp="20170816 07:22:11.323" level="INFO">${port_num} = 22</msg>
<status status="PASS" starttime="20170816 07:22:11.323" endtime="20170816 07:22:11.324"></status>
</kw>
<kw library="BuiltIn" name="Replace Variables">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg timestamp="20170816 07:22:11.324" level="INFO">${SSH_PORT} = 22</msg>
<status status="PASS" starttime="20170816 07:22:11.324" endtime="20170816 07:22:11.324"></status>
</kw>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg timestamp="20170816 07:22:11.325" level="INFO">${https_num} = 443</msg>
<status status="PASS" starttime="20170816 07:22:11.324" endtime="20170816 07:22:11.325"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg timestamp="20170816 07:22:11.325" level="INFO">${AUTH_URI} = https://9.41.166.169:443</msg>
<status status="PASS" starttime="20170816 07:22:11.325" endtime="20170816 07:22:11.325"></status>
</kw>
<status status="PASS" starttime="20170816 07:22:11.323" endtime="20170816 07:22:11.325"></status>
</kw>
<status status="PASS" starttime="20170816 07:22:11.322" endtime="20170816 07:22:11.325"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170816 07:22:11.326" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" starttime="20170816 07:22:11.326" endtime="20170816 07:22:11.326"></status>
</kw>
<msg timestamp="20170816 07:22:11.327" level="INFO">${has_port} = False</msg>
<status status="PASS" starttime="20170816 07:22:11.326" endtime="20170816 07:22:11.327"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keywords">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status status="PASS" starttime="20170816 07:22:11.328" endtime="20170816 07:22:11.328"></status>
</kw>
<kw library="SSHLibrary" name="Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" starttime="20170816 07:22:11.328" endtime="20170816 07:22:11.329"></status>
</kw>
<status status="PASS" starttime="20170816 07:22:11.327" endtime="20170816 07:22:11.329"></status>
</kw>
<status status="PASS" starttime="20170816 07:22:11.327" endtime="20170816 07:22:11.329"></status>
</kw>
<kw library="SSHLibrary" name="Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170816 07:22:11.329" level="INFO">Logging into '9.41.166.169:22' as 'root'.</msg>
<msg timestamp="20170816 07:22:13.010" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" starttime="20170816 07:22:11.329" endtime="20170816 07:22:13.010"></status>
</kw>
<status status="PASS" starttime="20170816 07:22:11.319" endtime="20170816 07:22:13.010"></status>
</kw>
<kw library="utils" name="Execute Command On BMC">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>echo '/tmp/core_%e.%p' | tee /proc/sys/kernel/core_pattern</arg>
</arguments>
<assign>
<var>${core_pattern}</var>
</assign>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170816 07:22:13.011" level="INFO">Executing command 'echo '/tmp/core_%e.%p' | tee /proc/sys/kernel/core_pattern'.</msg>
<msg timestamp="20170816 07:22:13.088" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170816 07:22:13.088" level="INFO">${stdout} = /tmp/core_%e.%p</msg>
<msg timestamp="20170816 07:22:13.088" level="INFO">${stderr} = </msg>
<status status="PASS" starttime="20170816 07:22:13.011" endtime="20170816 07:22:13.088"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170816 07:22:13.088" level="INFO">Length is 0</msg>
<status status="PASS" starttime="20170816 07:22:13.088" endtime="20170816 07:22:13.088"></status>
</kw>
<msg timestamp="20170816 07:22:13.089" level="INFO">${core_pattern} = /tmp/core_%e.%p</msg>
<status status="PASS" starttime="20170816 07:22:13.010" endtime="20170816 07:22:13.089"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${core_pattern}</arg>
<arg>/tmp/core_%e.%p</arg>
</arguments>
<status status="PASS" starttime="20170816 07:22:13.089" endtime="20170816 07:22:13.089"></status>
</kw>
<status status="PASS" starttime="20170816 07:22:11.319" endtime="20170816 07:22:13.089"></status>
</kw>
<status status="PASS" starttime="20170816 07:22:11.318" endtime="20170816 07:22:13.089"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${DEBUG_TARBALL_PATH}' != '${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Install Debug Tarball On BMC</arg>
<arg>${DEBUG_TARBALL_PATH}</arg>
</arguments>
<status status="PASS" starttime="20170816 07:22:13.089" endtime="20170816 07:22:13.090"></status>
</kw>
<status status="PASS" starttime="20170816 07:22:08.329" endtime="20170816 07:22:13.090"></status>
</kw>
<suite source="/tmp/fspcibld/2147/obmc-robot/tests/security" id="s1-s1" name="Security">
<suite source="/tmp/fspcibld/2147/obmc-robot/tests/security/test_ssl.robot" id="s1-s1-s1" name="Test Ssl">
<test id="s1-s1-s1-t1" name="Test SSL Connection">
<kw library="rest_client" name="Initialize OpenBMC">
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 07:22:13.175" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=20, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170816 07:22:13.175" endtime="20170816 07:22:13.176"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 07:22:13.176" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170816 07:22:13.176" endtime="20170816 07:22:13.176"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 07:22:13.177" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170816 07:22:13.177" endtime="20170816 07:22:13.177"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 07:22:13.178" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170816 07:22:13.177" endtime="20170816 07:22:13.178"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 07:22:13.372" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170816 07:22:13.178" endtime="20170816 07:22:13.372"></status>
</kw>
<msg timestamp="20170816 07:22:13.372" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 07:22:13.372" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:22:13.178" endtime="20170816 07:22:13.372"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 07:22:13.373" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:22:13.373" endtime="20170816 07:22:13.373"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:22:13.374" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:22:13.373" endtime="20170816 07:22:13.374"></status>
</kw>
<status status="PASS" starttime="20170816 07:22:13.174" endtime="20170816 07:22:13.374"></status>
</kw>
<status status="PASS" starttime="20170816 07:22:13.174" endtime="20170816 07:22:13.374"></status>
</kw>
<status status="PASS" starttime="20170816 07:22:13.173" endtime="20170816 07:22:13.374"></status>
</kw>
<kw type="teardown" library="openbmc_ffdc" name="FFDC On Test Case Fail">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw library="state_manager" name="Is Host Quiesced">
<doc>Check if host state is quiesced.</doc>
<assign>
<var>${status}</var>
</assign>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 07:22:13.379" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170816 07:22:13.378" endtime="20170816 07:22:13.379"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 07:22:13.380" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170816 07:22:13.379" endtime="20170816 07:22:13.380"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 07:22:13.380" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170816 07:22:13.380" endtime="20170816 07:22:13.380"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 07:22:13.381" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170816 07:22:13.381" endtime="20170816 07:22:13.381"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 07:22:13.574" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170816 07:22:13.382" endtime="20170816 07:22:13.574"></status>
</kw>
<msg timestamp="20170816 07:22:13.574" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 07:22:13.574" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:22:13.381" endtime="20170816 07:22:13.574"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 07:22:13.575" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:22:13.575" endtime="20170816 07:22:13.575"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:22:13.576" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:22:13.575" endtime="20170816 07:22:13.576"></status>
</kw>
<status status="PASS" starttime="20170816 07:22:13.378" endtime="20170816 07:22:13.576"></status>
</kw>
<status status="PASS" starttime="20170816 07:22:13.377" endtime="20170816 07:22:13.576"></status>
</kw>
<status status="PASS" starttime="20170816 07:22:13.377" endtime="20170816 07:22:13.576"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 07:22:13.577" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" starttime="20170816 07:22:13.576" endtime="20170816 07:22:13.577"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:22:13.579" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:22:13.578" endtime="20170816 07:22:13.579"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:22:13.580" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:22:13.579" endtime="20170816 07:22:13.580"></status>
</kw>
<status status="PASS" starttime="20170816 07:22:13.579" endtime="20170816 07:22:13.580"></status>
</kw>
<status status="PASS" starttime="20170816 07:22:13.577" endtime="20170816 07:22:13.580"></status>
</kw>
<status status="PASS" starttime="20170816 07:22:13.577" endtime="20170816 07:22:13.580"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 07:22:13.669" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170816 07:22:13.669" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:22:13.580" endtime="20170816 07:22:13.669"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:22:13.670" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:22:13.670" endtime="20170816 07:22:13.670"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:22:13.671" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:22:13.671" endtime="20170816 07:22:13.671"></status>
</kw>
<status status="PASS" starttime="20170816 07:22:13.671" endtime="20170816 07:22:13.672"></status>
</kw>
<status status="PASS" starttime="20170816 07:22:13.669" endtime="20170816 07:22:13.672"></status>
</kw>
<status status="PASS" starttime="20170816 07:22:13.669" endtime="20170816 07:22:13.672"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 07:22:13.672" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170816 07:22:13.672" endtime="20170816 07:22:13.672"></status>
</kw>
<msg timestamp="20170816 07:22:13.672" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:22:13.376" endtime="20170816 07:22:13.672"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:22:13.673" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:22:13.673" endtime="20170816 07:22:13.673"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 07:22:13.674" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 07:22:13.674" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 07:22:13.674" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170816 07:22:13.673" endtime="20170816 07:22:13.674"></status>
</kw>
<msg timestamp="20170816 07:22:13.674" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status status="PASS" starttime="20170816 07:22:13.376" endtime="20170816 07:22:13.674"></status>
</kw>
<msg timestamp="20170816 07:22:13.675" level="INFO">${host_state} = Off</msg>
<status status="PASS" starttime="20170816 07:22:13.375" endtime="20170816 07:22:13.675"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<msg timestamp="20170816 07:22:13.676" level="FAIL">Off != Quiesced</msg>
<status status="FAIL" starttime="20170816 07:22:13.675" endtime="20170816 07:22:13.676"></status>
</kw>
<msg timestamp="20170816 07:22:13.676" level="INFO">${status} = False</msg>
<status status="PASS" starttime="20170816 07:22:13.675" endtime="20170816 07:22:13.676"></status>
</kw>
<msg timestamp="20170816 07:22:13.676" level="INFO">${status} = False</msg>
<status status="PASS" starttime="20170816 07:22:13.375" endtime="20170816 07:22:13.676"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL' or '${status}'=='True'</arg>
<arg>FFDC</arg>
</arguments>
<status status="PASS" starttime="20170816 07:22:13.676" endtime="20170816 07:22:13.677"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}'=='True'</arg>
<arg>Recover Quiesced Host</arg>
</arguments>
<status status="PASS" starttime="20170816 07:22:13.677" endtime="20170816 07:22:13.677"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Log Test Case Status">
<doc>Test case execution result history.</doc>
<kw library="BuiltIn" name="Get Variable Value">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH_STYLE}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH_STYLE}</var>
</assign>
<msg timestamp="20170816 07:22:13.690" level="INFO">${FFDC_DIR_PATH_STYLE} = </msg>
<status status="PASS" starttime="20170816 07:22:13.678" endtime="20170816 07:22:13.690"></status>
</kw>
<kw library="BuiltIn" name="Get Variable Value">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH}</var>
</assign>
<msg timestamp="20170816 07:22:13.705" level="INFO">${FFDC_DIR_PATH} = </msg>
<status status="PASS" starttime="20170816 07:22:13.690" endtime="20170816 07:22:13.705"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH}' == '${EMPTY}'</arg>
<arg>Set FFDC Defaults</arg>
</arguments>
<kw library="openbmc_ffdc" name="Set Ffdc Defaults">
<doc>Set a default value for ffdc_dir_path and ffdc_prefix if they don't</doc>
<kw library="openbmc_ffdc_utils" name="Get Current Time Stamp">
<doc>Get the current time stamp data</doc>
<kw library="DateTime" name="Get Current Date">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170816 07:22:13.707" level="INFO">${cur_time} = 2017-08-16 07:22:13:707097</msg>
<status status="PASS" starttime="20170816 07:22:13.707" endtime="20170816 07:22:13.707"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170816 07:22:13.708" level="INFO">${cur_time} = 20170816072213707097</msg>
<status status="PASS" starttime="20170816 07:22:13.708" endtime="20170816 07:22:13.708"></status>
</kw>
<status status="PASS" starttime="20170816 07:22:13.706" endtime="20170816 07:22:13.709"></status>
</kw>
<msg timestamp="20170816 07:22:13.715" level="INFO">${FFDC_TIME} = 20170816072213707097</msg>
<kw library="openbmc_ffdc_utils" name="Get Test Dir and Name">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20170816 07:22:13.717" level="INFO">${suite_name} = TestsSecurityTestSsl</msg>
<status status="PASS" starttime="20170816 07:22:13.716" endtime="20170816 07:22:13.717"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20170816 07:22:13.717" level="INFO">${suite_name} = 20170816072213707097_TestsSecurityTestSsl</msg>
<status status="PASS" starttime="20170816 07:22:13.717" endtime="20170816 07:22:13.717"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20170816 07:22:13.718" level="INFO">${test_name} = TestSSLConnection</msg>
<status status="PASS" starttime="20170816 07:22:13.718" endtime="20170816 07:22:13.718"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20170816 07:22:13.718" level="INFO">${test_name} = 20170816072213707097_TestSSLConnection</msg>
<status status="PASS" starttime="20170816 07:22:13.718" endtime="20170816 07:22:13.718"></status>
</kw>
<status status="PASS" starttime="20170816 07:22:13.716" endtime="20170816 07:22:13.719"></status>
</kw>
<msg timestamp="20170816 07:22:13.719" level="INFO">${FFDC_DIR_PATH} = /tmp/fspcibld/2147/obmc-robot/logs/20170816072213707097_TestsSecurityTestSsl/20170816072213707097_TestSSLConnection/</msg>
<msg timestamp="20170816 07:22:13.724" level="INFO">${FFDC_PREFIX} = 20170816072213707097_</msg>
<status status="PASS" starttime="20170816 07:22:13.706" endtime="20170816 07:22:13.724"></status>
</kw>
<status status="PASS" starttime="20170816 07:22:13.705" endtime="20170816 07:22:13.724"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH_STYLE}' == '${1}'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${FFDC_LOG_PATH}</arg>
<arg>${FFDC_DIR_PATH}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${TEST_HISTORY}</arg>
<arg>${FFDC_DIR_PATH}test_history.txt</arg>
</arguments>
<status status="PASS" starttime="20170816 07:22:13.724" endtime="20170816 07:22:13.725"></status>
</kw>
<kw library="OperatingSystem" name="Create Directory">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg html="yes" timestamp="20170816 07:22:13.726" level="INFO">Created directory '&lt;a href="file:///tmp/fspcibld/2147/obmc-robot/logs"&gt;/tmp/fspcibld/2147/obmc-robot/logs&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170816 07:22:13.725" endtime="20170816 07:22:13.726"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw library="OperatingSystem" name="File Should Exist">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg timestamp="20170816 07:22:13.727" level="FAIL">File '/tmp/fspcibld/2147/obmc-robot/logs/test_history.txt' does not exist.</msg>
<status status="FAIL" starttime="20170816 07:22:13.726" endtime="20170816 07:22:13.727"></status>
</kw>
<msg timestamp="20170816 07:22:13.727" level="INFO">${exist} = False</msg>
<status status="PASS" starttime="20170816 07:22:13.726" endtime="20170816 07:22:13.727"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<kw library="OperatingSystem" name="Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg html="yes" timestamp="20170816 07:22:13.728" level="INFO">Created file '&lt;a href="file:///tmp/fspcibld/2147/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/2147/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170816 07:22:13.728" endtime="20170816 07:22:13.728"></status>
</kw>
<status status="PASS" starttime="20170816 07:22:13.727" endtime="20170816 07:22:13.728"></status>
</kw>
<kw library="gen_robot_print" name="Rpvars">
<arguments>
<arg>TEST_HISTORY</arg>
</arguments>
<status status="PASS" starttime="20170816 07:22:13.728" endtime="20170816 07:22:13.729"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Get Current Time Stamp">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw library="DateTime" name="Get Current Date">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170816 07:22:13.730" level="INFO">${cur_time} = 2017-08-16 07:22:13:729560</msg>
<status status="PASS" starttime="20170816 07:22:13.729" endtime="20170816 07:22:13.730"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170816 07:22:13.730" level="INFO">${cur_time} = 20170816072213729560</msg>
<status status="PASS" starttime="20170816 07:22:13.730" endtime="20170816 07:22:13.730"></status>
</kw>
<msg timestamp="20170816 07:22:13.730" level="INFO">${cur_time} = 20170816072213729560</msg>
<status status="PASS" starttime="20170816 07:22:13.729" endtime="20170816 07:22:13.731"></status>
</kw>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg html="yes" timestamp="20170816 07:22:13.731" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/2147/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/2147/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170816 07:22:13.731" endtime="20170816 07:22:13.731"></status>
</kw>
<status status="PASS" starttime="20170816 07:22:13.677" endtime="20170816 07:22:13.731"></status>
</kw>
<status status="PASS" starttime="20170816 07:22:13.374" endtime="20170816 07:22:13.732"></status>
</kw>
<doc>This testcase is for testing the SSL connection to the
OpenBMC machine.</doc>
<tags>
<tag>Test_SSL_Connection</tag>
</tags>
<status status="PASS" starttime="20170816 07:22:13.173" critical="yes" endtime="20170816 07:22:13.732"></status>
</test>
<kw type="teardown" library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 07:22:13.732" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170816 07:22:13.732" endtime="20170816 07:22:13.732"></status>
</kw>
<doc>This testsuite is for testing SSL connection to OpenBMC</doc>
<status status="PASS" starttime="20170816 07:22:13.092" endtime="20170816 07:22:13.733"></status>
</suite>
<status status="PASS" starttime="20170816 07:22:13.090" endtime="20170816 07:22:13.734"></status>
</suite>
<suite source="/tmp/fspcibld/2147/obmc-robot/tests/test_basic_poweron.robot" id="s1-s2" name="Test Basic Poweron">
<test id="s1-s2-t1" name="Power On Test">
<kw type="setup" library="utils" name="Start SOL Console Logging">
<doc>Start system console log to file.</doc>
<kw library="utils" name="Create OS Console File Path">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg timestamp="20170816 07:22:13.770" level="INFO">${default_file_path} = /tmp/9.41.166.169_os_console</msg>
<status status="PASS" starttime="20170816 07:22:13.770" endtime="20170816 07:22:13.770"></status>
</kw>
<kw library="BuiltIn" name="Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg timestamp="20170816 07:22:13.771" level="INFO">${log_file_path} = /tmp/9.41.166.169_os_console</msg>
<status status="PASS" starttime="20170816 07:22:13.770" endtime="20170816 07:22:13.771"></status>
</kw>
<msg timestamp="20170816 07:22:13.771" level="INFO">${log_file_path} = /tmp/9.41.166.169_os_console</msg>
<status status="PASS" starttime="20170816 07:22:13.769" endtime="20170816 07:22:13.771"></status>
</kw>
<kw library="utils" name="Stop SOL Console Logging">
<doc>Stop system console logging and return log output.</doc>
<arguments>
<arg>${log_file_path}</arg>
<arg>return_data=${return_data}</arg>
</arguments>
<assign>
<var>${log_output}</var>
</assign>
<kw library="utils" name="Create OS Console File Path">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg timestamp="20170816 07:22:13.773" level="INFO">${default_file_path} = /tmp/9.41.166.169_os_console</msg>
<status status="PASS" starttime="20170816 07:22:13.772" endtime="20170816 07:22:13.773"></status>
</kw>
<kw library="BuiltIn" name="Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg timestamp="20170816 07:22:13.774" level="INFO">${log_file_path} = /tmp/9.41.166.169_os_console</msg>
<status status="PASS" starttime="20170816 07:22:13.773" endtime="20170816 07:22:13.774"></status>
</kw>
<msg timestamp="20170816 07:22:13.774" level="INFO">${log_file_path} = /tmp/9.41.166.169_os_console</msg>
<status status="PASS" starttime="20170816 07:22:13.772" endtime="20170816 07:22:13.774"></status>
</kw>
<kw library="utils" name="Create OS Console Command String">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${search_string}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170816 07:22:13.775" level="INFO">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status status="PASS" starttime="20170816 07:22:13.775" endtime="20170816 07:22:13.775"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" starttime="20170816 07:22:13.775" endtime="20170816 07:22:13.775"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170816 07:22:13.779" level="INFO">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg timestamp="20170816 07:22:13.782" level="INFO">${rc} = 0</msg>
<msg timestamp="20170816 07:22:13.782" level="INFO">${output} = /tmp/fspcibld/2147/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status status="PASS" starttime="20170816 07:22:13.776" endtime="20170816 07:22:13.783"></status>
</kw>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status status="PASS" starttime="20170816 07:22:13.784" endtime="20170816 07:22:13.785"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${output}\n</arg>
</arguments>
<status status="PASS" starttime="20170816 07:22:13.785" endtime="20170816 07:22:13.786"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>ssh_pw ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>-o "StrictHostKeyChecking no" ${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170816 07:22:13.787" level="INFO">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.41.166.169</msg>
<status status="PASS" starttime="20170816 07:22:13.786" endtime="20170816 07:22:13.787"></status>
</kw>
<msg timestamp="20170816 07:22:13.787" level="INFO">${search_string} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.41.166.169</msg>
<status status="PASS" starttime="20170816 07:22:13.774" endtime="20170816 07:22:13.787"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>echo $(ps -ef | egrep '${search_string}'</arg>
<arg>| egrep -v grep | cut -c10-14)</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170816 07:22:13.788" level="INFO">${cmd_buf} = echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.41.166.169' | egrep -v grep | cut -c10-14)</msg>
<status status="PASS" starttime="20170816 07:22:13.787" endtime="20170816 07:22:13.788"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" starttime="20170816 07:22:13.788" endtime="20170816 07:22:13.789"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${os_con_pid}</var>
</assign>
<msg timestamp="20170816 07:22:13.791" level="INFO">Running command 'echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.41.166.169' | egrep -v grep | cut -c10-14) 2&gt;&amp;1'.</msg>
<msg timestamp="20170816 07:22:13.803" level="INFO">${rc} = 0</msg>
<msg timestamp="20170816 07:22:13.803" level="INFO">${os_con_pid} = </msg>
<status status="PASS" starttime="20170816 07:22:13.789" endtime="20170816 07:22:13.803"></status>
</kw>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>os_con_pid</arg>
</arguments>
<status status="PASS" starttime="20170816 07:22:13.805" endtime="20170816 07:22:13.805"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>kill -9 ${os_con_pid}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170816 07:22:13.806" level="INFO">${cmd_buf} = kill -9 </msg>
<status status="PASS" starttime="20170816 07:22:13.806" endtime="20170816 07:22:13.806"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpissuing</arg>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" starttime="20170816 07:22:13.807" endtime="20170816 07:22:13.807"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Run And Return Rc And Output</arg>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170816 07:22:13.808" level="INFO">${rc} = None</msg>
<msg timestamp="20170816 07:22:13.808" level="INFO">${output} = None</msg>
<status status="PASS" starttime="20170816 07:22:13.808" endtime="20170816 07:22:13.808"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpvars</arg>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status status="PASS" starttime="20170816 07:22:13.809" endtime="20170816 07:22:13.809"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${targ_file_path}' != '${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw library="OperatingSystem" name="Copy File">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<msg timestamp="20170816 07:22:13.812" level="FAIL">Source file '/tmp/9.41.166.169_os_console' does not exist.</msg>
<status status="FAIL" starttime="20170816 07:22:13.810" endtime="20170816 07:22:13.812"></status>
</kw>
<status status="PASS" starttime="20170816 07:22:13.810" endtime="20170816 07:22:13.812"></status>
</kw>
<status status="PASS" starttime="20170816 07:22:13.809" endtime="20170816 07:22:13.812"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20170816 07:22:13.813" level="INFO">${output} = </msg>
<status status="PASS" starttime="20170816 07:22:13.813" endtime="20170816 07:22:13.813"></status>
</kw>
<kw library="BuiltIn" name="Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${debug}^1</arg>
</arguments>
<assign>
<var>${loc_quiet}</var>
</assign>
<msg timestamp="20170816 07:22:13.814" level="INFO">${loc_quiet} = 1</msg>
<status status="PASS" starttime="20170816 07:22:13.813" endtime="20170816 07:22:13.814"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return_data}' == '${1}'</arg>
<arg>Cmd Fnc</arg>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<kw library="gen_cmd" name="Cmd Fnc">
<doc>Run the given command in a shell and return the shell return code.</doc>
<arguments>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<status status="PASS" starttime="20170816 07:22:13.815" endtime="20170816 07:22:13.855"></status>
</kw>
<msg timestamp="20170816 07:22:13.856" level="INFO">${rc} = 1</msg>
<msg timestamp="20170816 07:22:13.856" level="INFO">${output} = cat: /tmp/9.41.166.169_os_console: No such file or directory
</msg>
<status status="PASS" starttime="20170816 07:22:13.814" endtime="20170816 07:22:13.856"></status>
</kw>
<msg timestamp="20170816 07:22:13.857" level="INFO">${log_output} = cat: /tmp/9.41.166.169_os_console: No such file or directory
</msg>
<status status="PASS" starttime="20170816 07:22:13.771" endtime="20170816 07:22:13.857"></status>
</kw>
<kw library="OperatingSystem" name="Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<msg html="yes" timestamp="20170816 07:22:13.859" level="INFO">Created file '&lt;a href="file:///tmp/9.41.166.169_os_console"&gt;/tmp/9.41.166.169_os_console&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170816 07:22:13.858" endtime="20170816 07:22:13.859"></status>
</kw>
<kw library="utils" name="Create OS Console Command String">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${sub_cmd_buf}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170816 07:22:13.860" level="INFO">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status status="PASS" starttime="20170816 07:22:13.859" endtime="20170816 07:22:13.860"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" starttime="20170816 07:22:13.860" endtime="20170816 07:22:13.860"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170816 07:22:13.866" level="INFO">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg timestamp="20170816 07:22:13.870" level="INFO">${rc} = 0</msg>
<msg timestamp="20170816 07:22:13.870" level="INFO">${output} = /tmp/fspcibld/2147/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status status="PASS" starttime="20170816 07:22:13.861" endtime="20170816 07:22:13.870"></status>
</kw>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status status="PASS" starttime="20170816 07:22:13.872" endtime="20170816 07:22:13.873"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${output}\n</arg>
</arguments>
<status status="PASS" starttime="20170816 07:22:13.873" endtime="20170816 07:22:13.874"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>ssh_pw ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>-o "StrictHostKeyChecking no" ${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170816 07:22:13.874" level="INFO">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.41.166.169</msg>
<status status="PASS" starttime="20170816 07:22:13.874" endtime="20170816 07:22:13.875"></status>
</kw>
<msg timestamp="20170816 07:22:13.875" level="INFO">${sub_cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.41.166.169</msg>
<status status="PASS" starttime="20170816 07:22:13.859" endtime="20170816 07:22:13.875"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${sub_cmd_buf} &gt; ${log_file_path} 2&gt;&amp;1 &amp;</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170816 07:22:13.876" level="INFO">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.41.166.169 &gt; /tmp/9.41.166.169_os_console 2&gt;&amp;1 &amp;</msg>
<status status="PASS" starttime="20170816 07:22:13.875" endtime="20170816 07:22:13.876"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" starttime="20170816 07:22:13.876" endtime="20170816 07:22:13.876"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170816 07:22:13.879" level="INFO">Running command 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.41.166.169 &gt; /tmp/9.41.166.169_os_console 2&gt;&amp;1 &amp;'.</msg>
<msg timestamp="20170816 07:22:13.885" level="INFO">${rc} = 0</msg>
<msg timestamp="20170816 07:22:13.885" level="INFO">${output} = </msg>
<status status="PASS" starttime="20170816 07:22:13.876" endtime="20170816 07:22:13.885"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" starttime="20170816 07:22:13.887" endtime="20170816 07:22:13.889"></status>
</kw>
<status status="PASS" starttime="20170816 07:22:13.769" endtime="20170816 07:22:13.889"></status>
</kw>
<kw library="BuiltIn" name="Repeat Keyword">
<doc>Executes the specified keyword multiple times.</doc>
<arguments>
<arg>${LOOP_COUNT} times</arg>
<arg>Host Off And On</arg>
</arguments>
<msg timestamp="20170816 07:22:13.890" level="INFO">Repeating keyword, round 1/2.</msg>
<kw name="Host Off And On">
<doc>Verify power off and on.</doc>
<kw library="state_manager" name="Initiate Host PowerOff">
<doc>Initiate host power off.</doc>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${HOST_POWEROFF_TRANS}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20170816 07:22:13.895" level="INFO">${args} = {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}</msg>
<status status="PASS" starttime="20170816 07:22:13.893" endtime="20170816 07:22:13.895"></status>
</kw>
<kw library="rest_client" name="Write Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>RequestedHostTransition</arg>
<arg>data=${args}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 07:22:13.896" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0/</msg>
<status status="PASS" starttime="20170816 07:22:13.896" endtime="20170816 07:22:13.896"></status>
</kw>
<kw library="rest_client" name="OpenBMC Put Request">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 07:22:13.901" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170816 07:22:13.900" endtime="20170816 07:22:13.902"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 07:22:13.902" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170816 07:22:13.902" endtime="20170816 07:22:13.902"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 07:22:13.903" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170816 07:22:13.902" endtime="20170816 07:22:13.903"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 07:22:13.904" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170816 07:22:13.903" endtime="20170816 07:22:13.904"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 07:22:14.553" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170816 07:22:13.904" endtime="20170816 07:22:14.553"></status>
</kw>
<msg timestamp="20170816 07:22:14.553" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 07:22:14.553" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:22:13.904" endtime="20170816 07:22:14.553"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 07:22:14.554" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:22:14.554" endtime="20170816 07:22:14.554"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:22:14.555" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:22:14.554" endtime="20170816 07:22:14.555"></status>
</kw>
<status status="PASS" starttime="20170816 07:22:13.899" endtime="20170816 07:22:14.555"></status>
</kw>
<status status="PASS" starttime="20170816 07:22:13.899" endtime="20170816 07:22:14.555"></status>
</kw>
<status status="PASS" starttime="20170816 07:22:13.897" endtime="20170816 07:22:14.555"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 07:22:14.556" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/RequestedHostTransition</msg>
<status status="PASS" starttime="20170816 07:22:14.555" endtime="20170816 07:22:14.556"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 07:22:14.556" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170816 07:22:14.556" endtime="20170816 07:22:14.556"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" starttime="20170816 07:22:14.556" endtime="20170816 07:22:14.557"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:22:14.558" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Conten...</msg>
<status status="PASS" starttime="20170816 07:22:14.558" endtime="20170816 07:22:14.558"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:22:14.559" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20170816 07:22:14.559" endtime="20170816 07:22:14.559"></status>
</kw>
<status status="PASS" starttime="20170816 07:22:14.559" endtime="20170816 07:22:14.560"></status>
</kw>
<status status="PASS" starttime="20170816 07:22:14.557" endtime="20170816 07:22:14.560"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Put Request">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 07:22:15.101" level="INFO">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, data={"data": "xyz.openbmc_project.State.Host.Transition.Off"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg timestamp="20170816 07:22:15.101" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:22:14.560" endtime="20170816 07:22:15.101"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:22:15.103" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:22:15.102" endtime="20170816 07:22:15.103"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:22:15.104" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:22:15.103" endtime="20170816 07:22:15.104"></status>
</kw>
<status status="PASS" starttime="20170816 07:22:15.103" endtime="20170816 07:22:15.104"></status>
</kw>
<status status="PASS" starttime="20170816 07:22:15.101" endtime="20170816 07:22:15.104"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 07:22:15.104" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170816 07:22:15.104" endtime="20170816 07:22:15.105"></status>
</kw>
<msg timestamp="20170816 07:22:15.105" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:22:13.897" endtime="20170816 07:22:15.105"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:22:15.105" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:22:15.105" endtime="20170816 07:22:15.105"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20170816 07:22:15.106" level="INFO">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 07:22:15.106" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 07:22:15.106" level="INFO">${json} = {u'data': None, u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170816 07:22:15.106" endtime="20170816 07:22:15.106"></status>
</kw>
<status status="PASS" starttime="20170816 07:22:13.895" endtime="20170816 07:22:15.106"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${wait}' == '${0}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<status status="PASS" starttime="20170816 07:22:15.107" endtime="20170816 07:22:15.107"></status>
</kw>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>6 min</arg>
<arg>10 sec</arg>
<arg>Is Host Off</arg>
</arguments>
<kw library="state_manager" name="Is Host Off">
<doc>Check if host state is "Off".</doc>
<kw library="state_manager" name="Is Chassis Off">
<doc>Check if chassis state is "Off".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 07:22:15.111" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170816 07:22:15.111" endtime="20170816 07:22:15.112"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 07:22:15.112" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170816 07:22:15.112" endtime="20170816 07:22:15.112"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 07:22:15.113" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170816 07:22:15.113" endtime="20170816 07:22:15.113"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 07:22:15.114" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170816 07:22:15.113" endtime="20170816 07:22:15.114"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 07:22:16.543" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170816 07:22:15.115" endtime="20170816 07:22:16.543"></status>
</kw>
<msg timestamp="20170816 07:22:16.543" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 07:22:16.543" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:22:15.114" endtime="20170816 07:22:16.543"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 07:22:16.544" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:22:16.544" endtime="20170816 07:22:16.544"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:22:16.545" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:22:16.544" endtime="20170816 07:22:16.545"></status>
</kw>
<status status="PASS" starttime="20170816 07:22:15.111" endtime="20170816 07:22:16.545"></status>
</kw>
<status status="PASS" starttime="20170816 07:22:15.110" endtime="20170816 07:22:16.545"></status>
</kw>
<status status="PASS" starttime="20170816 07:22:15.110" endtime="20170816 07:22:16.545"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 07:22:16.546" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20170816 07:22:16.545" endtime="20170816 07:22:16.546"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:22:16.548" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:22:16.547" endtime="20170816 07:22:16.548"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:22:16.549" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:22:16.549" endtime="20170816 07:22:16.549"></status>
</kw>
<status status="PASS" starttime="20170816 07:22:16.548" endtime="20170816 07:22:16.549"></status>
</kw>
<status status="PASS" starttime="20170816 07:22:16.547" endtime="20170816 07:22:16.549"></status>
</kw>
<status status="PASS" starttime="20170816 07:22:16.546" endtime="20170816 07:22:16.549"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 07:22:21.530" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170816 07:22:21.530" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:22:16.549" endtime="20170816 07:22:21.530"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:22:21.532" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:22:21.532" endtime="20170816 07:22:21.532"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:22:21.533" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:22:21.533" endtime="20170816 07:22:21.533"></status>
</kw>
<status status="PASS" starttime="20170816 07:22:21.532" endtime="20170816 07:22:21.533"></status>
</kw>
<status status="PASS" starttime="20170816 07:22:21.531" endtime="20170816 07:22:21.534"></status>
</kw>
<status status="PASS" starttime="20170816 07:22:21.530" endtime="20170816 07:22:21.534"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 07:22:21.534" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170816 07:22:21.534" endtime="20170816 07:22:21.534"></status>
</kw>
<msg timestamp="20170816 07:22:21.534" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:22:15.109" endtime="20170816 07:22:21.534"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:22:21.535" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:22:21.535" endtime="20170816 07:22:21.535"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 07:22:21.536" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 07:22:21.536" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 07:22:21.536" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170816 07:22:21.535" endtime="20170816 07:22:21.536"></status>
</kw>
<msg timestamp="20170816 07:22:21.536" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" starttime="20170816 07:22:15.109" endtime="20170816 07:22:21.537"></status>
</kw>
<msg timestamp="20170816 07:22:21.537" level="INFO">${power_state} = Off</msg>
<status status="PASS" starttime="20170816 07:22:15.108" endtime="20170816 07:22:21.537"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" starttime="20170816 07:22:21.537" endtime="20170816 07:22:21.538"></status>
</kw>
<status status="PASS" starttime="20170816 07:22:15.108" endtime="20170816 07:22:21.538"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 07:22:21.542" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170816 07:22:21.542" endtime="20170816 07:22:21.542"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 07:22:21.543" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170816 07:22:21.543" endtime="20170816 07:22:21.543"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 07:22:21.544" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170816 07:22:21.543" endtime="20170816 07:22:21.544"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 07:22:21.544" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170816 07:22:21.544" endtime="20170816 07:22:21.544"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 07:22:21.971" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170816 07:22:21.545" endtime="20170816 07:22:21.971"></status>
</kw>
<msg timestamp="20170816 07:22:21.971" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 07:22:21.971" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:22:21.545" endtime="20170816 07:22:21.971"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 07:22:21.972" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:22:21.972" endtime="20170816 07:22:21.972"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:22:21.973" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:22:21.972" endtime="20170816 07:22:21.973"></status>
</kw>
<status status="PASS" starttime="20170816 07:22:21.541" endtime="20170816 07:22:21.973"></status>
</kw>
<status status="PASS" starttime="20170816 07:22:21.540" endtime="20170816 07:22:21.973"></status>
</kw>
<status status="PASS" starttime="20170816 07:22:21.540" endtime="20170816 07:22:21.973"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 07:22:21.974" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" starttime="20170816 07:22:21.973" endtime="20170816 07:22:21.974"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:22:21.976" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:22:21.975" endtime="20170816 07:22:21.976"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:22:21.977" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:22:21.977" endtime="20170816 07:22:21.977"></status>
</kw>
<status status="PASS" starttime="20170816 07:22:21.976" endtime="20170816 07:22:21.977"></status>
</kw>
<status status="PASS" starttime="20170816 07:22:21.975" endtime="20170816 07:22:21.977"></status>
</kw>
<status status="PASS" starttime="20170816 07:22:21.974" endtime="20170816 07:22:21.977"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 07:22:22.444" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170816 07:22:22.444" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:22:21.977" endtime="20170816 07:22:22.444"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:22:22.446" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:22:22.446" endtime="20170816 07:22:22.446"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:22:22.447" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:22:22.447" endtime="20170816 07:22:22.447"></status>
</kw>
<status status="PASS" starttime="20170816 07:22:22.446" endtime="20170816 07:22:22.448"></status>
</kw>
<status status="PASS" starttime="20170816 07:22:22.445" endtime="20170816 07:22:22.448"></status>
</kw>
<status status="PASS" starttime="20170816 07:22:22.445" endtime="20170816 07:22:22.448"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 07:22:22.448" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170816 07:22:22.448" endtime="20170816 07:22:22.448"></status>
</kw>
<msg timestamp="20170816 07:22:22.448" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:22:21.539" endtime="20170816 07:22:22.448"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:22:22.449" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:22:22.449" endtime="20170816 07:22:22.449"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 07:22:22.450" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 07:22:22.450" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 07:22:22.450" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170816 07:22:22.449" endtime="20170816 07:22:22.450"></status>
</kw>
<msg timestamp="20170816 07:22:22.450" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status status="PASS" starttime="20170816 07:22:21.539" endtime="20170816 07:22:22.450"></status>
</kw>
<msg timestamp="20170816 07:22:22.450" level="INFO">${host_state} = Off</msg>
<status status="PASS" starttime="20170816 07:22:21.538" endtime="20170816 07:22:22.450"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<status status="PASS" starttime="20170816 07:22:22.451" endtime="20170816 07:22:22.451"></status>
</kw>
<status status="PASS" starttime="20170816 07:22:15.108" endtime="20170816 07:22:22.451"></status>
</kw>
<status status="PASS" starttime="20170816 07:22:15.107" endtime="20170816 07:22:22.451"></status>
</kw>
<status status="PASS" starttime="20170816 07:22:13.892" endtime="20170816 07:22:22.451"></status>
</kw>
<kw library="state_manager" name="Initiate Host Boot">
<doc>Initiate host power on.</doc>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${HOST_POWERON_TRANS}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20170816 07:22:22.452" level="INFO">${args} = {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}</msg>
<status status="PASS" starttime="20170816 07:22:22.452" endtime="20170816 07:22:22.452"></status>
</kw>
<kw library="rest_client" name="Write Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>RequestedHostTransition</arg>
<arg>data=${args}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 07:22:22.453" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0/</msg>
<status status="PASS" starttime="20170816 07:22:22.453" endtime="20170816 07:22:22.453"></status>
</kw>
<kw library="rest_client" name="OpenBMC Put Request">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 07:22:22.456" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170816 07:22:22.456" endtime="20170816 07:22:22.456"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 07:22:22.457" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170816 07:22:22.457" endtime="20170816 07:22:22.457"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 07:22:22.458" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170816 07:22:22.457" endtime="20170816 07:22:22.458"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 07:22:22.458" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170816 07:22:22.458" endtime="20170816 07:22:22.458"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 07:22:22.804" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170816 07:22:22.459" endtime="20170816 07:22:22.805"></status>
</kw>
<msg timestamp="20170816 07:22:22.805" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 07:22:22.805" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:22:22.459" endtime="20170816 07:22:22.805"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 07:22:22.805" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:22:22.805" endtime="20170816 07:22:22.805"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:22:22.806" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:22:22.806" endtime="20170816 07:22:22.806"></status>
</kw>
<status status="PASS" starttime="20170816 07:22:22.455" endtime="20170816 07:22:22.806"></status>
</kw>
<status status="PASS" starttime="20170816 07:22:22.455" endtime="20170816 07:22:22.806"></status>
</kw>
<status status="PASS" starttime="20170816 07:22:22.454" endtime="20170816 07:22:22.807"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 07:22:22.807" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/RequestedHostTransition</msg>
<status status="PASS" starttime="20170816 07:22:22.807" endtime="20170816 07:22:22.808"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 07:22:22.808" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170816 07:22:22.808" endtime="20170816 07:22:22.809"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" starttime="20170816 07:22:22.809" endtime="20170816 07:22:22.810"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:22:22.812" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}, u'headers': {u'Content...</msg>
<status status="PASS" starttime="20170816 07:22:22.811" endtime="20170816 07:22:22.812"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:22:22.813" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20170816 07:22:22.813" endtime="20170816 07:22:22.813"></status>
</kw>
<status status="PASS" starttime="20170816 07:22:22.812" endtime="20170816 07:22:22.814"></status>
</kw>
<status status="PASS" starttime="20170816 07:22:22.810" endtime="20170816 07:22:22.814"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Put Request">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 07:22:23.473" level="INFO">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, data={"data": "xyz.openbmc_project.State.Host.Transition.On"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg timestamp="20170816 07:22:23.473" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:22:22.814" endtime="20170816 07:22:23.473"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:22:23.475" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:22:23.474" endtime="20170816 07:22:23.475"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:22:23.475" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:22:23.475" endtime="20170816 07:22:23.476"></status>
</kw>
<status status="PASS" starttime="20170816 07:22:23.475" endtime="20170816 07:22:23.476"></status>
</kw>
<status status="PASS" starttime="20170816 07:22:23.473" endtime="20170816 07:22:23.476"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 07:22:23.476" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170816 07:22:23.476" endtime="20170816 07:22:23.476"></status>
</kw>
<msg timestamp="20170816 07:22:23.476" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:22:22.454" endtime="20170816 07:22:23.476"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:22:23.477" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:22:23.477" endtime="20170816 07:22:23.477"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20170816 07:22:23.478" level="INFO">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 07:22:23.478" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 07:22:23.478" level="INFO">${json} = {u'data': None, u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170816 07:22:23.478" endtime="20170816 07:22:23.478"></status>
</kw>
<status status="PASS" starttime="20170816 07:22:22.452" endtime="20170816 07:22:23.478"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${wait}' == '${0}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<status status="PASS" starttime="20170816 07:22:23.479" endtime="20170816 07:22:23.479"></status>
</kw>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>10 min</arg>
<arg>10 sec</arg>
<arg>Is Host Running</arg>
</arguments>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 07:22:23.484" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170816 07:22:23.483" endtime="20170816 07:22:23.484"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 07:22:23.485" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170816 07:22:23.484" endtime="20170816 07:22:23.485"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 07:22:23.485" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170816 07:22:23.485" endtime="20170816 07:22:23.485"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 07:22:23.486" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170816 07:22:23.486" endtime="20170816 07:22:23.486"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 07:22:23.829" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170816 07:22:23.487" endtime="20170816 07:22:23.829"></status>
</kw>
<msg timestamp="20170816 07:22:23.829" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 07:22:23.829" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:22:23.486" endtime="20170816 07:22:23.829"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 07:22:23.830" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:22:23.830" endtime="20170816 07:22:23.830"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:22:23.831" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:22:23.830" endtime="20170816 07:22:23.831"></status>
</kw>
<status status="PASS" starttime="20170816 07:22:23.483" endtime="20170816 07:22:23.831"></status>
</kw>
<status status="PASS" starttime="20170816 07:22:23.482" endtime="20170816 07:22:23.831"></status>
</kw>
<status status="PASS" starttime="20170816 07:22:23.482" endtime="20170816 07:22:23.831"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 07:22:23.831" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20170816 07:22:23.831" endtime="20170816 07:22:23.832"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:22:23.834" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:22:23.833" endtime="20170816 07:22:23.834"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:22:23.835" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:22:23.834" endtime="20170816 07:22:23.835"></status>
</kw>
<status status="PASS" starttime="20170816 07:22:23.834" endtime="20170816 07:22:23.835"></status>
</kw>
<status status="PASS" starttime="20170816 07:22:23.832" endtime="20170816 07:22:23.835"></status>
</kw>
<status status="PASS" starttime="20170816 07:22:23.832" endtime="20170816 07:22:23.835"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 07:22:25.857" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170816 07:22:25.857" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:22:23.835" endtime="20170816 07:22:25.857"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:22:25.859" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:22:25.859" endtime="20170816 07:22:25.859"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:22:25.860" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:22:25.860" endtime="20170816 07:22:25.860"></status>
</kw>
<status status="PASS" starttime="20170816 07:22:25.859" endtime="20170816 07:22:25.860"></status>
</kw>
<status status="PASS" starttime="20170816 07:22:25.858" endtime="20170816 07:22:25.860"></status>
</kw>
<status status="PASS" starttime="20170816 07:22:25.858" endtime="20170816 07:22:25.860"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 07:22:25.861" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170816 07:22:25.861" endtime="20170816 07:22:25.861"></status>
</kw>
<msg timestamp="20170816 07:22:25.861" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:22:23.481" endtime="20170816 07:22:25.861"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:22:25.862" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:22:25.861" endtime="20170816 07:22:25.862"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 07:22:25.862" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 07:22:25.862" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 07:22:25.862" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170816 07:22:25.862" endtime="20170816 07:22:25.863"></status>
</kw>
<msg timestamp="20170816 07:22:25.863" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" starttime="20170816 07:22:23.481" endtime="20170816 07:22:25.863"></status>
</kw>
<msg timestamp="20170816 07:22:25.863" level="INFO">${power_state} = Off</msg>
<status status="PASS" starttime="20170816 07:22:23.480" endtime="20170816 07:22:25.863"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20170816 07:22:25.864" level="FAIL">On != Off</msg>
<status status="FAIL" starttime="20170816 07:22:25.863" endtime="20170816 07:22:25.864"></status>
</kw>
<status status="FAIL" starttime="20170816 07:22:23.480" endtime="20170816 07:22:25.864"></status>
</kw>
<status status="FAIL" starttime="20170816 07:22:23.480" endtime="20170816 07:22:25.864"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 07:22:35.870" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170816 07:22:35.869" endtime="20170816 07:22:35.870"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 07:22:35.871" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170816 07:22:35.870" endtime="20170816 07:22:35.871"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 07:22:35.871" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170816 07:22:35.871" endtime="20170816 07:22:35.871"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 07:22:35.872" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170816 07:22:35.871" endtime="20170816 07:22:35.872"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 07:22:36.601" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170816 07:22:35.873" endtime="20170816 07:22:36.601"></status>
</kw>
<msg timestamp="20170816 07:22:36.601" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 07:22:36.601" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:22:35.872" endtime="20170816 07:22:36.601"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 07:22:36.601" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:22:36.601" endtime="20170816 07:22:36.602"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:22:36.602" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:22:36.602" endtime="20170816 07:22:36.602"></status>
</kw>
<status status="PASS" starttime="20170816 07:22:35.869" endtime="20170816 07:22:36.602"></status>
</kw>
<status status="PASS" starttime="20170816 07:22:35.868" endtime="20170816 07:22:36.602"></status>
</kw>
<status status="PASS" starttime="20170816 07:22:35.868" endtime="20170816 07:22:36.603"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 07:22:36.603" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20170816 07:22:36.603" endtime="20170816 07:22:36.603"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:22:36.606" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:22:36.605" endtime="20170816 07:22:36.606"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:22:36.606" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:22:36.606" endtime="20170816 07:22:36.607"></status>
</kw>
<status status="PASS" starttime="20170816 07:22:36.606" endtime="20170816 07:22:36.607"></status>
</kw>
<status status="PASS" starttime="20170816 07:22:36.604" endtime="20170816 07:22:36.607"></status>
</kw>
<status status="PASS" starttime="20170816 07:22:36.603" endtime="20170816 07:22:36.607"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 07:22:36.695" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170816 07:22:36.695" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:22:36.607" endtime="20170816 07:22:36.695"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:22:36.697" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:22:36.696" endtime="20170816 07:22:36.697"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:22:36.698" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:22:36.697" endtime="20170816 07:22:36.698"></status>
</kw>
<status status="PASS" starttime="20170816 07:22:36.697" endtime="20170816 07:22:36.698"></status>
</kw>
<status status="PASS" starttime="20170816 07:22:36.696" endtime="20170816 07:22:36.698"></status>
</kw>
<status status="PASS" starttime="20170816 07:22:36.695" endtime="20170816 07:22:36.698"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 07:22:36.698" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170816 07:22:36.698" endtime="20170816 07:22:36.699"></status>
</kw>
<msg timestamp="20170816 07:22:36.699" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:22:35.867" endtime="20170816 07:22:36.699"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:22:36.699" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:22:36.699" endtime="20170816 07:22:36.699"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 07:22:36.700" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 07:22:36.700" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 07:22:36.700" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170816 07:22:36.700" endtime="20170816 07:22:36.700"></status>
</kw>
<msg timestamp="20170816 07:22:36.700" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" starttime="20170816 07:22:35.866" endtime="20170816 07:22:36.700"></status>
</kw>
<msg timestamp="20170816 07:22:36.701" level="INFO">${power_state} = Off</msg>
<status status="PASS" starttime="20170816 07:22:35.866" endtime="20170816 07:22:36.701"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20170816 07:22:36.701" level="FAIL">On != Off</msg>
<status status="FAIL" starttime="20170816 07:22:36.701" endtime="20170816 07:22:36.701"></status>
</kw>
<status status="FAIL" starttime="20170816 07:22:35.865" endtime="20170816 07:22:36.702"></status>
</kw>
<status status="FAIL" starttime="20170816 07:22:35.865" endtime="20170816 07:22:36.702"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 07:22:46.707" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170816 07:22:46.706" endtime="20170816 07:22:46.707"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 07:22:46.708" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170816 07:22:46.708" endtime="20170816 07:22:46.708"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 07:22:46.709" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170816 07:22:46.708" endtime="20170816 07:22:46.709"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 07:22:46.709" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170816 07:22:46.709" endtime="20170816 07:22:46.709"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 07:22:46.894" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170816 07:22:46.710" endtime="20170816 07:22:46.895"></status>
</kw>
<msg timestamp="20170816 07:22:46.895" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 07:22:46.895" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:22:46.710" endtime="20170816 07:22:46.895"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 07:22:46.895" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:22:46.895" endtime="20170816 07:22:46.896"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:22:46.896" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:22:46.896" endtime="20170816 07:22:46.896"></status>
</kw>
<status status="PASS" starttime="20170816 07:22:46.706" endtime="20170816 07:22:46.896"></status>
</kw>
<status status="PASS" starttime="20170816 07:22:46.705" endtime="20170816 07:22:46.897"></status>
</kw>
<status status="PASS" starttime="20170816 07:22:46.705" endtime="20170816 07:22:46.897"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 07:22:46.897" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20170816 07:22:46.897" endtime="20170816 07:22:46.897"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:22:46.899" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:22:46.899" endtime="20170816 07:22:46.899"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:22:46.900" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:22:46.900" endtime="20170816 07:22:46.900"></status>
</kw>
<status status="PASS" starttime="20170816 07:22:46.899" endtime="20170816 07:22:46.900"></status>
</kw>
<status status="PASS" starttime="20170816 07:22:46.898" endtime="20170816 07:22:46.901"></status>
</kw>
<status status="PASS" starttime="20170816 07:22:46.898" endtime="20170816 07:22:46.901"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 07:22:46.974" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170816 07:22:46.974" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:22:46.901" endtime="20170816 07:22:46.974"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:22:46.976" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:22:46.975" endtime="20170816 07:22:46.976"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:22:46.976" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:22:46.976" endtime="20170816 07:22:46.977"></status>
</kw>
<status status="PASS" starttime="20170816 07:22:46.976" endtime="20170816 07:22:46.977"></status>
</kw>
<status status="PASS" starttime="20170816 07:22:46.975" endtime="20170816 07:22:46.977"></status>
</kw>
<status status="PASS" starttime="20170816 07:22:46.974" endtime="20170816 07:22:46.977"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 07:22:46.977" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170816 07:22:46.977" endtime="20170816 07:22:46.977"></status>
</kw>
<msg timestamp="20170816 07:22:46.978" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:22:46.704" endtime="20170816 07:22:46.978"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:22:46.978" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:22:46.978" endtime="20170816 07:22:46.978"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 07:22:46.979" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 07:22:46.979" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 07:22:46.979" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170816 07:22:46.978" endtime="20170816 07:22:46.979"></status>
</kw>
<msg timestamp="20170816 07:22:46.979" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" starttime="20170816 07:22:46.704" endtime="20170816 07:22:46.979"></status>
</kw>
<msg timestamp="20170816 07:22:46.980" level="INFO">${power_state} = On</msg>
<status status="PASS" starttime="20170816 07:22:46.703" endtime="20170816 07:22:46.980"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" starttime="20170816 07:22:46.980" endtime="20170816 07:22:46.980"></status>
</kw>
<status status="PASS" starttime="20170816 07:22:46.703" endtime="20170816 07:22:46.980"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 07:22:46.986" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170816 07:22:46.986" endtime="20170816 07:22:46.987"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 07:22:46.987" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170816 07:22:46.987" endtime="20170816 07:22:46.987"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 07:22:46.988" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170816 07:22:46.988" endtime="20170816 07:22:46.988"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 07:22:46.989" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170816 07:22:46.988" endtime="20170816 07:22:46.989"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 07:22:47.204" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170816 07:22:46.989" endtime="20170816 07:22:47.204"></status>
</kw>
<msg timestamp="20170816 07:22:47.204" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 07:22:47.204" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:22:46.989" endtime="20170816 07:22:47.204"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 07:22:47.205" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:22:47.205" endtime="20170816 07:22:47.205"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:22:47.206" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:22:47.205" endtime="20170816 07:22:47.206"></status>
</kw>
<status status="PASS" starttime="20170816 07:22:46.985" endtime="20170816 07:22:47.206"></status>
</kw>
<status status="PASS" starttime="20170816 07:22:46.985" endtime="20170816 07:22:47.206"></status>
</kw>
<status status="PASS" starttime="20170816 07:22:46.982" endtime="20170816 07:22:47.206"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 07:22:47.207" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" starttime="20170816 07:22:47.206" endtime="20170816 07:22:47.207"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:22:47.209" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:22:47.208" endtime="20170816 07:22:47.209"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:22:47.210" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:22:47.209" endtime="20170816 07:22:47.210"></status>
</kw>
<status status="PASS" starttime="20170816 07:22:47.209" endtime="20170816 07:22:47.210"></status>
</kw>
<status status="PASS" starttime="20170816 07:22:47.207" endtime="20170816 07:22:47.210"></status>
</kw>
<status status="PASS" starttime="20170816 07:22:47.207" endtime="20170816 07:22:47.210"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 07:22:47.302" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170816 07:22:47.302" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:22:47.210" endtime="20170816 07:22:47.302"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:22:47.304" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:22:47.304" endtime="20170816 07:22:47.304"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:22:47.305" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:22:47.305" endtime="20170816 07:22:47.305"></status>
</kw>
<status status="PASS" starttime="20170816 07:22:47.304" endtime="20170816 07:22:47.305"></status>
</kw>
<status status="PASS" starttime="20170816 07:22:47.303" endtime="20170816 07:22:47.305"></status>
</kw>
<status status="PASS" starttime="20170816 07:22:47.302" endtime="20170816 07:22:47.306"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 07:22:47.306" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170816 07:22:47.306" endtime="20170816 07:22:47.306"></status>
</kw>
<msg timestamp="20170816 07:22:47.306" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:22:46.981" endtime="20170816 07:22:47.306"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:22:47.307" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:22:47.306" endtime="20170816 07:22:47.307"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 07:22:47.307" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 07:22:47.307" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 07:22:47.308" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170816 07:22:47.307" endtime="20170816 07:22:47.308"></status>
</kw>
<msg timestamp="20170816 07:22:47.308" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" starttime="20170816 07:22:46.981" endtime="20170816 07:22:47.308"></status>
</kw>
<msg timestamp="20170816 07:22:47.308" level="INFO">${host_state} = Running</msg>
<status status="PASS" starttime="20170816 07:22:46.980" endtime="20170816 07:22:47.308"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status status="PASS" starttime="20170816 07:22:47.308" endtime="20170816 07:22:47.309"></status>
</kw>
<kw library="state_manager" name="Is OS Booted">
<doc>Check OS status.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Is OS Starting</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 07:22:47.313" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170816 07:22:47.313" endtime="20170816 07:22:47.314"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 07:22:47.314" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170816 07:22:47.314" endtime="20170816 07:22:47.314"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 07:22:47.315" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170816 07:22:47.315" endtime="20170816 07:22:47.315"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 07:22:47.316" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170816 07:22:47.315" endtime="20170816 07:22:47.316"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 07:22:47.601" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170816 07:22:47.316" endtime="20170816 07:22:47.601"></status>
</kw>
<msg timestamp="20170816 07:22:47.601" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 07:22:47.601" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:22:47.316" endtime="20170816 07:22:47.601"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 07:22:47.602" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:22:47.602" endtime="20170816 07:22:47.602"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:22:47.603" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:22:47.602" endtime="20170816 07:22:47.603"></status>
</kw>
<status status="PASS" starttime="20170816 07:22:47.313" endtime="20170816 07:22:47.603"></status>
</kw>
<status status="PASS" starttime="20170816 07:22:47.312" endtime="20170816 07:22:47.603"></status>
</kw>
<status status="PASS" starttime="20170816 07:22:47.312" endtime="20170816 07:22:47.603"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 07:22:47.604" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" starttime="20170816 07:22:47.603" endtime="20170816 07:22:47.604"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:22:47.606" level="INFO">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:22:47.605" endtime="20170816 07:22:47.606"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:22:47.607" level="INFO">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:22:47.606" endtime="20170816 07:22:47.607"></status>
</kw>
<status status="PASS" starttime="20170816 07:22:47.606" endtime="20170816 07:22:47.607"></status>
</kw>
<status status="PASS" starttime="20170816 07:22:47.604" endtime="20170816 07:22:47.607"></status>
</kw>
<status status="PASS" starttime="20170816 07:22:47.604" endtime="20170816 07:22:47.607"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 07:22:47.692" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170816 07:22:47.693" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:22:47.607" endtime="20170816 07:22:47.693"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:22:47.694" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:22:47.694" endtime="20170816 07:22:47.694"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:22:47.695" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:22:47.695" endtime="20170816 07:22:47.695"></status>
</kw>
<status status="PASS" starttime="20170816 07:22:47.695" endtime="20170816 07:22:47.695"></status>
</kw>
<status status="PASS" starttime="20170816 07:22:47.693" endtime="20170816 07:22:47.696"></status>
</kw>
<status status="PASS" starttime="20170816 07:22:47.693" endtime="20170816 07:22:47.696"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 07:22:47.696" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170816 07:22:47.696" endtime="20170816 07:22:47.696"></status>
</kw>
<msg timestamp="20170816 07:22:47.696" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:22:47.311" endtime="20170816 07:22:47.696"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:22:47.697" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:22:47.697" endtime="20170816 07:22:47.697"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 07:22:47.697" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 07:22:47.698" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 07:22:47.698" level="INFO">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170816 07:22:47.697" endtime="20170816 07:22:47.698"></status>
</kw>
<msg timestamp="20170816 07:22:47.698" level="INFO">${state} = Off</msg>
<status status="PASS" starttime="20170816 07:22:47.310" endtime="20170816 07:22:47.698"></status>
</kw>
<msg timestamp="20170816 07:22:47.698" level="INFO">${boot_progress} = Off</msg>
<status status="PASS" starttime="20170816 07:22:47.310" endtime="20170816 07:22:47.698"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170816 07:22:47.699" level="FAIL">Off != FW Progress, Starting OS</msg>
<status status="FAIL" starttime="20170816 07:22:47.698" endtime="20170816 07:22:47.699"></status>
</kw>
<status status="FAIL" starttime="20170816 07:22:47.310" endtime="20170816 07:22:47.699"></status>
</kw>
<msg timestamp="20170816 07:22:47.699" level="INFO">${status} = False</msg>
<status status="PASS" starttime="20170816 07:22:47.309" endtime="20170816 07:22:47.699"></status>
</kw>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${True}'</arg>
<arg>${True}</arg>
</arguments>
<status status="PASS" starttime="20170816 07:22:47.700" endtime="20170816 07:22:47.700"></status>
</kw>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 07:22:47.704" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170816 07:22:47.703" endtime="20170816 07:22:47.704"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 07:22:47.705" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170816 07:22:47.705" endtime="20170816 07:22:47.705"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 07:22:47.706" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170816 07:22:47.705" endtime="20170816 07:22:47.706"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 07:22:47.706" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170816 07:22:47.706" endtime="20170816 07:22:47.706"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 07:22:47.902" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170816 07:22:47.707" endtime="20170816 07:22:47.902"></status>
</kw>
<msg timestamp="20170816 07:22:47.902" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 07:22:47.902" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:22:47.707" endtime="20170816 07:22:47.902"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 07:22:47.903" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:22:47.903" endtime="20170816 07:22:47.903"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:22:47.904" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:22:47.903" endtime="20170816 07:22:47.904"></status>
</kw>
<status status="PASS" starttime="20170816 07:22:47.703" endtime="20170816 07:22:47.904"></status>
</kw>
<status status="PASS" starttime="20170816 07:22:47.702" endtime="20170816 07:22:47.904"></status>
</kw>
<status status="PASS" starttime="20170816 07:22:47.702" endtime="20170816 07:22:47.904"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 07:22:47.905" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status status="PASS" starttime="20170816 07:22:47.904" endtime="20170816 07:22:47.905"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:22:47.907" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:22:47.906" endtime="20170816 07:22:47.907"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:22:47.907" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:22:47.907" endtime="20170816 07:22:47.908"></status>
</kw>
<status status="PASS" starttime="20170816 07:22:47.907" endtime="20170816 07:22:47.908"></status>
</kw>
<status status="PASS" starttime="20170816 07:22:47.905" endtime="20170816 07:22:47.908"></status>
</kw>
<status status="PASS" starttime="20170816 07:22:47.905" endtime="20170816 07:22:47.908"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 07:22:47.999" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg timestamp="20170816 07:22:47.999" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:22:47.908" endtime="20170816 07:22:47.999"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:22:48.001" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:22:48.000" endtime="20170816 07:22:48.001"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:22:48.002" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:22:48.001" endtime="20170816 07:22:48.002"></status>
</kw>
<status status="PASS" starttime="20170816 07:22:48.001" endtime="20170816 07:22:48.002"></status>
</kw>
<status status="PASS" starttime="20170816 07:22:48.000" endtime="20170816 07:22:48.002"></status>
</kw>
<status status="PASS" starttime="20170816 07:22:47.999" endtime="20170816 07:22:48.002"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 07:22:48.002" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170816 07:22:48.002" endtime="20170816 07:22:48.003"></status>
</kw>
<msg timestamp="20170816 07:22:48.003" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:22:47.701" endtime="20170816 07:22:48.003"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:22:48.003" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:22:48.003" endtime="20170816 07:22:48.003"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 07:22:48.004" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 07:22:48.004" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 07:22:48.004" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170816 07:22:48.004" endtime="20170816 07:22:48.004"></status>
</kw>
<msg timestamp="20170816 07:22:48.004" level="INFO">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status status="PASS" starttime="20170816 07:22:47.700" endtime="20170816 07:22:48.005"></status>
</kw>
<msg timestamp="20170816 07:22:48.005" level="INFO">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status status="PASS" starttime="20170816 07:22:47.700" endtime="20170816 07:22:48.005"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg timestamp="20170816 07:22:48.005" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170816 07:22:48.005" level="FAIL">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status status="FAIL" starttime="20170816 07:22:48.005" endtime="20170816 07:22:48.005"></status>
</kw>
<status status="FAIL" starttime="20170816 07:22:47.309" endtime="20170816 07:22:48.006"></status>
</kw>
<status status="FAIL" starttime="20170816 07:22:46.702" endtime="20170816 07:22:48.006"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 07:22:58.011" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170816 07:22:58.011" endtime="20170816 07:22:58.011"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 07:22:58.012" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170816 07:22:58.012" endtime="20170816 07:22:58.012"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 07:22:58.013" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170816 07:22:58.012" endtime="20170816 07:22:58.013"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 07:22:58.013" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170816 07:22:58.013" endtime="20170816 07:22:58.013"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 07:22:58.433" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170816 07:22:58.014" endtime="20170816 07:22:58.433"></status>
</kw>
<msg timestamp="20170816 07:22:58.433" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 07:22:58.433" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:22:58.013" endtime="20170816 07:22:58.433"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 07:22:58.434" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:22:58.434" endtime="20170816 07:22:58.434"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:22:58.435" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:22:58.434" endtime="20170816 07:22:58.435"></status>
</kw>
<status status="PASS" starttime="20170816 07:22:58.010" endtime="20170816 07:22:58.435"></status>
</kw>
<status status="PASS" starttime="20170816 07:22:58.010" endtime="20170816 07:22:58.435"></status>
</kw>
<status status="PASS" starttime="20170816 07:22:58.009" endtime="20170816 07:22:58.435"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 07:22:58.436" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20170816 07:22:58.435" endtime="20170816 07:22:58.436"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:22:58.438" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:22:58.437" endtime="20170816 07:22:58.438"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:22:58.439" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:22:58.438" endtime="20170816 07:22:58.439"></status>
</kw>
<status status="PASS" starttime="20170816 07:22:58.438" endtime="20170816 07:22:58.439"></status>
</kw>
<status status="PASS" starttime="20170816 07:22:58.437" endtime="20170816 07:22:58.439"></status>
</kw>
<status status="PASS" starttime="20170816 07:22:58.436" endtime="20170816 07:22:58.439"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 07:22:58.563" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170816 07:22:58.564" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:22:58.439" endtime="20170816 07:22:58.564"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:22:58.565" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:22:58.565" endtime="20170816 07:22:58.565"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:22:58.566" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:22:58.566" endtime="20170816 07:22:58.566"></status>
</kw>
<status status="PASS" starttime="20170816 07:22:58.566" endtime="20170816 07:22:58.567"></status>
</kw>
<status status="PASS" starttime="20170816 07:22:58.564" endtime="20170816 07:22:58.567"></status>
</kw>
<status status="PASS" starttime="20170816 07:22:58.564" endtime="20170816 07:22:58.567"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 07:22:58.567" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170816 07:22:58.567" endtime="20170816 07:22:58.567"></status>
</kw>
<msg timestamp="20170816 07:22:58.567" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:22:58.008" endtime="20170816 07:22:58.567"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:22:58.568" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:22:58.568" endtime="20170816 07:22:58.568"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 07:22:58.569" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 07:22:58.569" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 07:22:58.569" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170816 07:22:58.568" endtime="20170816 07:22:58.569"></status>
</kw>
<msg timestamp="20170816 07:22:58.569" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" starttime="20170816 07:22:58.007" endtime="20170816 07:22:58.569"></status>
</kw>
<msg timestamp="20170816 07:22:58.569" level="INFO">${power_state} = On</msg>
<status status="PASS" starttime="20170816 07:22:58.007" endtime="20170816 07:22:58.569"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" starttime="20170816 07:22:58.570" endtime="20170816 07:22:58.570"></status>
</kw>
<status status="PASS" starttime="20170816 07:22:58.007" endtime="20170816 07:22:58.570"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 07:22:58.575" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170816 07:22:58.574" endtime="20170816 07:22:58.575"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 07:22:58.576" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170816 07:22:58.576" endtime="20170816 07:22:58.576"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 07:22:58.577" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170816 07:22:58.577" endtime="20170816 07:22:58.577"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 07:22:58.578" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170816 07:22:58.577" endtime="20170816 07:22:58.578"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 07:22:59.184" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170816 07:22:58.579" endtime="20170816 07:22:59.185"></status>
</kw>
<msg timestamp="20170816 07:22:59.185" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 07:22:59.185" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:22:58.578" endtime="20170816 07:22:59.185"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 07:22:59.186" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:22:59.185" endtime="20170816 07:22:59.186"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:22:59.187" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:22:59.186" endtime="20170816 07:22:59.187"></status>
</kw>
<status status="PASS" starttime="20170816 07:22:58.573" endtime="20170816 07:22:59.187"></status>
</kw>
<status status="PASS" starttime="20170816 07:22:58.573" endtime="20170816 07:22:59.188"></status>
</kw>
<status status="PASS" starttime="20170816 07:22:58.572" endtime="20170816 07:22:59.188"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 07:22:59.189" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" starttime="20170816 07:22:59.188" endtime="20170816 07:22:59.189"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:22:59.191" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:22:59.190" endtime="20170816 07:22:59.191"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:22:59.192" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:22:59.192" endtime="20170816 07:22:59.192"></status>
</kw>
<status status="PASS" starttime="20170816 07:22:59.191" endtime="20170816 07:22:59.192"></status>
</kw>
<status status="PASS" starttime="20170816 07:22:59.190" endtime="20170816 07:22:59.192"></status>
</kw>
<status status="PASS" starttime="20170816 07:22:59.189" endtime="20170816 07:22:59.192"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 07:22:59.539" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170816 07:22:59.539" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:22:59.192" endtime="20170816 07:22:59.539"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:22:59.541" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:22:59.540" endtime="20170816 07:22:59.541"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:22:59.542" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:22:59.541" endtime="20170816 07:22:59.542"></status>
</kw>
<status status="PASS" starttime="20170816 07:22:59.541" endtime="20170816 07:22:59.542"></status>
</kw>
<status status="PASS" starttime="20170816 07:22:59.540" endtime="20170816 07:22:59.542"></status>
</kw>
<status status="PASS" starttime="20170816 07:22:59.539" endtime="20170816 07:22:59.542"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 07:22:59.542" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170816 07:22:59.542" endtime="20170816 07:22:59.543"></status>
</kw>
<msg timestamp="20170816 07:22:59.543" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:22:58.571" endtime="20170816 07:22:59.543"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:22:59.543" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:22:59.543" endtime="20170816 07:22:59.543"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 07:22:59.544" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 07:22:59.544" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 07:22:59.544" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170816 07:22:59.544" endtime="20170816 07:22:59.544"></status>
</kw>
<msg timestamp="20170816 07:22:59.545" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" starttime="20170816 07:22:58.571" endtime="20170816 07:22:59.545"></status>
</kw>
<msg timestamp="20170816 07:22:59.545" level="INFO">${host_state} = Running</msg>
<status status="PASS" starttime="20170816 07:22:58.570" endtime="20170816 07:22:59.545"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status status="PASS" starttime="20170816 07:22:59.545" endtime="20170816 07:22:59.545"></status>
</kw>
<kw library="state_manager" name="Is OS Booted">
<doc>Check OS status.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Is OS Starting</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 07:22:59.550" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170816 07:22:59.550" endtime="20170816 07:22:59.551"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 07:22:59.551" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170816 07:22:59.551" endtime="20170816 07:22:59.551"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 07:22:59.552" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170816 07:22:59.551" endtime="20170816 07:22:59.552"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 07:22:59.552" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170816 07:22:59.552" endtime="20170816 07:22:59.552"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 07:22:59.798" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170816 07:22:59.553" endtime="20170816 07:22:59.798"></status>
</kw>
<msg timestamp="20170816 07:22:59.798" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 07:22:59.798" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:22:59.553" endtime="20170816 07:22:59.798"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 07:22:59.799" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:22:59.798" endtime="20170816 07:22:59.799"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:22:59.799" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:22:59.799" endtime="20170816 07:22:59.799"></status>
</kw>
<status status="PASS" starttime="20170816 07:22:59.549" endtime="20170816 07:22:59.799"></status>
</kw>
<status status="PASS" starttime="20170816 07:22:59.549" endtime="20170816 07:22:59.800"></status>
</kw>
<status status="PASS" starttime="20170816 07:22:59.548" endtime="20170816 07:22:59.800"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 07:22:59.800" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" starttime="20170816 07:22:59.800" endtime="20170816 07:22:59.800"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:22:59.802" level="INFO">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:22:59.802" endtime="20170816 07:22:59.802"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:22:59.803" level="INFO">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:22:59.803" endtime="20170816 07:22:59.803"></status>
</kw>
<status status="PASS" starttime="20170816 07:22:59.802" endtime="20170816 07:22:59.803"></status>
</kw>
<status status="PASS" starttime="20170816 07:22:59.801" endtime="20170816 07:22:59.804"></status>
</kw>
<status status="PASS" starttime="20170816 07:22:59.801" endtime="20170816 07:22:59.804"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 07:22:59.904" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170816 07:22:59.904" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:22:59.804" endtime="20170816 07:22:59.904"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:22:59.906" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:22:59.905" endtime="20170816 07:22:59.906"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:22:59.907" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:22:59.907" endtime="20170816 07:22:59.907"></status>
</kw>
<status status="PASS" starttime="20170816 07:22:59.906" endtime="20170816 07:22:59.907"></status>
</kw>
<status status="PASS" starttime="20170816 07:22:59.905" endtime="20170816 07:22:59.908"></status>
</kw>
<status status="PASS" starttime="20170816 07:22:59.904" endtime="20170816 07:22:59.908"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 07:22:59.908" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170816 07:22:59.908" endtime="20170816 07:22:59.908"></status>
</kw>
<msg timestamp="20170816 07:22:59.908" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:22:59.547" endtime="20170816 07:22:59.908"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:22:59.909" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:22:59.909" endtime="20170816 07:22:59.909"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 07:22:59.909" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 07:22:59.910" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 07:22:59.910" level="INFO">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170816 07:22:59.909" endtime="20170816 07:22:59.910"></status>
</kw>
<msg timestamp="20170816 07:22:59.910" level="INFO">${state} = Off</msg>
<status status="PASS" starttime="20170816 07:22:59.547" endtime="20170816 07:22:59.910"></status>
</kw>
<msg timestamp="20170816 07:22:59.910" level="INFO">${boot_progress} = Off</msg>
<status status="PASS" starttime="20170816 07:22:59.547" endtime="20170816 07:22:59.910"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170816 07:22:59.911" level="FAIL">Off != FW Progress, Starting OS</msg>
<status status="FAIL" starttime="20170816 07:22:59.910" endtime="20170816 07:22:59.911"></status>
</kw>
<status status="FAIL" starttime="20170816 07:22:59.546" endtime="20170816 07:22:59.911"></status>
</kw>
<msg timestamp="20170816 07:22:59.911" level="INFO">${status} = False</msg>
<status status="PASS" starttime="20170816 07:22:59.546" endtime="20170816 07:22:59.911"></status>
</kw>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${True}'</arg>
<arg>${True}</arg>
</arguments>
<status status="PASS" starttime="20170816 07:22:59.911" endtime="20170816 07:22:59.912"></status>
</kw>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 07:22:59.915" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170816 07:22:59.915" endtime="20170816 07:22:59.916"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 07:22:59.916" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170816 07:22:59.916" endtime="20170816 07:22:59.916"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 07:22:59.917" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170816 07:22:59.916" endtime="20170816 07:22:59.917"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 07:22:59.917" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170816 07:22:59.917" endtime="20170816 07:22:59.918"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 07:23:00.129" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170816 07:22:59.918" endtime="20170816 07:23:00.129"></status>
</kw>
<msg timestamp="20170816 07:23:00.129" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 07:23:00.129" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:22:59.918" endtime="20170816 07:23:00.129"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 07:23:00.130" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:23:00.129" endtime="20170816 07:23:00.130"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:23:00.131" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:23:00.130" endtime="20170816 07:23:00.131"></status>
</kw>
<status status="PASS" starttime="20170816 07:22:59.914" endtime="20170816 07:23:00.131"></status>
</kw>
<status status="PASS" starttime="20170816 07:22:59.914" endtime="20170816 07:23:00.131"></status>
</kw>
<status status="PASS" starttime="20170816 07:22:59.913" endtime="20170816 07:23:00.131"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 07:23:00.131" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status status="PASS" starttime="20170816 07:23:00.131" endtime="20170816 07:23:00.132"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:23:00.134" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:23:00.133" endtime="20170816 07:23:00.134"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:23:00.135" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:23:00.135" endtime="20170816 07:23:00.135"></status>
</kw>
<status status="PASS" starttime="20170816 07:23:00.134" endtime="20170816 07:23:00.135"></status>
</kw>
<status status="PASS" starttime="20170816 07:23:00.132" endtime="20170816 07:23:00.136"></status>
</kw>
<status status="PASS" starttime="20170816 07:23:00.132" endtime="20170816 07:23:00.136"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 07:23:00.267" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg timestamp="20170816 07:23:00.267" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:23:00.136" endtime="20170816 07:23:00.267"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:23:00.269" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:23:00.269" endtime="20170816 07:23:00.269"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:23:00.270" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:23:00.270" endtime="20170816 07:23:00.270"></status>
</kw>
<status status="PASS" starttime="20170816 07:23:00.269" endtime="20170816 07:23:00.270"></status>
</kw>
<status status="PASS" starttime="20170816 07:23:00.268" endtime="20170816 07:23:00.270"></status>
</kw>
<status status="PASS" starttime="20170816 07:23:00.268" endtime="20170816 07:23:00.270"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 07:23:00.271" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170816 07:23:00.271" endtime="20170816 07:23:00.271"></status>
</kw>
<msg timestamp="20170816 07:23:00.271" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:22:59.913" endtime="20170816 07:23:00.271"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:23:00.272" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:23:00.271" endtime="20170816 07:23:00.272"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 07:23:00.272" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 07:23:00.272" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 07:23:00.272" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170816 07:23:00.272" endtime="20170816 07:23:00.272"></status>
</kw>
<msg timestamp="20170816 07:23:00.273" level="INFO">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="PASS" starttime="20170816 07:22:59.912" endtime="20170816 07:23:00.273"></status>
</kw>
<msg timestamp="20170816 07:23:00.273" level="INFO">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="PASS" starttime="20170816 07:22:59.912" endtime="20170816 07:23:00.273"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg timestamp="20170816 07:23:00.273" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170816 07:23:00.274" level="FAIL">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="FAIL" starttime="20170816 07:23:00.273" endtime="20170816 07:23:00.274"></status>
</kw>
<status status="FAIL" starttime="20170816 07:22:59.546" endtime="20170816 07:23:00.274"></status>
</kw>
<status status="FAIL" starttime="20170816 07:22:58.006" endtime="20170816 07:23:00.274"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 07:23:10.279" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170816 07:23:10.279" endtime="20170816 07:23:10.279"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 07:23:10.280" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170816 07:23:10.280" endtime="20170816 07:23:10.280"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 07:23:10.280" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170816 07:23:10.280" endtime="20170816 07:23:10.281"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 07:23:10.281" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170816 07:23:10.281" endtime="20170816 07:23:10.281"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 07:23:10.639" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170816 07:23:10.282" endtime="20170816 07:23:10.639"></status>
</kw>
<msg timestamp="20170816 07:23:10.639" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 07:23:10.639" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:23:10.281" endtime="20170816 07:23:10.639"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 07:23:10.640" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:23:10.639" endtime="20170816 07:23:10.640"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:23:10.640" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:23:10.640" endtime="20170816 07:23:10.641"></status>
</kw>
<status status="PASS" starttime="20170816 07:23:10.278" endtime="20170816 07:23:10.641"></status>
</kw>
<status status="PASS" starttime="20170816 07:23:10.278" endtime="20170816 07:23:10.641"></status>
</kw>
<status status="PASS" starttime="20170816 07:23:10.277" endtime="20170816 07:23:10.641"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 07:23:10.641" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20170816 07:23:10.641" endtime="20170816 07:23:10.641"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:23:10.643" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:23:10.643" endtime="20170816 07:23:10.644"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:23:10.644" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:23:10.644" endtime="20170816 07:23:10.645"></status>
</kw>
<status status="PASS" starttime="20170816 07:23:10.644" endtime="20170816 07:23:10.645"></status>
</kw>
<status status="PASS" starttime="20170816 07:23:10.642" endtime="20170816 07:23:10.645"></status>
</kw>
<status status="PASS" starttime="20170816 07:23:10.642" endtime="20170816 07:23:10.645"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 07:23:11.280" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170816 07:23:11.280" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:23:10.645" endtime="20170816 07:23:11.280"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:23:11.282" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:23:11.281" endtime="20170816 07:23:11.282"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:23:11.283" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:23:11.282" endtime="20170816 07:23:11.283"></status>
</kw>
<status status="PASS" starttime="20170816 07:23:11.282" endtime="20170816 07:23:11.283"></status>
</kw>
<status status="PASS" starttime="20170816 07:23:11.281" endtime="20170816 07:23:11.283"></status>
</kw>
<status status="PASS" starttime="20170816 07:23:11.280" endtime="20170816 07:23:11.283"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 07:23:11.283" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170816 07:23:11.283" endtime="20170816 07:23:11.284"></status>
</kw>
<msg timestamp="20170816 07:23:11.284" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:23:10.276" endtime="20170816 07:23:11.284"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:23:11.284" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:23:11.284" endtime="20170816 07:23:11.284"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 07:23:11.285" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 07:23:11.285" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 07:23:11.285" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170816 07:23:11.285" endtime="20170816 07:23:11.285"></status>
</kw>
<msg timestamp="20170816 07:23:11.285" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" starttime="20170816 07:23:10.276" endtime="20170816 07:23:11.286"></status>
</kw>
<msg timestamp="20170816 07:23:11.286" level="INFO">${power_state} = On</msg>
<status status="PASS" starttime="20170816 07:23:10.275" endtime="20170816 07:23:11.286"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" starttime="20170816 07:23:11.286" endtime="20170816 07:23:11.286"></status>
</kw>
<status status="PASS" starttime="20170816 07:23:10.275" endtime="20170816 07:23:11.286"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 07:23:11.290" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170816 07:23:11.290" endtime="20170816 07:23:11.291"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 07:23:11.291" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170816 07:23:11.291" endtime="20170816 07:23:11.291"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 07:23:11.292" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170816 07:23:11.291" endtime="20170816 07:23:11.292"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 07:23:11.292" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170816 07:23:11.292" endtime="20170816 07:23:11.293"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 07:23:11.724" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170816 07:23:11.293" endtime="20170816 07:23:11.725"></status>
</kw>
<msg timestamp="20170816 07:23:11.725" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 07:23:11.725" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:23:11.293" endtime="20170816 07:23:11.725"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 07:23:11.725" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:23:11.725" endtime="20170816 07:23:11.726"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:23:11.726" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:23:11.726" endtime="20170816 07:23:11.726"></status>
</kw>
<status status="PASS" starttime="20170816 07:23:11.289" endtime="20170816 07:23:11.726"></status>
</kw>
<status status="PASS" starttime="20170816 07:23:11.289" endtime="20170816 07:23:11.726"></status>
</kw>
<status status="PASS" starttime="20170816 07:23:11.288" endtime="20170816 07:23:11.727"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 07:23:11.727" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" starttime="20170816 07:23:11.727" endtime="20170816 07:23:11.727"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:23:11.729" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:23:11.728" endtime="20170816 07:23:11.729"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:23:11.730" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:23:11.730" endtime="20170816 07:23:11.730"></status>
</kw>
<status status="PASS" starttime="20170816 07:23:11.729" endtime="20170816 07:23:11.730"></status>
</kw>
<status status="PASS" starttime="20170816 07:23:11.728" endtime="20170816 07:23:11.730"></status>
</kw>
<status status="PASS" starttime="20170816 07:23:11.727" endtime="20170816 07:23:11.730"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 07:23:12.221" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170816 07:23:12.221" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:23:11.731" endtime="20170816 07:23:12.221"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:23:12.223" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:23:12.222" endtime="20170816 07:23:12.223"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:23:12.227" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:23:12.226" endtime="20170816 07:23:12.227"></status>
</kw>
<status status="PASS" starttime="20170816 07:23:12.223" endtime="20170816 07:23:12.227"></status>
</kw>
<status status="PASS" starttime="20170816 07:23:12.222" endtime="20170816 07:23:12.227"></status>
</kw>
<status status="PASS" starttime="20170816 07:23:12.221" endtime="20170816 07:23:12.227"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 07:23:12.227" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170816 07:23:12.227" endtime="20170816 07:23:12.227"></status>
</kw>
<msg timestamp="20170816 07:23:12.228" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:23:11.287" endtime="20170816 07:23:12.228"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:23:12.228" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:23:12.228" endtime="20170816 07:23:12.228"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 07:23:12.229" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 07:23:12.229" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 07:23:12.229" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170816 07:23:12.229" endtime="20170816 07:23:12.229"></status>
</kw>
<msg timestamp="20170816 07:23:12.229" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" starttime="20170816 07:23:11.287" endtime="20170816 07:23:12.230"></status>
</kw>
<msg timestamp="20170816 07:23:12.230" level="INFO">${host_state} = Running</msg>
<status status="PASS" starttime="20170816 07:23:11.287" endtime="20170816 07:23:12.230"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status status="PASS" starttime="20170816 07:23:12.230" endtime="20170816 07:23:12.230"></status>
</kw>
<kw library="state_manager" name="Is OS Booted">
<doc>Check OS status.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Is OS Starting</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 07:23:12.235" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170816 07:23:12.235" endtime="20170816 07:23:12.235"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 07:23:12.236" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170816 07:23:12.235" endtime="20170816 07:23:12.236"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 07:23:12.236" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170816 07:23:12.236" endtime="20170816 07:23:12.236"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 07:23:12.237" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170816 07:23:12.237" endtime="20170816 07:23:12.237"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 07:23:12.719" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170816 07:23:12.238" endtime="20170816 07:23:12.719"></status>
</kw>
<msg timestamp="20170816 07:23:12.719" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 07:23:12.719" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:23:12.237" endtime="20170816 07:23:12.719"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 07:23:12.720" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:23:12.719" endtime="20170816 07:23:12.720"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:23:12.721" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:23:12.720" endtime="20170816 07:23:12.721"></status>
</kw>
<status status="PASS" starttime="20170816 07:23:12.234" endtime="20170816 07:23:12.721"></status>
</kw>
<status status="PASS" starttime="20170816 07:23:12.234" endtime="20170816 07:23:12.721"></status>
</kw>
<status status="PASS" starttime="20170816 07:23:12.233" endtime="20170816 07:23:12.721"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 07:23:12.722" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" starttime="20170816 07:23:12.721" endtime="20170816 07:23:12.722"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:23:12.724" level="INFO">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:23:12.723" endtime="20170816 07:23:12.724"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:23:12.725" level="INFO">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:23:12.724" endtime="20170816 07:23:12.725"></status>
</kw>
<status status="PASS" starttime="20170816 07:23:12.724" endtime="20170816 07:23:12.725"></status>
</kw>
<status status="PASS" starttime="20170816 07:23:12.722" endtime="20170816 07:23:12.725"></status>
</kw>
<status status="PASS" starttime="20170816 07:23:12.722" endtime="20170816 07:23:12.725"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 07:23:13.354" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170816 07:23:13.354" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:23:12.725" endtime="20170816 07:23:13.354"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:23:13.356" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:23:13.355" endtime="20170816 07:23:13.356"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:23:13.357" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:23:13.356" endtime="20170816 07:23:13.357"></status>
</kw>
<status status="PASS" starttime="20170816 07:23:13.356" endtime="20170816 07:23:13.357"></status>
</kw>
<status status="PASS" starttime="20170816 07:23:13.355" endtime="20170816 07:23:13.357"></status>
</kw>
<status status="PASS" starttime="20170816 07:23:13.354" endtime="20170816 07:23:13.357"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 07:23:13.357" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170816 07:23:13.357" endtime="20170816 07:23:13.358"></status>
</kw>
<msg timestamp="20170816 07:23:13.358" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:23:12.232" endtime="20170816 07:23:13.358"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:23:13.358" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:23:13.358" endtime="20170816 07:23:13.358"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 07:23:13.359" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 07:23:13.359" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 07:23:13.359" level="INFO">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170816 07:23:13.359" endtime="20170816 07:23:13.359"></status>
</kw>
<msg timestamp="20170816 07:23:13.359" level="INFO">${state} = Off</msg>
<status status="PASS" starttime="20170816 07:23:12.232" endtime="20170816 07:23:13.359"></status>
</kw>
<msg timestamp="20170816 07:23:13.360" level="INFO">${boot_progress} = Off</msg>
<status status="PASS" starttime="20170816 07:23:12.231" endtime="20170816 07:23:13.360"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170816 07:23:13.360" level="FAIL">Off != FW Progress, Starting OS</msg>
<status status="FAIL" starttime="20170816 07:23:13.360" endtime="20170816 07:23:13.360"></status>
</kw>
<status status="FAIL" starttime="20170816 07:23:12.231" endtime="20170816 07:23:13.361"></status>
</kw>
<msg timestamp="20170816 07:23:13.361" level="INFO">${status} = False</msg>
<status status="PASS" starttime="20170816 07:23:12.231" endtime="20170816 07:23:13.361"></status>
</kw>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${True}'</arg>
<arg>${True}</arg>
</arguments>
<status status="PASS" starttime="20170816 07:23:13.361" endtime="20170816 07:23:13.361"></status>
</kw>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 07:23:13.365" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170816 07:23:13.365" endtime="20170816 07:23:13.366"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 07:23:13.366" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170816 07:23:13.366" endtime="20170816 07:23:13.366"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 07:23:13.367" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170816 07:23:13.366" endtime="20170816 07:23:13.367"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 07:23:13.367" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170816 07:23:13.367" endtime="20170816 07:23:13.367"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 07:23:13.839" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170816 07:23:13.368" endtime="20170816 07:23:13.840"></status>
</kw>
<msg timestamp="20170816 07:23:13.840" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 07:23:13.840" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:23:13.368" endtime="20170816 07:23:13.840"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 07:23:13.840" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:23:13.840" endtime="20170816 07:23:13.841"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:23:13.841" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:23:13.841" endtime="20170816 07:23:13.841"></status>
</kw>
<status status="PASS" starttime="20170816 07:23:13.364" endtime="20170816 07:23:13.841"></status>
</kw>
<status status="PASS" starttime="20170816 07:23:13.364" endtime="20170816 07:23:13.841"></status>
</kw>
<status status="PASS" starttime="20170816 07:23:13.363" endtime="20170816 07:23:13.842"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 07:23:13.842" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status status="PASS" starttime="20170816 07:23:13.842" endtime="20170816 07:23:13.842"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:23:13.844" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:23:13.844" endtime="20170816 07:23:13.844"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:23:13.845" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:23:13.845" endtime="20170816 07:23:13.845"></status>
</kw>
<status status="PASS" starttime="20170816 07:23:13.845" endtime="20170816 07:23:13.845"></status>
</kw>
<status status="PASS" starttime="20170816 07:23:13.843" endtime="20170816 07:23:13.846"></status>
</kw>
<status status="PASS" starttime="20170816 07:23:13.842" endtime="20170816 07:23:13.846"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 07:23:14.235" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg timestamp="20170816 07:23:14.236" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:23:13.846" endtime="20170816 07:23:14.236"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:23:14.238" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:23:14.237" endtime="20170816 07:23:14.238"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:23:14.239" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:23:14.239" endtime="20170816 07:23:14.239"></status>
</kw>
<status status="PASS" starttime="20170816 07:23:14.238" endtime="20170816 07:23:14.239"></status>
</kw>
<status status="PASS" starttime="20170816 07:23:14.237" endtime="20170816 07:23:14.239"></status>
</kw>
<status status="PASS" starttime="20170816 07:23:14.236" endtime="20170816 07:23:14.239"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 07:23:14.240" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170816 07:23:14.240" endtime="20170816 07:23:14.240"></status>
</kw>
<msg timestamp="20170816 07:23:14.240" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:23:13.362" endtime="20170816 07:23:14.240"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:23:14.241" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:23:14.241" endtime="20170816 07:23:14.241"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 07:23:14.242" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 07:23:14.242" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 07:23:14.242" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170816 07:23:14.241" endtime="20170816 07:23:14.242"></status>
</kw>
<msg timestamp="20170816 07:23:14.242" level="INFO">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="PASS" starttime="20170816 07:23:13.362" endtime="20170816 07:23:14.242"></status>
</kw>
<msg timestamp="20170816 07:23:14.242" level="INFO">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="PASS" starttime="20170816 07:23:13.361" endtime="20170816 07:23:14.242"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg timestamp="20170816 07:23:14.243" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170816 07:23:14.243" level="FAIL">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="FAIL" starttime="20170816 07:23:14.243" endtime="20170816 07:23:14.243"></status>
</kw>
<status status="FAIL" starttime="20170816 07:23:12.230" endtime="20170816 07:23:14.243"></status>
</kw>
<status status="FAIL" starttime="20170816 07:23:10.275" endtime="20170816 07:23:14.243"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 07:23:24.248" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170816 07:23:24.248" endtime="20170816 07:23:24.249"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 07:23:24.249" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170816 07:23:24.249" endtime="20170816 07:23:24.249"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 07:23:24.250" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170816 07:23:24.250" endtime="20170816 07:23:24.250"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 07:23:24.251" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170816 07:23:24.250" endtime="20170816 07:23:24.251"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 07:23:24.655" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170816 07:23:24.251" endtime="20170816 07:23:24.655"></status>
</kw>
<msg timestamp="20170816 07:23:24.655" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 07:23:24.655" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:23:24.251" endtime="20170816 07:23:24.655"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 07:23:24.655" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:23:24.655" endtime="20170816 07:23:24.656"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:23:24.656" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:23:24.656" endtime="20170816 07:23:24.656"></status>
</kw>
<status status="PASS" starttime="20170816 07:23:24.247" endtime="20170816 07:23:24.656"></status>
</kw>
<status status="PASS" starttime="20170816 07:23:24.247" endtime="20170816 07:23:24.657"></status>
</kw>
<status status="PASS" starttime="20170816 07:23:24.246" endtime="20170816 07:23:24.657"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 07:23:24.657" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20170816 07:23:24.657" endtime="20170816 07:23:24.657"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:23:24.659" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:23:24.659" endtime="20170816 07:23:24.659"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:23:24.660" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:23:24.660" endtime="20170816 07:23:24.660"></status>
</kw>
<status status="PASS" starttime="20170816 07:23:24.659" endtime="20170816 07:23:24.660"></status>
</kw>
<status status="PASS" starttime="20170816 07:23:24.658" endtime="20170816 07:23:24.660"></status>
</kw>
<status status="PASS" starttime="20170816 07:23:24.658" endtime="20170816 07:23:24.661"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 07:23:25.223" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170816 07:23:25.224" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:23:24.661" endtime="20170816 07:23:25.224"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:23:25.225" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:23:25.225" endtime="20170816 07:23:25.225"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:23:25.226" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:23:25.226" endtime="20170816 07:23:25.226"></status>
</kw>
<status status="PASS" starttime="20170816 07:23:25.226" endtime="20170816 07:23:25.226"></status>
</kw>
<status status="PASS" starttime="20170816 07:23:25.224" endtime="20170816 07:23:25.227"></status>
</kw>
<status status="PASS" starttime="20170816 07:23:25.224" endtime="20170816 07:23:25.227"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 07:23:25.227" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170816 07:23:25.227" endtime="20170816 07:23:25.227"></status>
</kw>
<msg timestamp="20170816 07:23:25.227" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:23:24.246" endtime="20170816 07:23:25.227"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:23:25.228" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:23:25.228" endtime="20170816 07:23:25.228"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 07:23:25.229" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 07:23:25.229" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 07:23:25.229" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170816 07:23:25.228" endtime="20170816 07:23:25.229"></status>
</kw>
<msg timestamp="20170816 07:23:25.229" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" starttime="20170816 07:23:24.245" endtime="20170816 07:23:25.229"></status>
</kw>
<msg timestamp="20170816 07:23:25.229" level="INFO">${power_state} = On</msg>
<status status="PASS" starttime="20170816 07:23:24.245" endtime="20170816 07:23:25.229"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" starttime="20170816 07:23:25.230" endtime="20170816 07:23:25.230"></status>
</kw>
<status status="PASS" starttime="20170816 07:23:24.245" endtime="20170816 07:23:25.230"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 07:23:25.234" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170816 07:23:25.233" endtime="20170816 07:23:25.234"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 07:23:25.235" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170816 07:23:25.235" endtime="20170816 07:23:25.235"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 07:23:25.236" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170816 07:23:25.235" endtime="20170816 07:23:25.236"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 07:23:25.236" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170816 07:23:25.236" endtime="20170816 07:23:25.236"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 07:23:25.696" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170816 07:23:25.237" endtime="20170816 07:23:25.696"></status>
</kw>
<msg timestamp="20170816 07:23:25.696" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 07:23:25.696" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:23:25.237" endtime="20170816 07:23:25.696"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 07:23:25.697" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:23:25.697" endtime="20170816 07:23:25.697"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:23:25.698" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:23:25.697" endtime="20170816 07:23:25.698"></status>
</kw>
<status status="PASS" starttime="20170816 07:23:25.233" endtime="20170816 07:23:25.698"></status>
</kw>
<status status="PASS" starttime="20170816 07:23:25.232" endtime="20170816 07:23:25.698"></status>
</kw>
<status status="PASS" starttime="20170816 07:23:25.232" endtime="20170816 07:23:25.698"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 07:23:25.699" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" starttime="20170816 07:23:25.698" endtime="20170816 07:23:25.699"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:23:25.701" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:23:25.700" endtime="20170816 07:23:25.701"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:23:25.702" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:23:25.701" endtime="20170816 07:23:25.702"></status>
</kw>
<status status="PASS" starttime="20170816 07:23:25.701" endtime="20170816 07:23:25.702"></status>
</kw>
<status status="PASS" starttime="20170816 07:23:25.699" endtime="20170816 07:23:25.702"></status>
</kw>
<status status="PASS" starttime="20170816 07:23:25.699" endtime="20170816 07:23:25.702"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 07:23:26.459" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170816 07:23:26.460" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:23:25.702" endtime="20170816 07:23:26.460"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:23:26.462" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:23:26.461" endtime="20170816 07:23:26.462"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:23:26.462" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:23:26.462" endtime="20170816 07:23:26.463"></status>
</kw>
<status status="PASS" starttime="20170816 07:23:26.462" endtime="20170816 07:23:26.463"></status>
</kw>
<status status="PASS" starttime="20170816 07:23:26.461" endtime="20170816 07:23:26.463"></status>
</kw>
<status status="PASS" starttime="20170816 07:23:26.460" endtime="20170816 07:23:26.463"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 07:23:26.463" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170816 07:23:26.463" endtime="20170816 07:23:26.463"></status>
</kw>
<msg timestamp="20170816 07:23:26.463" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:23:25.231" endtime="20170816 07:23:26.464"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:23:26.464" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:23:26.464" endtime="20170816 07:23:26.464"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 07:23:26.465" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 07:23:26.465" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 07:23:26.465" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170816 07:23:26.465" endtime="20170816 07:23:26.465"></status>
</kw>
<msg timestamp="20170816 07:23:26.465" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" starttime="20170816 07:23:25.231" endtime="20170816 07:23:26.465"></status>
</kw>
<msg timestamp="20170816 07:23:26.466" level="INFO">${host_state} = Running</msg>
<status status="PASS" starttime="20170816 07:23:25.230" endtime="20170816 07:23:26.466"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status status="PASS" starttime="20170816 07:23:26.466" endtime="20170816 07:23:26.466"></status>
</kw>
<kw library="state_manager" name="Is OS Booted">
<doc>Check OS status.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Is OS Starting</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 07:23:26.471" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170816 07:23:26.471" endtime="20170816 07:23:26.471"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 07:23:26.472" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170816 07:23:26.471" endtime="20170816 07:23:26.472"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 07:23:26.472" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170816 07:23:26.472" endtime="20170816 07:23:26.472"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 07:23:26.473" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170816 07:23:26.473" endtime="20170816 07:23:26.473"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 07:23:26.897" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170816 07:23:26.474" endtime="20170816 07:23:26.897"></status>
</kw>
<msg timestamp="20170816 07:23:26.897" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 07:23:26.897" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:23:26.473" endtime="20170816 07:23:26.897"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 07:23:26.898" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:23:26.897" endtime="20170816 07:23:26.898"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:23:26.899" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:23:26.898" endtime="20170816 07:23:26.899"></status>
</kw>
<status status="PASS" starttime="20170816 07:23:26.470" endtime="20170816 07:23:26.899"></status>
</kw>
<status status="PASS" starttime="20170816 07:23:26.470" endtime="20170816 07:23:26.899"></status>
</kw>
<status status="PASS" starttime="20170816 07:23:26.469" endtime="20170816 07:23:26.899"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 07:23:26.900" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" starttime="20170816 07:23:26.899" endtime="20170816 07:23:26.900"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:23:26.902" level="INFO">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:23:26.901" endtime="20170816 07:23:26.902"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:23:26.902" level="INFO">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:23:26.902" endtime="20170816 07:23:26.903"></status>
</kw>
<status status="PASS" starttime="20170816 07:23:26.902" endtime="20170816 07:23:26.903"></status>
</kw>
<status status="PASS" starttime="20170816 07:23:26.900" endtime="20170816 07:23:26.903"></status>
</kw>
<status status="PASS" starttime="20170816 07:23:26.900" endtime="20170816 07:23:26.903"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 07:23:27.288" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170816 07:23:27.289" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:23:26.903" endtime="20170816 07:23:27.289"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:23:27.290" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:23:27.290" endtime="20170816 07:23:27.290"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:23:27.291" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:23:27.291" endtime="20170816 07:23:27.291"></status>
</kw>
<status status="PASS" starttime="20170816 07:23:27.291" endtime="20170816 07:23:27.291"></status>
</kw>
<status status="PASS" starttime="20170816 07:23:27.289" endtime="20170816 07:23:27.292"></status>
</kw>
<status status="PASS" starttime="20170816 07:23:27.289" endtime="20170816 07:23:27.292"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 07:23:27.292" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170816 07:23:27.292" endtime="20170816 07:23:27.292"></status>
</kw>
<msg timestamp="20170816 07:23:27.292" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:23:26.468" endtime="20170816 07:23:27.292"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:23:27.293" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:23:27.293" endtime="20170816 07:23:27.293"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 07:23:27.294" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 07:23:27.294" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 07:23:27.294" level="INFO">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170816 07:23:27.293" endtime="20170816 07:23:27.294"></status>
</kw>
<msg timestamp="20170816 07:23:27.294" level="INFO">${state} = Off</msg>
<status status="PASS" starttime="20170816 07:23:26.468" endtime="20170816 07:23:27.294"></status>
</kw>
<msg timestamp="20170816 07:23:27.294" level="INFO">${boot_progress} = Off</msg>
<status status="PASS" starttime="20170816 07:23:26.468" endtime="20170816 07:23:27.294"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170816 07:23:27.295" level="FAIL">Off != FW Progress, Starting OS</msg>
<status status="FAIL" starttime="20170816 07:23:27.295" endtime="20170816 07:23:27.295"></status>
</kw>
<status status="FAIL" starttime="20170816 07:23:26.467" endtime="20170816 07:23:27.295"></status>
</kw>
<msg timestamp="20170816 07:23:27.295" level="INFO">${status} = False</msg>
<status status="PASS" starttime="20170816 07:23:26.467" endtime="20170816 07:23:27.296"></status>
</kw>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${True}'</arg>
<arg>${True}</arg>
</arguments>
<status status="PASS" starttime="20170816 07:23:27.296" endtime="20170816 07:23:27.296"></status>
</kw>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 07:23:27.302" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170816 07:23:27.301" endtime="20170816 07:23:27.303"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 07:23:27.303" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170816 07:23:27.303" endtime="20170816 07:23:27.303"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 07:23:27.304" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170816 07:23:27.304" endtime="20170816 07:23:27.304"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 07:23:27.305" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170816 07:23:27.305" endtime="20170816 07:23:27.305"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 07:23:27.584" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170816 07:23:27.306" endtime="20170816 07:23:27.584"></status>
</kw>
<msg timestamp="20170816 07:23:27.584" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 07:23:27.584" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:23:27.306" endtime="20170816 07:23:27.584"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 07:23:27.585" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:23:27.584" endtime="20170816 07:23:27.585"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:23:27.585" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:23:27.585" endtime="20170816 07:23:27.585"></status>
</kw>
<status status="PASS" starttime="20170816 07:23:27.300" endtime="20170816 07:23:27.586"></status>
</kw>
<status status="PASS" starttime="20170816 07:23:27.300" endtime="20170816 07:23:27.586"></status>
</kw>
<status status="PASS" starttime="20170816 07:23:27.299" endtime="20170816 07:23:27.586"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 07:23:27.586" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status status="PASS" starttime="20170816 07:23:27.586" endtime="20170816 07:23:27.586"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:23:27.588" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:23:27.588" endtime="20170816 07:23:27.588"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:23:27.589" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:23:27.589" endtime="20170816 07:23:27.590"></status>
</kw>
<status status="PASS" starttime="20170816 07:23:27.589" endtime="20170816 07:23:27.590"></status>
</kw>
<status status="PASS" starttime="20170816 07:23:27.587" endtime="20170816 07:23:27.590"></status>
</kw>
<status status="PASS" starttime="20170816 07:23:27.587" endtime="20170816 07:23:27.590"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 07:23:28.363" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg timestamp="20170816 07:23:28.363" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:23:27.590" endtime="20170816 07:23:28.363"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:23:28.365" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:23:28.364" endtime="20170816 07:23:28.365"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:23:28.366" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:23:28.366" endtime="20170816 07:23:28.366"></status>
</kw>
<status status="PASS" starttime="20170816 07:23:28.365" endtime="20170816 07:23:28.366"></status>
</kw>
<status status="PASS" starttime="20170816 07:23:28.364" endtime="20170816 07:23:28.366"></status>
</kw>
<status status="PASS" starttime="20170816 07:23:28.363" endtime="20170816 07:23:28.366"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 07:23:28.367" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170816 07:23:28.366" endtime="20170816 07:23:28.367"></status>
</kw>
<msg timestamp="20170816 07:23:28.367" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:23:27.298" endtime="20170816 07:23:28.367"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:23:28.367" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:23:28.367" endtime="20170816 07:23:28.368"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 07:23:28.368" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 07:23:28.368" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 07:23:28.368" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170816 07:23:28.368" endtime="20170816 07:23:28.368"></status>
</kw>
<msg timestamp="20170816 07:23:28.369" level="INFO">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="PASS" starttime="20170816 07:23:27.297" endtime="20170816 07:23:28.369"></status>
</kw>
<msg timestamp="20170816 07:23:28.369" level="INFO">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="PASS" starttime="20170816 07:23:27.297" endtime="20170816 07:23:28.369"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg timestamp="20170816 07:23:28.369" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170816 07:23:28.370" level="FAIL">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="FAIL" starttime="20170816 07:23:28.369" endtime="20170816 07:23:28.370"></status>
</kw>
<status status="FAIL" starttime="20170816 07:23:26.466" endtime="20170816 07:23:28.370"></status>
</kw>
<status status="FAIL" starttime="20170816 07:23:24.244" endtime="20170816 07:23:28.370"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 07:23:38.375" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170816 07:23:38.375" endtime="20170816 07:23:38.375"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 07:23:38.376" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170816 07:23:38.376" endtime="20170816 07:23:38.376"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 07:23:38.377" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170816 07:23:38.376" endtime="20170816 07:23:38.377"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 07:23:38.377" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170816 07:23:38.377" endtime="20170816 07:23:38.377"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 07:23:38.876" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170816 07:23:38.378" endtime="20170816 07:23:38.876"></status>
</kw>
<msg timestamp="20170816 07:23:38.876" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 07:23:38.876" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:23:38.378" endtime="20170816 07:23:38.876"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 07:23:38.877" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:23:38.876" endtime="20170816 07:23:38.877"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:23:38.877" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:23:38.877" endtime="20170816 07:23:38.877"></status>
</kw>
<status status="PASS" starttime="20170816 07:23:38.374" endtime="20170816 07:23:38.877"></status>
</kw>
<status status="PASS" starttime="20170816 07:23:38.374" endtime="20170816 07:23:38.877"></status>
</kw>
<status status="PASS" starttime="20170816 07:23:38.373" endtime="20170816 07:23:38.878"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 07:23:38.878" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20170816 07:23:38.878" endtime="20170816 07:23:38.878"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:23:38.880" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:23:38.880" endtime="20170816 07:23:38.880"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:23:38.881" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:23:38.881" endtime="20170816 07:23:38.882"></status>
</kw>
<status status="PASS" starttime="20170816 07:23:38.880" endtime="20170816 07:23:38.882"></status>
</kw>
<status status="PASS" starttime="20170816 07:23:38.879" endtime="20170816 07:23:38.882"></status>
</kw>
<status status="PASS" starttime="20170816 07:23:38.878" endtime="20170816 07:23:38.882"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 07:23:39.653" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170816 07:23:39.654" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:23:38.882" endtime="20170816 07:23:39.654"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:23:39.656" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:23:39.655" endtime="20170816 07:23:39.656"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:23:39.657" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:23:39.656" endtime="20170816 07:23:39.657"></status>
</kw>
<status status="PASS" starttime="20170816 07:23:39.656" endtime="20170816 07:23:39.657"></status>
</kw>
<status status="PASS" starttime="20170816 07:23:39.655" endtime="20170816 07:23:39.657"></status>
</kw>
<status status="PASS" starttime="20170816 07:23:39.654" endtime="20170816 07:23:39.657"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 07:23:39.657" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170816 07:23:39.657" endtime="20170816 07:23:39.657"></status>
</kw>
<msg timestamp="20170816 07:23:39.658" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:23:38.372" endtime="20170816 07:23:39.658"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:23:39.658" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:23:39.658" endtime="20170816 07:23:39.658"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 07:23:39.659" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 07:23:39.659" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 07:23:39.659" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170816 07:23:39.659" endtime="20170816 07:23:39.659"></status>
</kw>
<msg timestamp="20170816 07:23:39.659" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" starttime="20170816 07:23:38.372" endtime="20170816 07:23:39.659"></status>
</kw>
<msg timestamp="20170816 07:23:39.660" level="INFO">${power_state} = On</msg>
<status status="PASS" starttime="20170816 07:23:38.371" endtime="20170816 07:23:39.660"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" starttime="20170816 07:23:39.660" endtime="20170816 07:23:39.660"></status>
</kw>
<status status="PASS" starttime="20170816 07:23:38.371" endtime="20170816 07:23:39.660"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 07:23:39.664" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170816 07:23:39.663" endtime="20170816 07:23:39.664"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 07:23:39.665" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170816 07:23:39.664" endtime="20170816 07:23:39.665"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 07:23:39.665" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170816 07:23:39.665" endtime="20170816 07:23:39.665"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 07:23:39.666" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170816 07:23:39.666" endtime="20170816 07:23:39.666"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 07:23:39.933" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170816 07:23:39.667" endtime="20170816 07:23:39.934"></status>
</kw>
<msg timestamp="20170816 07:23:39.934" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 07:23:39.934" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:23:39.666" endtime="20170816 07:23:39.934"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 07:23:39.934" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:23:39.934" endtime="20170816 07:23:39.935"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:23:39.935" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:23:39.935" endtime="20170816 07:23:39.935"></status>
</kw>
<status status="PASS" starttime="20170816 07:23:39.663" endtime="20170816 07:23:39.935"></status>
</kw>
<status status="PASS" starttime="20170816 07:23:39.663" endtime="20170816 07:23:39.935"></status>
</kw>
<status status="PASS" starttime="20170816 07:23:39.662" endtime="20170816 07:23:39.936"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 07:23:39.936" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" starttime="20170816 07:23:39.936" endtime="20170816 07:23:39.936"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:23:39.938" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:23:39.938" endtime="20170816 07:23:39.939"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:23:39.940" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:23:39.939" endtime="20170816 07:23:39.940"></status>
</kw>
<status status="PASS" starttime="20170816 07:23:39.939" endtime="20170816 07:23:39.940"></status>
</kw>
<status status="PASS" starttime="20170816 07:23:39.937" endtime="20170816 07:23:39.940"></status>
</kw>
<status status="PASS" starttime="20170816 07:23:39.937" endtime="20170816 07:23:39.940"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 07:23:40.786" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170816 07:23:40.786" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:23:39.940" endtime="20170816 07:23:40.786"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:23:40.788" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:23:40.787" endtime="20170816 07:23:40.788"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:23:40.789" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:23:40.788" endtime="20170816 07:23:40.789"></status>
</kw>
<status status="PASS" starttime="20170816 07:23:40.788" endtime="20170816 07:23:40.789"></status>
</kw>
<status status="PASS" starttime="20170816 07:23:40.787" endtime="20170816 07:23:40.789"></status>
</kw>
<status status="PASS" starttime="20170816 07:23:40.786" endtime="20170816 07:23:40.789"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 07:23:40.789" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170816 07:23:40.789" endtime="20170816 07:23:40.789"></status>
</kw>
<msg timestamp="20170816 07:23:40.790" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:23:39.661" endtime="20170816 07:23:40.790"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:23:40.790" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:23:40.790" endtime="20170816 07:23:40.790"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 07:23:40.791" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 07:23:40.791" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 07:23:40.791" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170816 07:23:40.791" endtime="20170816 07:23:40.791"></status>
</kw>
<msg timestamp="20170816 07:23:40.791" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" starttime="20170816 07:23:39.661" endtime="20170816 07:23:40.791"></status>
</kw>
<msg timestamp="20170816 07:23:40.792" level="INFO">${host_state} = Running</msg>
<status status="PASS" starttime="20170816 07:23:39.661" endtime="20170816 07:23:40.792"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status status="PASS" starttime="20170816 07:23:40.792" endtime="20170816 07:23:40.792"></status>
</kw>
<kw library="state_manager" name="Is OS Booted">
<doc>Check OS status.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Is OS Starting</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 07:23:40.797" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170816 07:23:40.797" endtime="20170816 07:23:40.798"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 07:23:40.798" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170816 07:23:40.798" endtime="20170816 07:23:40.798"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 07:23:40.799" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170816 07:23:40.798" endtime="20170816 07:23:40.799"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 07:23:40.799" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170816 07:23:40.799" endtime="20170816 07:23:40.799"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 07:23:41.293" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170816 07:23:40.800" endtime="20170816 07:23:41.293"></status>
</kw>
<msg timestamp="20170816 07:23:41.293" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 07:23:41.293" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:23:40.800" endtime="20170816 07:23:41.293"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 07:23:41.294" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:23:41.293" endtime="20170816 07:23:41.294"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:23:41.294" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:23:41.294" endtime="20170816 07:23:41.294"></status>
</kw>
<status status="PASS" starttime="20170816 07:23:40.796" endtime="20170816 07:23:41.294"></status>
</kw>
<status status="PASS" starttime="20170816 07:23:40.796" endtime="20170816 07:23:41.295"></status>
</kw>
<status status="PASS" starttime="20170816 07:23:40.795" endtime="20170816 07:23:41.295"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 07:23:41.295" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" starttime="20170816 07:23:41.295" endtime="20170816 07:23:41.295"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:23:41.297" level="INFO">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:23:41.297" endtime="20170816 07:23:41.297"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:23:41.298" level="INFO">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:23:41.298" endtime="20170816 07:23:41.298"></status>
</kw>
<status status="PASS" starttime="20170816 07:23:41.297" endtime="20170816 07:23:41.298"></status>
</kw>
<status status="PASS" starttime="20170816 07:23:41.296" endtime="20170816 07:23:41.299"></status>
</kw>
<status status="PASS" starttime="20170816 07:23:41.296" endtime="20170816 07:23:41.299"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 07:23:41.912" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170816 07:23:41.912" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:23:41.299" endtime="20170816 07:23:41.912"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:23:41.917" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:23:41.916" endtime="20170816 07:23:41.917"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:23:41.918" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:23:41.917" endtime="20170816 07:23:41.918"></status>
</kw>
<status status="PASS" starttime="20170816 07:23:41.917" endtime="20170816 07:23:41.918"></status>
</kw>
<status status="PASS" starttime="20170816 07:23:41.913" endtime="20170816 07:23:41.918"></status>
</kw>
<status status="PASS" starttime="20170816 07:23:41.913" endtime="20170816 07:23:41.918"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 07:23:41.918" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170816 07:23:41.918" endtime="20170816 07:23:41.919"></status>
</kw>
<msg timestamp="20170816 07:23:41.919" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:23:40.794" endtime="20170816 07:23:41.919"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:23:41.919" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:23:41.919" endtime="20170816 07:23:41.919"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 07:23:41.920" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 07:23:41.920" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 07:23:41.920" level="INFO">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170816 07:23:41.920" endtime="20170816 07:23:41.920"></status>
</kw>
<msg timestamp="20170816 07:23:41.920" level="INFO">${state} = Off</msg>
<status status="PASS" starttime="20170816 07:23:40.794" endtime="20170816 07:23:41.920"></status>
</kw>
<msg timestamp="20170816 07:23:41.921" level="INFO">${boot_progress} = Off</msg>
<status status="PASS" starttime="20170816 07:23:40.793" endtime="20170816 07:23:41.921"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170816 07:23:41.921" level="FAIL">Off != FW Progress, Starting OS</msg>
<status status="FAIL" starttime="20170816 07:23:41.921" endtime="20170816 07:23:41.921"></status>
</kw>
<status status="FAIL" starttime="20170816 07:23:40.793" endtime="20170816 07:23:41.922"></status>
</kw>
<msg timestamp="20170816 07:23:41.922" level="INFO">${status} = False</msg>
<status status="PASS" starttime="20170816 07:23:40.793" endtime="20170816 07:23:41.922"></status>
</kw>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${True}'</arg>
<arg>${True}</arg>
</arguments>
<status status="PASS" starttime="20170816 07:23:41.922" endtime="20170816 07:23:41.922"></status>
</kw>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 07:23:41.927" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170816 07:23:41.926" endtime="20170816 07:23:41.927"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 07:23:41.928" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170816 07:23:41.928" endtime="20170816 07:23:41.928"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 07:23:41.929" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170816 07:23:41.929" endtime="20170816 07:23:41.929"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 07:23:41.930" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170816 07:23:41.929" endtime="20170816 07:23:41.930"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 07:23:42.252" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170816 07:23:41.931" endtime="20170816 07:23:42.253"></status>
</kw>
<msg timestamp="20170816 07:23:42.253" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 07:23:42.253" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:23:41.930" endtime="20170816 07:23:42.253"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 07:23:42.253" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:23:42.253" endtime="20170816 07:23:42.254"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:23:42.254" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:23:42.254" endtime="20170816 07:23:42.254"></status>
</kw>
<status status="PASS" starttime="20170816 07:23:41.926" endtime="20170816 07:23:42.254"></status>
</kw>
<status status="PASS" starttime="20170816 07:23:41.925" endtime="20170816 07:23:42.254"></status>
</kw>
<status status="PASS" starttime="20170816 07:23:41.924" endtime="20170816 07:23:42.255"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 07:23:42.255" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status status="PASS" starttime="20170816 07:23:42.255" endtime="20170816 07:23:42.255"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:23:42.258" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:23:42.257" endtime="20170816 07:23:42.258"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:23:42.258" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:23:42.258" endtime="20170816 07:23:42.259"></status>
</kw>
<status status="PASS" starttime="20170816 07:23:42.258" endtime="20170816 07:23:42.259"></status>
</kw>
<status status="PASS" starttime="20170816 07:23:42.256" endtime="20170816 07:23:42.259"></status>
</kw>
<status status="PASS" starttime="20170816 07:23:42.255" endtime="20170816 07:23:42.259"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 07:23:42.397" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg timestamp="20170816 07:23:42.397" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:23:42.259" endtime="20170816 07:23:42.397"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:23:42.399" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:23:42.398" endtime="20170816 07:23:42.399"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:23:42.400" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:23:42.399" endtime="20170816 07:23:42.400"></status>
</kw>
<status status="PASS" starttime="20170816 07:23:42.399" endtime="20170816 07:23:42.400"></status>
</kw>
<status status="PASS" starttime="20170816 07:23:42.398" endtime="20170816 07:23:42.400"></status>
</kw>
<status status="PASS" starttime="20170816 07:23:42.397" endtime="20170816 07:23:42.400"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 07:23:42.400" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170816 07:23:42.400" endtime="20170816 07:23:42.401"></status>
</kw>
<msg timestamp="20170816 07:23:42.401" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:23:41.923" endtime="20170816 07:23:42.401"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:23:42.401" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:23:42.401" endtime="20170816 07:23:42.401"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 07:23:42.402" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 07:23:42.402" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 07:23:42.402" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170816 07:23:42.402" endtime="20170816 07:23:42.402"></status>
</kw>
<msg timestamp="20170816 07:23:42.402" level="INFO">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="PASS" starttime="20170816 07:23:41.923" endtime="20170816 07:23:42.402"></status>
</kw>
<msg timestamp="20170816 07:23:42.403" level="INFO">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="PASS" starttime="20170816 07:23:41.922" endtime="20170816 07:23:42.403"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg timestamp="20170816 07:23:42.403" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170816 07:23:42.403" level="FAIL">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="FAIL" starttime="20170816 07:23:42.403" endtime="20170816 07:23:42.404"></status>
</kw>
<status status="FAIL" starttime="20170816 07:23:40.792" endtime="20170816 07:23:42.404"></status>
</kw>
<status status="FAIL" starttime="20170816 07:23:38.370" endtime="20170816 07:23:42.404"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 07:23:52.409" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170816 07:23:52.408" endtime="20170816 07:23:52.409"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 07:23:52.410" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170816 07:23:52.409" endtime="20170816 07:23:52.410"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 07:23:52.410" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170816 07:23:52.410" endtime="20170816 07:23:52.410"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 07:23:52.411" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170816 07:23:52.411" endtime="20170816 07:23:52.411"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 07:23:52.819" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170816 07:23:52.412" endtime="20170816 07:23:52.819"></status>
</kw>
<msg timestamp="20170816 07:23:52.819" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 07:23:52.819" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:23:52.411" endtime="20170816 07:23:52.819"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 07:23:52.820" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:23:52.820" endtime="20170816 07:23:52.820"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:23:52.821" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:23:52.820" endtime="20170816 07:23:52.821"></status>
</kw>
<status status="PASS" starttime="20170816 07:23:52.408" endtime="20170816 07:23:52.821"></status>
</kw>
<status status="PASS" starttime="20170816 07:23:52.407" endtime="20170816 07:23:52.821"></status>
</kw>
<status status="PASS" starttime="20170816 07:23:52.407" endtime="20170816 07:23:52.821"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 07:23:52.822" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20170816 07:23:52.821" endtime="20170816 07:23:52.822"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:23:52.824" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:23:52.823" endtime="20170816 07:23:52.824"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:23:52.825" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:23:52.825" endtime="20170816 07:23:52.825"></status>
</kw>
<status status="PASS" starttime="20170816 07:23:52.824" endtime="20170816 07:23:52.825"></status>
</kw>
<status status="PASS" starttime="20170816 07:23:52.823" endtime="20170816 07:23:52.825"></status>
</kw>
<status status="PASS" starttime="20170816 07:23:52.822" endtime="20170816 07:23:52.825"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 07:23:56.831" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170816 07:23:56.832" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:23:52.826" endtime="20170816 07:23:56.832"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:23:56.833" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:23:56.833" endtime="20170816 07:23:56.834"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:23:56.834" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:23:56.834" endtime="20170816 07:23:56.834"></status>
</kw>
<status status="PASS" starttime="20170816 07:23:56.834" endtime="20170816 07:23:56.835"></status>
</kw>
<status status="PASS" starttime="20170816 07:23:56.832" endtime="20170816 07:23:56.835"></status>
</kw>
<status status="PASS" starttime="20170816 07:23:56.832" endtime="20170816 07:23:56.835"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 07:23:56.835" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170816 07:23:56.835" endtime="20170816 07:23:56.835"></status>
</kw>
<msg timestamp="20170816 07:23:56.836" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:23:52.406" endtime="20170816 07:23:56.836"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:23:56.836" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:23:56.836" endtime="20170816 07:23:56.836"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 07:23:56.837" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 07:23:56.837" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 07:23:56.837" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170816 07:23:56.836" endtime="20170816 07:23:56.837"></status>
</kw>
<msg timestamp="20170816 07:23:56.837" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" starttime="20170816 07:23:52.406" endtime="20170816 07:23:56.837"></status>
</kw>
<msg timestamp="20170816 07:23:56.838" level="INFO">${power_state} = On</msg>
<status status="PASS" starttime="20170816 07:23:52.405" endtime="20170816 07:23:56.838"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" starttime="20170816 07:23:56.838" endtime="20170816 07:23:56.838"></status>
</kw>
<status status="PASS" starttime="20170816 07:23:52.405" endtime="20170816 07:23:56.838"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 07:23:56.842" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170816 07:23:56.842" endtime="20170816 07:23:56.842"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 07:23:56.843" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170816 07:23:56.843" endtime="20170816 07:23:56.843"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 07:23:56.844" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170816 07:23:56.843" endtime="20170816 07:23:56.844"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 07:23:56.844" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170816 07:23:56.844" endtime="20170816 07:23:56.844"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 07:23:57.183" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170816 07:23:56.845" endtime="20170816 07:23:57.183"></status>
</kw>
<msg timestamp="20170816 07:23:57.183" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 07:23:57.183" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:23:56.845" endtime="20170816 07:23:57.183"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 07:23:57.184" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:23:57.183" endtime="20170816 07:23:57.184"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:23:57.184" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:23:57.184" endtime="20170816 07:23:57.184"></status>
</kw>
<status status="PASS" starttime="20170816 07:23:56.841" endtime="20170816 07:23:57.185"></status>
</kw>
<status status="PASS" starttime="20170816 07:23:56.840" endtime="20170816 07:23:57.185"></status>
</kw>
<status status="PASS" starttime="20170816 07:23:56.840" endtime="20170816 07:23:57.185"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 07:23:57.185" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" starttime="20170816 07:23:57.185" endtime="20170816 07:23:57.185"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:23:57.187" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:23:57.187" endtime="20170816 07:23:57.187"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:23:57.188" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:23:57.188" endtime="20170816 07:23:57.188"></status>
</kw>
<status status="PASS" starttime="20170816 07:23:57.188" endtime="20170816 07:23:57.189"></status>
</kw>
<status status="PASS" starttime="20170816 07:23:57.186" endtime="20170816 07:23:57.189"></status>
</kw>
<status status="PASS" starttime="20170816 07:23:57.186" endtime="20170816 07:23:57.189"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 07:23:57.407" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170816 07:23:57.407" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:23:57.189" endtime="20170816 07:23:57.407"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:23:57.409" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:23:57.408" endtime="20170816 07:23:57.409"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:23:57.410" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:23:57.409" endtime="20170816 07:23:57.410"></status>
</kw>
<status status="PASS" starttime="20170816 07:23:57.409" endtime="20170816 07:23:57.410"></status>
</kw>
<status status="PASS" starttime="20170816 07:23:57.408" endtime="20170816 07:23:57.410"></status>
</kw>
<status status="PASS" starttime="20170816 07:23:57.407" endtime="20170816 07:23:57.410"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 07:23:57.411" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170816 07:23:57.410" endtime="20170816 07:23:57.411"></status>
</kw>
<msg timestamp="20170816 07:23:57.411" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:23:56.839" endtime="20170816 07:23:57.411"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:23:57.411" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:23:57.411" endtime="20170816 07:23:57.412"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 07:23:57.412" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 07:23:57.412" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 07:23:57.412" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170816 07:23:57.412" endtime="20170816 07:23:57.412"></status>
</kw>
<msg timestamp="20170816 07:23:57.413" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" starttime="20170816 07:23:56.839" endtime="20170816 07:23:57.413"></status>
</kw>
<msg timestamp="20170816 07:23:57.413" level="INFO">${host_state} = Running</msg>
<status status="PASS" starttime="20170816 07:23:56.838" endtime="20170816 07:23:57.413"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status status="PASS" starttime="20170816 07:23:57.413" endtime="20170816 07:23:57.414"></status>
</kw>
<kw library="state_manager" name="Is OS Booted">
<doc>Check OS status.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Is OS Starting</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 07:23:57.418" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170816 07:23:57.418" endtime="20170816 07:23:57.419"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 07:23:57.419" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170816 07:23:57.419" endtime="20170816 07:23:57.419"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 07:23:57.420" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170816 07:23:57.420" endtime="20170816 07:23:57.420"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 07:23:57.421" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170816 07:23:57.420" endtime="20170816 07:23:57.421"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 07:23:57.727" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170816 07:23:57.421" endtime="20170816 07:23:57.727"></status>
</kw>
<msg timestamp="20170816 07:23:57.727" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 07:23:57.727" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:23:57.421" endtime="20170816 07:23:57.727"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 07:23:57.728" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:23:57.728" endtime="20170816 07:23:57.728"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:23:57.729" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:23:57.728" endtime="20170816 07:23:57.729"></status>
</kw>
<status status="PASS" starttime="20170816 07:23:57.418" endtime="20170816 07:23:57.729"></status>
</kw>
<status status="PASS" starttime="20170816 07:23:57.417" endtime="20170816 07:23:57.729"></status>
</kw>
<status status="PASS" starttime="20170816 07:23:57.416" endtime="20170816 07:23:57.729"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 07:23:57.730" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" starttime="20170816 07:23:57.729" endtime="20170816 07:23:57.730"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:23:57.732" level="INFO">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:23:57.731" endtime="20170816 07:23:57.732"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:23:57.733" level="INFO">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:23:57.732" endtime="20170816 07:23:57.733"></status>
</kw>
<status status="PASS" starttime="20170816 07:23:57.732" endtime="20170816 07:23:57.733"></status>
</kw>
<status status="PASS" starttime="20170816 07:23:57.730" endtime="20170816 07:23:57.733"></status>
</kw>
<status status="PASS" starttime="20170816 07:23:57.730" endtime="20170816 07:23:57.733"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 07:23:57.948" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170816 07:23:57.948" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:23:57.733" endtime="20170816 07:23:57.948"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:23:57.950" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:23:57.949" endtime="20170816 07:23:57.950"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:23:57.951" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:23:57.951" endtime="20170816 07:23:57.951"></status>
</kw>
<status status="PASS" starttime="20170816 07:23:57.950" endtime="20170816 07:23:57.951"></status>
</kw>
<status status="PASS" starttime="20170816 07:23:57.949" endtime="20170816 07:23:57.951"></status>
</kw>
<status status="PASS" starttime="20170816 07:23:57.948" endtime="20170816 07:23:57.951"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 07:23:57.952" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170816 07:23:57.951" endtime="20170816 07:23:57.952"></status>
</kw>
<msg timestamp="20170816 07:23:57.952" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:23:57.416" endtime="20170816 07:23:57.952"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:23:57.952" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:23:57.952" endtime="20170816 07:23:57.953"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 07:23:57.953" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 07:23:57.953" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 07:23:57.953" level="INFO">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170816 07:23:57.953" endtime="20170816 07:23:57.953"></status>
</kw>
<msg timestamp="20170816 07:23:57.954" level="INFO">${state} = Off</msg>
<status status="PASS" starttime="20170816 07:23:57.415" endtime="20170816 07:23:57.954"></status>
</kw>
<msg timestamp="20170816 07:23:57.954" level="INFO">${boot_progress} = Off</msg>
<status status="PASS" starttime="20170816 07:23:57.415" endtime="20170816 07:23:57.954"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170816 07:23:57.954" level="FAIL">Off != FW Progress, Starting OS</msg>
<status status="FAIL" starttime="20170816 07:23:57.954" endtime="20170816 07:23:57.955"></status>
</kw>
<status status="FAIL" starttime="20170816 07:23:57.414" endtime="20170816 07:23:57.955"></status>
</kw>
<msg timestamp="20170816 07:23:57.955" level="INFO">${status} = False</msg>
<status status="PASS" starttime="20170816 07:23:57.414" endtime="20170816 07:23:57.955"></status>
</kw>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${True}'</arg>
<arg>${True}</arg>
</arguments>
<status status="PASS" starttime="20170816 07:23:57.955" endtime="20170816 07:23:57.955"></status>
</kw>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 07:23:57.959" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170816 07:23:57.959" endtime="20170816 07:23:57.960"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 07:23:57.961" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170816 07:23:57.960" endtime="20170816 07:23:57.961"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 07:23:57.961" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170816 07:23:57.961" endtime="20170816 07:23:57.961"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 07:23:57.962" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170816 07:23:57.962" endtime="20170816 07:23:57.962"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 07:23:58.283" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170816 07:23:57.963" endtime="20170816 07:23:58.284"></status>
</kw>
<msg timestamp="20170816 07:23:58.284" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 07:23:58.284" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:23:57.963" endtime="20170816 07:23:58.284"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 07:23:58.284" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:23:58.284" endtime="20170816 07:23:58.284"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:23:58.285" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:23:58.285" endtime="20170816 07:23:58.285"></status>
</kw>
<status status="PASS" starttime="20170816 07:23:57.958" endtime="20170816 07:23:58.285"></status>
</kw>
<status status="PASS" starttime="20170816 07:23:57.958" endtime="20170816 07:23:58.285"></status>
</kw>
<status status="PASS" starttime="20170816 07:23:57.957" endtime="20170816 07:23:58.286"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 07:23:58.286" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status status="PASS" starttime="20170816 07:23:58.286" endtime="20170816 07:23:58.286"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:23:58.288" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:23:58.287" endtime="20170816 07:23:58.288"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:23:58.289" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:23:58.289" endtime="20170816 07:23:58.289"></status>
</kw>
<status status="PASS" starttime="20170816 07:23:58.288" endtime="20170816 07:23:58.289"></status>
</kw>
<status status="PASS" starttime="20170816 07:23:58.287" endtime="20170816 07:23:58.289"></status>
</kw>
<status status="PASS" starttime="20170816 07:23:58.286" endtime="20170816 07:23:58.289"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 07:23:58.423" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg timestamp="20170816 07:23:58.423" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:23:58.290" endtime="20170816 07:23:58.423"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:23:58.425" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:23:58.424" endtime="20170816 07:23:58.425"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:23:58.426" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:23:58.426" endtime="20170816 07:23:58.426"></status>
</kw>
<status status="PASS" starttime="20170816 07:23:58.425" endtime="20170816 07:23:58.426"></status>
</kw>
<status status="PASS" starttime="20170816 07:23:58.424" endtime="20170816 07:23:58.426"></status>
</kw>
<status status="PASS" starttime="20170816 07:23:58.424" endtime="20170816 07:23:58.426"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 07:23:58.427" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170816 07:23:58.427" endtime="20170816 07:23:58.427"></status>
</kw>
<msg timestamp="20170816 07:23:58.427" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:23:57.957" endtime="20170816 07:23:58.427"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:23:58.428" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:23:58.427" endtime="20170816 07:23:58.428"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 07:23:58.428" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 07:23:58.428" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 07:23:58.428" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170816 07:23:58.428" endtime="20170816 07:23:58.429"></status>
</kw>
<msg timestamp="20170816 07:23:58.429" level="INFO">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="PASS" starttime="20170816 07:23:57.956" endtime="20170816 07:23:58.429"></status>
</kw>
<msg timestamp="20170816 07:23:58.429" level="INFO">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="PASS" starttime="20170816 07:23:57.956" endtime="20170816 07:23:58.429"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg timestamp="20170816 07:23:58.430" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170816 07:23:58.430" level="FAIL">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="FAIL" starttime="20170816 07:23:58.429" endtime="20170816 07:23:58.430"></status>
</kw>
<status status="FAIL" starttime="20170816 07:23:57.414" endtime="20170816 07:23:58.430"></status>
</kw>
<status status="FAIL" starttime="20170816 07:23:52.404" endtime="20170816 07:23:58.430"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 07:24:08.435" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170816 07:24:08.435" endtime="20170816 07:24:08.436"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 07:24:08.436" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170816 07:24:08.436" endtime="20170816 07:24:08.436"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 07:24:08.437" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170816 07:24:08.437" endtime="20170816 07:24:08.437"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 07:24:08.438" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170816 07:24:08.437" endtime="20170816 07:24:08.438"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 07:24:08.904" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170816 07:24:08.438" endtime="20170816 07:24:08.905"></status>
</kw>
<msg timestamp="20170816 07:24:08.905" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 07:24:08.905" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:24:08.438" endtime="20170816 07:24:08.905"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 07:24:08.905" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:24:08.905" endtime="20170816 07:24:08.906"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:24:08.906" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:24:08.906" endtime="20170816 07:24:08.906"></status>
</kw>
<status status="PASS" starttime="20170816 07:24:08.434" endtime="20170816 07:24:08.906"></status>
</kw>
<status status="PASS" starttime="20170816 07:24:08.434" endtime="20170816 07:24:08.907"></status>
</kw>
<status status="PASS" starttime="20170816 07:24:08.433" endtime="20170816 07:24:08.907"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 07:24:08.907" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20170816 07:24:08.907" endtime="20170816 07:24:08.907"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:24:08.909" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:24:08.909" endtime="20170816 07:24:08.909"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:24:08.910" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:24:08.910" endtime="20170816 07:24:08.910"></status>
</kw>
<status status="PASS" starttime="20170816 07:24:08.909" endtime="20170816 07:24:08.910"></status>
</kw>
<status status="PASS" starttime="20170816 07:24:08.908" endtime="20170816 07:24:08.911"></status>
</kw>
<status status="PASS" starttime="20170816 07:24:08.908" endtime="20170816 07:24:08.911"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 07:24:14.677" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170816 07:24:14.677" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:24:08.911" endtime="20170816 07:24:14.677"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:24:14.679" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:24:14.678" endtime="20170816 07:24:14.679"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:24:14.680" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:24:14.680" endtime="20170816 07:24:14.680"></status>
</kw>
<status status="PASS" starttime="20170816 07:24:14.679" endtime="20170816 07:24:14.680"></status>
</kw>
<status status="PASS" starttime="20170816 07:24:14.678" endtime="20170816 07:24:14.680"></status>
</kw>
<status status="PASS" starttime="20170816 07:24:14.677" endtime="20170816 07:24:14.680"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 07:24:14.681" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170816 07:24:14.681" endtime="20170816 07:24:14.681"></status>
</kw>
<msg timestamp="20170816 07:24:14.681" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:24:08.433" endtime="20170816 07:24:14.681"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:24:14.682" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:24:14.681" endtime="20170816 07:24:14.682"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 07:24:14.682" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 07:24:14.682" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 07:24:14.682" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170816 07:24:14.682" endtime="20170816 07:24:14.682"></status>
</kw>
<msg timestamp="20170816 07:24:14.683" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" starttime="20170816 07:24:08.432" endtime="20170816 07:24:14.683"></status>
</kw>
<msg timestamp="20170816 07:24:14.683" level="INFO">${power_state} = Off</msg>
<status status="PASS" starttime="20170816 07:24:08.431" endtime="20170816 07:24:14.683"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20170816 07:24:14.684" level="FAIL">On != Off</msg>
<status status="FAIL" starttime="20170816 07:24:14.684" endtime="20170816 07:24:14.684"></status>
</kw>
<status status="FAIL" starttime="20170816 07:24:08.431" endtime="20170816 07:24:14.685"></status>
</kw>
<status status="FAIL" starttime="20170816 07:24:08.431" endtime="20170816 07:24:14.685"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 07:24:24.691" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170816 07:24:24.691" endtime="20170816 07:24:24.692"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 07:24:24.693" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170816 07:24:24.692" endtime="20170816 07:24:24.693"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 07:24:24.694" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170816 07:24:24.693" endtime="20170816 07:24:24.694"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 07:24:24.695" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170816 07:24:24.694" endtime="20170816 07:24:24.695"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 07:24:25.278" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170816 07:24:24.696" endtime="20170816 07:24:25.278"></status>
</kw>
<msg timestamp="20170816 07:24:25.279" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 07:24:25.279" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:24:24.695" endtime="20170816 07:24:25.279"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 07:24:25.279" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:24:25.279" endtime="20170816 07:24:25.279"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:24:25.280" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:24:25.280" endtime="20170816 07:24:25.280"></status>
</kw>
<status status="PASS" starttime="20170816 07:24:24.690" endtime="20170816 07:24:25.280"></status>
</kw>
<status status="PASS" starttime="20170816 07:24:24.690" endtime="20170816 07:24:25.280"></status>
</kw>
<status status="PASS" starttime="20170816 07:24:24.689" endtime="20170816 07:24:25.280"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 07:24:25.281" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20170816 07:24:25.281" endtime="20170816 07:24:25.281"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:24:25.283" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:24:25.282" endtime="20170816 07:24:25.283"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:24:25.284" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:24:25.284" endtime="20170816 07:24:25.284"></status>
</kw>
<status status="PASS" starttime="20170816 07:24:25.283" endtime="20170816 07:24:25.284"></status>
</kw>
<status status="PASS" starttime="20170816 07:24:25.282" endtime="20170816 07:24:25.284"></status>
</kw>
<status status="PASS" starttime="20170816 07:24:25.281" endtime="20170816 07:24:25.284"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 07:24:25.886" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170816 07:24:25.886" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:24:25.285" endtime="20170816 07:24:25.886"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:24:25.888" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:24:25.887" endtime="20170816 07:24:25.888"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:24:25.889" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:24:25.888" endtime="20170816 07:24:25.889"></status>
</kw>
<status status="PASS" starttime="20170816 07:24:25.888" endtime="20170816 07:24:25.889"></status>
</kw>
<status status="PASS" starttime="20170816 07:24:25.887" endtime="20170816 07:24:25.889"></status>
</kw>
<status status="PASS" starttime="20170816 07:24:25.886" endtime="20170816 07:24:25.889"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 07:24:25.889" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170816 07:24:25.889" endtime="20170816 07:24:25.889"></status>
</kw>
<msg timestamp="20170816 07:24:25.890" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:24:24.688" endtime="20170816 07:24:25.890"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:24:25.890" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:24:25.890" endtime="20170816 07:24:25.890"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 07:24:25.891" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 07:24:25.891" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 07:24:25.891" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170816 07:24:25.891" endtime="20170816 07:24:25.891"></status>
</kw>
<msg timestamp="20170816 07:24:25.891" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" starttime="20170816 07:24:24.687" endtime="20170816 07:24:25.891"></status>
</kw>
<msg timestamp="20170816 07:24:25.892" level="INFO">${power_state} = On</msg>
<status status="PASS" starttime="20170816 07:24:24.686" endtime="20170816 07:24:25.892"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" starttime="20170816 07:24:25.892" endtime="20170816 07:24:25.892"></status>
</kw>
<status status="PASS" starttime="20170816 07:24:24.686" endtime="20170816 07:24:25.892"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 07:24:25.896" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170816 07:24:25.895" endtime="20170816 07:24:25.897"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 07:24:25.897" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170816 07:24:25.897" endtime="20170816 07:24:25.897"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 07:24:25.898" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170816 07:24:25.897" endtime="20170816 07:24:25.898"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 07:24:25.899" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170816 07:24:25.898" endtime="20170816 07:24:25.899"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 07:24:26.325" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170816 07:24:25.900" endtime="20170816 07:24:26.325"></status>
</kw>
<msg timestamp="20170816 07:24:26.325" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 07:24:26.325" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:24:25.899" endtime="20170816 07:24:26.325"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 07:24:26.326" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:24:26.325" endtime="20170816 07:24:26.326"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:24:26.326" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:24:26.326" endtime="20170816 07:24:26.326"></status>
</kw>
<status status="PASS" starttime="20170816 07:24:25.895" endtime="20170816 07:24:26.327"></status>
</kw>
<status status="PASS" starttime="20170816 07:24:25.894" endtime="20170816 07:24:26.327"></status>
</kw>
<status status="PASS" starttime="20170816 07:24:25.894" endtime="20170816 07:24:26.327"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 07:24:26.327" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" starttime="20170816 07:24:26.327" endtime="20170816 07:24:26.327"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:24:26.329" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:24:26.329" endtime="20170816 07:24:26.329"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:24:26.330" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:24:26.330" endtime="20170816 07:24:26.330"></status>
</kw>
<status status="PASS" starttime="20170816 07:24:26.330" endtime="20170816 07:24:26.331"></status>
</kw>
<status status="PASS" starttime="20170816 07:24:26.328" endtime="20170816 07:24:26.331"></status>
</kw>
<status status="PASS" starttime="20170816 07:24:26.328" endtime="20170816 07:24:26.331"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 07:24:26.756" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170816 07:24:26.756" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:24:26.331" endtime="20170816 07:24:26.756"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:24:26.758" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:24:26.757" endtime="20170816 07:24:26.758"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:24:26.759" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:24:26.758" endtime="20170816 07:24:26.759"></status>
</kw>
<status status="PASS" starttime="20170816 07:24:26.758" endtime="20170816 07:24:26.759"></status>
</kw>
<status status="PASS" starttime="20170816 07:24:26.757" endtime="20170816 07:24:26.759"></status>
</kw>
<status status="PASS" starttime="20170816 07:24:26.756" endtime="20170816 07:24:26.759"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 07:24:26.759" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170816 07:24:26.759" endtime="20170816 07:24:26.760"></status>
</kw>
<msg timestamp="20170816 07:24:26.760" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:24:25.893" endtime="20170816 07:24:26.760"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:24:26.760" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:24:26.760" endtime="20170816 07:24:26.760"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 07:24:26.761" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 07:24:26.761" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 07:24:26.761" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170816 07:24:26.761" endtime="20170816 07:24:26.761"></status>
</kw>
<msg timestamp="20170816 07:24:26.762" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" starttime="20170816 07:24:25.893" endtime="20170816 07:24:26.762"></status>
</kw>
<msg timestamp="20170816 07:24:26.762" level="INFO">${host_state} = Running</msg>
<status status="PASS" starttime="20170816 07:24:25.892" endtime="20170816 07:24:26.762"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status status="PASS" starttime="20170816 07:24:26.762" endtime="20170816 07:24:26.762"></status>
</kw>
<kw library="state_manager" name="Is OS Booted">
<doc>Check OS status.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Is OS Starting</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 07:24:26.767" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170816 07:24:26.767" endtime="20170816 07:24:26.768"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 07:24:26.768" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170816 07:24:26.768" endtime="20170816 07:24:26.768"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 07:24:26.769" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170816 07:24:26.768" endtime="20170816 07:24:26.769"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 07:24:26.769" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170816 07:24:26.769" endtime="20170816 07:24:26.770"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 07:24:27.034" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170816 07:24:26.770" endtime="20170816 07:24:27.034"></status>
</kw>
<msg timestamp="20170816 07:24:27.034" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 07:24:27.034" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:24:26.770" endtime="20170816 07:24:27.034"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 07:24:27.034" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:24:27.034" endtime="20170816 07:24:27.035"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:24:27.035" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:24:27.035" endtime="20170816 07:24:27.035"></status>
</kw>
<status status="PASS" starttime="20170816 07:24:26.766" endtime="20170816 07:24:27.035"></status>
</kw>
<status status="PASS" starttime="20170816 07:24:26.766" endtime="20170816 07:24:27.036"></status>
</kw>
<status status="PASS" starttime="20170816 07:24:26.765" endtime="20170816 07:24:27.036"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 07:24:27.036" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" starttime="20170816 07:24:27.036" endtime="20170816 07:24:27.036"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:24:27.041" level="INFO">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:24:27.040" endtime="20170816 07:24:27.041"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:24:27.042" level="INFO">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:24:27.042" endtime="20170816 07:24:27.042"></status>
</kw>
<status status="PASS" starttime="20170816 07:24:27.041" endtime="20170816 07:24:27.042"></status>
</kw>
<status status="PASS" starttime="20170816 07:24:27.037" endtime="20170816 07:24:27.043"></status>
</kw>
<status status="PASS" starttime="20170816 07:24:27.037" endtime="20170816 07:24:27.043"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 07:24:27.136" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170816 07:24:27.136" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:24:27.043" endtime="20170816 07:24:27.137"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:24:27.138" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:24:27.138" endtime="20170816 07:24:27.138"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:24:27.139" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:24:27.139" endtime="20170816 07:24:27.139"></status>
</kw>
<status status="PASS" starttime="20170816 07:24:27.138" endtime="20170816 07:24:27.139"></status>
</kw>
<status status="PASS" starttime="20170816 07:24:27.137" endtime="20170816 07:24:27.140"></status>
</kw>
<status status="PASS" starttime="20170816 07:24:27.137" endtime="20170816 07:24:27.140"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 07:24:27.140" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170816 07:24:27.140" endtime="20170816 07:24:27.140"></status>
</kw>
<msg timestamp="20170816 07:24:27.140" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:24:26.765" endtime="20170816 07:24:27.140"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:24:27.141" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:24:27.141" endtime="20170816 07:24:27.141"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 07:24:27.141" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 07:24:27.142" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 07:24:27.142" level="INFO">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170816 07:24:27.141" endtime="20170816 07:24:27.142"></status>
</kw>
<msg timestamp="20170816 07:24:27.142" level="INFO">${state} = Off</msg>
<status status="PASS" starttime="20170816 07:24:26.764" endtime="20170816 07:24:27.142"></status>
</kw>
<msg timestamp="20170816 07:24:27.142" level="INFO">${boot_progress} = Off</msg>
<status status="PASS" starttime="20170816 07:24:26.764" endtime="20170816 07:24:27.142"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170816 07:24:27.143" level="FAIL">Off != FW Progress, Starting OS</msg>
<status status="FAIL" starttime="20170816 07:24:27.142" endtime="20170816 07:24:27.143"></status>
</kw>
<status status="FAIL" starttime="20170816 07:24:26.763" endtime="20170816 07:24:27.143"></status>
</kw>
<msg timestamp="20170816 07:24:27.143" level="INFO">${status} = False</msg>
<status status="PASS" starttime="20170816 07:24:26.763" endtime="20170816 07:24:27.143"></status>
</kw>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${True}'</arg>
<arg>${True}</arg>
</arguments>
<status status="PASS" starttime="20170816 07:24:27.143" endtime="20170816 07:24:27.144"></status>
</kw>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 07:24:27.147" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170816 07:24:27.147" endtime="20170816 07:24:27.148"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 07:24:27.148" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170816 07:24:27.148" endtime="20170816 07:24:27.148"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 07:24:27.149" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170816 07:24:27.149" endtime="20170816 07:24:27.149"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 07:24:27.150" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170816 07:24:27.149" endtime="20170816 07:24:27.150"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 07:24:27.404" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170816 07:24:27.150" endtime="20170816 07:24:27.405"></status>
</kw>
<msg timestamp="20170816 07:24:27.405" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 07:24:27.405" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:24:27.150" endtime="20170816 07:24:27.405"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 07:24:27.405" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:24:27.405" endtime="20170816 07:24:27.406"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:24:27.406" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:24:27.406" endtime="20170816 07:24:27.406"></status>
</kw>
<status status="PASS" starttime="20170816 07:24:27.147" endtime="20170816 07:24:27.406"></status>
</kw>
<status status="PASS" starttime="20170816 07:24:27.146" endtime="20170816 07:24:27.406"></status>
</kw>
<status status="PASS" starttime="20170816 07:24:27.146" endtime="20170816 07:24:27.407"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 07:24:27.407" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status status="PASS" starttime="20170816 07:24:27.407" endtime="20170816 07:24:27.407"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:24:27.409" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:24:27.408" endtime="20170816 07:24:27.409"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:24:27.410" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:24:27.410" endtime="20170816 07:24:27.410"></status>
</kw>
<status status="PASS" starttime="20170816 07:24:27.409" endtime="20170816 07:24:27.410"></status>
</kw>
<status status="PASS" starttime="20170816 07:24:27.408" endtime="20170816 07:24:27.410"></status>
</kw>
<status status="PASS" starttime="20170816 07:24:27.407" endtime="20170816 07:24:27.410"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 07:24:27.516" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg timestamp="20170816 07:24:27.516" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:24:27.411" endtime="20170816 07:24:27.516"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:24:27.519" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:24:27.518" endtime="20170816 07:24:27.519"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:24:27.519" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:24:27.519" endtime="20170816 07:24:27.520"></status>
</kw>
<status status="PASS" starttime="20170816 07:24:27.519" endtime="20170816 07:24:27.520"></status>
</kw>
<status status="PASS" starttime="20170816 07:24:27.517" endtime="20170816 07:24:27.520"></status>
</kw>
<status status="PASS" starttime="20170816 07:24:27.517" endtime="20170816 07:24:27.520"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 07:24:27.520" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170816 07:24:27.520" endtime="20170816 07:24:27.520"></status>
</kw>
<msg timestamp="20170816 07:24:27.521" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:24:27.145" endtime="20170816 07:24:27.521"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:24:27.521" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:24:27.521" endtime="20170816 07:24:27.521"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 07:24:27.522" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 07:24:27.522" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 07:24:27.522" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170816 07:24:27.522" endtime="20170816 07:24:27.522"></status>
</kw>
<msg timestamp="20170816 07:24:27.522" level="INFO">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="PASS" starttime="20170816 07:24:27.144" endtime="20170816 07:24:27.523"></status>
</kw>
<msg timestamp="20170816 07:24:27.523" level="INFO">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="PASS" starttime="20170816 07:24:27.144" endtime="20170816 07:24:27.523"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg timestamp="20170816 07:24:27.523" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170816 07:24:27.523" level="FAIL">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="FAIL" starttime="20170816 07:24:27.523" endtime="20170816 07:24:27.524"></status>
</kw>
<status status="FAIL" starttime="20170816 07:24:26.763" endtime="20170816 07:24:27.524"></status>
</kw>
<status status="FAIL" starttime="20170816 07:24:24.685" endtime="20170816 07:24:27.524"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 07:24:37.529" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170816 07:24:37.529" endtime="20170816 07:24:37.529"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 07:24:37.530" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170816 07:24:37.530" endtime="20170816 07:24:37.530"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 07:24:37.531" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170816 07:24:37.530" endtime="20170816 07:24:37.531"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 07:24:37.531" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170816 07:24:37.531" endtime="20170816 07:24:37.531"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 07:24:37.716" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170816 07:24:37.532" endtime="20170816 07:24:37.716"></status>
</kw>
<msg timestamp="20170816 07:24:37.716" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 07:24:37.716" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:24:37.532" endtime="20170816 07:24:37.717"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 07:24:37.718" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:24:37.717" endtime="20170816 07:24:37.718"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:24:37.719" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:24:37.718" endtime="20170816 07:24:37.719"></status>
</kw>
<status status="PASS" starttime="20170816 07:24:37.528" endtime="20170816 07:24:37.719"></status>
</kw>
<status status="PASS" starttime="20170816 07:24:37.527" endtime="20170816 07:24:37.719"></status>
</kw>
<status status="PASS" starttime="20170816 07:24:37.527" endtime="20170816 07:24:37.719"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 07:24:37.720" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20170816 07:24:37.720" endtime="20170816 07:24:37.720"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:24:37.722" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:24:37.721" endtime="20170816 07:24:37.722"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:24:37.723" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:24:37.723" endtime="20170816 07:24:37.723"></status>
</kw>
<status status="PASS" starttime="20170816 07:24:37.722" endtime="20170816 07:24:37.723"></status>
</kw>
<status status="PASS" starttime="20170816 07:24:37.721" endtime="20170816 07:24:37.723"></status>
</kw>
<status status="PASS" starttime="20170816 07:24:37.720" endtime="20170816 07:24:37.723"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 07:24:37.787" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170816 07:24:37.788" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:24:37.724" endtime="20170816 07:24:37.788"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:24:37.789" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:24:37.789" endtime="20170816 07:24:37.789"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:24:37.791" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:24:37.790" endtime="20170816 07:24:37.791"></status>
</kw>
<status status="PASS" starttime="20170816 07:24:37.790" endtime="20170816 07:24:37.791"></status>
</kw>
<status status="PASS" starttime="20170816 07:24:37.788" endtime="20170816 07:24:37.791"></status>
</kw>
<status status="PASS" starttime="20170816 07:24:37.788" endtime="20170816 07:24:37.791"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 07:24:37.791" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170816 07:24:37.791" endtime="20170816 07:24:37.791"></status>
</kw>
<msg timestamp="20170816 07:24:37.792" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:24:37.526" endtime="20170816 07:24:37.792"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:24:37.792" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:24:37.792" endtime="20170816 07:24:37.792"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 07:24:37.793" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 07:24:37.793" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 07:24:37.793" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170816 07:24:37.793" endtime="20170816 07:24:37.793"></status>
</kw>
<msg timestamp="20170816 07:24:37.793" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" starttime="20170816 07:24:37.526" endtime="20170816 07:24:37.793"></status>
</kw>
<msg timestamp="20170816 07:24:37.794" level="INFO">${power_state} = On</msg>
<status status="PASS" starttime="20170816 07:24:37.525" endtime="20170816 07:24:37.794"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" starttime="20170816 07:24:37.794" endtime="20170816 07:24:37.794"></status>
</kw>
<status status="PASS" starttime="20170816 07:24:37.525" endtime="20170816 07:24:37.794"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 07:24:37.798" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170816 07:24:37.798" endtime="20170816 07:24:37.798"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 07:24:37.799" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170816 07:24:37.799" endtime="20170816 07:24:37.799"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 07:24:37.799" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170816 07:24:37.799" endtime="20170816 07:24:37.799"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 07:24:37.800" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170816 07:24:37.800" endtime="20170816 07:24:37.800"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 07:24:37.992" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170816 07:24:37.801" endtime="20170816 07:24:37.992"></status>
</kw>
<msg timestamp="20170816 07:24:37.992" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 07:24:37.992" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:24:37.801" endtime="20170816 07:24:37.992"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 07:24:37.993" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:24:37.993" endtime="20170816 07:24:37.993"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:24:37.994" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:24:37.993" endtime="20170816 07:24:37.994"></status>
</kw>
<status status="PASS" starttime="20170816 07:24:37.797" endtime="20170816 07:24:37.994"></status>
</kw>
<status status="PASS" starttime="20170816 07:24:37.797" endtime="20170816 07:24:37.994"></status>
</kw>
<status status="PASS" starttime="20170816 07:24:37.796" endtime="20170816 07:24:37.994"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 07:24:37.995" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" starttime="20170816 07:24:37.994" endtime="20170816 07:24:37.995"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:24:37.997" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:24:37.996" endtime="20170816 07:24:37.997"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:24:37.998" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:24:37.998" endtime="20170816 07:24:37.998"></status>
</kw>
<status status="PASS" starttime="20170816 07:24:37.997" endtime="20170816 07:24:37.998"></status>
</kw>
<status status="PASS" starttime="20170816 07:24:37.995" endtime="20170816 07:24:37.998"></status>
</kw>
<status status="PASS" starttime="20170816 07:24:37.995" endtime="20170816 07:24:37.998"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 07:24:38.124" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170816 07:24:38.124" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:24:37.999" endtime="20170816 07:24:38.124"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:24:38.126" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:24:38.125" endtime="20170816 07:24:38.126"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:24:38.127" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:24:38.127" endtime="20170816 07:24:38.127"></status>
</kw>
<status status="PASS" starttime="20170816 07:24:38.126" endtime="20170816 07:24:38.127"></status>
</kw>
<status status="PASS" starttime="20170816 07:24:38.125" endtime="20170816 07:24:38.127"></status>
</kw>
<status status="PASS" starttime="20170816 07:24:38.124" endtime="20170816 07:24:38.127"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 07:24:38.128" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170816 07:24:38.128" endtime="20170816 07:24:38.128"></status>
</kw>
<msg timestamp="20170816 07:24:38.128" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:24:37.795" endtime="20170816 07:24:38.128"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:24:38.129" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:24:38.128" endtime="20170816 07:24:38.129"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 07:24:38.129" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 07:24:38.129" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 07:24:38.129" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170816 07:24:38.129" endtime="20170816 07:24:38.129"></status>
</kw>
<msg timestamp="20170816 07:24:38.130" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" starttime="20170816 07:24:37.795" endtime="20170816 07:24:38.130"></status>
</kw>
<msg timestamp="20170816 07:24:38.130" level="INFO">${host_state} = Running</msg>
<status status="PASS" starttime="20170816 07:24:37.794" endtime="20170816 07:24:38.130"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status status="PASS" starttime="20170816 07:24:38.130" endtime="20170816 07:24:38.131"></status>
</kw>
<kw library="state_manager" name="Is OS Booted">
<doc>Check OS status.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Is OS Starting</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 07:24:38.135" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170816 07:24:38.135" endtime="20170816 07:24:38.136"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 07:24:38.136" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170816 07:24:38.136" endtime="20170816 07:24:38.136"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 07:24:38.137" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170816 07:24:38.137" endtime="20170816 07:24:38.137"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 07:24:38.138" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170816 07:24:38.137" endtime="20170816 07:24:38.138"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 07:24:38.367" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170816 07:24:38.138" endtime="20170816 07:24:38.367"></status>
</kw>
<msg timestamp="20170816 07:24:38.367" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 07:24:38.367" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:24:38.138" endtime="20170816 07:24:38.367"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 07:24:38.368" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:24:38.367" endtime="20170816 07:24:38.368"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:24:38.368" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:24:38.368" endtime="20170816 07:24:38.368"></status>
</kw>
<status status="PASS" starttime="20170816 07:24:38.134" endtime="20170816 07:24:38.369"></status>
</kw>
<status status="PASS" starttime="20170816 07:24:38.134" endtime="20170816 07:24:38.369"></status>
</kw>
<status status="PASS" starttime="20170816 07:24:38.133" endtime="20170816 07:24:38.369"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 07:24:38.369" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" starttime="20170816 07:24:38.369" endtime="20170816 07:24:38.370"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:24:38.372" level="INFO">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:24:38.371" endtime="20170816 07:24:38.372"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:24:38.373" level="INFO">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:24:38.372" endtime="20170816 07:24:38.373"></status>
</kw>
<status status="PASS" starttime="20170816 07:24:38.372" endtime="20170816 07:24:38.373"></status>
</kw>
<status status="PASS" starttime="20170816 07:24:38.370" endtime="20170816 07:24:38.373"></status>
</kw>
<status status="PASS" starttime="20170816 07:24:38.370" endtime="20170816 07:24:38.373"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 07:24:38.438" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170816 07:24:38.438" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:24:38.373" endtime="20170816 07:24:38.438"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:24:38.440" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:24:38.439" endtime="20170816 07:24:38.440"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:24:38.441" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:24:38.440" endtime="20170816 07:24:38.441"></status>
</kw>
<status status="PASS" starttime="20170816 07:24:38.440" endtime="20170816 07:24:38.441"></status>
</kw>
<status status="PASS" starttime="20170816 07:24:38.439" endtime="20170816 07:24:38.441"></status>
</kw>
<status status="PASS" starttime="20170816 07:24:38.438" endtime="20170816 07:24:38.441"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 07:24:38.441" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170816 07:24:38.441" endtime="20170816 07:24:38.442"></status>
</kw>
<msg timestamp="20170816 07:24:38.442" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:24:38.133" endtime="20170816 07:24:38.442"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:24:38.442" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:24:38.442" endtime="20170816 07:24:38.442"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 07:24:38.443" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 07:24:38.443" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 07:24:38.443" level="INFO">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170816 07:24:38.443" endtime="20170816 07:24:38.443"></status>
</kw>
<msg timestamp="20170816 07:24:38.443" level="INFO">${state} = Off</msg>
<status status="PASS" starttime="20170816 07:24:38.132" endtime="20170816 07:24:38.443"></status>
</kw>
<msg timestamp="20170816 07:24:38.444" level="INFO">${boot_progress} = Off</msg>
<status status="PASS" starttime="20170816 07:24:38.132" endtime="20170816 07:24:38.444"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170816 07:24:38.444" level="FAIL">Off != FW Progress, Starting OS</msg>
<status status="FAIL" starttime="20170816 07:24:38.444" endtime="20170816 07:24:38.444"></status>
</kw>
<status status="FAIL" starttime="20170816 07:24:38.131" endtime="20170816 07:24:38.445"></status>
</kw>
<msg timestamp="20170816 07:24:38.445" level="INFO">${status} = False</msg>
<status status="PASS" starttime="20170816 07:24:38.131" endtime="20170816 07:24:38.445"></status>
</kw>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${True}'</arg>
<arg>${True}</arg>
</arguments>
<status status="PASS" starttime="20170816 07:24:38.445" endtime="20170816 07:24:38.445"></status>
</kw>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 07:24:38.449" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170816 07:24:38.449" endtime="20170816 07:24:38.450"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 07:24:38.450" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170816 07:24:38.450" endtime="20170816 07:24:38.450"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 07:24:38.451" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170816 07:24:38.450" endtime="20170816 07:24:38.451"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 07:24:38.451" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170816 07:24:38.451" endtime="20170816 07:24:38.452"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 07:24:38.652" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170816 07:24:38.452" endtime="20170816 07:24:38.652"></status>
</kw>
<msg timestamp="20170816 07:24:38.652" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 07:24:38.653" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:24:38.452" endtime="20170816 07:24:38.653"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 07:24:38.653" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:24:38.653" endtime="20170816 07:24:38.653"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:24:38.654" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:24:38.654" endtime="20170816 07:24:38.654"></status>
</kw>
<status status="PASS" starttime="20170816 07:24:38.448" endtime="20170816 07:24:38.654"></status>
</kw>
<status status="PASS" starttime="20170816 07:24:38.448" endtime="20170816 07:24:38.654"></status>
</kw>
<status status="PASS" starttime="20170816 07:24:38.447" endtime="20170816 07:24:38.654"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 07:24:38.655" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status status="PASS" starttime="20170816 07:24:38.654" endtime="20170816 07:24:38.655"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:24:38.657" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:24:38.656" endtime="20170816 07:24:38.657"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:24:38.658" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:24:38.658" endtime="20170816 07:24:38.658"></status>
</kw>
<status status="PASS" starttime="20170816 07:24:38.657" endtime="20170816 07:24:38.658"></status>
</kw>
<status status="PASS" starttime="20170816 07:24:38.656" endtime="20170816 07:24:38.658"></status>
</kw>
<status status="PASS" starttime="20170816 07:24:38.655" endtime="20170816 07:24:38.658"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 07:24:38.753" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg timestamp="20170816 07:24:38.753" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:24:38.659" endtime="20170816 07:24:38.753"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:24:38.755" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:24:38.754" endtime="20170816 07:24:38.755"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:24:38.756" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:24:38.756" endtime="20170816 07:24:38.756"></status>
</kw>
<status status="PASS" starttime="20170816 07:24:38.755" endtime="20170816 07:24:38.756"></status>
</kw>
<status status="PASS" starttime="20170816 07:24:38.754" endtime="20170816 07:24:38.756"></status>
</kw>
<status status="PASS" starttime="20170816 07:24:38.753" endtime="20170816 07:24:38.756"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 07:24:38.757" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170816 07:24:38.757" endtime="20170816 07:24:38.757"></status>
</kw>
<msg timestamp="20170816 07:24:38.757" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:24:38.446" endtime="20170816 07:24:38.757"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:24:38.758" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:24:38.757" endtime="20170816 07:24:38.758"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 07:24:38.759" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 07:24:38.759" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 07:24:38.759" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170816 07:24:38.758" endtime="20170816 07:24:38.759"></status>
</kw>
<msg timestamp="20170816 07:24:38.759" level="INFO">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="PASS" starttime="20170816 07:24:38.446" endtime="20170816 07:24:38.759"></status>
</kw>
<msg timestamp="20170816 07:24:38.759" level="INFO">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="PASS" starttime="20170816 07:24:38.445" endtime="20170816 07:24:38.759"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg timestamp="20170816 07:24:38.760" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170816 07:24:38.760" level="FAIL">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="FAIL" starttime="20170816 07:24:38.760" endtime="20170816 07:24:38.760"></status>
</kw>
<status status="FAIL" starttime="20170816 07:24:38.131" endtime="20170816 07:24:38.760"></status>
</kw>
<status status="FAIL" starttime="20170816 07:24:37.524" endtime="20170816 07:24:38.760"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 07:24:48.765" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170816 07:24:48.765" endtime="20170816 07:24:48.766"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 07:24:48.766" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170816 07:24:48.766" endtime="20170816 07:24:48.766"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 07:24:48.767" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170816 07:24:48.766" endtime="20170816 07:24:48.767"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 07:24:48.767" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170816 07:24:48.767" endtime="20170816 07:24:48.768"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 07:24:49.143" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170816 07:24:48.768" endtime="20170816 07:24:49.143"></status>
</kw>
<msg timestamp="20170816 07:24:49.143" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 07:24:49.143" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:24:48.768" endtime="20170816 07:24:49.143"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 07:24:49.144" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:24:49.143" endtime="20170816 07:24:49.144"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:24:49.145" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:24:49.144" endtime="20170816 07:24:49.145"></status>
</kw>
<status status="PASS" starttime="20170816 07:24:48.764" endtime="20170816 07:24:49.145"></status>
</kw>
<status status="PASS" starttime="20170816 07:24:48.764" endtime="20170816 07:24:49.145"></status>
</kw>
<status status="PASS" starttime="20170816 07:24:48.763" endtime="20170816 07:24:49.145"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 07:24:49.146" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20170816 07:24:49.145" endtime="20170816 07:24:49.146"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:24:49.148" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:24:49.147" endtime="20170816 07:24:49.148"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:24:49.149" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:24:49.148" endtime="20170816 07:24:49.149"></status>
</kw>
<status status="PASS" starttime="20170816 07:24:49.148" endtime="20170816 07:24:49.149"></status>
</kw>
<status status="PASS" starttime="20170816 07:24:49.146" endtime="20170816 07:24:49.149"></status>
</kw>
<status status="PASS" starttime="20170816 07:24:49.146" endtime="20170816 07:24:49.149"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 07:24:49.983" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170816 07:24:49.983" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:24:49.149" endtime="20170816 07:24:49.983"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:24:49.985" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:24:49.984" endtime="20170816 07:24:49.985"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:24:49.986" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:24:49.985" endtime="20170816 07:24:49.986"></status>
</kw>
<status status="PASS" starttime="20170816 07:24:49.985" endtime="20170816 07:24:49.986"></status>
</kw>
<status status="PASS" starttime="20170816 07:24:49.984" endtime="20170816 07:24:49.986"></status>
</kw>
<status status="PASS" starttime="20170816 07:24:49.983" endtime="20170816 07:24:49.986"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 07:24:49.986" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170816 07:24:49.986" endtime="20170816 07:24:49.987"></status>
</kw>
<msg timestamp="20170816 07:24:49.987" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:24:48.763" endtime="20170816 07:24:49.987"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:24:49.987" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:24:49.987" endtime="20170816 07:24:49.988"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 07:24:49.988" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 07:24:49.988" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 07:24:49.988" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170816 07:24:49.988" endtime="20170816 07:24:49.988"></status>
</kw>
<msg timestamp="20170816 07:24:49.989" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" starttime="20170816 07:24:48.762" endtime="20170816 07:24:49.989"></status>
</kw>
<msg timestamp="20170816 07:24:49.989" level="INFO">${power_state} = On</msg>
<status status="PASS" starttime="20170816 07:24:48.762" endtime="20170816 07:24:49.989"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" starttime="20170816 07:24:49.989" endtime="20170816 07:24:49.990"></status>
</kw>
<status status="PASS" starttime="20170816 07:24:48.761" endtime="20170816 07:24:49.990"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 07:24:49.993" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170816 07:24:49.993" endtime="20170816 07:24:49.994"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 07:24:49.995" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170816 07:24:49.994" endtime="20170816 07:24:49.995"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 07:24:49.995" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170816 07:24:49.995" endtime="20170816 07:24:49.995"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 07:24:49.996" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170816 07:24:49.996" endtime="20170816 07:24:49.996"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 07:24:50.330" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170816 07:24:49.997" endtime="20170816 07:24:50.330"></status>
</kw>
<msg timestamp="20170816 07:24:50.330" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 07:24:50.330" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:24:49.996" endtime="20170816 07:24:50.330"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 07:24:50.331" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:24:50.330" endtime="20170816 07:24:50.331"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:24:50.331" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:24:50.331" endtime="20170816 07:24:50.331"></status>
</kw>
<status status="PASS" starttime="20170816 07:24:49.992" endtime="20170816 07:24:50.332"></status>
</kw>
<status status="PASS" starttime="20170816 07:24:49.992" endtime="20170816 07:24:50.332"></status>
</kw>
<status status="PASS" starttime="20170816 07:24:49.992" endtime="20170816 07:24:50.332"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 07:24:50.332" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" starttime="20170816 07:24:50.332" endtime="20170816 07:24:50.333"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:24:50.335" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:24:50.334" endtime="20170816 07:24:50.335"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:24:50.336" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:24:50.336" endtime="20170816 07:24:50.336"></status>
</kw>
<status status="PASS" starttime="20170816 07:24:50.335" endtime="20170816 07:24:50.336"></status>
</kw>
<status status="PASS" starttime="20170816 07:24:50.334" endtime="20170816 07:24:50.336"></status>
</kw>
<status status="PASS" starttime="20170816 07:24:50.333" endtime="20170816 07:24:50.336"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 07:24:51.026" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170816 07:24:51.026" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:24:50.337" endtime="20170816 07:24:51.026"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:24:51.028" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:24:51.028" endtime="20170816 07:24:51.028"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:24:51.029" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:24:51.029" endtime="20170816 07:24:51.029"></status>
</kw>
<status status="PASS" starttime="20170816 07:24:51.028" endtime="20170816 07:24:51.029"></status>
</kw>
<status status="PASS" starttime="20170816 07:24:51.027" endtime="20170816 07:24:51.029"></status>
</kw>
<status status="PASS" starttime="20170816 07:24:51.027" endtime="20170816 07:24:51.029"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 07:24:51.030" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170816 07:24:51.030" endtime="20170816 07:24:51.030"></status>
</kw>
<msg timestamp="20170816 07:24:51.030" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:24:49.991" endtime="20170816 07:24:51.030"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:24:51.031" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:24:51.030" endtime="20170816 07:24:51.031"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 07:24:51.032" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 07:24:51.032" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 07:24:51.032" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170816 07:24:51.031" endtime="20170816 07:24:51.032"></status>
</kw>
<msg timestamp="20170816 07:24:51.032" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" starttime="20170816 07:24:49.990" endtime="20170816 07:24:51.032"></status>
</kw>
<msg timestamp="20170816 07:24:51.032" level="INFO">${host_state} = Running</msg>
<status status="PASS" starttime="20170816 07:24:49.990" endtime="20170816 07:24:51.032"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status status="PASS" starttime="20170816 07:24:51.033" endtime="20170816 07:24:51.033"></status>
</kw>
<kw library="state_manager" name="Is OS Booted">
<doc>Check OS status.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Is OS Starting</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 07:24:51.039" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170816 07:24:51.039" endtime="20170816 07:24:51.040"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 07:24:51.040" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170816 07:24:51.040" endtime="20170816 07:24:51.040"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 07:24:51.041" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170816 07:24:51.041" endtime="20170816 07:24:51.041"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 07:24:51.042" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170816 07:24:51.041" endtime="20170816 07:24:51.042"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 07:24:51.573" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170816 07:24:51.042" endtime="20170816 07:24:51.573"></status>
</kw>
<msg timestamp="20170816 07:24:51.574" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 07:24:51.574" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:24:51.042" endtime="20170816 07:24:51.574"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 07:24:51.574" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:24:51.574" endtime="20170816 07:24:51.574"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:24:51.575" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:24:51.575" endtime="20170816 07:24:51.575"></status>
</kw>
<status status="PASS" starttime="20170816 07:24:51.038" endtime="20170816 07:24:51.575"></status>
</kw>
<status status="PASS" starttime="20170816 07:24:51.038" endtime="20170816 07:24:51.575"></status>
</kw>
<status status="PASS" starttime="20170816 07:24:51.037" endtime="20170816 07:24:51.575"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 07:24:51.576" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" starttime="20170816 07:24:51.576" endtime="20170816 07:24:51.576"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:24:51.578" level="INFO">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:24:51.577" endtime="20170816 07:24:51.579"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:24:51.579" level="INFO">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:24:51.579" endtime="20170816 07:24:51.580"></status>
</kw>
<status status="PASS" starttime="20170816 07:24:51.579" endtime="20170816 07:24:51.580"></status>
</kw>
<status status="PASS" starttime="20170816 07:24:51.577" endtime="20170816 07:24:51.580"></status>
</kw>
<status status="PASS" starttime="20170816 07:24:51.576" endtime="20170816 07:24:51.580"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 07:24:52.092" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170816 07:24:52.092" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:24:51.580" endtime="20170816 07:24:52.092"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:24:52.094" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:24:52.093" endtime="20170816 07:24:52.094"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:24:52.095" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:24:52.094" endtime="20170816 07:24:52.095"></status>
</kw>
<status status="PASS" starttime="20170816 07:24:52.094" endtime="20170816 07:24:52.095"></status>
</kw>
<status status="PASS" starttime="20170816 07:24:52.093" endtime="20170816 07:24:52.095"></status>
</kw>
<status status="PASS" starttime="20170816 07:24:52.092" endtime="20170816 07:24:52.095"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 07:24:52.095" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170816 07:24:52.095" endtime="20170816 07:24:52.095"></status>
</kw>
<msg timestamp="20170816 07:24:52.096" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:24:51.036" endtime="20170816 07:24:52.096"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:24:52.096" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:24:52.096" endtime="20170816 07:24:52.096"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 07:24:52.097" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 07:24:52.097" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 07:24:52.097" level="INFO">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170816 07:24:52.097" endtime="20170816 07:24:52.097"></status>
</kw>
<msg timestamp="20170816 07:24:52.097" level="INFO">${state} = Off</msg>
<status status="PASS" starttime="20170816 07:24:51.035" endtime="20170816 07:24:52.097"></status>
</kw>
<msg timestamp="20170816 07:24:52.098" level="INFO">${boot_progress} = Off</msg>
<status status="PASS" starttime="20170816 07:24:51.034" endtime="20170816 07:24:52.098"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170816 07:24:52.098" level="FAIL">Off != FW Progress, Starting OS</msg>
<status status="FAIL" starttime="20170816 07:24:52.098" endtime="20170816 07:24:52.098"></status>
</kw>
<status status="FAIL" starttime="20170816 07:24:51.034" endtime="20170816 07:24:52.098"></status>
</kw>
<msg timestamp="20170816 07:24:52.099" level="INFO">${status} = False</msg>
<status status="PASS" starttime="20170816 07:24:51.033" endtime="20170816 07:24:52.099"></status>
</kw>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${True}'</arg>
<arg>${True}</arg>
</arguments>
<status status="PASS" starttime="20170816 07:24:52.099" endtime="20170816 07:24:52.099"></status>
</kw>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 07:24:52.103" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170816 07:24:52.102" endtime="20170816 07:24:52.103"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 07:24:52.104" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170816 07:24:52.103" endtime="20170816 07:24:52.104"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 07:24:52.104" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170816 07:24:52.104" endtime="20170816 07:24:52.104"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 07:24:52.105" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170816 07:24:52.105" endtime="20170816 07:24:52.105"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 07:24:52.547" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170816 07:24:52.106" endtime="20170816 07:24:52.547"></status>
</kw>
<msg timestamp="20170816 07:24:52.547" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 07:24:52.547" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:24:52.105" endtime="20170816 07:24:52.547"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 07:24:52.548" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:24:52.548" endtime="20170816 07:24:52.548"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:24:52.549" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:24:52.548" endtime="20170816 07:24:52.549"></status>
</kw>
<status status="PASS" starttime="20170816 07:24:52.102" endtime="20170816 07:24:52.549"></status>
</kw>
<status status="PASS" starttime="20170816 07:24:52.101" endtime="20170816 07:24:52.549"></status>
</kw>
<status status="PASS" starttime="20170816 07:24:52.101" endtime="20170816 07:24:52.549"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 07:24:52.550" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status status="PASS" starttime="20170816 07:24:52.549" endtime="20170816 07:24:52.550"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:24:52.552" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:24:52.551" endtime="20170816 07:24:52.552"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:24:52.553" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:24:52.553" endtime="20170816 07:24:52.553"></status>
</kw>
<status status="PASS" starttime="20170816 07:24:52.552" endtime="20170816 07:24:52.553"></status>
</kw>
<status status="PASS" starttime="20170816 07:24:52.551" endtime="20170816 07:24:52.553"></status>
</kw>
<status status="PASS" starttime="20170816 07:24:52.550" endtime="20170816 07:24:52.553"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 07:24:53.375" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg timestamp="20170816 07:24:53.375" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:24:52.554" endtime="20170816 07:24:53.375"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:24:53.377" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:24:53.377" endtime="20170816 07:24:53.377"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:24:53.378" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:24:53.378" endtime="20170816 07:24:53.378"></status>
</kw>
<status status="PASS" starttime="20170816 07:24:53.377" endtime="20170816 07:24:53.378"></status>
</kw>
<status status="PASS" starttime="20170816 07:24:53.376" endtime="20170816 07:24:53.379"></status>
</kw>
<status status="PASS" starttime="20170816 07:24:53.376" endtime="20170816 07:24:53.379"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 07:24:53.379" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170816 07:24:53.379" endtime="20170816 07:24:53.379"></status>
</kw>
<msg timestamp="20170816 07:24:53.379" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:24:52.100" endtime="20170816 07:24:53.379"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:24:53.380" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:24:53.380" endtime="20170816 07:24:53.380"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 07:24:53.381" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 07:24:53.381" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 07:24:53.381" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170816 07:24:53.380" endtime="20170816 07:24:53.381"></status>
</kw>
<msg timestamp="20170816 07:24:53.381" level="INFO">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="PASS" starttime="20170816 07:24:52.100" endtime="20170816 07:24:53.381"></status>
</kw>
<msg timestamp="20170816 07:24:53.381" level="INFO">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="PASS" starttime="20170816 07:24:52.099" endtime="20170816 07:24:53.382"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg timestamp="20170816 07:24:53.382" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170816 07:24:53.382" level="FAIL">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="FAIL" starttime="20170816 07:24:53.382" endtime="20170816 07:24:53.382"></status>
</kw>
<status status="FAIL" starttime="20170816 07:24:51.033" endtime="20170816 07:24:53.383"></status>
</kw>
<status status="FAIL" starttime="20170816 07:24:48.761" endtime="20170816 07:24:53.383"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 07:25:03.388" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170816 07:25:03.388" endtime="20170816 07:25:03.388"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 07:25:03.389" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170816 07:25:03.389" endtime="20170816 07:25:03.389"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 07:25:03.390" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170816 07:25:03.389" endtime="20170816 07:25:03.390"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 07:25:03.390" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170816 07:25:03.390" endtime="20170816 07:25:03.390"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 07:25:03.835" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170816 07:25:03.391" endtime="20170816 07:25:03.836"></status>
</kw>
<msg timestamp="20170816 07:25:03.836" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 07:25:03.836" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:25:03.390" endtime="20170816 07:25:03.836"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 07:25:03.836" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:25:03.836" endtime="20170816 07:25:03.837"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:25:03.837" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:25:03.837" endtime="20170816 07:25:03.837"></status>
</kw>
<status status="PASS" starttime="20170816 07:25:03.387" endtime="20170816 07:25:03.837"></status>
</kw>
<status status="PASS" starttime="20170816 07:25:03.386" endtime="20170816 07:25:03.837"></status>
</kw>
<status status="PASS" starttime="20170816 07:25:03.386" endtime="20170816 07:25:03.838"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 07:25:03.838" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20170816 07:25:03.838" endtime="20170816 07:25:03.838"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:25:03.840" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:25:03.839" endtime="20170816 07:25:03.840"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:25:03.841" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:25:03.841" endtime="20170816 07:25:03.841"></status>
</kw>
<status status="PASS" starttime="20170816 07:25:03.840" endtime="20170816 07:25:03.841"></status>
</kw>
<status status="PASS" starttime="20170816 07:25:03.839" endtime="20170816 07:25:03.841"></status>
</kw>
<status status="PASS" starttime="20170816 07:25:03.838" endtime="20170816 07:25:03.842"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 07:25:04.350" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170816 07:25:04.351" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:25:03.842" endtime="20170816 07:25:04.351"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:25:04.352" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:25:04.352" endtime="20170816 07:25:04.352"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:25:04.354" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:25:04.353" endtime="20170816 07:25:04.354"></status>
</kw>
<status status="PASS" starttime="20170816 07:25:04.353" endtime="20170816 07:25:04.354"></status>
</kw>
<status status="PASS" starttime="20170816 07:25:04.351" endtime="20170816 07:25:04.354"></status>
</kw>
<status status="PASS" starttime="20170816 07:25:04.351" endtime="20170816 07:25:04.354"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 07:25:04.354" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170816 07:25:04.354" endtime="20170816 07:25:04.355"></status>
</kw>
<msg timestamp="20170816 07:25:04.355" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:25:03.385" endtime="20170816 07:25:04.355"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:25:04.355" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:25:04.355" endtime="20170816 07:25:04.355"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 07:25:04.356" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 07:25:04.356" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 07:25:04.356" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170816 07:25:04.356" endtime="20170816 07:25:04.356"></status>
</kw>
<msg timestamp="20170816 07:25:04.356" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" starttime="20170816 07:25:03.384" endtime="20170816 07:25:04.357"></status>
</kw>
<msg timestamp="20170816 07:25:04.357" level="INFO">${power_state} = On</msg>
<status status="PASS" starttime="20170816 07:25:03.384" endtime="20170816 07:25:04.357"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" starttime="20170816 07:25:04.357" endtime="20170816 07:25:04.358"></status>
</kw>
<status status="PASS" starttime="20170816 07:25:03.384" endtime="20170816 07:25:04.358"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 07:25:04.363" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170816 07:25:04.362" endtime="20170816 07:25:04.363"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 07:25:04.364" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170816 07:25:04.364" endtime="20170816 07:25:04.364"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 07:25:04.365" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170816 07:25:04.365" endtime="20170816 07:25:04.365"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 07:25:04.366" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170816 07:25:04.366" endtime="20170816 07:25:04.366"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 07:25:04.670" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170816 07:25:04.367" endtime="20170816 07:25:04.670"></status>
</kw>
<msg timestamp="20170816 07:25:04.670" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 07:25:04.670" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:25:04.367" endtime="20170816 07:25:04.670"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 07:25:04.671" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:25:04.671" endtime="20170816 07:25:04.671"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:25:04.672" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:25:04.671" endtime="20170816 07:25:04.672"></status>
</kw>
<status status="PASS" starttime="20170816 07:25:04.362" endtime="20170816 07:25:04.672"></status>
</kw>
<status status="PASS" starttime="20170816 07:25:04.361" endtime="20170816 07:25:04.672"></status>
</kw>
<status status="PASS" starttime="20170816 07:25:04.360" endtime="20170816 07:25:04.672"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 07:25:04.673" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" starttime="20170816 07:25:04.672" endtime="20170816 07:25:04.673"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:25:04.675" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:25:04.674" endtime="20170816 07:25:04.675"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:25:04.676" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:25:04.676" endtime="20170816 07:25:04.676"></status>
</kw>
<status status="PASS" starttime="20170816 07:25:04.675" endtime="20170816 07:25:04.676"></status>
</kw>
<status status="PASS" starttime="20170816 07:25:04.673" endtime="20170816 07:25:04.676"></status>
</kw>
<status status="PASS" starttime="20170816 07:25:04.673" endtime="20170816 07:25:04.676"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 07:25:05.247" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170816 07:25:05.247" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:25:04.677" endtime="20170816 07:25:05.247"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:25:05.249" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:25:05.248" endtime="20170816 07:25:05.249"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:25:05.250" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:25:05.250" endtime="20170816 07:25:05.250"></status>
</kw>
<status status="PASS" starttime="20170816 07:25:05.249" endtime="20170816 07:25:05.250"></status>
</kw>
<status status="PASS" starttime="20170816 07:25:05.248" endtime="20170816 07:25:05.250"></status>
</kw>
<status status="PASS" starttime="20170816 07:25:05.247" endtime="20170816 07:25:05.250"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 07:25:05.251" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170816 07:25:05.250" endtime="20170816 07:25:05.251"></status>
</kw>
<msg timestamp="20170816 07:25:05.251" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:25:04.359" endtime="20170816 07:25:05.251"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:25:05.251" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:25:05.251" endtime="20170816 07:25:05.252"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 07:25:05.252" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 07:25:05.252" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 07:25:05.252" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170816 07:25:05.252" endtime="20170816 07:25:05.252"></status>
</kw>
<msg timestamp="20170816 07:25:05.253" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" starttime="20170816 07:25:04.358" endtime="20170816 07:25:05.253"></status>
</kw>
<msg timestamp="20170816 07:25:05.253" level="INFO">${host_state} = Running</msg>
<status status="PASS" starttime="20170816 07:25:04.358" endtime="20170816 07:25:05.253"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status status="PASS" starttime="20170816 07:25:05.253" endtime="20170816 07:25:05.254"></status>
</kw>
<kw library="state_manager" name="Is OS Booted">
<doc>Check OS status.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Is OS Starting</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 07:25:05.258" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170816 07:25:05.258" endtime="20170816 07:25:05.259"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 07:25:05.259" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170816 07:25:05.259" endtime="20170816 07:25:05.259"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 07:25:05.260" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170816 07:25:05.260" endtime="20170816 07:25:05.260"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 07:25:05.261" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170816 07:25:05.260" endtime="20170816 07:25:05.261"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 07:25:05.760" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170816 07:25:05.261" endtime="20170816 07:25:05.761"></status>
</kw>
<msg timestamp="20170816 07:25:05.761" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 07:25:05.761" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:25:05.261" endtime="20170816 07:25:05.761"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 07:25:05.761" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:25:05.761" endtime="20170816 07:25:05.761"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:25:05.762" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:25:05.762" endtime="20170816 07:25:05.762"></status>
</kw>
<status status="PASS" starttime="20170816 07:25:05.257" endtime="20170816 07:25:05.762"></status>
</kw>
<status status="PASS" starttime="20170816 07:25:05.257" endtime="20170816 07:25:05.762"></status>
</kw>
<status status="PASS" starttime="20170816 07:25:05.256" endtime="20170816 07:25:05.762"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 07:25:05.763" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" starttime="20170816 07:25:05.763" endtime="20170816 07:25:05.763"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:25:05.765" level="INFO">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:25:05.764" endtime="20170816 07:25:05.765"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:25:05.766" level="INFO">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:25:05.766" endtime="20170816 07:25:05.766"></status>
</kw>
<status status="PASS" starttime="20170816 07:25:05.765" endtime="20170816 07:25:05.766"></status>
</kw>
<status status="PASS" starttime="20170816 07:25:05.764" endtime="20170816 07:25:05.767"></status>
</kw>
<status status="PASS" starttime="20170816 07:25:05.763" endtime="20170816 07:25:05.767"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 07:25:06.269" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170816 07:25:06.269" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:25:05.767" endtime="20170816 07:25:06.269"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:25:06.272" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:25:06.271" endtime="20170816 07:25:06.272"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:25:06.273" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:25:06.273" endtime="20170816 07:25:06.273"></status>
</kw>
<status status="PASS" starttime="20170816 07:25:06.272" endtime="20170816 07:25:06.273"></status>
</kw>
<status status="PASS" starttime="20170816 07:25:06.270" endtime="20170816 07:25:06.274"></status>
</kw>
<status status="PASS" starttime="20170816 07:25:06.270" endtime="20170816 07:25:06.274"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 07:25:06.274" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170816 07:25:06.274" endtime="20170816 07:25:06.274"></status>
</kw>
<msg timestamp="20170816 07:25:06.275" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:25:05.256" endtime="20170816 07:25:06.275"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:25:06.276" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:25:06.275" endtime="20170816 07:25:06.276"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 07:25:06.277" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 07:25:06.277" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 07:25:06.277" level="INFO">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170816 07:25:06.276" endtime="20170816 07:25:06.277"></status>
</kw>
<msg timestamp="20170816 07:25:06.277" level="INFO">${state} = Off</msg>
<status status="PASS" starttime="20170816 07:25:05.255" endtime="20170816 07:25:06.278"></status>
</kw>
<msg timestamp="20170816 07:25:06.278" level="INFO">${boot_progress} = Off</msg>
<status status="PASS" starttime="20170816 07:25:05.255" endtime="20170816 07:25:06.278"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170816 07:25:06.279" level="FAIL">Off != FW Progress, Starting OS</msg>
<status status="FAIL" starttime="20170816 07:25:06.278" endtime="20170816 07:25:06.279"></status>
</kw>
<status status="FAIL" starttime="20170816 07:25:05.254" endtime="20170816 07:25:06.279"></status>
</kw>
<msg timestamp="20170816 07:25:06.279" level="INFO">${status} = False</msg>
<status status="PASS" starttime="20170816 07:25:05.254" endtime="20170816 07:25:06.279"></status>
</kw>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${True}'</arg>
<arg>${True}</arg>
</arguments>
<status status="PASS" starttime="20170816 07:25:06.280" endtime="20170816 07:25:06.280"></status>
</kw>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 07:25:06.286" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170816 07:25:06.285" endtime="20170816 07:25:06.286"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 07:25:06.287" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170816 07:25:06.287" endtime="20170816 07:25:06.287"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 07:25:06.288" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170816 07:25:06.287" endtime="20170816 07:25:06.288"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 07:25:06.288" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170816 07:25:06.288" endtime="20170816 07:25:06.288"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 07:25:06.736" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170816 07:25:06.289" endtime="20170816 07:25:06.736"></status>
</kw>
<msg timestamp="20170816 07:25:06.736" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 07:25:06.736" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:25:06.289" endtime="20170816 07:25:06.736"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 07:25:06.737" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:25:06.737" endtime="20170816 07:25:06.737"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:25:06.738" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:25:06.737" endtime="20170816 07:25:06.738"></status>
</kw>
<status status="PASS" starttime="20170816 07:25:06.284" endtime="20170816 07:25:06.738"></status>
</kw>
<status status="PASS" starttime="20170816 07:25:06.284" endtime="20170816 07:25:06.738"></status>
</kw>
<status status="PASS" starttime="20170816 07:25:06.283" endtime="20170816 07:25:06.738"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 07:25:06.739" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status status="PASS" starttime="20170816 07:25:06.738" endtime="20170816 07:25:06.739"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:25:06.741" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:25:06.740" endtime="20170816 07:25:06.741"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:25:06.741" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:25:06.741" endtime="20170816 07:25:06.742"></status>
</kw>
<status status="PASS" starttime="20170816 07:25:06.741" endtime="20170816 07:25:06.742"></status>
</kw>
<status status="PASS" starttime="20170816 07:25:06.739" endtime="20170816 07:25:06.742"></status>
</kw>
<status status="PASS" starttime="20170816 07:25:06.739" endtime="20170816 07:25:06.742"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 07:25:07.173" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg timestamp="20170816 07:25:07.173" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:25:06.742" endtime="20170816 07:25:07.173"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:25:07.176" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:25:07.175" endtime="20170816 07:25:07.176"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:25:07.177" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:25:07.177" endtime="20170816 07:25:07.178"></status>
</kw>
<status status="PASS" starttime="20170816 07:25:07.176" endtime="20170816 07:25:07.178"></status>
</kw>
<status status="PASS" starttime="20170816 07:25:07.174" endtime="20170816 07:25:07.178"></status>
</kw>
<status status="PASS" starttime="20170816 07:25:07.174" endtime="20170816 07:25:07.178"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 07:25:07.178" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170816 07:25:07.178" endtime="20170816 07:25:07.178"></status>
</kw>
<msg timestamp="20170816 07:25:07.179" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:25:06.282" endtime="20170816 07:25:07.179"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:25:07.179" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:25:07.179" endtime="20170816 07:25:07.179"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 07:25:07.180" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 07:25:07.180" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 07:25:07.180" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170816 07:25:07.180" endtime="20170816 07:25:07.180"></status>
</kw>
<msg timestamp="20170816 07:25:07.180" level="INFO">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="PASS" starttime="20170816 07:25:06.281" endtime="20170816 07:25:07.180"></status>
</kw>
<msg timestamp="20170816 07:25:07.181" level="INFO">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="PASS" starttime="20170816 07:25:06.280" endtime="20170816 07:25:07.181"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg timestamp="20170816 07:25:07.181" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170816 07:25:07.181" level="FAIL">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="FAIL" starttime="20170816 07:25:07.181" endtime="20170816 07:25:07.181"></status>
</kw>
<status status="FAIL" starttime="20170816 07:25:05.254" endtime="20170816 07:25:07.182"></status>
</kw>
<status status="FAIL" starttime="20170816 07:25:03.383" endtime="20170816 07:25:07.182"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 07:25:17.187" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170816 07:25:17.186" endtime="20170816 07:25:17.187"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 07:25:17.187" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170816 07:25:17.187" endtime="20170816 07:25:17.188"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 07:25:17.188" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170816 07:25:17.188" endtime="20170816 07:25:17.188"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 07:25:17.189" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170816 07:25:17.188" endtime="20170816 07:25:17.189"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 07:25:17.621" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170816 07:25:17.189" endtime="20170816 07:25:17.621"></status>
</kw>
<msg timestamp="20170816 07:25:17.621" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 07:25:17.621" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:25:17.189" endtime="20170816 07:25:17.621"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 07:25:17.622" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:25:17.621" endtime="20170816 07:25:17.622"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:25:17.622" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:25:17.622" endtime="20170816 07:25:17.623"></status>
</kw>
<status status="PASS" starttime="20170816 07:25:17.186" endtime="20170816 07:25:17.623"></status>
</kw>
<status status="PASS" starttime="20170816 07:25:17.185" endtime="20170816 07:25:17.623"></status>
</kw>
<status status="PASS" starttime="20170816 07:25:17.185" endtime="20170816 07:25:17.623"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 07:25:17.623" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20170816 07:25:17.623" endtime="20170816 07:25:17.623"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:25:17.625" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:25:17.625" endtime="20170816 07:25:17.626"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:25:17.626" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:25:17.626" endtime="20170816 07:25:17.627"></status>
</kw>
<status status="PASS" starttime="20170816 07:25:17.626" endtime="20170816 07:25:17.627"></status>
</kw>
<status status="PASS" starttime="20170816 07:25:17.624" endtime="20170816 07:25:17.627"></status>
</kw>
<status status="PASS" starttime="20170816 07:25:17.624" endtime="20170816 07:25:17.627"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 07:25:18.103" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170816 07:25:18.103" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:25:17.627" endtime="20170816 07:25:18.104"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:25:18.105" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:25:18.105" endtime="20170816 07:25:18.105"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:25:18.106" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:25:18.106" endtime="20170816 07:25:18.106"></status>
</kw>
<status status="PASS" starttime="20170816 07:25:18.105" endtime="20170816 07:25:18.106"></status>
</kw>
<status status="PASS" starttime="20170816 07:25:18.104" endtime="20170816 07:25:18.107"></status>
</kw>
<status status="PASS" starttime="20170816 07:25:18.104" endtime="20170816 07:25:18.107"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 07:25:18.107" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170816 07:25:18.107" endtime="20170816 07:25:18.107"></status>
</kw>
<msg timestamp="20170816 07:25:18.107" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:25:17.184" endtime="20170816 07:25:18.107"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:25:18.108" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:25:18.108" endtime="20170816 07:25:18.108"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 07:25:18.109" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 07:25:18.109" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 07:25:18.109" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170816 07:25:18.108" endtime="20170816 07:25:18.109"></status>
</kw>
<msg timestamp="20170816 07:25:18.109" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" starttime="20170816 07:25:17.183" endtime="20170816 07:25:18.109"></status>
</kw>
<msg timestamp="20170816 07:25:18.109" level="INFO">${power_state} = On</msg>
<status status="PASS" starttime="20170816 07:25:17.183" endtime="20170816 07:25:18.109"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" starttime="20170816 07:25:18.110" endtime="20170816 07:25:18.110"></status>
</kw>
<status status="PASS" starttime="20170816 07:25:17.183" endtime="20170816 07:25:18.110"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 07:25:18.114" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170816 07:25:18.113" endtime="20170816 07:25:18.115"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 07:25:18.115" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170816 07:25:18.115" endtime="20170816 07:25:18.115"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 07:25:18.116" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170816 07:25:18.115" endtime="20170816 07:25:18.116"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 07:25:18.116" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170816 07:25:18.116" endtime="20170816 07:25:18.117"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 07:25:18.432" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170816 07:25:18.117" endtime="20170816 07:25:18.432"></status>
</kw>
<msg timestamp="20170816 07:25:18.432" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 07:25:18.432" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:25:18.117" endtime="20170816 07:25:18.432"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 07:25:18.433" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:25:18.433" endtime="20170816 07:25:18.433"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:25:18.434" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:25:18.433" endtime="20170816 07:25:18.434"></status>
</kw>
<status status="PASS" starttime="20170816 07:25:18.113" endtime="20170816 07:25:18.434"></status>
</kw>
<status status="PASS" starttime="20170816 07:25:18.112" endtime="20170816 07:25:18.434"></status>
</kw>
<status status="PASS" starttime="20170816 07:25:18.112" endtime="20170816 07:25:18.434"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 07:25:18.435" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" starttime="20170816 07:25:18.434" endtime="20170816 07:25:18.435"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:25:18.437" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:25:18.436" endtime="20170816 07:25:18.437"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:25:18.438" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:25:18.438" endtime="20170816 07:25:18.438"></status>
</kw>
<status status="PASS" starttime="20170816 07:25:18.437" endtime="20170816 07:25:18.438"></status>
</kw>
<status status="PASS" starttime="20170816 07:25:18.435" endtime="20170816 07:25:18.438"></status>
</kw>
<status status="PASS" starttime="20170816 07:25:18.435" endtime="20170816 07:25:18.438"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 07:25:18.952" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170816 07:25:18.953" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:25:18.438" endtime="20170816 07:25:18.953"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:25:18.954" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:25:18.954" endtime="20170816 07:25:18.954"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:25:18.955" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:25:18.955" endtime="20170816 07:25:18.955"></status>
</kw>
<status status="PASS" starttime="20170816 07:25:18.955" endtime="20170816 07:25:18.956"></status>
</kw>
<status status="PASS" starttime="20170816 07:25:18.953" endtime="20170816 07:25:18.956"></status>
</kw>
<status status="PASS" starttime="20170816 07:25:18.953" endtime="20170816 07:25:18.956"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 07:25:18.956" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170816 07:25:18.956" endtime="20170816 07:25:18.956"></status>
</kw>
<msg timestamp="20170816 07:25:18.956" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:25:18.111" endtime="20170816 07:25:18.957"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:25:18.957" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:25:18.957" endtime="20170816 07:25:18.957"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 07:25:18.958" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 07:25:18.958" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 07:25:18.958" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170816 07:25:18.957" endtime="20170816 07:25:18.958"></status>
</kw>
<msg timestamp="20170816 07:25:18.958" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" starttime="20170816 07:25:18.111" endtime="20170816 07:25:18.958"></status>
</kw>
<msg timestamp="20170816 07:25:18.958" level="INFO">${host_state} = Running</msg>
<status status="PASS" starttime="20170816 07:25:18.110" endtime="20170816 07:25:18.959"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status status="PASS" starttime="20170816 07:25:18.959" endtime="20170816 07:25:18.959"></status>
</kw>
<kw library="state_manager" name="Is OS Booted">
<doc>Check OS status.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Is OS Starting</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 07:25:18.964" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170816 07:25:18.964" endtime="20170816 07:25:18.964"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 07:25:18.965" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170816 07:25:18.964" endtime="20170816 07:25:18.965"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 07:25:18.965" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170816 07:25:18.965" endtime="20170816 07:25:18.965"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 07:25:18.966" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170816 07:25:18.966" endtime="20170816 07:25:18.966"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 07:25:19.214" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170816 07:25:18.967" endtime="20170816 07:25:19.214"></status>
</kw>
<msg timestamp="20170816 07:25:19.214" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 07:25:19.215" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:25:18.966" endtime="20170816 07:25:19.215"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 07:25:19.215" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:25:19.215" endtime="20170816 07:25:19.215"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:25:19.216" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:25:19.216" endtime="20170816 07:25:19.216"></status>
</kw>
<status status="PASS" starttime="20170816 07:25:18.963" endtime="20170816 07:25:19.216"></status>
</kw>
<status status="PASS" starttime="20170816 07:25:18.963" endtime="20170816 07:25:19.216"></status>
</kw>
<status status="PASS" starttime="20170816 07:25:18.962" endtime="20170816 07:25:19.216"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 07:25:19.217" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" starttime="20170816 07:25:19.217" endtime="20170816 07:25:19.217"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:25:19.219" level="INFO">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:25:19.218" endtime="20170816 07:25:19.219"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:25:19.220" level="INFO">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:25:19.220" endtime="20170816 07:25:19.220"></status>
</kw>
<status status="PASS" starttime="20170816 07:25:19.219" endtime="20170816 07:25:19.220"></status>
</kw>
<status status="PASS" starttime="20170816 07:25:19.218" endtime="20170816 07:25:19.221"></status>
</kw>
<status status="PASS" starttime="20170816 07:25:19.217" endtime="20170816 07:25:19.221"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 07:25:19.524" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170816 07:25:19.525" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:25:19.221" endtime="20170816 07:25:19.525"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:25:19.526" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:25:19.526" endtime="20170816 07:25:19.526"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:25:19.527" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:25:19.527" endtime="20170816 07:25:19.527"></status>
</kw>
<status status="PASS" starttime="20170816 07:25:19.527" endtime="20170816 07:25:19.528"></status>
</kw>
<status status="PASS" starttime="20170816 07:25:19.525" endtime="20170816 07:25:19.528"></status>
</kw>
<status status="PASS" starttime="20170816 07:25:19.525" endtime="20170816 07:25:19.528"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 07:25:19.528" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170816 07:25:19.528" endtime="20170816 07:25:19.528"></status>
</kw>
<msg timestamp="20170816 07:25:19.528" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:25:18.961" endtime="20170816 07:25:19.528"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:25:19.529" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:25:19.529" endtime="20170816 07:25:19.529"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 07:25:19.530" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 07:25:19.530" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 07:25:19.530" level="INFO">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170816 07:25:19.529" endtime="20170816 07:25:19.530"></status>
</kw>
<msg timestamp="20170816 07:25:19.530" level="INFO">${state} = Off</msg>
<status status="PASS" starttime="20170816 07:25:18.961" endtime="20170816 07:25:19.530"></status>
</kw>
<msg timestamp="20170816 07:25:19.530" level="INFO">${boot_progress} = Off</msg>
<status status="PASS" starttime="20170816 07:25:18.960" endtime="20170816 07:25:19.530"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170816 07:25:19.531" level="FAIL">Off != FW Progress, Starting OS</msg>
<status status="FAIL" starttime="20170816 07:25:19.531" endtime="20170816 07:25:19.531"></status>
</kw>
<status status="FAIL" starttime="20170816 07:25:18.960" endtime="20170816 07:25:19.531"></status>
</kw>
<msg timestamp="20170816 07:25:19.531" level="INFO">${status} = False</msg>
<status status="PASS" starttime="20170816 07:25:18.960" endtime="20170816 07:25:19.531"></status>
</kw>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${True}'</arg>
<arg>${True}</arg>
</arguments>
<status status="PASS" starttime="20170816 07:25:19.532" endtime="20170816 07:25:19.532"></status>
</kw>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 07:25:19.536" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170816 07:25:19.536" endtime="20170816 07:25:19.536"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 07:25:19.537" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170816 07:25:19.537" endtime="20170816 07:25:19.537"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 07:25:19.537" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170816 07:25:19.537" endtime="20170816 07:25:19.537"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 07:25:19.538" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170816 07:25:19.538" endtime="20170816 07:25:19.538"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 07:25:19.716" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170816 07:25:19.539" endtime="20170816 07:25:19.716"></status>
</kw>
<msg timestamp="20170816 07:25:19.716" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 07:25:19.716" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:25:19.538" endtime="20170816 07:25:19.716"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 07:25:19.717" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:25:19.717" endtime="20170816 07:25:19.717"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:25:19.717" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:25:19.717" endtime="20170816 07:25:19.718"></status>
</kw>
<status status="PASS" starttime="20170816 07:25:19.535" endtime="20170816 07:25:19.718"></status>
</kw>
<status status="PASS" starttime="20170816 07:25:19.535" endtime="20170816 07:25:19.718"></status>
</kw>
<status status="PASS" starttime="20170816 07:25:19.534" endtime="20170816 07:25:19.718"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 07:25:19.718" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status status="PASS" starttime="20170816 07:25:19.718" endtime="20170816 07:25:19.719"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:25:19.721" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:25:19.720" endtime="20170816 07:25:19.721"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:25:19.721" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:25:19.721" endtime="20170816 07:25:19.722"></status>
</kw>
<status status="PASS" starttime="20170816 07:25:19.721" endtime="20170816 07:25:19.722"></status>
</kw>
<status status="PASS" starttime="20170816 07:25:19.719" endtime="20170816 07:25:19.722"></status>
</kw>
<status status="PASS" starttime="20170816 07:25:19.719" endtime="20170816 07:25:19.722"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 07:25:19.829" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg timestamp="20170816 07:25:19.829" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:25:19.722" endtime="20170816 07:25:19.829"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:25:19.831" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:25:19.830" endtime="20170816 07:25:19.831"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:25:19.832" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:25:19.831" endtime="20170816 07:25:19.832"></status>
</kw>
<status status="PASS" starttime="20170816 07:25:19.831" endtime="20170816 07:25:19.832"></status>
</kw>
<status status="PASS" starttime="20170816 07:25:19.830" endtime="20170816 07:25:19.832"></status>
</kw>
<status status="PASS" starttime="20170816 07:25:19.829" endtime="20170816 07:25:19.832"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 07:25:19.832" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170816 07:25:19.832" endtime="20170816 07:25:19.832"></status>
</kw>
<msg timestamp="20170816 07:25:19.833" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:25:19.533" endtime="20170816 07:25:19.833"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:25:19.833" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:25:19.833" endtime="20170816 07:25:19.833"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 07:25:19.834" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 07:25:19.834" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 07:25:19.834" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170816 07:25:19.834" endtime="20170816 07:25:19.834"></status>
</kw>
<msg timestamp="20170816 07:25:19.834" level="INFO">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="PASS" starttime="20170816 07:25:19.533" endtime="20170816 07:25:19.834"></status>
</kw>
<msg timestamp="20170816 07:25:19.835" level="INFO">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="PASS" starttime="20170816 07:25:19.532" endtime="20170816 07:25:19.835"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg timestamp="20170816 07:25:19.835" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170816 07:25:19.835" level="FAIL">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="FAIL" starttime="20170816 07:25:19.835" endtime="20170816 07:25:19.835"></status>
</kw>
<status status="FAIL" starttime="20170816 07:25:18.959" endtime="20170816 07:25:19.835"></status>
</kw>
<status status="FAIL" starttime="20170816 07:25:17.182" endtime="20170816 07:25:19.836"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 07:25:29.844" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170816 07:25:29.843" endtime="20170816 07:25:29.844"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 07:25:29.845" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170816 07:25:29.844" endtime="20170816 07:25:29.845"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 07:25:29.845" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170816 07:25:29.845" endtime="20170816 07:25:29.845"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 07:25:29.846" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170816 07:25:29.846" endtime="20170816 07:25:29.846"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 07:25:30.262" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170816 07:25:29.847" endtime="20170816 07:25:30.262"></status>
</kw>
<msg timestamp="20170816 07:25:30.262" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 07:25:30.262" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:25:29.846" endtime="20170816 07:25:30.262"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 07:25:30.262" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:25:30.262" endtime="20170816 07:25:30.263"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:25:30.263" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:25:30.263" endtime="20170816 07:25:30.263"></status>
</kw>
<status status="PASS" starttime="20170816 07:25:29.840" endtime="20170816 07:25:30.263"></status>
</kw>
<status status="PASS" starttime="20170816 07:25:29.839" endtime="20170816 07:25:30.263"></status>
</kw>
<status status="PASS" starttime="20170816 07:25:29.839" endtime="20170816 07:25:30.264"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 07:25:30.264" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20170816 07:25:30.264" endtime="20170816 07:25:30.264"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:25:30.266" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:25:30.266" endtime="20170816 07:25:30.266"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:25:30.267" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:25:30.267" endtime="20170816 07:25:30.267"></status>
</kw>
<status status="PASS" starttime="20170816 07:25:30.266" endtime="20170816 07:25:30.267"></status>
</kw>
<status status="PASS" starttime="20170816 07:25:30.265" endtime="20170816 07:25:30.268"></status>
</kw>
<status status="PASS" starttime="20170816 07:25:30.264" endtime="20170816 07:25:30.268"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 07:25:34.411" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170816 07:25:34.412" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:25:30.268" endtime="20170816 07:25:34.412"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:25:34.414" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:25:34.414" endtime="20170816 07:25:34.414"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:25:34.416" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:25:34.415" endtime="20170816 07:25:34.416"></status>
</kw>
<status status="PASS" starttime="20170816 07:25:34.415" endtime="20170816 07:25:34.416"></status>
</kw>
<status status="PASS" starttime="20170816 07:25:34.413" endtime="20170816 07:25:34.417"></status>
</kw>
<status status="PASS" starttime="20170816 07:25:34.412" endtime="20170816 07:25:34.417"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 07:25:34.417" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170816 07:25:34.417" endtime="20170816 07:25:34.417"></status>
</kw>
<msg timestamp="20170816 07:25:34.417" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:25:29.838" endtime="20170816 07:25:34.417"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:25:34.418" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:25:34.418" endtime="20170816 07:25:34.418"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 07:25:34.419" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 07:25:34.419" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 07:25:34.419" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170816 07:25:34.418" endtime="20170816 07:25:34.419"></status>
</kw>
<msg timestamp="20170816 07:25:34.419" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" starttime="20170816 07:25:29.837" endtime="20170816 07:25:34.419"></status>
</kw>
<msg timestamp="20170816 07:25:34.419" level="INFO">${power_state} = On</msg>
<status status="PASS" starttime="20170816 07:25:29.837" endtime="20170816 07:25:34.419"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" starttime="20170816 07:25:34.420" endtime="20170816 07:25:34.420"></status>
</kw>
<status status="PASS" starttime="20170816 07:25:29.837" endtime="20170816 07:25:34.420"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 07:25:34.424" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170816 07:25:34.424" endtime="20170816 07:25:34.425"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 07:25:34.426" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170816 07:25:34.425" endtime="20170816 07:25:34.426"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 07:25:34.427" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170816 07:25:34.426" endtime="20170816 07:25:34.427"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 07:25:34.428" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170816 07:25:34.427" endtime="20170816 07:25:34.428"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 07:25:35.252" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170816 07:25:34.429" endtime="20170816 07:25:35.252"></status>
</kw>
<msg timestamp="20170816 07:25:35.252" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 07:25:35.252" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:25:34.428" endtime="20170816 07:25:35.252"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 07:25:35.253" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:25:35.252" endtime="20170816 07:25:35.253"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:25:35.253" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:25:35.253" endtime="20170816 07:25:35.254"></status>
</kw>
<status status="PASS" starttime="20170816 07:25:34.423" endtime="20170816 07:25:35.254"></status>
</kw>
<status status="PASS" starttime="20170816 07:25:34.422" endtime="20170816 07:25:35.254"></status>
</kw>
<status status="PASS" starttime="20170816 07:25:34.422" endtime="20170816 07:25:35.254"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 07:25:35.254" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" starttime="20170816 07:25:35.254" endtime="20170816 07:25:35.254"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:25:35.257" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:25:35.256" endtime="20170816 07:25:35.257"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:25:35.258" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:25:35.258" endtime="20170816 07:25:35.258"></status>
</kw>
<status status="PASS" starttime="20170816 07:25:35.257" endtime="20170816 07:25:35.258"></status>
</kw>
<status status="PASS" starttime="20170816 07:25:35.255" endtime="20170816 07:25:35.258"></status>
</kw>
<status status="PASS" starttime="20170816 07:25:35.255" endtime="20170816 07:25:35.258"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 07:25:35.454" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170816 07:25:35.454" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:25:35.259" endtime="20170816 07:25:35.454"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:25:35.456" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:25:35.455" endtime="20170816 07:25:35.456"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:25:35.457" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:25:35.456" endtime="20170816 07:25:35.457"></status>
</kw>
<status status="PASS" starttime="20170816 07:25:35.456" endtime="20170816 07:25:35.457"></status>
</kw>
<status status="PASS" starttime="20170816 07:25:35.455" endtime="20170816 07:25:35.457"></status>
</kw>
<status status="PASS" starttime="20170816 07:25:35.454" endtime="20170816 07:25:35.457"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 07:25:35.458" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170816 07:25:35.457" endtime="20170816 07:25:35.458"></status>
</kw>
<msg timestamp="20170816 07:25:35.458" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:25:34.421" endtime="20170816 07:25:35.458"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:25:35.458" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:25:35.458" endtime="20170816 07:25:35.459"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 07:25:35.459" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 07:25:35.459" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 07:25:35.459" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170816 07:25:35.459" endtime="20170816 07:25:35.459"></status>
</kw>
<msg timestamp="20170816 07:25:35.460" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" starttime="20170816 07:25:34.421" endtime="20170816 07:25:35.460"></status>
</kw>
<msg timestamp="20170816 07:25:35.460" level="INFO">${host_state} = Running</msg>
<status status="PASS" starttime="20170816 07:25:34.420" endtime="20170816 07:25:35.460"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status status="PASS" starttime="20170816 07:25:35.460" endtime="20170816 07:25:35.460"></status>
</kw>
<kw library="state_manager" name="Is OS Booted">
<doc>Check OS status.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Is OS Starting</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 07:25:35.465" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170816 07:25:35.465" endtime="20170816 07:25:35.466"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 07:25:35.466" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170816 07:25:35.466" endtime="20170816 07:25:35.466"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 07:25:35.467" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170816 07:25:35.466" endtime="20170816 07:25:35.467"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 07:25:35.468" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170816 07:25:35.467" endtime="20170816 07:25:35.468"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 07:25:35.652" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170816 07:25:35.468" endtime="20170816 07:25:35.652"></status>
</kw>
<msg timestamp="20170816 07:25:35.652" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 07:25:35.652" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:25:35.468" endtime="20170816 07:25:35.652"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 07:25:35.652" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:25:35.652" endtime="20170816 07:25:35.653"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:25:35.653" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:25:35.653" endtime="20170816 07:25:35.653"></status>
</kw>
<status status="PASS" starttime="20170816 07:25:35.464" endtime="20170816 07:25:35.653"></status>
</kw>
<status status="PASS" starttime="20170816 07:25:35.464" endtime="20170816 07:25:35.653"></status>
</kw>
<status status="PASS" starttime="20170816 07:25:35.463" endtime="20170816 07:25:35.654"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 07:25:35.654" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" starttime="20170816 07:25:35.654" endtime="20170816 07:25:35.654"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:25:35.656" level="INFO">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:25:35.656" endtime="20170816 07:25:35.656"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:25:35.657" level="INFO">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:25:35.657" endtime="20170816 07:25:35.657"></status>
</kw>
<status status="PASS" starttime="20170816 07:25:35.656" endtime="20170816 07:25:35.657"></status>
</kw>
<status status="PASS" starttime="20170816 07:25:35.655" endtime="20170816 07:25:35.657"></status>
</kw>
<status status="PASS" starttime="20170816 07:25:35.654" endtime="20170816 07:25:35.658"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 07:25:35.723" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170816 07:25:35.723" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:25:35.658" endtime="20170816 07:25:35.723"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:25:35.725" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:25:35.724" endtime="20170816 07:25:35.725"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:25:35.726" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:25:35.726" endtime="20170816 07:25:35.726"></status>
</kw>
<status status="PASS" starttime="20170816 07:25:35.725" endtime="20170816 07:25:35.726"></status>
</kw>
<status status="PASS" starttime="20170816 07:25:35.724" endtime="20170816 07:25:35.726"></status>
</kw>
<status status="PASS" starttime="20170816 07:25:35.723" endtime="20170816 07:25:35.726"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 07:25:35.727" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170816 07:25:35.726" endtime="20170816 07:25:35.727"></status>
</kw>
<msg timestamp="20170816 07:25:35.727" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:25:35.462" endtime="20170816 07:25:35.727"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:25:35.727" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:25:35.727" endtime="20170816 07:25:35.728"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 07:25:35.728" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 07:25:35.728" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 07:25:35.728" level="INFO">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170816 07:25:35.728" endtime="20170816 07:25:35.728"></status>
</kw>
<msg timestamp="20170816 07:25:35.729" level="INFO">${state} = Off</msg>
<status status="PASS" starttime="20170816 07:25:35.462" endtime="20170816 07:25:35.729"></status>
</kw>
<msg timestamp="20170816 07:25:35.729" level="INFO">${boot_progress} = Off</msg>
<status status="PASS" starttime="20170816 07:25:35.462" endtime="20170816 07:25:35.729"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170816 07:25:35.729" level="FAIL">Off != FW Progress, Starting OS</msg>
<status status="FAIL" starttime="20170816 07:25:35.729" endtime="20170816 07:25:35.730"></status>
</kw>
<status status="FAIL" starttime="20170816 07:25:35.461" endtime="20170816 07:25:35.730"></status>
</kw>
<msg timestamp="20170816 07:25:35.730" level="INFO">${status} = False</msg>
<status status="PASS" starttime="20170816 07:25:35.461" endtime="20170816 07:25:35.730"></status>
</kw>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${True}'</arg>
<arg>${True}</arg>
</arguments>
<status status="PASS" starttime="20170816 07:25:35.730" endtime="20170816 07:25:35.730"></status>
</kw>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 07:25:35.736" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170816 07:25:35.735" endtime="20170816 07:25:35.736"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 07:25:35.737" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170816 07:25:35.736" endtime="20170816 07:25:35.737"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 07:25:35.738" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170816 07:25:35.737" endtime="20170816 07:25:35.738"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 07:25:35.739" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170816 07:25:35.738" endtime="20170816 07:25:35.739"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 07:25:35.927" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170816 07:25:35.740" endtime="20170816 07:25:35.928"></status>
</kw>
<msg timestamp="20170816 07:25:35.928" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 07:25:35.928" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:25:35.739" endtime="20170816 07:25:35.928"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 07:25:35.928" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:25:35.928" endtime="20170816 07:25:35.929"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:25:35.929" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:25:35.929" endtime="20170816 07:25:35.929"></status>
</kw>
<status status="PASS" starttime="20170816 07:25:35.734" endtime="20170816 07:25:35.929"></status>
</kw>
<status status="PASS" starttime="20170816 07:25:35.734" endtime="20170816 07:25:35.929"></status>
</kw>
<status status="PASS" starttime="20170816 07:25:35.733" endtime="20170816 07:25:35.930"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 07:25:35.930" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status status="PASS" starttime="20170816 07:25:35.930" endtime="20170816 07:25:35.930"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:25:35.932" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:25:35.932" endtime="20170816 07:25:35.932"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:25:35.933" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:25:35.933" endtime="20170816 07:25:35.934"></status>
</kw>
<status status="PASS" starttime="20170816 07:25:35.932" endtime="20170816 07:25:35.934"></status>
</kw>
<status status="PASS" starttime="20170816 07:25:35.931" endtime="20170816 07:25:35.934"></status>
</kw>
<status status="PASS" starttime="20170816 07:25:35.930" endtime="20170816 07:25:35.934"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 07:25:36.073" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg timestamp="20170816 07:25:36.073" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:25:35.934" endtime="20170816 07:25:36.073"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:25:36.076" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:25:36.075" endtime="20170816 07:25:36.076"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:25:36.076" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:25:36.076" endtime="20170816 07:25:36.077"></status>
</kw>
<status status="PASS" starttime="20170816 07:25:36.076" endtime="20170816 07:25:36.077"></status>
</kw>
<status status="PASS" starttime="20170816 07:25:36.074" endtime="20170816 07:25:36.077"></status>
</kw>
<status status="PASS" starttime="20170816 07:25:36.074" endtime="20170816 07:25:36.077"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 07:25:36.077" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170816 07:25:36.077" endtime="20170816 07:25:36.077"></status>
</kw>
<msg timestamp="20170816 07:25:36.078" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:25:35.732" endtime="20170816 07:25:36.078"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:25:36.078" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:25:36.078" endtime="20170816 07:25:36.078"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 07:25:36.079" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 07:25:36.079" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 07:25:36.079" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170816 07:25:36.079" endtime="20170816 07:25:36.079"></status>
</kw>
<msg timestamp="20170816 07:25:36.079" level="INFO">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="PASS" starttime="20170816 07:25:35.731" endtime="20170816 07:25:36.079"></status>
</kw>
<msg timestamp="20170816 07:25:36.080" level="INFO">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="PASS" starttime="20170816 07:25:35.730" endtime="20170816 07:25:36.080"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg timestamp="20170816 07:25:36.080" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170816 07:25:36.080" level="FAIL">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="FAIL" starttime="20170816 07:25:36.080" endtime="20170816 07:25:36.080"></status>
</kw>
<status status="FAIL" starttime="20170816 07:25:35.461" endtime="20170816 07:25:36.081"></status>
</kw>
<status status="FAIL" starttime="20170816 07:25:29.836" endtime="20170816 07:25:36.081"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 07:25:46.085" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170816 07:25:46.085" endtime="20170816 07:25:46.086"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 07:25:46.086" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170816 07:25:46.086" endtime="20170816 07:25:46.086"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 07:25:46.087" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170816 07:25:46.087" endtime="20170816 07:25:46.087"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 07:25:46.088" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170816 07:25:46.087" endtime="20170816 07:25:46.088"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 07:25:46.473" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170816 07:25:46.089" endtime="20170816 07:25:46.474"></status>
</kw>
<msg timestamp="20170816 07:25:46.474" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 07:25:46.474" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:25:46.088" endtime="20170816 07:25:46.474"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 07:25:46.474" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:25:46.474" endtime="20170816 07:25:46.474"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:25:46.475" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:25:46.475" endtime="20170816 07:25:46.475"></status>
</kw>
<status status="PASS" starttime="20170816 07:25:46.085" endtime="20170816 07:25:46.475"></status>
</kw>
<status status="PASS" starttime="20170816 07:25:46.084" endtime="20170816 07:25:46.475"></status>
</kw>
<status status="PASS" starttime="20170816 07:25:46.084" endtime="20170816 07:25:46.475"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 07:25:46.476" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20170816 07:25:46.476" endtime="20170816 07:25:46.476"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:25:46.478" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:25:46.477" endtime="20170816 07:25:46.478"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:25:46.479" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:25:46.479" endtime="20170816 07:25:46.479"></status>
</kw>
<status status="PASS" starttime="20170816 07:25:46.478" endtime="20170816 07:25:46.479"></status>
</kw>
<status status="PASS" starttime="20170816 07:25:46.477" endtime="20170816 07:25:46.480"></status>
</kw>
<status status="PASS" starttime="20170816 07:25:46.476" endtime="20170816 07:25:46.480"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 07:25:52.954" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170816 07:25:52.954" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:25:46.480" endtime="20170816 07:25:52.954"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:25:52.956" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:25:52.956" endtime="20170816 07:25:52.956"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:25:52.957" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:25:52.957" endtime="20170816 07:25:52.957"></status>
</kw>
<status status="PASS" starttime="20170816 07:25:52.956" endtime="20170816 07:25:52.957"></status>
</kw>
<status status="PASS" starttime="20170816 07:25:52.955" endtime="20170816 07:25:52.957"></status>
</kw>
<status status="PASS" starttime="20170816 07:25:52.955" endtime="20170816 07:25:52.958"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 07:25:52.958" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170816 07:25:52.958" endtime="20170816 07:25:52.958"></status>
</kw>
<msg timestamp="20170816 07:25:52.958" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:25:46.083" endtime="20170816 07:25:52.958"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:25:52.959" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:25:52.958" endtime="20170816 07:25:52.959"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 07:25:52.959" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 07:25:52.959" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 07:25:52.960" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170816 07:25:52.959" endtime="20170816 07:25:52.960"></status>
</kw>
<msg timestamp="20170816 07:25:52.960" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" starttime="20170816 07:25:46.082" endtime="20170816 07:25:52.960"></status>
</kw>
<msg timestamp="20170816 07:25:52.960" level="INFO">${power_state} = Off</msg>
<status status="PASS" starttime="20170816 07:25:46.082" endtime="20170816 07:25:52.960"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20170816 07:25:52.961" level="FAIL">On != Off</msg>
<status status="FAIL" starttime="20170816 07:25:52.961" endtime="20170816 07:25:52.961"></status>
</kw>
<status status="FAIL" starttime="20170816 07:25:46.082" endtime="20170816 07:25:52.961"></status>
</kw>
<status status="FAIL" starttime="20170816 07:25:46.081" endtime="20170816 07:25:52.961"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 07:26:02.966" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170816 07:26:02.966" endtime="20170816 07:26:02.967"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 07:26:02.967" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170816 07:26:02.967" endtime="20170816 07:26:02.967"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 07:26:02.968" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170816 07:26:02.968" endtime="20170816 07:26:02.968"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 07:26:02.969" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170816 07:26:02.968" endtime="20170816 07:26:02.969"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 07:26:03.430" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170816 07:26:02.969" endtime="20170816 07:26:03.431"></status>
</kw>
<msg timestamp="20170816 07:26:03.431" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 07:26:03.431" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:26:02.969" endtime="20170816 07:26:03.431"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 07:26:03.431" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:26:03.431" endtime="20170816 07:26:03.432"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:26:03.432" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:26:03.432" endtime="20170816 07:26:03.432"></status>
</kw>
<status status="PASS" starttime="20170816 07:26:02.965" endtime="20170816 07:26:03.432"></status>
</kw>
<status status="PASS" starttime="20170816 07:26:02.965" endtime="20170816 07:26:03.432"></status>
</kw>
<status status="PASS" starttime="20170816 07:26:02.964" endtime="20170816 07:26:03.433"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 07:26:03.433" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20170816 07:26:03.433" endtime="20170816 07:26:03.433"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:26:03.435" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:26:03.435" endtime="20170816 07:26:03.435"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:26:03.436" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:26:03.436" endtime="20170816 07:26:03.436"></status>
</kw>
<status status="PASS" starttime="20170816 07:26:03.435" endtime="20170816 07:26:03.436"></status>
</kw>
<status status="PASS" starttime="20170816 07:26:03.434" endtime="20170816 07:26:03.437"></status>
</kw>
<status status="PASS" starttime="20170816 07:26:03.433" endtime="20170816 07:26:03.437"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 07:26:03.965" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170816 07:26:03.965" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:26:03.437" endtime="20170816 07:26:03.966"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:26:03.967" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:26:03.967" endtime="20170816 07:26:03.967"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:26:03.969" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:26:03.968" endtime="20170816 07:26:03.969"></status>
</kw>
<status status="PASS" starttime="20170816 07:26:03.968" endtime="20170816 07:26:03.969"></status>
</kw>
<status status="PASS" starttime="20170816 07:26:03.966" endtime="20170816 07:26:03.969"></status>
</kw>
<status status="PASS" starttime="20170816 07:26:03.966" endtime="20170816 07:26:03.969"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 07:26:03.969" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170816 07:26:03.969" endtime="20170816 07:26:03.969"></status>
</kw>
<msg timestamp="20170816 07:26:03.970" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:26:02.963" endtime="20170816 07:26:03.970"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:26:03.970" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:26:03.970" endtime="20170816 07:26:03.970"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 07:26:03.971" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 07:26:03.971" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 07:26:03.971" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170816 07:26:03.971" endtime="20170816 07:26:03.971"></status>
</kw>
<msg timestamp="20170816 07:26:03.971" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" starttime="20170816 07:26:02.963" endtime="20170816 07:26:03.972"></status>
</kw>
<msg timestamp="20170816 07:26:03.972" level="INFO">${power_state} = On</msg>
<status status="PASS" starttime="20170816 07:26:02.962" endtime="20170816 07:26:03.972"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" starttime="20170816 07:26:03.972" endtime="20170816 07:26:03.972"></status>
</kw>
<status status="PASS" starttime="20170816 07:26:02.962" endtime="20170816 07:26:03.972"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 07:26:03.976" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170816 07:26:03.976" endtime="20170816 07:26:03.976"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 07:26:03.977" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170816 07:26:03.977" endtime="20170816 07:26:03.977"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 07:26:03.978" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170816 07:26:03.978" endtime="20170816 07:26:03.978"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 07:26:03.979" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170816 07:26:03.978" endtime="20170816 07:26:03.979"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 07:26:04.358" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170816 07:26:03.980" endtime="20170816 07:26:04.358"></status>
</kw>
<msg timestamp="20170816 07:26:04.358" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 07:26:04.358" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:26:03.979" endtime="20170816 07:26:04.358"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 07:26:04.359" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:26:04.358" endtime="20170816 07:26:04.359"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:26:04.359" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:26:04.359" endtime="20170816 07:26:04.360"></status>
</kw>
<status status="PASS" starttime="20170816 07:26:03.975" endtime="20170816 07:26:04.360"></status>
</kw>
<status status="PASS" starttime="20170816 07:26:03.975" endtime="20170816 07:26:04.360"></status>
</kw>
<status status="PASS" starttime="20170816 07:26:03.974" endtime="20170816 07:26:04.360"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 07:26:04.360" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" starttime="20170816 07:26:04.360" endtime="20170816 07:26:04.360"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:26:04.363" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:26:04.362" endtime="20170816 07:26:04.363"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:26:04.364" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:26:04.364" endtime="20170816 07:26:04.364"></status>
</kw>
<status status="PASS" starttime="20170816 07:26:04.363" endtime="20170816 07:26:04.364"></status>
</kw>
<status status="PASS" starttime="20170816 07:26:04.361" endtime="20170816 07:26:04.364"></status>
</kw>
<status status="PASS" starttime="20170816 07:26:04.361" endtime="20170816 07:26:04.364"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 07:26:04.818" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170816 07:26:04.818" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:26:04.364" endtime="20170816 07:26:04.818"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:26:04.820" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:26:04.819" endtime="20170816 07:26:04.820"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:26:04.821" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:26:04.820" endtime="20170816 07:26:04.821"></status>
</kw>
<status status="PASS" starttime="20170816 07:26:04.820" endtime="20170816 07:26:04.821"></status>
</kw>
<status status="PASS" starttime="20170816 07:26:04.819" endtime="20170816 07:26:04.821"></status>
</kw>
<status status="PASS" starttime="20170816 07:26:04.818" endtime="20170816 07:26:04.821"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 07:26:04.821" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170816 07:26:04.821" endtime="20170816 07:26:04.822"></status>
</kw>
<msg timestamp="20170816 07:26:04.822" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:26:03.974" endtime="20170816 07:26:04.822"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:26:04.822" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:26:04.822" endtime="20170816 07:26:04.822"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 07:26:04.823" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 07:26:04.823" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 07:26:04.823" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170816 07:26:04.823" endtime="20170816 07:26:04.823"></status>
</kw>
<msg timestamp="20170816 07:26:04.823" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" starttime="20170816 07:26:03.973" endtime="20170816 07:26:04.823"></status>
</kw>
<msg timestamp="20170816 07:26:04.824" level="INFO">${host_state} = Running</msg>
<status status="PASS" starttime="20170816 07:26:03.973" endtime="20170816 07:26:04.824"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status status="PASS" starttime="20170816 07:26:04.824" endtime="20170816 07:26:04.824"></status>
</kw>
<kw library="state_manager" name="Is OS Booted">
<doc>Check OS status.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Is OS Starting</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 07:26:04.829" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170816 07:26:04.829" endtime="20170816 07:26:04.830"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 07:26:04.830" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170816 07:26:04.830" endtime="20170816 07:26:04.830"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 07:26:04.831" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170816 07:26:04.831" endtime="20170816 07:26:04.831"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 07:26:04.832" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170816 07:26:04.831" endtime="20170816 07:26:04.832"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 07:26:05.072" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170816 07:26:04.832" endtime="20170816 07:26:05.072"></status>
</kw>
<msg timestamp="20170816 07:26:05.072" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 07:26:05.072" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:26:04.832" endtime="20170816 07:26:05.072"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 07:26:05.073" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:26:05.073" endtime="20170816 07:26:05.073"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:26:05.074" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:26:05.073" endtime="20170816 07:26:05.074"></status>
</kw>
<status status="PASS" starttime="20170816 07:26:04.828" endtime="20170816 07:26:05.074"></status>
</kw>
<status status="PASS" starttime="20170816 07:26:04.828" endtime="20170816 07:26:05.074"></status>
</kw>
<status status="PASS" starttime="20170816 07:26:04.827" endtime="20170816 07:26:05.074"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 07:26:05.075" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" starttime="20170816 07:26:05.074" endtime="20170816 07:26:05.075"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:26:05.077" level="INFO">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:26:05.076" endtime="20170816 07:26:05.077"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:26:05.078" level="INFO">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:26:05.077" endtime="20170816 07:26:05.078"></status>
</kw>
<status status="PASS" starttime="20170816 07:26:05.077" endtime="20170816 07:26:05.078"></status>
</kw>
<status status="PASS" starttime="20170816 07:26:05.075" endtime="20170816 07:26:05.078"></status>
</kw>
<status status="PASS" starttime="20170816 07:26:05.075" endtime="20170816 07:26:05.078"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 07:26:05.158" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170816 07:26:05.158" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:26:05.078" endtime="20170816 07:26:05.158"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:26:05.160" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:26:05.159" endtime="20170816 07:26:05.160"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:26:05.161" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:26:05.160" endtime="20170816 07:26:05.161"></status>
</kw>
<status status="PASS" starttime="20170816 07:26:05.160" endtime="20170816 07:26:05.161"></status>
</kw>
<status status="PASS" starttime="20170816 07:26:05.159" endtime="20170816 07:26:05.161"></status>
</kw>
<status status="PASS" starttime="20170816 07:26:05.158" endtime="20170816 07:26:05.161"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 07:26:05.162" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170816 07:26:05.161" endtime="20170816 07:26:05.162"></status>
</kw>
<msg timestamp="20170816 07:26:05.162" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:26:04.826" endtime="20170816 07:26:05.162"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:26:05.162" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:26:05.162" endtime="20170816 07:26:05.163"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 07:26:05.163" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 07:26:05.163" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 07:26:05.163" level="INFO">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170816 07:26:05.163" endtime="20170816 07:26:05.163"></status>
</kw>
<msg timestamp="20170816 07:26:05.163" level="INFO">${state} = Off</msg>
<status status="PASS" starttime="20170816 07:26:04.826" endtime="20170816 07:26:05.164"></status>
</kw>
<msg timestamp="20170816 07:26:05.164" level="INFO">${boot_progress} = Off</msg>
<status status="PASS" starttime="20170816 07:26:04.825" endtime="20170816 07:26:05.164"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170816 07:26:05.164" level="FAIL">Off != FW Progress, Starting OS</msg>
<status status="FAIL" starttime="20170816 07:26:05.164" endtime="20170816 07:26:05.164"></status>
</kw>
<status status="FAIL" starttime="20170816 07:26:04.825" endtime="20170816 07:26:05.165"></status>
</kw>
<msg timestamp="20170816 07:26:05.165" level="INFO">${status} = False</msg>
<status status="PASS" starttime="20170816 07:26:04.825" endtime="20170816 07:26:05.165"></status>
</kw>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${True}'</arg>
<arg>${True}</arg>
</arguments>
<status status="PASS" starttime="20170816 07:26:05.165" endtime="20170816 07:26:05.165"></status>
</kw>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 07:26:05.169" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170816 07:26:05.169" endtime="20170816 07:26:05.170"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 07:26:05.170" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170816 07:26:05.170" endtime="20170816 07:26:05.170"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 07:26:05.171" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170816 07:26:05.171" endtime="20170816 07:26:05.171"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 07:26:05.172" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170816 07:26:05.171" endtime="20170816 07:26:05.172"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 07:26:05.360" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170816 07:26:05.172" endtime="20170816 07:26:05.360"></status>
</kw>
<msg timestamp="20170816 07:26:05.360" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 07:26:05.360" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:26:05.172" endtime="20170816 07:26:05.360"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 07:26:05.361" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:26:05.361" endtime="20170816 07:26:05.361"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:26:05.362" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:26:05.361" endtime="20170816 07:26:05.362"></status>
</kw>
<status status="PASS" starttime="20170816 07:26:05.169" endtime="20170816 07:26:05.362"></status>
</kw>
<status status="PASS" starttime="20170816 07:26:05.168" endtime="20170816 07:26:05.362"></status>
</kw>
<status status="PASS" starttime="20170816 07:26:05.167" endtime="20170816 07:26:05.362"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 07:26:05.363" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status status="PASS" starttime="20170816 07:26:05.362" endtime="20170816 07:26:05.363"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:26:05.365" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:26:05.364" endtime="20170816 07:26:05.365"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:26:05.366" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:26:05.366" endtime="20170816 07:26:05.366"></status>
</kw>
<status status="PASS" starttime="20170816 07:26:05.365" endtime="20170816 07:26:05.366"></status>
</kw>
<status status="PASS" starttime="20170816 07:26:05.364" endtime="20170816 07:26:05.366"></status>
</kw>
<status status="PASS" starttime="20170816 07:26:05.363" endtime="20170816 07:26:05.366"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 07:26:05.468" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg timestamp="20170816 07:26:05.468" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:26:05.367" endtime="20170816 07:26:05.468"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:26:05.472" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:26:05.472" endtime="20170816 07:26:05.472"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:26:05.473" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:26:05.473" endtime="20170816 07:26:05.473"></status>
</kw>
<status status="PASS" starttime="20170816 07:26:05.473" endtime="20170816 07:26:05.474"></status>
</kw>
<status status="PASS" starttime="20170816 07:26:05.469" endtime="20170816 07:26:05.474"></status>
</kw>
<status status="PASS" starttime="20170816 07:26:05.468" endtime="20170816 07:26:05.474"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 07:26:05.474" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170816 07:26:05.474" endtime="20170816 07:26:05.474"></status>
</kw>
<msg timestamp="20170816 07:26:05.474" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:26:05.166" endtime="20170816 07:26:05.474"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:26:05.475" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:26:05.475" endtime="20170816 07:26:05.475"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 07:26:05.476" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 07:26:05.476" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 07:26:05.476" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170816 07:26:05.476" endtime="20170816 07:26:05.476"></status>
</kw>
<msg timestamp="20170816 07:26:05.476" level="INFO">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="PASS" starttime="20170816 07:26:05.166" endtime="20170816 07:26:05.476"></status>
</kw>
<msg timestamp="20170816 07:26:05.477" level="INFO">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="PASS" starttime="20170816 07:26:05.165" endtime="20170816 07:26:05.477"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg timestamp="20170816 07:26:05.477" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170816 07:26:05.477" level="FAIL">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="FAIL" starttime="20170816 07:26:05.477" endtime="20170816 07:26:05.478"></status>
</kw>
<status status="FAIL" starttime="20170816 07:26:04.824" endtime="20170816 07:26:05.478"></status>
</kw>
<status status="FAIL" starttime="20170816 07:26:02.962" endtime="20170816 07:26:05.478"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 07:26:15.483" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170816 07:26:15.483" endtime="20170816 07:26:15.483"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 07:26:15.484" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170816 07:26:15.484" endtime="20170816 07:26:15.484"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 07:26:15.485" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170816 07:26:15.484" endtime="20170816 07:26:15.485"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 07:26:15.485" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170816 07:26:15.485" endtime="20170816 07:26:15.485"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 07:26:15.712" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170816 07:26:15.486" endtime="20170816 07:26:15.712"></status>
</kw>
<msg timestamp="20170816 07:26:15.712" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 07:26:15.712" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:26:15.486" endtime="20170816 07:26:15.712"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 07:26:15.713" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:26:15.712" endtime="20170816 07:26:15.713"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:26:15.713" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:26:15.713" endtime="20170816 07:26:15.714"></status>
</kw>
<status status="PASS" starttime="20170816 07:26:15.482" endtime="20170816 07:26:15.714"></status>
</kw>
<status status="PASS" starttime="20170816 07:26:15.482" endtime="20170816 07:26:15.714"></status>
</kw>
<status status="PASS" starttime="20170816 07:26:15.481" endtime="20170816 07:26:15.714"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 07:26:15.714" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20170816 07:26:15.714" endtime="20170816 07:26:15.714"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:26:15.717" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:26:15.716" endtime="20170816 07:26:15.717"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:26:15.717" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:26:15.717" endtime="20170816 07:26:15.718"></status>
</kw>
<status status="PASS" starttime="20170816 07:26:15.717" endtime="20170816 07:26:15.718"></status>
</kw>
<status status="PASS" starttime="20170816 07:26:15.715" endtime="20170816 07:26:15.718"></status>
</kw>
<status status="PASS" starttime="20170816 07:26:15.715" endtime="20170816 07:26:15.718"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 07:26:15.831" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170816 07:26:15.831" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:26:15.718" endtime="20170816 07:26:15.831"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:26:15.833" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:26:15.832" endtime="20170816 07:26:15.833"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:26:15.834" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:26:15.833" endtime="20170816 07:26:15.834"></status>
</kw>
<status status="PASS" starttime="20170816 07:26:15.833" endtime="20170816 07:26:15.834"></status>
</kw>
<status status="PASS" starttime="20170816 07:26:15.832" endtime="20170816 07:26:15.834"></status>
</kw>
<status status="PASS" starttime="20170816 07:26:15.831" endtime="20170816 07:26:15.834"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 07:26:15.834" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170816 07:26:15.834" endtime="20170816 07:26:15.834"></status>
</kw>
<msg timestamp="20170816 07:26:15.835" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:26:15.480" endtime="20170816 07:26:15.835"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:26:15.835" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:26:15.835" endtime="20170816 07:26:15.835"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 07:26:15.836" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 07:26:15.836" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 07:26:15.836" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170816 07:26:15.836" endtime="20170816 07:26:15.836"></status>
</kw>
<msg timestamp="20170816 07:26:15.836" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" starttime="20170816 07:26:15.480" endtime="20170816 07:26:15.836"></status>
</kw>
<msg timestamp="20170816 07:26:15.837" level="INFO">${power_state} = On</msg>
<status status="PASS" starttime="20170816 07:26:15.479" endtime="20170816 07:26:15.837"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" starttime="20170816 07:26:15.837" endtime="20170816 07:26:15.837"></status>
</kw>
<status status="PASS" starttime="20170816 07:26:15.479" endtime="20170816 07:26:15.837"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 07:26:15.841" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170816 07:26:15.841" endtime="20170816 07:26:15.842"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 07:26:15.842" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170816 07:26:15.842" endtime="20170816 07:26:15.842"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 07:26:15.843" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170816 07:26:15.842" endtime="20170816 07:26:15.843"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 07:26:15.843" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170816 07:26:15.843" endtime="20170816 07:26:15.843"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 07:26:16.046" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170816 07:26:15.844" endtime="20170816 07:26:16.046"></status>
</kw>
<msg timestamp="20170816 07:26:16.046" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 07:26:16.046" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:26:15.844" endtime="20170816 07:26:16.046"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 07:26:16.047" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:26:16.046" endtime="20170816 07:26:16.047"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:26:16.047" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:26:16.047" endtime="20170816 07:26:16.048"></status>
</kw>
<status status="PASS" starttime="20170816 07:26:15.840" endtime="20170816 07:26:16.048"></status>
</kw>
<status status="PASS" starttime="20170816 07:26:15.840" endtime="20170816 07:26:16.048"></status>
</kw>
<status status="PASS" starttime="20170816 07:26:15.839" endtime="20170816 07:26:16.048"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 07:26:16.048" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" starttime="20170816 07:26:16.048" endtime="20170816 07:26:16.048"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:26:16.050" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:26:16.050" endtime="20170816 07:26:16.051"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:26:16.051" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:26:16.051" endtime="20170816 07:26:16.052"></status>
</kw>
<status status="PASS" starttime="20170816 07:26:16.051" endtime="20170816 07:26:16.052"></status>
</kw>
<status status="PASS" starttime="20170816 07:26:16.049" endtime="20170816 07:26:16.052"></status>
</kw>
<status status="PASS" starttime="20170816 07:26:16.049" endtime="20170816 07:26:16.052"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 07:26:16.147" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170816 07:26:16.147" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:26:16.052" endtime="20170816 07:26:16.147"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:26:16.149" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:26:16.148" endtime="20170816 07:26:16.149"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:26:16.150" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:26:16.149" endtime="20170816 07:26:16.150"></status>
</kw>
<status status="PASS" starttime="20170816 07:26:16.149" endtime="20170816 07:26:16.150"></status>
</kw>
<status status="PASS" starttime="20170816 07:26:16.148" endtime="20170816 07:26:16.150"></status>
</kw>
<status status="PASS" starttime="20170816 07:26:16.147" endtime="20170816 07:26:16.150"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 07:26:16.150" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170816 07:26:16.150" endtime="20170816 07:26:16.150"></status>
</kw>
<msg timestamp="20170816 07:26:16.151" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:26:15.838" endtime="20170816 07:26:16.151"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:26:16.151" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:26:16.151" endtime="20170816 07:26:16.151"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 07:26:16.152" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 07:26:16.152" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 07:26:16.152" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170816 07:26:16.152" endtime="20170816 07:26:16.152"></status>
</kw>
<msg timestamp="20170816 07:26:16.152" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" starttime="20170816 07:26:15.838" endtime="20170816 07:26:16.152"></status>
</kw>
<msg timestamp="20170816 07:26:16.153" level="INFO">${host_state} = Running</msg>
<status status="PASS" starttime="20170816 07:26:15.838" endtime="20170816 07:26:16.153"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status status="PASS" starttime="20170816 07:26:16.153" endtime="20170816 07:26:16.153"></status>
</kw>
<kw library="state_manager" name="Is OS Booted">
<doc>Check OS status.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Is OS Starting</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 07:26:16.158" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170816 07:26:16.158" endtime="20170816 07:26:16.159"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 07:26:16.159" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170816 07:26:16.159" endtime="20170816 07:26:16.159"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 07:26:16.160" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170816 07:26:16.159" endtime="20170816 07:26:16.160"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 07:26:16.160" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170816 07:26:16.160" endtime="20170816 07:26:16.160"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 07:26:16.335" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170816 07:26:16.161" endtime="20170816 07:26:16.336"></status>
</kw>
<msg timestamp="20170816 07:26:16.336" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 07:26:16.336" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:26:16.161" endtime="20170816 07:26:16.336"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 07:26:16.336" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:26:16.336" endtime="20170816 07:26:16.337"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:26:16.337" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:26:16.337" endtime="20170816 07:26:16.337"></status>
</kw>
<status status="PASS" starttime="20170816 07:26:16.157" endtime="20170816 07:26:16.337"></status>
</kw>
<status status="PASS" starttime="20170816 07:26:16.157" endtime="20170816 07:26:16.337"></status>
</kw>
<status status="PASS" starttime="20170816 07:26:16.156" endtime="20170816 07:26:16.338"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 07:26:16.338" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" starttime="20170816 07:26:16.338" endtime="20170816 07:26:16.338"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:26:16.341" level="INFO">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:26:16.340" endtime="20170816 07:26:16.341"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:26:16.342" level="INFO">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:26:16.341" endtime="20170816 07:26:16.342"></status>
</kw>
<status status="PASS" starttime="20170816 07:26:16.341" endtime="20170816 07:26:16.342"></status>
</kw>
<status status="PASS" starttime="20170816 07:26:16.339" endtime="20170816 07:26:16.342"></status>
</kw>
<status status="PASS" starttime="20170816 07:26:16.338" endtime="20170816 07:26:16.342"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 07:26:16.407" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170816 07:26:16.407" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:26:16.342" endtime="20170816 07:26:16.407"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:26:16.409" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:26:16.408" endtime="20170816 07:26:16.409"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:26:16.410" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:26:16.410" endtime="20170816 07:26:16.410"></status>
</kw>
<status status="PASS" starttime="20170816 07:26:16.409" endtime="20170816 07:26:16.410"></status>
</kw>
<status status="PASS" starttime="20170816 07:26:16.408" endtime="20170816 07:26:16.410"></status>
</kw>
<status status="PASS" starttime="20170816 07:26:16.408" endtime="20170816 07:26:16.410"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 07:26:16.411" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170816 07:26:16.410" endtime="20170816 07:26:16.411"></status>
</kw>
<msg timestamp="20170816 07:26:16.411" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:26:16.156" endtime="20170816 07:26:16.411"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:26:16.412" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:26:16.411" endtime="20170816 07:26:16.412"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 07:26:16.412" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 07:26:16.412" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 07:26:16.412" level="INFO">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170816 07:26:16.412" endtime="20170816 07:26:16.412"></status>
</kw>
<msg timestamp="20170816 07:26:16.413" level="INFO">${state} = Off</msg>
<status status="PASS" starttime="20170816 07:26:16.155" endtime="20170816 07:26:16.413"></status>
</kw>
<msg timestamp="20170816 07:26:16.413" level="INFO">${boot_progress} = Off</msg>
<status status="PASS" starttime="20170816 07:26:16.154" endtime="20170816 07:26:16.413"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170816 07:26:16.413" level="FAIL">Off != FW Progress, Starting OS</msg>
<status status="FAIL" starttime="20170816 07:26:16.413" endtime="20170816 07:26:16.414"></status>
</kw>
<status status="FAIL" starttime="20170816 07:26:16.154" endtime="20170816 07:26:16.414"></status>
</kw>
<msg timestamp="20170816 07:26:16.414" level="INFO">${status} = False</msg>
<status status="PASS" starttime="20170816 07:26:16.154" endtime="20170816 07:26:16.414"></status>
</kw>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${True}'</arg>
<arg>${True}</arg>
</arguments>
<status status="PASS" starttime="20170816 07:26:16.414" endtime="20170816 07:26:16.414"></status>
</kw>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 07:26:16.418" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170816 07:26:16.418" endtime="20170816 07:26:16.418"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 07:26:16.419" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170816 07:26:16.419" endtime="20170816 07:26:16.419"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 07:26:16.420" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170816 07:26:16.419" endtime="20170816 07:26:16.420"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 07:26:16.420" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170816 07:26:16.420" endtime="20170816 07:26:16.420"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 07:26:16.608" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170816 07:26:16.421" endtime="20170816 07:26:16.608"></status>
</kw>
<msg timestamp="20170816 07:26:16.608" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 07:26:16.609" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:26:16.421" endtime="20170816 07:26:16.609"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 07:26:16.609" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:26:16.609" endtime="20170816 07:26:16.609"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:26:16.610" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:26:16.610" endtime="20170816 07:26:16.610"></status>
</kw>
<status status="PASS" starttime="20170816 07:26:16.417" endtime="20170816 07:26:16.610"></status>
</kw>
<status status="PASS" starttime="20170816 07:26:16.417" endtime="20170816 07:26:16.610"></status>
</kw>
<status status="PASS" starttime="20170816 07:26:16.416" endtime="20170816 07:26:16.610"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 07:26:16.611" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status status="PASS" starttime="20170816 07:26:16.610" endtime="20170816 07:26:16.611"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:26:16.613" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:26:16.613" endtime="20170816 07:26:16.613"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:26:16.614" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:26:16.614" endtime="20170816 07:26:16.614"></status>
</kw>
<status status="PASS" starttime="20170816 07:26:16.614" endtime="20170816 07:26:16.615"></status>
</kw>
<status status="PASS" starttime="20170816 07:26:16.612" endtime="20170816 07:26:16.615"></status>
</kw>
<status status="PASS" starttime="20170816 07:26:16.611" endtime="20170816 07:26:16.615"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 07:26:16.704" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg timestamp="20170816 07:26:16.704" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:26:16.615" endtime="20170816 07:26:16.704"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:26:16.706" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:26:16.705" endtime="20170816 07:26:16.706"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:26:16.707" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:26:16.706" endtime="20170816 07:26:16.707"></status>
</kw>
<status status="PASS" starttime="20170816 07:26:16.706" endtime="20170816 07:26:16.707"></status>
</kw>
<status status="PASS" starttime="20170816 07:26:16.705" endtime="20170816 07:26:16.707"></status>
</kw>
<status status="PASS" starttime="20170816 07:26:16.704" endtime="20170816 07:26:16.707"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 07:26:16.707" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170816 07:26:16.707" endtime="20170816 07:26:16.708"></status>
</kw>
<msg timestamp="20170816 07:26:16.708" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:26:16.416" endtime="20170816 07:26:16.708"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:26:16.708" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:26:16.708" endtime="20170816 07:26:16.708"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 07:26:16.709" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 07:26:16.709" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 07:26:16.709" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170816 07:26:16.709" endtime="20170816 07:26:16.709"></status>
</kw>
<msg timestamp="20170816 07:26:16.709" level="INFO">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="PASS" starttime="20170816 07:26:16.415" endtime="20170816 07:26:16.709"></status>
</kw>
<msg timestamp="20170816 07:26:16.710" level="INFO">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="PASS" starttime="20170816 07:26:16.415" endtime="20170816 07:26:16.710"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg timestamp="20170816 07:26:16.710" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170816 07:26:16.710" level="FAIL">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="FAIL" starttime="20170816 07:26:16.710" endtime="20170816 07:26:16.710"></status>
</kw>
<status status="FAIL" starttime="20170816 07:26:16.153" endtime="20170816 07:26:16.711"></status>
</kw>
<status status="FAIL" starttime="20170816 07:26:15.479" endtime="20170816 07:26:16.711"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 07:26:26.716" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170816 07:26:26.716" endtime="20170816 07:26:26.717"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 07:26:26.717" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170816 07:26:26.717" endtime="20170816 07:26:26.717"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 07:26:26.718" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170816 07:26:26.718" endtime="20170816 07:26:26.718"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 07:26:26.719" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170816 07:26:26.718" endtime="20170816 07:26:26.719"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 07:26:27.079" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170816 07:26:26.719" endtime="20170816 07:26:27.080"></status>
</kw>
<msg timestamp="20170816 07:26:27.080" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 07:26:27.080" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:26:26.719" endtime="20170816 07:26:27.080"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 07:26:27.080" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:26:27.080" endtime="20170816 07:26:27.080"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:26:27.081" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:26:27.081" endtime="20170816 07:26:27.081"></status>
</kw>
<status status="PASS" starttime="20170816 07:26:26.715" endtime="20170816 07:26:27.081"></status>
</kw>
<status status="PASS" starttime="20170816 07:26:26.715" endtime="20170816 07:26:27.081"></status>
</kw>
<status status="PASS" starttime="20170816 07:26:26.714" endtime="20170816 07:26:27.082"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 07:26:27.082" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20170816 07:26:27.082" endtime="20170816 07:26:27.082"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:26:27.084" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:26:27.084" endtime="20170816 07:26:27.084"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:26:27.085" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:26:27.085" endtime="20170816 07:26:27.086"></status>
</kw>
<status status="PASS" starttime="20170816 07:26:27.084" endtime="20170816 07:26:27.086"></status>
</kw>
<status status="PASS" starttime="20170816 07:26:27.083" endtime="20170816 07:26:27.086"></status>
</kw>
<status status="PASS" starttime="20170816 07:26:27.082" endtime="20170816 07:26:27.086"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 07:26:27.781" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170816 07:26:27.782" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:26:27.086" endtime="20170816 07:26:27.782"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:26:27.783" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:26:27.783" endtime="20170816 07:26:27.783"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:26:27.785" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:26:27.784" endtime="20170816 07:26:27.785"></status>
</kw>
<status status="PASS" starttime="20170816 07:26:27.784" endtime="20170816 07:26:27.785"></status>
</kw>
<status status="PASS" starttime="20170816 07:26:27.782" endtime="20170816 07:26:27.785"></status>
</kw>
<status status="PASS" starttime="20170816 07:26:27.782" endtime="20170816 07:26:27.785"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 07:26:27.785" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170816 07:26:27.785" endtime="20170816 07:26:27.785"></status>
</kw>
<msg timestamp="20170816 07:26:27.786" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:26:26.713" endtime="20170816 07:26:27.786"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:26:27.787" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:26:27.786" endtime="20170816 07:26:27.787"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 07:26:27.787" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 07:26:27.788" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 07:26:27.788" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170816 07:26:27.787" endtime="20170816 07:26:27.788"></status>
</kw>
<msg timestamp="20170816 07:26:27.788" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" starttime="20170816 07:26:26.712" endtime="20170816 07:26:27.788"></status>
</kw>
<msg timestamp="20170816 07:26:27.789" level="INFO">${power_state} = On</msg>
<status status="PASS" starttime="20170816 07:26:26.712" endtime="20170816 07:26:27.789"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" starttime="20170816 07:26:27.789" endtime="20170816 07:26:27.790"></status>
</kw>
<status status="PASS" starttime="20170816 07:26:26.712" endtime="20170816 07:26:27.790"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 07:26:27.795" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170816 07:26:27.794" endtime="20170816 07:26:27.795"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 07:26:27.795" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170816 07:26:27.795" endtime="20170816 07:26:27.795"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 07:26:27.796" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170816 07:26:27.796" endtime="20170816 07:26:27.796"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 07:26:27.797" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170816 07:26:27.796" endtime="20170816 07:26:27.797"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 07:26:28.129" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170816 07:26:27.798" endtime="20170816 07:26:28.129"></status>
</kw>
<msg timestamp="20170816 07:26:28.130" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 07:26:28.130" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:26:27.797" endtime="20170816 07:26:28.130"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 07:26:28.130" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:26:28.130" endtime="20170816 07:26:28.130"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:26:28.131" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:26:28.131" endtime="20170816 07:26:28.131"></status>
</kw>
<status status="PASS" starttime="20170816 07:26:27.794" endtime="20170816 07:26:28.131"></status>
</kw>
<status status="PASS" starttime="20170816 07:26:27.793" endtime="20170816 07:26:28.131"></status>
</kw>
<status status="PASS" starttime="20170816 07:26:27.792" endtime="20170816 07:26:28.132"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 07:26:28.132" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" starttime="20170816 07:26:28.132" endtime="20170816 07:26:28.132"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:26:28.135" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:26:28.134" endtime="20170816 07:26:28.135"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:26:28.136" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:26:28.136" endtime="20170816 07:26:28.136"></status>
</kw>
<status status="PASS" starttime="20170816 07:26:28.135" endtime="20170816 07:26:28.136"></status>
</kw>
<status status="PASS" starttime="20170816 07:26:28.133" endtime="20170816 07:26:28.137"></status>
</kw>
<status status="PASS" starttime="20170816 07:26:28.133" endtime="20170816 07:26:28.137"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 07:26:28.688" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170816 07:26:28.689" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:26:28.137" endtime="20170816 07:26:28.689"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:26:28.691" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:26:28.690" endtime="20170816 07:26:28.691"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:26:28.691" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:26:28.691" endtime="20170816 07:26:28.692"></status>
</kw>
<status status="PASS" starttime="20170816 07:26:28.691" endtime="20170816 07:26:28.692"></status>
</kw>
<status status="PASS" starttime="20170816 07:26:28.689" endtime="20170816 07:26:28.692"></status>
</kw>
<status status="PASS" starttime="20170816 07:26:28.689" endtime="20170816 07:26:28.692"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 07:26:28.692" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170816 07:26:28.692" endtime="20170816 07:26:28.692"></status>
</kw>
<msg timestamp="20170816 07:26:28.693" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:26:27.791" endtime="20170816 07:26:28.693"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:26:28.693" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:26:28.693" endtime="20170816 07:26:28.693"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 07:26:28.694" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 07:26:28.694" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 07:26:28.694" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170816 07:26:28.693" endtime="20170816 07:26:28.694"></status>
</kw>
<msg timestamp="20170816 07:26:28.694" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" starttime="20170816 07:26:27.790" endtime="20170816 07:26:28.694"></status>
</kw>
<msg timestamp="20170816 07:26:28.695" level="INFO">${host_state} = Running</msg>
<status status="PASS" starttime="20170816 07:26:27.790" endtime="20170816 07:26:28.695"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status status="PASS" starttime="20170816 07:26:28.695" endtime="20170816 07:26:28.695"></status>
</kw>
<kw library="state_manager" name="Is OS Booted">
<doc>Check OS status.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Is OS Starting</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 07:26:28.702" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170816 07:26:28.702" endtime="20170816 07:26:28.703"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 07:26:28.704" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170816 07:26:28.703" endtime="20170816 07:26:28.704"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 07:26:28.705" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170816 07:26:28.704" endtime="20170816 07:26:28.705"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 07:26:28.706" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170816 07:26:28.705" endtime="20170816 07:26:28.706"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 07:26:29.146" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170816 07:26:28.707" endtime="20170816 07:26:29.146"></status>
</kw>
<msg timestamp="20170816 07:26:29.146" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 07:26:29.146" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:26:28.706" endtime="20170816 07:26:29.146"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 07:26:29.147" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:26:29.146" endtime="20170816 07:26:29.147"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:26:29.147" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:26:29.147" endtime="20170816 07:26:29.147"></status>
</kw>
<status status="PASS" starttime="20170816 07:26:28.701" endtime="20170816 07:26:29.148"></status>
</kw>
<status status="PASS" starttime="20170816 07:26:28.700" endtime="20170816 07:26:29.148"></status>
</kw>
<status status="PASS" starttime="20170816 07:26:28.699" endtime="20170816 07:26:29.148"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 07:26:29.148" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" starttime="20170816 07:26:29.148" endtime="20170816 07:26:29.148"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:26:29.150" level="INFO">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:26:29.150" endtime="20170816 07:26:29.150"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:26:29.151" level="INFO">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:26:29.151" endtime="20170816 07:26:29.151"></status>
</kw>
<status status="PASS" starttime="20170816 07:26:29.151" endtime="20170816 07:26:29.152"></status>
</kw>
<status status="PASS" starttime="20170816 07:26:29.149" endtime="20170816 07:26:29.152"></status>
</kw>
<status status="PASS" starttime="20170816 07:26:29.149" endtime="20170816 07:26:29.152"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 07:26:29.604" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170816 07:26:29.604" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:26:29.152" endtime="20170816 07:26:29.604"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:26:29.606" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:26:29.605" endtime="20170816 07:26:29.606"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:26:29.607" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:26:29.607" endtime="20170816 07:26:29.607"></status>
</kw>
<status status="PASS" starttime="20170816 07:26:29.606" endtime="20170816 07:26:29.607"></status>
</kw>
<status status="PASS" starttime="20170816 07:26:29.605" endtime="20170816 07:26:29.607"></status>
</kw>
<status status="PASS" starttime="20170816 07:26:29.604" endtime="20170816 07:26:29.607"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 07:26:29.608" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170816 07:26:29.607" endtime="20170816 07:26:29.608"></status>
</kw>
<msg timestamp="20170816 07:26:29.608" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:26:28.699" endtime="20170816 07:26:29.608"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:26:29.609" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:26:29.608" endtime="20170816 07:26:29.609"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 07:26:29.609" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 07:26:29.610" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 07:26:29.610" level="INFO">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170816 07:26:29.609" endtime="20170816 07:26:29.610"></status>
</kw>
<msg timestamp="20170816 07:26:29.610" level="INFO">${state} = Off</msg>
<status status="PASS" starttime="20170816 07:26:28.698" endtime="20170816 07:26:29.610"></status>
</kw>
<msg timestamp="20170816 07:26:29.610" level="INFO">${boot_progress} = Off</msg>
<status status="PASS" starttime="20170816 07:26:28.697" endtime="20170816 07:26:29.611"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170816 07:26:29.611" level="FAIL">Off != FW Progress, Starting OS</msg>
<status status="FAIL" starttime="20170816 07:26:29.611" endtime="20170816 07:26:29.612"></status>
</kw>
<status status="FAIL" starttime="20170816 07:26:28.697" endtime="20170816 07:26:29.612"></status>
</kw>
<msg timestamp="20170816 07:26:29.612" level="INFO">${status} = False</msg>
<status status="PASS" starttime="20170816 07:26:28.696" endtime="20170816 07:26:29.612"></status>
</kw>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${True}'</arg>
<arg>${True}</arg>
</arguments>
<status status="PASS" starttime="20170816 07:26:29.612" endtime="20170816 07:26:29.612"></status>
</kw>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 07:26:29.617" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170816 07:26:29.616" endtime="20170816 07:26:29.617"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 07:26:29.618" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170816 07:26:29.617" endtime="20170816 07:26:29.618"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 07:26:29.618" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170816 07:26:29.618" endtime="20170816 07:26:29.618"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 07:26:29.619" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170816 07:26:29.619" endtime="20170816 07:26:29.619"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 07:26:29.813" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170816 07:26:29.620" endtime="20170816 07:26:29.813"></status>
</kw>
<msg timestamp="20170816 07:26:29.814" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 07:26:29.814" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:26:29.619" endtime="20170816 07:26:29.814"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 07:26:29.815" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:26:29.814" endtime="20170816 07:26:29.815"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:26:29.816" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:26:29.815" endtime="20170816 07:26:29.816"></status>
</kw>
<status status="PASS" starttime="20170816 07:26:29.616" endtime="20170816 07:26:29.816"></status>
</kw>
<status status="PASS" starttime="20170816 07:26:29.615" endtime="20170816 07:26:29.816"></status>
</kw>
<status status="PASS" starttime="20170816 07:26:29.614" endtime="20170816 07:26:29.816"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 07:26:29.817" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status status="PASS" starttime="20170816 07:26:29.817" endtime="20170816 07:26:29.817"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:26:29.820" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:26:29.819" endtime="20170816 07:26:29.820"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:26:29.822" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:26:29.821" endtime="20170816 07:26:29.822"></status>
</kw>
<status status="PASS" starttime="20170816 07:26:29.821" endtime="20170816 07:26:29.822"></status>
</kw>
<status status="PASS" starttime="20170816 07:26:29.818" endtime="20170816 07:26:29.822"></status>
</kw>
<status status="PASS" starttime="20170816 07:26:29.818" endtime="20170816 07:26:29.822"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 07:26:30.642" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg timestamp="20170816 07:26:30.642" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:26:29.822" endtime="20170816 07:26:30.642"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:26:30.645" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:26:30.644" endtime="20170816 07:26:30.645"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:26:30.646" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:26:30.645" endtime="20170816 07:26:30.646"></status>
</kw>
<status status="PASS" starttime="20170816 07:26:30.645" endtime="20170816 07:26:30.646"></status>
</kw>
<status status="PASS" starttime="20170816 07:26:30.643" endtime="20170816 07:26:30.646"></status>
</kw>
<status status="PASS" starttime="20170816 07:26:30.643" endtime="20170816 07:26:30.646"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 07:26:30.646" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170816 07:26:30.646" endtime="20170816 07:26:30.646"></status>
</kw>
<msg timestamp="20170816 07:26:30.647" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:26:29.614" endtime="20170816 07:26:30.647"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:26:30.647" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:26:30.647" endtime="20170816 07:26:30.647"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 07:26:30.648" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 07:26:30.648" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 07:26:30.648" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170816 07:26:30.648" endtime="20170816 07:26:30.648"></status>
</kw>
<msg timestamp="20170816 07:26:30.648" level="INFO">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="PASS" starttime="20170816 07:26:29.613" endtime="20170816 07:26:30.648"></status>
</kw>
<msg timestamp="20170816 07:26:30.649" level="INFO">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="PASS" starttime="20170816 07:26:29.613" endtime="20170816 07:26:30.649"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg timestamp="20170816 07:26:30.649" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170816 07:26:30.649" level="FAIL">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="FAIL" starttime="20170816 07:26:30.649" endtime="20170816 07:26:30.649"></status>
</kw>
<status status="FAIL" starttime="20170816 07:26:28.696" endtime="20170816 07:26:30.650"></status>
</kw>
<status status="FAIL" starttime="20170816 07:26:26.711" endtime="20170816 07:26:30.650"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 07:26:40.655" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170816 07:26:40.654" endtime="20170816 07:26:40.655"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 07:26:40.655" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170816 07:26:40.655" endtime="20170816 07:26:40.655"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 07:26:40.656" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170816 07:26:40.656" endtime="20170816 07:26:40.656"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 07:26:40.657" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170816 07:26:40.656" endtime="20170816 07:26:40.657"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 07:26:41.039" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170816 07:26:40.658" endtime="20170816 07:26:41.039"></status>
</kw>
<msg timestamp="20170816 07:26:41.039" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 07:26:41.040" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:26:40.657" endtime="20170816 07:26:41.040"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 07:26:41.040" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:26:41.040" endtime="20170816 07:26:41.040"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:26:41.041" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:26:41.041" endtime="20170816 07:26:41.041"></status>
</kw>
<status status="PASS" starttime="20170816 07:26:40.654" endtime="20170816 07:26:41.041"></status>
</kw>
<status status="PASS" starttime="20170816 07:26:40.653" endtime="20170816 07:26:41.041"></status>
</kw>
<status status="PASS" starttime="20170816 07:26:40.653" endtime="20170816 07:26:41.041"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 07:26:41.042" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20170816 07:26:41.042" endtime="20170816 07:26:41.042"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:26:41.044" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:26:41.044" endtime="20170816 07:26:41.044"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:26:41.045" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:26:41.045" endtime="20170816 07:26:41.045"></status>
</kw>
<status status="PASS" starttime="20170816 07:26:41.044" endtime="20170816 07:26:41.045"></status>
</kw>
<status status="PASS" starttime="20170816 07:26:41.043" endtime="20170816 07:26:41.045"></status>
</kw>
<status status="PASS" starttime="20170816 07:26:41.042" endtime="20170816 07:26:41.046"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 07:26:41.764" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170816 07:26:41.764" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:26:41.046" endtime="20170816 07:26:41.764"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:26:41.766" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:26:41.765" endtime="20170816 07:26:41.766"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:26:41.767" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:26:41.766" endtime="20170816 07:26:41.767"></status>
</kw>
<status status="PASS" starttime="20170816 07:26:41.766" endtime="20170816 07:26:41.767"></status>
</kw>
<status status="PASS" starttime="20170816 07:26:41.765" endtime="20170816 07:26:41.767"></status>
</kw>
<status status="PASS" starttime="20170816 07:26:41.764" endtime="20170816 07:26:41.767"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 07:26:41.767" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170816 07:26:41.767" endtime="20170816 07:26:41.768"></status>
</kw>
<msg timestamp="20170816 07:26:41.768" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:26:40.652" endtime="20170816 07:26:41.768"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:26:41.769" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:26:41.768" endtime="20170816 07:26:41.769"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 07:26:41.770" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 07:26:41.770" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 07:26:41.770" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170816 07:26:41.769" endtime="20170816 07:26:41.770"></status>
</kw>
<msg timestamp="20170816 07:26:41.770" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" starttime="20170816 07:26:40.651" endtime="20170816 07:26:41.770"></status>
</kw>
<msg timestamp="20170816 07:26:41.770" level="INFO">${power_state} = On</msg>
<status status="PASS" starttime="20170816 07:26:40.651" endtime="20170816 07:26:41.770"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" starttime="20170816 07:26:41.771" endtime="20170816 07:26:41.771"></status>
</kw>
<status status="PASS" starttime="20170816 07:26:40.651" endtime="20170816 07:26:41.771"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 07:26:41.775" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170816 07:26:41.774" endtime="20170816 07:26:41.776"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 07:26:41.776" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170816 07:26:41.776" endtime="20170816 07:26:41.776"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 07:26:41.777" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170816 07:26:41.776" endtime="20170816 07:26:41.777"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 07:26:41.778" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170816 07:26:41.777" endtime="20170816 07:26:41.778"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 07:26:42.126" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170816 07:26:41.778" endtime="20170816 07:26:42.126"></status>
</kw>
<msg timestamp="20170816 07:26:42.126" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 07:26:42.126" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:26:41.778" endtime="20170816 07:26:42.127"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 07:26:42.127" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:26:42.127" endtime="20170816 07:26:42.127"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:26:42.128" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:26:42.127" endtime="20170816 07:26:42.128"></status>
</kw>
<status status="PASS" starttime="20170816 07:26:41.774" endtime="20170816 07:26:42.128"></status>
</kw>
<status status="PASS" starttime="20170816 07:26:41.773" endtime="20170816 07:26:42.128"></status>
</kw>
<status status="PASS" starttime="20170816 07:26:41.773" endtime="20170816 07:26:42.129"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 07:26:42.129" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" starttime="20170816 07:26:42.129" endtime="20170816 07:26:42.130"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:26:42.132" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:26:42.131" endtime="20170816 07:26:42.132"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:26:42.133" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:26:42.133" endtime="20170816 07:26:42.133"></status>
</kw>
<status status="PASS" starttime="20170816 07:26:42.132" endtime="20170816 07:26:42.133"></status>
</kw>
<status status="PASS" starttime="20170816 07:26:42.131" endtime="20170816 07:26:42.133"></status>
</kw>
<status status="PASS" starttime="20170816 07:26:42.130" endtime="20170816 07:26:42.133"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 07:26:42.772" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170816 07:26:42.772" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:26:42.134" endtime="20170816 07:26:42.772"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:26:42.774" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:26:42.773" endtime="20170816 07:26:42.774"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:26:42.775" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:26:42.774" endtime="20170816 07:26:42.775"></status>
</kw>
<status status="PASS" starttime="20170816 07:26:42.774" endtime="20170816 07:26:42.775"></status>
</kw>
<status status="PASS" starttime="20170816 07:26:42.773" endtime="20170816 07:26:42.775"></status>
</kw>
<status status="PASS" starttime="20170816 07:26:42.772" endtime="20170816 07:26:42.775"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 07:26:42.775" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170816 07:26:42.775" endtime="20170816 07:26:42.775"></status>
</kw>
<msg timestamp="20170816 07:26:42.776" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:26:41.772" endtime="20170816 07:26:42.776"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:26:42.776" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:26:42.776" endtime="20170816 07:26:42.776"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 07:26:42.777" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 07:26:42.777" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 07:26:42.777" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170816 07:26:42.777" endtime="20170816 07:26:42.777"></status>
</kw>
<msg timestamp="20170816 07:26:42.777" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" starttime="20170816 07:26:41.772" endtime="20170816 07:26:42.777"></status>
</kw>
<msg timestamp="20170816 07:26:42.778" level="INFO">${host_state} = Running</msg>
<status status="PASS" starttime="20170816 07:26:41.771" endtime="20170816 07:26:42.778"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status status="PASS" starttime="20170816 07:26:42.778" endtime="20170816 07:26:42.778"></status>
</kw>
<kw library="state_manager" name="Is OS Booted">
<doc>Check OS status.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Is OS Starting</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 07:26:42.783" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170816 07:26:42.783" endtime="20170816 07:26:42.784"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 07:26:42.784" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170816 07:26:42.784" endtime="20170816 07:26:42.784"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 07:26:42.785" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170816 07:26:42.784" endtime="20170816 07:26:42.785"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 07:26:42.785" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170816 07:26:42.785" endtime="20170816 07:26:42.785"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 07:26:43.183" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170816 07:26:42.786" endtime="20170816 07:26:43.183"></status>
</kw>
<msg timestamp="20170816 07:26:43.183" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 07:26:43.183" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:26:42.786" endtime="20170816 07:26:43.183"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 07:26:43.184" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:26:43.184" endtime="20170816 07:26:43.184"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:26:43.185" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:26:43.184" endtime="20170816 07:26:43.185"></status>
</kw>
<status status="PASS" starttime="20170816 07:26:42.782" endtime="20170816 07:26:43.185"></status>
</kw>
<status status="PASS" starttime="20170816 07:26:42.782" endtime="20170816 07:26:43.185"></status>
</kw>
<status status="PASS" starttime="20170816 07:26:42.781" endtime="20170816 07:26:43.185"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 07:26:43.186" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" starttime="20170816 07:26:43.185" endtime="20170816 07:26:43.186"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:26:43.188" level="INFO">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:26:43.187" endtime="20170816 07:26:43.188"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:26:43.189" level="INFO">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:26:43.189" endtime="20170816 07:26:43.189"></status>
</kw>
<status status="PASS" starttime="20170816 07:26:43.188" endtime="20170816 07:26:43.189"></status>
</kw>
<status status="PASS" starttime="20170816 07:26:43.186" endtime="20170816 07:26:43.189"></status>
</kw>
<status status="PASS" starttime="20170816 07:26:43.186" endtime="20170816 07:26:43.189"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 07:26:43.680" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170816 07:26:43.680" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:26:43.190" endtime="20170816 07:26:43.680"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:26:43.682" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:26:43.682" endtime="20170816 07:26:43.682"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:26:43.683" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:26:43.683" endtime="20170816 07:26:43.683"></status>
</kw>
<status status="PASS" starttime="20170816 07:26:43.682" endtime="20170816 07:26:43.683"></status>
</kw>
<status status="PASS" starttime="20170816 07:26:43.681" endtime="20170816 07:26:43.684"></status>
</kw>
<status status="PASS" starttime="20170816 07:26:43.681" endtime="20170816 07:26:43.684"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 07:26:43.684" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170816 07:26:43.684" endtime="20170816 07:26:43.684"></status>
</kw>
<msg timestamp="20170816 07:26:43.684" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:26:42.781" endtime="20170816 07:26:43.684"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:26:43.685" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:26:43.685" endtime="20170816 07:26:43.685"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 07:26:43.685" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 07:26:43.686" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 07:26:43.686" level="INFO">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170816 07:26:43.685" endtime="20170816 07:26:43.686"></status>
</kw>
<msg timestamp="20170816 07:26:43.686" level="INFO">${state} = Off</msg>
<status status="PASS" starttime="20170816 07:26:42.780" endtime="20170816 07:26:43.686"></status>
</kw>
<msg timestamp="20170816 07:26:43.686" level="INFO">${boot_progress} = Off</msg>
<status status="PASS" starttime="20170816 07:26:42.779" endtime="20170816 07:26:43.686"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170816 07:26:43.687" level="FAIL">Off != FW Progress, Starting OS</msg>
<status status="FAIL" starttime="20170816 07:26:43.686" endtime="20170816 07:26:43.687"></status>
</kw>
<status status="FAIL" starttime="20170816 07:26:42.779" endtime="20170816 07:26:43.687"></status>
</kw>
<msg timestamp="20170816 07:26:43.687" level="INFO">${status} = False</msg>
<status status="PASS" starttime="20170816 07:26:42.779" endtime="20170816 07:26:43.687"></status>
</kw>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${True}'</arg>
<arg>${True}</arg>
</arguments>
<status status="PASS" starttime="20170816 07:26:43.687" endtime="20170816 07:26:43.688"></status>
</kw>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 07:26:43.691" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170816 07:26:43.691" endtime="20170816 07:26:43.692"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 07:26:43.692" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170816 07:26:43.692" endtime="20170816 07:26:43.692"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 07:26:43.693" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170816 07:26:43.693" endtime="20170816 07:26:43.693"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 07:26:43.694" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170816 07:26:43.693" endtime="20170816 07:26:43.694"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 07:26:44.083" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170816 07:26:43.694" endtime="20170816 07:26:44.084"></status>
</kw>
<msg timestamp="20170816 07:26:44.084" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 07:26:44.084" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:26:43.694" endtime="20170816 07:26:44.084"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 07:26:44.084" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:26:44.084" endtime="20170816 07:26:44.085"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:26:44.085" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:26:44.085" endtime="20170816 07:26:44.085"></status>
</kw>
<status status="PASS" starttime="20170816 07:26:43.691" endtime="20170816 07:26:44.085"></status>
</kw>
<status status="PASS" starttime="20170816 07:26:43.690" endtime="20170816 07:26:44.086"></status>
</kw>
<status status="PASS" starttime="20170816 07:26:43.690" endtime="20170816 07:26:44.086"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 07:26:44.086" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status status="PASS" starttime="20170816 07:26:44.086" endtime="20170816 07:26:44.086"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:26:44.088" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:26:44.088" endtime="20170816 07:26:44.088"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:26:44.089" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:26:44.089" endtime="20170816 07:26:44.089"></status>
</kw>
<status status="PASS" starttime="20170816 07:26:44.089" endtime="20170816 07:26:44.089"></status>
</kw>
<status status="PASS" starttime="20170816 07:26:44.087" endtime="20170816 07:26:44.090"></status>
</kw>
<status status="PASS" starttime="20170816 07:26:44.086" endtime="20170816 07:26:44.090"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 07:26:44.647" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg timestamp="20170816 07:26:44.648" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:26:44.090" endtime="20170816 07:26:44.648"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:26:44.649" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:26:44.649" endtime="20170816 07:26:44.649"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:26:44.650" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:26:44.650" endtime="20170816 07:26:44.650"></status>
</kw>
<status status="PASS" starttime="20170816 07:26:44.650" endtime="20170816 07:26:44.651"></status>
</kw>
<status status="PASS" starttime="20170816 07:26:44.648" endtime="20170816 07:26:44.651"></status>
</kw>
<status status="PASS" starttime="20170816 07:26:44.648" endtime="20170816 07:26:44.651"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 07:26:44.651" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170816 07:26:44.651" endtime="20170816 07:26:44.651"></status>
</kw>
<msg timestamp="20170816 07:26:44.651" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:26:43.689" endtime="20170816 07:26:44.651"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:26:44.652" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:26:44.652" endtime="20170816 07:26:44.652"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 07:26:44.653" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 07:26:44.653" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 07:26:44.653" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170816 07:26:44.652" endtime="20170816 07:26:44.653"></status>
</kw>
<msg timestamp="20170816 07:26:44.653" level="INFO">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="PASS" starttime="20170816 07:26:43.688" endtime="20170816 07:26:44.653"></status>
</kw>
<msg timestamp="20170816 07:26:44.653" level="INFO">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="PASS" starttime="20170816 07:26:43.688" endtime="20170816 07:26:44.653"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg timestamp="20170816 07:26:44.654" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170816 07:26:44.654" level="FAIL">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="FAIL" starttime="20170816 07:26:44.654" endtime="20170816 07:26:44.654"></status>
</kw>
<status status="FAIL" starttime="20170816 07:26:42.778" endtime="20170816 07:26:44.654"></status>
</kw>
<status status="FAIL" starttime="20170816 07:26:40.650" endtime="20170816 07:26:44.654"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 07:26:54.661" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170816 07:26:54.660" endtime="20170816 07:26:54.661"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 07:26:54.662" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170816 07:26:54.662" endtime="20170816 07:26:54.662"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 07:26:54.663" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170816 07:26:54.663" endtime="20170816 07:26:54.663"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 07:26:54.664" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170816 07:26:54.664" endtime="20170816 07:26:54.664"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 07:26:55.011" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170816 07:26:54.665" endtime="20170816 07:26:55.011"></status>
</kw>
<msg timestamp="20170816 07:26:55.011" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 07:26:55.011" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:26:54.665" endtime="20170816 07:26:55.011"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 07:26:55.012" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:26:55.012" endtime="20170816 07:26:55.012"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:26:55.013" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:26:55.012" endtime="20170816 07:26:55.013"></status>
</kw>
<status status="PASS" starttime="20170816 07:26:54.659" endtime="20170816 07:26:55.013"></status>
</kw>
<status status="PASS" starttime="20170816 07:26:54.659" endtime="20170816 07:26:55.013"></status>
</kw>
<status status="PASS" starttime="20170816 07:26:54.658" endtime="20170816 07:26:55.013"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 07:26:55.014" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20170816 07:26:55.013" endtime="20170816 07:26:55.014"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:26:55.016" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:26:55.015" endtime="20170816 07:26:55.016"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:26:55.017" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:26:55.017" endtime="20170816 07:26:55.017"></status>
</kw>
<status status="PASS" starttime="20170816 07:26:55.016" endtime="20170816 07:26:55.017"></status>
</kw>
<status status="PASS" starttime="20170816 07:26:55.015" endtime="20170816 07:26:55.017"></status>
</kw>
<status status="PASS" starttime="20170816 07:26:55.014" endtime="20170816 07:26:55.017"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 07:26:55.272" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170816 07:26:55.272" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:26:55.017" endtime="20170816 07:26:55.272"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:26:55.274" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:26:55.273" endtime="20170816 07:26:55.274"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:26:55.275" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:26:55.274" endtime="20170816 07:26:55.275"></status>
</kw>
<status status="PASS" starttime="20170816 07:26:55.274" endtime="20170816 07:26:55.275"></status>
</kw>
<status status="PASS" starttime="20170816 07:26:55.273" endtime="20170816 07:26:55.275"></status>
</kw>
<status status="PASS" starttime="20170816 07:26:55.272" endtime="20170816 07:26:55.275"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 07:26:55.276" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170816 07:26:55.276" endtime="20170816 07:26:55.276"></status>
</kw>
<msg timestamp="20170816 07:26:55.276" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:26:54.657" endtime="20170816 07:26:55.276"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:26:55.277" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:26:55.276" endtime="20170816 07:26:55.277"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 07:26:55.278" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 07:26:55.278" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 07:26:55.278" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170816 07:26:55.277" endtime="20170816 07:26:55.278"></status>
</kw>
<msg timestamp="20170816 07:26:55.278" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" starttime="20170816 07:26:54.656" endtime="20170816 07:26:55.278"></status>
</kw>
<msg timestamp="20170816 07:26:55.278" level="INFO">${power_state} = On</msg>
<status status="PASS" starttime="20170816 07:26:54.656" endtime="20170816 07:26:55.278"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" starttime="20170816 07:26:55.279" endtime="20170816 07:26:55.279"></status>
</kw>
<status status="PASS" starttime="20170816 07:26:54.655" endtime="20170816 07:26:55.279"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 07:26:55.283" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170816 07:26:55.282" endtime="20170816 07:26:55.283"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 07:26:55.283" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170816 07:26:55.283" endtime="20170816 07:26:55.284"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 07:26:55.284" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170816 07:26:55.284" endtime="20170816 07:26:55.284"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 07:26:55.285" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170816 07:26:55.284" endtime="20170816 07:26:55.285"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 07:26:55.476" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170816 07:26:55.285" endtime="20170816 07:26:55.476"></status>
</kw>
<msg timestamp="20170816 07:26:55.476" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 07:26:55.476" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:26:55.285" endtime="20170816 07:26:55.476"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 07:26:55.477" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:26:55.476" endtime="20170816 07:26:55.477"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:26:55.477" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:26:55.477" endtime="20170816 07:26:55.477"></status>
</kw>
<status status="PASS" starttime="20170816 07:26:55.282" endtime="20170816 07:26:55.478"></status>
</kw>
<status status="PASS" starttime="20170816 07:26:55.281" endtime="20170816 07:26:55.478"></status>
</kw>
<status status="PASS" starttime="20170816 07:26:55.281" endtime="20170816 07:26:55.478"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 07:26:55.478" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" starttime="20170816 07:26:55.478" endtime="20170816 07:26:55.478"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:26:55.481" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:26:55.480" endtime="20170816 07:26:55.481"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:26:55.482" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:26:55.481" endtime="20170816 07:26:55.482"></status>
</kw>
<status status="PASS" starttime="20170816 07:26:55.481" endtime="20170816 07:26:55.482"></status>
</kw>
<status status="PASS" starttime="20170816 07:26:55.479" endtime="20170816 07:26:55.482"></status>
</kw>
<status status="PASS" starttime="20170816 07:26:55.479" endtime="20170816 07:26:55.482"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 07:26:56.245" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170816 07:26:56.245" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:26:55.482" endtime="20170816 07:26:56.245"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:26:56.247" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:26:56.246" endtime="20170816 07:26:56.247"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:26:56.248" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:26:56.248" endtime="20170816 07:26:56.248"></status>
</kw>
<status status="PASS" starttime="20170816 07:26:56.247" endtime="20170816 07:26:56.248"></status>
</kw>
<status status="PASS" starttime="20170816 07:26:56.246" endtime="20170816 07:26:56.248"></status>
</kw>
<status status="PASS" starttime="20170816 07:26:56.246" endtime="20170816 07:26:56.248"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 07:26:56.249" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170816 07:26:56.249" endtime="20170816 07:26:56.249"></status>
</kw>
<msg timestamp="20170816 07:26:56.249" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:26:55.280" endtime="20170816 07:26:56.249"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:26:56.250" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:26:56.250" endtime="20170816 07:26:56.250"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 07:26:56.251" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 07:26:56.251" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 07:26:56.251" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170816 07:26:56.251" endtime="20170816 07:26:56.252"></status>
</kw>
<msg timestamp="20170816 07:26:56.252" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" starttime="20170816 07:26:55.280" endtime="20170816 07:26:56.252"></status>
</kw>
<msg timestamp="20170816 07:26:56.252" level="INFO">${host_state} = Running</msg>
<status status="PASS" starttime="20170816 07:26:55.279" endtime="20170816 07:26:56.252"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status status="PASS" starttime="20170816 07:26:56.252" endtime="20170816 07:26:56.253"></status>
</kw>
<kw library="state_manager" name="Is OS Booted">
<doc>Check OS status.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Is OS Starting</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 07:26:56.257" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170816 07:26:56.257" endtime="20170816 07:26:56.258"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 07:26:56.258" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170816 07:26:56.258" endtime="20170816 07:26:56.259"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 07:26:56.259" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170816 07:26:56.259" endtime="20170816 07:26:56.259"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 07:26:56.260" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170816 07:26:56.259" endtime="20170816 07:26:56.260"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 07:26:56.853" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170816 07:26:56.260" endtime="20170816 07:26:56.853"></status>
</kw>
<msg timestamp="20170816 07:26:56.853" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 07:26:56.853" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:26:56.260" endtime="20170816 07:26:56.853"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 07:26:56.854" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:26:56.854" endtime="20170816 07:26:56.854"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:26:56.855" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:26:56.854" endtime="20170816 07:26:56.855"></status>
</kw>
<status status="PASS" starttime="20170816 07:26:56.256" endtime="20170816 07:26:56.855"></status>
</kw>
<status status="PASS" starttime="20170816 07:26:56.256" endtime="20170816 07:26:56.855"></status>
</kw>
<status status="PASS" starttime="20170816 07:26:56.255" endtime="20170816 07:26:56.855"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 07:26:56.856" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" starttime="20170816 07:26:56.855" endtime="20170816 07:26:56.856"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:26:56.858" level="INFO">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:26:56.857" endtime="20170816 07:26:56.858"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:26:56.859" level="INFO">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:26:56.859" endtime="20170816 07:26:56.859"></status>
</kw>
<status status="PASS" starttime="20170816 07:26:56.858" endtime="20170816 07:26:56.859"></status>
</kw>
<status status="PASS" starttime="20170816 07:26:56.856" endtime="20170816 07:26:56.859"></status>
</kw>
<status status="PASS" starttime="20170816 07:26:56.856" endtime="20170816 07:26:56.859"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 07:26:56.924" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170816 07:26:56.925" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:26:56.859" endtime="20170816 07:26:56.925"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:26:56.926" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:26:56.926" endtime="20170816 07:26:56.926"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:26:56.927" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:26:56.927" endtime="20170816 07:26:56.927"></status>
</kw>
<status status="PASS" starttime="20170816 07:26:56.927" endtime="20170816 07:26:56.927"></status>
</kw>
<status status="PASS" starttime="20170816 07:26:56.925" endtime="20170816 07:26:56.928"></status>
</kw>
<status status="PASS" starttime="20170816 07:26:56.925" endtime="20170816 07:26:56.928"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 07:26:56.928" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170816 07:26:56.928" endtime="20170816 07:26:56.928"></status>
</kw>
<msg timestamp="20170816 07:26:56.928" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:26:56.255" endtime="20170816 07:26:56.928"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:26:56.929" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:26:56.929" endtime="20170816 07:26:56.929"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 07:26:56.930" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 07:26:56.930" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 07:26:56.930" level="INFO">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170816 07:26:56.929" endtime="20170816 07:26:56.930"></status>
</kw>
<msg timestamp="20170816 07:26:56.930" level="INFO">${state} = Off</msg>
<status status="PASS" starttime="20170816 07:26:56.254" endtime="20170816 07:26:56.930"></status>
</kw>
<msg timestamp="20170816 07:26:56.930" level="INFO">${boot_progress} = Off</msg>
<status status="PASS" starttime="20170816 07:26:56.254" endtime="20170816 07:26:56.930"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170816 07:26:56.931" level="FAIL">Off != FW Progress, Starting OS</msg>
<status status="FAIL" starttime="20170816 07:26:56.931" endtime="20170816 07:26:56.931"></status>
</kw>
<status status="FAIL" starttime="20170816 07:26:56.253" endtime="20170816 07:26:56.932"></status>
</kw>
<msg timestamp="20170816 07:26:56.932" level="INFO">${status} = False</msg>
<status status="PASS" starttime="20170816 07:26:56.253" endtime="20170816 07:26:56.932"></status>
</kw>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${True}'</arg>
<arg>${True}</arg>
</arguments>
<status status="PASS" starttime="20170816 07:26:56.932" endtime="20170816 07:26:56.933"></status>
</kw>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 07:26:56.938" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170816 07:26:56.938" endtime="20170816 07:26:56.939"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 07:26:56.940" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170816 07:26:56.939" endtime="20170816 07:26:56.940"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 07:26:56.940" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170816 07:26:56.940" endtime="20170816 07:26:56.941"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 07:26:56.941" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170816 07:26:56.941" endtime="20170816 07:26:56.941"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 07:26:57.138" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170816 07:26:56.942" endtime="20170816 07:26:57.138"></status>
</kw>
<msg timestamp="20170816 07:26:57.139" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 07:26:57.139" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:26:56.941" endtime="20170816 07:26:57.139"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 07:26:57.139" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:26:57.139" endtime="20170816 07:26:57.139"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:26:57.140" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:26:57.140" endtime="20170816 07:26:57.140"></status>
</kw>
<status status="PASS" starttime="20170816 07:26:56.937" endtime="20170816 07:26:57.140"></status>
</kw>
<status status="PASS" starttime="20170816 07:26:56.936" endtime="20170816 07:26:57.141"></status>
</kw>
<status status="PASS" starttime="20170816 07:26:56.935" endtime="20170816 07:26:57.141"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 07:26:57.142" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status status="PASS" starttime="20170816 07:26:57.141" endtime="20170816 07:26:57.142"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:26:57.144" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:26:57.144" endtime="20170816 07:26:57.144"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:26:57.145" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:26:57.145" endtime="20170816 07:26:57.145"></status>
</kw>
<status status="PASS" starttime="20170816 07:26:57.145" endtime="20170816 07:26:57.146"></status>
</kw>
<status status="PASS" starttime="20170816 07:26:57.143" endtime="20170816 07:26:57.146"></status>
</kw>
<status status="PASS" starttime="20170816 07:26:57.142" endtime="20170816 07:26:57.146"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 07:26:57.235" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg timestamp="20170816 07:26:57.235" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:26:57.146" endtime="20170816 07:26:57.236"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:26:57.238" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:26:57.237" endtime="20170816 07:26:57.238"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:26:57.239" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:26:57.238" endtime="20170816 07:26:57.239"></status>
</kw>
<status status="PASS" starttime="20170816 07:26:57.238" endtime="20170816 07:26:57.239"></status>
</kw>
<status status="PASS" starttime="20170816 07:26:57.236" endtime="20170816 07:26:57.239"></status>
</kw>
<status status="PASS" starttime="20170816 07:26:57.236" endtime="20170816 07:26:57.239"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 07:26:57.239" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170816 07:26:57.239" endtime="20170816 07:26:57.240"></status>
</kw>
<msg timestamp="20170816 07:26:57.240" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:26:56.934" endtime="20170816 07:26:57.240"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:26:57.240" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:26:57.240" endtime="20170816 07:26:57.240"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 07:26:57.241" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 07:26:57.241" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 07:26:57.241" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170816 07:26:57.241" endtime="20170816 07:26:57.241"></status>
</kw>
<msg timestamp="20170816 07:26:57.241" level="INFO">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="PASS" starttime="20170816 07:26:56.933" endtime="20170816 07:26:57.241"></status>
</kw>
<msg timestamp="20170816 07:26:57.242" level="INFO">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="PASS" starttime="20170816 07:26:56.933" endtime="20170816 07:26:57.242"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg timestamp="20170816 07:26:57.242" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170816 07:26:57.242" level="FAIL">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="FAIL" starttime="20170816 07:26:57.242" endtime="20170816 07:26:57.242"></status>
</kw>
<status status="FAIL" starttime="20170816 07:26:56.253" endtime="20170816 07:26:57.243"></status>
</kw>
<status status="FAIL" starttime="20170816 07:26:54.655" endtime="20170816 07:26:57.243"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 07:27:07.248" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170816 07:27:07.247" endtime="20170816 07:27:07.248"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 07:27:07.249" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170816 07:27:07.248" endtime="20170816 07:27:07.249"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 07:27:07.249" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170816 07:27:07.249" endtime="20170816 07:27:07.249"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 07:27:07.250" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170816 07:27:07.249" endtime="20170816 07:27:07.250"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 07:27:07.653" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170816 07:27:07.251" endtime="20170816 07:27:07.653"></status>
</kw>
<msg timestamp="20170816 07:27:07.653" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 07:27:07.653" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:27:07.250" endtime="20170816 07:27:07.653"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 07:27:07.654" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:27:07.654" endtime="20170816 07:27:07.654"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:27:07.655" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:27:07.654" endtime="20170816 07:27:07.655"></status>
</kw>
<status status="PASS" starttime="20170816 07:27:07.247" endtime="20170816 07:27:07.655"></status>
</kw>
<status status="PASS" starttime="20170816 07:27:07.246" endtime="20170816 07:27:07.655"></status>
</kw>
<status status="PASS" starttime="20170816 07:27:07.246" endtime="20170816 07:27:07.655"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 07:27:07.656" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20170816 07:27:07.655" endtime="20170816 07:27:07.656"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:27:07.658" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:27:07.657" endtime="20170816 07:27:07.658"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:27:07.659" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:27:07.659" endtime="20170816 07:27:07.659"></status>
</kw>
<status status="PASS" starttime="20170816 07:27:07.658" endtime="20170816 07:27:07.660"></status>
</kw>
<status status="PASS" starttime="20170816 07:27:07.656" endtime="20170816 07:27:07.660"></status>
</kw>
<status status="PASS" starttime="20170816 07:27:07.656" endtime="20170816 07:27:07.660"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 07:27:11.924" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170816 07:27:11.924" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:27:07.660" endtime="20170816 07:27:11.924"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:27:11.926" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:27:11.925" endtime="20170816 07:27:11.926"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:27:11.927" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:27:11.926" endtime="20170816 07:27:11.927"></status>
</kw>
<status status="PASS" starttime="20170816 07:27:11.926" endtime="20170816 07:27:11.927"></status>
</kw>
<status status="PASS" starttime="20170816 07:27:11.925" endtime="20170816 07:27:11.927"></status>
</kw>
<status status="PASS" starttime="20170816 07:27:11.924" endtime="20170816 07:27:11.927"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 07:27:11.927" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170816 07:27:11.927" endtime="20170816 07:27:11.927"></status>
</kw>
<msg timestamp="20170816 07:27:11.928" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:27:07.245" endtime="20170816 07:27:11.928"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:27:11.928" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:27:11.928" endtime="20170816 07:27:11.928"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 07:27:11.929" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 07:27:11.929" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 07:27:11.929" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170816 07:27:11.929" endtime="20170816 07:27:11.929"></status>
</kw>
<msg timestamp="20170816 07:27:11.929" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" starttime="20170816 07:27:07.244" endtime="20170816 07:27:11.929"></status>
</kw>
<msg timestamp="20170816 07:27:11.930" level="INFO">${power_state} = On</msg>
<status status="PASS" starttime="20170816 07:27:07.244" endtime="20170816 07:27:11.930"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" starttime="20170816 07:27:11.930" endtime="20170816 07:27:11.930"></status>
</kw>
<status status="PASS" starttime="20170816 07:27:07.244" endtime="20170816 07:27:11.930"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 07:27:11.934" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170816 07:27:11.934" endtime="20170816 07:27:11.937"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 07:27:11.938" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170816 07:27:11.938" endtime="20170816 07:27:11.938"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 07:27:11.939" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170816 07:27:11.939" endtime="20170816 07:27:11.939"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 07:27:11.940" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170816 07:27:11.939" endtime="20170816 07:27:11.940"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 07:27:12.328" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170816 07:27:11.940" endtime="20170816 07:27:12.328"></status>
</kw>
<msg timestamp="20170816 07:27:12.328" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 07:27:12.328" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:27:11.940" endtime="20170816 07:27:12.328"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 07:27:12.329" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:27:12.329" endtime="20170816 07:27:12.329"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:27:12.330" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:27:12.329" endtime="20170816 07:27:12.330"></status>
</kw>
<status status="PASS" starttime="20170816 07:27:11.933" endtime="20170816 07:27:12.330"></status>
</kw>
<status status="PASS" starttime="20170816 07:27:11.933" endtime="20170816 07:27:12.330"></status>
</kw>
<status status="PASS" starttime="20170816 07:27:11.932" endtime="20170816 07:27:12.330"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 07:27:12.331" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" starttime="20170816 07:27:12.330" endtime="20170816 07:27:12.331"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:27:12.333" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:27:12.332" endtime="20170816 07:27:12.333"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:27:12.334" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:27:12.333" endtime="20170816 07:27:12.334"></status>
</kw>
<status status="PASS" starttime="20170816 07:27:12.333" endtime="20170816 07:27:12.334"></status>
</kw>
<status status="PASS" starttime="20170816 07:27:12.331" endtime="20170816 07:27:12.334"></status>
</kw>
<status status="PASS" starttime="20170816 07:27:12.331" endtime="20170816 07:27:12.334"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 07:27:12.622" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170816 07:27:12.622" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:27:12.334" endtime="20170816 07:27:12.622"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:27:12.624" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:27:12.624" endtime="20170816 07:27:12.624"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:27:12.625" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:27:12.625" endtime="20170816 07:27:12.625"></status>
</kw>
<status status="PASS" starttime="20170816 07:27:12.624" endtime="20170816 07:27:12.625"></status>
</kw>
<status status="PASS" starttime="20170816 07:27:12.623" endtime="20170816 07:27:12.626"></status>
</kw>
<status status="PASS" starttime="20170816 07:27:12.623" endtime="20170816 07:27:12.626"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 07:27:12.626" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170816 07:27:12.626" endtime="20170816 07:27:12.626"></status>
</kw>
<msg timestamp="20170816 07:27:12.626" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:27:11.931" endtime="20170816 07:27:12.626"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:27:12.627" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:27:12.627" endtime="20170816 07:27:12.627"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 07:27:12.627" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 07:27:12.628" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 07:27:12.628" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170816 07:27:12.627" endtime="20170816 07:27:12.628"></status>
</kw>
<msg timestamp="20170816 07:27:12.628" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" starttime="20170816 07:27:11.931" endtime="20170816 07:27:12.628"></status>
</kw>
<msg timestamp="20170816 07:27:12.628" level="INFO">${host_state} = Running</msg>
<status status="PASS" starttime="20170816 07:27:11.931" endtime="20170816 07:27:12.628"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status status="PASS" starttime="20170816 07:27:12.629" endtime="20170816 07:27:12.629"></status>
</kw>
<kw library="state_manager" name="Is OS Booted">
<doc>Check OS status.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Is OS Starting</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 07:27:12.634" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170816 07:27:12.633" endtime="20170816 07:27:12.634"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 07:27:12.635" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170816 07:27:12.634" endtime="20170816 07:27:12.635"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 07:27:12.635" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170816 07:27:12.635" endtime="20170816 07:27:12.635"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 07:27:12.636" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170816 07:27:12.636" endtime="20170816 07:27:12.636"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 07:27:13.011" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170816 07:27:12.637" endtime="20170816 07:27:13.011"></status>
</kw>
<msg timestamp="20170816 07:27:13.011" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 07:27:13.012" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:27:12.636" endtime="20170816 07:27:13.012"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 07:27:13.012" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:27:13.012" endtime="20170816 07:27:13.012"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:27:13.013" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:27:13.013" endtime="20170816 07:27:13.013"></status>
</kw>
<status status="PASS" starttime="20170816 07:27:12.633" endtime="20170816 07:27:13.013"></status>
</kw>
<status status="PASS" starttime="20170816 07:27:12.632" endtime="20170816 07:27:13.013"></status>
</kw>
<status status="PASS" starttime="20170816 07:27:12.632" endtime="20170816 07:27:13.013"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 07:27:13.014" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" starttime="20170816 07:27:13.014" endtime="20170816 07:27:13.014"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:27:13.016" level="INFO">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:27:13.015" endtime="20170816 07:27:13.016"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:27:13.017" level="INFO">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:27:13.017" endtime="20170816 07:27:13.017"></status>
</kw>
<status status="PASS" starttime="20170816 07:27:13.017" endtime="20170816 07:27:13.018"></status>
</kw>
<status status="PASS" starttime="20170816 07:27:13.015" endtime="20170816 07:27:13.018"></status>
</kw>
<status status="PASS" starttime="20170816 07:27:13.014" endtime="20170816 07:27:13.018"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 07:27:13.165" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170816 07:27:13.166" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:27:13.018" endtime="20170816 07:27:13.166"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:27:13.168" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:27:13.167" endtime="20170816 07:27:13.168"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:27:13.169" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:27:13.169" endtime="20170816 07:27:13.169"></status>
</kw>
<status status="PASS" starttime="20170816 07:27:13.168" endtime="20170816 07:27:13.169"></status>
</kw>
<status status="PASS" starttime="20170816 07:27:13.166" endtime="20170816 07:27:13.170"></status>
</kw>
<status status="PASS" starttime="20170816 07:27:13.166" endtime="20170816 07:27:13.170"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 07:27:13.170" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170816 07:27:13.170" endtime="20170816 07:27:13.170"></status>
</kw>
<msg timestamp="20170816 07:27:13.170" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:27:12.631" endtime="20170816 07:27:13.170"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:27:13.171" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:27:13.171" endtime="20170816 07:27:13.171"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 07:27:13.171" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 07:27:13.171" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 07:27:13.172" level="INFO">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170816 07:27:13.171" endtime="20170816 07:27:13.172"></status>
</kw>
<msg timestamp="20170816 07:27:13.172" level="INFO">${state} = Off</msg>
<status status="PASS" starttime="20170816 07:27:12.631" endtime="20170816 07:27:13.172"></status>
</kw>
<msg timestamp="20170816 07:27:13.172" level="INFO">${boot_progress} = Off</msg>
<status status="PASS" starttime="20170816 07:27:12.630" endtime="20170816 07:27:13.172"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170816 07:27:13.173" level="FAIL">Off != FW Progress, Starting OS</msg>
<status status="FAIL" starttime="20170816 07:27:13.172" endtime="20170816 07:27:13.173"></status>
</kw>
<status status="FAIL" starttime="20170816 07:27:12.630" endtime="20170816 07:27:13.173"></status>
</kw>
<msg timestamp="20170816 07:27:13.173" level="INFO">${status} = False</msg>
<status status="PASS" starttime="20170816 07:27:12.629" endtime="20170816 07:27:13.173"></status>
</kw>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${True}'</arg>
<arg>${True}</arg>
</arguments>
<status status="PASS" starttime="20170816 07:27:13.174" endtime="20170816 07:27:13.174"></status>
</kw>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 07:27:13.177" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170816 07:27:13.177" endtime="20170816 07:27:13.178"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 07:27:13.178" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170816 07:27:13.178" endtime="20170816 07:27:13.178"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 07:27:13.179" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170816 07:27:13.179" endtime="20170816 07:27:13.179"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 07:27:13.180" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170816 07:27:13.179" endtime="20170816 07:27:13.180"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 07:27:13.438" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170816 07:27:13.180" endtime="20170816 07:27:13.438"></status>
</kw>
<msg timestamp="20170816 07:27:13.438" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 07:27:13.438" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:27:13.180" endtime="20170816 07:27:13.438"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 07:27:13.439" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:27:13.439" endtime="20170816 07:27:13.439"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:27:13.440" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:27:13.439" endtime="20170816 07:27:13.440"></status>
</kw>
<status status="PASS" starttime="20170816 07:27:13.177" endtime="20170816 07:27:13.440"></status>
</kw>
<status status="PASS" starttime="20170816 07:27:13.176" endtime="20170816 07:27:13.440"></status>
</kw>
<status status="PASS" starttime="20170816 07:27:13.176" endtime="20170816 07:27:13.440"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 07:27:13.441" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status status="PASS" starttime="20170816 07:27:13.440" endtime="20170816 07:27:13.441"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:27:13.443" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:27:13.442" endtime="20170816 07:27:13.443"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:27:13.444" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:27:13.443" endtime="20170816 07:27:13.444"></status>
</kw>
<status status="PASS" starttime="20170816 07:27:13.443" endtime="20170816 07:27:13.444"></status>
</kw>
<status status="PASS" starttime="20170816 07:27:13.441" endtime="20170816 07:27:13.444"></status>
</kw>
<status status="PASS" starttime="20170816 07:27:13.441" endtime="20170816 07:27:13.444"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 07:27:13.533" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg timestamp="20170816 07:27:13.533" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:27:13.444" endtime="20170816 07:27:13.534"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:27:13.535" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:27:13.535" endtime="20170816 07:27:13.535"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:27:13.536" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:27:13.536" endtime="20170816 07:27:13.537"></status>
</kw>
<status status="PASS" starttime="20170816 07:27:13.535" endtime="20170816 07:27:13.537"></status>
</kw>
<status status="PASS" starttime="20170816 07:27:13.534" endtime="20170816 07:27:13.537"></status>
</kw>
<status status="PASS" starttime="20170816 07:27:13.534" endtime="20170816 07:27:13.537"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 07:27:13.537" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170816 07:27:13.537" endtime="20170816 07:27:13.537"></status>
</kw>
<msg timestamp="20170816 07:27:13.537" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:27:13.175" endtime="20170816 07:27:13.538"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:27:13.538" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:27:13.538" endtime="20170816 07:27:13.538"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 07:27:13.539" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 07:27:13.539" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 07:27:13.539" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170816 07:27:13.538" endtime="20170816 07:27:13.539"></status>
</kw>
<msg timestamp="20170816 07:27:13.539" level="INFO">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="PASS" starttime="20170816 07:27:13.174" endtime="20170816 07:27:13.539"></status>
</kw>
<msg timestamp="20170816 07:27:13.539" level="INFO">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="PASS" starttime="20170816 07:27:13.174" endtime="20170816 07:27:13.539"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg timestamp="20170816 07:27:13.540" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170816 07:27:13.540" level="FAIL">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="FAIL" starttime="20170816 07:27:13.540" endtime="20170816 07:27:13.540"></status>
</kw>
<status status="FAIL" starttime="20170816 07:27:12.629" endtime="20170816 07:27:13.540"></status>
</kw>
<status status="FAIL" starttime="20170816 07:27:07.243" endtime="20170816 07:27:13.541"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 07:27:23.546" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170816 07:27:23.545" endtime="20170816 07:27:23.546"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 07:27:23.547" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170816 07:27:23.546" endtime="20170816 07:27:23.547"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 07:27:23.548" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170816 07:27:23.547" endtime="20170816 07:27:23.548"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 07:27:23.548" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170816 07:27:23.548" endtime="20170816 07:27:23.548"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 07:27:24.503" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170816 07:27:23.549" endtime="20170816 07:27:24.503"></status>
</kw>
<msg timestamp="20170816 07:27:24.504" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 07:27:24.504" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:27:23.548" endtime="20170816 07:27:24.504"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 07:27:24.505" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:27:24.504" endtime="20170816 07:27:24.505"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:27:24.506" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:27:24.505" endtime="20170816 07:27:24.506"></status>
</kw>
<status status="PASS" starttime="20170816 07:27:23.545" endtime="20170816 07:27:24.506"></status>
</kw>
<status status="PASS" starttime="20170816 07:27:23.544" endtime="20170816 07:27:24.506"></status>
</kw>
<status status="PASS" starttime="20170816 07:27:23.543" endtime="20170816 07:27:24.507"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 07:27:24.507" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20170816 07:27:24.507" endtime="20170816 07:27:24.507"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:27:24.511" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:27:24.510" endtime="20170816 07:27:24.511"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:27:24.512" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:27:24.512" endtime="20170816 07:27:24.512"></status>
</kw>
<status status="PASS" starttime="20170816 07:27:24.511" endtime="20170816 07:27:24.512"></status>
</kw>
<status status="PASS" starttime="20170816 07:27:24.509" endtime="20170816 07:27:24.512"></status>
</kw>
<status status="PASS" starttime="20170816 07:27:24.508" endtime="20170816 07:27:24.512"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 07:27:29.451" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170816 07:27:29.451" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:27:24.513" endtime="20170816 07:27:29.451"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:27:29.453" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:27:29.452" endtime="20170816 07:27:29.453"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:27:29.454" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:27:29.453" endtime="20170816 07:27:29.454"></status>
</kw>
<status status="PASS" starttime="20170816 07:27:29.453" endtime="20170816 07:27:29.454"></status>
</kw>
<status status="PASS" starttime="20170816 07:27:29.452" endtime="20170816 07:27:29.454"></status>
</kw>
<status status="PASS" starttime="20170816 07:27:29.451" endtime="20170816 07:27:29.455"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 07:27:29.455" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170816 07:27:29.455" endtime="20170816 07:27:29.455"></status>
</kw>
<msg timestamp="20170816 07:27:29.455" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:27:23.543" endtime="20170816 07:27:29.455"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:27:29.456" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:27:29.456" endtime="20170816 07:27:29.456"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 07:27:29.457" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 07:27:29.457" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 07:27:29.457" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170816 07:27:29.456" endtime="20170816 07:27:29.457"></status>
</kw>
<msg timestamp="20170816 07:27:29.457" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" starttime="20170816 07:27:23.542" endtime="20170816 07:27:29.457"></status>
</kw>
<msg timestamp="20170816 07:27:29.457" level="INFO">${power_state} = Off</msg>
<status status="PASS" starttime="20170816 07:27:23.542" endtime="20170816 07:27:29.457"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20170816 07:27:29.458" level="FAIL">On != Off</msg>
<status status="FAIL" starttime="20170816 07:27:29.458" endtime="20170816 07:27:29.458"></status>
</kw>
<status status="FAIL" starttime="20170816 07:27:23.542" endtime="20170816 07:27:29.458"></status>
</kw>
<status status="FAIL" starttime="20170816 07:27:23.541" endtime="20170816 07:27:29.458"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 07:27:39.463" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170816 07:27:39.463" endtime="20170816 07:27:39.464"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 07:27:39.464" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170816 07:27:39.464" endtime="20170816 07:27:39.464"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 07:27:39.465" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170816 07:27:39.465" endtime="20170816 07:27:39.465"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 07:27:39.466" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170816 07:27:39.465" endtime="20170816 07:27:39.466"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 07:27:39.950" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170816 07:27:39.466" endtime="20170816 07:27:39.951"></status>
</kw>
<msg timestamp="20170816 07:27:39.951" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 07:27:39.951" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:27:39.466" endtime="20170816 07:27:39.951"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 07:27:39.951" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:27:39.951" endtime="20170816 07:27:39.952"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:27:39.952" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:27:39.952" endtime="20170816 07:27:39.952"></status>
</kw>
<status status="PASS" starttime="20170816 07:27:39.463" endtime="20170816 07:27:39.952"></status>
</kw>
<status status="PASS" starttime="20170816 07:27:39.462" endtime="20170816 07:27:39.952"></status>
</kw>
<status status="PASS" starttime="20170816 07:27:39.462" endtime="20170816 07:27:39.953"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 07:27:39.953" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20170816 07:27:39.953" endtime="20170816 07:27:39.953"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:27:39.955" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:27:39.955" endtime="20170816 07:27:39.955"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:27:39.956" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:27:39.956" endtime="20170816 07:27:39.956"></status>
</kw>
<status status="PASS" starttime="20170816 07:27:39.956" endtime="20170816 07:27:39.957"></status>
</kw>
<status status="PASS" starttime="20170816 07:27:39.954" endtime="20170816 07:27:39.957"></status>
</kw>
<status status="PASS" starttime="20170816 07:27:39.954" endtime="20170816 07:27:39.957"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 07:27:40.703" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170816 07:27:40.703" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:27:39.957" endtime="20170816 07:27:40.703"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:27:40.706" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:27:40.705" endtime="20170816 07:27:40.706"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:27:40.707" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:27:40.707" endtime="20170816 07:27:40.707"></status>
</kw>
<status status="PASS" starttime="20170816 07:27:40.706" endtime="20170816 07:27:40.707"></status>
</kw>
<status status="PASS" starttime="20170816 07:27:40.704" endtime="20170816 07:27:40.707"></status>
</kw>
<status status="PASS" starttime="20170816 07:27:40.704" endtime="20170816 07:27:40.707"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 07:27:40.708" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170816 07:27:40.707" endtime="20170816 07:27:40.708"></status>
</kw>
<msg timestamp="20170816 07:27:40.708" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:27:39.461" endtime="20170816 07:27:40.708"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:27:40.709" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:27:40.708" endtime="20170816 07:27:40.709"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 07:27:40.710" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 07:27:40.710" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 07:27:40.710" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170816 07:27:40.710" endtime="20170816 07:27:40.710"></status>
</kw>
<msg timestamp="20170816 07:27:40.711" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" starttime="20170816 07:27:39.460" endtime="20170816 07:27:40.711"></status>
</kw>
<msg timestamp="20170816 07:27:40.711" level="INFO">${power_state} = On</msg>
<status status="PASS" starttime="20170816 07:27:39.460" endtime="20170816 07:27:40.711"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" starttime="20170816 07:27:40.711" endtime="20170816 07:27:40.712"></status>
</kw>
<status status="PASS" starttime="20170816 07:27:39.459" endtime="20170816 07:27:40.712"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 07:27:40.717" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170816 07:27:40.717" endtime="20170816 07:27:40.718"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 07:27:40.719" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170816 07:27:40.718" endtime="20170816 07:27:40.719"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 07:27:40.719" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170816 07:27:40.719" endtime="20170816 07:27:40.720"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 07:27:40.720" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170816 07:27:40.720" endtime="20170816 07:27:40.720"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 07:27:41.175" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170816 07:27:40.721" endtime="20170816 07:27:41.175"></status>
</kw>
<msg timestamp="20170816 07:27:41.175" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 07:27:41.175" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:27:40.721" endtime="20170816 07:27:41.175"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 07:27:41.176" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:27:41.175" endtime="20170816 07:27:41.176"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:27:41.176" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:27:41.176" endtime="20170816 07:27:41.177"></status>
</kw>
<status status="PASS" starttime="20170816 07:27:40.716" endtime="20170816 07:27:41.177"></status>
</kw>
<status status="PASS" starttime="20170816 07:27:40.716" endtime="20170816 07:27:41.177"></status>
</kw>
<status status="PASS" starttime="20170816 07:27:40.715" endtime="20170816 07:27:41.177"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 07:27:41.177" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" starttime="20170816 07:27:41.177" endtime="20170816 07:27:41.177"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:27:41.180" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:27:41.179" endtime="20170816 07:27:41.180"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:27:41.181" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:27:41.180" endtime="20170816 07:27:41.181"></status>
</kw>
<status status="PASS" starttime="20170816 07:27:41.180" endtime="20170816 07:27:41.181"></status>
</kw>
<status status="PASS" starttime="20170816 07:27:41.178" endtime="20170816 07:27:41.181"></status>
</kw>
<status status="PASS" starttime="20170816 07:27:41.178" endtime="20170816 07:27:41.181"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 07:27:41.553" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170816 07:27:41.554" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:27:41.181" endtime="20170816 07:27:41.554"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:27:41.555" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:27:41.555" endtime="20170816 07:27:41.555"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:27:41.556" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:27:41.556" endtime="20170816 07:27:41.557"></status>
</kw>
<status status="PASS" starttime="20170816 07:27:41.556" endtime="20170816 07:27:41.557"></status>
</kw>
<status status="PASS" starttime="20170816 07:27:41.554" endtime="20170816 07:27:41.557"></status>
</kw>
<status status="PASS" starttime="20170816 07:27:41.554" endtime="20170816 07:27:41.557"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 07:27:41.557" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170816 07:27:41.557" endtime="20170816 07:27:41.557"></status>
</kw>
<msg timestamp="20170816 07:27:41.558" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:27:40.714" endtime="20170816 07:27:41.558"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:27:41.558" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:27:41.558" endtime="20170816 07:27:41.558"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 07:27:41.559" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 07:27:41.559" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 07:27:41.559" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170816 07:27:41.558" endtime="20170816 07:27:41.559"></status>
</kw>
<msg timestamp="20170816 07:27:41.559" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" starttime="20170816 07:27:40.713" endtime="20170816 07:27:41.559"></status>
</kw>
<msg timestamp="20170816 07:27:41.560" level="INFO">${host_state} = Running</msg>
<status status="PASS" starttime="20170816 07:27:40.712" endtime="20170816 07:27:41.560"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status status="PASS" starttime="20170816 07:27:41.560" endtime="20170816 07:27:41.560"></status>
</kw>
<kw library="state_manager" name="Is OS Booted">
<doc>Check OS status.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Is OS Starting</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 07:27:41.565" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170816 07:27:41.565" endtime="20170816 07:27:41.565"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 07:27:41.566" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170816 07:27:41.566" endtime="20170816 07:27:41.566"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 07:27:41.567" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170816 07:27:41.566" endtime="20170816 07:27:41.567"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 07:27:41.567" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170816 07:27:41.567" endtime="20170816 07:27:41.567"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 07:27:41.939" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170816 07:27:41.568" endtime="20170816 07:27:41.939"></status>
</kw>
<msg timestamp="20170816 07:27:41.940" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 07:27:41.940" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:27:41.568" endtime="20170816 07:27:41.940"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 07:27:41.940" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:27:41.940" endtime="20170816 07:27:41.940"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:27:41.941" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:27:41.941" endtime="20170816 07:27:41.941"></status>
</kw>
<status status="PASS" starttime="20170816 07:27:41.564" endtime="20170816 07:27:41.941"></status>
</kw>
<status status="PASS" starttime="20170816 07:27:41.564" endtime="20170816 07:27:41.941"></status>
</kw>
<status status="PASS" starttime="20170816 07:27:41.563" endtime="20170816 07:27:41.942"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 07:27:41.942" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" starttime="20170816 07:27:41.942" endtime="20170816 07:27:41.942"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:27:41.945" level="INFO">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:27:41.944" endtime="20170816 07:27:41.945"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:27:41.946" level="INFO">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:27:41.945" endtime="20170816 07:27:41.946"></status>
</kw>
<status status="PASS" starttime="20170816 07:27:41.945" endtime="20170816 07:27:41.946"></status>
</kw>
<status status="PASS" starttime="20170816 07:27:41.943" endtime="20170816 07:27:41.946"></status>
</kw>
<status status="PASS" starttime="20170816 07:27:41.942" endtime="20170816 07:27:41.946"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 07:27:42.240" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170816 07:27:42.241" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:27:41.946" endtime="20170816 07:27:42.241"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:27:42.243" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:27:42.242" endtime="20170816 07:27:42.243"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:27:42.244" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:27:42.243" endtime="20170816 07:27:42.244"></status>
</kw>
<status status="PASS" starttime="20170816 07:27:42.243" endtime="20170816 07:27:42.244"></status>
</kw>
<status status="PASS" starttime="20170816 07:27:42.242" endtime="20170816 07:27:42.244"></status>
</kw>
<status status="PASS" starttime="20170816 07:27:42.241" endtime="20170816 07:27:42.244"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 07:27:42.244" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170816 07:27:42.244" endtime="20170816 07:27:42.244"></status>
</kw>
<msg timestamp="20170816 07:27:42.245" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:27:41.563" endtime="20170816 07:27:42.245"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:27:42.245" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:27:42.245" endtime="20170816 07:27:42.245"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 07:27:42.246" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 07:27:42.246" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 07:27:42.246" level="INFO">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170816 07:27:42.246" endtime="20170816 07:27:42.246"></status>
</kw>
<msg timestamp="20170816 07:27:42.246" level="INFO">${state} = Off</msg>
<status status="PASS" starttime="20170816 07:27:41.562" endtime="20170816 07:27:42.246"></status>
</kw>
<msg timestamp="20170816 07:27:42.247" level="INFO">${boot_progress} = Off</msg>
<status status="PASS" starttime="20170816 07:27:41.561" endtime="20170816 07:27:42.247"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170816 07:27:42.247" level="FAIL">Off != FW Progress, Starting OS</msg>
<status status="FAIL" starttime="20170816 07:27:42.247" endtime="20170816 07:27:42.248"></status>
</kw>
<status status="FAIL" starttime="20170816 07:27:41.561" endtime="20170816 07:27:42.248"></status>
</kw>
<msg timestamp="20170816 07:27:42.248" level="INFO">${status} = False</msg>
<status status="PASS" starttime="20170816 07:27:41.561" endtime="20170816 07:27:42.248"></status>
</kw>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${True}'</arg>
<arg>${True}</arg>
</arguments>
<status status="PASS" starttime="20170816 07:27:42.248" endtime="20170816 07:27:42.248"></status>
</kw>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 07:27:42.252" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170816 07:27:42.252" endtime="20170816 07:27:42.253"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 07:27:42.253" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170816 07:27:42.253" endtime="20170816 07:27:42.253"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 07:27:42.254" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170816 07:27:42.254" endtime="20170816 07:27:42.254"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 07:27:42.255" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170816 07:27:42.254" endtime="20170816 07:27:42.255"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 07:27:42.487" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170816 07:27:42.255" endtime="20170816 07:27:42.487"></status>
</kw>
<msg timestamp="20170816 07:27:42.487" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 07:27:42.487" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:27:42.255" endtime="20170816 07:27:42.487"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 07:27:42.488" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:27:42.488" endtime="20170816 07:27:42.488"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:27:42.489" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:27:42.488" endtime="20170816 07:27:42.489"></status>
</kw>
<status status="PASS" starttime="20170816 07:27:42.252" endtime="20170816 07:27:42.489"></status>
</kw>
<status status="PASS" starttime="20170816 07:27:42.251" endtime="20170816 07:27:42.489"></status>
</kw>
<status status="PASS" starttime="20170816 07:27:42.251" endtime="20170816 07:27:42.489"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 07:27:42.490" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status status="PASS" starttime="20170816 07:27:42.490" endtime="20170816 07:27:42.490"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:27:42.492" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:27:42.491" endtime="20170816 07:27:42.492"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:27:42.493" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:27:42.493" endtime="20170816 07:27:42.493"></status>
</kw>
<status status="PASS" starttime="20170816 07:27:42.492" endtime="20170816 07:27:42.493"></status>
</kw>
<status status="PASS" starttime="20170816 07:27:42.491" endtime="20170816 07:27:42.493"></status>
</kw>
<status status="PASS" starttime="20170816 07:27:42.490" endtime="20170816 07:27:42.493"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 07:27:42.586" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg timestamp="20170816 07:27:42.586" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:27:42.494" endtime="20170816 07:27:42.586"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:27:42.588" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:27:42.587" endtime="20170816 07:27:42.588"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:27:42.589" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:27:42.588" endtime="20170816 07:27:42.589"></status>
</kw>
<status status="PASS" starttime="20170816 07:27:42.588" endtime="20170816 07:27:42.589"></status>
</kw>
<status status="PASS" starttime="20170816 07:27:42.587" endtime="20170816 07:27:42.589"></status>
</kw>
<status status="PASS" starttime="20170816 07:27:42.586" endtime="20170816 07:27:42.589"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 07:27:42.589" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170816 07:27:42.589" endtime="20170816 07:27:42.590"></status>
</kw>
<msg timestamp="20170816 07:27:42.590" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:27:42.250" endtime="20170816 07:27:42.590"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:27:42.590" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:27:42.590" endtime="20170816 07:27:42.590"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 07:27:42.591" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 07:27:42.591" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 07:27:42.591" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170816 07:27:42.591" endtime="20170816 07:27:42.591"></status>
</kw>
<msg timestamp="20170816 07:27:42.591" level="INFO">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="PASS" starttime="20170816 07:27:42.249" endtime="20170816 07:27:42.592"></status>
</kw>
<msg timestamp="20170816 07:27:42.592" level="INFO">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="PASS" starttime="20170816 07:27:42.249" endtime="20170816 07:27:42.592"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg timestamp="20170816 07:27:42.592" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170816 07:27:42.592" level="FAIL">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="FAIL" starttime="20170816 07:27:42.592" endtime="20170816 07:27:42.593"></status>
</kw>
<status status="FAIL" starttime="20170816 07:27:41.560" endtime="20170816 07:27:42.593"></status>
</kw>
<status status="FAIL" starttime="20170816 07:27:39.459" endtime="20170816 07:27:42.593"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 07:27:52.598" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170816 07:27:52.598" endtime="20170816 07:27:52.599"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 07:27:52.599" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170816 07:27:52.599" endtime="20170816 07:27:52.600"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 07:27:52.600" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170816 07:27:52.600" endtime="20170816 07:27:52.600"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 07:27:52.601" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170816 07:27:52.600" endtime="20170816 07:27:52.601"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 07:27:52.778" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170816 07:27:52.602" endtime="20170816 07:27:52.778"></status>
</kw>
<msg timestamp="20170816 07:27:52.778" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 07:27:52.778" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:27:52.601" endtime="20170816 07:27:52.778"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 07:27:52.779" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:27:52.779" endtime="20170816 07:27:52.779"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:27:52.780" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:27:52.779" endtime="20170816 07:27:52.780"></status>
</kw>
<status status="PASS" starttime="20170816 07:27:52.597" endtime="20170816 07:27:52.780"></status>
</kw>
<status status="PASS" starttime="20170816 07:27:52.597" endtime="20170816 07:27:52.780"></status>
</kw>
<status status="PASS" starttime="20170816 07:27:52.596" endtime="20170816 07:27:52.780"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 07:27:52.781" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20170816 07:27:52.781" endtime="20170816 07:27:52.781"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:27:52.783" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:27:52.782" endtime="20170816 07:27:52.783"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:27:52.784" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:27:52.784" endtime="20170816 07:27:52.784"></status>
</kw>
<status status="PASS" starttime="20170816 07:27:52.783" endtime="20170816 07:27:52.784"></status>
</kw>
<status status="PASS" starttime="20170816 07:27:52.782" endtime="20170816 07:27:52.784"></status>
</kw>
<status status="PASS" starttime="20170816 07:27:52.781" endtime="20170816 07:27:52.784"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 07:27:52.847" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170816 07:27:52.847" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:27:52.785" endtime="20170816 07:27:52.847"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:27:52.849" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:27:52.848" endtime="20170816 07:27:52.849"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:27:52.855" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:27:52.854" endtime="20170816 07:27:52.855"></status>
</kw>
<status status="PASS" starttime="20170816 07:27:52.849" endtime="20170816 07:27:52.855"></status>
</kw>
<status status="PASS" starttime="20170816 07:27:52.848" endtime="20170816 07:27:52.855"></status>
</kw>
<status status="PASS" starttime="20170816 07:27:52.847" endtime="20170816 07:27:52.855"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 07:27:52.856" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170816 07:27:52.855" endtime="20170816 07:27:52.856"></status>
</kw>
<msg timestamp="20170816 07:27:52.856" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:27:52.595" endtime="20170816 07:27:52.856"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:27:52.857" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:27:52.856" endtime="20170816 07:27:52.857"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 07:27:52.859" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 07:27:52.859" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 07:27:52.859" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170816 07:27:52.857" endtime="20170816 07:27:52.859"></status>
</kw>
<msg timestamp="20170816 07:27:52.859" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" starttime="20170816 07:27:52.595" endtime="20170816 07:27:52.859"></status>
</kw>
<msg timestamp="20170816 07:27:52.859" level="INFO">${power_state} = On</msg>
<status status="PASS" starttime="20170816 07:27:52.594" endtime="20170816 07:27:52.860"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" starttime="20170816 07:27:52.860" endtime="20170816 07:27:52.861"></status>
</kw>
<status status="PASS" starttime="20170816 07:27:52.594" endtime="20170816 07:27:52.861"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 07:27:52.865" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170816 07:27:52.865" endtime="20170816 07:27:52.866"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 07:27:52.867" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170816 07:27:52.867" endtime="20170816 07:27:52.867"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 07:27:52.867" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170816 07:27:52.867" endtime="20170816 07:27:52.868"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 07:27:52.869" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170816 07:27:52.868" endtime="20170816 07:27:52.869"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 07:27:53.064" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170816 07:27:52.870" endtime="20170816 07:27:53.064"></status>
</kw>
<msg timestamp="20170816 07:27:53.065" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 07:27:53.065" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:27:52.869" endtime="20170816 07:27:53.065"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 07:27:53.065" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:27:53.065" endtime="20170816 07:27:53.065"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:27:53.066" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:27:53.066" endtime="20170816 07:27:53.066"></status>
</kw>
<status status="PASS" starttime="20170816 07:27:52.864" endtime="20170816 07:27:53.066"></status>
</kw>
<status status="PASS" starttime="20170816 07:27:52.864" endtime="20170816 07:27:53.066"></status>
</kw>
<status status="PASS" starttime="20170816 07:27:52.863" endtime="20170816 07:27:53.066"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 07:27:53.067" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" starttime="20170816 07:27:53.067" endtime="20170816 07:27:53.067"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:27:53.070" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:27:53.068" endtime="20170816 07:27:53.070"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:27:53.071" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:27:53.070" endtime="20170816 07:27:53.071"></status>
</kw>
<status status="PASS" starttime="20170816 07:27:53.070" endtime="20170816 07:27:53.071"></status>
</kw>
<status status="PASS" starttime="20170816 07:27:53.068" endtime="20170816 07:27:53.071"></status>
</kw>
<status status="PASS" starttime="20170816 07:27:53.067" endtime="20170816 07:27:53.071"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 07:27:53.160" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170816 07:27:53.160" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:27:53.071" endtime="20170816 07:27:53.160"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:27:53.162" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:27:53.161" endtime="20170816 07:27:53.162"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:27:53.163" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:27:53.163" endtime="20170816 07:27:53.163"></status>
</kw>
<status status="PASS" starttime="20170816 07:27:53.162" endtime="20170816 07:27:53.163"></status>
</kw>
<status status="PASS" starttime="20170816 07:27:53.161" endtime="20170816 07:27:53.163"></status>
</kw>
<status status="PASS" starttime="20170816 07:27:53.160" endtime="20170816 07:27:53.163"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 07:27:53.164" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170816 07:27:53.163" endtime="20170816 07:27:53.164"></status>
</kw>
<msg timestamp="20170816 07:27:53.164" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:27:52.862" endtime="20170816 07:27:53.164"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:27:53.164" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:27:53.164" endtime="20170816 07:27:53.165"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 07:27:53.165" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 07:27:53.165" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 07:27:53.165" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170816 07:27:53.165" endtime="20170816 07:27:53.165"></status>
</kw>
<msg timestamp="20170816 07:27:53.166" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" starttime="20170816 07:27:52.861" endtime="20170816 07:27:53.166"></status>
</kw>
<msg timestamp="20170816 07:27:53.166" level="INFO">${host_state} = Running</msg>
<status status="PASS" starttime="20170816 07:27:52.861" endtime="20170816 07:27:53.166"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status status="PASS" starttime="20170816 07:27:53.166" endtime="20170816 07:27:53.166"></status>
</kw>
<kw library="state_manager" name="Is OS Booted">
<doc>Check OS status.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Is OS Starting</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 07:27:53.171" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170816 07:27:53.171" endtime="20170816 07:27:53.172"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 07:27:53.172" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170816 07:27:53.172" endtime="20170816 07:27:53.172"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 07:27:53.173" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170816 07:27:53.173" endtime="20170816 07:27:53.173"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 07:27:53.174" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170816 07:27:53.173" endtime="20170816 07:27:53.174"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 07:27:53.406" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170816 07:27:53.174" endtime="20170816 07:27:53.406"></status>
</kw>
<msg timestamp="20170816 07:27:53.406" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 07:27:53.406" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:27:53.174" endtime="20170816 07:27:53.406"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 07:27:53.407" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:27:53.407" endtime="20170816 07:27:53.407"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:27:53.408" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:27:53.407" endtime="20170816 07:27:53.408"></status>
</kw>
<status status="PASS" starttime="20170816 07:27:53.170" endtime="20170816 07:27:53.408"></status>
</kw>
<status status="PASS" starttime="20170816 07:27:53.170" endtime="20170816 07:27:53.408"></status>
</kw>
<status status="PASS" starttime="20170816 07:27:53.169" endtime="20170816 07:27:53.408"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 07:27:53.409" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" starttime="20170816 07:27:53.408" endtime="20170816 07:27:53.409"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:27:53.411" level="INFO">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:27:53.410" endtime="20170816 07:27:53.411"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:27:53.412" level="INFO">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:27:53.412" endtime="20170816 07:27:53.412"></status>
</kw>
<status status="PASS" starttime="20170816 07:27:53.411" endtime="20170816 07:27:53.412"></status>
</kw>
<status status="PASS" starttime="20170816 07:27:53.410" endtime="20170816 07:27:53.412"></status>
</kw>
<status status="PASS" starttime="20170816 07:27:53.409" endtime="20170816 07:27:53.412"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 07:27:53.524" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170816 07:27:53.524" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:27:53.413" endtime="20170816 07:27:53.524"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:27:53.527" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:27:53.526" endtime="20170816 07:27:53.527"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:27:53.528" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:27:53.528" endtime="20170816 07:27:53.528"></status>
</kw>
<status status="PASS" starttime="20170816 07:27:53.527" endtime="20170816 07:27:53.529"></status>
</kw>
<status status="PASS" starttime="20170816 07:27:53.526" endtime="20170816 07:27:53.529"></status>
</kw>
<status status="PASS" starttime="20170816 07:27:53.525" endtime="20170816 07:27:53.529"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 07:27:53.529" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170816 07:27:53.529" endtime="20170816 07:27:53.529"></status>
</kw>
<msg timestamp="20170816 07:27:53.530" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:27:53.168" endtime="20170816 07:27:53.530"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:27:53.530" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:27:53.530" endtime="20170816 07:27:53.530"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 07:27:53.531" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 07:27:53.531" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 07:27:53.531" level="INFO">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170816 07:27:53.531" endtime="20170816 07:27:53.531"></status>
</kw>
<msg timestamp="20170816 07:27:53.531" level="INFO">${state} = Off</msg>
<status status="PASS" starttime="20170816 07:27:53.168" endtime="20170816 07:27:53.531"></status>
</kw>
<msg timestamp="20170816 07:27:53.532" level="INFO">${boot_progress} = Off</msg>
<status status="PASS" starttime="20170816 07:27:53.168" endtime="20170816 07:27:53.532"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170816 07:27:53.532" level="FAIL">Off != FW Progress, Starting OS</msg>
<status status="FAIL" starttime="20170816 07:27:53.532" endtime="20170816 07:27:53.532"></status>
</kw>
<status status="FAIL" starttime="20170816 07:27:53.167" endtime="20170816 07:27:53.532"></status>
</kw>
<msg timestamp="20170816 07:27:53.533" level="INFO">${status} = False</msg>
<status status="PASS" starttime="20170816 07:27:53.167" endtime="20170816 07:27:53.533"></status>
</kw>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${True}'</arg>
<arg>${True}</arg>
</arguments>
<status status="PASS" starttime="20170816 07:27:53.533" endtime="20170816 07:27:53.533"></status>
</kw>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 07:27:53.539" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170816 07:27:53.538" endtime="20170816 07:27:53.539"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 07:27:53.540" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170816 07:27:53.540" endtime="20170816 07:27:53.540"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 07:27:53.541" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170816 07:27:53.540" endtime="20170816 07:27:53.541"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 07:27:53.542" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170816 07:27:53.541" endtime="20170816 07:27:53.542"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 07:27:53.776" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170816 07:27:53.543" endtime="20170816 07:27:53.776"></status>
</kw>
<msg timestamp="20170816 07:27:53.776" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 07:27:53.776" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:27:53.542" endtime="20170816 07:27:53.776"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 07:27:53.777" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:27:53.776" endtime="20170816 07:27:53.777"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:27:53.777" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:27:53.777" endtime="20170816 07:27:53.778"></status>
</kw>
<status status="PASS" starttime="20170816 07:27:53.537" endtime="20170816 07:27:53.778"></status>
</kw>
<status status="PASS" starttime="20170816 07:27:53.537" endtime="20170816 07:27:53.778"></status>
</kw>
<status status="PASS" starttime="20170816 07:27:53.536" endtime="20170816 07:27:53.778"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 07:27:53.779" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status status="PASS" starttime="20170816 07:27:53.778" endtime="20170816 07:27:53.779"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:27:53.781" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:27:53.780" endtime="20170816 07:27:53.781"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:27:53.782" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:27:53.781" endtime="20170816 07:27:53.782"></status>
</kw>
<status status="PASS" starttime="20170816 07:27:53.781" endtime="20170816 07:27:53.782"></status>
</kw>
<status status="PASS" starttime="20170816 07:27:53.779" endtime="20170816 07:27:53.782"></status>
</kw>
<status status="PASS" starttime="20170816 07:27:53.779" endtime="20170816 07:27:53.782"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 07:27:53.872" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg timestamp="20170816 07:27:53.872" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:27:53.782" endtime="20170816 07:27:53.872"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:27:53.874" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:27:53.873" endtime="20170816 07:27:53.874"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:27:53.875" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:27:53.875" endtime="20170816 07:27:53.875"></status>
</kw>
<status status="PASS" starttime="20170816 07:27:53.874" endtime="20170816 07:27:53.875"></status>
</kw>
<status status="PASS" starttime="20170816 07:27:53.873" endtime="20170816 07:27:53.875"></status>
</kw>
<status status="PASS" starttime="20170816 07:27:53.872" endtime="20170816 07:27:53.875"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 07:27:53.876" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170816 07:27:53.876" endtime="20170816 07:27:53.876"></status>
</kw>
<msg timestamp="20170816 07:27:53.876" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:27:53.535" endtime="20170816 07:27:53.876"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:27:53.877" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:27:53.876" endtime="20170816 07:27:53.877"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 07:27:53.877" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 07:27:53.877" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 07:27:53.877" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170816 07:27:53.877" endtime="20170816 07:27:53.877"></status>
</kw>
<msg timestamp="20170816 07:27:53.878" level="INFO">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="PASS" starttime="20170816 07:27:53.534" endtime="20170816 07:27:53.878"></status>
</kw>
<msg timestamp="20170816 07:27:53.878" level="INFO">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="PASS" starttime="20170816 07:27:53.533" endtime="20170816 07:27:53.878"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg timestamp="20170816 07:27:53.878" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170816 07:27:53.879" level="FAIL">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="FAIL" starttime="20170816 07:27:53.878" endtime="20170816 07:27:53.879"></status>
</kw>
<status status="FAIL" starttime="20170816 07:27:53.167" endtime="20170816 07:27:53.879"></status>
</kw>
<status status="FAIL" starttime="20170816 07:27:52.593" endtime="20170816 07:27:53.879"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 07:28:03.884" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170816 07:28:03.884" endtime="20170816 07:28:03.885"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 07:28:03.885" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170816 07:28:03.885" endtime="20170816 07:28:03.885"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 07:28:03.886" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170816 07:28:03.886" endtime="20170816 07:28:03.886"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 07:28:03.887" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170816 07:28:03.886" endtime="20170816 07:28:03.887"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 07:28:04.247" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170816 07:28:03.887" endtime="20170816 07:28:04.247"></status>
</kw>
<msg timestamp="20170816 07:28:04.247" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 07:28:04.247" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:28:03.887" endtime="20170816 07:28:04.247"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 07:28:04.248" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:28:04.248" endtime="20170816 07:28:04.248"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:28:04.249" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:28:04.248" endtime="20170816 07:28:04.249"></status>
</kw>
<status status="PASS" starttime="20170816 07:28:03.883" endtime="20170816 07:28:04.249"></status>
</kw>
<status status="PASS" starttime="20170816 07:28:03.883" endtime="20170816 07:28:04.249"></status>
</kw>
<status status="PASS" starttime="20170816 07:28:03.882" endtime="20170816 07:28:04.249"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 07:28:04.250" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20170816 07:28:04.249" endtime="20170816 07:28:04.250"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:28:04.252" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:28:04.251" endtime="20170816 07:28:04.252"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:28:04.253" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:28:04.253" endtime="20170816 07:28:04.253"></status>
</kw>
<status status="PASS" starttime="20170816 07:28:04.252" endtime="20170816 07:28:04.253"></status>
</kw>
<status status="PASS" starttime="20170816 07:28:04.251" endtime="20170816 07:28:04.253"></status>
</kw>
<status status="PASS" starttime="20170816 07:28:04.250" endtime="20170816 07:28:04.253"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 07:28:04.961" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170816 07:28:04.961" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:28:04.253" endtime="20170816 07:28:04.961"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:28:04.963" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:28:04.963" endtime="20170816 07:28:04.963"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:28:04.964" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:28:04.964" endtime="20170816 07:28:04.964"></status>
</kw>
<status status="PASS" starttime="20170816 07:28:04.963" endtime="20170816 07:28:04.964"></status>
</kw>
<status status="PASS" starttime="20170816 07:28:04.962" endtime="20170816 07:28:04.965"></status>
</kw>
<status status="PASS" starttime="20170816 07:28:04.962" endtime="20170816 07:28:04.965"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 07:28:04.965" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170816 07:28:04.965" endtime="20170816 07:28:04.965"></status>
</kw>
<msg timestamp="20170816 07:28:04.965" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:28:03.882" endtime="20170816 07:28:04.965"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:28:04.966" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:28:04.966" endtime="20170816 07:28:04.966"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 07:28:04.967" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 07:28:04.967" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 07:28:04.967" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170816 07:28:04.966" endtime="20170816 07:28:04.967"></status>
</kw>
<msg timestamp="20170816 07:28:04.967" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" starttime="20170816 07:28:03.881" endtime="20170816 07:28:04.967"></status>
</kw>
<msg timestamp="20170816 07:28:04.967" level="INFO">${power_state} = On</msg>
<status status="PASS" starttime="20170816 07:28:03.881" endtime="20170816 07:28:04.967"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" starttime="20170816 07:28:04.968" endtime="20170816 07:28:04.968"></status>
</kw>
<status status="PASS" starttime="20170816 07:28:03.880" endtime="20170816 07:28:04.968"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 07:28:04.972" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170816 07:28:04.972" endtime="20170816 07:28:04.973"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 07:28:04.974" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170816 07:28:04.974" endtime="20170816 07:28:04.974"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 07:28:04.975" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170816 07:28:04.974" endtime="20170816 07:28:04.975"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 07:28:04.976" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170816 07:28:04.975" endtime="20170816 07:28:04.976"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 07:28:05.465" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170816 07:28:04.977" endtime="20170816 07:28:05.466"></status>
</kw>
<msg timestamp="20170816 07:28:05.466" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 07:28:05.466" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:28:04.976" endtime="20170816 07:28:05.466"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 07:28:05.466" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:28:05.466" endtime="20170816 07:28:05.467"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:28:05.468" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:28:05.467" endtime="20170816 07:28:05.468"></status>
</kw>
<status status="PASS" starttime="20170816 07:28:04.971" endtime="20170816 07:28:05.468"></status>
</kw>
<status status="PASS" starttime="20170816 07:28:04.970" endtime="20170816 07:28:05.468"></status>
</kw>
<status status="PASS" starttime="20170816 07:28:04.970" endtime="20170816 07:28:05.468"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 07:28:05.469" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" starttime="20170816 07:28:05.469" endtime="20170816 07:28:05.469"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:28:05.471" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:28:05.471" endtime="20170816 07:28:05.471"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:28:05.472" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:28:05.472" endtime="20170816 07:28:05.472"></status>
</kw>
<status status="PASS" starttime="20170816 07:28:05.471" endtime="20170816 07:28:05.472"></status>
</kw>
<status status="PASS" starttime="20170816 07:28:05.470" endtime="20170816 07:28:05.472"></status>
</kw>
<status status="PASS" starttime="20170816 07:28:05.469" endtime="20170816 07:28:05.473"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 07:28:05.910" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170816 07:28:05.910" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:28:05.473" endtime="20170816 07:28:05.910"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:28:05.912" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:28:05.912" endtime="20170816 07:28:05.912"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:28:05.913" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:28:05.913" endtime="20170816 07:28:05.913"></status>
</kw>
<status status="PASS" starttime="20170816 07:28:05.912" endtime="20170816 07:28:05.913"></status>
</kw>
<status status="PASS" starttime="20170816 07:28:05.911" endtime="20170816 07:28:05.913"></status>
</kw>
<status status="PASS" starttime="20170816 07:28:05.911" endtime="20170816 07:28:05.913"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 07:28:05.914" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170816 07:28:05.914" endtime="20170816 07:28:05.914"></status>
</kw>
<msg timestamp="20170816 07:28:05.914" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:28:04.969" endtime="20170816 07:28:05.914"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:28:05.915" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:28:05.914" endtime="20170816 07:28:05.915"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 07:28:05.915" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 07:28:05.915" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 07:28:05.915" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170816 07:28:05.915" endtime="20170816 07:28:05.916"></status>
</kw>
<msg timestamp="20170816 07:28:05.916" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" starttime="20170816 07:28:04.969" endtime="20170816 07:28:05.916"></status>
</kw>
<msg timestamp="20170816 07:28:05.916" level="INFO">${host_state} = Running</msg>
<status status="PASS" starttime="20170816 07:28:04.968" endtime="20170816 07:28:05.916"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status status="PASS" starttime="20170816 07:28:05.917" endtime="20170816 07:28:05.917"></status>
</kw>
<kw library="state_manager" name="Is OS Booted">
<doc>Check OS status.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Is OS Starting</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 07:28:05.922" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170816 07:28:05.921" endtime="20170816 07:28:05.922"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 07:28:05.923" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170816 07:28:05.922" endtime="20170816 07:28:05.923"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 07:28:05.923" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170816 07:28:05.923" endtime="20170816 07:28:05.923"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 07:28:05.924" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170816 07:28:05.924" endtime="20170816 07:28:05.924"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 07:28:06.288" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170816 07:28:05.925" endtime="20170816 07:28:06.288"></status>
</kw>
<msg timestamp="20170816 07:28:06.288" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 07:28:06.288" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:28:05.924" endtime="20170816 07:28:06.288"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 07:28:06.289" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:28:06.288" endtime="20170816 07:28:06.289"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:28:06.290" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:28:06.289" endtime="20170816 07:28:06.290"></status>
</kw>
<status status="PASS" starttime="20170816 07:28:05.921" endtime="20170816 07:28:06.290"></status>
</kw>
<status status="PASS" starttime="20170816 07:28:05.920" endtime="20170816 07:28:06.290"></status>
</kw>
<status status="PASS" starttime="20170816 07:28:05.920" endtime="20170816 07:28:06.290"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 07:28:06.291" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" starttime="20170816 07:28:06.290" endtime="20170816 07:28:06.291"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:28:06.293" level="INFO">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:28:06.292" endtime="20170816 07:28:06.293"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:28:06.294" level="INFO">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:28:06.294" endtime="20170816 07:28:06.294"></status>
</kw>
<status status="PASS" starttime="20170816 07:28:06.293" endtime="20170816 07:28:06.294"></status>
</kw>
<status status="PASS" starttime="20170816 07:28:06.291" endtime="20170816 07:28:06.294"></status>
</kw>
<status status="PASS" starttime="20170816 07:28:06.291" endtime="20170816 07:28:06.294"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 07:28:06.847" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170816 07:28:06.847" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:28:06.295" endtime="20170816 07:28:06.847"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:28:06.849" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:28:06.849" endtime="20170816 07:28:06.849"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:28:06.850" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:28:06.850" endtime="20170816 07:28:06.851"></status>
</kw>
<status status="PASS" starttime="20170816 07:28:06.849" endtime="20170816 07:28:06.851"></status>
</kw>
<status status="PASS" starttime="20170816 07:28:06.848" endtime="20170816 07:28:06.851"></status>
</kw>
<status status="PASS" starttime="20170816 07:28:06.848" endtime="20170816 07:28:06.851"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 07:28:06.851" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170816 07:28:06.851" endtime="20170816 07:28:06.851"></status>
</kw>
<msg timestamp="20170816 07:28:06.852" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:28:05.919" endtime="20170816 07:28:06.852"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:28:06.852" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:28:06.852" endtime="20170816 07:28:06.852"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 07:28:06.853" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 07:28:06.853" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 07:28:06.853" level="INFO">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170816 07:28:06.853" endtime="20170816 07:28:06.853"></status>
</kw>
<msg timestamp="20170816 07:28:06.853" level="INFO">${state} = Off</msg>
<status status="PASS" starttime="20170816 07:28:05.919" endtime="20170816 07:28:06.853"></status>
</kw>
<msg timestamp="20170816 07:28:06.854" level="INFO">${boot_progress} = Off</msg>
<status status="PASS" starttime="20170816 07:28:05.918" endtime="20170816 07:28:06.854"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170816 07:28:06.854" level="FAIL">Off != FW Progress, Starting OS</msg>
<status status="FAIL" starttime="20170816 07:28:06.854" endtime="20170816 07:28:06.854"></status>
</kw>
<status status="FAIL" starttime="20170816 07:28:05.918" endtime="20170816 07:28:06.854"></status>
</kw>
<msg timestamp="20170816 07:28:06.855" level="INFO">${status} = False</msg>
<status status="PASS" starttime="20170816 07:28:05.917" endtime="20170816 07:28:06.855"></status>
</kw>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${True}'</arg>
<arg>${True}</arg>
</arguments>
<status status="PASS" starttime="20170816 07:28:06.855" endtime="20170816 07:28:06.855"></status>
</kw>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 07:28:06.859" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170816 07:28:06.858" endtime="20170816 07:28:06.859"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 07:28:06.860" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170816 07:28:06.859" endtime="20170816 07:28:06.860"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 07:28:06.860" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170816 07:28:06.860" endtime="20170816 07:28:06.861"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 07:28:06.861" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170816 07:28:06.861" endtime="20170816 07:28:06.861"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 07:28:07.297" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170816 07:28:06.862" endtime="20170816 07:28:07.297"></status>
</kw>
<msg timestamp="20170816 07:28:07.297" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 07:28:07.297" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:28:06.861" endtime="20170816 07:28:07.297"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 07:28:07.298" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:28:07.298" endtime="20170816 07:28:07.298"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:28:07.299" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:28:07.298" endtime="20170816 07:28:07.299"></status>
</kw>
<status status="PASS" starttime="20170816 07:28:06.858" endtime="20170816 07:28:07.299"></status>
</kw>
<status status="PASS" starttime="20170816 07:28:06.857" endtime="20170816 07:28:07.299"></status>
</kw>
<status status="PASS" starttime="20170816 07:28:06.857" endtime="20170816 07:28:07.299"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 07:28:07.300" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status status="PASS" starttime="20170816 07:28:07.299" endtime="20170816 07:28:07.300"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:28:07.302" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:28:07.301" endtime="20170816 07:28:07.302"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:28:07.303" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:28:07.302" endtime="20170816 07:28:07.303"></status>
</kw>
<status status="PASS" starttime="20170816 07:28:07.302" endtime="20170816 07:28:07.303"></status>
</kw>
<status status="PASS" starttime="20170816 07:28:07.300" endtime="20170816 07:28:07.303"></status>
</kw>
<status status="PASS" starttime="20170816 07:28:07.300" endtime="20170816 07:28:07.303"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 07:28:07.844" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg timestamp="20170816 07:28:07.845" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:28:07.303" endtime="20170816 07:28:07.845"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:28:07.846" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:28:07.846" endtime="20170816 07:28:07.847"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:28:07.848" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:28:07.847" endtime="20170816 07:28:07.848"></status>
</kw>
<status status="PASS" starttime="20170816 07:28:07.847" endtime="20170816 07:28:07.848"></status>
</kw>
<status status="PASS" starttime="20170816 07:28:07.845" endtime="20170816 07:28:07.848"></status>
</kw>
<status status="PASS" starttime="20170816 07:28:07.845" endtime="20170816 07:28:07.848"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 07:28:07.849" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170816 07:28:07.848" endtime="20170816 07:28:07.849"></status>
</kw>
<msg timestamp="20170816 07:28:07.849" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:28:06.856" endtime="20170816 07:28:07.849"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:28:07.850" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:28:07.849" endtime="20170816 07:28:07.850"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 07:28:07.850" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 07:28:07.850" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 07:28:07.850" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170816 07:28:07.850" endtime="20170816 07:28:07.850"></status>
</kw>
<msg timestamp="20170816 07:28:07.851" level="INFO">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="PASS" starttime="20170816 07:28:06.856" endtime="20170816 07:28:07.851"></status>
</kw>
<msg timestamp="20170816 07:28:07.851" level="INFO">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="PASS" starttime="20170816 07:28:06.855" endtime="20170816 07:28:07.851"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg timestamp="20170816 07:28:07.851" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170816 07:28:07.852" level="FAIL">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="FAIL" starttime="20170816 07:28:07.851" endtime="20170816 07:28:07.852"></status>
</kw>
<status status="FAIL" starttime="20170816 07:28:05.917" endtime="20170816 07:28:07.852"></status>
</kw>
<status status="FAIL" starttime="20170816 07:28:03.880" endtime="20170816 07:28:07.852"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 07:28:17.858" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170816 07:28:17.857" endtime="20170816 07:28:17.858"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 07:28:17.859" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170816 07:28:17.858" endtime="20170816 07:28:17.859"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 07:28:17.859" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170816 07:28:17.859" endtime="20170816 07:28:17.859"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 07:28:17.860" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170816 07:28:17.860" endtime="20170816 07:28:17.860"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 07:28:18.258" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170816 07:28:17.861" endtime="20170816 07:28:18.258"></status>
</kw>
<msg timestamp="20170816 07:28:18.258" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 07:28:18.259" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:28:17.860" endtime="20170816 07:28:18.259"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 07:28:18.259" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:28:18.259" endtime="20170816 07:28:18.259"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:28:18.260" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:28:18.260" endtime="20170816 07:28:18.260"></status>
</kw>
<status status="PASS" starttime="20170816 07:28:17.856" endtime="20170816 07:28:18.260"></status>
</kw>
<status status="PASS" starttime="20170816 07:28:17.856" endtime="20170816 07:28:18.260"></status>
</kw>
<status status="PASS" starttime="20170816 07:28:17.855" endtime="20170816 07:28:18.261"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 07:28:18.261" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20170816 07:28:18.261" endtime="20170816 07:28:18.261"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:28:18.264" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:28:18.263" endtime="20170816 07:28:18.264"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:28:18.265" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:28:18.265" endtime="20170816 07:28:18.266"></status>
</kw>
<status status="PASS" starttime="20170816 07:28:18.264" endtime="20170816 07:28:18.266"></status>
</kw>
<status status="PASS" starttime="20170816 07:28:18.262" endtime="20170816 07:28:18.266"></status>
</kw>
<status status="PASS" starttime="20170816 07:28:18.262" endtime="20170816 07:28:18.266"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 07:28:18.992" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170816 07:28:18.993" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:28:18.266" endtime="20170816 07:28:18.993"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:28:18.994" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:28:18.994" endtime="20170816 07:28:18.995"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:28:18.996" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:28:18.995" endtime="20170816 07:28:18.996"></status>
</kw>
<status status="PASS" starttime="20170816 07:28:18.995" endtime="20170816 07:28:18.996"></status>
</kw>
<status status="PASS" starttime="20170816 07:28:18.993" endtime="20170816 07:28:18.996"></status>
</kw>
<status status="PASS" starttime="20170816 07:28:18.993" endtime="20170816 07:28:18.996"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 07:28:18.997" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170816 07:28:18.997" endtime="20170816 07:28:18.997"></status>
</kw>
<msg timestamp="20170816 07:28:18.997" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:28:17.855" endtime="20170816 07:28:18.997"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:28:18.998" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:28:18.997" endtime="20170816 07:28:18.998"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 07:28:18.998" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 07:28:18.998" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 07:28:18.998" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170816 07:28:18.998" endtime="20170816 07:28:18.998"></status>
</kw>
<msg timestamp="20170816 07:28:18.999" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" starttime="20170816 07:28:17.854" endtime="20170816 07:28:18.999"></status>
</kw>
<msg timestamp="20170816 07:28:18.999" level="INFO">${power_state} = On</msg>
<status status="PASS" starttime="20170816 07:28:17.854" endtime="20170816 07:28:18.999"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" starttime="20170816 07:28:18.999" endtime="20170816 07:28:19.000"></status>
</kw>
<status status="PASS" starttime="20170816 07:28:17.853" endtime="20170816 07:28:19.000"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 07:28:19.004" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170816 07:28:19.003" endtime="20170816 07:28:19.004"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 07:28:19.005" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170816 07:28:19.004" endtime="20170816 07:28:19.005"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 07:28:19.005" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170816 07:28:19.005" endtime="20170816 07:28:19.005"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 07:28:19.006" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170816 07:28:19.005" endtime="20170816 07:28:19.006"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 07:28:19.306" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170816 07:28:19.007" endtime="20170816 07:28:19.306"></status>
</kw>
<msg timestamp="20170816 07:28:19.306" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 07:28:19.306" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:28:19.006" endtime="20170816 07:28:19.306"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 07:28:19.307" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:28:19.306" endtime="20170816 07:28:19.307"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:28:19.307" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:28:19.307" endtime="20170816 07:28:19.307"></status>
</kw>
<status status="PASS" starttime="20170816 07:28:19.003" endtime="20170816 07:28:19.308"></status>
</kw>
<status status="PASS" starttime="20170816 07:28:19.002" endtime="20170816 07:28:19.308"></status>
</kw>
<status status="PASS" starttime="20170816 07:28:19.002" endtime="20170816 07:28:19.308"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 07:28:19.308" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" starttime="20170816 07:28:19.308" endtime="20170816 07:28:19.308"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:28:19.316" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:28:19.310" endtime="20170816 07:28:19.316"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:28:19.317" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:28:19.316" endtime="20170816 07:28:19.317"></status>
</kw>
<status status="PASS" starttime="20170816 07:28:19.316" endtime="20170816 07:28:19.317"></status>
</kw>
<status status="PASS" starttime="20170816 07:28:19.309" endtime="20170816 07:28:19.317"></status>
</kw>
<status status="PASS" starttime="20170816 07:28:19.309" endtime="20170816 07:28:19.317"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 07:28:19.871" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170816 07:28:19.871" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:28:19.317" endtime="20170816 07:28:19.871"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:28:19.873" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:28:19.872" endtime="20170816 07:28:19.873"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:28:19.874" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:28:19.874" endtime="20170816 07:28:19.874"></status>
</kw>
<status status="PASS" starttime="20170816 07:28:19.873" endtime="20170816 07:28:19.874"></status>
</kw>
<status status="PASS" starttime="20170816 07:28:19.872" endtime="20170816 07:28:19.874"></status>
</kw>
<status status="PASS" starttime="20170816 07:28:19.871" endtime="20170816 07:28:19.874"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 07:28:19.875" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170816 07:28:19.875" endtime="20170816 07:28:19.875"></status>
</kw>
<msg timestamp="20170816 07:28:19.875" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:28:19.001" endtime="20170816 07:28:19.875"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:28:19.876" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:28:19.875" endtime="20170816 07:28:19.876"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 07:28:19.876" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 07:28:19.876" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 07:28:19.877" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170816 07:28:19.876" endtime="20170816 07:28:19.877"></status>
</kw>
<msg timestamp="20170816 07:28:19.877" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" starttime="20170816 07:28:19.000" endtime="20170816 07:28:19.877"></status>
</kw>
<msg timestamp="20170816 07:28:19.877" level="INFO">${host_state} = Running</msg>
<status status="PASS" starttime="20170816 07:28:19.000" endtime="20170816 07:28:19.877"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status status="PASS" starttime="20170816 07:28:19.877" endtime="20170816 07:28:19.878"></status>
</kw>
<kw library="state_manager" name="Is OS Booted">
<doc>Check OS status.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Is OS Starting</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 07:28:19.885" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170816 07:28:19.885" endtime="20170816 07:28:19.886"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 07:28:19.887" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170816 07:28:19.886" endtime="20170816 07:28:19.887"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 07:28:19.888" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170816 07:28:19.887" endtime="20170816 07:28:19.888"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 07:28:19.889" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170816 07:28:19.888" endtime="20170816 07:28:19.889"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 07:28:20.397" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170816 07:28:19.890" endtime="20170816 07:28:20.397"></status>
</kw>
<msg timestamp="20170816 07:28:20.397" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 07:28:20.397" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:28:19.889" endtime="20170816 07:28:20.397"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 07:28:20.398" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:28:20.398" endtime="20170816 07:28:20.398"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:28:20.399" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:28:20.398" endtime="20170816 07:28:20.399"></status>
</kw>
<status status="PASS" starttime="20170816 07:28:19.884" endtime="20170816 07:28:20.399"></status>
</kw>
<status status="PASS" starttime="20170816 07:28:19.883" endtime="20170816 07:28:20.399"></status>
</kw>
<status status="PASS" starttime="20170816 07:28:19.882" endtime="20170816 07:28:20.399"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 07:28:20.400" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" starttime="20170816 07:28:20.399" endtime="20170816 07:28:20.400"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:28:20.402" level="INFO">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:28:20.401" endtime="20170816 07:28:20.402"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:28:20.403" level="INFO">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:28:20.403" endtime="20170816 07:28:20.403"></status>
</kw>
<status status="PASS" starttime="20170816 07:28:20.402" endtime="20170816 07:28:20.403"></status>
</kw>
<status status="PASS" starttime="20170816 07:28:20.401" endtime="20170816 07:28:20.403"></status>
</kw>
<status status="PASS" starttime="20170816 07:28:20.400" endtime="20170816 07:28:20.403"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 07:28:20.793" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170816 07:28:20.793" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:28:20.404" endtime="20170816 07:28:20.793"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:28:20.795" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:28:20.795" endtime="20170816 07:28:20.795"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:28:20.796" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:28:20.796" endtime="20170816 07:28:20.796"></status>
</kw>
<status status="PASS" starttime="20170816 07:28:20.795" endtime="20170816 07:28:20.796"></status>
</kw>
<status status="PASS" starttime="20170816 07:28:20.794" endtime="20170816 07:28:20.796"></status>
</kw>
<status status="PASS" starttime="20170816 07:28:20.794" endtime="20170816 07:28:20.796"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 07:28:20.797" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170816 07:28:20.797" endtime="20170816 07:28:20.797"></status>
</kw>
<msg timestamp="20170816 07:28:20.797" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:28:19.881" endtime="20170816 07:28:20.797"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:28:20.798" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:28:20.797" endtime="20170816 07:28:20.798"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 07:28:20.798" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 07:28:20.798" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 07:28:20.799" level="INFO">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170816 07:28:20.798" endtime="20170816 07:28:20.799"></status>
</kw>
<msg timestamp="20170816 07:28:20.799" level="INFO">${state} = Off</msg>
<status status="PASS" starttime="20170816 07:28:19.880" endtime="20170816 07:28:20.799"></status>
</kw>
<msg timestamp="20170816 07:28:20.799" level="INFO">${boot_progress} = Off</msg>
<status status="PASS" starttime="20170816 07:28:19.880" endtime="20170816 07:28:20.799"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170816 07:28:20.800" level="FAIL">Off != FW Progress, Starting OS</msg>
<status status="FAIL" starttime="20170816 07:28:20.800" endtime="20170816 07:28:20.800"></status>
</kw>
<status status="FAIL" starttime="20170816 07:28:19.879" endtime="20170816 07:28:20.801"></status>
</kw>
<msg timestamp="20170816 07:28:20.801" level="INFO">${status} = False</msg>
<status status="PASS" starttime="20170816 07:28:19.879" endtime="20170816 07:28:20.801"></status>
</kw>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${True}'</arg>
<arg>${True}</arg>
</arguments>
<status status="PASS" starttime="20170816 07:28:20.802" endtime="20170816 07:28:20.802"></status>
</kw>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 07:28:20.806" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170816 07:28:20.806" endtime="20170816 07:28:20.806"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 07:28:20.807" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170816 07:28:20.807" endtime="20170816 07:28:20.807"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 07:28:20.808" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170816 07:28:20.807" endtime="20170816 07:28:20.808"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 07:28:20.808" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170816 07:28:20.808" endtime="20170816 07:28:20.808"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 07:28:21.168" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170816 07:28:20.809" endtime="20170816 07:28:21.168"></status>
</kw>
<msg timestamp="20170816 07:28:21.169" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 07:28:21.169" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:28:20.809" endtime="20170816 07:28:21.169"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 07:28:21.169" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:28:21.169" endtime="20170816 07:28:21.169"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:28:21.170" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:28:21.170" endtime="20170816 07:28:21.170"></status>
</kw>
<status status="PASS" starttime="20170816 07:28:20.805" endtime="20170816 07:28:21.171"></status>
</kw>
<status status="PASS" starttime="20170816 07:28:20.805" endtime="20170816 07:28:21.171"></status>
</kw>
<status status="PASS" starttime="20170816 07:28:20.804" endtime="20170816 07:28:21.171"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 07:28:21.172" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status status="PASS" starttime="20170816 07:28:21.171" endtime="20170816 07:28:21.172"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:28:21.175" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:28:21.174" endtime="20170816 07:28:21.175"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:28:21.176" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:28:21.176" endtime="20170816 07:28:21.177"></status>
</kw>
<status status="PASS" starttime="20170816 07:28:21.175" endtime="20170816 07:28:21.177"></status>
</kw>
<status status="PASS" starttime="20170816 07:28:21.173" endtime="20170816 07:28:21.177"></status>
</kw>
<status status="PASS" starttime="20170816 07:28:21.172" endtime="20170816 07:28:21.177"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 07:28:21.761" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg timestamp="20170816 07:28:21.761" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:28:21.177" endtime="20170816 07:28:21.761"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:28:21.763" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:28:21.762" endtime="20170816 07:28:21.763"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:28:21.764" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:28:21.764" endtime="20170816 07:28:21.764"></status>
</kw>
<status status="PASS" starttime="20170816 07:28:21.764" endtime="20170816 07:28:21.765"></status>
</kw>
<status status="PASS" starttime="20170816 07:28:21.762" endtime="20170816 07:28:21.765"></status>
</kw>
<status status="PASS" starttime="20170816 07:28:21.761" endtime="20170816 07:28:21.765"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 07:28:21.765" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170816 07:28:21.765" endtime="20170816 07:28:21.765"></status>
</kw>
<msg timestamp="20170816 07:28:21.765" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:28:20.803" endtime="20170816 07:28:21.765"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:28:21.766" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:28:21.766" endtime="20170816 07:28:21.766"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 07:28:21.767" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 07:28:21.767" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 07:28:21.767" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170816 07:28:21.766" endtime="20170816 07:28:21.767"></status>
</kw>
<msg timestamp="20170816 07:28:21.767" level="INFO">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="PASS" starttime="20170816 07:28:20.803" endtime="20170816 07:28:21.767"></status>
</kw>
<msg timestamp="20170816 07:28:21.767" level="INFO">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="PASS" starttime="20170816 07:28:20.802" endtime="20170816 07:28:21.767"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg timestamp="20170816 07:28:21.768" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170816 07:28:21.768" level="FAIL">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="FAIL" starttime="20170816 07:28:21.768" endtime="20170816 07:28:21.768"></status>
</kw>
<status status="FAIL" starttime="20170816 07:28:19.878" endtime="20170816 07:28:21.768"></status>
</kw>
<status status="FAIL" starttime="20170816 07:28:17.853" endtime="20170816 07:28:21.768"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 07:28:31.774" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170816 07:28:31.773" endtime="20170816 07:28:31.774"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 07:28:31.775" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170816 07:28:31.774" endtime="20170816 07:28:31.775"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 07:28:31.775" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170816 07:28:31.775" endtime="20170816 07:28:31.775"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 07:28:31.776" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170816 07:28:31.776" endtime="20170816 07:28:31.776"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 07:28:32.197" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170816 07:28:31.777" endtime="20170816 07:28:32.198"></status>
</kw>
<msg timestamp="20170816 07:28:32.198" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 07:28:32.198" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:28:31.777" endtime="20170816 07:28:32.198"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 07:28:32.198" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:28:32.198" endtime="20170816 07:28:32.199"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:28:32.199" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:28:32.199" endtime="20170816 07:28:32.199"></status>
</kw>
<status status="PASS" starttime="20170816 07:28:31.773" endtime="20170816 07:28:32.199"></status>
</kw>
<status status="PASS" starttime="20170816 07:28:31.772" endtime="20170816 07:28:32.199"></status>
</kw>
<status status="PASS" starttime="20170816 07:28:31.772" endtime="20170816 07:28:32.200"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 07:28:32.200" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20170816 07:28:32.200" endtime="20170816 07:28:32.200"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:28:32.202" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:28:32.202" endtime="20170816 07:28:32.202"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:28:32.203" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:28:32.203" endtime="20170816 07:28:32.203"></status>
</kw>
<status status="PASS" starttime="20170816 07:28:32.203" endtime="20170816 07:28:32.204"></status>
</kw>
<status status="PASS" starttime="20170816 07:28:32.201" endtime="20170816 07:28:32.204"></status>
</kw>
<status status="PASS" starttime="20170816 07:28:32.201" endtime="20170816 07:28:32.204"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 07:28:32.438" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170816 07:28:32.438" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:28:32.204" endtime="20170816 07:28:32.438"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:28:32.440" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:28:32.439" endtime="20170816 07:28:32.440"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:28:32.441" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:28:32.441" endtime="20170816 07:28:32.441"></status>
</kw>
<status status="PASS" starttime="20170816 07:28:32.440" endtime="20170816 07:28:32.441"></status>
</kw>
<status status="PASS" starttime="20170816 07:28:32.439" endtime="20170816 07:28:32.441"></status>
</kw>
<status status="PASS" starttime="20170816 07:28:32.438" endtime="20170816 07:28:32.441"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 07:28:32.442" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170816 07:28:32.441" endtime="20170816 07:28:32.442"></status>
</kw>
<msg timestamp="20170816 07:28:32.442" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:28:31.771" endtime="20170816 07:28:32.442"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:28:32.443" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:28:32.442" endtime="20170816 07:28:32.443"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 07:28:32.443" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 07:28:32.443" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 07:28:32.443" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170816 07:28:32.443" endtime="20170816 07:28:32.443"></status>
</kw>
<msg timestamp="20170816 07:28:32.444" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" starttime="20170816 07:28:31.771" endtime="20170816 07:28:32.444"></status>
</kw>
<msg timestamp="20170816 07:28:32.444" level="INFO">${power_state} = On</msg>
<status status="PASS" starttime="20170816 07:28:31.770" endtime="20170816 07:28:32.444"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" starttime="20170816 07:28:32.444" endtime="20170816 07:28:32.445"></status>
</kw>
<status status="PASS" starttime="20170816 07:28:31.770" endtime="20170816 07:28:32.445"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 07:28:32.448" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170816 07:28:32.448" endtime="20170816 07:28:32.449"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 07:28:32.450" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170816 07:28:32.449" endtime="20170816 07:28:32.450"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 07:28:32.450" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170816 07:28:32.450" endtime="20170816 07:28:32.450"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 07:28:32.451" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170816 07:28:32.450" endtime="20170816 07:28:32.451"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 07:28:32.797" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170816 07:28:32.452" endtime="20170816 07:28:32.797"></status>
</kw>
<msg timestamp="20170816 07:28:32.797" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 07:28:32.797" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:28:32.451" endtime="20170816 07:28:32.797"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 07:28:32.798" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:28:32.797" endtime="20170816 07:28:32.798"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:28:32.798" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:28:32.798" endtime="20170816 07:28:32.798"></status>
</kw>
<status status="PASS" starttime="20170816 07:28:32.447" endtime="20170816 07:28:32.799"></status>
</kw>
<status status="PASS" starttime="20170816 07:28:32.447" endtime="20170816 07:28:32.799"></status>
</kw>
<status status="PASS" starttime="20170816 07:28:32.446" endtime="20170816 07:28:32.799"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 07:28:32.799" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" starttime="20170816 07:28:32.799" endtime="20170816 07:28:32.799"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:28:32.802" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:28:32.801" endtime="20170816 07:28:32.802"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:28:32.803" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:28:32.802" endtime="20170816 07:28:32.803"></status>
</kw>
<status status="PASS" starttime="20170816 07:28:32.802" endtime="20170816 07:28:32.803"></status>
</kw>
<status status="PASS" starttime="20170816 07:28:32.800" endtime="20170816 07:28:32.803"></status>
</kw>
<status status="PASS" starttime="20170816 07:28:32.800" endtime="20170816 07:28:32.803"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 07:28:33.463" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170816 07:28:33.464" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:28:32.803" endtime="20170816 07:28:33.464"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:28:33.466" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:28:33.465" endtime="20170816 07:28:33.466"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:28:33.467" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:28:33.466" endtime="20170816 07:28:33.467"></status>
</kw>
<status status="PASS" starttime="20170816 07:28:33.466" endtime="20170816 07:28:33.467"></status>
</kw>
<status status="PASS" starttime="20170816 07:28:33.465" endtime="20170816 07:28:33.467"></status>
</kw>
<status status="PASS" starttime="20170816 07:28:33.464" endtime="20170816 07:28:33.467"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 07:28:33.467" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170816 07:28:33.467" endtime="20170816 07:28:33.467"></status>
</kw>
<msg timestamp="20170816 07:28:33.468" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:28:32.446" endtime="20170816 07:28:33.468"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:28:33.468" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:28:33.468" endtime="20170816 07:28:33.468"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 07:28:33.469" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 07:28:33.469" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 07:28:33.469" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170816 07:28:33.469" endtime="20170816 07:28:33.469"></status>
</kw>
<msg timestamp="20170816 07:28:33.469" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" starttime="20170816 07:28:32.445" endtime="20170816 07:28:33.469"></status>
</kw>
<msg timestamp="20170816 07:28:33.470" level="INFO">${host_state} = Running</msg>
<status status="PASS" starttime="20170816 07:28:32.445" endtime="20170816 07:28:33.470"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status status="PASS" starttime="20170816 07:28:33.470" endtime="20170816 07:28:33.471"></status>
</kw>
<kw library="state_manager" name="Is OS Booted">
<doc>Check OS status.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Is OS Starting</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 07:28:33.476" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170816 07:28:33.476" endtime="20170816 07:28:33.476"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 07:28:33.477" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170816 07:28:33.477" endtime="20170816 07:28:33.477"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 07:28:33.478" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170816 07:28:33.477" endtime="20170816 07:28:33.478"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 07:28:33.478" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170816 07:28:33.478" endtime="20170816 07:28:33.478"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 07:28:33.859" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170816 07:28:33.479" endtime="20170816 07:28:33.859"></status>
</kw>
<msg timestamp="20170816 07:28:33.859" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 07:28:33.859" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:28:33.479" endtime="20170816 07:28:33.859"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 07:28:33.860" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:28:33.859" endtime="20170816 07:28:33.860"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:28:33.860" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:28:33.860" endtime="20170816 07:28:33.860"></status>
</kw>
<status status="PASS" starttime="20170816 07:28:33.475" endtime="20170816 07:28:33.861"></status>
</kw>
<status status="PASS" starttime="20170816 07:28:33.475" endtime="20170816 07:28:33.861"></status>
</kw>
<status status="PASS" starttime="20170816 07:28:33.474" endtime="20170816 07:28:33.861"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 07:28:33.861" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" starttime="20170816 07:28:33.861" endtime="20170816 07:28:33.861"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:28:33.864" level="INFO">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:28:33.863" endtime="20170816 07:28:33.864"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:28:33.865" level="INFO">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:28:33.864" endtime="20170816 07:28:33.865"></status>
</kw>
<status status="PASS" starttime="20170816 07:28:33.864" endtime="20170816 07:28:33.865"></status>
</kw>
<status status="PASS" starttime="20170816 07:28:33.862" endtime="20170816 07:28:33.865"></status>
</kw>
<status status="PASS" starttime="20170816 07:28:33.862" endtime="20170816 07:28:33.865"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 07:28:34.469" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170816 07:28:34.469" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:28:33.865" endtime="20170816 07:28:34.469"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:28:34.471" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:28:34.470" endtime="20170816 07:28:34.471"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:28:34.472" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:28:34.472" endtime="20170816 07:28:34.472"></status>
</kw>
<status status="PASS" starttime="20170816 07:28:34.471" endtime="20170816 07:28:34.472"></status>
</kw>
<status status="PASS" starttime="20170816 07:28:34.470" endtime="20170816 07:28:34.472"></status>
</kw>
<status status="PASS" starttime="20170816 07:28:34.469" endtime="20170816 07:28:34.472"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 07:28:34.473" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170816 07:28:34.473" endtime="20170816 07:28:34.473"></status>
</kw>
<msg timestamp="20170816 07:28:34.473" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:28:33.474" endtime="20170816 07:28:34.473"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:28:34.474" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:28:34.473" endtime="20170816 07:28:34.474"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 07:28:34.474" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 07:28:34.474" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 07:28:34.474" level="INFO">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170816 07:28:34.474" endtime="20170816 07:28:34.474"></status>
</kw>
<msg timestamp="20170816 07:28:34.475" level="INFO">${state} = Off</msg>
<status status="PASS" starttime="20170816 07:28:33.473" endtime="20170816 07:28:34.475"></status>
</kw>
<msg timestamp="20170816 07:28:34.475" level="INFO">${boot_progress} = Off</msg>
<status status="PASS" starttime="20170816 07:28:33.472" endtime="20170816 07:28:34.475"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170816 07:28:34.476" level="FAIL">Off != FW Progress, Starting OS</msg>
<status status="FAIL" starttime="20170816 07:28:34.475" endtime="20170816 07:28:34.476"></status>
</kw>
<status status="FAIL" starttime="20170816 07:28:33.472" endtime="20170816 07:28:34.476"></status>
</kw>
<msg timestamp="20170816 07:28:34.476" level="INFO">${status} = False</msg>
<status status="PASS" starttime="20170816 07:28:33.472" endtime="20170816 07:28:34.476"></status>
</kw>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${True}'</arg>
<arg>${True}</arg>
</arguments>
<status status="PASS" starttime="20170816 07:28:34.476" endtime="20170816 07:28:34.477"></status>
</kw>
<kw library="state_manager" name="Get Host State Attribute">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 07:28:34.480" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170816 07:28:34.480" endtime="20170816 07:28:34.481"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 07:28:34.481" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170816 07:28:34.481" endtime="20170816 07:28:34.481"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 07:28:34.482" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170816 07:28:34.481" endtime="20170816 07:28:34.482"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 07:28:34.482" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170816 07:28:34.482" endtime="20170816 07:28:34.482"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 07:28:34.765" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170816 07:28:34.483" endtime="20170816 07:28:34.765"></status>
</kw>
<msg timestamp="20170816 07:28:34.765" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 07:28:34.765" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:28:34.483" endtime="20170816 07:28:34.765"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 07:28:34.766" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:28:34.766" endtime="20170816 07:28:34.766"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:28:34.767" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:28:34.766" endtime="20170816 07:28:34.767"></status>
</kw>
<status status="PASS" starttime="20170816 07:28:34.479" endtime="20170816 07:28:34.767"></status>
</kw>
<status status="PASS" starttime="20170816 07:28:34.479" endtime="20170816 07:28:34.767"></status>
</kw>
<status status="PASS" starttime="20170816 07:28:34.478" endtime="20170816 07:28:34.767"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 07:28:34.768" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status status="PASS" starttime="20170816 07:28:34.767" endtime="20170816 07:28:34.768"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:28:34.770" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:28:34.769" endtime="20170816 07:28:34.770"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:28:34.771" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:28:34.771" endtime="20170816 07:28:34.771"></status>
</kw>
<status status="PASS" starttime="20170816 07:28:34.770" endtime="20170816 07:28:34.771"></status>
</kw>
<status status="PASS" starttime="20170816 07:28:34.769" endtime="20170816 07:28:34.771"></status>
</kw>
<status status="PASS" starttime="20170816 07:28:34.768" endtime="20170816 07:28:34.771"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 07:28:34.870" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg timestamp="20170816 07:28:34.870" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:28:34.771" endtime="20170816 07:28:34.870"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:28:34.872" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:28:34.871" endtime="20170816 07:28:34.872"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:28:34.873" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:28:34.873" endtime="20170816 07:28:34.873"></status>
</kw>
<status status="PASS" starttime="20170816 07:28:34.872" endtime="20170816 07:28:34.873"></status>
</kw>
<status status="PASS" starttime="20170816 07:28:34.871" endtime="20170816 07:28:34.873"></status>
</kw>
<status status="PASS" starttime="20170816 07:28:34.870" endtime="20170816 07:28:34.873"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 07:28:34.874" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170816 07:28:34.873" endtime="20170816 07:28:34.874"></status>
</kw>
<msg timestamp="20170816 07:28:34.874" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:28:34.478" endtime="20170816 07:28:34.874"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:28:34.875" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:28:34.874" endtime="20170816 07:28:34.875"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 07:28:34.875" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 07:28:34.875" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 07:28:34.875" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170816 07:28:34.875" endtime="20170816 07:28:34.875"></status>
</kw>
<msg timestamp="20170816 07:28:34.876" level="INFO">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="PASS" starttime="20170816 07:28:34.477" endtime="20170816 07:28:34.876"></status>
</kw>
<msg timestamp="20170816 07:28:34.876" level="INFO">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="PASS" starttime="20170816 07:28:34.477" endtime="20170816 07:28:34.876"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg timestamp="20170816 07:28:34.877" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170816 07:28:34.877" level="FAIL">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="FAIL" starttime="20170816 07:28:34.876" endtime="20170816 07:28:34.877"></status>
</kw>
<status status="FAIL" starttime="20170816 07:28:33.471" endtime="20170816 07:28:34.877"></status>
</kw>
<status status="FAIL" starttime="20170816 07:28:31.769" endtime="20170816 07:28:34.877"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 07:28:44.883" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170816 07:28:44.883" endtime="20170816 07:28:44.883"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 07:28:44.884" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170816 07:28:44.884" endtime="20170816 07:28:44.884"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 07:28:44.885" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170816 07:28:44.884" endtime="20170816 07:28:44.885"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 07:28:44.885" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170816 07:28:44.885" endtime="20170816 07:28:44.885"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 07:28:45.074" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170816 07:28:44.886" endtime="20170816 07:28:45.074"></status>
</kw>
<msg timestamp="20170816 07:28:45.074" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 07:28:45.074" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:28:44.886" endtime="20170816 07:28:45.074"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 07:28:45.075" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:28:45.075" endtime="20170816 07:28:45.075"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:28:45.076" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:28:45.075" endtime="20170816 07:28:45.076"></status>
</kw>
<status status="PASS" starttime="20170816 07:28:44.882" endtime="20170816 07:28:45.076"></status>
</kw>
<status status="PASS" starttime="20170816 07:28:44.881" endtime="20170816 07:28:45.076"></status>
</kw>
<status status="PASS" starttime="20170816 07:28:44.881" endtime="20170816 07:28:45.076"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 07:28:45.077" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20170816 07:28:45.077" endtime="20170816 07:28:45.077"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:28:45.079" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:28:45.078" endtime="20170816 07:28:45.079"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:28:45.080" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:28:45.080" endtime="20170816 07:28:45.080"></status>
</kw>
<status status="PASS" starttime="20170816 07:28:45.079" endtime="20170816 07:28:45.080"></status>
</kw>
<status status="PASS" starttime="20170816 07:28:45.078" endtime="20170816 07:28:45.080"></status>
</kw>
<status status="PASS" starttime="20170816 07:28:45.077" endtime="20170816 07:28:45.080"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 07:28:45.144" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170816 07:28:45.144" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:28:45.081" endtime="20170816 07:28:45.144"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:28:45.146" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:28:45.145" endtime="20170816 07:28:45.146"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:28:45.147" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:28:45.146" endtime="20170816 07:28:45.147"></status>
</kw>
<status status="PASS" starttime="20170816 07:28:45.146" endtime="20170816 07:28:45.147"></status>
</kw>
<status status="PASS" starttime="20170816 07:28:45.145" endtime="20170816 07:28:45.147"></status>
</kw>
<status status="PASS" starttime="20170816 07:28:45.144" endtime="20170816 07:28:45.147"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 07:28:45.148" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170816 07:28:45.148" endtime="20170816 07:28:45.148"></status>
</kw>
<msg timestamp="20170816 07:28:45.148" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:28:44.880" endtime="20170816 07:28:45.148"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:28:45.149" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:28:45.148" endtime="20170816 07:28:45.149"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 07:28:45.149" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 07:28:45.149" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 07:28:45.149" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170816 07:28:45.149" endtime="20170816 07:28:45.149"></status>
</kw>
<msg timestamp="20170816 07:28:45.150" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" starttime="20170816 07:28:44.879" endtime="20170816 07:28:45.150"></status>
</kw>
<msg timestamp="20170816 07:28:45.150" level="INFO">${power_state} = On</msg>
<status status="PASS" starttime="20170816 07:28:44.879" endtime="20170816 07:28:45.150"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" starttime="20170816 07:28:45.150" endtime="20170816 07:28:45.151"></status>
</kw>
<status status="PASS" starttime="20170816 07:28:44.878" endtime="20170816 07:28:45.151"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 07:28:45.154" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170816 07:28:45.154" endtime="20170816 07:28:45.155"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 07:28:45.155" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170816 07:28:45.155" endtime="20170816 07:28:45.155"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 07:28:45.156" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170816 07:28:45.155" endtime="20170816 07:28:45.156"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 07:28:45.156" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170816 07:28:45.156" endtime="20170816 07:28:45.156"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 07:28:45.333" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170816 07:28:45.157" endtime="20170816 07:28:45.333"></status>
</kw>
<msg timestamp="20170816 07:28:45.333" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 07:28:45.333" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:28:45.157" endtime="20170816 07:28:45.333"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 07:28:45.334" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:28:45.334" endtime="20170816 07:28:45.334"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:28:45.335" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:28:45.335" endtime="20170816 07:28:45.335"></status>
</kw>
<status status="PASS" starttime="20170816 07:28:45.153" endtime="20170816 07:28:45.336"></status>
</kw>
<status status="PASS" starttime="20170816 07:28:45.153" endtime="20170816 07:28:45.336"></status>
</kw>
<status status="PASS" starttime="20170816 07:28:45.152" endtime="20170816 07:28:45.336"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 07:28:45.337" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" starttime="20170816 07:28:45.336" endtime="20170816 07:28:45.337"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:28:45.340" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:28:45.339" endtime="20170816 07:28:45.340"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:28:45.342" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:28:45.341" endtime="20170816 07:28:45.342"></status>
</kw>
<status status="PASS" starttime="20170816 07:28:45.341" endtime="20170816 07:28:45.342"></status>
</kw>
<status status="PASS" starttime="20170816 07:28:45.338" endtime="20170816 07:28:45.342"></status>
</kw>
<status status="PASS" starttime="20170816 07:28:45.337" endtime="20170816 07:28:45.342"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 07:28:45.430" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170816 07:28:45.430" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:28:45.342" endtime="20170816 07:28:45.430"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:28:45.432" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:28:45.431" endtime="20170816 07:28:45.432"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:28:45.433" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:28:45.433" endtime="20170816 07:28:45.433"></status>
</kw>
<status status="PASS" starttime="20170816 07:28:45.432" endtime="20170816 07:28:45.433"></status>
</kw>
<status status="PASS" starttime="20170816 07:28:45.431" endtime="20170816 07:28:45.433"></status>
</kw>
<status status="PASS" starttime="20170816 07:28:45.431" endtime="20170816 07:28:45.433"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 07:28:45.434" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170816 07:28:45.434" endtime="20170816 07:28:45.434"></status>
</kw>
<msg timestamp="20170816 07:28:45.434" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:28:45.152" endtime="20170816 07:28:45.434"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:28:45.435" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:28:45.434" endtime="20170816 07:28:45.435"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 07:28:45.435" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 07:28:45.435" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 07:28:45.435" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170816 07:28:45.435" endtime="20170816 07:28:45.435"></status>
</kw>
<msg timestamp="20170816 07:28:45.436" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status status="PASS" starttime="20170816 07:28:45.151" endtime="20170816 07:28:45.436"></status>
</kw>
<msg timestamp="20170816 07:28:45.436" level="INFO">${host_state} = Quiesced</msg>
<status status="PASS" starttime="20170816 07:28:45.151" endtime="20170816 07:28:45.436"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170816 07:28:45.437" level="FAIL">Running != Quiesced</msg>
<status status="FAIL" starttime="20170816 07:28:45.436" endtime="20170816 07:28:45.437"></status>
</kw>
<status status="FAIL" starttime="20170816 07:28:44.878" endtime="20170816 07:28:45.437"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 07:28:55.442" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170816 07:28:55.442" endtime="20170816 07:28:55.443"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 07:28:55.443" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170816 07:28:55.443" endtime="20170816 07:28:55.443"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 07:28:55.447" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170816 07:28:55.443" endtime="20170816 07:28:55.447"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 07:28:55.448" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170816 07:28:55.447" endtime="20170816 07:28:55.448"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 07:28:55.663" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170816 07:28:55.449" endtime="20170816 07:28:55.663"></status>
</kw>
<msg timestamp="20170816 07:28:55.663" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 07:28:55.663" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:28:55.448" endtime="20170816 07:28:55.663"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 07:28:55.664" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:28:55.664" endtime="20170816 07:28:55.664"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:28:55.665" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:28:55.664" endtime="20170816 07:28:55.665"></status>
</kw>
<status status="PASS" starttime="20170816 07:28:55.441" endtime="20170816 07:28:55.665"></status>
</kw>
<status status="PASS" starttime="20170816 07:28:55.441" endtime="20170816 07:28:55.665"></status>
</kw>
<status status="PASS" starttime="20170816 07:28:55.440" endtime="20170816 07:28:55.665"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 07:28:55.666" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20170816 07:28:55.665" endtime="20170816 07:28:55.666"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:28:55.668" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:28:55.667" endtime="20170816 07:28:55.668"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:28:55.669" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:28:55.668" endtime="20170816 07:28:55.669"></status>
</kw>
<status status="PASS" starttime="20170816 07:28:55.668" endtime="20170816 07:28:55.669"></status>
</kw>
<status status="PASS" starttime="20170816 07:28:55.666" endtime="20170816 07:28:55.669"></status>
</kw>
<status status="PASS" starttime="20170816 07:28:55.666" endtime="20170816 07:28:55.669"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 07:28:55.741" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170816 07:28:55.741" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:28:55.669" endtime="20170816 07:28:55.741"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:28:55.743" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:28:55.742" endtime="20170816 07:28:55.743"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:28:55.744" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:28:55.744" endtime="20170816 07:28:55.744"></status>
</kw>
<status status="PASS" starttime="20170816 07:28:55.743" endtime="20170816 07:28:55.744"></status>
</kw>
<status status="PASS" starttime="20170816 07:28:55.742" endtime="20170816 07:28:55.744"></status>
</kw>
<status status="PASS" starttime="20170816 07:28:55.742" endtime="20170816 07:28:55.744"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 07:28:55.745" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170816 07:28:55.745" endtime="20170816 07:28:55.745"></status>
</kw>
<msg timestamp="20170816 07:28:55.745" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:28:55.440" endtime="20170816 07:28:55.745"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:28:55.746" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:28:55.745" endtime="20170816 07:28:55.746"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 07:28:55.746" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 07:28:55.746" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 07:28:55.746" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170816 07:28:55.746" endtime="20170816 07:28:55.746"></status>
</kw>
<msg timestamp="20170816 07:28:55.747" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" starttime="20170816 07:28:55.439" endtime="20170816 07:28:55.747"></status>
</kw>
<msg timestamp="20170816 07:28:55.747" level="INFO">${power_state} = On</msg>
<status status="PASS" starttime="20170816 07:28:55.439" endtime="20170816 07:28:55.747"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" starttime="20170816 07:28:55.747" endtime="20170816 07:28:55.748"></status>
</kw>
<status status="PASS" starttime="20170816 07:28:55.438" endtime="20170816 07:28:55.748"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 07:28:55.752" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170816 07:28:55.751" endtime="20170816 07:28:55.752"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 07:28:55.753" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170816 07:28:55.752" endtime="20170816 07:28:55.753"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 07:28:55.753" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170816 07:28:55.753" endtime="20170816 07:28:55.753"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 07:28:55.754" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170816 07:28:55.754" endtime="20170816 07:28:55.754"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 07:28:55.942" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170816 07:28:55.755" endtime="20170816 07:28:55.942"></status>
</kw>
<msg timestamp="20170816 07:28:55.942" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 07:28:55.942" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:28:55.754" endtime="20170816 07:28:55.942"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 07:28:55.943" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:28:55.943" endtime="20170816 07:28:55.943"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:28:55.944" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:28:55.943" endtime="20170816 07:28:55.944"></status>
</kw>
<status status="PASS" starttime="20170816 07:28:55.751" endtime="20170816 07:28:55.944"></status>
</kw>
<status status="PASS" starttime="20170816 07:28:55.750" endtime="20170816 07:28:55.944"></status>
</kw>
<status status="PASS" starttime="20170816 07:28:55.749" endtime="20170816 07:28:55.944"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 07:28:55.945" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" starttime="20170816 07:28:55.944" endtime="20170816 07:28:55.945"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:28:55.947" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:28:55.946" endtime="20170816 07:28:55.947"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:28:55.948" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:28:55.948" endtime="20170816 07:28:55.948"></status>
</kw>
<status status="PASS" starttime="20170816 07:28:55.947" endtime="20170816 07:28:55.948"></status>
</kw>
<status status="PASS" starttime="20170816 07:28:55.946" endtime="20170816 07:28:55.948"></status>
</kw>
<status status="PASS" starttime="20170816 07:28:55.945" endtime="20170816 07:28:55.948"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 07:28:56.044" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170816 07:28:56.044" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:28:55.948" endtime="20170816 07:28:56.044"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:28:56.046" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:28:56.046" endtime="20170816 07:28:56.046"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:28:56.047" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:28:56.047" endtime="20170816 07:28:56.047"></status>
</kw>
<status status="PASS" starttime="20170816 07:28:56.046" endtime="20170816 07:28:56.048"></status>
</kw>
<status status="PASS" starttime="20170816 07:28:56.045" endtime="20170816 07:28:56.048"></status>
</kw>
<status status="PASS" starttime="20170816 07:28:56.045" endtime="20170816 07:28:56.048"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 07:28:56.048" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170816 07:28:56.048" endtime="20170816 07:28:56.048"></status>
</kw>
<msg timestamp="20170816 07:28:56.048" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:28:55.749" endtime="20170816 07:28:56.048"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:28:56.049" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:28:56.049" endtime="20170816 07:28:56.049"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 07:28:56.050" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 07:28:56.050" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 07:28:56.050" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170816 07:28:56.049" endtime="20170816 07:28:56.050"></status>
</kw>
<msg timestamp="20170816 07:28:56.050" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status status="PASS" starttime="20170816 07:28:55.748" endtime="20170816 07:28:56.050"></status>
</kw>
<msg timestamp="20170816 07:28:56.051" level="INFO">${host_state} = Quiesced</msg>
<status status="PASS" starttime="20170816 07:28:55.748" endtime="20170816 07:28:56.051"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170816 07:28:56.051" level="FAIL">Running != Quiesced</msg>
<status status="FAIL" starttime="20170816 07:28:56.051" endtime="20170816 07:28:56.051"></status>
</kw>
<status status="FAIL" starttime="20170816 07:28:55.437" endtime="20170816 07:28:56.051"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 07:29:06.057" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170816 07:29:06.056" endtime="20170816 07:29:06.057"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 07:29:06.058" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170816 07:29:06.057" endtime="20170816 07:29:06.058"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 07:29:06.058" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170816 07:29:06.058" endtime="20170816 07:29:06.058"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 07:29:06.059" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170816 07:29:06.058" endtime="20170816 07:29:06.059"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 07:29:06.244" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170816 07:29:06.060" endtime="20170816 07:29:06.244"></status>
</kw>
<msg timestamp="20170816 07:29:06.244" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 07:29:06.244" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:29:06.059" endtime="20170816 07:29:06.244"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 07:29:06.245" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:29:06.244" endtime="20170816 07:29:06.245"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:29:06.245" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:29:06.245" endtime="20170816 07:29:06.245"></status>
</kw>
<status status="PASS" starttime="20170816 07:29:06.056" endtime="20170816 07:29:06.246"></status>
</kw>
<status status="PASS" starttime="20170816 07:29:06.055" endtime="20170816 07:29:06.246"></status>
</kw>
<status status="PASS" starttime="20170816 07:29:06.055" endtime="20170816 07:29:06.246"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 07:29:06.246" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20170816 07:29:06.246" endtime="20170816 07:29:06.246"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:29:06.249" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:29:06.248" endtime="20170816 07:29:06.249"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:29:06.249" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:29:06.249" endtime="20170816 07:29:06.250"></status>
</kw>
<status status="PASS" starttime="20170816 07:29:06.249" endtime="20170816 07:29:06.250"></status>
</kw>
<status status="PASS" starttime="20170816 07:29:06.247" endtime="20170816 07:29:06.250"></status>
</kw>
<status status="PASS" starttime="20170816 07:29:06.247" endtime="20170816 07:29:06.250"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 07:29:06.324" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170816 07:29:06.325" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:29:06.250" endtime="20170816 07:29:06.325"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:29:06.326" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:29:06.326" endtime="20170816 07:29:06.326"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:29:06.327" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:29:06.327" endtime="20170816 07:29:06.327"></status>
</kw>
<status status="PASS" starttime="20170816 07:29:06.327" endtime="20170816 07:29:06.328"></status>
</kw>
<status status="PASS" starttime="20170816 07:29:06.325" endtime="20170816 07:29:06.328"></status>
</kw>
<status status="PASS" starttime="20170816 07:29:06.325" endtime="20170816 07:29:06.328"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 07:29:06.328" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170816 07:29:06.328" endtime="20170816 07:29:06.328"></status>
</kw>
<msg timestamp="20170816 07:29:06.328" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:29:06.054" endtime="20170816 07:29:06.328"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:29:06.329" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:29:06.329" endtime="20170816 07:29:06.329"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 07:29:06.330" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 07:29:06.330" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 07:29:06.330" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170816 07:29:06.329" endtime="20170816 07:29:06.330"></status>
</kw>
<msg timestamp="20170816 07:29:06.330" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" starttime="20170816 07:29:06.053" endtime="20170816 07:29:06.330"></status>
</kw>
<msg timestamp="20170816 07:29:06.330" level="INFO">${power_state} = On</msg>
<status status="PASS" starttime="20170816 07:29:06.053" endtime="20170816 07:29:06.330"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" starttime="20170816 07:29:06.331" endtime="20170816 07:29:06.331"></status>
</kw>
<status status="PASS" starttime="20170816 07:29:06.053" endtime="20170816 07:29:06.331"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 07:29:06.335" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170816 07:29:06.334" endtime="20170816 07:29:06.335"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 07:29:06.336" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170816 07:29:06.336" endtime="20170816 07:29:06.336"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 07:29:06.337" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170816 07:29:06.336" endtime="20170816 07:29:06.337"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 07:29:06.337" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170816 07:29:06.337" endtime="20170816 07:29:06.337"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 07:29:06.515" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170816 07:29:06.338" endtime="20170816 07:29:06.515"></status>
</kw>
<msg timestamp="20170816 07:29:06.515" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 07:29:06.515" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:29:06.338" endtime="20170816 07:29:06.515"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 07:29:06.516" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:29:06.516" endtime="20170816 07:29:06.516"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:29:06.517" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:29:06.516" endtime="20170816 07:29:06.517"></status>
</kw>
<status status="PASS" starttime="20170816 07:29:06.334" endtime="20170816 07:29:06.517"></status>
</kw>
<status status="PASS" starttime="20170816 07:29:06.333" endtime="20170816 07:29:06.517"></status>
</kw>
<status status="PASS" starttime="20170816 07:29:06.333" endtime="20170816 07:29:06.517"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 07:29:06.518" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" starttime="20170816 07:29:06.517" endtime="20170816 07:29:06.518"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:29:06.520" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:29:06.519" endtime="20170816 07:29:06.520"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:29:06.521" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:29:06.520" endtime="20170816 07:29:06.521"></status>
</kw>
<status status="PASS" starttime="20170816 07:29:06.520" endtime="20170816 07:29:06.521"></status>
</kw>
<status status="PASS" starttime="20170816 07:29:06.518" endtime="20170816 07:29:06.521"></status>
</kw>
<status status="PASS" starttime="20170816 07:29:06.518" endtime="20170816 07:29:06.521"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 07:29:06.611" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170816 07:29:06.611" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:29:06.521" endtime="20170816 07:29:06.611"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:29:06.613" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:29:06.612" endtime="20170816 07:29:06.613"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:29:06.614" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:29:06.614" endtime="20170816 07:29:06.614"></status>
</kw>
<status status="PASS" starttime="20170816 07:29:06.613" endtime="20170816 07:29:06.614"></status>
</kw>
<status status="PASS" starttime="20170816 07:29:06.612" endtime="20170816 07:29:06.614"></status>
</kw>
<status status="PASS" starttime="20170816 07:29:06.611" endtime="20170816 07:29:06.614"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 07:29:06.615" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170816 07:29:06.615" endtime="20170816 07:29:06.615"></status>
</kw>
<msg timestamp="20170816 07:29:06.615" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:29:06.332" endtime="20170816 07:29:06.615"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:29:06.616" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:29:06.615" endtime="20170816 07:29:06.616"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 07:29:06.616" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 07:29:06.616" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 07:29:06.616" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170816 07:29:06.616" endtime="20170816 07:29:06.617"></status>
</kw>
<msg timestamp="20170816 07:29:06.617" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status status="PASS" starttime="20170816 07:29:06.332" endtime="20170816 07:29:06.617"></status>
</kw>
<msg timestamp="20170816 07:29:06.617" level="INFO">${host_state} = Quiesced</msg>
<status status="PASS" starttime="20170816 07:29:06.331" endtime="20170816 07:29:06.617"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170816 07:29:06.618" level="FAIL">Running != Quiesced</msg>
<status status="FAIL" starttime="20170816 07:29:06.617" endtime="20170816 07:29:06.618"></status>
</kw>
<status status="FAIL" starttime="20170816 07:29:06.052" endtime="20170816 07:29:06.618"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 07:29:16.624" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170816 07:29:16.623" endtime="20170816 07:29:16.624"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 07:29:16.625" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170816 07:29:16.625" endtime="20170816 07:29:16.625"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 07:29:16.625" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170816 07:29:16.625" endtime="20170816 07:29:16.625"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 07:29:16.626" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170816 07:29:16.626" endtime="20170816 07:29:16.626"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 07:29:16.867" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170816 07:29:16.627" endtime="20170816 07:29:16.867"></status>
</kw>
<msg timestamp="20170816 07:29:16.867" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 07:29:16.867" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:29:16.626" endtime="20170816 07:29:16.867"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 07:29:16.868" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:29:16.868" endtime="20170816 07:29:16.868"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:29:16.869" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:29:16.868" endtime="20170816 07:29:16.869"></status>
</kw>
<status status="PASS" starttime="20170816 07:29:16.623" endtime="20170816 07:29:16.869"></status>
</kw>
<status status="PASS" starttime="20170816 07:29:16.623" endtime="20170816 07:29:16.869"></status>
</kw>
<status status="PASS" starttime="20170816 07:29:16.622" endtime="20170816 07:29:16.869"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 07:29:16.870" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20170816 07:29:16.869" endtime="20170816 07:29:16.870"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:29:16.872" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:29:16.871" endtime="20170816 07:29:16.872"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:29:16.873" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:29:16.873" endtime="20170816 07:29:16.873"></status>
</kw>
<status status="PASS" starttime="20170816 07:29:16.872" endtime="20170816 07:29:16.874"></status>
</kw>
<status status="PASS" starttime="20170816 07:29:16.871" endtime="20170816 07:29:16.874"></status>
</kw>
<status status="PASS" starttime="20170816 07:29:16.870" endtime="20170816 07:29:16.874"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 07:29:16.947" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170816 07:29:16.948" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:29:16.874" endtime="20170816 07:29:16.948"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:29:16.949" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:29:16.949" endtime="20170816 07:29:16.950"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:29:16.950" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:29:16.950" endtime="20170816 07:29:16.951"></status>
</kw>
<status status="PASS" starttime="20170816 07:29:16.950" endtime="20170816 07:29:16.951"></status>
</kw>
<status status="PASS" starttime="20170816 07:29:16.949" endtime="20170816 07:29:16.951"></status>
</kw>
<status status="PASS" starttime="20170816 07:29:16.948" endtime="20170816 07:29:16.951"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 07:29:16.951" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170816 07:29:16.951" endtime="20170816 07:29:16.951"></status>
</kw>
<msg timestamp="20170816 07:29:16.952" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:29:16.621" endtime="20170816 07:29:16.952"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:29:16.952" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:29:16.952" endtime="20170816 07:29:16.952"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 07:29:16.953" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 07:29:16.953" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 07:29:16.953" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170816 07:29:16.952" endtime="20170816 07:29:16.953"></status>
</kw>
<msg timestamp="20170816 07:29:16.953" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" starttime="20170816 07:29:16.620" endtime="20170816 07:29:16.953"></status>
</kw>
<msg timestamp="20170816 07:29:16.954" level="INFO">${power_state} = On</msg>
<status status="PASS" starttime="20170816 07:29:16.620" endtime="20170816 07:29:16.954"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" starttime="20170816 07:29:16.954" endtime="20170816 07:29:16.954"></status>
</kw>
<status status="PASS" starttime="20170816 07:29:16.619" endtime="20170816 07:29:16.954"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 07:29:16.959" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170816 07:29:16.958" endtime="20170816 07:29:16.959"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 07:29:16.959" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170816 07:29:16.959" endtime="20170816 07:29:16.960"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 07:29:16.960" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170816 07:29:16.960" endtime="20170816 07:29:16.960"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 07:29:16.961" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170816 07:29:16.960" endtime="20170816 07:29:16.961"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 07:29:17.161" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170816 07:29:16.962" endtime="20170816 07:29:17.161"></status>
</kw>
<msg timestamp="20170816 07:29:17.161" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 07:29:17.161" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:29:16.961" endtime="20170816 07:29:17.161"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 07:29:17.162" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:29:17.162" endtime="20170816 07:29:17.162"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:29:17.163" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:29:17.162" endtime="20170816 07:29:17.163"></status>
</kw>
<status status="PASS" starttime="20170816 07:29:16.958" endtime="20170816 07:29:17.163"></status>
</kw>
<status status="PASS" starttime="20170816 07:29:16.957" endtime="20170816 07:29:17.163"></status>
</kw>
<status status="PASS" starttime="20170816 07:29:16.956" endtime="20170816 07:29:17.163"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 07:29:17.164" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" starttime="20170816 07:29:17.163" endtime="20170816 07:29:17.164"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:29:17.166" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:29:17.165" endtime="20170816 07:29:17.166"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:29:17.167" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:29:17.166" endtime="20170816 07:29:17.167"></status>
</kw>
<status status="PASS" starttime="20170816 07:29:17.166" endtime="20170816 07:29:17.167"></status>
</kw>
<status status="PASS" starttime="20170816 07:29:17.164" endtime="20170816 07:29:17.167"></status>
</kw>
<status status="PASS" starttime="20170816 07:29:17.164" endtime="20170816 07:29:17.167"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 07:29:17.257" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170816 07:29:17.258" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:29:17.167" endtime="20170816 07:29:17.258"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:29:17.260" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:29:17.259" endtime="20170816 07:29:17.260"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:29:17.261" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:29:17.261" endtime="20170816 07:29:17.261"></status>
</kw>
<status status="PASS" starttime="20170816 07:29:17.260" endtime="20170816 07:29:17.261"></status>
</kw>
<status status="PASS" starttime="20170816 07:29:17.259" endtime="20170816 07:29:17.261"></status>
</kw>
<status status="PASS" starttime="20170816 07:29:17.258" endtime="20170816 07:29:17.262"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 07:29:17.262" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170816 07:29:17.262" endtime="20170816 07:29:17.262"></status>
</kw>
<msg timestamp="20170816 07:29:17.262" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:29:16.955" endtime="20170816 07:29:17.262"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:29:17.263" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:29:17.262" endtime="20170816 07:29:17.263"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 07:29:17.263" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 07:29:17.263" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 07:29:17.264" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170816 07:29:17.263" endtime="20170816 07:29:17.264"></status>
</kw>
<msg timestamp="20170816 07:29:17.264" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status status="PASS" starttime="20170816 07:29:16.955" endtime="20170816 07:29:17.264"></status>
</kw>
<msg timestamp="20170816 07:29:17.264" level="INFO">${host_state} = Quiesced</msg>
<status status="PASS" starttime="20170816 07:29:16.954" endtime="20170816 07:29:17.264"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170816 07:29:17.265" level="FAIL">Running != Quiesced</msg>
<status status="FAIL" starttime="20170816 07:29:17.264" endtime="20170816 07:29:17.265"></status>
</kw>
<status status="FAIL" starttime="20170816 07:29:16.619" endtime="20170816 07:29:17.265"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 07:29:27.271" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170816 07:29:27.270" endtime="20170816 07:29:27.271"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 07:29:27.272" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170816 07:29:27.271" endtime="20170816 07:29:27.272"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 07:29:27.272" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170816 07:29:27.272" endtime="20170816 07:29:27.272"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 07:29:27.273" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170816 07:29:27.273" endtime="20170816 07:29:27.273"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 07:29:27.513" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170816 07:29:27.274" endtime="20170816 07:29:27.513"></status>
</kw>
<msg timestamp="20170816 07:29:27.514" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 07:29:27.514" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:29:27.274" endtime="20170816 07:29:27.514"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 07:29:27.515" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:29:27.514" endtime="20170816 07:29:27.515"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:29:27.515" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:29:27.515" endtime="20170816 07:29:27.515"></status>
</kw>
<status status="PASS" starttime="20170816 07:29:27.269" endtime="20170816 07:29:27.516"></status>
</kw>
<status status="PASS" starttime="20170816 07:29:27.269" endtime="20170816 07:29:27.516"></status>
</kw>
<status status="PASS" starttime="20170816 07:29:27.268" endtime="20170816 07:29:27.516"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 07:29:27.516" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20170816 07:29:27.516" endtime="20170816 07:29:27.516"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:29:27.518" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:29:27.518" endtime="20170816 07:29:27.518"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:29:27.519" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:29:27.519" endtime="20170816 07:29:27.519"></status>
</kw>
<status status="PASS" starttime="20170816 07:29:27.519" endtime="20170816 07:29:27.520"></status>
</kw>
<status status="PASS" starttime="20170816 07:29:27.517" endtime="20170816 07:29:27.520"></status>
</kw>
<status status="PASS" starttime="20170816 07:29:27.517" endtime="20170816 07:29:27.520"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 07:29:27.661" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170816 07:29:27.662" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:29:27.520" endtime="20170816 07:29:27.662"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:29:27.663" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:29:27.663" endtime="20170816 07:29:27.663"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:29:27.665" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:29:27.665" endtime="20170816 07:29:27.665"></status>
</kw>
<status status="PASS" starttime="20170816 07:29:27.664" endtime="20170816 07:29:27.665"></status>
</kw>
<status status="PASS" starttime="20170816 07:29:27.662" endtime="20170816 07:29:27.665"></status>
</kw>
<status status="PASS" starttime="20170816 07:29:27.662" endtime="20170816 07:29:27.665"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 07:29:27.666" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170816 07:29:27.665" endtime="20170816 07:29:27.666"></status>
</kw>
<msg timestamp="20170816 07:29:27.666" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:29:27.268" endtime="20170816 07:29:27.666"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:29:27.667" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:29:27.666" endtime="20170816 07:29:27.667"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 07:29:27.667" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 07:29:27.667" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 07:29:27.667" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170816 07:29:27.667" endtime="20170816 07:29:27.667"></status>
</kw>
<msg timestamp="20170816 07:29:27.668" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" starttime="20170816 07:29:27.267" endtime="20170816 07:29:27.668"></status>
</kw>
<msg timestamp="20170816 07:29:27.668" level="INFO">${power_state} = On</msg>
<status status="PASS" starttime="20170816 07:29:27.267" endtime="20170816 07:29:27.668"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" starttime="20170816 07:29:27.668" endtime="20170816 07:29:27.669"></status>
</kw>
<status status="PASS" starttime="20170816 07:29:27.266" endtime="20170816 07:29:27.669"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 07:29:27.672" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170816 07:29:27.672" endtime="20170816 07:29:27.673"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 07:29:27.673" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170816 07:29:27.673" endtime="20170816 07:29:27.673"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 07:29:27.674" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170816 07:29:27.674" endtime="20170816 07:29:27.674"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 07:29:27.675" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170816 07:29:27.674" endtime="20170816 07:29:27.675"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 07:29:27.869" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170816 07:29:27.675" endtime="20170816 07:29:27.870"></status>
</kw>
<msg timestamp="20170816 07:29:27.870" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 07:29:27.870" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:29:27.675" endtime="20170816 07:29:27.870"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 07:29:27.871" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:29:27.870" endtime="20170816 07:29:27.871"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:29:27.871" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:29:27.871" endtime="20170816 07:29:27.871"></status>
</kw>
<status status="PASS" starttime="20170816 07:29:27.672" endtime="20170816 07:29:27.872"></status>
</kw>
<status status="PASS" starttime="20170816 07:29:27.671" endtime="20170816 07:29:27.872"></status>
</kw>
<status status="PASS" starttime="20170816 07:29:27.670" endtime="20170816 07:29:27.872"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 07:29:27.872" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" starttime="20170816 07:29:27.872" endtime="20170816 07:29:27.872"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:29:27.875" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:29:27.874" endtime="20170816 07:29:27.875"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:29:27.876" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:29:27.876" endtime="20170816 07:29:27.876"></status>
</kw>
<status status="PASS" starttime="20170816 07:29:27.875" endtime="20170816 07:29:27.876"></status>
</kw>
<status status="PASS" starttime="20170816 07:29:27.873" endtime="20170816 07:29:27.876"></status>
</kw>
<status status="PASS" starttime="20170816 07:29:27.873" endtime="20170816 07:29:27.876"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 07:29:27.994" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170816 07:29:27.995" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:29:27.877" endtime="20170816 07:29:27.995"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:29:27.997" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:29:27.996" endtime="20170816 07:29:27.997"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:29:27.998" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:29:27.998" endtime="20170816 07:29:27.998"></status>
</kw>
<status status="PASS" starttime="20170816 07:29:27.997" endtime="20170816 07:29:27.998"></status>
</kw>
<status status="PASS" starttime="20170816 07:29:27.996" endtime="20170816 07:29:27.998"></status>
</kw>
<status status="PASS" starttime="20170816 07:29:27.995" endtime="20170816 07:29:27.998"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 07:29:27.999" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170816 07:29:27.999" endtime="20170816 07:29:27.999"></status>
</kw>
<msg timestamp="20170816 07:29:27.999" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:29:27.670" endtime="20170816 07:29:27.999"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:29:28.000" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:29:27.999" endtime="20170816 07:29:28.000"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 07:29:28.001" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 07:29:28.001" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 07:29:28.001" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170816 07:29:28.001" endtime="20170816 07:29:28.002"></status>
</kw>
<msg timestamp="20170816 07:29:28.002" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status status="PASS" starttime="20170816 07:29:27.669" endtime="20170816 07:29:28.002"></status>
</kw>
<msg timestamp="20170816 07:29:28.002" level="INFO">${host_state} = Quiesced</msg>
<status status="PASS" starttime="20170816 07:29:27.669" endtime="20170816 07:29:28.002"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170816 07:29:28.003" level="FAIL">Running != Quiesced</msg>
<status status="FAIL" starttime="20170816 07:29:28.003" endtime="20170816 07:29:28.003"></status>
</kw>
<status status="FAIL" starttime="20170816 07:29:27.266" endtime="20170816 07:29:28.004"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 07:29:38.009" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170816 07:29:38.008" endtime="20170816 07:29:38.009"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 07:29:38.010" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170816 07:29:38.010" endtime="20170816 07:29:38.010"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 07:29:38.010" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170816 07:29:38.010" endtime="20170816 07:29:38.010"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 07:29:38.012" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170816 07:29:38.011" endtime="20170816 07:29:38.012"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 07:29:38.208" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170816 07:29:38.013" endtime="20170816 07:29:38.208"></status>
</kw>
<msg timestamp="20170816 07:29:38.208" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 07:29:38.209" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:29:38.012" endtime="20170816 07:29:38.209"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 07:29:38.209" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:29:38.209" endtime="20170816 07:29:38.209"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:29:38.210" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:29:38.210" endtime="20170816 07:29:38.210"></status>
</kw>
<status status="PASS" starttime="20170816 07:29:38.008" endtime="20170816 07:29:38.210"></status>
</kw>
<status status="PASS" starttime="20170816 07:29:38.008" endtime="20170816 07:29:38.210"></status>
</kw>
<status status="PASS" starttime="20170816 07:29:38.007" endtime="20170816 07:29:38.210"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 07:29:38.211" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20170816 07:29:38.211" endtime="20170816 07:29:38.211"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:29:38.213" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:29:38.213" endtime="20170816 07:29:38.213"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:29:38.214" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:29:38.214" endtime="20170816 07:29:38.214"></status>
</kw>
<status status="PASS" starttime="20170816 07:29:38.213" endtime="20170816 07:29:38.214"></status>
</kw>
<status status="PASS" starttime="20170816 07:29:38.212" endtime="20170816 07:29:38.214"></status>
</kw>
<status status="PASS" starttime="20170816 07:29:38.211" endtime="20170816 07:29:38.215"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 07:29:38.277" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170816 07:29:38.277" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:29:38.215" endtime="20170816 07:29:38.277"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:29:38.279" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:29:38.278" endtime="20170816 07:29:38.279"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:29:38.279" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:29:38.279" endtime="20170816 07:29:38.280"></status>
</kw>
<status status="PASS" starttime="20170816 07:29:38.279" endtime="20170816 07:29:38.280"></status>
</kw>
<status status="PASS" starttime="20170816 07:29:38.278" endtime="20170816 07:29:38.280"></status>
</kw>
<status status="PASS" starttime="20170816 07:29:38.277" endtime="20170816 07:29:38.280"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 07:29:38.280" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170816 07:29:38.280" endtime="20170816 07:29:38.280"></status>
</kw>
<msg timestamp="20170816 07:29:38.281" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:29:38.006" endtime="20170816 07:29:38.281"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:29:38.281" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:29:38.281" endtime="20170816 07:29:38.281"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 07:29:38.282" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 07:29:38.282" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 07:29:38.282" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170816 07:29:38.282" endtime="20170816 07:29:38.282"></status>
</kw>
<msg timestamp="20170816 07:29:38.282" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" starttime="20170816 07:29:38.006" endtime="20170816 07:29:38.282"></status>
</kw>
<msg timestamp="20170816 07:29:38.283" level="INFO">${power_state} = On</msg>
<status status="PASS" starttime="20170816 07:29:38.005" endtime="20170816 07:29:38.283"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" starttime="20170816 07:29:38.283" endtime="20170816 07:29:38.283"></status>
</kw>
<status status="PASS" starttime="20170816 07:29:38.005" endtime="20170816 07:29:38.283"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 07:29:38.291" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170816 07:29:38.290" endtime="20170816 07:29:38.291"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 07:29:38.292" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170816 07:29:38.292" endtime="20170816 07:29:38.292"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 07:29:38.293" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170816 07:29:38.293" endtime="20170816 07:29:38.293"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 07:29:38.294" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170816 07:29:38.294" endtime="20170816 07:29:38.294"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 07:29:38.545" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170816 07:29:38.295" endtime="20170816 07:29:38.545"></status>
</kw>
<msg timestamp="20170816 07:29:38.545" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 07:29:38.545" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:29:38.295" endtime="20170816 07:29:38.545"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 07:29:38.546" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:29:38.545" endtime="20170816 07:29:38.546"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:29:38.546" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:29:38.546" endtime="20170816 07:29:38.546"></status>
</kw>
<status status="PASS" starttime="20170816 07:29:38.289" endtime="20170816 07:29:38.547"></status>
</kw>
<status status="PASS" starttime="20170816 07:29:38.286" endtime="20170816 07:29:38.547"></status>
</kw>
<status status="PASS" starttime="20170816 07:29:38.285" endtime="20170816 07:29:38.547"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 07:29:38.547" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" starttime="20170816 07:29:38.547" endtime="20170816 07:29:38.547"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:29:38.549" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:29:38.549" endtime="20170816 07:29:38.549"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:29:38.550" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:29:38.550" endtime="20170816 07:29:38.551"></status>
</kw>
<status status="PASS" starttime="20170816 07:29:38.550" endtime="20170816 07:29:38.551"></status>
</kw>
<status status="PASS" starttime="20170816 07:29:38.548" endtime="20170816 07:29:38.551"></status>
</kw>
<status status="PASS" starttime="20170816 07:29:38.548" endtime="20170816 07:29:38.551"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 07:29:38.685" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170816 07:29:38.686" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:29:38.551" endtime="20170816 07:29:38.686"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:29:38.687" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:29:38.687" endtime="20170816 07:29:38.687"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:29:38.689" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:29:38.688" endtime="20170816 07:29:38.689"></status>
</kw>
<status status="PASS" starttime="20170816 07:29:38.688" endtime="20170816 07:29:38.689"></status>
</kw>
<status status="PASS" starttime="20170816 07:29:38.686" endtime="20170816 07:29:38.689"></status>
</kw>
<status status="PASS" starttime="20170816 07:29:38.686" endtime="20170816 07:29:38.689"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 07:29:38.689" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170816 07:29:38.689" endtime="20170816 07:29:38.689"></status>
</kw>
<msg timestamp="20170816 07:29:38.690" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:29:38.284" endtime="20170816 07:29:38.690"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:29:38.690" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:29:38.690" endtime="20170816 07:29:38.690"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 07:29:38.691" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 07:29:38.691" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 07:29:38.691" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170816 07:29:38.691" endtime="20170816 07:29:38.691"></status>
</kw>
<msg timestamp="20170816 07:29:38.691" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status status="PASS" starttime="20170816 07:29:38.284" endtime="20170816 07:29:38.692"></status>
</kw>
<msg timestamp="20170816 07:29:38.692" level="INFO">${host_state} = Quiesced</msg>
<status status="PASS" starttime="20170816 07:29:38.284" endtime="20170816 07:29:38.692"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170816 07:29:38.692" level="FAIL">Running != Quiesced</msg>
<status status="FAIL" starttime="20170816 07:29:38.692" endtime="20170816 07:29:38.693"></status>
</kw>
<status status="FAIL" starttime="20170816 07:29:38.004" endtime="20170816 07:29:38.693"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 07:29:48.698" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170816 07:29:48.698" endtime="20170816 07:29:48.698"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 07:29:48.699" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170816 07:29:48.699" endtime="20170816 07:29:48.699"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 07:29:48.700" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170816 07:29:48.699" endtime="20170816 07:29:48.700"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 07:29:48.700" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170816 07:29:48.700" endtime="20170816 07:29:48.700"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 07:29:48.996" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170816 07:29:48.701" endtime="20170816 07:29:48.996"></status>
</kw>
<msg timestamp="20170816 07:29:48.996" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 07:29:48.996" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:29:48.701" endtime="20170816 07:29:48.996"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 07:29:48.997" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:29:48.996" endtime="20170816 07:29:48.997"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:29:48.998" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:29:48.997" endtime="20170816 07:29:48.998"></status>
</kw>
<status status="PASS" starttime="20170816 07:29:48.697" endtime="20170816 07:29:48.998"></status>
</kw>
<status status="PASS" starttime="20170816 07:29:48.697" endtime="20170816 07:29:48.998"></status>
</kw>
<status status="PASS" starttime="20170816 07:29:48.696" endtime="20170816 07:29:48.998"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 07:29:48.999" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20170816 07:29:48.998" endtime="20170816 07:29:48.999"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:29:49.001" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:29:49.000" endtime="20170816 07:29:49.001"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:29:49.002" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:29:49.002" endtime="20170816 07:29:49.002"></status>
</kw>
<status status="PASS" starttime="20170816 07:29:49.001" endtime="20170816 07:29:49.002"></status>
</kw>
<status status="PASS" starttime="20170816 07:29:48.999" endtime="20170816 07:29:49.002"></status>
</kw>
<status status="PASS" starttime="20170816 07:29:48.999" endtime="20170816 07:29:49.002"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 07:29:49.098" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170816 07:29:49.098" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:29:49.002" endtime="20170816 07:29:49.098"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:29:49.100" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:29:49.099" endtime="20170816 07:29:49.100"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:29:49.101" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:29:49.101" endtime="20170816 07:29:49.101"></status>
</kw>
<status status="PASS" starttime="20170816 07:29:49.100" endtime="20170816 07:29:49.101"></status>
</kw>
<status status="PASS" starttime="20170816 07:29:49.099" endtime="20170816 07:29:49.101"></status>
</kw>
<status status="PASS" starttime="20170816 07:29:49.098" endtime="20170816 07:29:49.101"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 07:29:49.102" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170816 07:29:49.102" endtime="20170816 07:29:49.102"></status>
</kw>
<msg timestamp="20170816 07:29:49.102" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:29:48.695" endtime="20170816 07:29:49.102"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:29:49.103" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:29:49.102" endtime="20170816 07:29:49.103"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 07:29:49.103" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 07:29:49.103" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 07:29:49.103" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170816 07:29:49.103" endtime="20170816 07:29:49.103"></status>
</kw>
<msg timestamp="20170816 07:29:49.104" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" starttime="20170816 07:29:48.695" endtime="20170816 07:29:49.104"></status>
</kw>
<msg timestamp="20170816 07:29:49.104" level="INFO">${power_state} = On</msg>
<status status="PASS" starttime="20170816 07:29:48.694" endtime="20170816 07:29:49.104"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" starttime="20170816 07:29:49.104" endtime="20170816 07:29:49.105"></status>
</kw>
<status status="PASS" starttime="20170816 07:29:48.694" endtime="20170816 07:29:49.105"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 07:29:49.108" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170816 07:29:49.108" endtime="20170816 07:29:49.109"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 07:29:49.110" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170816 07:29:49.109" endtime="20170816 07:29:49.110"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 07:29:49.110" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170816 07:29:49.110" endtime="20170816 07:29:49.110"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 07:29:49.111" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170816 07:29:49.110" endtime="20170816 07:29:49.111"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 07:29:49.330" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170816 07:29:49.112" endtime="20170816 07:29:49.330"></status>
</kw>
<msg timestamp="20170816 07:29:49.330" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 07:29:49.330" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:29:49.111" endtime="20170816 07:29:49.330"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 07:29:49.331" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:29:49.331" endtime="20170816 07:29:49.331"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:29:49.332" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:29:49.331" endtime="20170816 07:29:49.332"></status>
</kw>
<status status="PASS" starttime="20170816 07:29:49.107" endtime="20170816 07:29:49.332"></status>
</kw>
<status status="PASS" starttime="20170816 07:29:49.107" endtime="20170816 07:29:49.332"></status>
</kw>
<status status="PASS" starttime="20170816 07:29:49.106" endtime="20170816 07:29:49.332"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 07:29:49.333" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" starttime="20170816 07:29:49.333" endtime="20170816 07:29:49.333"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:29:49.335" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:29:49.335" endtime="20170816 07:29:49.335"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:29:49.336" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:29:49.336" endtime="20170816 07:29:49.336"></status>
</kw>
<status status="PASS" starttime="20170816 07:29:49.336" endtime="20170816 07:29:49.337"></status>
</kw>
<status status="PASS" starttime="20170816 07:29:49.334" endtime="20170816 07:29:49.337"></status>
</kw>
<status status="PASS" starttime="20170816 07:29:49.333" endtime="20170816 07:29:49.337"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 07:29:49.472" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170816 07:29:49.472" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:29:49.337" endtime="20170816 07:29:49.472"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:29:49.474" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:29:49.473" endtime="20170816 07:29:49.474"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:29:49.474" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:29:49.474" endtime="20170816 07:29:49.475"></status>
</kw>
<status status="PASS" starttime="20170816 07:29:49.474" endtime="20170816 07:29:49.475"></status>
</kw>
<status status="PASS" starttime="20170816 07:29:49.473" endtime="20170816 07:29:49.475"></status>
</kw>
<status status="PASS" starttime="20170816 07:29:49.472" endtime="20170816 07:29:49.475"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 07:29:49.475" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170816 07:29:49.475" endtime="20170816 07:29:49.475"></status>
</kw>
<msg timestamp="20170816 07:29:49.476" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:29:49.106" endtime="20170816 07:29:49.476"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:29:49.476" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:29:49.476" endtime="20170816 07:29:49.476"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 07:29:49.477" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 07:29:49.477" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 07:29:49.477" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170816 07:29:49.476" endtime="20170816 07:29:49.477"></status>
</kw>
<msg timestamp="20170816 07:29:49.477" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status status="PASS" starttime="20170816 07:29:49.105" endtime="20170816 07:29:49.477"></status>
</kw>
<msg timestamp="20170816 07:29:49.478" level="INFO">${host_state} = Quiesced</msg>
<status status="PASS" starttime="20170816 07:29:49.105" endtime="20170816 07:29:49.478"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170816 07:29:49.478" level="FAIL">Running != Quiesced</msg>
<status status="FAIL" starttime="20170816 07:29:49.478" endtime="20170816 07:29:49.478"></status>
</kw>
<status status="FAIL" starttime="20170816 07:29:48.693" endtime="20170816 07:29:49.478"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 07:29:59.484" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170816 07:29:59.484" endtime="20170816 07:29:59.485"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 07:29:59.485" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170816 07:29:59.485" endtime="20170816 07:29:59.485"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 07:29:59.486" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170816 07:29:59.485" endtime="20170816 07:29:59.486"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 07:29:59.486" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170816 07:29:59.486" endtime="20170816 07:29:59.487"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 07:29:59.699" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170816 07:29:59.487" endtime="20170816 07:29:59.699"></status>
</kw>
<msg timestamp="20170816 07:29:59.699" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 07:29:59.699" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:29:59.487" endtime="20170816 07:29:59.699"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 07:29:59.700" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:29:59.700" endtime="20170816 07:29:59.700"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:29:59.701" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:29:59.701" endtime="20170816 07:29:59.701"></status>
</kw>
<status status="PASS" starttime="20170816 07:29:59.483" endtime="20170816 07:29:59.701"></status>
</kw>
<status status="PASS" starttime="20170816 07:29:59.483" endtime="20170816 07:29:59.701"></status>
</kw>
<status status="PASS" starttime="20170816 07:29:59.482" endtime="20170816 07:29:59.701"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 07:29:59.702" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20170816 07:29:59.702" endtime="20170816 07:29:59.702"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:29:59.704" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:29:59.703" endtime="20170816 07:29:59.704"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:29:59.705" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:29:59.705" endtime="20170816 07:29:59.705"></status>
</kw>
<status status="PASS" starttime="20170816 07:29:59.704" endtime="20170816 07:29:59.706"></status>
</kw>
<status status="PASS" starttime="20170816 07:29:59.703" endtime="20170816 07:29:59.706"></status>
</kw>
<status status="PASS" starttime="20170816 07:29:59.702" endtime="20170816 07:29:59.706"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 07:29:59.768" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170816 07:29:59.768" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:29:59.706" endtime="20170816 07:29:59.768"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:29:59.770" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:29:59.770" endtime="20170816 07:29:59.770"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:29:59.771" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:29:59.771" endtime="20170816 07:29:59.771"></status>
</kw>
<status status="PASS" starttime="20170816 07:29:59.770" endtime="20170816 07:29:59.771"></status>
</kw>
<status status="PASS" starttime="20170816 07:29:59.769" endtime="20170816 07:29:59.772"></status>
</kw>
<status status="PASS" starttime="20170816 07:29:59.769" endtime="20170816 07:29:59.772"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 07:29:59.772" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170816 07:29:59.772" endtime="20170816 07:29:59.772"></status>
</kw>
<msg timestamp="20170816 07:29:59.772" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:29:59.482" endtime="20170816 07:29:59.772"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:29:59.773" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:29:59.773" endtime="20170816 07:29:59.773"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 07:29:59.774" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 07:29:59.774" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 07:29:59.774" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170816 07:29:59.773" endtime="20170816 07:29:59.774"></status>
</kw>
<msg timestamp="20170816 07:29:59.774" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" starttime="20170816 07:29:59.480" endtime="20170816 07:29:59.774"></status>
</kw>
<msg timestamp="20170816 07:29:59.774" level="INFO">${power_state} = On</msg>
<status status="PASS" starttime="20170816 07:29:59.480" endtime="20170816 07:29:59.774"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" starttime="20170816 07:29:59.775" endtime="20170816 07:29:59.775"></status>
</kw>
<status status="PASS" starttime="20170816 07:29:59.480" endtime="20170816 07:29:59.775"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 07:29:59.779" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170816 07:29:59.778" endtime="20170816 07:29:59.779"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 07:29:59.780" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170816 07:29:59.779" endtime="20170816 07:29:59.780"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 07:29:59.780" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170816 07:29:59.780" endtime="20170816 07:29:59.780"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 07:29:59.781" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170816 07:29:59.780" endtime="20170816 07:29:59.781"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 07:29:59.988" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170816 07:29:59.782" endtime="20170816 07:29:59.988"></status>
</kw>
<msg timestamp="20170816 07:29:59.988" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 07:29:59.988" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:29:59.781" endtime="20170816 07:29:59.989"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 07:29:59.989" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:29:59.989" endtime="20170816 07:29:59.989"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:29:59.990" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:29:59.990" endtime="20170816 07:29:59.990"></status>
</kw>
<status status="PASS" starttime="20170816 07:29:59.778" endtime="20170816 07:29:59.990"></status>
</kw>
<status status="PASS" starttime="20170816 07:29:59.777" endtime="20170816 07:29:59.990"></status>
</kw>
<status status="PASS" starttime="20170816 07:29:59.777" endtime="20170816 07:29:59.990"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 07:29:59.991" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" starttime="20170816 07:29:59.991" endtime="20170816 07:29:59.991"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:29:59.993" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:29:59.992" endtime="20170816 07:29:59.993"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:29:59.994" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:29:59.994" endtime="20170816 07:29:59.994"></status>
</kw>
<status status="PASS" starttime="20170816 07:29:59.993" endtime="20170816 07:29:59.994"></status>
</kw>
<status status="PASS" starttime="20170816 07:29:59.992" endtime="20170816 07:29:59.994"></status>
</kw>
<status status="PASS" starttime="20170816 07:29:59.991" endtime="20170816 07:29:59.994"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 07:30:00.097" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170816 07:30:00.097" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:29:59.995" endtime="20170816 07:30:00.097"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:30:00.099" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:30:00.099" endtime="20170816 07:30:00.099"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:30:00.100" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:30:00.100" endtime="20170816 07:30:00.100"></status>
</kw>
<status status="PASS" starttime="20170816 07:30:00.099" endtime="20170816 07:30:00.100"></status>
</kw>
<status status="PASS" starttime="20170816 07:30:00.098" endtime="20170816 07:30:00.100"></status>
</kw>
<status status="PASS" starttime="20170816 07:30:00.098" endtime="20170816 07:30:00.101"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 07:30:00.101" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170816 07:30:00.101" endtime="20170816 07:30:00.101"></status>
</kw>
<msg timestamp="20170816 07:30:00.101" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:29:59.776" endtime="20170816 07:30:00.101"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:30:00.102" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:30:00.102" endtime="20170816 07:30:00.102"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 07:30:00.102" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 07:30:00.102" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 07:30:00.103" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170816 07:30:00.102" endtime="20170816 07:30:00.103"></status>
</kw>
<msg timestamp="20170816 07:30:00.103" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status status="PASS" starttime="20170816 07:29:59.776" endtime="20170816 07:30:00.103"></status>
</kw>
<msg timestamp="20170816 07:30:00.103" level="INFO">${host_state} = Quiesced</msg>
<status status="PASS" starttime="20170816 07:29:59.775" endtime="20170816 07:30:00.103"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170816 07:30:00.104" level="FAIL">Running != Quiesced</msg>
<status status="FAIL" starttime="20170816 07:30:00.104" endtime="20170816 07:30:00.104"></status>
</kw>
<status status="FAIL" starttime="20170816 07:29:59.479" endtime="20170816 07:30:00.104"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 07:30:10.110" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170816 07:30:10.109" endtime="20170816 07:30:10.110"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 07:30:10.111" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170816 07:30:10.110" endtime="20170816 07:30:10.111"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 07:30:10.111" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170816 07:30:10.111" endtime="20170816 07:30:10.111"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 07:30:10.112" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170816 07:30:10.112" endtime="20170816 07:30:10.112"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 07:30:10.360" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170816 07:30:10.113" endtime="20170816 07:30:10.360"></status>
</kw>
<msg timestamp="20170816 07:30:10.360" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 07:30:10.360" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:30:10.112" endtime="20170816 07:30:10.360"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 07:30:10.361" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:30:10.361" endtime="20170816 07:30:10.361"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:30:10.362" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:30:10.361" endtime="20170816 07:30:10.362"></status>
</kw>
<status status="PASS" starttime="20170816 07:30:10.108" endtime="20170816 07:30:10.362"></status>
</kw>
<status status="PASS" starttime="20170816 07:30:10.108" endtime="20170816 07:30:10.362"></status>
</kw>
<status status="PASS" starttime="20170816 07:30:10.107" endtime="20170816 07:30:10.362"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 07:30:10.363" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20170816 07:30:10.363" endtime="20170816 07:30:10.363"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:30:10.366" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:30:10.365" endtime="20170816 07:30:10.366"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:30:10.368" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:30:10.367" endtime="20170816 07:30:10.368"></status>
</kw>
<status status="PASS" starttime="20170816 07:30:10.367" endtime="20170816 07:30:10.368"></status>
</kw>
<status status="PASS" starttime="20170816 07:30:10.364" endtime="20170816 07:30:10.368"></status>
</kw>
<status status="PASS" starttime="20170816 07:30:10.364" endtime="20170816 07:30:10.368"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 07:30:10.448" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170816 07:30:10.448" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:30:10.368" endtime="20170816 07:30:10.448"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:30:10.450" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:30:10.449" endtime="20170816 07:30:10.450"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:30:10.451" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:30:10.451" endtime="20170816 07:30:10.451"></status>
</kw>
<status status="PASS" starttime="20170816 07:30:10.450" endtime="20170816 07:30:10.451"></status>
</kw>
<status status="PASS" starttime="20170816 07:30:10.449" endtime="20170816 07:30:10.451"></status>
</kw>
<status status="PASS" starttime="20170816 07:30:10.448" endtime="20170816 07:30:10.451"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 07:30:10.452" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170816 07:30:10.452" endtime="20170816 07:30:10.452"></status>
</kw>
<msg timestamp="20170816 07:30:10.452" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:30:10.107" endtime="20170816 07:30:10.452"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:30:10.453" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:30:10.453" endtime="20170816 07:30:10.453"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 07:30:10.453" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 07:30:10.453" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 07:30:10.454" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170816 07:30:10.453" endtime="20170816 07:30:10.454"></status>
</kw>
<msg timestamp="20170816 07:30:10.454" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" starttime="20170816 07:30:10.106" endtime="20170816 07:30:10.454"></status>
</kw>
<msg timestamp="20170816 07:30:10.454" level="INFO">${power_state} = On</msg>
<status status="PASS" starttime="20170816 07:30:10.106" endtime="20170816 07:30:10.454"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" starttime="20170816 07:30:10.455" endtime="20170816 07:30:10.455"></status>
</kw>
<status status="PASS" starttime="20170816 07:30:10.105" endtime="20170816 07:30:10.455"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 07:30:10.458" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170816 07:30:10.458" endtime="20170816 07:30:10.459"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 07:30:10.459" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170816 07:30:10.459" endtime="20170816 07:30:10.459"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 07:30:10.460" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170816 07:30:10.460" endtime="20170816 07:30:10.460"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 07:30:10.461" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170816 07:30:10.460" endtime="20170816 07:30:10.461"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 07:30:10.638" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170816 07:30:10.461" endtime="20170816 07:30:10.638"></status>
</kw>
<msg timestamp="20170816 07:30:10.638" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 07:30:10.638" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:30:10.461" endtime="20170816 07:30:10.638"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 07:30:10.639" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:30:10.639" endtime="20170816 07:30:10.639"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:30:10.640" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:30:10.639" endtime="20170816 07:30:10.640"></status>
</kw>
<status status="PASS" starttime="20170816 07:30:10.458" endtime="20170816 07:30:10.640"></status>
</kw>
<status status="PASS" starttime="20170816 07:30:10.457" endtime="20170816 07:30:10.640"></status>
</kw>
<status status="PASS" starttime="20170816 07:30:10.457" endtime="20170816 07:30:10.640"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 07:30:10.641" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" starttime="20170816 07:30:10.640" endtime="20170816 07:30:10.641"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:30:10.644" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:30:10.642" endtime="20170816 07:30:10.644"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:30:10.645" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:30:10.645" endtime="20170816 07:30:10.645"></status>
</kw>
<status status="PASS" starttime="20170816 07:30:10.644" endtime="20170816 07:30:10.645"></status>
</kw>
<status status="PASS" starttime="20170816 07:30:10.641" endtime="20170816 07:30:10.645"></status>
</kw>
<status status="PASS" starttime="20170816 07:30:10.641" endtime="20170816 07:30:10.645"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 07:30:10.745" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170816 07:30:10.745" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:30:10.645" endtime="20170816 07:30:10.745"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:30:10.747" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:30:10.746" endtime="20170816 07:30:10.747"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:30:10.748" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:30:10.748" endtime="20170816 07:30:10.748"></status>
</kw>
<status status="PASS" starttime="20170816 07:30:10.747" endtime="20170816 07:30:10.748"></status>
</kw>
<status status="PASS" starttime="20170816 07:30:10.746" endtime="20170816 07:30:10.748"></status>
</kw>
<status status="PASS" starttime="20170816 07:30:10.746" endtime="20170816 07:30:10.748"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 07:30:10.749" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170816 07:30:10.749" endtime="20170816 07:30:10.749"></status>
</kw>
<msg timestamp="20170816 07:30:10.749" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:30:10.456" endtime="20170816 07:30:10.749"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:30:10.750" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:30:10.749" endtime="20170816 07:30:10.750"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 07:30:10.750" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 07:30:10.750" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 07:30:10.750" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170816 07:30:10.750" endtime="20170816 07:30:10.750"></status>
</kw>
<msg timestamp="20170816 07:30:10.751" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status status="PASS" starttime="20170816 07:30:10.455" endtime="20170816 07:30:10.751"></status>
</kw>
<msg timestamp="20170816 07:30:10.751" level="INFO">${host_state} = Quiesced</msg>
<status status="PASS" starttime="20170816 07:30:10.455" endtime="20170816 07:30:10.751"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170816 07:30:10.752" level="FAIL">Running != Quiesced</msg>
<status status="FAIL" starttime="20170816 07:30:10.751" endtime="20170816 07:30:10.752"></status>
</kw>
<status status="FAIL" starttime="20170816 07:30:10.105" endtime="20170816 07:30:10.752"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 07:30:20.757" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170816 07:30:20.757" endtime="20170816 07:30:20.758"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 07:30:20.758" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170816 07:30:20.758" endtime="20170816 07:30:20.758"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 07:30:20.759" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170816 07:30:20.759" endtime="20170816 07:30:20.759"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 07:30:20.761" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170816 07:30:20.760" endtime="20170816 07:30:20.761"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 07:30:21.036" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170816 07:30:20.762" endtime="20170816 07:30:21.036"></status>
</kw>
<msg timestamp="20170816 07:30:21.036" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 07:30:21.036" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:30:20.761" endtime="20170816 07:30:21.036"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 07:30:21.037" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:30:21.037" endtime="20170816 07:30:21.037"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:30:21.038" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:30:21.037" endtime="20170816 07:30:21.038"></status>
</kw>
<status status="PASS" starttime="20170816 07:30:20.756" endtime="20170816 07:30:21.038"></status>
</kw>
<status status="PASS" starttime="20170816 07:30:20.756" endtime="20170816 07:30:21.038"></status>
</kw>
<status status="PASS" starttime="20170816 07:30:20.755" endtime="20170816 07:30:21.038"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 07:30:21.039" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20170816 07:30:21.038" endtime="20170816 07:30:21.039"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:30:21.041" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:30:21.040" endtime="20170816 07:30:21.041"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:30:21.042" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:30:21.041" endtime="20170816 07:30:21.042"></status>
</kw>
<status status="PASS" starttime="20170816 07:30:21.041" endtime="20170816 07:30:21.042"></status>
</kw>
<status status="PASS" starttime="20170816 07:30:21.039" endtime="20170816 07:30:21.042"></status>
</kw>
<status status="PASS" starttime="20170816 07:30:21.039" endtime="20170816 07:30:21.042"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 07:30:21.141" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170816 07:30:21.141" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:30:21.043" endtime="20170816 07:30:21.141"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:30:21.143" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:30:21.142" endtime="20170816 07:30:21.143"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:30:21.144" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:30:21.144" endtime="20170816 07:30:21.144"></status>
</kw>
<status status="PASS" starttime="20170816 07:30:21.143" endtime="20170816 07:30:21.144"></status>
</kw>
<status status="PASS" starttime="20170816 07:30:21.142" endtime="20170816 07:30:21.144"></status>
</kw>
<status status="PASS" starttime="20170816 07:30:21.141" endtime="20170816 07:30:21.144"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 07:30:21.145" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170816 07:30:21.145" endtime="20170816 07:30:21.145"></status>
</kw>
<msg timestamp="20170816 07:30:21.145" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:30:20.755" endtime="20170816 07:30:21.145"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:30:21.146" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:30:21.145" endtime="20170816 07:30:21.146"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 07:30:21.146" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 07:30:21.146" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 07:30:21.146" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170816 07:30:21.146" endtime="20170816 07:30:21.146"></status>
</kw>
<msg timestamp="20170816 07:30:21.147" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" starttime="20170816 07:30:20.754" endtime="20170816 07:30:21.147"></status>
</kw>
<msg timestamp="20170816 07:30:21.147" level="INFO">${power_state} = On</msg>
<status status="PASS" starttime="20170816 07:30:20.754" endtime="20170816 07:30:21.147"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" starttime="20170816 07:30:21.147" endtime="20170816 07:30:21.148"></status>
</kw>
<status status="PASS" starttime="20170816 07:30:20.753" endtime="20170816 07:30:21.148"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 07:30:21.152" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170816 07:30:21.151" endtime="20170816 07:30:21.152"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 07:30:21.153" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170816 07:30:21.152" endtime="20170816 07:30:21.153"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 07:30:21.153" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170816 07:30:21.153" endtime="20170816 07:30:21.153"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 07:30:21.154" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170816 07:30:21.153" endtime="20170816 07:30:21.154"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 07:30:21.338" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170816 07:30:21.155" endtime="20170816 07:30:21.338"></status>
</kw>
<msg timestamp="20170816 07:30:21.338" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 07:30:21.338" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:30:21.154" endtime="20170816 07:30:21.338"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 07:30:21.339" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:30:21.339" endtime="20170816 07:30:21.339"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:30:21.340" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:30:21.339" endtime="20170816 07:30:21.340"></status>
</kw>
<status status="PASS" starttime="20170816 07:30:21.151" endtime="20170816 07:30:21.340"></status>
</kw>
<status status="PASS" starttime="20170816 07:30:21.150" endtime="20170816 07:30:21.340"></status>
</kw>
<status status="PASS" starttime="20170816 07:30:21.149" endtime="20170816 07:30:21.340"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 07:30:21.341" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" starttime="20170816 07:30:21.340" endtime="20170816 07:30:21.341"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:30:21.343" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:30:21.342" endtime="20170816 07:30:21.343"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:30:21.344" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:30:21.344" endtime="20170816 07:30:21.344"></status>
</kw>
<status status="PASS" starttime="20170816 07:30:21.343" endtime="20170816 07:30:21.344"></status>
</kw>
<status status="PASS" starttime="20170816 07:30:21.341" endtime="20170816 07:30:21.344"></status>
</kw>
<status status="PASS" starttime="20170816 07:30:21.341" endtime="20170816 07:30:21.344"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 07:30:21.433" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170816 07:30:21.433" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:30:21.344" endtime="20170816 07:30:21.433"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:30:21.438" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:30:21.434" endtime="20170816 07:30:21.438"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:30:21.439" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:30:21.438" endtime="20170816 07:30:21.439"></status>
</kw>
<status status="PASS" starttime="20170816 07:30:21.438" endtime="20170816 07:30:21.439"></status>
</kw>
<status status="PASS" starttime="20170816 07:30:21.434" endtime="20170816 07:30:21.439"></status>
</kw>
<status status="PASS" starttime="20170816 07:30:21.433" endtime="20170816 07:30:21.439"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 07:30:21.439" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170816 07:30:21.439" endtime="20170816 07:30:21.440"></status>
</kw>
<msg timestamp="20170816 07:30:21.440" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:30:21.149" endtime="20170816 07:30:21.440"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:30:21.440" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:30:21.440" endtime="20170816 07:30:21.441"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 07:30:21.441" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 07:30:21.441" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 07:30:21.442" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170816 07:30:21.441" endtime="20170816 07:30:21.442"></status>
</kw>
<msg timestamp="20170816 07:30:21.442" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status status="PASS" starttime="20170816 07:30:21.148" endtime="20170816 07:30:21.442"></status>
</kw>
<msg timestamp="20170816 07:30:21.442" level="INFO">${host_state} = Quiesced</msg>
<status status="PASS" starttime="20170816 07:30:21.148" endtime="20170816 07:30:21.442"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170816 07:30:21.443" level="FAIL">Running != Quiesced</msg>
<status status="FAIL" starttime="20170816 07:30:21.443" endtime="20170816 07:30:21.443"></status>
</kw>
<status status="FAIL" starttime="20170816 07:30:20.753" endtime="20170816 07:30:21.443"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 07:30:31.448" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170816 07:30:31.448" endtime="20170816 07:30:31.449"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 07:30:31.449" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170816 07:30:31.449" endtime="20170816 07:30:31.449"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 07:30:31.450" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170816 07:30:31.449" endtime="20170816 07:30:31.450"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 07:30:31.450" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170816 07:30:31.450" endtime="20170816 07:30:31.451"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 07:30:31.642" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170816 07:30:31.451" endtime="20170816 07:30:31.642"></status>
</kw>
<msg timestamp="20170816 07:30:31.642" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 07:30:31.642" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:30:31.451" endtime="20170816 07:30:31.642"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 07:30:31.643" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:30:31.642" endtime="20170816 07:30:31.643"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:30:31.643" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:30:31.643" endtime="20170816 07:30:31.643"></status>
</kw>
<status status="PASS" starttime="20170816 07:30:31.447" endtime="20170816 07:30:31.644"></status>
</kw>
<status status="PASS" starttime="20170816 07:30:31.447" endtime="20170816 07:30:31.644"></status>
</kw>
<status status="PASS" starttime="20170816 07:30:31.446" endtime="20170816 07:30:31.644"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 07:30:31.644" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20170816 07:30:31.644" endtime="20170816 07:30:31.644"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:30:31.646" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:30:31.646" endtime="20170816 07:30:31.647"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:30:31.647" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:30:31.647" endtime="20170816 07:30:31.648"></status>
</kw>
<status status="PASS" starttime="20170816 07:30:31.647" endtime="20170816 07:30:31.648"></status>
</kw>
<status status="PASS" starttime="20170816 07:30:31.645" endtime="20170816 07:30:31.648"></status>
</kw>
<status status="PASS" starttime="20170816 07:30:31.645" endtime="20170816 07:30:31.648"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 07:30:31.788" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170816 07:30:31.789" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:30:31.648" endtime="20170816 07:30:31.789"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:30:31.790" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:30:31.790" endtime="20170816 07:30:31.791"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:30:31.791" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:30:31.791" endtime="20170816 07:30:31.792"></status>
</kw>
<status status="PASS" starttime="20170816 07:30:31.791" endtime="20170816 07:30:31.792"></status>
</kw>
<status status="PASS" starttime="20170816 07:30:31.789" endtime="20170816 07:30:31.792"></status>
</kw>
<status status="PASS" starttime="20170816 07:30:31.789" endtime="20170816 07:30:31.792"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 07:30:31.792" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170816 07:30:31.792" endtime="20170816 07:30:31.792"></status>
</kw>
<msg timestamp="20170816 07:30:31.793" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:30:31.446" endtime="20170816 07:30:31.793"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:30:31.793" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:30:31.793" endtime="20170816 07:30:31.793"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 07:30:31.794" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 07:30:31.794" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 07:30:31.794" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170816 07:30:31.793" endtime="20170816 07:30:31.794"></status>
</kw>
<msg timestamp="20170816 07:30:31.794" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" starttime="20170816 07:30:31.445" endtime="20170816 07:30:31.794"></status>
</kw>
<msg timestamp="20170816 07:30:31.795" level="INFO">${power_state} = On</msg>
<status status="PASS" starttime="20170816 07:30:31.445" endtime="20170816 07:30:31.795"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" starttime="20170816 07:30:31.795" endtime="20170816 07:30:31.795"></status>
</kw>
<status status="PASS" starttime="20170816 07:30:31.444" endtime="20170816 07:30:31.795"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 07:30:31.801" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170816 07:30:31.800" endtime="20170816 07:30:31.802"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 07:30:31.802" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170816 07:30:31.802" endtime="20170816 07:30:31.803"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 07:30:31.803" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170816 07:30:31.803" endtime="20170816 07:30:31.803"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 07:30:31.804" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170816 07:30:31.803" endtime="20170816 07:30:31.804"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 07:30:32.175" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170816 07:30:31.805" endtime="20170816 07:30:32.175"></status>
</kw>
<msg timestamp="20170816 07:30:32.175" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 07:30:32.175" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:30:31.804" endtime="20170816 07:30:32.175"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 07:30:32.176" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:30:32.175" endtime="20170816 07:30:32.176"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:30:32.176" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:30:32.176" endtime="20170816 07:30:32.176"></status>
</kw>
<status status="PASS" starttime="20170816 07:30:31.799" endtime="20170816 07:30:32.176"></status>
</kw>
<status status="PASS" starttime="20170816 07:30:31.799" endtime="20170816 07:30:32.177"></status>
</kw>
<status status="PASS" starttime="20170816 07:30:31.798" endtime="20170816 07:30:32.177"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 07:30:32.177" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" starttime="20170816 07:30:32.177" endtime="20170816 07:30:32.177"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:30:32.180" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:30:32.179" endtime="20170816 07:30:32.180"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:30:32.181" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:30:32.181" endtime="20170816 07:30:32.181"></status>
</kw>
<status status="PASS" starttime="20170816 07:30:32.180" endtime="20170816 07:30:32.182"></status>
</kw>
<status status="PASS" starttime="20170816 07:30:32.178" endtime="20170816 07:30:32.182"></status>
</kw>
<status status="PASS" starttime="20170816 07:30:32.178" endtime="20170816 07:30:32.182"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 07:30:32.273" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170816 07:30:32.273" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:30:32.182" endtime="20170816 07:30:32.273"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:30:32.275" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:30:32.274" endtime="20170816 07:30:32.275"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:30:32.275" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:30:32.275" endtime="20170816 07:30:32.276"></status>
</kw>
<status status="PASS" starttime="20170816 07:30:32.275" endtime="20170816 07:30:32.276"></status>
</kw>
<status status="PASS" starttime="20170816 07:30:32.274" endtime="20170816 07:30:32.276"></status>
</kw>
<status status="PASS" starttime="20170816 07:30:32.273" endtime="20170816 07:30:32.276"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 07:30:32.276" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170816 07:30:32.276" endtime="20170816 07:30:32.276"></status>
</kw>
<msg timestamp="20170816 07:30:32.277" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:30:31.797" endtime="20170816 07:30:32.277"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:30:32.277" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:30:32.277" endtime="20170816 07:30:32.277"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 07:30:32.278" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 07:30:32.278" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 07:30:32.278" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170816 07:30:32.278" endtime="20170816 07:30:32.278"></status>
</kw>
<msg timestamp="20170816 07:30:32.278" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status status="PASS" starttime="20170816 07:30:31.796" endtime="20170816 07:30:32.278"></status>
</kw>
<msg timestamp="20170816 07:30:32.279" level="INFO">${host_state} = Quiesced</msg>
<status status="PASS" starttime="20170816 07:30:31.796" endtime="20170816 07:30:32.279"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170816 07:30:32.279" level="FAIL">Running != Quiesced</msg>
<status status="FAIL" starttime="20170816 07:30:32.279" endtime="20170816 07:30:32.279"></status>
</kw>
<status status="FAIL" starttime="20170816 07:30:31.444" endtime="20170816 07:30:32.280"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 07:30:42.285" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170816 07:30:42.285" endtime="20170816 07:30:42.286"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 07:30:42.286" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170816 07:30:42.286" endtime="20170816 07:30:42.286"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 07:30:42.287" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170816 07:30:42.287" endtime="20170816 07:30:42.287"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 07:30:42.287" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170816 07:30:42.287" endtime="20170816 07:30:42.288"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 07:30:42.481" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170816 07:30:42.288" endtime="20170816 07:30:42.481"></status>
</kw>
<msg timestamp="20170816 07:30:42.481" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 07:30:42.482" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:30:42.288" endtime="20170816 07:30:42.482"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 07:30:42.482" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:30:42.482" endtime="20170816 07:30:42.482"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:30:42.483" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:30:42.483" endtime="20170816 07:30:42.483"></status>
</kw>
<status status="PASS" starttime="20170816 07:30:42.284" endtime="20170816 07:30:42.483"></status>
</kw>
<status status="PASS" starttime="20170816 07:30:42.284" endtime="20170816 07:30:42.483"></status>
</kw>
<status status="PASS" starttime="20170816 07:30:42.283" endtime="20170816 07:30:42.483"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 07:30:42.484" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20170816 07:30:42.484" endtime="20170816 07:30:42.484"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:30:42.486" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:30:42.486" endtime="20170816 07:30:42.486"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:30:42.487" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:30:42.487" endtime="20170816 07:30:42.488"></status>
</kw>
<status status="PASS" starttime="20170816 07:30:42.486" endtime="20170816 07:30:42.488"></status>
</kw>
<status status="PASS" starttime="20170816 07:30:42.485" endtime="20170816 07:30:42.488"></status>
</kw>
<status status="PASS" starttime="20170816 07:30:42.484" endtime="20170816 07:30:42.488"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 07:30:42.552" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170816 07:30:42.552" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:30:42.488" endtime="20170816 07:30:42.552"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:30:42.554" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:30:42.553" endtime="20170816 07:30:42.554"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:30:42.555" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:30:42.555" endtime="20170816 07:30:42.555"></status>
</kw>
<status status="PASS" starttime="20170816 07:30:42.554" endtime="20170816 07:30:42.555"></status>
</kw>
<status status="PASS" starttime="20170816 07:30:42.553" endtime="20170816 07:30:42.555"></status>
</kw>
<status status="PASS" starttime="20170816 07:30:42.552" endtime="20170816 07:30:42.555"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 07:30:42.556" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170816 07:30:42.555" endtime="20170816 07:30:42.556"></status>
</kw>
<msg timestamp="20170816 07:30:42.556" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:30:42.283" endtime="20170816 07:30:42.556"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:30:42.556" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:30:42.556" endtime="20170816 07:30:42.557"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 07:30:42.557" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 07:30:42.557" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 07:30:42.557" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170816 07:30:42.557" endtime="20170816 07:30:42.557"></status>
</kw>
<msg timestamp="20170816 07:30:42.558" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" starttime="20170816 07:30:42.282" endtime="20170816 07:30:42.558"></status>
</kw>
<msg timestamp="20170816 07:30:42.558" level="INFO">${power_state} = On</msg>
<status status="PASS" starttime="20170816 07:30:42.281" endtime="20170816 07:30:42.558"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" starttime="20170816 07:30:42.558" endtime="20170816 07:30:42.558"></status>
</kw>
<status status="PASS" starttime="20170816 07:30:42.281" endtime="20170816 07:30:42.559"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 07:30:42.562" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170816 07:30:42.562" endtime="20170816 07:30:42.563"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 07:30:42.563" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170816 07:30:42.563" endtime="20170816 07:30:42.563"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 07:30:42.564" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170816 07:30:42.563" endtime="20170816 07:30:42.564"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 07:30:42.564" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170816 07:30:42.564" endtime="20170816 07:30:42.565"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 07:30:42.790" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170816 07:30:42.565" endtime="20170816 07:30:42.790"></status>
</kw>
<msg timestamp="20170816 07:30:42.790" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 07:30:42.790" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:30:42.565" endtime="20170816 07:30:42.790"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 07:30:42.791" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:30:42.790" endtime="20170816 07:30:42.791"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:30:42.791" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:30:42.791" endtime="20170816 07:30:42.791"></status>
</kw>
<status status="PASS" starttime="20170816 07:30:42.561" endtime="20170816 07:30:42.792"></status>
</kw>
<status status="PASS" starttime="20170816 07:30:42.561" endtime="20170816 07:30:42.792"></status>
</kw>
<status status="PASS" starttime="20170816 07:30:42.560" endtime="20170816 07:30:42.792"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 07:30:42.792" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" starttime="20170816 07:30:42.792" endtime="20170816 07:30:42.792"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:30:42.794" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:30:42.794" endtime="20170816 07:30:42.795"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:30:42.795" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:30:42.795" endtime="20170816 07:30:42.796"></status>
</kw>
<status status="PASS" starttime="20170816 07:30:42.795" endtime="20170816 07:30:42.796"></status>
</kw>
<status status="PASS" starttime="20170816 07:30:42.793" endtime="20170816 07:30:42.796"></status>
</kw>
<status status="PASS" starttime="20170816 07:30:42.793" endtime="20170816 07:30:42.796"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 07:30:42.955" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170816 07:30:42.955" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:30:42.796" endtime="20170816 07:30:42.955"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:30:42.957" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:30:42.957" endtime="20170816 07:30:42.958"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:30:42.958" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:30:42.958" endtime="20170816 07:30:42.959"></status>
</kw>
<status status="PASS" starttime="20170816 07:30:42.958" endtime="20170816 07:30:42.959"></status>
</kw>
<status status="PASS" starttime="20170816 07:30:42.956" endtime="20170816 07:30:42.959"></status>
</kw>
<status status="PASS" starttime="20170816 07:30:42.956" endtime="20170816 07:30:42.959"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 07:30:42.959" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170816 07:30:42.959" endtime="20170816 07:30:42.959"></status>
</kw>
<msg timestamp="20170816 07:30:42.960" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:30:42.560" endtime="20170816 07:30:42.960"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:30:42.960" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:30:42.960" endtime="20170816 07:30:42.960"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 07:30:42.961" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 07:30:42.961" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 07:30:42.961" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170816 07:30:42.961" endtime="20170816 07:30:42.961"></status>
</kw>
<msg timestamp="20170816 07:30:42.961" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status status="PASS" starttime="20170816 07:30:42.559" endtime="20170816 07:30:42.961"></status>
</kw>
<msg timestamp="20170816 07:30:42.962" level="INFO">${host_state} = Quiesced</msg>
<status status="PASS" starttime="20170816 07:30:42.559" endtime="20170816 07:30:42.962"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170816 07:30:42.962" level="FAIL">Running != Quiesced</msg>
<status status="FAIL" starttime="20170816 07:30:42.962" endtime="20170816 07:30:42.962"></status>
</kw>
<status status="FAIL" starttime="20170816 07:30:42.280" endtime="20170816 07:30:42.963"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 07:30:52.968" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170816 07:30:52.968" endtime="20170816 07:30:52.969"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 07:30:52.969" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170816 07:30:52.969" endtime="20170816 07:30:52.969"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 07:30:52.970" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170816 07:30:52.969" endtime="20170816 07:30:52.970"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 07:30:52.970" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170816 07:30:52.970" endtime="20170816 07:30:52.971"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 07:30:53.165" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170816 07:30:52.971" endtime="20170816 07:30:53.165"></status>
</kw>
<msg timestamp="20170816 07:30:53.165" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 07:30:53.165" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:30:52.971" endtime="20170816 07:30:53.165"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 07:30:53.166" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:30:53.166" endtime="20170816 07:30:53.166"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:30:53.167" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:30:53.166" endtime="20170816 07:30:53.167"></status>
</kw>
<status status="PASS" starttime="20170816 07:30:52.967" endtime="20170816 07:30:53.167"></status>
</kw>
<status status="PASS" starttime="20170816 07:30:52.966" endtime="20170816 07:30:53.167"></status>
</kw>
<status status="PASS" starttime="20170816 07:30:52.966" endtime="20170816 07:30:53.167"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 07:30:53.168" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20170816 07:30:53.167" endtime="20170816 07:30:53.168"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:30:53.170" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:30:53.169" endtime="20170816 07:30:53.170"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:30:53.171" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:30:53.171" endtime="20170816 07:30:53.171"></status>
</kw>
<status status="PASS" starttime="20170816 07:30:53.170" endtime="20170816 07:30:53.171"></status>
</kw>
<status status="PASS" starttime="20170816 07:30:53.169" endtime="20170816 07:30:53.171"></status>
</kw>
<status status="PASS" starttime="20170816 07:30:53.168" endtime="20170816 07:30:53.171"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 07:30:53.235" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170816 07:30:53.235" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:30:53.172" endtime="20170816 07:30:53.235"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:30:53.236" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:30:53.236" endtime="20170816 07:30:53.237"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:30:53.238" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:30:53.238" endtime="20170816 07:30:53.238"></status>
</kw>
<status status="PASS" starttime="20170816 07:30:53.237" endtime="20170816 07:30:53.238"></status>
</kw>
<status status="PASS" starttime="20170816 07:30:53.236" endtime="20170816 07:30:53.238"></status>
</kw>
<status status="PASS" starttime="20170816 07:30:53.235" endtime="20170816 07:30:53.238"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 07:30:53.239" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170816 07:30:53.238" endtime="20170816 07:30:53.239"></status>
</kw>
<msg timestamp="20170816 07:30:53.239" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:30:52.965" endtime="20170816 07:30:53.239"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:30:53.239" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:30:53.239" endtime="20170816 07:30:53.240"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 07:30:53.240" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 07:30:53.240" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 07:30:53.240" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170816 07:30:53.240" endtime="20170816 07:30:53.240"></status>
</kw>
<msg timestamp="20170816 07:30:53.241" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" starttime="20170816 07:30:52.964" endtime="20170816 07:30:53.241"></status>
</kw>
<msg timestamp="20170816 07:30:53.241" level="INFO">${power_state} = On</msg>
<status status="PASS" starttime="20170816 07:30:52.964" endtime="20170816 07:30:53.241"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" starttime="20170816 07:30:53.241" endtime="20170816 07:30:53.241"></status>
</kw>
<status status="PASS" starttime="20170816 07:30:52.964" endtime="20170816 07:30:53.242"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 07:30:53.245" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170816 07:30:53.245" endtime="20170816 07:30:53.246"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 07:30:53.246" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170816 07:30:53.246" endtime="20170816 07:30:53.246"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 07:30:53.247" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170816 07:30:53.246" endtime="20170816 07:30:53.247"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 07:30:53.247" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170816 07:30:53.247" endtime="20170816 07:30:53.247"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 07:30:53.438" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170816 07:30:53.248" endtime="20170816 07:30:53.438"></status>
</kw>
<msg timestamp="20170816 07:30:53.439" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 07:30:53.439" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:30:53.248" endtime="20170816 07:30:53.439"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 07:30:53.439" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:30:53.439" endtime="20170816 07:30:53.439"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:30:53.440" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:30:53.440" endtime="20170816 07:30:53.440"></status>
</kw>
<status status="PASS" starttime="20170816 07:30:53.244" endtime="20170816 07:30:53.440"></status>
</kw>
<status status="PASS" starttime="20170816 07:30:53.244" endtime="20170816 07:30:53.441"></status>
</kw>
<status status="PASS" starttime="20170816 07:30:53.243" endtime="20170816 07:30:53.441"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 07:30:53.441" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" starttime="20170816 07:30:53.441" endtime="20170816 07:30:53.441"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:30:53.444" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:30:53.443" endtime="20170816 07:30:53.444"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:30:53.445" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:30:53.445" endtime="20170816 07:30:53.445"></status>
</kw>
<status status="PASS" starttime="20170816 07:30:53.444" endtime="20170816 07:30:53.445"></status>
</kw>
<status status="PASS" starttime="20170816 07:30:53.442" endtime="20170816 07:30:53.445"></status>
</kw>
<status status="PASS" starttime="20170816 07:30:53.442" endtime="20170816 07:30:53.445"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 07:30:53.600" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170816 07:30:53.600" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:30:53.445" endtime="20170816 07:30:53.600"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:30:53.602" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:30:53.602" endtime="20170816 07:30:53.602"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:30:53.603" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:30:53.603" endtime="20170816 07:30:53.603"></status>
</kw>
<status status="PASS" starttime="20170816 07:30:53.603" endtime="20170816 07:30:53.603"></status>
</kw>
<status status="PASS" starttime="20170816 07:30:53.601" endtime="20170816 07:30:53.604"></status>
</kw>
<status status="PASS" starttime="20170816 07:30:53.601" endtime="20170816 07:30:53.604"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 07:30:53.604" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170816 07:30:53.604" endtime="20170816 07:30:53.604"></status>
</kw>
<msg timestamp="20170816 07:30:53.604" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:30:53.243" endtime="20170816 07:30:53.604"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:30:53.605" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:30:53.605" endtime="20170816 07:30:53.605"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 07:30:53.606" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 07:30:53.606" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 07:30:53.606" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170816 07:30:53.605" endtime="20170816 07:30:53.606"></status>
</kw>
<msg timestamp="20170816 07:30:53.606" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status status="PASS" starttime="20170816 07:30:53.242" endtime="20170816 07:30:53.606"></status>
</kw>
<msg timestamp="20170816 07:30:53.606" level="INFO">${host_state} = Quiesced</msg>
<status status="PASS" starttime="20170816 07:30:53.242" endtime="20170816 07:30:53.606"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170816 07:30:53.607" level="FAIL">Running != Quiesced</msg>
<status status="FAIL" starttime="20170816 07:30:53.607" endtime="20170816 07:30:53.607"></status>
</kw>
<status status="FAIL" starttime="20170816 07:30:52.963" endtime="20170816 07:30:53.607"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 07:31:03.612" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170816 07:31:03.612" endtime="20170816 07:31:03.613"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 07:31:03.613" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170816 07:31:03.613" endtime="20170816 07:31:03.613"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 07:31:03.614" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170816 07:31:03.614" endtime="20170816 07:31:03.614"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 07:31:03.615" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170816 07:31:03.614" endtime="20170816 07:31:03.615"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 07:31:03.799" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170816 07:31:03.616" endtime="20170816 07:31:03.799"></status>
</kw>
<msg timestamp="20170816 07:31:03.799" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 07:31:03.799" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:31:03.615" endtime="20170816 07:31:03.799"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 07:31:03.800" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:31:03.799" endtime="20170816 07:31:03.800"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:31:03.800" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:31:03.800" endtime="20170816 07:31:03.800"></status>
</kw>
<status status="PASS" starttime="20170816 07:31:03.612" endtime="20170816 07:31:03.801"></status>
</kw>
<status status="PASS" starttime="20170816 07:31:03.611" endtime="20170816 07:31:03.801"></status>
</kw>
<status status="PASS" starttime="20170816 07:31:03.610" endtime="20170816 07:31:03.801"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 07:31:03.801" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20170816 07:31:03.801" endtime="20170816 07:31:03.801"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:31:03.804" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:31:03.803" endtime="20170816 07:31:03.804"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:31:03.805" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:31:03.804" endtime="20170816 07:31:03.805"></status>
</kw>
<status status="PASS" starttime="20170816 07:31:03.804" endtime="20170816 07:31:03.805"></status>
</kw>
<status status="PASS" starttime="20170816 07:31:03.802" endtime="20170816 07:31:03.805"></status>
</kw>
<status status="PASS" starttime="20170816 07:31:03.802" endtime="20170816 07:31:03.805"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 07:31:03.867" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170816 07:31:03.868" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:31:03.805" endtime="20170816 07:31:03.868"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:31:03.869" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:31:03.869" endtime="20170816 07:31:03.870"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:31:03.870" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:31:03.870" endtime="20170816 07:31:03.871"></status>
</kw>
<status status="PASS" starttime="20170816 07:31:03.870" endtime="20170816 07:31:03.871"></status>
</kw>
<status status="PASS" starttime="20170816 07:31:03.868" endtime="20170816 07:31:03.871"></status>
</kw>
<status status="PASS" starttime="20170816 07:31:03.868" endtime="20170816 07:31:03.871"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 07:31:03.871" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170816 07:31:03.871" endtime="20170816 07:31:03.871"></status>
</kw>
<msg timestamp="20170816 07:31:03.871" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:31:03.610" endtime="20170816 07:31:03.872"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:31:03.872" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:31:03.872" endtime="20170816 07:31:03.872"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 07:31:03.873" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 07:31:03.873" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 07:31:03.873" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170816 07:31:03.873" endtime="20170816 07:31:03.873"></status>
</kw>
<msg timestamp="20170816 07:31:03.873" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" starttime="20170816 07:31:03.609" endtime="20170816 07:31:03.873"></status>
</kw>
<msg timestamp="20170816 07:31:03.874" level="INFO">${power_state} = On</msg>
<status status="PASS" starttime="20170816 07:31:03.609" endtime="20170816 07:31:03.874"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" starttime="20170816 07:31:03.874" endtime="20170816 07:31:03.874"></status>
</kw>
<status status="PASS" starttime="20170816 07:31:03.608" endtime="20170816 07:31:03.874"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 07:31:03.878" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170816 07:31:03.878" endtime="20170816 07:31:03.879"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 07:31:03.879" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170816 07:31:03.879" endtime="20170816 07:31:03.879"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 07:31:03.880" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170816 07:31:03.880" endtime="20170816 07:31:03.880"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 07:31:03.881" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170816 07:31:03.880" endtime="20170816 07:31:03.881"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 07:31:04.057" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170816 07:31:03.881" endtime="20170816 07:31:04.057"></status>
</kw>
<msg timestamp="20170816 07:31:04.058" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 07:31:04.058" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:31:03.881" endtime="20170816 07:31:04.058"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 07:31:04.058" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:31:04.058" endtime="20170816 07:31:04.058"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:31:04.059" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:31:04.059" endtime="20170816 07:31:04.059"></status>
</kw>
<status status="PASS" starttime="20170816 07:31:03.877" endtime="20170816 07:31:04.059"></status>
</kw>
<status status="PASS" starttime="20170816 07:31:03.877" endtime="20170816 07:31:04.059"></status>
</kw>
<status status="PASS" starttime="20170816 07:31:03.876" endtime="20170816 07:31:04.059"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 07:31:04.060" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" starttime="20170816 07:31:04.060" endtime="20170816 07:31:04.060"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:31:04.062" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:31:04.061" endtime="20170816 07:31:04.062"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:31:04.063" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:31:04.063" endtime="20170816 07:31:04.063"></status>
</kw>
<status status="PASS" starttime="20170816 07:31:04.062" endtime="20170816 07:31:04.063"></status>
</kw>
<status status="PASS" starttime="20170816 07:31:04.061" endtime="20170816 07:31:04.064"></status>
</kw>
<status status="PASS" starttime="20170816 07:31:04.060" endtime="20170816 07:31:04.064"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 07:31:04.161" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170816 07:31:04.161" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:31:04.064" endtime="20170816 07:31:04.161"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:31:04.163" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:31:04.162" endtime="20170816 07:31:04.163"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:31:04.164" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:31:04.164" endtime="20170816 07:31:04.164"></status>
</kw>
<status status="PASS" starttime="20170816 07:31:04.163" endtime="20170816 07:31:04.164"></status>
</kw>
<status status="PASS" starttime="20170816 07:31:04.162" endtime="20170816 07:31:04.165"></status>
</kw>
<status status="PASS" starttime="20170816 07:31:04.161" endtime="20170816 07:31:04.165"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 07:31:04.165" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170816 07:31:04.165" endtime="20170816 07:31:04.165"></status>
</kw>
<msg timestamp="20170816 07:31:04.165" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:31:03.875" endtime="20170816 07:31:04.165"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:31:04.166" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:31:04.166" endtime="20170816 07:31:04.166"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 07:31:04.166" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 07:31:04.167" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 07:31:04.167" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170816 07:31:04.166" endtime="20170816 07:31:04.167"></status>
</kw>
<msg timestamp="20170816 07:31:04.167" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status status="PASS" starttime="20170816 07:31:03.875" endtime="20170816 07:31:04.167"></status>
</kw>
<msg timestamp="20170816 07:31:04.167" level="INFO">${host_state} = Quiesced</msg>
<status status="PASS" starttime="20170816 07:31:03.875" endtime="20170816 07:31:04.167"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170816 07:31:04.168" level="FAIL">Running != Quiesced</msg>
<status status="FAIL" starttime="20170816 07:31:04.168" endtime="20170816 07:31:04.168"></status>
</kw>
<status status="FAIL" starttime="20170816 07:31:03.608" endtime="20170816 07:31:04.168"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 07:31:14.173" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170816 07:31:14.173" endtime="20170816 07:31:14.174"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 07:31:14.174" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170816 07:31:14.174" endtime="20170816 07:31:14.174"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 07:31:14.175" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170816 07:31:14.175" endtime="20170816 07:31:14.175"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 07:31:14.176" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170816 07:31:14.175" endtime="20170816 07:31:14.176"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 07:31:14.380" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170816 07:31:14.176" endtime="20170816 07:31:14.380"></status>
</kw>
<msg timestamp="20170816 07:31:14.380" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 07:31:14.380" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:31:14.176" endtime="20170816 07:31:14.381"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 07:31:14.381" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:31:14.381" endtime="20170816 07:31:14.381"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:31:14.382" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:31:14.382" endtime="20170816 07:31:14.382"></status>
</kw>
<status status="PASS" starttime="20170816 07:31:14.172" endtime="20170816 07:31:14.382"></status>
</kw>
<status status="PASS" starttime="20170816 07:31:14.172" endtime="20170816 07:31:14.382"></status>
</kw>
<status status="PASS" starttime="20170816 07:31:14.171" endtime="20170816 07:31:14.382"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 07:31:14.383" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20170816 07:31:14.383" endtime="20170816 07:31:14.383"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:31:14.385" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:31:14.385" endtime="20170816 07:31:14.385"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:31:14.386" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:31:14.386" endtime="20170816 07:31:14.386"></status>
</kw>
<status status="PASS" starttime="20170816 07:31:14.385" endtime="20170816 07:31:14.386"></status>
</kw>
<status status="PASS" starttime="20170816 07:31:14.384" endtime="20170816 07:31:14.387"></status>
</kw>
<status status="PASS" starttime="20170816 07:31:14.383" endtime="20170816 07:31:14.387"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 07:31:14.481" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170816 07:31:14.481" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:31:14.387" endtime="20170816 07:31:14.481"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:31:14.483" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:31:14.482" endtime="20170816 07:31:14.483"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:31:14.484" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:31:14.484" endtime="20170816 07:31:14.484"></status>
</kw>
<status status="PASS" starttime="20170816 07:31:14.483" endtime="20170816 07:31:14.484"></status>
</kw>
<status status="PASS" starttime="20170816 07:31:14.482" endtime="20170816 07:31:14.484"></status>
</kw>
<status status="PASS" starttime="20170816 07:31:14.481" endtime="20170816 07:31:14.484"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 07:31:14.485" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170816 07:31:14.484" endtime="20170816 07:31:14.485"></status>
</kw>
<msg timestamp="20170816 07:31:14.485" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:31:14.171" endtime="20170816 07:31:14.485"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:31:14.486" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:31:14.485" endtime="20170816 07:31:14.486"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 07:31:14.486" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 07:31:14.486" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 07:31:14.486" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170816 07:31:14.486" endtime="20170816 07:31:14.486"></status>
</kw>
<msg timestamp="20170816 07:31:14.487" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" starttime="20170816 07:31:14.170" endtime="20170816 07:31:14.487"></status>
</kw>
<msg timestamp="20170816 07:31:14.487" level="INFO">${power_state} = On</msg>
<status status="PASS" starttime="20170816 07:31:14.170" endtime="20170816 07:31:14.487"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" starttime="20170816 07:31:14.487" endtime="20170816 07:31:14.487"></status>
</kw>
<status status="PASS" starttime="20170816 07:31:14.169" endtime="20170816 07:31:14.488"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 07:31:14.491" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170816 07:31:14.491" endtime="20170816 07:31:14.492"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 07:31:14.492" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170816 07:31:14.492" endtime="20170816 07:31:14.493"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 07:31:14.493" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170816 07:31:14.493" endtime="20170816 07:31:14.493"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 07:31:14.494" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170816 07:31:14.493" endtime="20170816 07:31:14.494"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 07:31:14.691" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170816 07:31:14.495" endtime="20170816 07:31:14.691"></status>
</kw>
<msg timestamp="20170816 07:31:14.691" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 07:31:14.691" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:31:14.494" endtime="20170816 07:31:14.691"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 07:31:14.692" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:31:14.691" endtime="20170816 07:31:14.692"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:31:14.692" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:31:14.692" endtime="20170816 07:31:14.693"></status>
</kw>
<status status="PASS" starttime="20170816 07:31:14.490" endtime="20170816 07:31:14.693"></status>
</kw>
<status status="PASS" starttime="20170816 07:31:14.490" endtime="20170816 07:31:14.693"></status>
</kw>
<status status="PASS" starttime="20170816 07:31:14.489" endtime="20170816 07:31:14.693"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 07:31:14.694" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" starttime="20170816 07:31:14.693" endtime="20170816 07:31:14.694"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:31:14.696" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:31:14.695" endtime="20170816 07:31:14.696"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:31:14.697" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:31:14.697" endtime="20170816 07:31:14.697"></status>
</kw>
<status status="PASS" starttime="20170816 07:31:14.696" endtime="20170816 07:31:14.697"></status>
</kw>
<status status="PASS" starttime="20170816 07:31:14.694" endtime="20170816 07:31:14.697"></status>
</kw>
<status status="PASS" starttime="20170816 07:31:14.694" endtime="20170816 07:31:14.697"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 07:31:14.787" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170816 07:31:14.787" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:31:14.697" endtime="20170816 07:31:14.787"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:31:14.789" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:31:14.788" endtime="20170816 07:31:14.789"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:31:14.790" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:31:14.789" endtime="20170816 07:31:14.790"></status>
</kw>
<status status="PASS" starttime="20170816 07:31:14.789" endtime="20170816 07:31:14.790"></status>
</kw>
<status status="PASS" starttime="20170816 07:31:14.788" endtime="20170816 07:31:14.790"></status>
</kw>
<status status="PASS" starttime="20170816 07:31:14.787" endtime="20170816 07:31:14.790"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 07:31:14.790" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170816 07:31:14.790" endtime="20170816 07:31:14.791"></status>
</kw>
<msg timestamp="20170816 07:31:14.791" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:31:14.489" endtime="20170816 07:31:14.791"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:31:14.791" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:31:14.791" endtime="20170816 07:31:14.791"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 07:31:14.792" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 07:31:14.792" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 07:31:14.792" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170816 07:31:14.792" endtime="20170816 07:31:14.792"></status>
</kw>
<msg timestamp="20170816 07:31:14.792" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status status="PASS" starttime="20170816 07:31:14.488" endtime="20170816 07:31:14.793"></status>
</kw>
<msg timestamp="20170816 07:31:14.793" level="INFO">${host_state} = Quiesced</msg>
<status status="PASS" starttime="20170816 07:31:14.488" endtime="20170816 07:31:14.793"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170816 07:31:14.794" level="FAIL">Running != Quiesced</msg>
<status status="FAIL" starttime="20170816 07:31:14.793" endtime="20170816 07:31:14.794"></status>
</kw>
<status status="FAIL" starttime="20170816 07:31:14.169" endtime="20170816 07:31:14.794"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 07:31:24.800" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170816 07:31:24.799" endtime="20170816 07:31:24.800"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 07:31:24.801" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170816 07:31:24.800" endtime="20170816 07:31:24.801"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 07:31:24.801" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170816 07:31:24.801" endtime="20170816 07:31:24.801"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 07:31:24.802" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170816 07:31:24.802" endtime="20170816 07:31:24.802"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 07:31:25.068" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170816 07:31:24.803" endtime="20170816 07:31:25.068"></status>
</kw>
<msg timestamp="20170816 07:31:25.068" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 07:31:25.068" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:31:24.802" endtime="20170816 07:31:25.068"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 07:31:25.069" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:31:25.069" endtime="20170816 07:31:25.069"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:31:25.070" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:31:25.069" endtime="20170816 07:31:25.070"></status>
</kw>
<status status="PASS" starttime="20170816 07:31:24.799" endtime="20170816 07:31:25.070"></status>
</kw>
<status status="PASS" starttime="20170816 07:31:24.798" endtime="20170816 07:31:25.070"></status>
</kw>
<status status="PASS" starttime="20170816 07:31:24.798" endtime="20170816 07:31:25.070"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 07:31:25.071" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20170816 07:31:25.070" endtime="20170816 07:31:25.071"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:31:25.074" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:31:25.072" endtime="20170816 07:31:25.074"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:31:25.075" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:31:25.075" endtime="20170816 07:31:25.075"></status>
</kw>
<status status="PASS" starttime="20170816 07:31:25.074" endtime="20170816 07:31:25.076"></status>
</kw>
<status status="PASS" starttime="20170816 07:31:25.072" endtime="20170816 07:31:25.076"></status>
</kw>
<status status="PASS" starttime="20170816 07:31:25.071" endtime="20170816 07:31:25.076"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 07:31:25.158" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170816 07:31:25.158" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:31:25.076" endtime="20170816 07:31:25.158"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:31:25.160" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:31:25.159" endtime="20170816 07:31:25.160"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:31:25.161" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:31:25.161" endtime="20170816 07:31:25.161"></status>
</kw>
<status status="PASS" starttime="20170816 07:31:25.160" endtime="20170816 07:31:25.161"></status>
</kw>
<status status="PASS" starttime="20170816 07:31:25.159" endtime="20170816 07:31:25.161"></status>
</kw>
<status status="PASS" starttime="20170816 07:31:25.158" endtime="20170816 07:31:25.161"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 07:31:25.162" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170816 07:31:25.162" endtime="20170816 07:31:25.162"></status>
</kw>
<msg timestamp="20170816 07:31:25.162" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:31:24.797" endtime="20170816 07:31:25.162"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:31:25.163" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:31:25.162" endtime="20170816 07:31:25.163"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 07:31:25.163" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 07:31:25.163" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 07:31:25.163" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170816 07:31:25.163" endtime="20170816 07:31:25.163"></status>
</kw>
<msg timestamp="20170816 07:31:25.164" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" starttime="20170816 07:31:24.796" endtime="20170816 07:31:25.164"></status>
</kw>
<msg timestamp="20170816 07:31:25.164" level="INFO">${power_state} = On</msg>
<status status="PASS" starttime="20170816 07:31:24.795" endtime="20170816 07:31:25.164"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" starttime="20170816 07:31:25.164" endtime="20170816 07:31:25.165"></status>
</kw>
<status status="PASS" starttime="20170816 07:31:24.795" endtime="20170816 07:31:25.165"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 07:31:25.168" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170816 07:31:25.168" endtime="20170816 07:31:25.169"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 07:31:25.169" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170816 07:31:25.169" endtime="20170816 07:31:25.169"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 07:31:25.170" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170816 07:31:25.170" endtime="20170816 07:31:25.170"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 07:31:25.170" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170816 07:31:25.170" endtime="20170816 07:31:25.171"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 07:31:25.542" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170816 07:31:25.171" endtime="20170816 07:31:25.542"></status>
</kw>
<msg timestamp="20170816 07:31:25.542" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 07:31:25.542" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:31:25.171" endtime="20170816 07:31:25.542"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 07:31:25.543" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:31:25.543" endtime="20170816 07:31:25.543"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:31:25.544" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:31:25.543" endtime="20170816 07:31:25.544"></status>
</kw>
<status status="PASS" starttime="20170816 07:31:25.167" endtime="20170816 07:31:25.544"></status>
</kw>
<status status="PASS" starttime="20170816 07:31:25.167" endtime="20170816 07:31:25.544"></status>
</kw>
<status status="PASS" starttime="20170816 07:31:25.166" endtime="20170816 07:31:25.544"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 07:31:25.545" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" starttime="20170816 07:31:25.545" endtime="20170816 07:31:25.545"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:31:25.547" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:31:25.546" endtime="20170816 07:31:25.547"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:31:25.548" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:31:25.548" endtime="20170816 07:31:25.548"></status>
</kw>
<status status="PASS" starttime="20170816 07:31:25.547" endtime="20170816 07:31:25.548"></status>
</kw>
<status status="PASS" starttime="20170816 07:31:25.546" endtime="20170816 07:31:25.548"></status>
</kw>
<status status="PASS" starttime="20170816 07:31:25.545" endtime="20170816 07:31:25.548"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 07:31:25.699" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170816 07:31:25.699" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:31:25.549" endtime="20170816 07:31:25.699"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:31:25.701" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:31:25.701" endtime="20170816 07:31:25.701"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:31:25.702" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:31:25.702" endtime="20170816 07:31:25.702"></status>
</kw>
<status status="PASS" starttime="20170816 07:31:25.701" endtime="20170816 07:31:25.702"></status>
</kw>
<status status="PASS" starttime="20170816 07:31:25.700" endtime="20170816 07:31:25.703"></status>
</kw>
<status status="PASS" starttime="20170816 07:31:25.700" endtime="20170816 07:31:25.703"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 07:31:25.703" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170816 07:31:25.703" endtime="20170816 07:31:25.703"></status>
</kw>
<msg timestamp="20170816 07:31:25.703" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:31:25.166" endtime="20170816 07:31:25.703"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:31:25.704" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:31:25.704" endtime="20170816 07:31:25.704"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 07:31:25.705" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 07:31:25.705" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 07:31:25.705" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170816 07:31:25.704" endtime="20170816 07:31:25.705"></status>
</kw>
<msg timestamp="20170816 07:31:25.705" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status status="PASS" starttime="20170816 07:31:25.165" endtime="20170816 07:31:25.705"></status>
</kw>
<msg timestamp="20170816 07:31:25.705" level="INFO">${host_state} = Quiesced</msg>
<status status="PASS" starttime="20170816 07:31:25.165" endtime="20170816 07:31:25.705"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170816 07:31:25.706" level="FAIL">Running != Quiesced</msg>
<status status="FAIL" starttime="20170816 07:31:25.706" endtime="20170816 07:31:25.706"></status>
</kw>
<status status="FAIL" starttime="20170816 07:31:24.794" endtime="20170816 07:31:25.706"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 07:31:35.712" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170816 07:31:35.712" endtime="20170816 07:31:35.712"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 07:31:35.713" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170816 07:31:35.713" endtime="20170816 07:31:35.713"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 07:31:35.714" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170816 07:31:35.713" endtime="20170816 07:31:35.714"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 07:31:35.714" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170816 07:31:35.714" endtime="20170816 07:31:35.714"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 07:31:35.993" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170816 07:31:35.715" endtime="20170816 07:31:35.994"></status>
</kw>
<msg timestamp="20170816 07:31:35.994" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 07:31:35.994" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:31:35.715" endtime="20170816 07:31:35.994"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 07:31:35.994" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:31:35.994" endtime="20170816 07:31:35.995"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:31:35.995" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:31:35.995" endtime="20170816 07:31:35.995"></status>
</kw>
<status status="PASS" starttime="20170816 07:31:35.711" endtime="20170816 07:31:35.995"></status>
</kw>
<status status="PASS" starttime="20170816 07:31:35.710" endtime="20170816 07:31:35.995"></status>
</kw>
<status status="PASS" starttime="20170816 07:31:35.709" endtime="20170816 07:31:35.996"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 07:31:35.996" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20170816 07:31:35.996" endtime="20170816 07:31:35.996"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:31:35.998" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:31:35.998" endtime="20170816 07:31:35.998"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:31:35.999" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:31:35.999" endtime="20170816 07:31:35.999"></status>
</kw>
<status status="PASS" starttime="20170816 07:31:35.998" endtime="20170816 07:31:35.999"></status>
</kw>
<status status="PASS" starttime="20170816 07:31:35.997" endtime="20170816 07:31:36.000"></status>
</kw>
<status status="PASS" starttime="20170816 07:31:35.996" endtime="20170816 07:31:36.000"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 07:31:36.082" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170816 07:31:36.082" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:31:36.000" endtime="20170816 07:31:36.082"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:31:36.084" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:31:36.084" endtime="20170816 07:31:36.084"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:31:36.086" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:31:36.085" endtime="20170816 07:31:36.086"></status>
</kw>
<status status="PASS" starttime="20170816 07:31:36.084" endtime="20170816 07:31:36.086"></status>
</kw>
<status status="PASS" starttime="20170816 07:31:36.083" endtime="20170816 07:31:36.086"></status>
</kw>
<status status="PASS" starttime="20170816 07:31:36.083" endtime="20170816 07:31:36.086"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 07:31:36.086" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170816 07:31:36.086" endtime="20170816 07:31:36.086"></status>
</kw>
<msg timestamp="20170816 07:31:36.087" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:31:35.709" endtime="20170816 07:31:36.087"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:31:36.087" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:31:36.087" endtime="20170816 07:31:36.087"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 07:31:36.088" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 07:31:36.088" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 07:31:36.088" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170816 07:31:36.088" endtime="20170816 07:31:36.088"></status>
</kw>
<msg timestamp="20170816 07:31:36.088" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" starttime="20170816 07:31:35.708" endtime="20170816 07:31:36.088"></status>
</kw>
<msg timestamp="20170816 07:31:36.089" level="INFO">${power_state} = On</msg>
<status status="PASS" starttime="20170816 07:31:35.708" endtime="20170816 07:31:36.089"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" starttime="20170816 07:31:36.089" endtime="20170816 07:31:36.089"></status>
</kw>
<status status="PASS" starttime="20170816 07:31:35.707" endtime="20170816 07:31:36.089"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 07:31:36.094" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170816 07:31:36.094" endtime="20170816 07:31:36.095"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 07:31:36.096" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170816 07:31:36.095" endtime="20170816 07:31:36.096"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 07:31:36.097" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170816 07:31:36.096" endtime="20170816 07:31:36.097"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 07:31:36.098" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170816 07:31:36.097" endtime="20170816 07:31:36.098"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 07:31:36.274" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170816 07:31:36.099" endtime="20170816 07:31:36.274"></status>
</kw>
<msg timestamp="20170816 07:31:36.274" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 07:31:36.274" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:31:36.098" endtime="20170816 07:31:36.274"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 07:31:36.275" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:31:36.274" endtime="20170816 07:31:36.275"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:31:36.276" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:31:36.275" endtime="20170816 07:31:36.276"></status>
</kw>
<status status="PASS" starttime="20170816 07:31:36.093" endtime="20170816 07:31:36.276"></status>
</kw>
<status status="PASS" starttime="20170816 07:31:36.092" endtime="20170816 07:31:36.276"></status>
</kw>
<status status="PASS" starttime="20170816 07:31:36.092" endtime="20170816 07:31:36.276"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 07:31:36.277" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" starttime="20170816 07:31:36.276" endtime="20170816 07:31:36.277"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:31:36.279" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:31:36.278" endtime="20170816 07:31:36.279"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:31:36.280" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:31:36.280" endtime="20170816 07:31:36.280"></status>
</kw>
<status status="PASS" starttime="20170816 07:31:36.279" endtime="20170816 07:31:36.280"></status>
</kw>
<status status="PASS" starttime="20170816 07:31:36.277" endtime="20170816 07:31:36.280"></status>
</kw>
<status status="PASS" starttime="20170816 07:31:36.277" endtime="20170816 07:31:36.280"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 07:31:36.377" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170816 07:31:36.378" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:31:36.281" endtime="20170816 07:31:36.378"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:31:36.379" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:31:36.379" endtime="20170816 07:31:36.379"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:31:36.380" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:31:36.380" endtime="20170816 07:31:36.380"></status>
</kw>
<status status="PASS" starttime="20170816 07:31:36.379" endtime="20170816 07:31:36.380"></status>
</kw>
<status status="PASS" starttime="20170816 07:31:36.378" endtime="20170816 07:31:36.381"></status>
</kw>
<status status="PASS" starttime="20170816 07:31:36.378" endtime="20170816 07:31:36.381"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 07:31:36.381" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170816 07:31:36.381" endtime="20170816 07:31:36.381"></status>
</kw>
<msg timestamp="20170816 07:31:36.381" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:31:36.091" endtime="20170816 07:31:36.381"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:31:36.382" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:31:36.382" endtime="20170816 07:31:36.382"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 07:31:36.382" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 07:31:36.383" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 07:31:36.383" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170816 07:31:36.382" endtime="20170816 07:31:36.383"></status>
</kw>
<msg timestamp="20170816 07:31:36.383" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status status="PASS" starttime="20170816 07:31:36.090" endtime="20170816 07:31:36.383"></status>
</kw>
<msg timestamp="20170816 07:31:36.383" level="INFO">${host_state} = Quiesced</msg>
<status status="PASS" starttime="20170816 07:31:36.089" endtime="20170816 07:31:36.383"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170816 07:31:36.384" level="FAIL">Running != Quiesced</msg>
<status status="FAIL" starttime="20170816 07:31:36.384" endtime="20170816 07:31:36.384"></status>
</kw>
<status status="FAIL" starttime="20170816 07:31:35.707" endtime="20170816 07:31:36.384"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 07:31:46.391" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170816 07:31:46.391" endtime="20170816 07:31:46.392"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 07:31:46.393" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170816 07:31:46.392" endtime="20170816 07:31:46.393"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 07:31:46.394" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170816 07:31:46.393" endtime="20170816 07:31:46.394"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 07:31:46.395" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170816 07:31:46.394" endtime="20170816 07:31:46.396"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 07:31:46.571" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170816 07:31:46.397" endtime="20170816 07:31:46.572"></status>
</kw>
<msg timestamp="20170816 07:31:46.572" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 07:31:46.572" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:31:46.396" endtime="20170816 07:31:46.572"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 07:31:46.573" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:31:46.572" endtime="20170816 07:31:46.573"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:31:46.573" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:31:46.573" endtime="20170816 07:31:46.573"></status>
</kw>
<status status="PASS" starttime="20170816 07:31:46.390" endtime="20170816 07:31:46.574"></status>
</kw>
<status status="PASS" starttime="20170816 07:31:46.390" endtime="20170816 07:31:46.574"></status>
</kw>
<status status="PASS" starttime="20170816 07:31:46.389" endtime="20170816 07:31:46.574"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 07:31:46.574" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20170816 07:31:46.574" endtime="20170816 07:31:46.574"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:31:46.576" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:31:46.576" endtime="20170816 07:31:46.576"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:31:46.577" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:31:46.577" endtime="20170816 07:31:46.577"></status>
</kw>
<status status="PASS" starttime="20170816 07:31:46.577" endtime="20170816 07:31:46.578"></status>
</kw>
<status status="PASS" starttime="20170816 07:31:46.575" endtime="20170816 07:31:46.578"></status>
</kw>
<status status="PASS" starttime="20170816 07:31:46.575" endtime="20170816 07:31:46.578"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 07:31:46.672" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170816 07:31:46.672" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:31:46.578" endtime="20170816 07:31:46.672"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:31:46.674" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:31:46.673" endtime="20170816 07:31:46.674"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:31:46.675" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:31:46.674" endtime="20170816 07:31:46.675"></status>
</kw>
<status status="PASS" starttime="20170816 07:31:46.674" endtime="20170816 07:31:46.675"></status>
</kw>
<status status="PASS" starttime="20170816 07:31:46.673" endtime="20170816 07:31:46.675"></status>
</kw>
<status status="PASS" starttime="20170816 07:31:46.672" endtime="20170816 07:31:46.675"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 07:31:46.675" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170816 07:31:46.675" endtime="20170816 07:31:46.676"></status>
</kw>
<msg timestamp="20170816 07:31:46.676" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:31:46.387" endtime="20170816 07:31:46.676"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:31:46.676" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:31:46.676" endtime="20170816 07:31:46.676"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 07:31:46.677" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 07:31:46.677" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 07:31:46.677" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170816 07:31:46.677" endtime="20170816 07:31:46.677"></status>
</kw>
<msg timestamp="20170816 07:31:46.677" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" starttime="20170816 07:31:46.387" endtime="20170816 07:31:46.677"></status>
</kw>
<msg timestamp="20170816 07:31:46.678" level="INFO">${power_state} = On</msg>
<status status="PASS" starttime="20170816 07:31:46.386" endtime="20170816 07:31:46.678"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" starttime="20170816 07:31:46.678" endtime="20170816 07:31:46.678"></status>
</kw>
<status status="PASS" starttime="20170816 07:31:46.386" endtime="20170816 07:31:46.678"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 07:31:46.682" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170816 07:31:46.682" endtime="20170816 07:31:46.683"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 07:31:46.683" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170816 07:31:46.683" endtime="20170816 07:31:46.683"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 07:31:46.684" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170816 07:31:46.684" endtime="20170816 07:31:46.684"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 07:31:46.685" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170816 07:31:46.684" endtime="20170816 07:31:46.685"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 07:31:46.957" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170816 07:31:46.685" endtime="20170816 07:31:46.957"></status>
</kw>
<msg timestamp="20170816 07:31:46.958" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 07:31:46.958" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:31:46.685" endtime="20170816 07:31:46.958"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 07:31:46.958" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:31:46.958" endtime="20170816 07:31:46.958"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:31:46.959" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:31:46.959" endtime="20170816 07:31:46.959"></status>
</kw>
<status status="PASS" starttime="20170816 07:31:46.682" endtime="20170816 07:31:46.959"></status>
</kw>
<status status="PASS" starttime="20170816 07:31:46.681" endtime="20170816 07:31:46.959"></status>
</kw>
<status status="PASS" starttime="20170816 07:31:46.680" endtime="20170816 07:31:46.959"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 07:31:46.960" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" starttime="20170816 07:31:46.960" endtime="20170816 07:31:46.960"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:31:46.962" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:31:46.961" endtime="20170816 07:31:46.962"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:31:46.963" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:31:46.963" endtime="20170816 07:31:46.963"></status>
</kw>
<status status="PASS" starttime="20170816 07:31:46.962" endtime="20170816 07:31:46.963"></status>
</kw>
<status status="PASS" starttime="20170816 07:31:46.961" endtime="20170816 07:31:46.964"></status>
</kw>
<status status="PASS" starttime="20170816 07:31:46.960" endtime="20170816 07:31:46.964"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 07:31:47.052" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170816 07:31:47.052" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:31:46.964" endtime="20170816 07:31:47.052"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:31:47.054" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:31:47.053" endtime="20170816 07:31:47.054"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:31:47.055" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:31:47.055" endtime="20170816 07:31:47.055"></status>
</kw>
<status status="PASS" starttime="20170816 07:31:47.054" endtime="20170816 07:31:47.055"></status>
</kw>
<status status="PASS" starttime="20170816 07:31:47.053" endtime="20170816 07:31:47.055"></status>
</kw>
<status status="PASS" starttime="20170816 07:31:47.052" endtime="20170816 07:31:47.056"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 07:31:47.056" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170816 07:31:47.056" endtime="20170816 07:31:47.056"></status>
</kw>
<msg timestamp="20170816 07:31:47.056" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:31:46.679" endtime="20170816 07:31:47.056"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:31:47.057" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:31:47.057" endtime="20170816 07:31:47.057"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 07:31:47.058" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 07:31:47.058" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 07:31:47.058" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170816 07:31:47.057" endtime="20170816 07:31:47.058"></status>
</kw>
<msg timestamp="20170816 07:31:47.058" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status status="PASS" starttime="20170816 07:31:46.679" endtime="20170816 07:31:47.058"></status>
</kw>
<msg timestamp="20170816 07:31:47.058" level="INFO">${host_state} = Quiesced</msg>
<status status="PASS" starttime="20170816 07:31:46.679" endtime="20170816 07:31:47.058"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170816 07:31:47.059" level="FAIL">Running != Quiesced</msg>
<status status="FAIL" starttime="20170816 07:31:47.059" endtime="20170816 07:31:47.059"></status>
</kw>
<status status="FAIL" starttime="20170816 07:31:46.385" endtime="20170816 07:31:47.059"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 07:31:57.064" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170816 07:31:57.064" endtime="20170816 07:31:57.065"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 07:31:57.065" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170816 07:31:57.065" endtime="20170816 07:31:57.065"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 07:31:57.066" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170816 07:31:57.066" endtime="20170816 07:31:57.066"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 07:31:57.067" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170816 07:31:57.066" endtime="20170816 07:31:57.067"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 07:31:57.242" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170816 07:31:57.067" endtime="20170816 07:31:57.242"></status>
</kw>
<msg timestamp="20170816 07:31:57.243" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 07:31:57.243" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:31:57.067" endtime="20170816 07:31:57.243"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 07:31:57.243" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:31:57.243" endtime="20170816 07:31:57.243"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:31:57.244" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:31:57.244" endtime="20170816 07:31:57.244"></status>
</kw>
<status status="PASS" starttime="20170816 07:31:57.064" endtime="20170816 07:31:57.244"></status>
</kw>
<status status="PASS" starttime="20170816 07:31:57.063" endtime="20170816 07:31:57.244"></status>
</kw>
<status status="PASS" starttime="20170816 07:31:57.062" endtime="20170816 07:31:57.245"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 07:31:57.245" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20170816 07:31:57.245" endtime="20170816 07:31:57.245"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:31:57.247" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:31:57.247" endtime="20170816 07:31:57.247"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:31:57.248" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:31:57.248" endtime="20170816 07:31:57.248"></status>
</kw>
<status status="PASS" starttime="20170816 07:31:57.247" endtime="20170816 07:31:57.249"></status>
</kw>
<status status="PASS" starttime="20170816 07:31:57.246" endtime="20170816 07:31:57.249"></status>
</kw>
<status status="PASS" starttime="20170816 07:31:57.245" endtime="20170816 07:31:57.249"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 07:31:57.311" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170816 07:31:57.312" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:31:57.249" endtime="20170816 07:31:57.312"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:31:57.314" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:31:57.313" endtime="20170816 07:31:57.314"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:31:57.316" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:31:57.315" endtime="20170816 07:31:57.316"></status>
</kw>
<status status="PASS" starttime="20170816 07:31:57.314" endtime="20170816 07:31:57.316"></status>
</kw>
<status status="PASS" starttime="20170816 07:31:57.313" endtime="20170816 07:31:57.316"></status>
</kw>
<status status="PASS" starttime="20170816 07:31:57.312" endtime="20170816 07:31:57.316"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 07:31:57.316" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170816 07:31:57.316" endtime="20170816 07:31:57.317"></status>
</kw>
<msg timestamp="20170816 07:31:57.317" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:31:57.062" endtime="20170816 07:31:57.317"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:31:57.317" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:31:57.317" endtime="20170816 07:31:57.317"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 07:31:57.318" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 07:31:57.318" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 07:31:57.318" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170816 07:31:57.318" endtime="20170816 07:31:57.318"></status>
</kw>
<msg timestamp="20170816 07:31:57.318" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" starttime="20170816 07:31:57.061" endtime="20170816 07:31:57.319"></status>
</kw>
<msg timestamp="20170816 07:31:57.319" level="INFO">${power_state} = On</msg>
<status status="PASS" starttime="20170816 07:31:57.061" endtime="20170816 07:31:57.319"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" starttime="20170816 07:31:57.319" endtime="20170816 07:31:57.319"></status>
</kw>
<status status="PASS" starttime="20170816 07:31:57.060" endtime="20170816 07:31:57.319"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 07:31:57.323" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170816 07:31:57.323" endtime="20170816 07:31:57.327"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 07:31:57.328" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170816 07:31:57.327" endtime="20170816 07:31:57.328"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 07:31:57.329" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170816 07:31:57.328" endtime="20170816 07:31:57.329"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 07:31:57.330" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170816 07:31:57.329" endtime="20170816 07:31:57.330"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 07:31:57.539" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170816 07:31:57.330" endtime="20170816 07:31:57.539"></status>
</kw>
<msg timestamp="20170816 07:31:57.539" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 07:31:57.539" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:31:57.330" endtime="20170816 07:31:57.539"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 07:31:57.540" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:31:57.539" endtime="20170816 07:31:57.540"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:31:57.540" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:31:57.540" endtime="20170816 07:31:57.540"></status>
</kw>
<status status="PASS" starttime="20170816 07:31:57.322" endtime="20170816 07:31:57.541"></status>
</kw>
<status status="PASS" starttime="20170816 07:31:57.322" endtime="20170816 07:31:57.541"></status>
</kw>
<status status="PASS" starttime="20170816 07:31:57.321" endtime="20170816 07:31:57.541"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 07:31:57.541" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" starttime="20170816 07:31:57.541" endtime="20170816 07:31:57.541"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:31:57.543" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:31:57.543" endtime="20170816 07:31:57.544"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:31:57.544" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:31:57.544" endtime="20170816 07:31:57.545"></status>
</kw>
<status status="PASS" starttime="20170816 07:31:57.544" endtime="20170816 07:31:57.545"></status>
</kw>
<status status="PASS" starttime="20170816 07:31:57.542" endtime="20170816 07:31:57.545"></status>
</kw>
<status status="PASS" starttime="20170816 07:31:57.542" endtime="20170816 07:31:57.545"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 07:31:57.661" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170816 07:31:57.661" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:31:57.545" endtime="20170816 07:31:57.661"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:31:57.663" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:31:57.663" endtime="20170816 07:31:57.663"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:31:57.664" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:31:57.664" endtime="20170816 07:31:57.664"></status>
</kw>
<status status="PASS" starttime="20170816 07:31:57.663" endtime="20170816 07:31:57.664"></status>
</kw>
<status status="PASS" starttime="20170816 07:31:57.662" endtime="20170816 07:31:57.664"></status>
</kw>
<status status="PASS" starttime="20170816 07:31:57.662" endtime="20170816 07:31:57.665"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 07:31:57.665" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170816 07:31:57.665" endtime="20170816 07:31:57.665"></status>
</kw>
<msg timestamp="20170816 07:31:57.665" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:31:57.321" endtime="20170816 07:31:57.665"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:31:57.666" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:31:57.665" endtime="20170816 07:31:57.666"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 07:31:57.666" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 07:31:57.667" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 07:31:57.667" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170816 07:31:57.666" endtime="20170816 07:31:57.667"></status>
</kw>
<msg timestamp="20170816 07:31:57.667" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status status="PASS" starttime="20170816 07:31:57.320" endtime="20170816 07:31:57.667"></status>
</kw>
<msg timestamp="20170816 07:31:57.667" level="INFO">${host_state} = Quiesced</msg>
<status status="PASS" starttime="20170816 07:31:57.320" endtime="20170816 07:31:57.667"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170816 07:31:57.668" level="FAIL">Running != Quiesced</msg>
<status status="FAIL" starttime="20170816 07:31:57.668" endtime="20170816 07:31:57.668"></status>
</kw>
<status status="FAIL" starttime="20170816 07:31:57.060" endtime="20170816 07:31:57.668"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 07:32:07.674" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170816 07:32:07.674" endtime="20170816 07:32:07.674"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 07:32:07.675" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170816 07:32:07.675" endtime="20170816 07:32:07.675"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 07:32:07.676" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170816 07:32:07.675" endtime="20170816 07:32:07.676"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 07:32:07.676" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170816 07:32:07.676" endtime="20170816 07:32:07.676"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 07:32:07.858" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170816 07:32:07.677" endtime="20170816 07:32:07.858"></status>
</kw>
<msg timestamp="20170816 07:32:07.858" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 07:32:07.858" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:32:07.677" endtime="20170816 07:32:07.858"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 07:32:07.859" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:32:07.859" endtime="20170816 07:32:07.859"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:32:07.860" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:32:07.859" endtime="20170816 07:32:07.860"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:07.673" endtime="20170816 07:32:07.860"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:07.673" endtime="20170816 07:32:07.860"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:07.672" endtime="20170816 07:32:07.860"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 07:32:07.861" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20170816 07:32:07.860" endtime="20170816 07:32:07.861"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:32:07.863" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:32:07.862" endtime="20170816 07:32:07.863"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:32:07.864" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:32:07.864" endtime="20170816 07:32:07.864"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:07.863" endtime="20170816 07:32:07.864"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:07.862" endtime="20170816 07:32:07.865"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:07.861" endtime="20170816 07:32:07.865"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 07:32:07.939" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170816 07:32:07.939" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:32:07.865" endtime="20170816 07:32:07.939"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:32:07.941" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:32:07.941" endtime="20170816 07:32:07.941"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:32:07.942" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:32:07.942" endtime="20170816 07:32:07.942"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:07.941" endtime="20170816 07:32:07.942"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:07.940" endtime="20170816 07:32:07.942"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:07.940" endtime="20170816 07:32:07.942"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 07:32:07.943" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170816 07:32:07.943" endtime="20170816 07:32:07.943"></status>
</kw>
<msg timestamp="20170816 07:32:07.943" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:32:07.671" endtime="20170816 07:32:07.943"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:32:07.944" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:32:07.943" endtime="20170816 07:32:07.944"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 07:32:07.945" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 07:32:07.945" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 07:32:07.945" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170816 07:32:07.944" endtime="20170816 07:32:07.945"></status>
</kw>
<msg timestamp="20170816 07:32:07.945" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" starttime="20170816 07:32:07.670" endtime="20170816 07:32:07.945"></status>
</kw>
<msg timestamp="20170816 07:32:07.945" level="INFO">${power_state} = On</msg>
<status status="PASS" starttime="20170816 07:32:07.670" endtime="20170816 07:32:07.945"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" starttime="20170816 07:32:07.946" endtime="20170816 07:32:07.946"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:07.669" endtime="20170816 07:32:07.946"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 07:32:07.950" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170816 07:32:07.949" endtime="20170816 07:32:07.950"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 07:32:07.951" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170816 07:32:07.950" endtime="20170816 07:32:07.951"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 07:32:07.951" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170816 07:32:07.951" endtime="20170816 07:32:07.951"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 07:32:07.952" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170816 07:32:07.951" endtime="20170816 07:32:07.952"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 07:32:08.167" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170816 07:32:07.953" endtime="20170816 07:32:08.167"></status>
</kw>
<msg timestamp="20170816 07:32:08.167" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 07:32:08.167" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:32:07.952" endtime="20170816 07:32:08.167"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 07:32:08.168" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:32:08.168" endtime="20170816 07:32:08.168"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:32:08.169" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:32:08.168" endtime="20170816 07:32:08.169"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:07.949" endtime="20170816 07:32:08.169"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:07.948" endtime="20170816 07:32:08.169"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:07.948" endtime="20170816 07:32:08.169"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 07:32:08.170" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" starttime="20170816 07:32:08.169" endtime="20170816 07:32:08.170"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:32:08.172" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:32:08.171" endtime="20170816 07:32:08.172"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:32:08.173" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:32:08.173" endtime="20170816 07:32:08.173"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:08.172" endtime="20170816 07:32:08.173"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:08.170" endtime="20170816 07:32:08.173"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:08.170" endtime="20170816 07:32:08.173"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 07:32:08.335" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170816 07:32:08.335" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:32:08.173" endtime="20170816 07:32:08.335"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:32:08.336" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:32:08.336" endtime="20170816 07:32:08.337"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:32:08.337" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:32:08.337" endtime="20170816 07:32:08.338"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:08.337" endtime="20170816 07:32:08.338"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:08.335" endtime="20170816 07:32:08.338"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:08.335" endtime="20170816 07:32:08.338"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 07:32:08.338" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170816 07:32:08.338" endtime="20170816 07:32:08.338"></status>
</kw>
<msg timestamp="20170816 07:32:08.339" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:32:07.947" endtime="20170816 07:32:08.339"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:32:08.339" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:32:08.339" endtime="20170816 07:32:08.339"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 07:32:08.340" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 07:32:08.340" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 07:32:08.340" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170816 07:32:08.339" endtime="20170816 07:32:08.340"></status>
</kw>
<msg timestamp="20170816 07:32:08.340" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status status="PASS" starttime="20170816 07:32:07.947" endtime="20170816 07:32:08.340"></status>
</kw>
<msg timestamp="20170816 07:32:08.341" level="INFO">${host_state} = Quiesced</msg>
<status status="PASS" starttime="20170816 07:32:07.946" endtime="20170816 07:32:08.341"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170816 07:32:08.341" level="FAIL">Running != Quiesced</msg>
<status status="FAIL" starttime="20170816 07:32:08.341" endtime="20170816 07:32:08.341"></status>
</kw>
<status status="FAIL" starttime="20170816 07:32:07.669" endtime="20170816 07:32:08.341"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 07:32:18.349" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170816 07:32:18.348" endtime="20170816 07:32:18.349"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 07:32:18.350" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170816 07:32:18.350" endtime="20170816 07:32:18.350"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 07:32:18.351" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170816 07:32:18.351" endtime="20170816 07:32:18.351"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 07:32:18.352" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170816 07:32:18.351" endtime="20170816 07:32:18.352"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 07:32:18.531" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170816 07:32:18.353" endtime="20170816 07:32:18.531"></status>
</kw>
<msg timestamp="20170816 07:32:18.532" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 07:32:18.532" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:32:18.353" endtime="20170816 07:32:18.532"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 07:32:18.532" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:32:18.532" endtime="20170816 07:32:18.532"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:32:18.533" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:32:18.533" endtime="20170816 07:32:18.533"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:18.347" endtime="20170816 07:32:18.533"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:18.346" endtime="20170816 07:32:18.534"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:18.345" endtime="20170816 07:32:18.534"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 07:32:18.534" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20170816 07:32:18.534" endtime="20170816 07:32:18.534"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:32:18.536" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:32:18.536" endtime="20170816 07:32:18.536"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:32:18.537" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:32:18.537" endtime="20170816 07:32:18.537"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:18.537" endtime="20170816 07:32:18.538"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:18.535" endtime="20170816 07:32:18.538"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:18.535" endtime="20170816 07:32:18.538"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 07:32:18.600" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170816 07:32:18.600" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:32:18.538" endtime="20170816 07:32:18.600"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:32:18.602" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:32:18.602" endtime="20170816 07:32:18.602"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:32:18.604" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:32:18.603" endtime="20170816 07:32:18.604"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:18.602" endtime="20170816 07:32:18.604"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:18.601" endtime="20170816 07:32:18.604"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:18.601" endtime="20170816 07:32:18.604"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 07:32:18.604" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170816 07:32:18.604" endtime="20170816 07:32:18.604"></status>
</kw>
<msg timestamp="20170816 07:32:18.605" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:32:18.344" endtime="20170816 07:32:18.605"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:32:18.605" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:32:18.605" endtime="20170816 07:32:18.605"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 07:32:18.606" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 07:32:18.606" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 07:32:18.606" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170816 07:32:18.606" endtime="20170816 07:32:18.606"></status>
</kw>
<msg timestamp="20170816 07:32:18.606" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" starttime="20170816 07:32:18.343" endtime="20170816 07:32:18.606"></status>
</kw>
<msg timestamp="20170816 07:32:18.607" level="INFO">${power_state} = On</msg>
<status status="PASS" starttime="20170816 07:32:18.343" endtime="20170816 07:32:18.607"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" starttime="20170816 07:32:18.607" endtime="20170816 07:32:18.607"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:18.343" endtime="20170816 07:32:18.607"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 07:32:18.611" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170816 07:32:18.611" endtime="20170816 07:32:18.611"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 07:32:18.612" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170816 07:32:18.611" endtime="20170816 07:32:18.612"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 07:32:18.612" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170816 07:32:18.612" endtime="20170816 07:32:18.612"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 07:32:18.613" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170816 07:32:18.613" endtime="20170816 07:32:18.613"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 07:32:18.804" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170816 07:32:18.614" endtime="20170816 07:32:18.804"></status>
</kw>
<msg timestamp="20170816 07:32:18.804" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 07:32:18.804" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:32:18.613" endtime="20170816 07:32:18.804"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 07:32:18.805" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:32:18.804" endtime="20170816 07:32:18.805"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:32:18.805" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:32:18.805" endtime="20170816 07:32:18.805"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:18.610" endtime="20170816 07:32:18.805"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:18.610" endtime="20170816 07:32:18.806"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:18.609" endtime="20170816 07:32:18.806"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 07:32:18.806" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" starttime="20170816 07:32:18.806" endtime="20170816 07:32:18.806"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:32:18.809" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:32:18.808" endtime="20170816 07:32:18.809"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:32:18.810" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:32:18.809" endtime="20170816 07:32:18.810"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:18.809" endtime="20170816 07:32:18.810"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:18.807" endtime="20170816 07:32:18.810"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:18.807" endtime="20170816 07:32:18.810"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 07:32:18.937" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170816 07:32:18.937" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:32:18.810" endtime="20170816 07:32:18.937"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:32:18.939" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:32:18.938" endtime="20170816 07:32:18.939"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:32:18.940" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:32:18.939" endtime="20170816 07:32:18.940"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:18.939" endtime="20170816 07:32:18.940"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:18.938" endtime="20170816 07:32:18.940"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:18.937" endtime="20170816 07:32:18.940"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 07:32:18.940" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170816 07:32:18.940" endtime="20170816 07:32:18.940"></status>
</kw>
<msg timestamp="20170816 07:32:18.941" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:32:18.608" endtime="20170816 07:32:18.941"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:32:18.941" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:32:18.941" endtime="20170816 07:32:18.941"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 07:32:18.942" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 07:32:18.942" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 07:32:18.942" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170816 07:32:18.942" endtime="20170816 07:32:18.942"></status>
</kw>
<msg timestamp="20170816 07:32:18.942" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status status="PASS" starttime="20170816 07:32:18.608" endtime="20170816 07:32:18.942"></status>
</kw>
<msg timestamp="20170816 07:32:18.943" level="INFO">${host_state} = Quiesced</msg>
<status status="PASS" starttime="20170816 07:32:18.607" endtime="20170816 07:32:18.943"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170816 07:32:18.943" level="FAIL">Running != Quiesced</msg>
<status status="FAIL" starttime="20170816 07:32:18.943" endtime="20170816 07:32:18.943"></status>
</kw>
<status status="FAIL" starttime="20170816 07:32:18.342" endtime="20170816 07:32:18.943"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 07:32:28.949" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170816 07:32:28.948" endtime="20170816 07:32:28.949"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 07:32:28.950" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170816 07:32:28.949" endtime="20170816 07:32:28.950"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 07:32:28.950" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170816 07:32:28.950" endtime="20170816 07:32:28.950"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 07:32:28.951" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170816 07:32:28.951" endtime="20170816 07:32:28.951"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 07:32:29.149" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170816 07:32:28.952" endtime="20170816 07:32:29.149"></status>
</kw>
<msg timestamp="20170816 07:32:29.150" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 07:32:29.150" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:32:28.952" endtime="20170816 07:32:29.150"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 07:32:29.151" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:32:29.150" endtime="20170816 07:32:29.151"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:32:29.151" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:32:29.151" endtime="20170816 07:32:29.151"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:28.948" endtime="20170816 07:32:29.151"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:28.947" endtime="20170816 07:32:29.152"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:28.947" endtime="20170816 07:32:29.152"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 07:32:29.152" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20170816 07:32:29.152" endtime="20170816 07:32:29.152"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:32:29.154" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:32:29.154" endtime="20170816 07:32:29.154"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:32:29.155" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:32:29.155" endtime="20170816 07:32:29.155"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:29.155" endtime="20170816 07:32:29.156"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:29.153" endtime="20170816 07:32:29.156"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:29.153" endtime="20170816 07:32:29.156"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 07:32:29.224" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170816 07:32:29.224" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:32:29.156" endtime="20170816 07:32:29.224"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:32:29.226" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:32:29.226" endtime="20170816 07:32:29.226"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:32:29.227" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:32:29.227" endtime="20170816 07:32:29.227"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:29.226" endtime="20170816 07:32:29.227"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:29.225" endtime="20170816 07:32:29.227"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:29.225" endtime="20170816 07:32:29.227"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 07:32:29.228" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170816 07:32:29.228" endtime="20170816 07:32:29.228"></status>
</kw>
<msg timestamp="20170816 07:32:29.228" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:32:28.946" endtime="20170816 07:32:29.228"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:32:29.229" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:32:29.228" endtime="20170816 07:32:29.229"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 07:32:29.229" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 07:32:29.229" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 07:32:29.229" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170816 07:32:29.229" endtime="20170816 07:32:29.230"></status>
</kw>
<msg timestamp="20170816 07:32:29.230" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" starttime="20170816 07:32:28.946" endtime="20170816 07:32:29.230"></status>
</kw>
<msg timestamp="20170816 07:32:29.230" level="INFO">${power_state} = On</msg>
<status status="PASS" starttime="20170816 07:32:28.945" endtime="20170816 07:32:29.230"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" starttime="20170816 07:32:29.230" endtime="20170816 07:32:29.231"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:28.945" endtime="20170816 07:32:29.231"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 07:32:29.235" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170816 07:32:29.235" endtime="20170816 07:32:29.235"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 07:32:29.236" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170816 07:32:29.235" endtime="20170816 07:32:29.236"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 07:32:29.236" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170816 07:32:29.236" endtime="20170816 07:32:29.236"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 07:32:29.237" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170816 07:32:29.237" endtime="20170816 07:32:29.237"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 07:32:29.443" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170816 07:32:29.238" endtime="20170816 07:32:29.443"></status>
</kw>
<msg timestamp="20170816 07:32:29.444" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 07:32:29.444" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:32:29.237" endtime="20170816 07:32:29.444"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 07:32:29.444" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:32:29.444" endtime="20170816 07:32:29.444"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:32:29.445" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:32:29.445" endtime="20170816 07:32:29.445"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:29.234" endtime="20170816 07:32:29.445"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:29.233" endtime="20170816 07:32:29.445"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:29.233" endtime="20170816 07:32:29.445"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 07:32:29.446" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" starttime="20170816 07:32:29.446" endtime="20170816 07:32:29.446"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:32:29.448" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:32:29.447" endtime="20170816 07:32:29.448"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:32:29.449" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:32:29.449" endtime="20170816 07:32:29.449"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:29.448" endtime="20170816 07:32:29.449"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:29.447" endtime="20170816 07:32:29.449"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:29.446" endtime="20170816 07:32:29.449"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 07:32:29.540" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170816 07:32:29.540" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:32:29.450" endtime="20170816 07:32:29.540"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:32:29.542" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:32:29.541" endtime="20170816 07:32:29.542"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:32:29.543" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:32:29.543" endtime="20170816 07:32:29.543"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:29.542" endtime="20170816 07:32:29.543"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:29.541" endtime="20170816 07:32:29.544"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:29.540" endtime="20170816 07:32:29.544"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 07:32:29.544" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170816 07:32:29.544" endtime="20170816 07:32:29.544"></status>
</kw>
<msg timestamp="20170816 07:32:29.544" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:32:29.232" endtime="20170816 07:32:29.544"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:32:29.545" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:32:29.545" endtime="20170816 07:32:29.545"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 07:32:29.546" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 07:32:29.546" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 07:32:29.546" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170816 07:32:29.545" endtime="20170816 07:32:29.546"></status>
</kw>
<msg timestamp="20170816 07:32:29.546" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status status="PASS" starttime="20170816 07:32:29.231" endtime="20170816 07:32:29.546"></status>
</kw>
<msg timestamp="20170816 07:32:29.546" level="INFO">${host_state} = Quiesced</msg>
<status status="PASS" starttime="20170816 07:32:29.231" endtime="20170816 07:32:29.546"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170816 07:32:29.547" level="FAIL">Running != Quiesced</msg>
<status status="FAIL" starttime="20170816 07:32:29.547" endtime="20170816 07:32:29.547"></status>
</kw>
<status status="FAIL" starttime="20170816 07:32:28.944" endtime="20170816 07:32:29.547"></status>
</kw>
<msg timestamp="20170816 07:32:29.547" level="FAIL">Keyword 'Is Host Running' failed after retrying for 10 minutes. The last error was: Running != Quiesced</msg>
<status status="FAIL" starttime="20170816 07:22:23.479" endtime="20170816 07:32:29.547"></status>
</kw>
<status status="FAIL" starttime="20170816 07:22:22.451" endtime="20170816 07:32:29.548"></status>
</kw>
<status status="FAIL" starttime="20170816 07:22:13.891" endtime="20170816 07:32:29.548"></status>
</kw>
<status status="FAIL" starttime="20170816 07:22:13.890" endtime="20170816 07:32:29.548"></status>
</kw>
<kw type="teardown" name="Test Exit Logs">
<doc>Collect FFDC and SOL log.</doc>
<kw library="openbmc_ffdc" name="FFDC On Test Case Fail">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw library="state_manager" name="Is Host Quiesced">
<doc>Check if host state is quiesced.</doc>
<assign>
<var>${status}</var>
</assign>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 07:32:29.553" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170816 07:32:29.552" endtime="20170816 07:32:29.553"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 07:32:29.554" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170816 07:32:29.553" endtime="20170816 07:32:29.554"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 07:32:29.554" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170816 07:32:29.554" endtime="20170816 07:32:29.554"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 07:32:29.555" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170816 07:32:29.555" endtime="20170816 07:32:29.555"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 07:32:29.855" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170816 07:32:29.556" endtime="20170816 07:32:29.855"></status>
</kw>
<msg timestamp="20170816 07:32:29.855" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 07:32:29.855" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:32:29.555" endtime="20170816 07:32:29.855"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 07:32:29.856" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:32:29.856" endtime="20170816 07:32:29.856"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:32:29.857" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:32:29.857" endtime="20170816 07:32:29.857"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:29.552" endtime="20170816 07:32:29.857"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:29.551" endtime="20170816 07:32:29.857"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:29.551" endtime="20170816 07:32:29.857"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 07:32:29.858" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" starttime="20170816 07:32:29.858" endtime="20170816 07:32:29.858"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:32:29.860" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:32:29.860" endtime="20170816 07:32:29.860"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:32:29.861" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:32:29.861" endtime="20170816 07:32:29.861"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:29.860" endtime="20170816 07:32:29.861"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:29.859" endtime="20170816 07:32:29.861"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:29.858" endtime="20170816 07:32:29.862"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 07:32:29.958" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170816 07:32:29.958" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:32:29.862" endtime="20170816 07:32:29.958"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:32:29.960" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:32:29.959" endtime="20170816 07:32:29.960"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:32:29.961" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:32:29.960" endtime="20170816 07:32:29.961"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:29.960" endtime="20170816 07:32:29.961"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:29.959" endtime="20170816 07:32:29.961"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:29.958" endtime="20170816 07:32:29.961"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 07:32:29.961" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170816 07:32:29.961" endtime="20170816 07:32:29.961"></status>
</kw>
<msg timestamp="20170816 07:32:29.962" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:32:29.550" endtime="20170816 07:32:29.962"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:32:29.962" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:32:29.962" endtime="20170816 07:32:29.962"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 07:32:29.963" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 07:32:29.963" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 07:32:29.963" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170816 07:32:29.963" endtime="20170816 07:32:29.963"></status>
</kw>
<msg timestamp="20170816 07:32:29.963" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status status="PASS" starttime="20170816 07:32:29.550" endtime="20170816 07:32:29.963"></status>
</kw>
<msg timestamp="20170816 07:32:29.964" level="INFO">${host_state} = Quiesced</msg>
<status status="PASS" starttime="20170816 07:32:29.549" endtime="20170816 07:32:29.964"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<status status="PASS" starttime="20170816 07:32:29.965" endtime="20170816 07:32:29.965"></status>
</kw>
<msg timestamp="20170816 07:32:29.965" level="INFO">${status} = True</msg>
<status status="PASS" starttime="20170816 07:32:29.964" endtime="20170816 07:32:29.965"></status>
</kw>
<msg timestamp="20170816 07:32:29.965" level="INFO">${status} = True</msg>
<status status="PASS" starttime="20170816 07:32:29.549" endtime="20170816 07:32:29.965"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL' or '${status}'=='True'</arg>
<arg>FFDC</arg>
</arguments>
<kw library="openbmc_ffdc" name="Ffdc">
<doc>Gather First Failure Data Capture (FFDC).</doc>
<kw library="utils" name="Ping Host">
<arguments>
<arg>9.41.166.169</arg>
</arguments>
<kw library="BuiltIn" name="Should Not Be Empty">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170816 07:32:29.993" level="INFO">Length is 12</msg>
<status status="PASS" starttime="20170816 07:32:29.993" endtime="20170816 07:32:29.994"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170816 07:32:29.999" level="INFO">Running command 'ping -c 4 9.41.166.169 2&gt;&amp;1'.</msg>
<msg timestamp="20170816 07:32:33.012" level="INFO">${RC} = 0</msg>
<msg timestamp="20170816 07:32:33.012" level="INFO">${output} = PING 9.41.166.169 (9.41.166.169) 56(84) bytes of data.
64 bytes from 9.41.166.169: icmp_seq=1 ttl=63 time=1.47 ms
64 bytes from 9.41.166.169: icmp_seq=2 ttl=63 time=0.626 ms
64 bytes from 9.41.166.169...</msg>
<status status="PASS" starttime="20170816 07:32:29.994" endtime="20170816 07:32:33.012"></status>
</kw>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170816 07:32:33.015" level="INFO">RC: 0
Output:
PING 9.41.166.169 (9.41.166.169) 56(84) bytes of data.
64 bytes from 9.41.166.169: icmp_seq=1 ttl=63 time=1.47 ms
64 bytes from 9.41.166.169: icmp_seq=2 ttl=63 time=0.626 ms
64 bytes from 9.41.166.169: icmp_seq=3 ttl=63 time=0.604 ms
64 bytes from 9.41.166.169: icmp_seq=4 ttl=63 time=0.584 ms

--- 9.41.166.169 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 2999ms
rtt min/avg/max/mdev = 0.584/0.822/1.477/0.379 ms</msg>
<status status="PASS" starttime="20170816 07:32:33.015" endtime="20170816 07:32:33.015"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" starttime="20170816 07:32:33.016" endtime="20170816 07:32:33.016"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:29.992" endtime="20170816 07:32:33.017"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Get Current Time Stamp">
<doc>Get the current time stamp data</doc>
<kw library="DateTime" name="Get Current Date">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170816 07:32:33.031" level="INFO">${cur_time} = 2017-08-16 07:32:33:030367</msg>
<status status="PASS" starttime="20170816 07:32:33.030" endtime="20170816 07:32:33.031"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170816 07:32:33.031" level="INFO">${cur_time} = 20170816073233030367</msg>
<status status="PASS" starttime="20170816 07:32:33.031" endtime="20170816 07:32:33.031"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:33.030" endtime="20170816 07:32:33.031"></status>
</kw>
<msg timestamp="20170816 07:32:33.032" level="INFO">${FFDC_TIME} = 20170816073233030367</msg>
<kw library="openbmc_ffdc_utils" name="Get Test Dir and Name">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20170816 07:32:33.043" level="INFO">${suite_name} = TestsTestBasicPoweron</msg>
<status status="PASS" starttime="20170816 07:32:33.042" endtime="20170816 07:32:33.043"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20170816 07:32:33.043" level="INFO">${suite_name} = 20170816073233030367_TestsTestBasicPoweron</msg>
<status status="PASS" starttime="20170816 07:32:33.043" endtime="20170816 07:32:33.043"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20170816 07:32:33.044" level="INFO">${test_name} = PowerOnTest</msg>
<status status="PASS" starttime="20170816 07:32:33.044" endtime="20170816 07:32:33.044"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20170816 07:32:33.045" level="INFO">${test_name} = 20170816073233030367_PowerOnTest</msg>
<status status="PASS" starttime="20170816 07:32:33.044" endtime="20170816 07:32:33.045"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:33.042" endtime="20170816 07:32:33.045"></status>
</kw>
<msg timestamp="20170816 07:32:33.045" level="INFO">${FFDC_DIR_PATH} = /tmp/fspcibld/2147/obmc-robot/logs/20170816073233030367_TestsTestBasicPoweron/20170816073233030367_PowerOnTest/</msg>
<msg timestamp="20170816 07:32:33.045" level="INFO">${FFDC_PREFIX} = 20170816073233030367_</msg>
<msg timestamp="20170816 07:32:33.065" level="INFO">${LOG_PREFIX} = /tmp/fspcibld/2147/obmc-robot/logs/20170816073233030367_TestsTestBasicPoweron/20170816073233030367_PowerOnTest/20170816073233030367_</msg>
<kw library="OperatingSystem" name="Create Directory">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>/tmp/fspcibld/2147/obmc-robot/logs/20170816073233030367_TestsTestBasicPoweron/20170816073233030367_PowerOnTest/</arg>
</arguments>
<msg html="yes" timestamp="20170816 07:32:33.067" level="INFO">Created directory '&lt;a href="file:///tmp/fspcibld/2147/obmc-robot/logs/20170816073233030367_TestsTestBasicPoweron/20170816073233030367_PowerOnTest"&gt;/tmp/fspcibld/2147/obmc-robot/logs/20170816073233030367_TestsTestBasicPoweron/20170816073233030367_PowerOnTest&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170816 07:32:33.066" endtime="20170816 07:32:33.067"></status>
</kw>
<msg timestamp="20170816 07:32:33.071" level="INFO">${FFDC_FILE_PATH} = /tmp/fspcibld/2147/obmc-robot/logs/20170816073233030367_TestsTestBasicPoweron/20170816073233030367_PowerOnTest/20170816073233030367_BMC_general.txt</msg>
<kw library="openbmc_ffdc_utils" name="Header Message">
<doc>Write header message to the report document manifest.</doc>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${HEADER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170816 07:32:33.095" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/2147/obmc-robot/logs/20170816073233030367_TestsTestBasicPoweron/20170816073233030367_PowerOnTest/20170816073233030367_BMC_general.txt"&gt;/tmp/fspcibld/2147/obmc-robot/logs/20170816073233030367_TestsTestBasicPoweron/20170816073233030367_PowerOnTest/20170816073233030367_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170816 07:32:33.095" endtime="20170816 07:32:33.095"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:33.094" endtime="20170816 07:32:33.096"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170816 07:32:33.097" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/2147/obmc-robot/logs/20170816073233030367_TestsTestBasicPoweron/20170816073233030367_PowerOnTest/20170816073233030367_BMC_general.txt"&gt;/tmp/fspcibld/2147/obmc-robot/logs/20170816073233030367_TestsTestBasicPoweron/20170816073233030367_PowerOnTest/20170816073233030367_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170816 07:32:33.096" endtime="20170816 07:32:33.097"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:33.096" endtime="20170816 07:32:33.097"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Suite File\t\t: ${SUITE_NAME} ${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170816 07:32:33.098" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/2147/obmc-robot/logs/20170816073233030367_TestsTestBasicPoweron/20170816073233030367_PowerOnTest/20170816073233030367_BMC_general.txt"&gt;/tmp/fspcibld/2147/obmc-robot/logs/20170816073233030367_TestsTestBasicPoweron/20170816073233030367_PowerOnTest/20170816073233030367_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170816 07:32:33.098" endtime="20170816 07:32:33.098"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:33.097" endtime="20170816 07:32:33.099"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Case Name\t\t: ${TEST_NAME}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170816 07:32:33.100" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/2147/obmc-robot/logs/20170816073233030367_TestsTestBasicPoweron/20170816073233030367_PowerOnTest/20170816073233030367_BMC_general.txt"&gt;/tmp/fspcibld/2147/obmc-robot/logs/20170816073233030367_TestsTestBasicPoweron/20170816073233030367_PowerOnTest/20170816073233030367_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170816 07:32:33.099" endtime="20170816 07:32:33.100"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:33.099" endtime="20170816 07:32:33.100"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Source File\t: ${SUITE_SOURCE}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170816 07:32:33.101" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/2147/obmc-robot/logs/20170816073233030367_TestsTestBasicPoweron/20170816073233030367_PowerOnTest/20170816073233030367_BMC_general.txt"&gt;/tmp/fspcibld/2147/obmc-robot/logs/20170816073233030367_TestsTestBasicPoweron/20170816073233030367_PowerOnTest/20170816073233030367_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170816 07:32:33.101" endtime="20170816 07:32:33.101"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:33.100" endtime="20170816 07:32:33.101"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Failure Time Stamp\t: ${FFDC_TIME}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170816 07:32:33.102" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/2147/obmc-robot/logs/20170816073233030367_TestsTestBasicPoweron/20170816073233030367_PowerOnTest/20170816073233030367_BMC_general.txt"&gt;/tmp/fspcibld/2147/obmc-robot/logs/20170816073233030367_TestsTestBasicPoweron/20170816073233030367_PowerOnTest/20170816073233030367_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170816 07:32:33.102" endtime="20170816 07:32:33.102"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:33.101" endtime="20170816 07:32:33.103"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Error Message\t: ${TEST_MESSAGE}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170816 07:32:33.104" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/2147/obmc-robot/logs/20170816073233030367_TestsTestBasicPoweron/20170816073233030367_PowerOnTest/20170816073233030367_BMC_general.txt"&gt;/tmp/fspcibld/2147/obmc-robot/logs/20170816073233030367_TestsTestBasicPoweron/20170816073233030367_PowerOnTest/20170816073233030367_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170816 07:32:33.103" endtime="20170816 07:32:33.104"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:33.103" endtime="20170816 07:32:33.104"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Documentation\t:${\n}${TEST_DOCUMENTATION}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170816 07:32:33.105" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/2147/obmc-robot/logs/20170816073233030367_TestsTestBasicPoweron/20170816073233030367_PowerOnTest/20170816073233030367_BMC_general.txt"&gt;/tmp/fspcibld/2147/obmc-robot/logs/20170816073233030367_TestsTestBasicPoweron/20170816073233030367_PowerOnTest/20170816073233030367_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170816 07:32:33.105" endtime="20170816 07:32:33.105"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:33.104" endtime="20170816 07:32:33.105"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170816 07:32:33.107" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/2147/obmc-robot/logs/20170816073233030367_TestsTestBasicPoweron/20170816073233030367_PowerOnTest/20170816073233030367_BMC_general.txt"&gt;/tmp/fspcibld/2147/obmc-robot/logs/20170816073233030367_TestsTestBasicPoweron/20170816073233030367_PowerOnTest/20170816073233030367_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170816 07:32:33.106" endtime="20170816 07:32:33.107"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:33.106" endtime="20170816 07:32:33.107"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Test Setup Info">
<doc>BMC IP, Model and other information</doc>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170816 07:32:33.108" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/2147/obmc-robot/logs/20170816073233030367_TestsTestBasicPoweron/20170816073233030367_PowerOnTest/20170816073233030367_BMC_general.txt"&gt;/tmp/fspcibld/2147/obmc-robot/logs/20170816073233030367_TestsTestBasicPoweron/20170816073233030367_PowerOnTest/20170816073233030367_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170816 07:32:33.108" endtime="20170816 07:32:33.108"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:33.107" endtime="20170816 07:32:33.109"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Setup Information:</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170816 07:32:33.109" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/2147/obmc-robot/logs/20170816073233030367_TestsTestBasicPoweron/20170816073233030367_PowerOnTest/20170816073233030367_BMC_general.txt"&gt;/tmp/fspcibld/2147/obmc-robot/logs/20170816073233030367_TestsTestBasicPoweron/20170816073233030367_PowerOnTest/20170816073233030367_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170816 07:32:33.109" endtime="20170816 07:32:33.110"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:33.109" endtime="20170816 07:32:33.110"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170816 07:32:33.111" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/2147/obmc-robot/logs/20170816073233030367_TestsTestBasicPoweron/20170816073233030367_PowerOnTest/20170816073233030367_BMC_general.txt"&gt;/tmp/fspcibld/2147/obmc-robot/logs/20170816073233030367_TestsTestBasicPoweron/20170816073233030367_PowerOnTest/20170816073233030367_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170816 07:32:33.111" endtime="20170816 07:32:33.111"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:33.110" endtime="20170816 07:32:33.111"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>OPENBMC HOST \t: ${OPENBMC_HOST}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170816 07:32:33.112" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/2147/obmc-robot/logs/20170816073233030367_TestsTestBasicPoweron/20170816073233030367_PowerOnTest/20170816073233030367_BMC_general.txt"&gt;/tmp/fspcibld/2147/obmc-robot/logs/20170816073233030367_TestsTestBasicPoweron/20170816073233030367_PowerOnTest/20170816073233030367_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170816 07:32:33.112" endtime="20170816 07:32:33.112"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:33.111" endtime="20170816 07:32:33.112"></status>
</kw>
<kw library="utils" name="Get BMC System Model">
<doc>Get the BMC model from the device tree.</doc>
<assign>
<var>${model_name}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20170816 07:32:33.141" level="INFO">encoding=UTF-8
prompt=# 
alias=bmc_connection
term_type=vt100
newline=

host=9.41.166.169
width=80
port=22
timeout=25 seconds
path_separator=/
index=1
height=24</msg>
<msg timestamp="20170816 07:32:33.141" level="INFO">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg timestamp="20170816 07:32:33.219" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170816 07:32:33.228" level="INFO">${bmc_model} = Witherspoon</msg>
<msg timestamp="20170816 07:32:33.228" level="INFO">${stderr} = </msg>
<msg timestamp="20170816 07:32:33.228" level="INFO">${rc} = 0</msg>
<status status="PASS" starttime="20170816 07:32:33.113" endtime="20170816 07:32:33.228"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170816 07:32:33.229" level="INFO">Length is 0</msg>
<status status="PASS" starttime="20170816 07:32:33.229" endtime="20170816 07:32:33.229"></status>
</kw>
<kw library="BuiltIn" name="Should Not Be Empty">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg timestamp="20170816 07:32:33.230" level="INFO">Length is 11</msg>
<status status="PASS" starttime="20170816 07:32:33.229" endtime="20170816 07:32:33.230"></status>
</kw>
<msg timestamp="20170816 07:32:33.230" level="INFO">${model_name} = Witherspoon</msg>
<status status="PASS" starttime="20170816 07:32:33.113" endtime="20170816 07:32:33.230"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>SYSTEM TYPE \t: ${model_name}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170816 07:32:33.231" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/2147/obmc-robot/logs/20170816073233030367_TestsTestBasicPoweron/20170816073233030367_PowerOnTest/20170816073233030367_BMC_general.txt"&gt;/tmp/fspcibld/2147/obmc-robot/logs/20170816073233030367_TestsTestBasicPoweron/20170816073233030367_PowerOnTest/20170816073233030367_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170816 07:32:33.231" endtime="20170816 07:32:33.231"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:33.230" endtime="20170816 07:32:33.231"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:33.107" endtime="20170816 07:32:33.232"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${MSG_INTRO}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170816 07:32:33.233" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/2147/obmc-robot/logs/20170816073233030367_TestsTestBasicPoweron/20170816073233030367_PowerOnTest/20170816073233030367_BMC_general.txt"&gt;/tmp/fspcibld/2147/obmc-robot/logs/20170816073233030367_TestsTestBasicPoweron/20170816073233030367_PowerOnTest/20170816073233030367_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170816 07:32:33.232" endtime="20170816 07:32:33.233"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:33.232" endtime="20170816 07:32:33.233"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Ffdc Cmd Index">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170816 07:32:33.233" level="INFO">@{entries} = [ DRIVER INFO | APPLICATION DATA | BMC DATA ]</msg>
<status status="PASS" starttime="20170816 07:32:33.233" endtime="20170816 07:32:33.233"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = DRIVER INFO">
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170816 07:32:33.235" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/2147/obmc-robot/logs/20170816073233030367_TestsTestBasicPoweron/20170816073233030367_PowerOnTest/20170816073233030367_BMC_general.txt"&gt;/tmp/fspcibld/2147/obmc-robot/logs/20170816073233030367_TestsTestBasicPoweron/20170816073233030367_PowerOnTest/20170816073233030367_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170816 07:32:33.235" endtime="20170816 07:32:33.235"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:33.234" endtime="20170816 07:32:33.235"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170816 07:32:33.236" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/2147/obmc-robot/logs/20170816073233030367_TestsTestBasicPoweron/20170816073233030367_PowerOnTest/20170816073233030367_BMC_general.txt"&gt;/tmp/fspcibld/2147/obmc-robot/logs/20170816073233030367_TestsTestBasicPoweron/20170816073233030367_PowerOnTest/20170816073233030367_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170816 07:32:33.236" endtime="20170816 07:32:33.236"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:33.235" endtime="20170816 07:32:33.236"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:33.234" endtime="20170816 07:32:33.236"></status>
</kw>
<kw type="foritem" name="${index} = APPLICATION DATA">
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170816 07:32:33.238" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/2147/obmc-robot/logs/20170816073233030367_TestsTestBasicPoweron/20170816073233030367_PowerOnTest/20170816073233030367_BMC_general.txt"&gt;/tmp/fspcibld/2147/obmc-robot/logs/20170816073233030367_TestsTestBasicPoweron/20170816073233030367_PowerOnTest/20170816073233030367_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170816 07:32:33.237" endtime="20170816 07:32:33.238"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:33.237" endtime="20170816 07:32:33.238"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170816 07:32:33.239" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/2147/obmc-robot/logs/20170816073233030367_TestsTestBasicPoweron/20170816073233030367_PowerOnTest/20170816073233030367_BMC_general.txt"&gt;/tmp/fspcibld/2147/obmc-robot/logs/20170816073233030367_TestsTestBasicPoweron/20170816073233030367_PowerOnTest/20170816073233030367_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170816 07:32:33.238" endtime="20170816 07:32:33.239"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:33.238" endtime="20170816 07:32:33.239"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:33.236" endtime="20170816 07:32:33.239"></status>
</kw>
<kw type="foritem" name="${index} = BMC DATA">
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170816 07:32:33.240" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/2147/obmc-robot/logs/20170816073233030367_TestsTestBasicPoweron/20170816073233030367_PowerOnTest/20170816073233030367_BMC_general.txt"&gt;/tmp/fspcibld/2147/obmc-robot/logs/20170816073233030367_TestsTestBasicPoweron/20170816073233030367_PowerOnTest/20170816073233030367_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170816 07:32:33.240" endtime="20170816 07:32:33.240"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:33.239" endtime="20170816 07:32:33.241"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170816 07:32:33.242" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/2147/obmc-robot/logs/20170816073233030367_TestsTestBasicPoweron/20170816073233030367_PowerOnTest/20170816073233030367_BMC_general.txt"&gt;/tmp/fspcibld/2147/obmc-robot/logs/20170816073233030367_TestsTestBasicPoweron/20170816073233030367_PowerOnTest/20170816073233030367_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170816 07:32:33.241" endtime="20170816 07:32:33.242"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:33.241" endtime="20170816 07:32:33.242"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:33.239" endtime="20170816 07:32:33.242"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:33.234" endtime="20170816 07:32:33.242"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${MSG_DETAIL}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170816 07:32:33.243" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/2147/obmc-robot/logs/20170816073233030367_TestsTestBasicPoweron/20170816073233030367_PowerOnTest/20170816073233030367_BMC_general.txt"&gt;/tmp/fspcibld/2147/obmc-robot/logs/20170816073233030367_TestsTestBasicPoweron/20170816073233030367_PowerOnTest/20170816073233030367_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170816 07:32:33.243" endtime="20170816 07:32:33.243"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:33.242" endtime="20170816 07:32:33.243"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:33.094" endtime="20170816 07:32:33.243"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Call FFDC Methods">
<doc>Call into FFDC Keyword index list.</doc>
<arguments>
<arg>ffdc_function_list=</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Method Index">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170816 07:32:33.250" level="INFO">@{entries} = [ BMC LOGS ]</msg>
<status status="PASS" starttime="20170816 07:32:33.249" endtime="20170816 07:32:33.250"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC LOGS">
<kw library="openbmc_ffdc_methods" name="Method Call Keyword List">
<doc>Iterate the list through keyword index.</doc>
<arguments>
<arg>${index}</arg>
<arg>${ffdc_function_list}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Method Call">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<assign>
<var>@{method_list}</var>
</assign>
<msg timestamp="20170816 07:32:33.252" level="INFO">@{method_list} = [ ('Get Request FFDC', 'BMC FFDC Get Requests') | ('FFDC Generic Report', 'BMC FFDC Manifest') | ('OS FFDC', 'OS FFDC Files') | ('SEL Log', 'Collect eSEL Log') | ('BMC Specific Files', 'BMC FFDC Files...</msg>
<status status="PASS" starttime="20170816 07:32:33.251" endtime="20170816 07:32:33.252"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ffdc_function_list}' == '${EMPTY}'</arg>
<arg>Get FFDC Method Desc</arg>
<arg>${index}</arg>
<arg>ELSE</arg>
<arg>Split String</arg>
<arg>${ffdc_function_list}</arg>
<arg>separator=:</arg>
</arguments>
<assign>
<var>@{ffdc_function_list}</var>
</assign>
<kw library="openbmc_ffdc_list" name="Get Ffdc Method Desc">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<status status="PASS" starttime="20170816 07:32:33.253" endtime="20170816 07:32:33.253"></status>
</kw>
<msg timestamp="20170816 07:32:33.253" level="INFO">@{ffdc_function_list} = [ Get Request FFDC | FFDC Generic Report | OS FFDC | SEL Log | BMC Specific Files | Core Files ]</msg>
<status status="PASS" starttime="20170816 07:32:33.252" endtime="20170816 07:32:33.253"></status>
</kw>
<kw type="for" name="${method} IN [ @{method_list} ]">
<kw type="foritem" name="${method} = ('Get Request FFDC', 'BMC FFDC Get Requests')">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="Collections" name="List Should Contain Value">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" starttime="20170816 07:32:33.255" endtime="20170816 07:32:33.255"></status>
</kw>
<msg timestamp="20170816 07:32:33.255" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 07:32:33.255" level="INFO">${ret_values} = None</msg>
<status status="PASS" starttime="20170816 07:32:33.254" endtime="20170816 07:32:33.255"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" starttime="20170816 07:32:33.256" endtime="20170816 07:32:33.256"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="BMC FFDC Get Requests">
<doc>Get the command list and iterate</doc>
<kw library="openbmc_ffdc_list" name="Get Ffdc Get Request Index">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170816 07:32:33.284" level="INFO">@{entries} = [ GET REQUESTS ]</msg>
<status status="PASS" starttime="20170816 07:32:33.284" endtime="20170816 07:32:33.285"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = GET REQUESTS">
<kw library="openbmc_ffdc_methods" name="Log FFDC Get Requests">
<doc>Create file in current FFDC log directory.</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Get Request">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170816 07:32:33.286" level="INFO">@{cmd_list} = [ ('BMC_elog', '/xyz/openbmc_project/logging/entry/enumerate') | ('BMC_record_log', '/org/openbmc/control/led/enumerate') | ('BMC_sensor_list', '/org/openbmc/sensors/enumerate') | ('BMC_inventory', '/...</msg>
<status status="PASS" starttime="20170816 07:32:33.285" endtime="20170816 07:32:33.286"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC_elog', '/xyz/openbmc_project/logging/entry/enumerate')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170816 07:32:33.287" level="INFO">${logpath} = /tmp/fspcibld/2147/obmc-robot/logs/20170816073233030367_TestsTestBasicPoweron/20170816073233030367_PowerOnTest/20170816073233030367_BMC_elog.txt</msg>
<status status="PASS" starttime="20170816 07:32:33.286" endtime="20170816 07:32:33.287"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 07:32:33.291" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170816 07:32:33.290" endtime="20170816 07:32:33.291"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 07:32:33.292" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170816 07:32:33.292" endtime="20170816 07:32:33.292"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 07:32:33.293" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170816 07:32:33.293" endtime="20170816 07:32:33.293"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 07:32:33.294" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170816 07:32:33.293" endtime="20170816 07:32:33.294"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 07:32:33.544" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170816 07:32:33.295" endtime="20170816 07:32:33.545"></status>
</kw>
<msg timestamp="20170816 07:32:33.545" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 07:32:33.545" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:32:33.295" endtime="20170816 07:32:33.545"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 07:32:33.545" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:32:33.545" endtime="20170816 07:32:33.546"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:32:33.546" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:32:33.546" endtime="20170816 07:32:33.546"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:33.289" endtime="20170816 07:32:33.547"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:33.289" endtime="20170816 07:32:33.547"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:33.288" endtime="20170816 07:32:33.547"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 07:32:33.547" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/enumerate</msg>
<status status="PASS" starttime="20170816 07:32:33.547" endtime="20170816 07:32:33.547"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20170816 07:32:33.548" endtime="20170816 07:32:33.548"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 07:32:33.818" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/enumerate, headers=None json=None</msg>
<msg timestamp="20170816 07:32:33.818" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:32:33.548" endtime="20170816 07:32:33.818"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" starttime="20170816 07:32:33.819" endtime="20170816 07:32:33.819"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 07:32:33.820" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170816 07:32:33.819" endtime="20170816 07:32:33.820"></status>
</kw>
<msg timestamp="20170816 07:32:33.820" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:32:33.287" endtime="20170816 07:32:33.820"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:32:33.821" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:32:33.821" endtime="20170816 07:32:33.821"></status>
</kw>
<msg timestamp="20170816 07:32:33.821" level="INFO">${status} = True</msg>
<status status="PASS" starttime="20170816 07:32:33.820" endtime="20170816 07:32:33.821"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" starttime="20170816 07:32:33.821" endtime="20170816 07:32:33.822"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170816 07:32:33.823" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/logging/entry/1": {
      "AdditionalData": [], 
      "Id": 1, 
      "Message": "xyz.openbmc_project.Software.Version.Error.ManifestFileFailure", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1501775112177, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/2": {
      "AdditionalData": [], 
      "Id": 2, 
      "Message": "org.open_power.Host.Error.Checkstop", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1501775421426, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/3": {
      "AdditionalData": [], 
      "Id": 3, 
      "Message": "org.open_power.Host.Error.Checkstop", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1501775519097, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/4": {
      "AdditionalData": [], 
      "Id": 4, 
      "Message": "org.open_power.Host.Error.Checkstop", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1501775616425, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/5": {
      "AdditionalData": [], 
      "Id": 5, 
      "Message": "org.open_power.Host.Error.Checkstop", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1501775713797, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/6": {
      "AdditionalData": [], 
      "Id": 6, 
      "Message": "org.open_power.Host.Error.WatchdogTimedOut", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1501775792999, 
      "associations": []
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 07:32:33.823" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170816 07:32:33.823" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/logging/entry/1": {
            "AdditionalData": [],
            "Id": 1,
            "Message": "xyz.openbmc_project.Software.Version.Error.ManifestFile...</msg>
<status status="PASS" starttime="20170816 07:32:33.822" endtime="20170816 07:32:33.823"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170816 07:32:33.825" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/2147/obmc-robot/logs/20170816073233030367_TestsTestBasicPoweron/20170816073233030367_PowerOnTest/20170816073233030367_BMC_elog.txt"&gt;/tmp/fspcibld/2147/obmc-robot/logs/20170816073233030367_TestsTestBasicPoweron/20170816073233030367_PowerOnTest/20170816073233030367_BMC_elog.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170816 07:32:33.824" endtime="20170816 07:32:33.825"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:33.823" endtime="20170816 07:32:33.825"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:33.286" endtime="20170816 07:32:33.825"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_record_log', '/org/openbmc/control/led/enumerate')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170816 07:32:33.826" level="INFO">${logpath} = /tmp/fspcibld/2147/obmc-robot/logs/20170816073233030367_TestsTestBasicPoweron/20170816073233030367_PowerOnTest/20170816073233030367_BMC_record_log.txt</msg>
<status status="PASS" starttime="20170816 07:32:33.825" endtime="20170816 07:32:33.826"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 07:32:33.829" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170816 07:32:33.828" endtime="20170816 07:32:33.829"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 07:32:33.830" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170816 07:32:33.829" endtime="20170816 07:32:33.830"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 07:32:33.830" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170816 07:32:33.830" endtime="20170816 07:32:33.830"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 07:32:33.831" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170816 07:32:33.831" endtime="20170816 07:32:33.831"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 07:32:34.013" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170816 07:32:33.832" endtime="20170816 07:32:34.014"></status>
</kw>
<msg timestamp="20170816 07:32:34.014" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 07:32:34.014" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:32:33.831" endtime="20170816 07:32:34.014"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 07:32:34.015" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:32:34.014" endtime="20170816 07:32:34.015"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:32:34.015" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:32:34.015" endtime="20170816 07:32:34.015"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:33.828" endtime="20170816 07:32:34.016"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:33.827" endtime="20170816 07:32:34.016"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:33.827" endtime="20170816 07:32:34.016"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 07:32:34.016" level="INFO">${base_uri} = /org/openbmc/control/led/enumerate</msg>
<status status="PASS" starttime="20170816 07:32:34.016" endtime="20170816 07:32:34.016"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20170816 07:32:34.017" endtime="20170816 07:32:34.017"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 07:32:34.059" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/led/enumerate, headers=None json=None</msg>
<msg timestamp="20170816 07:32:34.060" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" starttime="20170816 07:32:34.017" endtime="20170816 07:32:34.060"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" starttime="20170816 07:32:34.060" endtime="20170816 07:32:34.060"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 07:32:34.061" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170816 07:32:34.061" endtime="20170816 07:32:34.061"></status>
</kw>
<msg timestamp="20170816 07:32:34.061" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" starttime="20170816 07:32:33.826" endtime="20170816 07:32:34.061"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:32:34.062" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170816 07:32:34.062" level="FAIL">404 != 200</msg>
<status status="FAIL" starttime="20170816 07:32:34.062" endtime="20170816 07:32:34.062"></status>
</kw>
<msg timestamp="20170816 07:32:34.062" level="INFO">${status} = False</msg>
<status status="PASS" starttime="20170816 07:32:34.061" endtime="20170816 07:32:34.062"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw library="BuiltIn" name="Continue For Loop">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg timestamp="20170816 07:32:34.063" level="INFO">Continuing for loop from the next iteration.</msg>
<status status="PASS" starttime="20170816 07:32:34.063" endtime="20170816 07:32:34.063"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:34.063" endtime="20170816 07:32:34.064"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:33.825" endtime="20170816 07:32:34.064"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_sensor_list', '/org/openbmc/sensors/enumerate')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170816 07:32:34.065" level="INFO">${logpath} = /tmp/fspcibld/2147/obmc-robot/logs/20170816073233030367_TestsTestBasicPoweron/20170816073233030367_PowerOnTest/20170816073233030367_BMC_sensor_list.txt</msg>
<status status="PASS" starttime="20170816 07:32:34.064" endtime="20170816 07:32:34.065"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 07:32:34.068" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170816 07:32:34.067" endtime="20170816 07:32:34.068"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 07:32:34.069" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170816 07:32:34.068" endtime="20170816 07:32:34.069"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 07:32:34.069" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170816 07:32:34.069" endtime="20170816 07:32:34.069"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 07:32:34.070" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170816 07:32:34.070" endtime="20170816 07:32:34.070"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 07:32:34.265" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170816 07:32:34.071" endtime="20170816 07:32:34.265"></status>
</kw>
<msg timestamp="20170816 07:32:34.265" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 07:32:34.265" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:32:34.070" endtime="20170816 07:32:34.265"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 07:32:34.266" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:32:34.265" endtime="20170816 07:32:34.266"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:32:34.266" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:32:34.266" endtime="20170816 07:32:34.266"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:34.067" endtime="20170816 07:32:34.267"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:34.066" endtime="20170816 07:32:34.267"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:34.065" endtime="20170816 07:32:34.267"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 07:32:34.267" level="INFO">${base_uri} = /org/openbmc/sensors/enumerate</msg>
<status status="PASS" starttime="20170816 07:32:34.267" endtime="20170816 07:32:34.267"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20170816 07:32:34.268" endtime="20170816 07:32:34.268"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 07:32:34.454" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/enumerate, headers=None json=None</msg>
<msg timestamp="20170816 07:32:34.454" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:32:34.268" endtime="20170816 07:32:34.454"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" starttime="20170816 07:32:34.455" endtime="20170816 07:32:34.455"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 07:32:34.455" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170816 07:32:34.455" endtime="20170816 07:32:34.456"></status>
</kw>
<msg timestamp="20170816 07:32:34.456" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:32:34.065" endtime="20170816 07:32:34.456"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:32:34.457" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:32:34.457" endtime="20170816 07:32:34.457"></status>
</kw>
<msg timestamp="20170816 07:32:34.457" level="INFO">${status} = True</msg>
<status status="PASS" starttime="20170816 07:32:34.456" endtime="20170816 07:32:34.457"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" starttime="20170816 07:32:34.457" endtime="20170816 07:32:34.458"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170816 07:32:34.458" level="INFO">To JSON using : content={
  "data": {
    "/org/openbmc/sensors/host/BootCount": {
      "error": 0, 
      "units": "", 
      "value": 3
    }, 
    "/org/openbmc/sensors/host/BootProgress": {
      "error": 0, 
      "units": "", 
      "value": "Off"
    }, 
    "/org/openbmc/sensors/host/OperatingSystemStatus": {
      "error": 0, 
      "units": "", 
      "value": "Off"
    }, 
    "/org/openbmc/sensors/host/PowerSupplyDerating": {
      "error": 0, 
      "units": "", 
      "value": 10
    }, 
    "/org/openbmc/sensors/host/PowerSupplyRedundancy": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/TurboAllowed": {
      "error": 0, 
      "units": "", 
      "value": 0
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 07:32:34.458" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170816 07:32:34.459" level="INFO">${jsondata} = {
    "data": {
        "/org/openbmc/sensors/host/BootCount": {
            "error": 0,
            "units": "",
            "value": 3
        },
        "/org/openbmc/sensors/host/BootProgress": {
...</msg>
<status status="PASS" starttime="20170816 07:32:34.458" endtime="20170816 07:32:34.459"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170816 07:32:34.460" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/2147/obmc-robot/logs/20170816073233030367_TestsTestBasicPoweron/20170816073233030367_PowerOnTest/20170816073233030367_BMC_sensor_list.txt"&gt;/tmp/fspcibld/2147/obmc-robot/logs/20170816073233030367_TestsTestBasicPoweron/20170816073233030367_PowerOnTest/20170816073233030367_BMC_sensor_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170816 07:32:34.459" endtime="20170816 07:32:34.460"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:34.459" endtime="20170816 07:32:34.460"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:34.064" endtime="20170816 07:32:34.461"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_inventory', '/xyz/openbmc_project/inventory/enumerate')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170816 07:32:34.461" level="INFO">${logpath} = /tmp/fspcibld/2147/obmc-robot/logs/20170816073233030367_TestsTestBasicPoweron/20170816073233030367_PowerOnTest/20170816073233030367_BMC_inventory.txt</msg>
<status status="PASS" starttime="20170816 07:32:34.461" endtime="20170816 07:32:34.461"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 07:32:34.464" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170816 07:32:34.464" endtime="20170816 07:32:34.465"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 07:32:34.465" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170816 07:32:34.465" endtime="20170816 07:32:34.465"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 07:32:34.466" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170816 07:32:34.466" endtime="20170816 07:32:34.466"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 07:32:34.467" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170816 07:32:34.466" endtime="20170816 07:32:34.467"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 07:32:34.654" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170816 07:32:34.467" endtime="20170816 07:32:34.654"></status>
</kw>
<msg timestamp="20170816 07:32:34.654" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 07:32:34.654" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:32:34.467" endtime="20170816 07:32:34.654"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 07:32:34.655" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:32:34.654" endtime="20170816 07:32:34.655"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:32:34.655" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:32:34.655" endtime="20170816 07:32:34.655"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:34.463" endtime="20170816 07:32:34.656"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:34.463" endtime="20170816 07:32:34.656"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:34.462" endtime="20170816 07:32:34.656"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 07:32:34.656" level="INFO">${base_uri} = /xyz/openbmc_project/inventory/enumerate</msg>
<status status="PASS" starttime="20170816 07:32:34.656" endtime="20170816 07:32:34.656"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20170816 07:32:34.657" endtime="20170816 07:32:34.657"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 07:32:36.069" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/inventory/enumerate, headers=None json=None</msg>
<msg timestamp="20170816 07:32:36.069" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:32:34.657" endtime="20170816 07:32:36.069"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" starttime="20170816 07:32:36.069" endtime="20170816 07:32:36.070"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 07:32:36.070" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170816 07:32:36.070" endtime="20170816 07:32:36.070"></status>
</kw>
<msg timestamp="20170816 07:32:36.071" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:32:34.461" endtime="20170816 07:32:36.071"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:32:36.072" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:32:36.071" endtime="20170816 07:32:36.072"></status>
</kw>
<msg timestamp="20170816 07:32:36.072" level="INFO">${status} = True</msg>
<status status="PASS" starttime="20170816 07:32:36.071" endtime="20170816 07:32:36.072"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" starttime="20170816 07:32:36.072" endtime="20170816 07:32:36.072"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170816 07:32:36.075" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/inventory/system/chassis": {
      "AirCooled": 1, 
      "WaterCooled": 1
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc": {
      "BuildDate": "", 
      "FieldReplaceable": 0, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01DH051", 
      "Present": 1, 
      "PrettyName": "BMC PLANAR  ", 
      "SerialNumber": "000000000000"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc/ethernet": {
      "FieldReplaceable": 0, 
      "MACAddress": "00:00:00:00:00:00", 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core0": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core1": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core10": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core11": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core12": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core13": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core14": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core15": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core16": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core17": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core18": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core19": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core2": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core20": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core21": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core22": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core23": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core3": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core4": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core5": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core6": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core7": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core8": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core9": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core0": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core1": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core2": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core3": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core4": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core5": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core6": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core7": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm0": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm1": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm10": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm11": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm12": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm13": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm14": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm15": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm2": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm3": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm4": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm5": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm6": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm7": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm8": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm9": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan0": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": "fan0"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan1": {
      "Functional": 0, 
      "Present": 1, 
      "PrettyName": "fan1"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan2": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": "fan2"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan3": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": "fan3"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/power_supply0": {
      "Present": 1, 
      "PrettyName": "power_supply0"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/power_supply1": {
      "Present": 1, 
      "PrettyName": "power_supply1"
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 07:32:36.075" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170816 07:32:36.075" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/inventory/system/chassis": {
            "AirCooled": 1,
            "WaterCooled": 1
        },
        "/xyz/openbmc_project/inventory/system/chassis/mo...</msg>
<status status="PASS" starttime="20170816 07:32:36.073" endtime="20170816 07:32:36.075"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170816 07:32:36.077" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/2147/obmc-robot/logs/20170816073233030367_TestsTestBasicPoweron/20170816073233030367_PowerOnTest/20170816073233030367_BMC_inventory.txt"&gt;/tmp/fspcibld/2147/obmc-robot/logs/20170816073233030367_TestsTestBasicPoweron/20170816073233030367_PowerOnTest/20170816073233030367_BMC_inventory.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170816 07:32:36.076" endtime="20170816 07:32:36.077"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:36.076" endtime="20170816 07:32:36.077"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:34.461" endtime="20170816 07:32:36.077"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_led', '/org/openbmc/records/events/enumerate')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170816 07:32:36.078" level="INFO">${logpath} = /tmp/fspcibld/2147/obmc-robot/logs/20170816073233030367_TestsTestBasicPoweron/20170816073233030367_PowerOnTest/20170816073233030367_BMC_led.txt</msg>
<status status="PASS" starttime="20170816 07:32:36.078" endtime="20170816 07:32:36.078"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 07:32:36.081" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170816 07:32:36.081" endtime="20170816 07:32:36.081"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 07:32:36.082" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170816 07:32:36.082" endtime="20170816 07:32:36.082"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 07:32:36.082" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170816 07:32:36.082" endtime="20170816 07:32:36.083"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 07:32:36.083" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170816 07:32:36.083" endtime="20170816 07:32:36.083"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 07:32:36.356" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170816 07:32:36.084" endtime="20170816 07:32:36.356"></status>
</kw>
<msg timestamp="20170816 07:32:36.356" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 07:32:36.356" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:32:36.083" endtime="20170816 07:32:36.356"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 07:32:36.357" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:32:36.356" endtime="20170816 07:32:36.357"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:32:36.357" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:32:36.357" endtime="20170816 07:32:36.358"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:36.080" endtime="20170816 07:32:36.358"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:36.080" endtime="20170816 07:32:36.358"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:36.079" endtime="20170816 07:32:36.358"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 07:32:36.358" level="INFO">${base_uri} = /org/openbmc/records/events/enumerate</msg>
<status status="PASS" starttime="20170816 07:32:36.358" endtime="20170816 07:32:36.358"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20170816 07:32:36.359" endtime="20170816 07:32:36.359"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 07:32:36.401" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/records/events/enumerate, headers=None json=None</msg>
<msg timestamp="20170816 07:32:36.402" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" starttime="20170816 07:32:36.359" endtime="20170816 07:32:36.402"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" starttime="20170816 07:32:36.402" endtime="20170816 07:32:36.403"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 07:32:36.403" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170816 07:32:36.403" endtime="20170816 07:32:36.403"></status>
</kw>
<msg timestamp="20170816 07:32:36.404" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" starttime="20170816 07:32:36.078" endtime="20170816 07:32:36.404"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:32:36.405" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170816 07:32:36.405" level="FAIL">404 != 200</msg>
<status status="FAIL" starttime="20170816 07:32:36.405" endtime="20170816 07:32:36.405"></status>
</kw>
<msg timestamp="20170816 07:32:36.405" level="INFO">${status} = False</msg>
<status status="PASS" starttime="20170816 07:32:36.404" endtime="20170816 07:32:36.405"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw library="BuiltIn" name="Continue For Loop">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg timestamp="20170816 07:32:36.406" level="INFO">Continuing for loop from the next iteration.</msg>
<status status="PASS" starttime="20170816 07:32:36.406" endtime="20170816 07:32:36.406"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:36.406" endtime="20170816 07:32:36.406"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:36.078" endtime="20170816 07:32:36.406"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:33.286" endtime="20170816 07:32:36.407"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:33.285" endtime="20170816 07:32:36.407"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:33.285" endtime="20170816 07:32:36.407"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:33.285" endtime="20170816 07:32:36.407"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:33.284" endtime="20170816 07:32:36.407"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:33.256" endtime="20170816 07:32:36.407"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:33.254" endtime="20170816 07:32:36.407"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:33.253" endtime="20170816 07:32:36.407"></status>
</kw>
<kw type="foritem" name="${method} = ('FFDC Generic Report', 'BMC FFDC Manifest')">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="Collections" name="List Should Contain Value">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" starttime="20170816 07:32:36.409" endtime="20170816 07:32:36.409"></status>
</kw>
<msg timestamp="20170816 07:32:36.409" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 07:32:36.409" level="INFO">${ret_values} = None</msg>
<status status="PASS" starttime="20170816 07:32:36.408" endtime="20170816 07:32:36.409"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" starttime="20170816 07:32:36.409" endtime="20170816 07:32:36.410"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="BMC FFDC Manifest">
<doc>Get the commands index for the FFDC_BMC_CMD,</doc>
<kw library="openbmc_ffdc_list" name="Get Ffdc Cmd Index">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170816 07:32:36.436" level="INFO">@{entries} = [ DRIVER INFO | APPLICATION DATA | BMC DATA ]</msg>
<status status="PASS" starttime="20170816 07:32:36.436" endtime="20170816 07:32:36.436"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = DRIVER INFO">
<kw library="openbmc_ffdc_methods" name="Iterate BMC Command List Pairs">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Bmc Cmd">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170816 07:32:36.437" level="INFO">@{cmd_list} = [ ('FW Level', 'cat /etc/os-release') ]</msg>
<status status="PASS" starttime="20170816 07:32:36.437" endtime="20170816 07:32:36.437"></status>
</kw>
<kw library="BuiltIn" name="Set Suite Variable">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170816 07:32:36.442" level="INFO">${ENTRY_INDEX} = DRIVER INFO</msg>
<status status="PASS" starttime="20170816 07:32:36.437" endtime="20170816 07:32:36.442"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('FW Level', 'cat /etc/os-release')">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170816 07:32:36.445" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/2147/obmc-robot/logs/20170816073233030367_TestsTestBasicPoweron/20170816073233030367_PowerOnTest/20170816073233030367_BMC_general.txt"&gt;/tmp/fspcibld/2147/obmc-robot/logs/20170816073233030367_TestsTestBasicPoweron/20170816073233030367_PowerOnTest/20170816073233030367_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170816 07:32:36.445" endtime="20170816 07:32:36.446"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:36.444" endtime="20170816 07:32:36.446"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170816 07:32:36.447" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/2147/obmc-robot/logs/20170816073233030367_TestsTestBasicPoweron/20170816073233030367_PowerOnTest/20170816073233030367_BMC_general.txt"&gt;/tmp/fspcibld/2147/obmc-robot/logs/20170816073233030367_TestsTestBasicPoweron/20170816073233030367_PowerOnTest/20170816073233030367_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170816 07:32:36.447" endtime="20170816 07:32:36.447"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:36.446" endtime="20170816 07:32:36.447"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170816 07:32:36.449" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/2147/obmc-robot/logs/20170816073233030367_TestsTestBasicPoweron/20170816073233030367_PowerOnTest/20170816073233030367_BMC_general.txt"&gt;/tmp/fspcibld/2147/obmc-robot/logs/20170816073233030367_TestsTestBasicPoweron/20170816073233030367_PowerOnTest/20170816073233030367_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170816 07:32:36.448" endtime="20170816 07:32:36.449"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:36.447" endtime="20170816 07:32:36.449"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170816 07:32:36.450" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/2147/obmc-robot/logs/20170816073233030367_TestsTestBasicPoweron/20170816073233030367_PowerOnTest/20170816073233030367_BMC_general.txt"&gt;/tmp/fspcibld/2147/obmc-robot/logs/20170816073233030367_TestsTestBasicPoweron/20170816073233030367_PowerOnTest/20170816073233030367_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170816 07:32:36.449" endtime="20170816 07:32:36.450"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:36.449" endtime="20170816 07:32:36.450"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:36.444" endtime="20170816 07:32:36.450"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:36.443" endtime="20170816 07:32:36.450"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170816 07:32:36.451" level="INFO">${cmd_buf} = BMC Execute Command  cat /etc/os-release  ignore_err=1</msg>
<status status="PASS" starttime="20170816 07:32:36.450" endtime="20170816 07:32:36.451"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /etc/os-release</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170816 07:32:36.521" level="INFO">encoding=UTF-8
prompt=# 
alias=bmc_connection
term_type=vt100
newline=

host=9.41.166.169
width=80
port=22
timeout=25 seconds
path_separator=/
index=1
height=24</msg>
<msg timestamp="20170816 07:32:36.522" level="INFO">Executing command 'cat /etc/os-release'.</msg>
<msg timestamp="20170816 07:32:36.580" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" starttime="20170816 07:32:36.483" endtime="20170816 07:32:36.581"></status>
</kw>
<msg timestamp="20170816 07:32:36.581" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 07:32:36.581" level="INFO">${ret_values} = (u'ID="openbmc-phosphor"\nNAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"\nVERSION="v1.99.8-250"\nVERSION_ID="v1.99.8-250-gc0f9bc6"\nPRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC...</msg>
<status status="PASS" starttime="20170816 07:32:36.451" endtime="20170816 07:32:36.581"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170816 07:32:36.581" level="INFO">${stdout} = ID="openbmc-phosphor"
NAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"
VERSION="v1.99.8-250"
VERSION_ID="v1.99.8-250-gc0f9bc6"
PRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC Projec...</msg>
<status status="PASS" starttime="20170816 07:32:36.581" endtime="20170816 07:32:36.582"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170816 07:32:36.582" level="INFO">${stderr} = </msg>
<status status="PASS" starttime="20170816 07:32:36.582" endtime="20170816 07:32:36.582"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170816 07:32:36.589" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/2147/obmc-robot/logs/20170816073233030367_TestsTestBasicPoweron/20170816073233030367_PowerOnTest/20170816073233030367_BMC_general.txt"&gt;/tmp/fspcibld/2147/obmc-robot/logs/20170816073233030367_TestsTestBasicPoweron/20170816073233030367_PowerOnTest/20170816073233030367_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170816 07:32:36.588" endtime="20170816 07:32:36.589"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:36.588" endtime="20170816 07:32:36.589"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:36.582" endtime="20170816 07:32:36.589"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:36.443" endtime="20170816 07:32:36.590"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:36.442" endtime="20170816 07:32:36.590"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:36.442" endtime="20170816 07:32:36.590"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:36.436" endtime="20170816 07:32:36.590"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:36.436" endtime="20170816 07:32:36.590"></status>
</kw>
<kw type="foritem" name="${index} = APPLICATION DATA">
<kw library="openbmc_ffdc_methods" name="Iterate BMC Command List Pairs">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Bmc Cmd">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170816 07:32:36.591" level="INFO">@{cmd_list} = [ ('BMC state', '/usr/sbin/obmcutil state') ]</msg>
<status status="PASS" starttime="20170816 07:32:36.591" endtime="20170816 07:32:36.591"></status>
</kw>
<kw library="BuiltIn" name="Set Suite Variable">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170816 07:32:36.592" level="INFO">${ENTRY_INDEX} = APPLICATION DATA</msg>
<status status="PASS" starttime="20170816 07:32:36.591" endtime="20170816 07:32:36.592"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC state', '/usr/sbin/obmcutil state')">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170816 07:32:36.595" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/2147/obmc-robot/logs/20170816073233030367_TestsTestBasicPoweron/20170816073233030367_PowerOnTest/20170816073233030367_BMC_general.txt"&gt;/tmp/fspcibld/2147/obmc-robot/logs/20170816073233030367_TestsTestBasicPoweron/20170816073233030367_PowerOnTest/20170816073233030367_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170816 07:32:36.594" endtime="20170816 07:32:36.595"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:36.594" endtime="20170816 07:32:36.595"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170816 07:32:36.596" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/2147/obmc-robot/logs/20170816073233030367_TestsTestBasicPoweron/20170816073233030367_PowerOnTest/20170816073233030367_BMC_general.txt"&gt;/tmp/fspcibld/2147/obmc-robot/logs/20170816073233030367_TestsTestBasicPoweron/20170816073233030367_PowerOnTest/20170816073233030367_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170816 07:32:36.596" endtime="20170816 07:32:36.596"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:36.595" endtime="20170816 07:32:36.597"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170816 07:32:36.598" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/2147/obmc-robot/logs/20170816073233030367_TestsTestBasicPoweron/20170816073233030367_PowerOnTest/20170816073233030367_BMC_general.txt"&gt;/tmp/fspcibld/2147/obmc-robot/logs/20170816073233030367_TestsTestBasicPoweron/20170816073233030367_PowerOnTest/20170816073233030367_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170816 07:32:36.598" endtime="20170816 07:32:36.598"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:36.597" endtime="20170816 07:32:36.598"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170816 07:32:36.599" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/2147/obmc-robot/logs/20170816073233030367_TestsTestBasicPoweron/20170816073233030367_PowerOnTest/20170816073233030367_BMC_general.txt"&gt;/tmp/fspcibld/2147/obmc-robot/logs/20170816073233030367_TestsTestBasicPoweron/20170816073233030367_PowerOnTest/20170816073233030367_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170816 07:32:36.599" endtime="20170816 07:32:36.599"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:36.598" endtime="20170816 07:32:36.599"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:36.593" endtime="20170816 07:32:36.600"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:36.593" endtime="20170816 07:32:36.600"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170816 07:32:36.600" level="INFO">${cmd_buf} = BMC Execute Command  /usr/sbin/obmcutil state  ignore_err=1</msg>
<status status="PASS" starttime="20170816 07:32:36.600" endtime="20170816 07:32:36.600"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>/usr/sbin/obmcutil state</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170816 07:32:36.668" level="INFO">encoding=UTF-8
prompt=# 
alias=bmc_connection
term_type=vt100
newline=

host=9.41.166.169
width=80
port=22
timeout=25 seconds
path_separator=/
index=1
height=24</msg>
<msg timestamp="20170816 07:32:36.668" level="INFO">Executing command '/usr/sbin/obmcutil state'.</msg>
<msg timestamp="20170816 07:32:38.075" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" starttime="20170816 07:32:36.632" endtime="20170816 07:32:38.075"></status>
</kw>
<msg timestamp="20170816 07:32:38.075" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 07:32:38.076" level="INFO">${ret_values} = (u'CurrentBMCState:    xyz.openbmc_project.State.BMC.BMCState.Ready\nCurrentPowerState:  xyz.openbmc_project.State.Chassis.PowerState.On\nCurrentHostState:   xyz.openbmc_project.State.Host.HostState.Q...</msg>
<status status="PASS" starttime="20170816 07:32:36.601" endtime="20170816 07:32:38.076"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170816 07:32:38.076" level="INFO">${stdout} = CurrentBMCState:    xyz.openbmc_project.State.BMC.BMCState.Ready
CurrentPowerState:  xyz.openbmc_project.State.Chassis.PowerState.On
CurrentHostState:   xyz.openbmc_project.State.Host.HostState.Quiesc...</msg>
<status status="PASS" starttime="20170816 07:32:38.076" endtime="20170816 07:32:38.076"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170816 07:32:38.077" level="INFO">${stderr} = </msg>
<status status="PASS" starttime="20170816 07:32:38.077" endtime="20170816 07:32:38.077"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170816 07:32:38.084" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/2147/obmc-robot/logs/20170816073233030367_TestsTestBasicPoweron/20170816073233030367_PowerOnTest/20170816073233030367_BMC_general.txt"&gt;/tmp/fspcibld/2147/obmc-robot/logs/20170816073233030367_TestsTestBasicPoweron/20170816073233030367_PowerOnTest/20170816073233030367_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170816 07:32:38.083" endtime="20170816 07:32:38.084"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:38.083" endtime="20170816 07:32:38.084"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:38.077" endtime="20170816 07:32:38.084"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:36.592" endtime="20170816 07:32:38.084"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:36.592" endtime="20170816 07:32:38.084"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:36.592" endtime="20170816 07:32:38.084"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:36.590" endtime="20170816 07:32:38.084"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:36.590" endtime="20170816 07:32:38.084"></status>
</kw>
<kw type="foritem" name="${index} = BMC DATA">
<kw library="openbmc_ffdc_methods" name="Iterate BMC Command List Pairs">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Bmc Cmd">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170816 07:32:38.085" level="INFO">@{cmd_list} = [ ('BMC Uptime', 'uptime') | ('BMC File System Disk Space Usage', 'df -hT') | ('BMC OS', 'uname -a') ]</msg>
<status status="PASS" starttime="20170816 07:32:38.085" endtime="20170816 07:32:38.085"></status>
</kw>
<kw library="BuiltIn" name="Set Suite Variable">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170816 07:32:38.086" level="INFO">${ENTRY_INDEX} = BMC DATA</msg>
<status status="PASS" starttime="20170816 07:32:38.086" endtime="20170816 07:32:38.086"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC Uptime', 'uptime')">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170816 07:32:38.089" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/2147/obmc-robot/logs/20170816073233030367_TestsTestBasicPoweron/20170816073233030367_PowerOnTest/20170816073233030367_BMC_general.txt"&gt;/tmp/fspcibld/2147/obmc-robot/logs/20170816073233030367_TestsTestBasicPoweron/20170816073233030367_PowerOnTest/20170816073233030367_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170816 07:32:38.089" endtime="20170816 07:32:38.089"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:38.088" endtime="20170816 07:32:38.090"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170816 07:32:38.091" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/2147/obmc-robot/logs/20170816073233030367_TestsTestBasicPoweron/20170816073233030367_PowerOnTest/20170816073233030367_BMC_general.txt"&gt;/tmp/fspcibld/2147/obmc-robot/logs/20170816073233030367_TestsTestBasicPoweron/20170816073233030367_PowerOnTest/20170816073233030367_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170816 07:32:38.090" endtime="20170816 07:32:38.091"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:38.090" endtime="20170816 07:32:38.091"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170816 07:32:38.092" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/2147/obmc-robot/logs/20170816073233030367_TestsTestBasicPoweron/20170816073233030367_PowerOnTest/20170816073233030367_BMC_general.txt"&gt;/tmp/fspcibld/2147/obmc-robot/logs/20170816073233030367_TestsTestBasicPoweron/20170816073233030367_PowerOnTest/20170816073233030367_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170816 07:32:38.092" endtime="20170816 07:32:38.092"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:38.091" endtime="20170816 07:32:38.092"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170816 07:32:38.096" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/2147/obmc-robot/logs/20170816073233030367_TestsTestBasicPoweron/20170816073233030367_PowerOnTest/20170816073233030367_BMC_general.txt"&gt;/tmp/fspcibld/2147/obmc-robot/logs/20170816073233030367_TestsTestBasicPoweron/20170816073233030367_PowerOnTest/20170816073233030367_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170816 07:32:38.095" endtime="20170816 07:32:38.096"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:38.093" endtime="20170816 07:32:38.096"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:38.088" endtime="20170816 07:32:38.096"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:38.087" endtime="20170816 07:32:38.096"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170816 07:32:38.097" level="INFO">${cmd_buf} = BMC Execute Command  uptime  ignore_err=1</msg>
<status status="PASS" starttime="20170816 07:32:38.096" endtime="20170816 07:32:38.097"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>uptime</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170816 07:32:38.165" level="INFO">encoding=UTF-8
prompt=# 
alias=bmc_connection
term_type=vt100
newline=

host=9.41.166.169
width=80
port=22
timeout=25 seconds
path_separator=/
index=1
height=24</msg>
<msg timestamp="20170816 07:32:38.165" level="INFO">Executing command 'uptime'.</msg>
<msg timestamp="20170816 07:32:38.221" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" starttime="20170816 07:32:38.129" endtime="20170816 07:32:38.222"></status>
</kw>
<msg timestamp="20170816 07:32:38.222" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 07:32:38.222" level="INFO">${ret_values} = (u' 15:59:12 up 16 min,  load average: 0.64, 1.20, 1.08', u'', 0)</msg>
<status status="PASS" starttime="20170816 07:32:38.097" endtime="20170816 07:32:38.222"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170816 07:32:38.223" level="INFO">${stdout} =  15:59:12 up 16 min,  load average: 0.64, 1.20, 1.08</msg>
<status status="PASS" starttime="20170816 07:32:38.222" endtime="20170816 07:32:38.223"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170816 07:32:38.223" level="INFO">${stderr} = </msg>
<status status="PASS" starttime="20170816 07:32:38.223" endtime="20170816 07:32:38.223"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170816 07:32:38.230" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/2147/obmc-robot/logs/20170816073233030367_TestsTestBasicPoweron/20170816073233030367_PowerOnTest/20170816073233030367_BMC_general.txt"&gt;/tmp/fspcibld/2147/obmc-robot/logs/20170816073233030367_TestsTestBasicPoweron/20170816073233030367_PowerOnTest/20170816073233030367_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170816 07:32:38.229" endtime="20170816 07:32:38.230"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:38.229" endtime="20170816 07:32:38.230"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:38.223" endtime="20170816 07:32:38.230"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:38.087" endtime="20170816 07:32:38.230"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:38.086" endtime="20170816 07:32:38.230"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC File System Disk Space Usage', 'df -hT')">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170816 07:32:38.233" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/2147/obmc-robot/logs/20170816073233030367_TestsTestBasicPoweron/20170816073233030367_PowerOnTest/20170816073233030367_BMC_general.txt"&gt;/tmp/fspcibld/2147/obmc-robot/logs/20170816073233030367_TestsTestBasicPoweron/20170816073233030367_PowerOnTest/20170816073233030367_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170816 07:32:38.233" endtime="20170816 07:32:38.233"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:38.232" endtime="20170816 07:32:38.233"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170816 07:32:38.234" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/2147/obmc-robot/logs/20170816073233030367_TestsTestBasicPoweron/20170816073233030367_PowerOnTest/20170816073233030367_BMC_general.txt"&gt;/tmp/fspcibld/2147/obmc-robot/logs/20170816073233030367_TestsTestBasicPoweron/20170816073233030367_PowerOnTest/20170816073233030367_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170816 07:32:38.234" endtime="20170816 07:32:38.235"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:38.233" endtime="20170816 07:32:38.235"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170816 07:32:38.236" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/2147/obmc-robot/logs/20170816073233030367_TestsTestBasicPoweron/20170816073233030367_PowerOnTest/20170816073233030367_BMC_general.txt"&gt;/tmp/fspcibld/2147/obmc-robot/logs/20170816073233030367_TestsTestBasicPoweron/20170816073233030367_PowerOnTest/20170816073233030367_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170816 07:32:38.235" endtime="20170816 07:32:38.236"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:38.235" endtime="20170816 07:32:38.236"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170816 07:32:38.237" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/2147/obmc-robot/logs/20170816073233030367_TestsTestBasicPoweron/20170816073233030367_PowerOnTest/20170816073233030367_BMC_general.txt"&gt;/tmp/fspcibld/2147/obmc-robot/logs/20170816073233030367_TestsTestBasicPoweron/20170816073233030367_PowerOnTest/20170816073233030367_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170816 07:32:38.237" endtime="20170816 07:32:38.237"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:38.236" endtime="20170816 07:32:38.237"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:38.232" endtime="20170816 07:32:38.237"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:38.231" endtime="20170816 07:32:38.237"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170816 07:32:38.238" level="INFO">${cmd_buf} = BMC Execute Command  df -hT  ignore_err=1</msg>
<status status="PASS" starttime="20170816 07:32:38.238" endtime="20170816 07:32:38.238"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>df -hT</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170816 07:32:38.342" level="INFO">encoding=UTF-8
prompt=# 
alias=bmc_connection
term_type=vt100
newline=

host=9.41.166.169
width=80
port=22
timeout=25 seconds
path_separator=/
index=1
height=24</msg>
<msg timestamp="20170816 07:32:38.342" level="INFO">Executing command 'df -hT'.</msg>
<msg timestamp="20170816 07:32:38.409" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" starttime="20170816 07:32:38.304" endtime="20170816 07:32:38.409"></status>
</kw>
<msg timestamp="20170816 07:32:38.409" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 07:32:38.409" level="INFO">${ret_values} = (u'Filesystem           Type            Size      Used Available Use% Mounted on\ndev                  devtmpfs      210.2M         0    210.2M   0% /dev\ntmpfs                tmpfs         211.1M    ...</msg>
<status status="PASS" starttime="20170816 07:32:38.238" endtime="20170816 07:32:38.409"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170816 07:32:38.410" level="INFO">${stdout} = Filesystem           Type            Size      Used Available Use% Mounted on
dev                  devtmpfs      210.2M         0    210.2M   0% /dev
tmpfs                tmpfs         211.1M     14.1...</msg>
<status status="PASS" starttime="20170816 07:32:38.409" endtime="20170816 07:32:38.410"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170816 07:32:38.410" level="INFO">${stderr} = </msg>
<status status="PASS" starttime="20170816 07:32:38.410" endtime="20170816 07:32:38.410"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170816 07:32:38.417" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/2147/obmc-robot/logs/20170816073233030367_TestsTestBasicPoweron/20170816073233030367_PowerOnTest/20170816073233030367_BMC_general.txt"&gt;/tmp/fspcibld/2147/obmc-robot/logs/20170816073233030367_TestsTestBasicPoweron/20170816073233030367_PowerOnTest/20170816073233030367_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170816 07:32:38.416" endtime="20170816 07:32:38.417"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:38.416" endtime="20170816 07:32:38.417"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:38.411" endtime="20170816 07:32:38.417"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:38.230" endtime="20170816 07:32:38.417"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:38.230" endtime="20170816 07:32:38.417"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC OS', 'uname -a')">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170816 07:32:38.420" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/2147/obmc-robot/logs/20170816073233030367_TestsTestBasicPoweron/20170816073233030367_PowerOnTest/20170816073233030367_BMC_general.txt"&gt;/tmp/fspcibld/2147/obmc-robot/logs/20170816073233030367_TestsTestBasicPoweron/20170816073233030367_PowerOnTest/20170816073233030367_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170816 07:32:38.420" endtime="20170816 07:32:38.420"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:38.419" endtime="20170816 07:32:38.421"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170816 07:32:38.422" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/2147/obmc-robot/logs/20170816073233030367_TestsTestBasicPoweron/20170816073233030367_PowerOnTest/20170816073233030367_BMC_general.txt"&gt;/tmp/fspcibld/2147/obmc-robot/logs/20170816073233030367_TestsTestBasicPoweron/20170816073233030367_PowerOnTest/20170816073233030367_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170816 07:32:38.422" endtime="20170816 07:32:38.422"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:38.421" endtime="20170816 07:32:38.422"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170816 07:32:38.423" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/2147/obmc-robot/logs/20170816073233030367_TestsTestBasicPoweron/20170816073233030367_PowerOnTest/20170816073233030367_BMC_general.txt"&gt;/tmp/fspcibld/2147/obmc-robot/logs/20170816073233030367_TestsTestBasicPoweron/20170816073233030367_PowerOnTest/20170816073233030367_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170816 07:32:38.423" endtime="20170816 07:32:38.423"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:38.422" endtime="20170816 07:32:38.423"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170816 07:32:38.425" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/2147/obmc-robot/logs/20170816073233030367_TestsTestBasicPoweron/20170816073233030367_PowerOnTest/20170816073233030367_BMC_general.txt"&gt;/tmp/fspcibld/2147/obmc-robot/logs/20170816073233030367_TestsTestBasicPoweron/20170816073233030367_PowerOnTest/20170816073233030367_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170816 07:32:38.424" endtime="20170816 07:32:38.425"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:38.424" endtime="20170816 07:32:38.425"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:38.419" endtime="20170816 07:32:38.425"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:38.418" endtime="20170816 07:32:38.425"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170816 07:32:38.426" level="INFO">${cmd_buf} = BMC Execute Command  uname -a  ignore_err=1</msg>
<status status="PASS" starttime="20170816 07:32:38.425" endtime="20170816 07:32:38.426"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>uname -a</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170816 07:32:38.493" level="INFO">encoding=UTF-8
prompt=# 
alias=bmc_connection
term_type=vt100
newline=

host=9.41.166.169
width=80
port=22
timeout=25 seconds
path_separator=/
index=1
height=24</msg>
<msg timestamp="20170816 07:32:38.494" level="INFO">Executing command 'uname -a'.</msg>
<msg timestamp="20170816 07:32:38.561" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" starttime="20170816 07:32:38.456" endtime="20170816 07:32:38.561"></status>
</kw>
<msg timestamp="20170816 07:32:38.561" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 07:32:38.561" level="INFO">${ret_values} = (u'Linux witherspoon 4.10.17-1a4df30c39cf5ee0e3d2528c409787ccbb4a672a #1 Wed Aug 16 03:15:50 UTC 2017 armv6l GNU/Linux', u'', 0)</msg>
<status status="PASS" starttime="20170816 07:32:38.426" endtime="20170816 07:32:38.561"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170816 07:32:38.562" level="INFO">${stdout} = Linux witherspoon 4.10.17-1a4df30c39cf5ee0e3d2528c409787ccbb4a672a #1 Wed Aug 16 03:15:50 UTC 2017 armv6l GNU/Linux</msg>
<status status="PASS" starttime="20170816 07:32:38.561" endtime="20170816 07:32:38.562"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170816 07:32:38.562" level="INFO">${stderr} = </msg>
<status status="PASS" starttime="20170816 07:32:38.562" endtime="20170816 07:32:38.562"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170816 07:32:38.569" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/2147/obmc-robot/logs/20170816073233030367_TestsTestBasicPoweron/20170816073233030367_PowerOnTest/20170816073233030367_BMC_general.txt"&gt;/tmp/fspcibld/2147/obmc-robot/logs/20170816073233030367_TestsTestBasicPoweron/20170816073233030367_PowerOnTest/20170816073233030367_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170816 07:32:38.569" endtime="20170816 07:32:38.569"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:38.568" endtime="20170816 07:32:38.569"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:38.563" endtime="20170816 07:32:38.569"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:38.418" endtime="20170816 07:32:38.569"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:38.417" endtime="20170816 07:32:38.569"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:38.086" endtime="20170816 07:32:38.570"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:38.085" endtime="20170816 07:32:38.570"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:38.084" endtime="20170816 07:32:38.570"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:36.436" endtime="20170816 07:32:38.570"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:36.435" endtime="20170816 07:32:38.570"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:36.410" endtime="20170816 07:32:38.570"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:36.407" endtime="20170816 07:32:38.570"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:36.407" endtime="20170816 07:32:38.570"></status>
</kw>
<kw type="foritem" name="${method} = ('OS FFDC', 'OS FFDC Files')">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="Collections" name="List Should Contain Value">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" starttime="20170816 07:32:38.572" endtime="20170816 07:32:38.572"></status>
</kw>
<msg timestamp="20170816 07:32:38.572" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 07:32:38.572" level="INFO">${ret_values} = None</msg>
<status status="PASS" starttime="20170816 07:32:38.571" endtime="20170816 07:32:38.572"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" starttime="20170816 07:32:38.572" endtime="20170816 07:32:38.573"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="OS FFDC Files">
<doc>Get the command list and iterate</doc>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${OS_HOST}' == '${EMPTY}'</arg>
<arg>No OS Host Provided</arg>
</arguments>
<msg timestamp="20170816 07:32:38.602" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20170816 07:32:38.602" endtime="20170816 07:32:38.603"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:38.601" endtime="20170816 07:32:38.603"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:38.573" endtime="20170816 07:32:38.603"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:38.570" endtime="20170816 07:32:38.603"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:38.570" endtime="20170816 07:32:38.603"></status>
</kw>
<kw type="foritem" name="${method} = ('SEL Log', 'Collect eSEL Log')">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="Collections" name="List Should Contain Value">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" starttime="20170816 07:32:38.605" endtime="20170816 07:32:38.605"></status>
</kw>
<msg timestamp="20170816 07:32:38.605" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 07:32:38.605" level="INFO">${ret_values} = None</msg>
<status status="PASS" starttime="20170816 07:32:38.604" endtime="20170816 07:32:38.605"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" starttime="20170816 07:32:38.606" endtime="20170816 07:32:38.606"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="Collect eSEL Log">
<doc>Collect eSEL log from logging entry and convert eSEL data</doc>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${BMC_LOGGING_ENTRY}/enumerate</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 07:32:38.635" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170816 07:32:38.634" endtime="20170816 07:32:38.635"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 07:32:38.636" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170816 07:32:38.635" endtime="20170816 07:32:38.636"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 07:32:38.636" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170816 07:32:38.636" endtime="20170816 07:32:38.636"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 07:32:38.637" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170816 07:32:38.637" endtime="20170816 07:32:38.637"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 07:32:38.888" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170816 07:32:38.638" endtime="20170816 07:32:38.888"></status>
</kw>
<msg timestamp="20170816 07:32:38.888" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 07:32:38.889" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:32:38.637" endtime="20170816 07:32:38.889"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 07:32:38.889" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:32:38.889" endtime="20170816 07:32:38.890"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:32:38.890" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:32:38.890" endtime="20170816 07:32:38.890"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:38.634" endtime="20170816 07:32:38.890"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:38.633" endtime="20170816 07:32:38.890"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:38.633" endtime="20170816 07:32:38.891"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 07:32:38.891" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry//enumerate</msg>
<status status="PASS" starttime="20170816 07:32:38.891" endtime="20170816 07:32:38.891"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20170816 07:32:38.891" endtime="20170816 07:32:38.892"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 07:32:39.086" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry//enumerate, headers=None json=None</msg>
<msg timestamp="20170816 07:32:39.086" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:32:38.892" endtime="20170816 07:32:39.086"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" starttime="20170816 07:32:39.086" endtime="20170816 07:32:39.087"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 07:32:39.087" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170816 07:32:39.087" endtime="20170816 07:32:39.087"></status>
</kw>
<msg timestamp="20170816 07:32:39.087" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:32:38.632" endtime="20170816 07:32:39.087"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:32:39.088" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:32:39.088" endtime="20170816 07:32:39.089"></status>
</kw>
<msg timestamp="20170816 07:32:39.089" level="INFO">${status} = True</msg>
<status status="PASS" starttime="20170816 07:32:39.088" endtime="20170816 07:32:39.089"></status>
</kw>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
</arguments>
<status status="PASS" starttime="20170816 07:32:39.089" endtime="20170816 07:32:39.090"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 07:32:39.090" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/logging/entry/1": {
      "AdditionalData": [], 
      "Id": 1, 
      "Message": "xyz.openbmc_project.Software.Version.Error.ManifestFileFailure", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1501775112177, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/2": {
      "AdditionalData": [], 
      "Id": 2, 
      "Message": "org.open_power.Host.Error.Checkstop", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1501775421426, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/3": {
      "AdditionalData": [], 
      "Id": 3, 
      "Message": "org.open_power.Host.Error.Checkstop", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1501775519097, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/4": {
      "AdditionalData": [], 
      "Id": 4, 
      "Message": "org.open_power.Host.Error.Checkstop", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1501775616425, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/5": {
      "AdditionalData": [], 
      "Id": 5, 
      "Message": "org.open_power.Host.Error.Checkstop", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1501775713797, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/6": {
      "AdditionalData": [], 
      "Id": 6, 
      "Message": "org.open_power.Host.Error.WatchdogTimedOut", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1501775792999, 
      "associations": []
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 07:32:39.090" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 07:32:39.091" level="INFO">${content} = {u'data': {u'/xyz/openbmc_project/logging/entry/3': {u'Timestamp': 1501775519097, u'Message': u'org.open_power.Host.Error.Checkstop', u'Resolved': 0, u'Severity': u'xyz.openbmc_project.Logging.Entry.L...</msg>
<status status="PASS" starttime="20170816 07:32:39.090" endtime="20170816 07:32:39.091"></status>
</kw>
<kw library="Collections" name="Get Dictionary Keys">
<doc>Returns keys of the given ``dictionary``.</doc>
<arguments>
<arg>${content['data']}</arg>
</arguments>
<assign>
<var>${esel_list}</var>
</assign>
<msg timestamp="20170816 07:32:39.091" level="INFO">${esel_list} = [u'/xyz/openbmc_project/logging/entry/1', u'/xyz/openbmc_project/logging/entry/2', u'/xyz/openbmc_project/logging/entry/3', u'/xyz/openbmc_project/logging/entry/4', u'/xyz/openbmc_project/logging/entr...</msg>
<status status="PASS" starttime="20170816 07:32:39.091" endtime="20170816 07:32:39.091"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>esel</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170816 07:32:39.092" level="INFO">${logpath} = /tmp/fspcibld/2147/obmc-robot/logs/20170816073233030367_TestsTestBasicPoweron/20170816073233030367_PowerOnTest/20170816073233030367_esel</msg>
<status status="PASS" starttime="20170816 07:32:39.092" endtime="20170816 07:32:39.092"></status>
</kw>
<kw library="OperatingSystem" name="Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${logpath}</arg>
</arguments>
<msg html="yes" timestamp="20170816 07:32:39.093" level="INFO">Created file '&lt;a href="file:///tmp/fspcibld/2147/obmc-robot/logs/20170816073233030367_TestsTestBasicPoweron/20170816073233030367_PowerOnTest/20170816073233030367_esel"&gt;/tmp/fspcibld/2147/obmc-robot/logs/20170816073233030367_TestsTestBasicPoweron/20170816073233030367_PowerOnTest/20170816073233030367_esel&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170816 07:32:39.092" endtime="20170816 07:32:39.093"></status>
</kw>
<kw type="for" name="${entry_path} IN [ @{esel_list} ]">
<kw type="foritem" name="${entry_path} = /xyz/openbmc_project/logging/entry/1">
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status status="PASS" starttime="20170816 07:32:39.093" endtime="20170816 07:32:39.094"></status>
</kw>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 07:32:39.097" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170816 07:32:39.097" endtime="20170816 07:32:39.098"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 07:32:39.098" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170816 07:32:39.098" endtime="20170816 07:32:39.098"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 07:32:39.099" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170816 07:32:39.099" endtime="20170816 07:32:39.099"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 07:32:39.099" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170816 07:32:39.099" endtime="20170816 07:32:39.100"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 07:32:39.296" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170816 07:32:39.100" endtime="20170816 07:32:39.296"></status>
</kw>
<msg timestamp="20170816 07:32:39.296" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 07:32:39.296" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:32:39.100" endtime="20170816 07:32:39.296"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 07:32:39.297" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:32:39.296" endtime="20170816 07:32:39.297"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:32:39.297" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:32:39.297" endtime="20170816 07:32:39.298"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:39.096" endtime="20170816 07:32:39.298"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:39.096" endtime="20170816 07:32:39.298"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:39.095" endtime="20170816 07:32:39.298"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 07:32:39.298" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/1/attr/AdditionalData</msg>
<status status="PASS" starttime="20170816 07:32:39.298" endtime="20170816 07:32:39.298"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20170816 07:32:39.299" endtime="20170816 07:32:39.299"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 07:32:39.384" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/1/attr/AdditionalData, headers=None json=None</msg>
<msg timestamp="20170816 07:32:39.384" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:32:39.299" endtime="20170816 07:32:39.384"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" starttime="20170816 07:32:39.384" endtime="20170816 07:32:39.385"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 07:32:39.385" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170816 07:32:39.385" endtime="20170816 07:32:39.385"></status>
</kw>
<msg timestamp="20170816 07:32:39.385" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:32:39.095" endtime="20170816 07:32:39.386"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:32:39.386" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:32:39.386" endtime="20170816 07:32:39.386"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 07:32:39.387" level="INFO">To JSON using : content={
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 07:32:39.387" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 07:32:39.387" level="INFO">${content} = {u'data': [], u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170816 07:32:39.386" endtime="20170816 07:32:39.387"></status>
</kw>
<msg timestamp="20170816 07:32:39.387" level="INFO">${esel_data} = []</msg>
<status status="PASS" starttime="20170816 07:32:39.094" endtime="20170816 07:32:39.387"></status>
</kw>
<kw library="BuiltIn" name="Get Length">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg timestamp="20170816 07:32:39.388" level="INFO">Length is 0</msg>
<msg timestamp="20170816 07:32:39.388" level="INFO">${length} = 0</msg>
<status status="PASS" starttime="20170816 07:32:39.387" endtime="20170816 07:32:39.388"></status>
</kw>
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<msg timestamp="20170816 07:32:39.389" level="INFO">Continuing for loop from the next iteration.</msg>
<status status="PASS" starttime="20170816 07:32:39.388" endtime="20170816 07:32:39.389"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:39.093" endtime="20170816 07:32:39.389"></status>
</kw>
<kw type="foritem" name="${entry_path} = /xyz/openbmc_project/logging/entry/2">
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status status="PASS" starttime="20170816 07:32:39.389" endtime="20170816 07:32:39.390"></status>
</kw>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 07:32:39.393" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170816 07:32:39.392" endtime="20170816 07:32:39.393"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 07:32:39.394" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170816 07:32:39.393" endtime="20170816 07:32:39.394"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 07:32:39.394" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170816 07:32:39.394" endtime="20170816 07:32:39.394"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 07:32:39.395" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170816 07:32:39.395" endtime="20170816 07:32:39.395"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 07:32:39.600" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170816 07:32:39.396" endtime="20170816 07:32:39.600"></status>
</kw>
<msg timestamp="20170816 07:32:39.601" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 07:32:39.601" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:32:39.395" endtime="20170816 07:32:39.601"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 07:32:39.601" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:32:39.601" endtime="20170816 07:32:39.601"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:32:39.602" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:32:39.602" endtime="20170816 07:32:39.602"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:39.392" endtime="20170816 07:32:39.602"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:39.391" endtime="20170816 07:32:39.602"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:39.391" endtime="20170816 07:32:39.603"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 07:32:39.603" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/2/attr/AdditionalData</msg>
<status status="PASS" starttime="20170816 07:32:39.603" endtime="20170816 07:32:39.603"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20170816 07:32:39.604" endtime="20170816 07:32:39.604"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 07:32:39.713" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/2/attr/AdditionalData, headers=None json=None</msg>
<msg timestamp="20170816 07:32:39.713" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:32:39.605" endtime="20170816 07:32:39.713"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" starttime="20170816 07:32:39.714" endtime="20170816 07:32:39.714"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 07:32:39.714" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170816 07:32:39.714" endtime="20170816 07:32:39.714"></status>
</kw>
<msg timestamp="20170816 07:32:39.715" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:32:39.390" endtime="20170816 07:32:39.715"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:32:39.715" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:32:39.715" endtime="20170816 07:32:39.715"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 07:32:39.716" level="INFO">To JSON using : content={
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 07:32:39.716" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 07:32:39.716" level="INFO">${content} = {u'data': [], u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170816 07:32:39.716" endtime="20170816 07:32:39.716"></status>
</kw>
<msg timestamp="20170816 07:32:39.716" level="INFO">${esel_data} = []</msg>
<status status="PASS" starttime="20170816 07:32:39.390" endtime="20170816 07:32:39.716"></status>
</kw>
<kw library="BuiltIn" name="Get Length">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg timestamp="20170816 07:32:39.717" level="INFO">Length is 0</msg>
<msg timestamp="20170816 07:32:39.717" level="INFO">${length} = 0</msg>
<status status="PASS" starttime="20170816 07:32:39.717" endtime="20170816 07:32:39.717"></status>
</kw>
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<msg timestamp="20170816 07:32:39.718" level="INFO">Continuing for loop from the next iteration.</msg>
<status status="PASS" starttime="20170816 07:32:39.717" endtime="20170816 07:32:39.718"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:39.389" endtime="20170816 07:32:39.718"></status>
</kw>
<kw type="foritem" name="${entry_path} = /xyz/openbmc_project/logging/entry/3">
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status status="PASS" starttime="20170816 07:32:39.718" endtime="20170816 07:32:39.719"></status>
</kw>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 07:32:39.722" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170816 07:32:39.722" endtime="20170816 07:32:39.722"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 07:32:39.723" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170816 07:32:39.723" endtime="20170816 07:32:39.723"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 07:32:39.723" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170816 07:32:39.723" endtime="20170816 07:32:39.724"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 07:32:39.724" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170816 07:32:39.724" endtime="20170816 07:32:39.724"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 07:32:40.015" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170816 07:32:39.725" endtime="20170816 07:32:40.016"></status>
</kw>
<msg timestamp="20170816 07:32:40.016" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 07:32:40.016" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:32:39.725" endtime="20170816 07:32:40.016"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 07:32:40.017" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:32:40.016" endtime="20170816 07:32:40.017"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:32:40.017" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:32:40.017" endtime="20170816 07:32:40.017"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:39.721" endtime="20170816 07:32:40.018"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:39.721" endtime="20170816 07:32:40.018"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:39.720" endtime="20170816 07:32:40.018"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 07:32:40.018" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/3/attr/AdditionalData</msg>
<status status="PASS" starttime="20170816 07:32:40.018" endtime="20170816 07:32:40.018"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20170816 07:32:40.019" endtime="20170816 07:32:40.019"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 07:32:40.101" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/3/attr/AdditionalData, headers=None json=None</msg>
<msg timestamp="20170816 07:32:40.101" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:32:40.019" endtime="20170816 07:32:40.101"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" starttime="20170816 07:32:40.102" endtime="20170816 07:32:40.102"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 07:32:40.102" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170816 07:32:40.102" endtime="20170816 07:32:40.103"></status>
</kw>
<msg timestamp="20170816 07:32:40.103" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:32:39.719" endtime="20170816 07:32:40.103"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:32:40.103" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:32:40.103" endtime="20170816 07:32:40.103"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 07:32:40.104" level="INFO">To JSON using : content={
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 07:32:40.104" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 07:32:40.104" level="INFO">${content} = {u'data': [], u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170816 07:32:40.104" endtime="20170816 07:32:40.104"></status>
</kw>
<msg timestamp="20170816 07:32:40.105" level="INFO">${esel_data} = []</msg>
<status status="PASS" starttime="20170816 07:32:39.719" endtime="20170816 07:32:40.105"></status>
</kw>
<kw library="BuiltIn" name="Get Length">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg timestamp="20170816 07:32:40.105" level="INFO">Length is 0</msg>
<msg timestamp="20170816 07:32:40.105" level="INFO">${length} = 0</msg>
<status status="PASS" starttime="20170816 07:32:40.105" endtime="20170816 07:32:40.105"></status>
</kw>
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<msg timestamp="20170816 07:32:40.106" level="INFO">Continuing for loop from the next iteration.</msg>
<status status="PASS" starttime="20170816 07:32:40.105" endtime="20170816 07:32:40.106"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:39.718" endtime="20170816 07:32:40.106"></status>
</kw>
<kw type="foritem" name="${entry_path} = /xyz/openbmc_project/logging/entry/4">
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status status="PASS" starttime="20170816 07:32:40.106" endtime="20170816 07:32:40.107"></status>
</kw>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 07:32:40.111" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170816 07:32:40.111" endtime="20170816 07:32:40.112"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 07:32:40.112" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170816 07:32:40.112" endtime="20170816 07:32:40.112"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 07:32:40.113" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170816 07:32:40.113" endtime="20170816 07:32:40.113"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 07:32:40.114" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170816 07:32:40.113" endtime="20170816 07:32:40.114"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 07:32:40.319" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170816 07:32:40.114" endtime="20170816 07:32:40.319"></status>
</kw>
<msg timestamp="20170816 07:32:40.319" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 07:32:40.319" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:32:40.114" endtime="20170816 07:32:40.319"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 07:32:40.320" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:32:40.319" endtime="20170816 07:32:40.320"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:32:40.320" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:32:40.320" endtime="20170816 07:32:40.320"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:40.110" endtime="20170816 07:32:40.321"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:40.110" endtime="20170816 07:32:40.321"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:40.109" endtime="20170816 07:32:40.321"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 07:32:40.321" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/4/attr/AdditionalData</msg>
<status status="PASS" starttime="20170816 07:32:40.321" endtime="20170816 07:32:40.321"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20170816 07:32:40.322" endtime="20170816 07:32:40.322"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 07:32:40.404" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/4/attr/AdditionalData, headers=None json=None</msg>
<msg timestamp="20170816 07:32:40.404" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:32:40.322" endtime="20170816 07:32:40.404"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" starttime="20170816 07:32:40.405" endtime="20170816 07:32:40.405"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 07:32:40.405" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170816 07:32:40.405" endtime="20170816 07:32:40.406"></status>
</kw>
<msg timestamp="20170816 07:32:40.406" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:32:40.108" endtime="20170816 07:32:40.406"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:32:40.406" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:32:40.406" endtime="20170816 07:32:40.407"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 07:32:40.407" level="INFO">To JSON using : content={
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 07:32:40.407" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 07:32:40.407" level="INFO">${content} = {u'data': [], u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170816 07:32:40.407" endtime="20170816 07:32:40.407"></status>
</kw>
<msg timestamp="20170816 07:32:40.408" level="INFO">${esel_data} = []</msg>
<status status="PASS" starttime="20170816 07:32:40.107" endtime="20170816 07:32:40.408"></status>
</kw>
<kw library="BuiltIn" name="Get Length">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg timestamp="20170816 07:32:40.408" level="INFO">Length is 0</msg>
<msg timestamp="20170816 07:32:40.408" level="INFO">${length} = 0</msg>
<status status="PASS" starttime="20170816 07:32:40.408" endtime="20170816 07:32:40.408"></status>
</kw>
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<msg timestamp="20170816 07:32:40.409" level="INFO">Continuing for loop from the next iteration.</msg>
<status status="PASS" starttime="20170816 07:32:40.409" endtime="20170816 07:32:40.409"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:40.106" endtime="20170816 07:32:40.409"></status>
</kw>
<kw type="foritem" name="${entry_path} = /xyz/openbmc_project/logging/entry/5">
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status status="PASS" starttime="20170816 07:32:40.409" endtime="20170816 07:32:40.410"></status>
</kw>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 07:32:40.415" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170816 07:32:40.414" endtime="20170816 07:32:40.415"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 07:32:40.416" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170816 07:32:40.415" endtime="20170816 07:32:40.416"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 07:32:40.417" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170816 07:32:40.416" endtime="20170816 07:32:40.417"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 07:32:40.418" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170816 07:32:40.417" endtime="20170816 07:32:40.418"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 07:32:40.627" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170816 07:32:40.419" endtime="20170816 07:32:40.628"></status>
</kw>
<msg timestamp="20170816 07:32:40.628" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 07:32:40.628" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:32:40.418" endtime="20170816 07:32:40.628"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 07:32:40.629" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:32:40.628" endtime="20170816 07:32:40.629"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:32:40.629" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:32:40.629" endtime="20170816 07:32:40.629"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:40.413" endtime="20170816 07:32:40.629"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:40.413" endtime="20170816 07:32:40.630"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:40.412" endtime="20170816 07:32:40.630"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 07:32:40.630" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/5/attr/AdditionalData</msg>
<status status="PASS" starttime="20170816 07:32:40.630" endtime="20170816 07:32:40.630"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20170816 07:32:40.631" endtime="20170816 07:32:40.631"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 07:32:40.724" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/5/attr/AdditionalData, headers=None json=None</msg>
<msg timestamp="20170816 07:32:40.725" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:32:40.631" endtime="20170816 07:32:40.725"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" starttime="20170816 07:32:40.725" endtime="20170816 07:32:40.725"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 07:32:40.726" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170816 07:32:40.726" endtime="20170816 07:32:40.726"></status>
</kw>
<msg timestamp="20170816 07:32:40.726" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:32:40.411" endtime="20170816 07:32:40.726"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:32:40.727" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:32:40.726" endtime="20170816 07:32:40.727"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 07:32:40.727" level="INFO">To JSON using : content={
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 07:32:40.727" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 07:32:40.728" level="INFO">${content} = {u'data': [], u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170816 07:32:40.727" endtime="20170816 07:32:40.728"></status>
</kw>
<msg timestamp="20170816 07:32:40.728" level="INFO">${esel_data} = []</msg>
<status status="PASS" starttime="20170816 07:32:40.410" endtime="20170816 07:32:40.728"></status>
</kw>
<kw library="BuiltIn" name="Get Length">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg timestamp="20170816 07:32:40.728" level="INFO">Length is 0</msg>
<msg timestamp="20170816 07:32:40.729" level="INFO">${length} = 0</msg>
<status status="PASS" starttime="20170816 07:32:40.728" endtime="20170816 07:32:40.729"></status>
</kw>
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<msg timestamp="20170816 07:32:40.729" level="INFO">Continuing for loop from the next iteration.</msg>
<status status="PASS" starttime="20170816 07:32:40.729" endtime="20170816 07:32:40.729"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:40.409" endtime="20170816 07:32:40.729"></status>
</kw>
<kw type="foritem" name="${entry_path} = /xyz/openbmc_project/logging/entry/6">
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status status="PASS" starttime="20170816 07:32:40.730" endtime="20170816 07:32:40.730"></status>
</kw>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 07:32:40.733" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170816 07:32:40.733" endtime="20170816 07:32:40.734"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 07:32:40.735" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170816 07:32:40.734" endtime="20170816 07:32:40.735"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 07:32:40.735" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170816 07:32:40.735" endtime="20170816 07:32:40.735"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 07:32:40.736" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170816 07:32:40.736" endtime="20170816 07:32:40.736"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 07:32:40.985" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170816 07:32:40.737" endtime="20170816 07:32:40.986"></status>
</kw>
<msg timestamp="20170816 07:32:40.986" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 07:32:40.986" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:32:40.737" endtime="20170816 07:32:40.986"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 07:32:40.987" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:32:40.986" endtime="20170816 07:32:40.987"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:32:40.987" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:32:40.987" endtime="20170816 07:32:40.987"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:40.733" endtime="20170816 07:32:40.987"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:40.732" endtime="20170816 07:32:40.988"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:40.732" endtime="20170816 07:32:40.988"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 07:32:40.988" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/6/attr/AdditionalData</msg>
<status status="PASS" starttime="20170816 07:32:40.988" endtime="20170816 07:32:40.988"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20170816 07:32:40.989" endtime="20170816 07:32:40.989"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 07:32:41.113" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/6/attr/AdditionalData, headers=None json=None</msg>
<msg timestamp="20170816 07:32:41.113" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:32:40.989" endtime="20170816 07:32:41.113"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" starttime="20170816 07:32:41.114" endtime="20170816 07:32:41.114"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 07:32:41.114" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170816 07:32:41.114" endtime="20170816 07:32:41.114"></status>
</kw>
<msg timestamp="20170816 07:32:41.115" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:32:40.731" endtime="20170816 07:32:41.115"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:32:41.115" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:32:41.115" endtime="20170816 07:32:41.115"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 07:32:41.116" level="INFO">To JSON using : content={
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 07:32:41.116" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 07:32:41.116" level="INFO">${content} = {u'data': [], u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170816 07:32:41.116" endtime="20170816 07:32:41.116"></status>
</kw>
<msg timestamp="20170816 07:32:41.116" level="INFO">${esel_data} = []</msg>
<status status="PASS" starttime="20170816 07:32:40.730" endtime="20170816 07:32:41.117"></status>
</kw>
<kw library="BuiltIn" name="Get Length">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg timestamp="20170816 07:32:41.117" level="INFO">Length is 0</msg>
<msg timestamp="20170816 07:32:41.117" level="INFO">${length} = 0</msg>
<status status="PASS" starttime="20170816 07:32:41.117" endtime="20170816 07:32:41.117"></status>
</kw>
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<msg timestamp="20170816 07:32:41.118" level="INFO">Continuing for loop from the next iteration.</msg>
<status status="PASS" starttime="20170816 07:32:41.117" endtime="20170816 07:32:41.118"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:40.729" endtime="20170816 07:32:41.118"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:39.093" endtime="20170816 07:32:41.118"></status>
</kw>
<kw library="OperatingSystem" name="Run">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>which eSEL.pl</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<msg timestamp="20170816 07:32:41.134" level="INFO">Running command 'which eSEL.pl 2&gt;&amp;1'.</msg>
<msg timestamp="20170816 07:32:41.137" level="INFO">${out} = </msg>
<status status="PASS" starttime="20170816 07:32:41.118" endtime="20170816 07:32:41.137"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${out}</arg>
<arg>eSEL.pl</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Contain">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${out}</arg>
<arg>eSEL.pl</arg>
</arguments>
<msg timestamp="20170816 07:32:41.141" level="FAIL">'' does not contain 'eSEL.pl'</msg>
<status status="FAIL" starttime="20170816 07:32:41.140" endtime="20170816 07:32:41.141"></status>
</kw>
<msg timestamp="20170816 07:32:41.141" level="INFO">${status} = False</msg>
<status status="PASS" starttime="20170816 07:32:41.140" endtime="20170816 07:32:41.141"></status>
</kw>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
</arguments>
<msg timestamp="20170816 07:32:41.142" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20170816 07:32:41.142" endtime="20170816 07:32:41.143"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:38.632" endtime="20170816 07:32:41.143"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:38.606" endtime="20170816 07:32:41.143"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:38.603" endtime="20170816 07:32:41.143"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:38.603" endtime="20170816 07:32:41.143"></status>
</kw>
<kw type="foritem" name="${method} = ('BMC Specific Files', 'BMC FFDC Files')">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="Collections" name="List Should Contain Value">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" starttime="20170816 07:32:41.146" endtime="20170816 07:32:41.146"></status>
</kw>
<msg timestamp="20170816 07:32:41.146" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 07:32:41.146" level="INFO">${ret_values} = None</msg>
<status status="PASS" starttime="20170816 07:32:41.145" endtime="20170816 07:32:41.146"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" starttime="20170816 07:32:41.147" endtime="20170816 07:32:41.147"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="BMC FFDC Files">
<doc>Get the command list and iterate</doc>
<kw library="openbmc_ffdc_list" name="Get Ffdc File Index">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170816 07:32:41.175" level="INFO">@{entries} = [ BMC FILES ]</msg>
<status status="PASS" starttime="20170816 07:32:41.175" endtime="20170816 07:32:41.175"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC FILES">
<kw library="openbmc_ffdc_methods" name="Create File and Write Data">
<doc>Create files to current FFDC log directory,</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Bmc File">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170816 07:32:41.176" level="INFO">@{cmd_list} = [ ('BMC_journalctl', 'journalctl --no-pager') | ('BMC_proc_list', 'top -n 1 -b') | ('BMC_meminfo', 'cat /proc/meminfo') | ('BMC_procinfo', 'cat /proc/cpuinfo') | ('BMC_proc_fd_active_list', 'ls -Al /p...</msg>
<status status="PASS" starttime="20170816 07:32:41.176" endtime="20170816 07:32:41.176"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC_journalctl', 'journalctl --no-pager')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170816 07:32:41.178" level="INFO">${logpath} = /tmp/fspcibld/2147/obmc-robot/logs/20170816073233030367_TestsTestBasicPoweron/20170816073233030367_PowerOnTest/20170816073233030367_BMC_journalctl.txt</msg>
<status status="PASS" starttime="20170816 07:32:41.177" endtime="20170816 07:32:41.178"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" starttime="20170816 07:32:41.179" endtime="20170816 07:32:41.179"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170816 07:32:41.180" level="INFO">${cmd_buf} = BMC Execute Command  journalctl --no-pager  ignore_err=1</msg>
<status status="PASS" starttime="20170816 07:32:41.179" endtime="20170816 07:32:41.180"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>journalctl --no-pager</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170816 07:32:41.254" level="INFO">encoding=UTF-8
prompt=# 
alias=bmc_connection
term_type=vt100
newline=

host=9.41.166.169
width=80
port=22
timeout=25 seconds
path_separator=/
index=1
height=24</msg>
<msg timestamp="20170816 07:32:41.255" level="INFO">Executing command 'journalctl --no-pager'.</msg>
<msg timestamp="20170816 07:32:43.679" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" starttime="20170816 07:32:41.211" endtime="20170816 07:32:43.679"></status>
</kw>
<msg timestamp="20170816 07:32:43.679" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 07:32:43.683" level="INFO">${ret_values} = (u'-- Logs begin at Thu 2017-08-03 15:42:59 UTC, end at Thu 2017-08-03 15:59:15 UTC. --\nAug 03 15:42:59 witherspoon kernel: Booting Linux on physical CPU 0x0\nAug 03 15:42:59 witherspoon kernel: Linu...</msg>
<status status="PASS" starttime="20170816 07:32:41.180" endtime="20170816 07:32:43.683"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170816 07:32:43.685" level="INFO">${stdout} = -- Logs begin at Thu 2017-08-03 15:42:59 UTC, end at Thu 2017-08-03 15:59:15 UTC. --
Aug 03 15:42:59 witherspoon kernel: Booting Linux on physical CPU 0x0
Aug 03 15:42:59 witherspoon kernel: Linux ver...</msg>
<status status="PASS" starttime="20170816 07:32:43.684" endtime="20170816 07:32:43.685"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170816 07:32:43.686" level="INFO">${stderr} = </msg>
<status status="PASS" starttime="20170816 07:32:43.685" endtime="20170816 07:32:43.686"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170816 07:32:43.695" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/2147/obmc-robot/logs/20170816073233030367_TestsTestBasicPoweron/20170816073233030367_PowerOnTest/20170816073233030367_BMC_journalctl.txt"&gt;/tmp/fspcibld/2147/obmc-robot/logs/20170816073233030367_TestsTestBasicPoweron/20170816073233030367_PowerOnTest/20170816073233030367_BMC_journalctl.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170816 07:32:43.693" endtime="20170816 07:32:43.695"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:43.691" endtime="20170816 07:32:43.695"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:43.686" endtime="20170816 07:32:43.695"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:41.178" endtime="20170816 07:32:43.695"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:41.176" endtime="20170816 07:32:43.695"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_proc_list', 'top -n 1 -b')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170816 07:32:43.696" level="INFO">${logpath} = /tmp/fspcibld/2147/obmc-robot/logs/20170816073233030367_TestsTestBasicPoweron/20170816073233030367_PowerOnTest/20170816073233030367_BMC_proc_list.txt</msg>
<status status="PASS" starttime="20170816 07:32:43.695" endtime="20170816 07:32:43.696"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" starttime="20170816 07:32:43.697" endtime="20170816 07:32:43.697"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170816 07:32:43.698" level="INFO">${cmd_buf} = BMC Execute Command  top -n 1 -b  ignore_err=1</msg>
<status status="PASS" starttime="20170816 07:32:43.698" endtime="20170816 07:32:43.698"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>top -n 1 -b</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170816 07:32:43.771" level="INFO">encoding=UTF-8
prompt=# 
alias=bmc_connection
term_type=vt100
newline=

host=9.41.166.169
width=80
port=22
timeout=25 seconds
path_separator=/
index=1
height=24</msg>
<msg timestamp="20170816 07:32:43.771" level="INFO">Executing command 'top -n 1 -b'.</msg>
<msg timestamp="20170816 07:32:44.074" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" starttime="20170816 07:32:43.730" endtime="20170816 07:32:44.074"></status>
</kw>
<msg timestamp="20170816 07:32:44.074" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 07:32:44.075" level="INFO">${ret_values} = (u'Mem: 185284K used, 246964K free, 15056K shrd, 16408K buff, 72184K cached\nCPU:   9% usr   9% sys   0% nic  81% idle   0% io   0% irq   0% sirq\nLoad average: 0.70 1.20 1.09 1/154 2929\n  PID  PPID ...</msg>
<status status="PASS" starttime="20170816 07:32:43.698" endtime="20170816 07:32:44.075"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170816 07:32:44.075" level="INFO">${stdout} = Mem: 185284K used, 246964K free, 15056K shrd, 16408K buff, 72184K cached
CPU:   9% usr   9% sys   0% nic  81% idle   0% io   0% irq   0% sirq
Load average: 0.70 1.20 1.09 1/154 2929
  PID  PPID USER  ...</msg>
<status status="PASS" starttime="20170816 07:32:44.075" endtime="20170816 07:32:44.075"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170816 07:32:44.076" level="INFO">${stderr} = </msg>
<status status="PASS" starttime="20170816 07:32:44.076" endtime="20170816 07:32:44.076"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170816 07:32:44.083" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/2147/obmc-robot/logs/20170816073233030367_TestsTestBasicPoweron/20170816073233030367_PowerOnTest/20170816073233030367_BMC_proc_list.txt"&gt;/tmp/fspcibld/2147/obmc-robot/logs/20170816073233030367_TestsTestBasicPoweron/20170816073233030367_PowerOnTest/20170816073233030367_BMC_proc_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170816 07:32:44.082" endtime="20170816 07:32:44.083"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:44.081" endtime="20170816 07:32:44.083"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:44.076" endtime="20170816 07:32:44.083"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:43.696" endtime="20170816 07:32:44.083"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:43.695" endtime="20170816 07:32:44.083"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_meminfo', 'cat /proc/meminfo')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170816 07:32:44.084" level="INFO">${logpath} = /tmp/fspcibld/2147/obmc-robot/logs/20170816073233030367_TestsTestBasicPoweron/20170816073233030367_PowerOnTest/20170816073233030367_BMC_meminfo.txt</msg>
<status status="PASS" starttime="20170816 07:32:44.084" endtime="20170816 07:32:44.084"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" starttime="20170816 07:32:44.085" endtime="20170816 07:32:44.085"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170816 07:32:44.086" level="INFO">${cmd_buf} = BMC Execute Command  cat /proc/meminfo  ignore_err=1</msg>
<status status="PASS" starttime="20170816 07:32:44.086" endtime="20170816 07:32:44.086"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /proc/meminfo</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170816 07:32:44.153" level="INFO">encoding=UTF-8
prompt=# 
alias=bmc_connection
term_type=vt100
newline=

host=9.41.166.169
width=80
port=22
timeout=25 seconds
path_separator=/
index=1
height=24</msg>
<msg timestamp="20170816 07:32:44.153" level="INFO">Executing command 'cat /proc/meminfo'.</msg>
<msg timestamp="20170816 07:32:44.210" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" starttime="20170816 07:32:44.117" endtime="20170816 07:32:44.210"></status>
</kw>
<msg timestamp="20170816 07:32:44.210" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 07:32:44.210" level="INFO">${ret_values} = (u'MemTotal:         432248 kB\nMemFree:          246964 kB\nMemAvailable:     318928 kB\nBuffers:           16408 kB\nCached:            72184 kB\nSwapCached:            0 kB\nActive:           12524...</msg>
<status status="PASS" starttime="20170816 07:32:44.086" endtime="20170816 07:32:44.210"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170816 07:32:44.211" level="INFO">${stdout} = MemTotal:         432248 kB
MemFree:          246964 kB
MemAvailable:     318928 kB
Buffers:           16408 kB
Cached:            72184 kB
SwapCached:            0 kB
Active:           125248 kB
Inac...</msg>
<status status="PASS" starttime="20170816 07:32:44.211" endtime="20170816 07:32:44.211"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170816 07:32:44.212" level="INFO">${stderr} = </msg>
<status status="PASS" starttime="20170816 07:32:44.211" endtime="20170816 07:32:44.212"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170816 07:32:44.218" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/2147/obmc-robot/logs/20170816073233030367_TestsTestBasicPoweron/20170816073233030367_PowerOnTest/20170816073233030367_BMC_meminfo.txt"&gt;/tmp/fspcibld/2147/obmc-robot/logs/20170816073233030367_TestsTestBasicPoweron/20170816073233030367_PowerOnTest/20170816073233030367_BMC_meminfo.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170816 07:32:44.218" endtime="20170816 07:32:44.219"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:44.217" endtime="20170816 07:32:44.219"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:44.212" endtime="20170816 07:32:44.219"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:44.084" endtime="20170816 07:32:44.219"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:44.083" endtime="20170816 07:32:44.219"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_procinfo', 'cat /proc/cpuinfo')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170816 07:32:44.220" level="INFO">${logpath} = /tmp/fspcibld/2147/obmc-robot/logs/20170816073233030367_TestsTestBasicPoweron/20170816073233030367_PowerOnTest/20170816073233030367_BMC_procinfo.txt</msg>
<status status="PASS" starttime="20170816 07:32:44.219" endtime="20170816 07:32:44.220"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" starttime="20170816 07:32:44.221" endtime="20170816 07:32:44.221"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170816 07:32:44.222" level="INFO">${cmd_buf} = BMC Execute Command  cat /proc/cpuinfo  ignore_err=1</msg>
<status status="PASS" starttime="20170816 07:32:44.221" endtime="20170816 07:32:44.222"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /proc/cpuinfo</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170816 07:32:44.294" level="INFO">encoding=UTF-8
prompt=# 
alias=bmc_connection
term_type=vt100
newline=

host=9.41.166.169
width=80
port=22
timeout=25 seconds
path_separator=/
index=1
height=24</msg>
<msg timestamp="20170816 07:32:44.294" level="INFO">Executing command 'cat /proc/cpuinfo'.</msg>
<msg timestamp="20170816 07:32:44.351" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" starttime="20170816 07:32:44.258" endtime="20170816 07:32:44.351"></status>
</kw>
<msg timestamp="20170816 07:32:44.351" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 07:32:44.351" level="INFO">${ret_values} = (u'processor\t: 0\nmodel name\t: ARMv6-compatible processor rev 7 (v6l)\nBogoMIPS\t: 789.70\nFeatures\t: half thumb fastmult edsp java tls \nCPU implementer\t: 0x41\nCPU architecture: 7\nCPU variant\t...</msg>
<status status="PASS" starttime="20170816 07:32:44.222" endtime="20170816 07:32:44.351"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170816 07:32:44.352" level="INFO">${stdout} = processor	: 0
model name	: ARMv6-compatible processor rev 7 (v6l)
BogoMIPS	: 789.70
Features	: half thumb fastmult edsp java tls 
CPU implementer	: 0x41
CPU architecture: 7
CPU variant	: 0x0
CPU part	...</msg>
<status status="PASS" starttime="20170816 07:32:44.351" endtime="20170816 07:32:44.352"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170816 07:32:44.352" level="INFO">${stderr} = </msg>
<status status="PASS" starttime="20170816 07:32:44.352" endtime="20170816 07:32:44.352"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170816 07:32:44.359" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/2147/obmc-robot/logs/20170816073233030367_TestsTestBasicPoweron/20170816073233030367_PowerOnTest/20170816073233030367_BMC_procinfo.txt"&gt;/tmp/fspcibld/2147/obmc-robot/logs/20170816073233030367_TestsTestBasicPoweron/20170816073233030367_PowerOnTest/20170816073233030367_BMC_procinfo.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170816 07:32:44.358" endtime="20170816 07:32:44.359"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:44.358" endtime="20170816 07:32:44.359"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:44.353" endtime="20170816 07:32:44.360"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:44.220" endtime="20170816 07:32:44.360"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:44.219" endtime="20170816 07:32:44.360"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_proc_fd_active_list', 'ls -Al /proc/*/fd/')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170816 07:32:44.360" level="INFO">${logpath} = /tmp/fspcibld/2147/obmc-robot/logs/20170816073233030367_TestsTestBasicPoweron/20170816073233030367_PowerOnTest/20170816073233030367_BMC_proc_fd_active_list.txt</msg>
<status status="PASS" starttime="20170816 07:32:44.360" endtime="20170816 07:32:44.361"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" starttime="20170816 07:32:44.361" endtime="20170816 07:32:44.362"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170816 07:32:44.362" level="INFO">${cmd_buf} = BMC Execute Command  ls -Al /proc/*/fd/  ignore_err=1</msg>
<status status="PASS" starttime="20170816 07:32:44.362" endtime="20170816 07:32:44.363"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>ls -Al /proc/*/fd/</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170816 07:32:44.430" level="INFO">encoding=UTF-8
prompt=# 
alias=bmc_connection
term_type=vt100
newline=

host=9.41.166.169
width=80
port=22
timeout=25 seconds
path_separator=/
index=1
height=24</msg>
<msg timestamp="20170816 07:32:44.430" level="INFO">Executing command 'ls -Al /proc/*/fd/'.</msg>
<msg timestamp="20170816 07:32:45.012" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" starttime="20170816 07:32:44.394" endtime="20170816 07:32:45.012"></status>
</kw>
<msg timestamp="20170816 07:32:45.012" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 07:32:45.013" level="INFO">${ret_values} = (u'/proc/1/fd/:\ntotal 0\nlrwx------    1 root     root            64 Aug  3 15:59 0 -&gt; /dev/null\nlrwx------    1 root     root            64 Aug  3 15:59 1 -&gt; /dev/null\nlr-x------    1 root     roo...</msg>
<status status="PASS" starttime="20170816 07:32:44.363" endtime="20170816 07:32:45.013"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170816 07:32:45.014" level="INFO">${stdout} = /proc/1/fd/:
total 0
lrwx------    1 root     root            64 Aug  3 15:59 0 -&gt; /dev/null
lrwx------    1 root     root            64 Aug  3 15:59 1 -&gt; /dev/null
lr-x------    1 root     root      ...</msg>
<status status="PASS" starttime="20170816 07:32:45.013" endtime="20170816 07:32:45.014"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170816 07:32:45.015" level="INFO">${stderr} = ls: /proc/2932/fd/3: cannot read link: No such file or directory
ls: /proc/self/fd/3: cannot read link: No such file or directory
ls: /proc/thread-self/fd/3: cannot read link: No such file or director...</msg>
<status status="PASS" starttime="20170816 07:32:45.014" endtime="20170816 07:32:45.015"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170816 07:32:45.022" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/2147/obmc-robot/logs/20170816073233030367_TestsTestBasicPoweron/20170816073233030367_PowerOnTest/20170816073233030367_BMC_proc_fd_active_list.txt"&gt;/tmp/fspcibld/2147/obmc-robot/logs/20170816073233030367_TestsTestBasicPoweron/20170816073233030367_PowerOnTest/20170816073233030367_BMC_proc_fd_active_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170816 07:32:45.021" endtime="20170816 07:32:45.022"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:45.020" endtime="20170816 07:32:45.022"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:45.015" endtime="20170816 07:32:45.022"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:44.361" endtime="20170816 07:32:45.022"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:44.360" endtime="20170816 07:32:45.022"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_dmesg', 'dmesg')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170816 07:32:45.023" level="INFO">${logpath} = /tmp/fspcibld/2147/obmc-robot/logs/20170816073233030367_TestsTestBasicPoweron/20170816073233030367_PowerOnTest/20170816073233030367_BMC_dmesg.txt</msg>
<status status="PASS" starttime="20170816 07:32:45.023" endtime="20170816 07:32:45.023"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" starttime="20170816 07:32:45.024" endtime="20170816 07:32:45.025"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170816 07:32:45.025" level="INFO">${cmd_buf} = BMC Execute Command  dmesg  ignore_err=1</msg>
<status status="PASS" starttime="20170816 07:32:45.025" endtime="20170816 07:32:45.025"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>dmesg</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170816 07:32:45.093" level="INFO">encoding=UTF-8
prompt=# 
alias=bmc_connection
term_type=vt100
newline=

host=9.41.166.169
width=80
port=22
timeout=25 seconds
path_separator=/
index=1
height=24</msg>
<msg timestamp="20170816 07:32:45.093" level="INFO">Executing command 'dmesg'.</msg>
<msg timestamp="20170816 07:32:45.160" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" starttime="20170816 07:32:45.057" endtime="20170816 07:32:45.160"></status>
</kw>
<msg timestamp="20170816 07:32:45.160" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 07:32:45.161" level="INFO">${ret_values} = (u'[    0.000000] sched_clock: 32 bits at 100 Hz, resolution 10000000ns, wraps every 21474836475000000ns\n[    0.090000] Calibrating delay loop... 789.70 BogoMIPS (lpj=3948544)\n[    0.090000] pid_max...</msg>
<status status="PASS" starttime="20170816 07:32:45.026" endtime="20170816 07:32:45.161"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170816 07:32:45.162" level="INFO">${stdout} = [    0.000000] sched_clock: 32 bits at 100 Hz, resolution 10000000ns, wraps every 21474836475000000ns
[    0.090000] Calibrating delay loop... 789.70 BogoMIPS (lpj=3948544)
[    0.090000] pid_max: def...</msg>
<status status="PASS" starttime="20170816 07:32:45.161" endtime="20170816 07:32:45.162"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170816 07:32:45.162" level="INFO">${stderr} = </msg>
<status status="PASS" starttime="20170816 07:32:45.162" endtime="20170816 07:32:45.162"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170816 07:32:45.169" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/2147/obmc-robot/logs/20170816073233030367_TestsTestBasicPoweron/20170816073233030367_PowerOnTest/20170816073233030367_BMC_dmesg.txt"&gt;/tmp/fspcibld/2147/obmc-robot/logs/20170816073233030367_TestsTestBasicPoweron/20170816073233030367_PowerOnTest/20170816073233030367_BMC_dmesg.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170816 07:32:45.168" endtime="20170816 07:32:45.169"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:45.168" endtime="20170816 07:32:45.169"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:45.162" endtime="20170816 07:32:45.169"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:45.023" endtime="20170816 07:32:45.169"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:45.022" endtime="20170816 07:32:45.169"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:41.176" endtime="20170816 07:32:45.170"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:41.175" endtime="20170816 07:32:45.170"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:41.175" endtime="20170816 07:32:45.170"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:41.175" endtime="20170816 07:32:45.170"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:41.174" endtime="20170816 07:32:45.170"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:41.147" endtime="20170816 07:32:45.170"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:41.144" endtime="20170816 07:32:45.170"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:41.144" endtime="20170816 07:32:45.170"></status>
</kw>
<kw type="foritem" name="${method} = ('Core Files', 'SCP Coredump Files')">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="Collections" name="List Should Contain Value">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" starttime="20170816 07:32:45.172" endtime="20170816 07:32:45.172"></status>
</kw>
<msg timestamp="20170816 07:32:45.172" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 07:32:45.172" level="INFO">${ret_values} = None</msg>
<status status="PASS" starttime="20170816 07:32:45.171" endtime="20170816 07:32:45.172"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" starttime="20170816 07:32:45.172" endtime="20170816 07:32:45.173"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="SCP Coredump Files">
<doc>Copy core dump file from BMC to local system.</doc>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>ls /tmp/core_*</arg>
</arguments>
<assign>
<var>${core_files}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20170816 07:32:45.230" level="INFO">encoding=UTF-8
prompt=# 
alias=bmc_connection
term_type=vt100
newline=

host=9.41.166.169
width=80
port=22
timeout=25 seconds
path_separator=/
index=1
height=24</msg>
<msg timestamp="20170816 07:32:45.230" level="INFO">Executing command 'ls /tmp/core_*'.</msg>
<msg timestamp="20170816 07:32:45.287" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170816 07:32:45.298" level="INFO">${core_files} = /tmp/core_phosphor-hwmon-.1662
/tmp/core_xargs.1239</msg>
<msg timestamp="20170816 07:32:45.298" level="INFO">${stderr} = </msg>
<msg timestamp="20170816 07:32:45.298" level="INFO">${rc} = 0</msg>
<status status="PASS" starttime="20170816 07:32:45.199" endtime="20170816 07:32:45.298"></status>
</kw>
<kw library="String" name="Split String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${core_files}</arg>
</arguments>
<assign>
<var>@{core_list}</var>
</assign>
<msg timestamp="20170816 07:32:45.299" level="INFO">@{core_list} = [ /tmp/core_phosphor-hwmon-.1662 | /tmp/core_xargs.1239 ]</msg>
<status status="PASS" starttime="20170816 07:32:45.299" endtime="20170816 07:32:45.299"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key U">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>Open Connection for SCP</arg>
</arguments>
<kw library="connection_client" name="Open Connection for SCP">
<kw library="BuiltIn" name="Import Library">
<doc>Imports a library with the given name and optional arguments.</doc>
<arguments>
<arg>SCPLibrary</arg>
<arg>WITH NAME</arg>
<arg>scp</arg>
</arguments>
<status status="PASS" starttime="20170816 07:32:45.309" endtime="20170816 07:32:45.320"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' == '${EMPTY}'</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw library="scp" name="Open Connection">
<doc>Opens a new SCP connection to the given host.</doc>
<arguments>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<status status="PASS" starttime="20170816 07:32:45.322" endtime="20170816 07:32:45.989"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:45.321" endtime="20170816 07:32:45.989"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:45.321" endtime="20170816 07:32:45.990"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:45.309" endtime="20170816 07:32:45.990"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:45.299" endtime="20170816 07:32:45.990"></status>
</kw>
<kw type="for" name="${index} IN [ @{core_list} ]">
<kw type="foritem" name="${index} = /tmp/core_phosphor-hwmon-.1662">
<kw library="scp" name="Get File">
<doc>Downloads a file from the remote machine to the local machine.</doc>
<arguments>
<arg>${index}</arg>
<arg>${LOG_PREFIX}${index.lstrip("/tmp/")}</arg>
</arguments>
<status status="PASS" starttime="20170816 07:32:45.990" endtime="20170816 07:32:46.340"></status>
</kw>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>rm ${index}</arg>
</arguments>
<msg timestamp="20170816 07:32:46.374" level="INFO">encoding=UTF-8
prompt=# 
alias=bmc_connection
term_type=vt100
newline=

host=9.41.166.169
width=80
port=22
timeout=25 seconds
path_separator=/
index=1
height=24</msg>
<msg timestamp="20170816 07:32:46.374" level="INFO">Executing command 'rm /tmp/core_phosphor-hwmon-.1662'.</msg>
<msg timestamp="20170816 07:32:46.431" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" starttime="20170816 07:32:46.341" endtime="20170816 07:32:46.443"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:45.990" endtime="20170816 07:32:46.443"></status>
</kw>
<kw type="foritem" name="${index} = /tmp/core_xargs.1239">
<kw library="scp" name="Get File">
<doc>Downloads a file from the remote machine to the local machine.</doc>
<arguments>
<arg>${index}</arg>
<arg>${LOG_PREFIX}${index.lstrip("/tmp/")}</arg>
</arguments>
<status status="PASS" starttime="20170816 07:32:46.444" endtime="20170816 07:32:46.650"></status>
</kw>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>rm ${index}</arg>
</arguments>
<msg timestamp="20170816 07:32:46.689" level="INFO">encoding=UTF-8
prompt=# 
alias=bmc_connection
term_type=vt100
newline=

host=9.41.166.169
width=80
port=22
timeout=25 seconds
path_separator=/
index=1
height=24</msg>
<msg timestamp="20170816 07:32:46.690" level="INFO">Executing command 'rm /tmp/core_xargs.1239'.</msg>
<msg timestamp="20170816 07:32:46.736" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" starttime="20170816 07:32:46.651" endtime="20170816 07:32:46.749"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:46.443" endtime="20170816 07:32:46.749"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:45.990" endtime="20170816 07:32:46.749"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:45.198" endtime="20170816 07:32:46.749"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:45.173" endtime="20170816 07:32:46.749"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:45.170" endtime="20170816 07:32:46.749"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:45.170" endtime="20170816 07:32:46.749"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:33.253" endtime="20170816 07:32:46.750"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:33.251" endtime="20170816 07:32:46.750"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:33.250" endtime="20170816 07:32:46.750"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:33.250" endtime="20170816 07:32:46.750"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key U">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>SSHLibrary.Close All Connections</arg>
</arguments>
<kw library="SSHLibrary" name="Close All Connections">
<doc>Closes all open connections.</doc>
<status status="PASS" starttime="20170816 07:32:46.757" endtime="20170816 07:32:46.757"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:46.750" endtime="20170816 07:32:46.758"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:33.249" endtime="20170816 07:32:46.758"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:29.966" endtime="20170816 07:32:46.758"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:29.965" endtime="20170816 07:32:46.758"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}'=='True'</arg>
<arg>Recover Quiesced Host</arg>
</arguments>
<kw library="state_manager" name="Recover Quiesced Host">
<doc>Recover host from quisced state.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Is Host Quiesced</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="state_manager" name="Is Host Quiesced">
<doc>Check if host state is quiesced.</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 07:32:46.764" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170816 07:32:46.763" endtime="20170816 07:32:46.764"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 07:32:46.765" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170816 07:32:46.765" endtime="20170816 07:32:46.765"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 07:32:46.766" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170816 07:32:46.765" endtime="20170816 07:32:46.766"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 07:32:46.766" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170816 07:32:46.766" endtime="20170816 07:32:46.766"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 07:32:46.952" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170816 07:32:46.767" endtime="20170816 07:32:46.952"></status>
</kw>
<msg timestamp="20170816 07:32:46.952" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 07:32:46.952" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:32:46.767" endtime="20170816 07:32:46.952"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 07:32:46.953" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:32:46.952" endtime="20170816 07:32:46.953"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:32:46.954" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:32:46.953" endtime="20170816 07:32:46.954"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:46.762" endtime="20170816 07:32:46.954"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:46.762" endtime="20170816 07:32:46.954"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:46.761" endtime="20170816 07:32:46.955"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 07:32:46.955" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" starttime="20170816 07:32:46.955" endtime="20170816 07:32:46.956"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:32:46.959" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:32:46.958" endtime="20170816 07:32:46.959"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:32:46.960" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:32:46.960" endtime="20170816 07:32:46.960"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:46.959" endtime="20170816 07:32:46.961"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:46.957" endtime="20170816 07:32:46.961"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:46.956" endtime="20170816 07:32:46.961"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 07:32:47.052" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170816 07:32:47.052" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:32:46.961" endtime="20170816 07:32:47.052"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:32:47.055" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:32:47.054" endtime="20170816 07:32:47.055"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:32:47.056" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:32:47.056" endtime="20170816 07:32:47.056"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:47.055" endtime="20170816 07:32:47.057"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:47.054" endtime="20170816 07:32:47.057"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:47.053" endtime="20170816 07:32:47.057"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 07:32:47.057" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170816 07:32:47.057" endtime="20170816 07:32:47.057"></status>
</kw>
<msg timestamp="20170816 07:32:47.057" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:32:46.761" endtime="20170816 07:32:47.057"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:32:47.058" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:32:47.058" endtime="20170816 07:32:47.058"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 07:32:47.059" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 07:32:47.059" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 07:32:47.059" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170816 07:32:47.058" endtime="20170816 07:32:47.059"></status>
</kw>
<msg timestamp="20170816 07:32:47.059" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status status="PASS" starttime="20170816 07:32:46.760" endtime="20170816 07:32:47.059"></status>
</kw>
<msg timestamp="20170816 07:32:47.059" level="INFO">${host_state} = Quiesced</msg>
<status status="PASS" starttime="20170816 07:32:46.760" endtime="20170816 07:32:47.059"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<status status="PASS" starttime="20170816 07:32:47.060" endtime="20170816 07:32:47.061"></status>
</kw>
<msg timestamp="20170816 07:32:47.061" level="INFO">${status} = True</msg>
<status status="PASS" starttime="20170816 07:32:47.060" endtime="20170816 07:32:47.061"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:46.759" endtime="20170816 07:32:47.061"></status>
</kw>
<msg timestamp="20170816 07:32:47.061" level="INFO">${resp} = True</msg>
<status status="PASS" starttime="20170816 07:32:46.759" endtime="20170816 07:32:47.061"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${resp}' == 'True'</arg>
<arg>Run Keywords</arg>
<arg>Initiate Host PowerOff</arg>
<arg>AND</arg>
<arg>Log</arg>
<arg>HOST is recovered from quiesced state</arg>
</arguments>
<kw library="BuiltIn" name="Run Keywords">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Initiate Host PowerOff</arg>
<arg>AND</arg>
<arg>Log</arg>
<arg>HOST is recovered from quiesced state</arg>
</arguments>
<kw library="state_manager" name="Initiate Host PowerOff">
<doc>Initiate host power off.</doc>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${HOST_POWEROFF_TRANS}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20170816 07:32:47.065" level="INFO">${args} = {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}</msg>
<status status="PASS" starttime="20170816 07:32:47.064" endtime="20170816 07:32:47.065"></status>
</kw>
<kw library="rest_client" name="Write Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>RequestedHostTransition</arg>
<arg>data=${args}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 07:32:47.066" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0/</msg>
<status status="PASS" starttime="20170816 07:32:47.066" endtime="20170816 07:32:47.066"></status>
</kw>
<kw library="rest_client" name="OpenBMC Put Request">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 07:32:47.070" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170816 07:32:47.070" endtime="20170816 07:32:47.071"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 07:32:47.072" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170816 07:32:47.071" endtime="20170816 07:32:47.072"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 07:32:47.073" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170816 07:32:47.072" endtime="20170816 07:32:47.073"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 07:32:47.074" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170816 07:32:47.073" endtime="20170816 07:32:47.074"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 07:32:47.271" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170816 07:32:47.075" endtime="20170816 07:32:47.271"></status>
</kw>
<msg timestamp="20170816 07:32:47.271" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 07:32:47.271" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:32:47.074" endtime="20170816 07:32:47.271"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 07:32:47.272" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:32:47.271" endtime="20170816 07:32:47.272"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:32:47.272" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:32:47.272" endtime="20170816 07:32:47.273"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:47.069" endtime="20170816 07:32:47.273"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:47.069" endtime="20170816 07:32:47.273"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:47.068" endtime="20170816 07:32:47.273"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 07:32:47.273" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/RequestedHostTransition</msg>
<status status="PASS" starttime="20170816 07:32:47.273" endtime="20170816 07:32:47.273"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 07:32:47.274" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170816 07:32:47.274" endtime="20170816 07:32:47.274"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" starttime="20170816 07:32:47.275" endtime="20170816 07:32:47.275"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:32:47.278" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Conten...</msg>
<status status="PASS" starttime="20170816 07:32:47.277" endtime="20170816 07:32:47.278"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:32:47.279" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20170816 07:32:47.279" endtime="20170816 07:32:47.279"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:47.278" endtime="20170816 07:32:47.280"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:47.276" endtime="20170816 07:32:47.280"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Put Request">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 07:32:47.680" level="INFO">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, data={"data": "xyz.openbmc_project.State.Host.Transition.Off"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg timestamp="20170816 07:32:47.681" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:32:47.280" endtime="20170816 07:32:47.681"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:32:47.682" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:32:47.681" endtime="20170816 07:32:47.682"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:32:47.683" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:32:47.683" endtime="20170816 07:32:47.683"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:47.682" endtime="20170816 07:32:47.683"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:47.681" endtime="20170816 07:32:47.683"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 07:32:47.684" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170816 07:32:47.683" endtime="20170816 07:32:47.684"></status>
</kw>
<msg timestamp="20170816 07:32:47.684" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:32:47.067" endtime="20170816 07:32:47.684"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:32:47.685" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:32:47.684" endtime="20170816 07:32:47.685"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20170816 07:32:47.685" level="INFO">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 07:32:47.685" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 07:32:47.685" level="INFO">${json} = {u'data': None, u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170816 07:32:47.685" endtime="20170816 07:32:47.685"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:47.065" endtime="20170816 07:32:47.686"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${wait}' == '${0}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<status status="PASS" starttime="20170816 07:32:47.686" endtime="20170816 07:32:47.686"></status>
</kw>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>6 min</arg>
<arg>10 sec</arg>
<arg>Is Host Off</arg>
</arguments>
<kw library="state_manager" name="Is Host Off">
<doc>Check if host state is "Off".</doc>
<kw library="state_manager" name="Is Chassis Off">
<doc>Check if chassis state is "Off".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 07:32:47.692" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170816 07:32:47.692" endtime="20170816 07:32:47.693"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 07:32:47.693" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170816 07:32:47.693" endtime="20170816 07:32:47.694"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 07:32:47.694" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170816 07:32:47.694" endtime="20170816 07:32:47.695"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 07:32:47.695" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170816 07:32:47.695" endtime="20170816 07:32:47.695"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 07:32:48.547" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170816 07:32:47.697" endtime="20170816 07:32:48.547"></status>
</kw>
<msg timestamp="20170816 07:32:48.547" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 07:32:48.547" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:32:47.696" endtime="20170816 07:32:48.547"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 07:32:48.548" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:32:48.547" endtime="20170816 07:32:48.548"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:32:48.548" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:32:48.548" endtime="20170816 07:32:48.548"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:47.690" endtime="20170816 07:32:48.549"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:47.690" endtime="20170816 07:32:48.549"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:47.689" endtime="20170816 07:32:48.549"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 07:32:48.549" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20170816 07:32:48.549" endtime="20170816 07:32:48.549"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:32:48.552" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:32:48.551" endtime="20170816 07:32:48.552"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:32:48.552" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:32:48.552" endtime="20170816 07:32:48.553"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:48.552" endtime="20170816 07:32:48.553"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:48.550" endtime="20170816 07:32:48.553"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:48.550" endtime="20170816 07:32:48.553"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 07:32:49.903" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170816 07:32:49.903" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:32:48.553" endtime="20170816 07:32:49.903"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:32:49.905" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:32:49.904" endtime="20170816 07:32:49.905"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:32:49.906" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:32:49.906" endtime="20170816 07:32:49.906"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:49.905" endtime="20170816 07:32:49.906"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:49.904" endtime="20170816 07:32:49.906"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:49.903" endtime="20170816 07:32:49.906"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 07:32:49.907" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170816 07:32:49.906" endtime="20170816 07:32:49.907"></status>
</kw>
<msg timestamp="20170816 07:32:49.907" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:32:47.688" endtime="20170816 07:32:49.907"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:32:49.907" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:32:49.907" endtime="20170816 07:32:49.908"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 07:32:49.908" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 07:32:49.908" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 07:32:49.908" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170816 07:32:49.908" endtime="20170816 07:32:49.908"></status>
</kw>
<msg timestamp="20170816 07:32:49.909" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" starttime="20170816 07:32:47.688" endtime="20170816 07:32:49.909"></status>
</kw>
<msg timestamp="20170816 07:32:49.909" level="INFO">${power_state} = On</msg>
<status status="PASS" starttime="20170816 07:32:47.687" endtime="20170816 07:32:49.909"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20170816 07:32:49.910" level="FAIL">Off != On</msg>
<status status="FAIL" starttime="20170816 07:32:49.909" endtime="20170816 07:32:49.910"></status>
</kw>
<status status="FAIL" starttime="20170816 07:32:47.687" endtime="20170816 07:32:49.910"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 07:32:49.914" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170816 07:32:49.913" endtime="20170816 07:32:49.914"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 07:32:49.915" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170816 07:32:49.914" endtime="20170816 07:32:49.915"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 07:32:49.916" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170816 07:32:49.915" endtime="20170816 07:32:49.916"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 07:32:49.916" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170816 07:32:49.916" endtime="20170816 07:32:49.916"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 07:32:50.839" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170816 07:32:49.917" endtime="20170816 07:32:50.839"></status>
</kw>
<msg timestamp="20170816 07:32:50.839" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 07:32:50.839" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:32:49.916" endtime="20170816 07:32:50.840"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 07:32:50.840" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:32:50.840" endtime="20170816 07:32:50.841"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:32:50.841" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:32:50.841" endtime="20170816 07:32:50.842"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:49.913" endtime="20170816 07:32:50.842"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:49.913" endtime="20170816 07:32:50.842"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:49.912" endtime="20170816 07:32:50.842"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 07:32:50.843" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" starttime="20170816 07:32:50.842" endtime="20170816 07:32:50.843"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:32:50.846" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:32:50.845" endtime="20170816 07:32:50.847"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:32:50.848" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:32:50.848" endtime="20170816 07:32:50.848"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:50.847" endtime="20170816 07:32:50.848"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:50.844" endtime="20170816 07:32:50.848"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:50.843" endtime="20170816 07:32:50.849"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 07:32:56.344" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170816 07:32:56.344" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:32:50.849" endtime="20170816 07:32:56.344"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:32:56.346" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:32:56.346" endtime="20170816 07:32:56.347"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:32:56.347" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:32:56.347" endtime="20170816 07:32:56.348"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:56.347" endtime="20170816 07:32:56.348"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:56.345" endtime="20170816 07:32:56.348"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:56.345" endtime="20170816 07:32:56.348"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 07:32:56.348" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170816 07:32:56.348" endtime="20170816 07:32:56.349"></status>
</kw>
<msg timestamp="20170816 07:32:56.349" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:32:49.911" endtime="20170816 07:32:56.349"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:32:56.349" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:32:56.349" endtime="20170816 07:32:56.350"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 07:32:56.350" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 07:32:56.350" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 07:32:56.350" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170816 07:32:56.350" endtime="20170816 07:32:56.350"></status>
</kw>
<msg timestamp="20170816 07:32:56.351" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status status="PASS" starttime="20170816 07:32:49.911" endtime="20170816 07:32:56.351"></status>
</kw>
<msg timestamp="20170816 07:32:56.351" level="INFO">${host_state} = Quiesced</msg>
<status status="PASS" starttime="20170816 07:32:49.910" endtime="20170816 07:32:56.351"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170816 07:32:56.352" level="FAIL">Off != Quiesced</msg>
<status status="FAIL" starttime="20170816 07:32:56.351" endtime="20170816 07:32:56.352"></status>
</kw>
<status status="FAIL" starttime="20170816 07:32:47.687" endtime="20170816 07:32:56.352"></status>
</kw>
<kw library="state_manager" name="Is Host Off">
<doc>Check if host state is "Off".</doc>
<kw library="state_manager" name="Is Chassis Off">
<doc>Check if chassis state is "Off".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 07:33:06.357" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170816 07:33:06.357" endtime="20170816 07:33:06.358"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 07:33:06.358" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170816 07:33:06.358" endtime="20170816 07:33:06.358"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 07:33:06.359" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170816 07:33:06.359" endtime="20170816 07:33:06.359"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 07:33:06.360" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170816 07:33:06.360" endtime="20170816 07:33:06.360"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 07:33:06.547" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170816 07:33:06.361" endtime="20170816 07:33:06.547"></status>
</kw>
<msg timestamp="20170816 07:33:06.547" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 07:33:06.547" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:33:06.360" endtime="20170816 07:33:06.547"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 07:33:06.548" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:33:06.547" endtime="20170816 07:33:06.548"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:33:06.548" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:33:06.548" endtime="20170816 07:33:06.549"></status>
</kw>
<status status="PASS" starttime="20170816 07:33:06.356" endtime="20170816 07:33:06.549"></status>
</kw>
<status status="PASS" starttime="20170816 07:33:06.356" endtime="20170816 07:33:06.549"></status>
</kw>
<status status="PASS" starttime="20170816 07:33:06.355" endtime="20170816 07:33:06.549"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 07:33:06.550" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20170816 07:33:06.549" endtime="20170816 07:33:06.550"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:33:06.552" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:33:06.551" endtime="20170816 07:33:06.552"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:33:06.553" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:33:06.552" endtime="20170816 07:33:06.553"></status>
</kw>
<status status="PASS" starttime="20170816 07:33:06.552" endtime="20170816 07:33:06.553"></status>
</kw>
<status status="PASS" starttime="20170816 07:33:06.550" endtime="20170816 07:33:06.553"></status>
</kw>
<status status="PASS" starttime="20170816 07:33:06.550" endtime="20170816 07:33:06.553"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 07:33:06.625" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170816 07:33:06.625" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:33:06.553" endtime="20170816 07:33:06.625"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:33:06.627" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:33:06.626" endtime="20170816 07:33:06.627"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:33:06.628" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:33:06.627" endtime="20170816 07:33:06.628"></status>
</kw>
<status status="PASS" starttime="20170816 07:33:06.627" endtime="20170816 07:33:06.628"></status>
</kw>
<status status="PASS" starttime="20170816 07:33:06.626" endtime="20170816 07:33:06.628"></status>
</kw>
<status status="PASS" starttime="20170816 07:33:06.625" endtime="20170816 07:33:06.628"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 07:33:06.628" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170816 07:33:06.628" endtime="20170816 07:33:06.629"></status>
</kw>
<msg timestamp="20170816 07:33:06.629" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:33:06.354" endtime="20170816 07:33:06.629"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:33:06.629" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:33:06.629" endtime="20170816 07:33:06.629"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 07:33:06.630" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 07:33:06.630" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 07:33:06.630" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170816 07:33:06.630" endtime="20170816 07:33:06.630"></status>
</kw>
<msg timestamp="20170816 07:33:06.630" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" starttime="20170816 07:33:06.354" endtime="20170816 07:33:06.630"></status>
</kw>
<msg timestamp="20170816 07:33:06.631" level="INFO">${power_state} = Off</msg>
<status status="PASS" starttime="20170816 07:33:06.353" endtime="20170816 07:33:06.631"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" starttime="20170816 07:33:06.631" endtime="20170816 07:33:06.631"></status>
</kw>
<status status="PASS" starttime="20170816 07:33:06.353" endtime="20170816 07:33:06.631"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170816 07:33:06.636" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170816 07:33:06.635" endtime="20170816 07:33:06.636"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170816 07:33:06.637" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170816 07:33:06.636" endtime="20170816 07:33:06.637"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170816 07:33:06.637" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170816 07:33:06.637" endtime="20170816 07:33:06.637"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170816 07:33:06.638" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170816 07:33:06.637" endtime="20170816 07:33:06.638"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170816 07:33:06.815" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170816 07:33:06.639" endtime="20170816 07:33:06.815"></status>
</kw>
<msg timestamp="20170816 07:33:06.815" level="INFO">${status} = PASS</msg>
<msg timestamp="20170816 07:33:06.816" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:33:06.638" endtime="20170816 07:33:06.816"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170816 07:33:06.816" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:33:06.816" endtime="20170816 07:33:06.816"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:33:06.817" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:33:06.817" endtime="20170816 07:33:06.817"></status>
</kw>
<status status="PASS" starttime="20170816 07:33:06.635" endtime="20170816 07:33:06.817"></status>
</kw>
<status status="PASS" starttime="20170816 07:33:06.634" endtime="20170816 07:33:06.817"></status>
</kw>
<status status="PASS" starttime="20170816 07:33:06.633" endtime="20170816 07:33:06.817"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170816 07:33:06.818" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" starttime="20170816 07:33:06.818" endtime="20170816 07:33:06.818"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:33:06.820" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:33:06.820" endtime="20170816 07:33:06.820"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:33:06.821" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170816 07:33:06.821" endtime="20170816 07:33:06.821"></status>
</kw>
<status status="PASS" starttime="20170816 07:33:06.820" endtime="20170816 07:33:06.821"></status>
</kw>
<status status="PASS" starttime="20170816 07:33:06.819" endtime="20170816 07:33:06.822"></status>
</kw>
<status status="PASS" starttime="20170816 07:33:06.818" endtime="20170816 07:33:06.822"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170816 07:33:06.914" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170816 07:33:06.914" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:33:06.822" endtime="20170816 07:33:06.914"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170816 07:33:06.916" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:33:06.915" endtime="20170816 07:33:06.916"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170816 07:33:06.917" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170816 07:33:06.917" endtime="20170816 07:33:06.917"></status>
</kw>
<status status="PASS" starttime="20170816 07:33:06.917" endtime="20170816 07:33:06.918"></status>
</kw>
<status status="PASS" starttime="20170816 07:33:06.915" endtime="20170816 07:33:06.918"></status>
</kw>
<status status="PASS" starttime="20170816 07:33:06.914" endtime="20170816 07:33:06.918"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg timestamp="20170816 07:33:06.918" level="INFO">Delete All Sessions</msg>
<status status="PASS" starttime="20170816 07:33:06.918" endtime="20170816 07:33:06.918"></status>
</kw>
<msg timestamp="20170816 07:33:06.918" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170816 07:33:06.633" endtime="20170816 07:33:06.918"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170816 07:33:06.919" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170816 07:33:06.919" endtime="20170816 07:33:06.919"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170816 07:33:06.920" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170816 07:33:06.920" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170816 07:33:06.920" level="INFO">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" starttime="20170816 07:33:06.919" endtime="20170816 07:33:06.920"></status>
</kw>
<msg timestamp="20170816 07:33:06.920" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status status="PASS" starttime="20170816 07:33:06.632" endtime="20170816 07:33:06.920"></status>
</kw>
<msg timestamp="20170816 07:33:06.920" level="INFO">${host_state} = Off</msg>
<status status="PASS" starttime="20170816 07:33:06.632" endtime="20170816 07:33:06.920"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<status status="PASS" starttime="20170816 07:33:06.921" endtime="20170816 07:33:06.921"></status>
</kw>
<status status="PASS" starttime="20170816 07:33:06.352" endtime="20170816 07:33:06.921"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:47.686" endtime="20170816 07:33:06.921"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:47.063" endtime="20170816 07:33:06.921"></status>
</kw>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>HOST is recovered from quiesced state</arg>
</arguments>
<msg timestamp="20170816 07:33:06.922" level="INFO">HOST is recovered from quiesced state</msg>
<status status="PASS" starttime="20170816 07:33:06.922" endtime="20170816 07:33:06.922"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:47.062" endtime="20170816 07:33:06.922"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:47.062" endtime="20170816 07:33:06.922"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:46.759" endtime="20170816 07:33:06.922"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:46.758" endtime="20170816 07:33:06.922"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Log Test Case Status">
<doc>Test case execution result history.</doc>
<kw library="BuiltIn" name="Get Variable Value">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH_STYLE}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH_STYLE}</var>
</assign>
<msg timestamp="20170816 07:33:06.937" level="INFO">${FFDC_DIR_PATH_STYLE} = </msg>
<status status="PASS" starttime="20170816 07:33:06.923" endtime="20170816 07:33:06.937"></status>
</kw>
<kw library="BuiltIn" name="Get Variable Value">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH}</var>
</assign>
<msg timestamp="20170816 07:33:06.937" level="INFO">${FFDC_DIR_PATH} = /tmp/fspcibld/2147/obmc-robot/logs/20170816073233030367_TestsTestBasicPoweron/20170816073233030367_PowerOnTest/</msg>
<status status="PASS" starttime="20170816 07:33:06.937" endtime="20170816 07:33:06.938"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH}' == '${EMPTY}'</arg>
<arg>Set FFDC Defaults</arg>
</arguments>
<status status="PASS" starttime="20170816 07:33:06.938" endtime="20170816 07:33:06.938"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH_STYLE}' == '${1}'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${FFDC_LOG_PATH}</arg>
<arg>${FFDC_DIR_PATH}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${TEST_HISTORY}</arg>
<arg>${FFDC_DIR_PATH}test_history.txt</arg>
</arguments>
<status status="PASS" starttime="20170816 07:33:06.938" endtime="20170816 07:33:06.939"></status>
</kw>
<kw library="OperatingSystem" name="Create Directory">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg html="yes" timestamp="20170816 07:33:06.939" level="INFO">Directory '&lt;a href="file:///tmp/fspcibld/2147/obmc-robot/logs"&gt;/tmp/fspcibld/2147/obmc-robot/logs&lt;/a&gt;' already exists.</msg>
<status status="PASS" starttime="20170816 07:33:06.939" endtime="20170816 07:33:06.939"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw library="OperatingSystem" name="File Should Exist">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg html="yes" timestamp="20170816 07:33:06.940" level="INFO">File '&lt;a href="file:///tmp/fspcibld/2147/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/2147/obmc-robot/logs/test_history.txt&lt;/a&gt;' exists.</msg>
<status status="PASS" starttime="20170816 07:33:06.940" endtime="20170816 07:33:06.940"></status>
</kw>
<msg timestamp="20170816 07:33:06.941" level="INFO">${exist} = True</msg>
<status status="PASS" starttime="20170816 07:33:06.940" endtime="20170816 07:33:06.941"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<status status="PASS" starttime="20170816 07:33:06.941" endtime="20170816 07:33:06.941"></status>
</kw>
<kw library="gen_robot_print" name="Rpvars">
<arguments>
<arg>TEST_HISTORY</arg>
</arguments>
<status status="PASS" starttime="20170816 07:33:06.942" endtime="20170816 07:33:06.942"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Get Current Time Stamp">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw library="DateTime" name="Get Current Date">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170816 07:33:06.943" level="INFO">${cur_time} = 2017-08-16 07:33:06:942700</msg>
<status status="PASS" starttime="20170816 07:33:06.943" endtime="20170816 07:33:06.943"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170816 07:33:06.943" level="INFO">${cur_time} = 20170816073306942700</msg>
<status status="PASS" starttime="20170816 07:33:06.943" endtime="20170816 07:33:06.943"></status>
</kw>
<msg timestamp="20170816 07:33:06.944" level="INFO">${cur_time} = 20170816073306942700</msg>
<status status="PASS" starttime="20170816 07:33:06.942" endtime="20170816 07:33:06.944"></status>
</kw>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg html="yes" timestamp="20170816 07:33:06.945" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/2147/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/2147/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170816 07:33:06.944" endtime="20170816 07:33:06.945"></status>
</kw>
<status status="PASS" starttime="20170816 07:33:06.922" endtime="20170816 07:33:06.945"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:29.549" endtime="20170816 07:33:06.945"></status>
</kw>
<kw library="utils" name="Stop SOL Console Logging">
<doc>Stop system console logging and return log output.</doc>
<assign>
<var>${sol_log}</var>
</assign>
<kw library="utils" name="Create OS Console File Path">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg timestamp="20170816 07:33:06.947" level="INFO">${default_file_path} = /tmp/9.41.166.169_os_console</msg>
<status status="PASS" starttime="20170816 07:33:06.946" endtime="20170816 07:33:06.947"></status>
</kw>
<kw library="BuiltIn" name="Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg timestamp="20170816 07:33:06.947" level="INFO">${log_file_path} = /tmp/9.41.166.169_os_console</msg>
<status status="PASS" starttime="20170816 07:33:06.947" endtime="20170816 07:33:06.947"></status>
</kw>
<msg timestamp="20170816 07:33:06.948" level="INFO">${log_file_path} = /tmp/9.41.166.169_os_console</msg>
<status status="PASS" starttime="20170816 07:33:06.946" endtime="20170816 07:33:06.948"></status>
</kw>
<kw library="utils" name="Create OS Console Command String">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${search_string}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170816 07:33:06.949" level="INFO">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status status="PASS" starttime="20170816 07:33:06.948" endtime="20170816 07:33:06.949"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" starttime="20170816 07:33:06.949" endtime="20170816 07:33:06.949"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170816 07:33:06.954" level="INFO">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg timestamp="20170816 07:33:06.958" level="INFO">${rc} = 0</msg>
<msg timestamp="20170816 07:33:06.958" level="INFO">${output} = /tmp/fspcibld/2147/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status status="PASS" starttime="20170816 07:33:06.949" endtime="20170816 07:33:06.958"></status>
</kw>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status status="PASS" starttime="20170816 07:33:06.960" endtime="20170816 07:33:06.961"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${output}\n</arg>
</arguments>
<status status="PASS" starttime="20170816 07:33:06.962" endtime="20170816 07:33:06.962"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>ssh_pw ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>-o "StrictHostKeyChecking no" ${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170816 07:33:06.963" level="INFO">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.41.166.169</msg>
<status status="PASS" starttime="20170816 07:33:06.963" endtime="20170816 07:33:06.963"></status>
</kw>
<msg timestamp="20170816 07:33:06.964" level="INFO">${search_string} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.41.166.169</msg>
<status status="PASS" starttime="20170816 07:33:06.948" endtime="20170816 07:33:06.964"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>echo $(ps -ef | egrep '${search_string}'</arg>
<arg>| egrep -v grep | cut -c10-14)</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170816 07:33:06.964" level="INFO">${cmd_buf} = echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.41.166.169' | egrep -v grep | cut -c10-14)</msg>
<status status="PASS" starttime="20170816 07:33:06.964" endtime="20170816 07:33:06.965"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" starttime="20170816 07:33:06.965" endtime="20170816 07:33:06.965"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${os_con_pid}</var>
</assign>
<msg timestamp="20170816 07:33:06.971" level="INFO">Running command 'echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.41.166.169' | egrep -v grep | cut -c10-14) 2&gt;&amp;1'.</msg>
<msg timestamp="20170816 07:33:06.981" level="INFO">${rc} = 0</msg>
<msg timestamp="20170816 07:33:06.981" level="INFO">${os_con_pid} = </msg>
<status status="PASS" starttime="20170816 07:33:06.965" endtime="20170816 07:33:06.981"></status>
</kw>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>os_con_pid</arg>
</arguments>
<status status="PASS" starttime="20170816 07:33:06.984" endtime="20170816 07:33:06.985"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>kill -9 ${os_con_pid}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170816 07:33:06.986" level="INFO">${cmd_buf} = kill -9 </msg>
<status status="PASS" starttime="20170816 07:33:06.985" endtime="20170816 07:33:06.986"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpissuing</arg>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" starttime="20170816 07:33:06.986" endtime="20170816 07:33:06.995"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Run And Return Rc And Output</arg>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170816 07:33:06.996" level="INFO">${rc} = None</msg>
<msg timestamp="20170816 07:33:06.996" level="INFO">${output} = None</msg>
<status status="PASS" starttime="20170816 07:33:06.996" endtime="20170816 07:33:06.996"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpvars</arg>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status status="PASS" starttime="20170816 07:33:06.996" endtime="20170816 07:33:06.997"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${targ_file_path}' != '${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw library="OperatingSystem" name="Copy File">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<msg html="yes" timestamp="20170816 07:33:07.000" level="INFO">Copied file from '&lt;a href="file:///tmp/9.41.166.169_os_console"&gt;/tmp/9.41.166.169_os_console&lt;/a&gt;' to '&lt;a href="file:///tmp/fspcibld/2147/obmc-robot/logs/9.41.166.169_os_console"&gt;/tmp/fspcibld/2147/obmc-robot/logs/9.41.166.169_os_console&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170816 07:33:06.998" endtime="20170816 07:33:07.001"></status>
</kw>
<status status="PASS" starttime="20170816 07:33:06.997" endtime="20170816 07:33:07.001"></status>
</kw>
<status status="PASS" starttime="20170816 07:33:06.997" endtime="20170816 07:33:07.001"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20170816 07:33:07.001" level="INFO">${output} = </msg>
<status status="PASS" starttime="20170816 07:33:07.001" endtime="20170816 07:33:07.001"></status>
</kw>
<kw library="BuiltIn" name="Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${debug}^1</arg>
</arguments>
<assign>
<var>${loc_quiet}</var>
</assign>
<msg timestamp="20170816 07:33:07.002" level="INFO">${loc_quiet} = 1</msg>
<status status="PASS" starttime="20170816 07:33:07.002" endtime="20170816 07:33:07.002"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return_data}' == '${1}'</arg>
<arg>Cmd Fnc</arg>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<kw library="gen_cmd" name="Cmd Fnc">
<doc>Run the given command in a shell and return the shell return code.</doc>
<arguments>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<status status="PASS" starttime="20170816 07:33:07.003" endtime="20170816 07:33:07.063"></status>
</kw>
<msg timestamp="20170816 07:33:07.070" level="INFO">${rc} = 0</msg>
<msg timestamp="20170816 07:33:07.072" level="INFO">${output} = spawn ssh -p 2200 -o StrictHostKeyChecking no root@9.41.166.169
Warning: Permanently added '[9.41.166.169]:2200' (RSA) to the list of known hosts.
root@9.41.166.169's password: 


--== Welcome t...</msg>
<status status="PASS" starttime="20170816 07:33:07.002" endtime="20170816 07:33:07.072"></status>
</kw>
<msg timestamp="20170816 07:33:07.077" level="INFO">${sol_log} = spawn ssh -p 2200 -o StrictHostKeyChecking no root@9.41.166.169
Warning: Permanently added '[9.41.166.169]:2200' (RSA) to the list of known hosts.
root@9.41.166.169's password: 


--== Welcome t...</msg>
<status status="PASS" starttime="20170816 07:33:06.945" endtime="20170816 07:33:07.077"></status>
</kw>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${sol_log}</arg>
</arguments>
<msg timestamp="20170816 07:33:07.079" level="INFO">spawn ssh -p 2200 -o StrictHostKeyChecking no root@9.41.166.169
Warning: Permanently added '[9.41.166.169]:2200' (RSA) to the list of known hosts.
root@9.41.166.169's password: 


--== Welcome to Hostboot hostboot-faac61e/hbicore.bin ==--

  4.09279|secure|Booting in non-secure mode.
  4.09281|secure|SecureROM valid - enabling functionality
  6.96135|ISTEP  6. 5 - host_init_fsi
  7.08474|ISTEP  6. 6 - host_set_ipl_parms
  7.10858|ISTEP  6. 7 - host_discover_targets
 12.54021|HWAS|PRESENT&gt; DIMM[03]=FFFF000000000000
 12.54023|HWAS|PRESENT&gt; Proc[05]=C000000000000000
 12.58781|ISTEP  6. 8 - host_update_master_tpm
 12.59713|SECURE|Security Access Bit&gt; 0x0000000000000000
 12.59714|SECURE|Secure Mode Disable (via Jumper)&gt; 0xC000000000000000
 12.59737|ISTEP  6. 9 - host_gard
 12.63454|ISTEP  6.10 - host_revert_sbe_mcs_setup
 12.64410|ISTEP  6.11 - host_start_occ_xstop_handler
 12.64520|ISTEP  6.12 - host_voltage_config
 12.68445|ISTEP  7. 2 - mss_volt
 13.22253|ISTEP  7. 3 - mss_freq
 13.47236|ISTEP  7. 4 - mss_eff_config
 16.75511|ISTEP  7. 5 - mss_attr_update
 16.76714|ISTEP  8. 1 - host_slave_sbe_config
 16.80386|ISTEP  8. 2 - host_setup_sbe
 16.80999|ISTEP  8. 3 - host_cbs_start
 16.82589|ISTEP  8. 4 - proc_check_slave_sbe_seeprom_complete
 26.44236|ISTEP  8. 5 - host_attnlisten_proc
 26.44347|ISTEP  8. 6 - host_p9_fbc_eff_config
 26.44976|ISTEP  8. 7 - host_p9_eff_config_links
 26.45969|ISTEP  8. 8 - proc_attr_update
 26.46221|ISTEP  8. 9 - proc_chiplet_fabric_scominit
 26.51543|ISTEP  8.10 - proc_xbus_scominit
 29.74683|ISTEP  8.11 - proc_xbus_enable_ridi
 29.75182|ISTEP  9. 1 - fabric_erepair
 29.76005|ISTEP  9. 2 - fabric_io_dccal
 30.62176|ISTEP  9. 3 - fabric_pre_trainadv
 30.62855|ISTEP  9. 4 - fabric_io_run_training
 30.84504|ISTEP  9. 5 - fabric_post_trainadv
 30.84940|ISTEP  9. 6 - proc_smp_link_layer
 30.85520|ISTEP  9. 7 - proc_fab_iovalid
 30.88101|ISTEP  9. 8 - host_fbc_eff_config_aggregate
 30.89122|ISTEP 10. 1 - proc_build_smp
 31.45817|ISTEP 10. 2 - host_slave_sbe_update


--== Welcome to Hostboot hostboot-faac61e/hbicore.bin ==--

  4.09422|secure|Booting in non-secure mode.
  4.09423|secure|SecureROM valid - enabling functionality
  5.30186|ISTEP  6. 5 - host_init_fsi
  5.38998|ISTEP  6. 6 - host_set_ipl_parms
  5.40130|ISTEP  6. 7 - host_discover_targets
  5.89611|HWAS|PRESENT&gt; DIMM[03]=FFFF000000000000
  5.89612|HWAS|PRESENT&gt; Proc[05]=C000000000000000
  5.92423|ISTEP  6. 8 - host_update_master_tpm
  5.93287|SECURE|Security Access Bit&gt; 0x0000000000000000
  5.93288|SECURE|Secure Mode Disable (via Jumper)&gt; 0xC000000000000000
  5.93309|ISTEP  6. 9 - host_gard
  6.05053|ISTEP  6.10 - host_revert_sbe_mcs_setup
  6.06118|ISTEP  6.11 - host_start_occ_xstop_handler
  6.06242|ISTEP  6.12 - host_voltage_config
  6.09665|ISTEP  7. 2 - mss_volt
  6.59381|ISTEP  7. 3 - mss_freq
  6.74106|ISTEP  7. 4 - mss_eff_config
 10.01134|ISTEP  7. 5 - mss_attr_update
 10.02347|ISTEP  8. 1 - host_slave_sbe_config
 10.06069|ISTEP  8. 2 - host_setup_sbe
 10.06723|ISTEP  8. 3 - host_cbs_start
 10.07537|ISTEP  8. 4 - proc_check_slave_sbe_seeprom_complete
 19.68996|ISTEP  8. 5 - host_attnlisten_proc
 19.69086|ISTEP  8. 6 - host_p9_fbc_eff_config
 19.70150|ISTEP  8. 7 - host_p9_eff_config_links
 19.71178|ISTEP  8. 8 - proc_attr_update
 19.71377|ISTEP  8. 9 - proc_chiplet_fabric_scominit
 19.76689|ISTEP  8.10 - proc_xbus_scominit
 23.00476|ISTEP  8.11 - proc_xbus_enable_ridi
 23.01099|ISTEP  9. 1 - fabric_erepair
 23.01958|ISTEP  9. 2 - fabric_io_dccal
 23.87411|ISTEP  9. 3 - fabric_pre_trainadv
 23.88060|ISTEP  9. 4 - fabric_io_run_training
 24.09430|ISTEP  9. 5 - fabric_post_trainadv
 24.09882|ISTEP  9. 6 - proc_smp_link_layer
 24.10415|ISTEP  9. 7 - proc_fab_iovalid
 24.13136|ISTEP  9. 8 - host_fbc_eff_config_aggregate
 24.14158|ISTEP 10. 1 - proc_build_smp
 24.31164|ISTEP 10. 2 - host_slave_sbe_update


--== Welcome to Hostboot hostboot-faac61e/hbicore.bin ==--

  4.09619|secure|Booting in non-secure mode.
  4.09621|secure|SecureROM valid - enabling functionality
  5.28945|ISTEP  6. 5 - host_init_fsi
  5.37778|ISTEP  6. 6 - host_set_ipl_parms
  5.38867|ISTEP  6. 7 - host_discover_targets
  5.85866|HWAS|PRESENT&gt; DIMM[03]=FFFF000000000000
  5.85867|HWAS|PRESENT&gt; Proc[05]=C000000000000000
  5.88582|ISTEP  6. 8 - host_update_master_tpm
  5.89432|SECURE|Security Access Bit&gt; 0x0000000000000000
  5.89433|SECURE|Secure Mode Disable (via Jumper)&gt; 0xC000000000000000
  5.89451|ISTEP  6. 9 - host_gard
  5.94403|ISTEP  6.10 - host_revert_sbe_mcs_setup
  5.95323|ISTEP  6.11 - host_start_occ_xstop_handler
  5.95476|ISTEP  6.12 - host_voltage_config
  5.98871|ISTEP  7. 2 - mss_volt
  6.21828|ISTEP  7. 3 - mss_freq
  6.36525|ISTEP  7. 4 - mss_eff_config
  9.70067|ISTEP  7. 5 - mss_attr_update
  9.71302|ISTEP  8. 1 - host_slave_sbe_config
  9.75153|ISTEP  8. 2 - host_setup_sbe
  9.75818|ISTEP  8. 3 - host_cbs_start
  9.76609|ISTEP  8. 4 - proc_check_slave_sbe_seeprom_complete
 19.38183|ISTEP  8. 5 - host_attnlisten_proc
 19.38451|ISTEP  8. 6 - host_p9_fbc_eff_config
 19.39136|ISTEP  8. 7 - host_p9_eff_config_links
 19.40148|ISTEP  8. 8 - proc_attr_update
 19.40351|ISTEP  8. 9 - proc_chiplet_fabric_scominit
 19.45669|ISTEP  8.10 - proc_xbus_scominit
 22.70078|ISTEP  8.11 - proc_xbus_enable_ridi
 22.70618|ISTEP  9. 1 - fabric_erepair
 22.71442|ISTEP  9. 2 - fabric_io_dccal
 23.57099|ISTEP  9. 3 - fabric_pre_trainadv
 23.57750|ISTEP  9. 4 - fabric_io_run_training
 23.79173|ISTEP  9. 5 - fabric_post_trainadv
 23.79605|ISTEP  9. 6 - proc_smp_link_layer
 23.80322|ISTEP  9. 7 - proc_fab_iovalid
 23.82863|ISTEP  9. 8 - host_fbc_eff_config_aggregate
 23.83925|ISTEP 10. 1 - proc_build_smp
 24.00719|ISTEP 10. 2 - host_slave_sbe_update


--== Welcome to Hostboot hostboot-faac61e/hbicore.bin ==--

  4.09291|secure|Booting in non-secure mode.
  4.09293|secure|SecureROM valid - enabling functionality
  5.28482|ISTEP  6. 5 - host_init_fsi
  5.37952|ISTEP  6. 6 - host_set_ipl_parms
  5.39680|ISTEP  6. 7 - host_discover_targets
  5.90590|HWAS|PRESENT&gt; DIMM[03]=FFFF000000000000
  5.90592|HWAS|PRESENT&gt; Proc[05]=C000000000000000
  5.93287|ISTEP  6. 8 - host_update_master_tpm
  5.94142|SECURE|Security Access Bit&gt; 0x0000000000000000
  5.94143|SECURE|Secure Mode Disable (via Jumper)&gt; 0xC000000000000000
  5.94164|ISTEP  6. 9 - host_gard
  5.99149|ISTEP  6.10 - host_revert_sbe_mcs_setup
  6.00088|ISTEP  6.11 - host_start_occ_xstop_handler
  6.00351|ISTEP  6.12 - host_voltage_config
  6.03853|ISTEP  7. 2 - mss_volt
  6.38950|ISTEP  7. 3 - mss_freq
  6.55252|ISTEP  7. 4 - mss_eff_config
  9.87296|ISTEP  7. 5 - mss_attr_update
  9.88538|ISTEP  8. 1 - host_slave_sbe_config
  9.92089|ISTEP  8. 2 - host_setup_sbe
  9.92736|ISTEP  8. 3 - host_cbs_start
  9.93593|ISTEP  8. 4 - proc_check_slave_sbe_seeprom_complete
 19.55756|ISTEP  8. 5 - host_attnlisten_proc
 19.55893|ISTEP  8. 6 - host_p9_fbc_eff_config
 19.56563|ISTEP  8. 7 - host_p9_eff_config_links
 19.57529|ISTEP  8. 8 - proc_attr_update
 19.57718|ISTEP  8. 9 - proc_chiplet_fabric_scominit
 19.63225|ISTEP  8.10 - proc_xbus_scominit
 22.85826|ISTEP  8.11 - proc_xbus_enable_ridi
 22.86307|ISTEP  9. 1 - fabric_erepair
 22.87175|ISTEP  9. 2 - fabric_io_dccal
 23.72938|ISTEP  9. 3 - fabric_pre_trainadv
 23.73727|ISTEP  9. 4 - fabric_io_run_training
 23.95215|ISTEP  9. 5 - fabric_post_trainadv
 23.95832|ISTEP  9. 6 - proc_smp_link_layer
 23.96362|ISTEP  9. 7 - proc_fab_iovalid
 23.98953|ISTEP  9. 8 - host_fbc_eff_config_aggregate
 23.99969|ISTEP 10. 1 - proc_build_smp
 24.21836|ISTEP 10. 2 - host_slave_sbe_update
</msg>
<status status="PASS" starttime="20170816 07:33:07.078" endtime="20170816 07:33:07.080"></status>
</kw>
<status status="PASS" starttime="20170816 07:32:29.548" endtime="20170816 07:33:07.080"></status>
</kw>
<doc>Power off and on.</doc>
<tags>
<tag>chassisboot</tag>
<tag>Power_On_Test</tag>
</tags>
<status status="FAIL" starttime="20170816 07:22:13.768" critical="yes" endtime="20170816 07:33:07.080">Keyword 'Is Host Running' failed after retrying for 10 minutes. The last error was: Running != Quiesced</status>
</test>
<doc>Test power on for HW CI.</doc>
<status status="FAIL" starttime="20170816 07:22:13.734" endtime="20170816 07:33:07.081"></status>
</suite>
<doc>Set metadata for test suite.</doc>
<status status="FAIL" starttime="20170816 07:22:07.871" endtime="20170816 07:33:07.084"></status>
</suite>
<statistics>
<total>
<stat fail="1" pass="1">Critical Tests</stat>
<stat fail="1" pass="1">All Tests</stat>
</total>
<tag>
<stat fail="1" pass="0">chassisboot</stat>
<stat fail="1" pass="0">Power_On_Test</stat>
<stat fail="0" pass="1">Test_SSL_Connection</stat>
</tag>
<suite>
<stat fail="1" id="s1" name="Tests" pass="1">Tests</stat>
<stat fail="0" id="s1-s1" name="Security" pass="1">Tests.Security</stat>
<stat fail="0" id="s1-s1-s1" name="Test Ssl" pass="1">Tests.Security.Test Ssl</stat>
<stat fail="1" id="s1-s2" name="Test Basic Poweron" pass="0">Tests.Test Basic Poweron</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
