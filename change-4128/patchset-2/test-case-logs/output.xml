<?xml version="1.0" encoding="UTF-8"?>
<robot generated="20170509 13:02:48.881" generator="Robot 3.0.2 (Python 2.7.12 on linux2)">
<suite id="s1" name="Tests" source="/tmp/root/26619/obmc-robot/tests">
<kw type="setup" name="System Driver Data">
<doc>System driver information.</doc>
<kw library="connection_client" name="Open Connection And Log In">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20170509 13:02:49.258">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" starttime="20170509 13:02:49.258" endtime="20170509 13:02:49.258"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:02:49.258">${has_host} = False</msg>
<status status="PASS" starttime="20170509 13:02:49.257" endtime="20170509 13:02:49.258"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" starttime="20170509 13:02:49.259" endtime="20170509 13:02:49.259"></status>
</kw>
<status status="PASS" starttime="20170509 13:02:49.259" endtime="20170509 13:02:49.259"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw library="connection_client" name="User input SSH and HTTPs Ports">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:02:49.261">${port_num} = 22</msg>
<status status="PASS" starttime="20170509 13:02:49.260" endtime="20170509 13:02:49.261"></status>
</kw>
<kw library="BuiltIn" name="Replace Variables">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:02:49.261">${SSH_PORT} = 22</msg>
<status status="PASS" starttime="20170509 13:02:49.261" endtime="20170509 13:02:49.261"></status>
</kw>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:02:49.262">${https_num} = 443</msg>
<status status="PASS" starttime="20170509 13:02:49.261" endtime="20170509 13:02:49.262"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:02:49.262">${AUTH_URI} = https://9.3.86.161:443</msg>
<status status="PASS" starttime="20170509 13:02:49.262" endtime="20170509 13:02:49.262"></status>
</kw>
<status status="PASS" starttime="20170509 13:02:49.260" endtime="20170509 13:02:49.263"></status>
</kw>
<status status="PASS" starttime="20170509 13:02:49.260" endtime="20170509 13:02:49.263"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20170509 13:02:49.263">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" starttime="20170509 13:02:49.263" endtime="20170509 13:02:49.264"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:02:49.264">${has_port} = False</msg>
<status status="PASS" starttime="20170509 13:02:49.263" endtime="20170509 13:02:49.264"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keywords">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status status="PASS" starttime="20170509 13:02:49.265" endtime="20170509 13:02:49.265"></status>
</kw>
<kw library="SSHLibrary" name="Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" starttime="20170509 13:02:49.266" endtime="20170509 13:02:49.266"></status>
</kw>
<status status="PASS" starttime="20170509 13:02:49.265" endtime="20170509 13:02:49.266"></status>
</kw>
<status status="PASS" starttime="20170509 13:02:49.264" endtime="20170509 13:02:49.266"></status>
</kw>
<kw library="SSHLibrary" name="Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:02:49.267">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg level="INFO" timestamp="20170509 13:02:52.214">Read output: root@witherspoon:~#</msg>
<status status="PASS" starttime="20170509 13:02:49.266" endtime="20170509 13:02:52.214"></status>
</kw>
<status status="PASS" starttime="20170509 13:02:49.257" endtime="20170509 13:02:52.215"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log BMC Driver Details</arg>
</arguments>
<kw name="Log BMC Driver Details">
<doc>Get BMC driver details and log.</doc>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${DRIVER_CMD}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${output}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:02:52.216">Executing command 'cat /etc/os-release | grep ^VERSION_ID='.</msg>
<msg level="INFO" timestamp="20170509 13:02:52.613">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170509 13:02:52.613">${output} = VERSION_ID="v1.99.5-1-ge31f3d3"</msg>
<msg level="INFO" timestamp="20170509 13:02:52.613">${stderr} = </msg>
<status status="PASS" starttime="20170509 13:02:52.216" endtime="20170509 13:02:52.613"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:02:52.614">Length is 0</msg>
<status status="PASS" starttime="20170509 13:02:52.614" endtime="20170509 13:02:52.614"></status>
</kw>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:02:52.614">VERSION_ID="v1.99.5-1-ge31f3d3"</msg>
<status status="PASS" starttime="20170509 13:02:52.614" endtime="20170509 13:02:52.614"></status>
</kw>
<status status="PASS" starttime="20170509 13:02:52.215" endtime="20170509 13:02:52.615"></status>
</kw>
<status status="PASS" starttime="20170509 13:02:52.215" endtime="20170509 13:02:52.615"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log PNOR Driver Details</arg>
</arguments>
<kw name="Log PNOR Driver Details">
<doc>Get PNOR driver details and log.</doc>
<kw library="utils" name="Execute Command On BMC">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>${PNOR_CMD}</arg>
</arguments>
<assign>
<var>${pnor_details}</var>
</assign>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:02:52.616">Executing command '/usr/sbin/pflash -r /tmp/out.txt -P VERSION; cat /tmp/out.txt'.</msg>
<msg level="INFO" timestamp="20170509 13:02:53.156">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170509 13:02:53.156">${stdout} = Reading to "/tmp/out.txt" from 0x027e0000..0x027e1000 !
[                                                  ] 0%[==================================================] 100%
IBM-witherspoon-ibm-OP9_v1.15...</msg>
<msg level="INFO" timestamp="20170509 13:02:53.156">${stderr} = </msg>
<status status="PASS" starttime="20170509 13:02:52.616" endtime="20170509 13:02:53.156"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:02:53.157">Length is 0</msg>
<status status="PASS" starttime="20170509 13:02:53.157" endtime="20170509 13:02:53.157"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:02:53.157">${pnor_details} = Reading to "/tmp/out.txt" from 0x027e0000..0x027e1000 !
[                                                  ] 0%[==================================================] 100%
IBM-witherspoon-ibm-OP9_v1.15...</msg>
<status status="PASS" starttime="20170509 13:02:52.615" endtime="20170509 13:02:53.157"></status>
</kw>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>PNOR_INFO=${pnor_details}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:02:53.158">PNOR_INFO=Reading to "/tmp/out.txt" from 0x027e0000..0x027e1000 !
[                                                  ] 0%[==================================================] 100%
IBM-witherspoon-ibm-OP9_v1.15_1.22
	op-build-v1.15-115-ge46df0d-dirty
	buildroot-2017.02-4-gc28573e
	skiboot-5.5.0-rc3
	hostboot-3a3d65e
	linux-4.10.7-openpower1-pb32b856
	petitboot-v1.4.2-pa470686
	witherspoon-xml-07ef29d
	occ-e1889e5
	hostboot-binaries-46670e3
	capp-ucode-1bb7503
</msg>
<status status="PASS" starttime="20170509 13:02:53.158" endtime="20170509 13:02:53.159"></status>
</kw>
<status status="PASS" starttime="20170509 13:02:52.615" endtime="20170509 13:02:53.159"></status>
</kw>
<status status="PASS" starttime="20170509 13:02:52.615" endtime="20170509 13:02:53.159"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log BMC Model</arg>
</arguments>
<kw name="Log BMC Model">
<doc>Fetch BMC Model name from system and log.</doc>
<kw library="utils" name="Get BMC System Model">
<doc>Get the BMC model from the device tree.</doc>
<assign>
<var>${bmc_model}</var>
</assign>
<kw library="connection_client" name="Open Connection And Log In">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20170509 13:02:53.162">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" starttime="20170509 13:02:53.161" endtime="20170509 13:02:53.162"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:02:53.162">${has_host} = False</msg>
<status status="PASS" starttime="20170509 13:02:53.161" endtime="20170509 13:02:53.162"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" starttime="20170509 13:02:53.163" endtime="20170509 13:02:53.163"></status>
</kw>
<status status="PASS" starttime="20170509 13:02:53.162" endtime="20170509 13:02:53.163"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw library="connection_client" name="User input SSH and HTTPs Ports">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:02:53.164">${port_num} = 22</msg>
<status status="PASS" starttime="20170509 13:02:53.164" endtime="20170509 13:02:53.164"></status>
</kw>
<kw library="BuiltIn" name="Replace Variables">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:02:53.165">${SSH_PORT} = 22</msg>
<status status="PASS" starttime="20170509 13:02:53.165" endtime="20170509 13:02:53.165"></status>
</kw>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:02:53.165">${https_num} = 443</msg>
<status status="PASS" starttime="20170509 13:02:53.165" endtime="20170509 13:02:53.165"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:02:53.166">${AUTH_URI} = https://9.3.86.161:443</msg>
<status status="PASS" starttime="20170509 13:02:53.166" endtime="20170509 13:02:53.166"></status>
</kw>
<status status="PASS" starttime="20170509 13:02:53.164" endtime="20170509 13:02:53.166"></status>
</kw>
<status status="PASS" starttime="20170509 13:02:53.163" endtime="20170509 13:02:53.166"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20170509 13:02:53.167">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" starttime="20170509 13:02:53.167" endtime="20170509 13:02:53.167"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:02:53.167">${has_port} = False</msg>
<status status="PASS" starttime="20170509 13:02:53.167" endtime="20170509 13:02:53.167"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keywords">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status status="PASS" starttime="20170509 13:02:53.169" endtime="20170509 13:02:53.169"></status>
</kw>
<kw library="SSHLibrary" name="Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" starttime="20170509 13:02:53.169" endtime="20170509 13:02:53.170"></status>
</kw>
<status status="PASS" starttime="20170509 13:02:53.168" endtime="20170509 13:02:53.170"></status>
</kw>
<status status="PASS" starttime="20170509 13:02:53.168" endtime="20170509 13:02:53.170"></status>
</kw>
<kw library="SSHLibrary" name="Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:02:53.170">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg level="INFO" timestamp="20170509 13:02:56.039">Read output: root@witherspoon:~#</msg>
<status status="PASS" starttime="20170509 13:02:53.170" endtime="20170509 13:02:56.040"></status>
</kw>
<status status="PASS" starttime="20170509 13:02:53.160" endtime="20170509 13:02:56.040"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:02:56.040">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg level="INFO" timestamp="20170509 13:02:56.107">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170509 13:02:56.107">${bmc_model} = Witherspoon</msg>
<msg level="INFO" timestamp="20170509 13:02:56.107">${stderr} = </msg>
<status status="PASS" starttime="20170509 13:02:56.040" endtime="20170509 13:02:56.107"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:02:56.108">Length is 0</msg>
<status status="PASS" starttime="20170509 13:02:56.107" endtime="20170509 13:02:56.108"></status>
</kw>
<kw library="BuiltIn" name="Should Not Be Empty">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:02:56.108">Length is 11</msg>
<status status="PASS" starttime="20170509 13:02:56.108" endtime="20170509 13:02:56.108"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:02:56.108">${bmc_model} = Witherspoon</msg>
<status status="PASS" starttime="20170509 13:02:53.160" endtime="20170509 13:02:56.108"></status>
</kw>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>BMC Model=${bmc_model}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:02:56.109">BMC Model=Witherspoon</msg>
<status status="PASS" starttime="20170509 13:02:56.109" endtime="20170509 13:02:56.109"></status>
</kw>
<status status="PASS" starttime="20170509 13:02:53.160" endtime="20170509 13:02:56.109"></status>
</kw>
<status status="PASS" starttime="20170509 13:02:53.159" endtime="20170509 13:02:56.109"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Enable Core Dump On BMC</arg>
</arguments>
<kw library="utils" name="Enable Core Dump On BMC">
<doc>Enable core dump collection.</doc>
<kw library="connection_client" name="Open Connection And Log In">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20170509 13:02:56.111">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" starttime="20170509 13:02:56.111" endtime="20170509 13:02:56.111"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:02:56.111">${has_host} = False</msg>
<status status="PASS" starttime="20170509 13:02:56.111" endtime="20170509 13:02:56.111"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" starttime="20170509 13:02:56.112" endtime="20170509 13:02:56.113"></status>
</kw>
<status status="PASS" starttime="20170509 13:02:56.112" endtime="20170509 13:02:56.113"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw library="connection_client" name="User input SSH and HTTPs Ports">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:02:56.114">${port_num} = 22</msg>
<status status="PASS" starttime="20170509 13:02:56.114" endtime="20170509 13:02:56.114"></status>
</kw>
<kw library="BuiltIn" name="Replace Variables">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:02:56.115">${SSH_PORT} = 22</msg>
<status status="PASS" starttime="20170509 13:02:56.114" endtime="20170509 13:02:56.115"></status>
</kw>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:02:56.115">${https_num} = 443</msg>
<status status="PASS" starttime="20170509 13:02:56.115" endtime="20170509 13:02:56.115"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:02:56.116">${AUTH_URI} = https://9.3.86.161:443</msg>
<status status="PASS" starttime="20170509 13:02:56.115" endtime="20170509 13:02:56.116"></status>
</kw>
<status status="PASS" starttime="20170509 13:02:56.113" endtime="20170509 13:02:56.116"></status>
</kw>
<status status="PASS" starttime="20170509 13:02:56.113" endtime="20170509 13:02:56.116"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20170509 13:02:56.117">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" starttime="20170509 13:02:56.117" endtime="20170509 13:02:56.117"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:02:56.117">${has_port} = False</msg>
<status status="PASS" starttime="20170509 13:02:56.116" endtime="20170509 13:02:56.117"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keywords">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status status="PASS" starttime="20170509 13:02:56.118" endtime="20170509 13:02:56.119"></status>
</kw>
<kw library="SSHLibrary" name="Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" starttime="20170509 13:02:56.119" endtime="20170509 13:02:56.119"></status>
</kw>
<status status="PASS" starttime="20170509 13:02:56.118" endtime="20170509 13:02:56.119"></status>
</kw>
<status status="PASS" starttime="20170509 13:02:56.117" endtime="20170509 13:02:56.119"></status>
</kw>
<kw library="SSHLibrary" name="Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:02:56.120">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg level="INFO" timestamp="20170509 13:02:57.770">Read output: root@witherspoon:~#</msg>
<status status="PASS" starttime="20170509 13:02:56.119" endtime="20170509 13:02:57.770"></status>
</kw>
<status status="PASS" starttime="20170509 13:02:56.110" endtime="20170509 13:02:57.770"></status>
</kw>
<kw library="utils" name="Execute Command On BMC">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>echo '/tmp/core_%e.%p' | tee /proc/sys/kernel/core_pattern</arg>
</arguments>
<assign>
<var>${core_pattern}</var>
</assign>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:02:57.771">Executing command 'echo '/tmp/core_%e.%p' | tee /proc/sys/kernel/core_pattern'.</msg>
<msg level="INFO" timestamp="20170509 13:02:57.848">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170509 13:02:57.848">${stdout} = /tmp/core_%e.%p</msg>
<msg level="INFO" timestamp="20170509 13:02:57.848">${stderr} = </msg>
<status status="PASS" starttime="20170509 13:02:57.771" endtime="20170509 13:02:57.848"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:02:57.849">Length is 0</msg>
<status status="PASS" starttime="20170509 13:02:57.848" endtime="20170509 13:02:57.849"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:02:57.849">${core_pattern} = /tmp/core_%e.%p</msg>
<status status="PASS" starttime="20170509 13:02:57.770" endtime="20170509 13:02:57.849"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${core_pattern}</arg>
<arg>/tmp/core_%e.%p</arg>
</arguments>
<status status="PASS" starttime="20170509 13:02:57.849" endtime="20170509 13:02:57.849"></status>
</kw>
<status status="PASS" starttime="20170509 13:02:56.110" endtime="20170509 13:02:57.849"></status>
</kw>
<status status="PASS" starttime="20170509 13:02:56.109" endtime="20170509 13:02:57.850"></status>
</kw>
<status status="PASS" starttime="20170509 13:02:49.256" endtime="20170509 13:02:57.850"></status>
</kw>
<suite id="s1-s1" name="Security" source="/tmp/root/26619/obmc-robot/tests/security">
<suite id="s1-s1-s1" name="Test Ssl" source="/tmp/root/26619/obmc-robot/tests/security/test_ssl.robot">
<test id="s1-s1-s1-t1" name="Test SSL Connection">
<kw library="rest_client" name="Initialize OpenBMC">
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:02:57.932">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=20, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170509 13:02:57.932" endtime="20170509 13:02:57.932"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:02:57.933">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170509 13:02:57.933" endtime="20170509 13:02:57.933"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:02:57.934">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170509 13:02:57.933" endtime="20170509 13:02:57.934"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:02:57.934">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170509 13:02:57.934" endtime="20170509 13:02:57.934"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:02:58.147">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170509 13:02:57.935" endtime="20170509 13:02:58.147"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:02:58.147">${status} = PASS</msg>
<msg level="INFO" timestamp="20170509 13:02:58.148">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:02:57.935" endtime="20170509 13:02:58.148"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:02:58.149">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:02:58.148" endtime="20170509 13:02:58.149"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:02:58.149">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:02:58.149" endtime="20170509 13:02:58.150"></status>
</kw>
<status status="PASS" starttime="20170509 13:02:57.931" endtime="20170509 13:02:58.150"></status>
</kw>
<status status="PASS" starttime="20170509 13:02:57.931" endtime="20170509 13:02:58.150"></status>
</kw>
<status status="PASS" starttime="20170509 13:02:57.930" endtime="20170509 13:02:58.150"></status>
</kw>
<kw type="teardown" library="openbmc_ffdc" name="FFDC On Test Case Fail">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw library="state_manager" name="Is Host Quiesced">
<doc>Check if host state is quiesced.</doc>
<assign>
<var>${status}</var>
</assign>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:02:58.156">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170509 13:02:58.156" endtime="20170509 13:02:58.158"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:02:58.158">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170509 13:02:58.158" endtime="20170509 13:02:58.158"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:02:58.159">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170509 13:02:58.159" endtime="20170509 13:02:58.159"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:02:58.160">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170509 13:02:58.160" endtime="20170509 13:02:58.160"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:02:58.359">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170509 13:02:58.161" endtime="20170509 13:02:58.359"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:02:58.359">${status} = PASS</msg>
<msg level="INFO" timestamp="20170509 13:02:58.359">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:02:58.161" endtime="20170509 13:02:58.359"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:02:58.360">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:02:58.359" endtime="20170509 13:02:58.360"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:02:58.360">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:02:58.360" endtime="20170509 13:02:58.361"></status>
</kw>
<status status="PASS" starttime="20170509 13:02:58.155" endtime="20170509 13:02:58.361"></status>
</kw>
<status status="PASS" starttime="20170509 13:02:58.155" endtime="20170509 13:02:58.361"></status>
</kw>
<status status="PASS" starttime="20170509 13:02:58.154" endtime="20170509 13:02:58.361"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:02:58.361">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" starttime="20170509 13:02:58.361" endtime="20170509 13:02:58.361"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:02:58.364">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170509 13:02:58.363" endtime="20170509 13:02:58.364"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:02:58.365">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170509 13:02:58.365" endtime="20170509 13:02:58.365"></status>
</kw>
<status status="PASS" starttime="20170509 13:02:58.364" endtime="20170509 13:02:58.366"></status>
</kw>
<status status="PASS" starttime="20170509 13:02:58.362" endtime="20170509 13:02:58.366"></status>
</kw>
<status status="PASS" starttime="20170509 13:02:58.362" endtime="20170509 13:02:58.366"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:02:58.433">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170509 13:02:58.433">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:02:58.366" endtime="20170509 13:02:58.433"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:02:58.435">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170509 13:02:58.434" endtime="20170509 13:02:58.435"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:02:58.435">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170509 13:02:58.435" endtime="20170509 13:02:58.436"></status>
</kw>
<status status="PASS" starttime="20170509 13:02:58.435" endtime="20170509 13:02:58.436"></status>
</kw>
<status status="PASS" starttime="20170509 13:02:58.434" endtime="20170509 13:02:58.436"></status>
</kw>
<status status="PASS" starttime="20170509 13:02:58.433" endtime="20170509 13:02:58.436"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:02:58.436">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:02:58.153" endtime="20170509 13:02:58.436"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:02:58.437">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:02:58.436" endtime="20170509 13:02:58.437"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:02:58.437">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170509 13:02:58.437">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170509 13:02:58.437">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170509 13:02:58.437" endtime="20170509 13:02:58.437"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:02:58.438">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" starttime="20170509 13:02:58.152" endtime="20170509 13:02:58.438"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:02:58.438">${host_state} = Running</msg>
<status status="PASS" starttime="20170509 13:02:58.152" endtime="20170509 13:02:58.438"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<msg level="FAIL" timestamp="20170509 13:02:58.439">Running != Quiesced</msg>
<status status="FAIL" starttime="20170509 13:02:58.439" endtime="20170509 13:02:58.440"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:02:58.440">${status} = False</msg>
<status status="PASS" starttime="20170509 13:02:58.438" endtime="20170509 13:02:58.440"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:02:58.440">${status} = False</msg>
<status status="PASS" starttime="20170509 13:02:58.151" endtime="20170509 13:02:58.440"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL' or '${status}'=='True'</arg>
<arg>FFDC</arg>
</arguments>
<status status="PASS" starttime="20170509 13:02:58.440" endtime="20170509 13:02:58.441"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}'=='True'</arg>
<arg>Recover Quiesced Host</arg>
</arguments>
<status status="PASS" starttime="20170509 13:02:58.441" endtime="20170509 13:02:58.441"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Log Test Case Status">
<doc>Test case execution result history.</doc>
<kw library="BuiltIn" name="Get Variable Value">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH_STYLE}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH_STYLE}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:02:58.449">${FFDC_DIR_PATH_STYLE} = </msg>
<status status="PASS" starttime="20170509 13:02:58.442" endtime="20170509 13:02:58.449"></status>
</kw>
<kw library="BuiltIn" name="Get Variable Value">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:02:58.457">${FFDC_DIR_PATH} = </msg>
<status status="PASS" starttime="20170509 13:02:58.449" endtime="20170509 13:02:58.457"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH}' == '${EMPTY}'</arg>
<arg>Set FFDC Defaults</arg>
</arguments>
<kw library="openbmc_ffdc" name="Set Ffdc Defaults">
<doc>Set a default value for ffdc_dir_path and ffdc_prefix if they don't</doc>
<kw library="openbmc_ffdc_utils" name="Get Current Time Stamp">
<doc>Get the current time stamp data</doc>
<kw library="DateTime" name="Get Current Date">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:02:58.465">${cur_time} = 2017-05-09 13:02:58:464749</msg>
<status status="PASS" starttime="20170509 13:02:58.465" endtime="20170509 13:02:58.465"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:02:58.466">${cur_time} = 20170509130258464749</msg>
<status status="PASS" starttime="20170509 13:02:58.465" endtime="20170509 13:02:58.466"></status>
</kw>
<status status="PASS" starttime="20170509 13:02:58.464" endtime="20170509 13:02:58.466"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:02:58.471">${FFDC_TIME} = 20170509130258464749</msg>
<kw library="openbmc_ffdc_utils" name="Get Test Dir and Name">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:02:58.473">${suite_name} = TestsSecurityTestSsl</msg>
<status status="PASS" starttime="20170509 13:02:58.472" endtime="20170509 13:02:58.473"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:02:58.473">${suite_name} = 20170509130258464749_TestsSecurityTestSsl</msg>
<status status="PASS" starttime="20170509 13:02:58.473" endtime="20170509 13:02:58.473"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:02:58.474">${test_name} = TestSSLConnection</msg>
<status status="PASS" starttime="20170509 13:02:58.474" endtime="20170509 13:02:58.474"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:02:58.474">${test_name} = 20170509130258464749_TestSSLConnection</msg>
<status status="PASS" starttime="20170509 13:02:58.474" endtime="20170509 13:02:58.475"></status>
</kw>
<status status="PASS" starttime="20170509 13:02:58.472" endtime="20170509 13:02:58.475"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:02:58.475">${FFDC_DIR_PATH} = /tmp/root/26619/obmc-robot/logs/20170509130258464749_TestsSecurityTestSsl/20170509130258464749_TestSSLConnection/</msg>
<msg level="INFO" timestamp="20170509 13:02:58.479">${FFDC_PREFIX} = 20170509130258464749_</msg>
<status status="PASS" starttime="20170509 13:02:58.457" endtime="20170509 13:02:58.479"></status>
</kw>
<status status="PASS" starttime="20170509 13:02:58.457" endtime="20170509 13:02:58.479"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH_STYLE}' == '${1}'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${FFDC_LOG_PATH}</arg>
<arg>${FFDC_DIR_PATH}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${TEST_HISTORY}</arg>
<arg>${FFDC_DIR_PATH}test_history.txt</arg>
</arguments>
<status status="PASS" starttime="20170509 13:02:58.479" endtime="20170509 13:02:58.480"></status>
</kw>
<kw library="OperatingSystem" name="Create Directory">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:02:58.481" html="yes">Created directory '&lt;a href="file:///tmp/root/26619/obmc-robot/logs"&gt;/tmp/root/26619/obmc-robot/logs&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170509 13:02:58.480" endtime="20170509 13:02:58.481"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw library="OperatingSystem" name="File Should Exist">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg level="FAIL" timestamp="20170509 13:02:58.482">File '/tmp/root/26619/obmc-robot/logs/test_history.txt' does not exist.</msg>
<status status="FAIL" starttime="20170509 13:02:58.481" endtime="20170509 13:02:58.482"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:02:58.482">${exist} = False</msg>
<status status="PASS" starttime="20170509 13:02:58.481" endtime="20170509 13:02:58.482"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<kw library="OperatingSystem" name="Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:02:58.483" html="yes">Created file '&lt;a href="file:///tmp/root/26619/obmc-robot/logs/test_history.txt"&gt;/tmp/root/26619/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170509 13:02:58.483" endtime="20170509 13:02:58.483"></status>
</kw>
<status status="PASS" starttime="20170509 13:02:58.482" endtime="20170509 13:02:58.483"></status>
</kw>
<kw library="gen_robot_print" name="Rpvars">
<arguments>
<arg>TEST_HISTORY</arg>
</arguments>
<status status="PASS" starttime="20170509 13:02:58.483" endtime="20170509 13:02:58.484"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Get Current Time Stamp">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw library="DateTime" name="Get Current Date">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:02:58.485">${cur_time} = 2017-05-09 13:02:58:484523</msg>
<status status="PASS" starttime="20170509 13:02:58.484" endtime="20170509 13:02:58.485"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:02:58.485">${cur_time} = 20170509130258484523</msg>
<status status="PASS" starttime="20170509 13:02:58.485" endtime="20170509 13:02:58.485"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:02:58.485">${cur_time} = 20170509130258484523</msg>
<status status="PASS" starttime="20170509 13:02:58.484" endtime="20170509 13:02:58.485"></status>
</kw>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:02:58.486" html="yes">Appended to file '&lt;a href="file:///tmp/root/26619/obmc-robot/logs/test_history.txt"&gt;/tmp/root/26619/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170509 13:02:58.486" endtime="20170509 13:02:58.486"></status>
</kw>
<status status="PASS" starttime="20170509 13:02:58.441" endtime="20170509 13:02:58.486"></status>
</kw>
<status status="PASS" starttime="20170509 13:02:58.151" endtime="20170509 13:02:58.487"></status>
</kw>
<doc>This testcase is for testing the SSL connection to the
OpenBMC machine.</doc>
<tags>
<tag>Test_SSL_Connection</tag>
</tags>
<status status="PASS" starttime="20170509 13:02:57.930" critical="yes" endtime="20170509 13:02:58.487"></status>
</test>
<kw type="teardown" library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170509 13:02:58.488">Delete All Sessions</msg>
<status status="PASS" starttime="20170509 13:02:58.488" endtime="20170509 13:02:58.488"></status>
</kw>
<doc>This testsuite is for testing SSL connection to OpenBMC</doc>
<status status="PASS" starttime="20170509 13:02:57.852" endtime="20170509 13:02:58.488"></status>
</suite>
<status status="PASS" starttime="20170509 13:02:57.850" endtime="20170509 13:02:58.490"></status>
</suite>
<suite id="s1-s2" name="Test Basic Poweron" source="/tmp/root/26619/obmc-robot/tests/test_basic_poweron.robot">
<test id="s1-s2-t1" name="Power On Test">
<kw type="setup" library="utils" name="Start SOL Console Logging">
<doc>Start system console log to file.</doc>
<kw library="utils" name="Create OS Console File Path">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:02:58.525">${default_file_path} = /tmp/9.3.86.161_os_console</msg>
<status status="PASS" starttime="20170509 13:02:58.525" endtime="20170509 13:02:58.525"></status>
</kw>
<kw library="BuiltIn" name="Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:02:58.526">${log_file_path} = /tmp/9.3.86.161_os_console</msg>
<status status="PASS" starttime="20170509 13:02:58.525" endtime="20170509 13:02:58.526"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:02:58.526">${log_file_path} = /tmp/9.3.86.161_os_console</msg>
<status status="PASS" starttime="20170509 13:02:58.524" endtime="20170509 13:02:58.526"></status>
</kw>
<kw library="utils" name="Stop SOL Console Logging">
<doc>Stop system console logging and return log output.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_output}</var>
</assign>
<kw library="utils" name="Create OS Console File Path">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:02:58.527">${default_file_path} = /tmp/9.3.86.161_os_console</msg>
<status status="PASS" starttime="20170509 13:02:58.527" endtime="20170509 13:02:58.527"></status>
</kw>
<kw library="BuiltIn" name="Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:02:58.528">${log_file_path} = /tmp/9.3.86.161_os_console</msg>
<status status="PASS" starttime="20170509 13:02:58.528" endtime="20170509 13:02:58.528"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:02:58.528">${log_file_path} = /tmp/9.3.86.161_os_console</msg>
<status status="PASS" starttime="20170509 13:02:58.527" endtime="20170509 13:02:58.528"></status>
</kw>
<kw library="utils" name="Create OS Console Command String">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${search_string}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:02:58.529">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status status="PASS" starttime="20170509 13:02:58.529" endtime="20170509 13:02:58.529"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" starttime="20170509 13:02:58.529" endtime="20170509 13:02:58.536"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:02:58.540">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170509 13:02:58.545">${rc} = 0</msg>
<msg level="INFO" timestamp="20170509 13:02:58.545">${output} = /tmp/root/26619/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status status="PASS" starttime="20170509 13:02:58.537" endtime="20170509 13:02:58.545"></status>
</kw>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status status="PASS" starttime="20170509 13:02:58.547" endtime="20170509 13:02:58.554"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${output}\n</arg>
</arguments>
<status status="PASS" starttime="20170509 13:02:58.555" endtime="20170509 13:02:58.555"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>ssh_pw ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:02:58.556">${cmd_buf} = ssh_pw 0penBmc -p 2200 root@9.3.86.161</msg>
<status status="PASS" starttime="20170509 13:02:58.556" endtime="20170509 13:02:58.556"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:02:58.556">${search_string} = ssh_pw 0penBmc -p 2200 root@9.3.86.161</msg>
<status status="PASS" starttime="20170509 13:02:58.528" endtime="20170509 13:02:58.556"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>echo $(ps -ef | egrep '${search_string}'</arg>
<arg>| egrep -v grep | cut -c10-14)</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:02:58.557">${cmd_buf} = echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 root@9.3.86.161' | egrep -v grep | cut -c10-14)</msg>
<status status="PASS" starttime="20170509 13:02:58.557" endtime="20170509 13:02:58.557"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" starttime="20170509 13:02:58.557" endtime="20170509 13:02:58.564"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${os_con_pid}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:02:58.567">Running command 'echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 root@9.3.86.161' | egrep -v grep | cut -c10-14) 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170509 13:02:58.575">${rc} = 0</msg>
<msg level="INFO" timestamp="20170509 13:02:58.575">${os_con_pid} = </msg>
<status status="PASS" starttime="20170509 13:02:58.564" endtime="20170509 13:02:58.575"></status>
</kw>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>os_con_pid</arg>
</arguments>
<status status="PASS" starttime="20170509 13:02:58.577" endtime="20170509 13:02:58.585"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>kill -9 ${os_con_pid}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:02:58.586">${cmd_buf} = kill -9 </msg>
<status status="PASS" starttime="20170509 13:02:58.586" endtime="20170509 13:02:58.586"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpissuing</arg>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" starttime="20170509 13:02:58.587" endtime="20170509 13:02:58.587"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Run And Return Rc And Output</arg>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:02:58.588">${rc} = None</msg>
<msg level="INFO" timestamp="20170509 13:02:58.588">${output} = None</msg>
<status status="PASS" starttime="20170509 13:02:58.587" endtime="20170509 13:02:58.588"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpvars</arg>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status status="PASS" starttime="20170509 13:02:58.588" endtime="20170509 13:02:58.589"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>cat ${log_file_path} 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:02:58.589">${cmd_buf} = cat /tmp/9.3.86.161_os_console 2&gt;&amp;1</msg>
<status status="PASS" starttime="20170509 13:02:58.589" endtime="20170509 13:02:58.589"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" starttime="20170509 13:02:58.589" endtime="20170509 13:02:58.596"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:02:58.600">Running command 'cat /tmp/9.3.86.161_os_console 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170509 13:02:58.603">${rc} = 1</msg>
<msg level="INFO" timestamp="20170509 13:02:58.603">${output} = cat: /tmp/9.3.86.161_os_console: No such file or directory</msg>
<status status="PASS" starttime="20170509 13:02:58.597" endtime="20170509 13:02:58.603"></status>
</kw>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>rc</arg>
</arguments>
<status status="PASS" starttime="20170509 13:02:58.605" endtime="20170509 13:02:58.614"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${targ_file_path}' != '${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<status status="PASS" starttime="20170509 13:02:58.614" endtime="20170509 13:02:58.615"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:02:58.615">${log_output} = cat: /tmp/9.3.86.161_os_console: No such file or directory</msg>
<status status="PASS" starttime="20170509 13:02:58.526" endtime="20170509 13:02:58.615"></status>
</kw>
<kw library="OperatingSystem" name="Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:02:58.616" html="yes">Created file '&lt;a href="file:///tmp/9.3.86.161_os_console"&gt;/tmp/9.3.86.161_os_console&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170509 13:02:58.615" endtime="20170509 13:02:58.616"></status>
</kw>
<kw library="utils" name="Create OS Console Command String">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${sub_cmd_buf}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:02:58.617">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status status="PASS" starttime="20170509 13:02:58.617" endtime="20170509 13:02:58.617"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" starttime="20170509 13:02:58.617" endtime="20170509 13:02:58.624"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:02:58.628">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170509 13:02:58.632">${rc} = 0</msg>
<msg level="INFO" timestamp="20170509 13:02:58.632">${output} = /tmp/root/26619/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status status="PASS" starttime="20170509 13:02:58.625" endtime="20170509 13:02:58.633"></status>
</kw>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status status="PASS" starttime="20170509 13:02:58.634" endtime="20170509 13:02:58.642"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${output}\n</arg>
</arguments>
<status status="PASS" starttime="20170509 13:02:58.642" endtime="20170509 13:02:58.643"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>ssh_pw ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:02:58.644">${cmd_buf} = ssh_pw 0penBmc -p 2200 root@9.3.86.161</msg>
<status status="PASS" starttime="20170509 13:02:58.643" endtime="20170509 13:02:58.644"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:02:58.644">${sub_cmd_buf} = ssh_pw 0penBmc -p 2200 root@9.3.86.161</msg>
<status status="PASS" starttime="20170509 13:02:58.616" endtime="20170509 13:02:58.644"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${sub_cmd_buf} &gt; ${log_file_path} 2&gt;&amp;1 &amp;</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:02:58.644">${cmd_buf} = ssh_pw 0penBmc -p 2200 root@9.3.86.161 &gt; /tmp/9.3.86.161_os_console 2&gt;&amp;1 &amp;</msg>
<status status="PASS" starttime="20170509 13:02:58.644" endtime="20170509 13:02:58.645"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" starttime="20170509 13:02:58.645" endtime="20170509 13:02:58.652"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:02:58.656">Running command 'ssh_pw 0penBmc -p 2200 root@9.3.86.161 &gt; /tmp/9.3.86.161_os_console 2&gt;&amp;1 &amp;'.</msg>
<msg level="INFO" timestamp="20170509 13:02:58.659">${rc} = 0</msg>
<msg level="INFO" timestamp="20170509 13:02:58.659">${output} = </msg>
<status status="PASS" starttime="20170509 13:02:58.653" endtime="20170509 13:02:58.659"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" starttime="20170509 13:02:58.661" endtime="20170509 13:02:58.662"></status>
</kw>
<status status="PASS" starttime="20170509 13:02:58.524" endtime="20170509 13:02:58.662"></status>
</kw>
<kw library="BuiltIn" name="Repeat Keyword">
<doc>Executes the specified keyword multiple times.</doc>
<arguments>
<arg>${LOOP_COUNT} times</arg>
<arg>Host Off And On</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:02:58.663">Repeating keyword, round 1/2.</msg>
<kw name="Host Off And On">
<doc>Verify power off and on.</doc>
<kw library="state_manager" name="Initiate Host PowerOff">
<doc>Initiate host power off.</doc>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${HOST_POWEROFF_TRANS}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:02:58.665">${args} = {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}</msg>
<status status="PASS" starttime="20170509 13:02:58.665" endtime="20170509 13:02:58.665"></status>
</kw>
<kw library="rest_client" name="Write Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>RequestedHostTransition</arg>
<arg>data=${args}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:02:58.666">${base_uri} = /xyz/openbmc_project/state/host0/</msg>
<status status="PASS" starttime="20170509 13:02:58.666" endtime="20170509 13:02:58.666"></status>
</kw>
<kw library="rest_client" name="OpenBMC Put Request">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:02:58.669">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170509 13:02:58.669" endtime="20170509 13:02:58.670"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:02:58.671">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170509 13:02:58.670" endtime="20170509 13:02:58.671"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:02:58.671">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170509 13:02:58.671" endtime="20170509 13:02:58.671"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:02:58.672">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170509 13:02:58.672" endtime="20170509 13:02:58.672"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:02:59.109">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170509 13:02:58.673" endtime="20170509 13:02:59.109"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:02:59.109">${status} = PASS</msg>
<msg level="INFO" timestamp="20170509 13:02:59.109">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:02:58.672" endtime="20170509 13:02:59.109"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:02:59.110">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:02:59.110" endtime="20170509 13:02:59.110"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:02:59.111">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:02:59.110" endtime="20170509 13:02:59.111"></status>
</kw>
<status status="PASS" starttime="20170509 13:02:58.668" endtime="20170509 13:02:59.111"></status>
</kw>
<status status="PASS" starttime="20170509 13:02:58.668" endtime="20170509 13:02:59.111"></status>
</kw>
<status status="PASS" starttime="20170509 13:02:58.667" endtime="20170509 13:02:59.111"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:02:59.112">${base_uri} = /xyz/openbmc_project/state/host0//attr/RequestedHostTransition</msg>
<status status="PASS" starttime="20170509 13:02:59.111" endtime="20170509 13:02:59.112"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:02:59.112">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170509 13:02:59.112" endtime="20170509 13:02:59.112"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" starttime="20170509 13:02:59.113" endtime="20170509 13:02:59.113"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:02:59.114">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-...</msg>
<status status="PASS" starttime="20170509 13:02:59.114" endtime="20170509 13:02:59.115"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:02:59.115">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20170509 13:02:59.115" endtime="20170509 13:02:59.116"></status>
</kw>
<status status="PASS" starttime="20170509 13:02:59.115" endtime="20170509 13:02:59.116"></status>
</kw>
<status status="PASS" starttime="20170509 13:02:59.113" endtime="20170509 13:02:59.116"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Put Request">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:02:59.517">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, data={"data": "xyz.openbmc_project.State.Host.Transition.Off"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg level="INFO" timestamp="20170509 13:02:59.517">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:02:59.116" endtime="20170509 13:02:59.517"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:02:59.518">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170509 13:02:59.518" endtime="20170509 13:02:59.519"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:02:59.519">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170509 13:02:59.519" endtime="20170509 13:02:59.519"></status>
</kw>
<status status="PASS" starttime="20170509 13:02:59.519" endtime="20170509 13:02:59.520"></status>
</kw>
<status status="PASS" starttime="20170509 13:02:59.517" endtime="20170509 13:02:59.520"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:02:59.520">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:02:58.666" endtime="20170509 13:02:59.520"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:02:59.520">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:02:59.520" endtime="20170509 13:02:59.521"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:02:59.521">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170509 13:02:59.521">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170509 13:02:59.521">${json} = {u'data': None, u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170509 13:02:59.521" endtime="20170509 13:02:59.521"></status>
</kw>
<status status="PASS" starttime="20170509 13:02:58.665" endtime="20170509 13:02:59.521"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${wait}' == '${0}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<status status="PASS" starttime="20170509 13:02:59.522" endtime="20170509 13:02:59.522"></status>
</kw>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>3 min</arg>
<arg>10 sec</arg>
<arg>Is Host Off</arg>
</arguments>
<kw library="state_manager" name="Is Host Off">
<doc>Check if host state is "Off".</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:02:59.527">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170509 13:02:59.527" endtime="20170509 13:02:59.528"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:02:59.529">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170509 13:02:59.528" endtime="20170509 13:02:59.529"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:02:59.529">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170509 13:02:59.529" endtime="20170509 13:02:59.530"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:02:59.530">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170509 13:02:59.530" endtime="20170509 13:02:59.530"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:03:00.804">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170509 13:02:59.531" endtime="20170509 13:03:00.804"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:03:00.804">${status} = PASS</msg>
<msg level="INFO" timestamp="20170509 13:03:00.804">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:02:59.531" endtime="20170509 13:03:00.804"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:03:00.805">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:03:00.805" endtime="20170509 13:03:00.805"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:03:00.806">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:03:00.805" endtime="20170509 13:03:00.806"></status>
</kw>
<status status="PASS" starttime="20170509 13:02:59.526" endtime="20170509 13:03:00.806"></status>
</kw>
<status status="PASS" starttime="20170509 13:02:59.525" endtime="20170509 13:03:00.806"></status>
</kw>
<status status="PASS" starttime="20170509 13:02:59.524" endtime="20170509 13:03:00.806"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:03:00.807">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" starttime="20170509 13:03:00.806" endtime="20170509 13:03:00.807"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:03:00.809">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170509 13:03:00.808" endtime="20170509 13:03:00.809"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:03:00.810">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170509 13:03:00.810" endtime="20170509 13:03:00.810"></status>
</kw>
<status status="PASS" starttime="20170509 13:03:00.809" endtime="20170509 13:03:00.810"></status>
</kw>
<status status="PASS" starttime="20170509 13:03:00.808" endtime="20170509 13:03:00.810"></status>
</kw>
<status status="PASS" starttime="20170509 13:03:00.807" endtime="20170509 13:03:00.810"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:03:01.356">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170509 13:03:01.356">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:03:00.811" endtime="20170509 13:03:01.356"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:03:01.358">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170509 13:03:01.358" endtime="20170509 13:03:01.358"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:03:01.359">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170509 13:03:01.359" endtime="20170509 13:03:01.359"></status>
</kw>
<status status="PASS" starttime="20170509 13:03:01.358" endtime="20170509 13:03:01.359"></status>
</kw>
<status status="PASS" starttime="20170509 13:03:01.357" endtime="20170509 13:03:01.359"></status>
</kw>
<status status="PASS" starttime="20170509 13:03:01.356" endtime="20170509 13:03:01.359"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:03:01.360">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:02:59.524" endtime="20170509 13:03:01.360"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:03:01.360">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:03:01.360" endtime="20170509 13:03:01.360"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:03:01.361">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170509 13:03:01.361">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170509 13:03:01.361">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170509 13:03:01.361" endtime="20170509 13:03:01.361"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:03:01.361">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" starttime="20170509 13:02:59.523" endtime="20170509 13:03:01.361"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:03:01.362">${host_state} = Running</msg>
<status status="PASS" starttime="20170509 13:02:59.523" endtime="20170509 13:03:01.362"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170509 13:03:01.362">Off != Running</msg>
<status status="FAIL" starttime="20170509 13:03:01.362" endtime="20170509 13:03:01.362"></status>
</kw>
<status status="FAIL" starttime="20170509 13:02:59.523" endtime="20170509 13:03:01.363"></status>
</kw>
<kw library="state_manager" name="Is Host Off">
<doc>Check if host state is "Off".</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:03:11.367">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170509 13:03:11.367" endtime="20170509 13:03:11.367"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:03:11.368">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170509 13:03:11.368" endtime="20170509 13:03:11.368"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:03:11.369">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170509 13:03:11.368" endtime="20170509 13:03:11.369"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:03:11.369">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170509 13:03:11.369" endtime="20170509 13:03:11.369"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:03:11.569">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170509 13:03:11.370" endtime="20170509 13:03:11.570"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:03:11.570">${status} = PASS</msg>
<msg level="INFO" timestamp="20170509 13:03:11.570">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:03:11.370" endtime="20170509 13:03:11.570"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:03:11.570">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:03:11.570" endtime="20170509 13:03:11.570"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:03:11.571">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:03:11.571" endtime="20170509 13:03:11.571"></status>
</kw>
<status status="PASS" starttime="20170509 13:03:11.366" endtime="20170509 13:03:11.571"></status>
</kw>
<status status="PASS" starttime="20170509 13:03:11.366" endtime="20170509 13:03:11.571"></status>
</kw>
<status status="PASS" starttime="20170509 13:03:11.365" endtime="20170509 13:03:11.571"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:03:11.572">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" starttime="20170509 13:03:11.572" endtime="20170509 13:03:11.572"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:03:11.574">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170509 13:03:11.573" endtime="20170509 13:03:11.574"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:03:11.575">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170509 13:03:11.575" endtime="20170509 13:03:11.575"></status>
</kw>
<status status="PASS" starttime="20170509 13:03:11.574" endtime="20170509 13:03:11.575"></status>
</kw>
<status status="PASS" starttime="20170509 13:03:11.573" endtime="20170509 13:03:11.575"></status>
</kw>
<status status="PASS" starttime="20170509 13:03:11.572" endtime="20170509 13:03:11.575"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:03:11.638">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170509 13:03:11.638">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:03:11.576" endtime="20170509 13:03:11.638"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:03:11.640">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170509 13:03:11.639" endtime="20170509 13:03:11.640"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:03:11.641">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170509 13:03:11.641" endtime="20170509 13:03:11.641"></status>
</kw>
<status status="PASS" starttime="20170509 13:03:11.640" endtime="20170509 13:03:11.641"></status>
</kw>
<status status="PASS" starttime="20170509 13:03:11.639" endtime="20170509 13:03:11.641"></status>
</kw>
<status status="PASS" starttime="20170509 13:03:11.639" endtime="20170509 13:03:11.641"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:03:11.641">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:03:11.364" endtime="20170509 13:03:11.641"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:03:11.642">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:03:11.642" endtime="20170509 13:03:11.642"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:03:11.643">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170509 13:03:11.643">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170509 13:03:11.643">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170509 13:03:11.642" endtime="20170509 13:03:11.643"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:03:11.643">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status status="PASS" starttime="20170509 13:03:11.364" endtime="20170509 13:03:11.643"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:03:11.643">${host_state} = Off</msg>
<status status="PASS" starttime="20170509 13:03:11.364" endtime="20170509 13:03:11.644"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<status status="PASS" starttime="20170509 13:03:11.644" endtime="20170509 13:03:11.644"></status>
</kw>
<status status="PASS" starttime="20170509 13:03:11.363" endtime="20170509 13:03:11.644"></status>
</kw>
<status status="PASS" starttime="20170509 13:02:59.522" endtime="20170509 13:03:11.644"></status>
</kw>
<status status="PASS" starttime="20170509 13:02:58.664" endtime="20170509 13:03:11.644"></status>
</kw>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>5 min</arg>
<arg>10 sec</arg>
<arg>Is OS Off</arg>
</arguments>
<kw library="utils" name="Is OS Off">
<doc>Check if boot progress is "Off".</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:03:11.650">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170509 13:03:11.649" endtime="20170509 13:03:11.650"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:03:11.651">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170509 13:03:11.651" endtime="20170509 13:03:11.651"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:03:11.652">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170509 13:03:11.651" endtime="20170509 13:03:11.652"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:03:11.653">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170509 13:03:11.652" endtime="20170509 13:03:11.653"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:03:11.846">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170509 13:03:11.654" endtime="20170509 13:03:11.846"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:03:11.846">${status} = PASS</msg>
<msg level="INFO" timestamp="20170509 13:03:11.847">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:03:11.653" endtime="20170509 13:03:11.847"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:03:11.847">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:03:11.847" endtime="20170509 13:03:11.847"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:03:11.848">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:03:11.847" endtime="20170509 13:03:11.848"></status>
</kw>
<status status="PASS" starttime="20170509 13:03:11.648" endtime="20170509 13:03:11.848"></status>
</kw>
<status status="PASS" starttime="20170509 13:03:11.648" endtime="20170509 13:03:11.848"></status>
</kw>
<status status="PASS" starttime="20170509 13:03:11.647" endtime="20170509 13:03:11.848"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:03:11.849">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" starttime="20170509 13:03:11.849" endtime="20170509 13:03:11.849"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:03:11.851">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170509 13:03:11.850" endtime="20170509 13:03:11.851"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:03:11.852">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170509 13:03:11.852" endtime="20170509 13:03:11.852"></status>
</kw>
<status status="PASS" starttime="20170509 13:03:11.851" endtime="20170509 13:03:11.852"></status>
</kw>
<status status="PASS" starttime="20170509 13:03:11.850" endtime="20170509 13:03:11.852"></status>
</kw>
<status status="PASS" starttime="20170509 13:03:11.849" endtime="20170509 13:03:11.852"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:03:11.919">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170509 13:03:11.919">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:03:11.853" endtime="20170509 13:03:11.919"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:03:11.921">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170509 13:03:11.920" endtime="20170509 13:03:11.921"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:03:11.922">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170509 13:03:11.921" endtime="20170509 13:03:11.922"></status>
</kw>
<status status="PASS" starttime="20170509 13:03:11.921" endtime="20170509 13:03:11.922"></status>
</kw>
<status status="PASS" starttime="20170509 13:03:11.920" endtime="20170509 13:03:11.922"></status>
</kw>
<status status="PASS" starttime="20170509 13:03:11.919" endtime="20170509 13:03:11.922"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:03:11.922">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:03:11.646" endtime="20170509 13:03:11.922"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:03:11.923">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:03:11.923" endtime="20170509 13:03:11.923"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:03:11.924">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170509 13:03:11.924">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170509 13:03:11.924">${content} = {u'data': u'Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170509 13:03:11.923" endtime="20170509 13:03:11.924"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:03:11.924">${state} = Off</msg>
<status status="PASS" starttime="20170509 13:03:11.646" endtime="20170509 13:03:11.924"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:03:11.924">${boot_progress} = Off</msg>
<status status="PASS" starttime="20170509 13:03:11.645" endtime="20170509 13:03:11.924"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>Off</arg>
</arguments>
<status status="PASS" starttime="20170509 13:03:11.924" endtime="20170509 13:03:11.925"></status>
</kw>
<status status="PASS" starttime="20170509 13:03:11.645" endtime="20170509 13:03:11.925"></status>
</kw>
<status status="PASS" starttime="20170509 13:03:11.645" endtime="20170509 13:03:11.925"></status>
</kw>
<kw library="state_manager" name="Initiate Host Boot">
<doc>Initiate host power on.</doc>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${HOST_POWERON_TRANS}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:03:11.926">${args} = {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}</msg>
<status status="PASS" starttime="20170509 13:03:11.926" endtime="20170509 13:03:11.926"></status>
</kw>
<kw library="rest_client" name="Write Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>RequestedHostTransition</arg>
<arg>data=${args}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:03:11.927">${base_uri} = /xyz/openbmc_project/state/host0/</msg>
<status status="PASS" starttime="20170509 13:03:11.927" endtime="20170509 13:03:11.927"></status>
</kw>
<kw library="rest_client" name="OpenBMC Put Request">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:03:11.930">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170509 13:03:11.930" endtime="20170509 13:03:11.930"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:03:11.931">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170509 13:03:11.931" endtime="20170509 13:03:11.931"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:03:11.932">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170509 13:03:11.931" endtime="20170509 13:03:11.932"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:03:11.932">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170509 13:03:11.932" endtime="20170509 13:03:11.932"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:03:12.175">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170509 13:03:11.933" endtime="20170509 13:03:12.175"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:03:12.175">${status} = PASS</msg>
<msg level="INFO" timestamp="20170509 13:03:12.175">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:03:11.932" endtime="20170509 13:03:12.175"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:03:12.176">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:03:12.176" endtime="20170509 13:03:12.176"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:03:12.177">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:03:12.176" endtime="20170509 13:03:12.177"></status>
</kw>
<status status="PASS" starttime="20170509 13:03:11.929" endtime="20170509 13:03:12.177"></status>
</kw>
<status status="PASS" starttime="20170509 13:03:11.929" endtime="20170509 13:03:12.177"></status>
</kw>
<status status="PASS" starttime="20170509 13:03:11.928" endtime="20170509 13:03:12.177"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:03:12.178">${base_uri} = /xyz/openbmc_project/state/host0//attr/RequestedHostTransition</msg>
<status status="PASS" starttime="20170509 13:03:12.177" endtime="20170509 13:03:12.178"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:03:12.178">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170509 13:03:12.178" endtime="20170509 13:03:12.178"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" starttime="20170509 13:03:12.179" endtime="20170509 13:03:12.179"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:03:12.181">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}, u'headers': {u'Content-T...</msg>
<status status="PASS" starttime="20170509 13:03:12.180" endtime="20170509 13:03:12.181"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:03:12.182">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20170509 13:03:12.181" endtime="20170509 13:03:12.182"></status>
</kw>
<status status="PASS" starttime="20170509 13:03:12.181" endtime="20170509 13:03:12.182"></status>
</kw>
<status status="PASS" starttime="20170509 13:03:12.179" endtime="20170509 13:03:12.182"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Put Request">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:03:12.391">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, data={"data": "xyz.openbmc_project.State.Host.Transition.On"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg level="INFO" timestamp="20170509 13:03:12.392">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:03:12.182" endtime="20170509 13:03:12.392"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:03:12.393">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170509 13:03:12.392" endtime="20170509 13:03:12.393"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:03:12.394">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170509 13:03:12.394" endtime="20170509 13:03:12.395"></status>
</kw>
<status status="PASS" starttime="20170509 13:03:12.393" endtime="20170509 13:03:12.395"></status>
</kw>
<status status="PASS" starttime="20170509 13:03:12.392" endtime="20170509 13:03:12.395"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:03:12.395">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:03:11.928" endtime="20170509 13:03:12.395"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:03:12.396">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:03:12.395" endtime="20170509 13:03:12.396"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:03:12.396">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170509 13:03:12.396">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170509 13:03:12.397">${json} = {u'data': None, u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170509 13:03:12.396" endtime="20170509 13:03:12.397"></status>
</kw>
<status status="PASS" starttime="20170509 13:03:11.926" endtime="20170509 13:03:12.397"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${wait}' == '${0}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<status status="PASS" starttime="20170509 13:03:12.397" endtime="20170509 13:03:12.397"></status>
</kw>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>10 min</arg>
<arg>10 sec</arg>
<arg>Is Host Running</arg>
</arguments>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:03:12.401">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170509 13:03:12.401" endtime="20170509 13:03:12.402"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:03:12.402">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170509 13:03:12.402" endtime="20170509 13:03:12.402"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:03:12.403">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170509 13:03:12.403" endtime="20170509 13:03:12.403"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:03:12.404">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170509 13:03:12.404" endtime="20170509 13:03:12.404"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:03:13.880">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170509 13:03:12.405" endtime="20170509 13:03:13.880"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:03:13.881">${status} = PASS</msg>
<msg level="INFO" timestamp="20170509 13:03:13.881">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:03:12.404" endtime="20170509 13:03:13.881"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:03:13.881">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:03:13.881" endtime="20170509 13:03:13.881"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:03:13.882">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:03:13.882" endtime="20170509 13:03:13.882"></status>
</kw>
<status status="PASS" starttime="20170509 13:03:12.401" endtime="20170509 13:03:13.882"></status>
</kw>
<status status="PASS" starttime="20170509 13:03:12.400" endtime="20170509 13:03:13.882"></status>
</kw>
<status status="PASS" starttime="20170509 13:03:12.400" endtime="20170509 13:03:13.882"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:03:13.883">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" starttime="20170509 13:03:13.883" endtime="20170509 13:03:13.883"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:03:13.885">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170509 13:03:13.884" endtime="20170509 13:03:13.885"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:03:13.886">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170509 13:03:13.886" endtime="20170509 13:03:13.886"></status>
</kw>
<status status="PASS" starttime="20170509 13:03:13.885" endtime="20170509 13:03:13.886"></status>
</kw>
<status status="PASS" starttime="20170509 13:03:13.884" endtime="20170509 13:03:13.886"></status>
</kw>
<status status="PASS" starttime="20170509 13:03:13.883" endtime="20170509 13:03:13.887"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:03:14.021">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170509 13:03:14.021">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:03:13.887" endtime="20170509 13:03:14.021"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:03:14.022">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170509 13:03:14.022" endtime="20170509 13:03:14.022"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:03:14.023">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170509 13:03:14.023" endtime="20170509 13:03:14.023"></status>
</kw>
<status status="PASS" starttime="20170509 13:03:14.023" endtime="20170509 13:03:14.024"></status>
</kw>
<status status="PASS" starttime="20170509 13:03:14.021" endtime="20170509 13:03:14.024"></status>
</kw>
<status status="PASS" starttime="20170509 13:03:14.021" endtime="20170509 13:03:14.024"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:03:14.024">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:03:12.399" endtime="20170509 13:03:14.024"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:03:14.024">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:03:14.024" endtime="20170509 13:03:14.025"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:03:14.025">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170509 13:03:14.025">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170509 13:03:14.025">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170509 13:03:14.025" endtime="20170509 13:03:14.025"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:03:14.026">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status status="PASS" starttime="20170509 13:03:12.399" endtime="20170509 13:03:14.026"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:03:14.026">${host_state} = Off</msg>
<status status="PASS" starttime="20170509 13:03:12.398" endtime="20170509 13:03:14.026"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170509 13:03:14.027">Running != Off</msg>
<status status="FAIL" starttime="20170509 13:03:14.026" endtime="20170509 13:03:14.027"></status>
</kw>
<status status="FAIL" starttime="20170509 13:03:12.398" endtime="20170509 13:03:14.027"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:03:24.032">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170509 13:03:24.031" endtime="20170509 13:03:24.032"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:03:24.033">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170509 13:03:24.032" endtime="20170509 13:03:24.033"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:03:24.033">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170509 13:03:24.033" endtime="20170509 13:03:24.033"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:03:24.034">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170509 13:03:24.034" endtime="20170509 13:03:24.034"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:03:24.223">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170509 13:03:24.035" endtime="20170509 13:03:24.224"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:03:24.224">${status} = PASS</msg>
<msg level="INFO" timestamp="20170509 13:03:24.224">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:03:24.034" endtime="20170509 13:03:24.224"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:03:24.224">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:03:24.224" endtime="20170509 13:03:24.224"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:03:24.225">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:03:24.225" endtime="20170509 13:03:24.225"></status>
</kw>
<status status="PASS" starttime="20170509 13:03:24.031" endtime="20170509 13:03:24.225"></status>
</kw>
<status status="PASS" starttime="20170509 13:03:24.030" endtime="20170509 13:03:24.225"></status>
</kw>
<status status="PASS" starttime="20170509 13:03:24.030" endtime="20170509 13:03:24.226"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:03:24.226">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" starttime="20170509 13:03:24.226" endtime="20170509 13:03:24.226"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:03:24.228">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170509 13:03:24.227" endtime="20170509 13:03:24.228"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:03:24.229">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170509 13:03:24.229" endtime="20170509 13:03:24.229"></status>
</kw>
<status status="PASS" starttime="20170509 13:03:24.228" endtime="20170509 13:03:24.229"></status>
</kw>
<status status="PASS" starttime="20170509 13:03:24.227" endtime="20170509 13:03:24.229"></status>
</kw>
<status status="PASS" starttime="20170509 13:03:24.226" endtime="20170509 13:03:24.229"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:03:25.254">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170509 13:03:25.254">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:03:24.230" endtime="20170509 13:03:25.254"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:03:25.256">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170509 13:03:25.256" endtime="20170509 13:03:25.256"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:03:25.257">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170509 13:03:25.257" endtime="20170509 13:03:25.257"></status>
</kw>
<status status="PASS" starttime="20170509 13:03:25.256" endtime="20170509 13:03:25.257"></status>
</kw>
<status status="PASS" starttime="20170509 13:03:25.255" endtime="20170509 13:03:25.257"></status>
</kw>
<status status="PASS" starttime="20170509 13:03:25.255" endtime="20170509 13:03:25.258"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:03:25.258">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:03:24.029" endtime="20170509 13:03:25.258"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:03:25.258">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:03:25.258" endtime="20170509 13:03:25.258"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:03:25.259">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170509 13:03:25.259">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170509 13:03:25.259">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170509 13:03:25.259" endtime="20170509 13:03:25.259"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:03:25.260">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status status="PASS" starttime="20170509 13:03:24.028" endtime="20170509 13:03:25.260"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:03:25.260">${host_state} = Off</msg>
<status status="PASS" starttime="20170509 13:03:24.028" endtime="20170509 13:03:25.260"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170509 13:03:25.261">Running != Off</msg>
<status status="FAIL" starttime="20170509 13:03:25.260" endtime="20170509 13:03:25.261"></status>
</kw>
<status status="FAIL" starttime="20170509 13:03:24.027" endtime="20170509 13:03:25.261"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:03:35.265">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170509 13:03:35.265" endtime="20170509 13:03:35.266"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:03:35.266">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170509 13:03:35.266" endtime="20170509 13:03:35.266"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:03:35.267">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170509 13:03:35.267" endtime="20170509 13:03:35.267"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:03:35.268">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170509 13:03:35.267" endtime="20170509 13:03:35.268"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:03:35.497">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170509 13:03:35.268" endtime="20170509 13:03:35.497"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:03:35.497">${status} = PASS</msg>
<msg level="INFO" timestamp="20170509 13:03:35.497">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:03:35.268" endtime="20170509 13:03:35.497"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:03:35.498">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:03:35.497" endtime="20170509 13:03:35.498"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:03:35.498">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:03:35.498" endtime="20170509 13:03:35.498"></status>
</kw>
<status status="PASS" starttime="20170509 13:03:35.265" endtime="20170509 13:03:35.499"></status>
</kw>
<status status="PASS" starttime="20170509 13:03:35.264" endtime="20170509 13:03:35.499"></status>
</kw>
<status status="PASS" starttime="20170509 13:03:35.264" endtime="20170509 13:03:35.499"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:03:35.499">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" starttime="20170509 13:03:35.499" endtime="20170509 13:03:35.499"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:03:35.501">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170509 13:03:35.501" endtime="20170509 13:03:35.502"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:03:35.502">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170509 13:03:35.502" endtime="20170509 13:03:35.502"></status>
</kw>
<status status="PASS" starttime="20170509 13:03:35.502" endtime="20170509 13:03:35.503"></status>
</kw>
<status status="PASS" starttime="20170509 13:03:35.500" endtime="20170509 13:03:35.503"></status>
</kw>
<status status="PASS" starttime="20170509 13:03:35.500" endtime="20170509 13:03:35.503"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:03:35.568">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170509 13:03:35.568">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:03:35.503" endtime="20170509 13:03:35.568"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:03:35.570">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170509 13:03:35.569" endtime="20170509 13:03:35.570"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:03:35.571">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170509 13:03:35.571" endtime="20170509 13:03:35.571"></status>
</kw>
<status status="PASS" starttime="20170509 13:03:35.570" endtime="20170509 13:03:35.571"></status>
</kw>
<status status="PASS" starttime="20170509 13:03:35.569" endtime="20170509 13:03:35.571"></status>
</kw>
<status status="PASS" starttime="20170509 13:03:35.568" endtime="20170509 13:03:35.572"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:03:35.572">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:03:35.263" endtime="20170509 13:03:35.572"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:03:35.572">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:03:35.572" endtime="20170509 13:03:35.572"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:03:35.573">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170509 13:03:35.573">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170509 13:03:35.573">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170509 13:03:35.573" endtime="20170509 13:03:35.573"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:03:35.574">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" starttime="20170509 13:03:35.262" endtime="20170509 13:03:35.574"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:03:35.574">${host_state} = Running</msg>
<status status="PASS" starttime="20170509 13:03:35.262" endtime="20170509 13:03:35.574"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status status="PASS" starttime="20170509 13:03:35.574" endtime="20170509 13:03:35.574"></status>
</kw>
<status status="PASS" starttime="20170509 13:03:35.261" endtime="20170509 13:03:35.575"></status>
</kw>
<status status="PASS" starttime="20170509 13:03:12.397" endtime="20170509 13:03:35.575"></status>
</kw>
<status status="PASS" starttime="20170509 13:03:11.925" endtime="20170509 13:03:35.575"></status>
</kw>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>10 min</arg>
<arg>10 sec</arg>
<arg>Is OS Starting</arg>
</arguments>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:03:35.580">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170509 13:03:35.579" endtime="20170509 13:03:35.580"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:03:35.581">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170509 13:03:35.581" endtime="20170509 13:03:35.581"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:03:35.581">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170509 13:03:35.581" endtime="20170509 13:03:35.581"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:03:35.582">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170509 13:03:35.582" endtime="20170509 13:03:35.582"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:03:35.771">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170509 13:03:35.583" endtime="20170509 13:03:35.771"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:03:35.772">${status} = PASS</msg>
<msg level="INFO" timestamp="20170509 13:03:35.772">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:03:35.583" endtime="20170509 13:03:35.772"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:03:35.773">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:03:35.772" endtime="20170509 13:03:35.773"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:03:35.773">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:03:35.773" endtime="20170509 13:03:35.773"></status>
</kw>
<status status="PASS" starttime="20170509 13:03:35.578" endtime="20170509 13:03:35.773"></status>
</kw>
<status status="PASS" starttime="20170509 13:03:35.578" endtime="20170509 13:03:35.774"></status>
</kw>
<status status="PASS" starttime="20170509 13:03:35.577" endtime="20170509 13:03:35.774"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:03:35.774">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" starttime="20170509 13:03:35.774" endtime="20170509 13:03:35.774"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:03:35.776">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170509 13:03:35.776" endtime="20170509 13:03:35.776"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:03:35.777">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170509 13:03:35.777" endtime="20170509 13:03:35.778"></status>
</kw>
<status status="PASS" starttime="20170509 13:03:35.776" endtime="20170509 13:03:35.778"></status>
</kw>
<status status="PASS" starttime="20170509 13:03:35.775" endtime="20170509 13:03:35.778"></status>
</kw>
<status status="PASS" starttime="20170509 13:03:35.775" endtime="20170509 13:03:35.778"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:03:35.844">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170509 13:03:35.844">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:03:35.778" endtime="20170509 13:03:35.844"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:03:35.846">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170509 13:03:35.846" endtime="20170509 13:03:35.846"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:03:35.847">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170509 13:03:35.847" endtime="20170509 13:03:35.847"></status>
</kw>
<status status="PASS" starttime="20170509 13:03:35.846" endtime="20170509 13:03:35.847"></status>
</kw>
<status status="PASS" starttime="20170509 13:03:35.845" endtime="20170509 13:03:35.847"></status>
</kw>
<status status="PASS" starttime="20170509 13:03:35.845" endtime="20170509 13:03:35.848"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:03:35.848">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:03:35.577" endtime="20170509 13:03:35.848"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:03:35.848">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:03:35.848" endtime="20170509 13:03:35.848"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:03:35.849">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170509 13:03:35.849">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170509 13:03:35.849">${content} = {u'data': u'Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170509 13:03:35.849" endtime="20170509 13:03:35.849"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:03:35.849">${state} = Off</msg>
<status status="PASS" starttime="20170509 13:03:35.576" endtime="20170509 13:03:35.849"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:03:35.850">${boot_progress} = Off</msg>
<status status="PASS" starttime="20170509 13:03:35.576" endtime="20170509 13:03:35.850"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170509 13:03:35.851">Off != FW Progress, Starting OS</msg>
<status status="FAIL" starttime="20170509 13:03:35.850" endtime="20170509 13:03:35.851"></status>
</kw>
<status status="FAIL" starttime="20170509 13:03:35.575" endtime="20170509 13:03:35.851"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:03:45.856">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170509 13:03:45.856" endtime="20170509 13:03:45.857"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:03:45.857">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170509 13:03:45.857" endtime="20170509 13:03:45.857"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:03:45.858">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170509 13:03:45.858" endtime="20170509 13:03:45.858"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:03:45.859">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170509 13:03:45.858" endtime="20170509 13:03:45.859"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:03:46.458">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170509 13:03:45.859" endtime="20170509 13:03:46.458"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:03:46.458">${status} = PASS</msg>
<msg level="INFO" timestamp="20170509 13:03:46.458">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:03:45.859" endtime="20170509 13:03:46.458"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:03:46.459">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:03:46.459" endtime="20170509 13:03:46.459"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:03:46.460">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:03:46.459" endtime="20170509 13:03:46.460"></status>
</kw>
<status status="PASS" starttime="20170509 13:03:45.855" endtime="20170509 13:03:46.460"></status>
</kw>
<status status="PASS" starttime="20170509 13:03:45.855" endtime="20170509 13:03:46.460"></status>
</kw>
<status status="PASS" starttime="20170509 13:03:45.854" endtime="20170509 13:03:46.460"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:03:46.461">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" starttime="20170509 13:03:46.461" endtime="20170509 13:03:46.461"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:03:46.463">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170509 13:03:46.462" endtime="20170509 13:03:46.464"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:03:46.464">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170509 13:03:46.464" endtime="20170509 13:03:46.464"></status>
</kw>
<status status="PASS" starttime="20170509 13:03:46.464" endtime="20170509 13:03:46.465"></status>
</kw>
<status status="PASS" starttime="20170509 13:03:46.462" endtime="20170509 13:03:46.465"></status>
</kw>
<status status="PASS" starttime="20170509 13:03:46.461" endtime="20170509 13:03:46.465"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:03:46.636">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170509 13:03:46.636">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:03:46.465" endtime="20170509 13:03:46.636"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:03:46.638">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170509 13:03:46.637" endtime="20170509 13:03:46.638"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:03:46.639">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170509 13:03:46.639" endtime="20170509 13:03:46.639"></status>
</kw>
<status status="PASS" starttime="20170509 13:03:46.638" endtime="20170509 13:03:46.639"></status>
</kw>
<status status="PASS" starttime="20170509 13:03:46.637" endtime="20170509 13:03:46.639"></status>
</kw>
<status status="PASS" starttime="20170509 13:03:46.636" endtime="20170509 13:03:46.639"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:03:46.639">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:03:45.854" endtime="20170509 13:03:46.639"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:03:46.640">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:03:46.640" endtime="20170509 13:03:46.640"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:03:46.641">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170509 13:03:46.641">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170509 13:03:46.641">${content} = {u'data': u'Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170509 13:03:46.640" endtime="20170509 13:03:46.641"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:03:46.641">${state} = Off</msg>
<status status="PASS" starttime="20170509 13:03:45.853" endtime="20170509 13:03:46.641"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:03:46.642">${boot_progress} = Off</msg>
<status status="PASS" starttime="20170509 13:03:45.852" endtime="20170509 13:03:46.642"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170509 13:03:46.643">Off != FW Progress, Starting OS</msg>
<status status="FAIL" starttime="20170509 13:03:46.642" endtime="20170509 13:03:46.643"></status>
</kw>
<status status="FAIL" starttime="20170509 13:03:45.851" endtime="20170509 13:03:46.643"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:03:56.648">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170509 13:03:56.648" endtime="20170509 13:03:56.648"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:03:56.649">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170509 13:03:56.649" endtime="20170509 13:03:56.649"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:03:56.650">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170509 13:03:56.649" endtime="20170509 13:03:56.650"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:03:56.650">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170509 13:03:56.650" endtime="20170509 13:03:56.650"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:03:56.907">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170509 13:03:56.651" endtime="20170509 13:03:56.907"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:03:56.907">${status} = PASS</msg>
<msg level="INFO" timestamp="20170509 13:03:56.908">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:03:56.651" endtime="20170509 13:03:56.908"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:03:56.908">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:03:56.908" endtime="20170509 13:03:56.908"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:03:56.909">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:03:56.908" endtime="20170509 13:03:56.909"></status>
</kw>
<status status="PASS" starttime="20170509 13:03:56.647" endtime="20170509 13:03:56.909"></status>
</kw>
<status status="PASS" starttime="20170509 13:03:56.647" endtime="20170509 13:03:56.909"></status>
</kw>
<status status="PASS" starttime="20170509 13:03:56.646" endtime="20170509 13:03:56.909"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:03:56.910">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" starttime="20170509 13:03:56.909" endtime="20170509 13:03:56.910"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:03:56.912">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170509 13:03:56.911" endtime="20170509 13:03:56.912"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:03:56.913">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170509 13:03:56.913" endtime="20170509 13:03:56.913"></status>
</kw>
<status status="PASS" starttime="20170509 13:03:56.912" endtime="20170509 13:03:56.913"></status>
</kw>
<status status="PASS" starttime="20170509 13:03:56.911" endtime="20170509 13:03:56.913"></status>
</kw>
<status status="PASS" starttime="20170509 13:03:56.910" endtime="20170509 13:03:56.913"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:03:57.020">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170509 13:03:57.020">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:03:56.913" endtime="20170509 13:03:57.020"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:03:57.022">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170509 13:03:57.021" endtime="20170509 13:03:57.022"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:03:57.023">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170509 13:03:57.023" endtime="20170509 13:03:57.023"></status>
</kw>
<status status="PASS" starttime="20170509 13:03:57.022" endtime="20170509 13:03:57.024"></status>
</kw>
<status status="PASS" starttime="20170509 13:03:57.021" endtime="20170509 13:03:57.024"></status>
</kw>
<status status="PASS" starttime="20170509 13:03:57.020" endtime="20170509 13:03:57.024"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:03:57.024">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:03:56.645" endtime="20170509 13:03:57.024"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:03:57.024">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:03:57.024" endtime="20170509 13:03:57.025"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:03:57.025">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170509 13:03:57.025">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170509 13:03:57.025">${content} = {u'data': u'FW Progress, Baseboard Init', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170509 13:03:57.025" endtime="20170509 13:03:57.025"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:03:57.026">${state} = FW Progress, Baseboard Init</msg>
<status status="PASS" starttime="20170509 13:03:56.645" endtime="20170509 13:03:57.026"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:03:57.026">${boot_progress} = FW Progress, Baseboard Init</msg>
<status status="PASS" starttime="20170509 13:03:56.644" endtime="20170509 13:03:57.026"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170509 13:03:57.026">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status status="FAIL" starttime="20170509 13:03:57.026" endtime="20170509 13:03:57.026"></status>
</kw>
<status status="FAIL" starttime="20170509 13:03:56.644" endtime="20170509 13:03:57.027"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:04:07.032">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170509 13:04:07.031" endtime="20170509 13:04:07.032"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:04:07.033">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170509 13:04:07.032" endtime="20170509 13:04:07.033"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:04:07.033">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170509 13:04:07.033" endtime="20170509 13:04:07.033"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:04:07.034">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170509 13:04:07.033" endtime="20170509 13:04:07.034"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:04:07.221">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170509 13:04:07.034" endtime="20170509 13:04:07.221"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:04:07.222">${status} = PASS</msg>
<msg level="INFO" timestamp="20170509 13:04:07.222">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:04:07.034" endtime="20170509 13:04:07.222"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:04:07.222">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:04:07.222" endtime="20170509 13:04:07.222"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:04:07.223">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:04:07.223" endtime="20170509 13:04:07.223"></status>
</kw>
<status status="PASS" starttime="20170509 13:04:07.031" endtime="20170509 13:04:07.223"></status>
</kw>
<status status="PASS" starttime="20170509 13:04:07.030" endtime="20170509 13:04:07.223"></status>
</kw>
<status status="PASS" starttime="20170509 13:04:07.029" endtime="20170509 13:04:07.223"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:04:07.224">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" starttime="20170509 13:04:07.224" endtime="20170509 13:04:07.224"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:04:07.226">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170509 13:04:07.225" endtime="20170509 13:04:07.226"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:04:07.227">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170509 13:04:07.227" endtime="20170509 13:04:07.227"></status>
</kw>
<status status="PASS" starttime="20170509 13:04:07.226" endtime="20170509 13:04:07.227"></status>
</kw>
<status status="PASS" starttime="20170509 13:04:07.225" endtime="20170509 13:04:07.227"></status>
</kw>
<status status="PASS" starttime="20170509 13:04:07.224" endtime="20170509 13:04:07.227"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:04:07.294">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170509 13:04:07.294">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:04:07.227" endtime="20170509 13:04:07.294"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:04:07.296">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170509 13:04:07.295" endtime="20170509 13:04:07.296"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:04:07.297">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170509 13:04:07.297" endtime="20170509 13:04:07.297"></status>
</kw>
<status status="PASS" starttime="20170509 13:04:07.296" endtime="20170509 13:04:07.297"></status>
</kw>
<status status="PASS" starttime="20170509 13:04:07.295" endtime="20170509 13:04:07.297"></status>
</kw>
<status status="PASS" starttime="20170509 13:04:07.294" endtime="20170509 13:04:07.297"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:04:07.297">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:04:07.029" endtime="20170509 13:04:07.297"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:04:07.298">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:04:07.298" endtime="20170509 13:04:07.298"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:04:07.299">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170509 13:04:07.299">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170509 13:04:07.299">${content} = {u'data': u'FW Progress, Baseboard Init', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170509 13:04:07.298" endtime="20170509 13:04:07.299"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:04:07.299">${state} = FW Progress, Baseboard Init</msg>
<status status="PASS" starttime="20170509 13:04:07.028" endtime="20170509 13:04:07.299"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:04:07.299">${boot_progress} = FW Progress, Baseboard Init</msg>
<status status="PASS" starttime="20170509 13:04:07.028" endtime="20170509 13:04:07.299"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170509 13:04:07.300">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status status="FAIL" starttime="20170509 13:04:07.300" endtime="20170509 13:04:07.300"></status>
</kw>
<status status="FAIL" starttime="20170509 13:04:07.027" endtime="20170509 13:04:07.300"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:04:17.305">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170509 13:04:17.304" endtime="20170509 13:04:17.305"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:04:17.306">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170509 13:04:17.305" endtime="20170509 13:04:17.306"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:04:17.306">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170509 13:04:17.306" endtime="20170509 13:04:17.306"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:04:17.307">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170509 13:04:17.307" endtime="20170509 13:04:17.307"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:04:17.496">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170509 13:04:17.308" endtime="20170509 13:04:17.496"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:04:17.496">${status} = PASS</msg>
<msg level="INFO" timestamp="20170509 13:04:17.496">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:04:17.307" endtime="20170509 13:04:17.496"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:04:17.497">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:04:17.496" endtime="20170509 13:04:17.497"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:04:17.498">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:04:17.497" endtime="20170509 13:04:17.498"></status>
</kw>
<status status="PASS" starttime="20170509 13:04:17.304" endtime="20170509 13:04:17.498"></status>
</kw>
<status status="PASS" starttime="20170509 13:04:17.303" endtime="20170509 13:04:17.498"></status>
</kw>
<status status="PASS" starttime="20170509 13:04:17.303" endtime="20170509 13:04:17.498"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:04:17.499">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" starttime="20170509 13:04:17.498" endtime="20170509 13:04:17.499"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:04:17.501">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170509 13:04:17.500" endtime="20170509 13:04:17.501"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:04:17.502">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170509 13:04:17.501" endtime="20170509 13:04:17.502"></status>
</kw>
<status status="PASS" starttime="20170509 13:04:17.501" endtime="20170509 13:04:17.502"></status>
</kw>
<status status="PASS" starttime="20170509 13:04:17.499" endtime="20170509 13:04:17.502"></status>
</kw>
<status status="PASS" starttime="20170509 13:04:17.499" endtime="20170509 13:04:17.502"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:04:17.568">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170509 13:04:17.568">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:04:17.502" endtime="20170509 13:04:17.568"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:04:17.570">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170509 13:04:17.569" endtime="20170509 13:04:17.570"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:04:17.571">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170509 13:04:17.570" endtime="20170509 13:04:17.571"></status>
</kw>
<status status="PASS" starttime="20170509 13:04:17.570" endtime="20170509 13:04:17.571"></status>
</kw>
<status status="PASS" starttime="20170509 13:04:17.569" endtime="20170509 13:04:17.571"></status>
</kw>
<status status="PASS" starttime="20170509 13:04:17.568" endtime="20170509 13:04:17.571"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:04:17.571">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:04:17.302" endtime="20170509 13:04:17.571"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:04:17.572">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:04:17.572" endtime="20170509 13:04:17.572"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:04:17.573">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170509 13:04:17.573">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170509 13:04:17.573">${content} = {u'data': u'FW Progress, Baseboard Init', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170509 13:04:17.572" endtime="20170509 13:04:17.573"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:04:17.573">${state} = FW Progress, Baseboard Init</msg>
<status status="PASS" starttime="20170509 13:04:17.302" endtime="20170509 13:04:17.573"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:04:17.573">${boot_progress} = FW Progress, Baseboard Init</msg>
<status status="PASS" starttime="20170509 13:04:17.301" endtime="20170509 13:04:17.573"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170509 13:04:17.574">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status status="FAIL" starttime="20170509 13:04:17.574" endtime="20170509 13:04:17.574"></status>
</kw>
<status status="FAIL" starttime="20170509 13:04:17.301" endtime="20170509 13:04:17.574"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:04:27.579">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170509 13:04:27.579" endtime="20170509 13:04:27.580"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:04:27.580">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170509 13:04:27.580" endtime="20170509 13:04:27.580"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:04:27.581">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170509 13:04:27.580" endtime="20170509 13:04:27.581"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:04:27.581">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170509 13:04:27.581" endtime="20170509 13:04:27.581"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:04:27.828">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170509 13:04:27.582" endtime="20170509 13:04:27.829"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:04:27.829">${status} = PASS</msg>
<msg level="INFO" timestamp="20170509 13:04:27.829">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:04:27.582" endtime="20170509 13:04:27.829"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:04:27.829">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:04:27.829" endtime="20170509 13:04:27.829"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:04:27.830">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:04:27.830" endtime="20170509 13:04:27.830"></status>
</kw>
<status status="PASS" starttime="20170509 13:04:27.578" endtime="20170509 13:04:27.830"></status>
</kw>
<status status="PASS" starttime="20170509 13:04:27.577" endtime="20170509 13:04:27.830"></status>
</kw>
<status status="PASS" starttime="20170509 13:04:27.577" endtime="20170509 13:04:27.830"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:04:27.831">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" starttime="20170509 13:04:27.831" endtime="20170509 13:04:27.831"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:04:27.833">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170509 13:04:27.832" endtime="20170509 13:04:27.833"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:04:27.834">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170509 13:04:27.834" endtime="20170509 13:04:27.834"></status>
</kw>
<status status="PASS" starttime="20170509 13:04:27.833" endtime="20170509 13:04:27.834"></status>
</kw>
<status status="PASS" starttime="20170509 13:04:27.832" endtime="20170509 13:04:27.834"></status>
</kw>
<status status="PASS" starttime="20170509 13:04:27.831" endtime="20170509 13:04:27.834"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:04:27.923">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170509 13:04:27.923">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:04:27.835" endtime="20170509 13:04:27.923"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:04:27.924">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170509 13:04:27.924" endtime="20170509 13:04:27.924"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:04:27.926">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170509 13:04:27.925" endtime="20170509 13:04:27.926"></status>
</kw>
<status status="PASS" starttime="20170509 13:04:27.925" endtime="20170509 13:04:27.926"></status>
</kw>
<status status="PASS" starttime="20170509 13:04:27.923" endtime="20170509 13:04:27.926"></status>
</kw>
<status status="PASS" starttime="20170509 13:04:27.923" endtime="20170509 13:04:27.926"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:04:27.926">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:04:27.576" endtime="20170509 13:04:27.926"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:04:27.927">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:04:27.927" endtime="20170509 13:04:27.927"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:04:27.928">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170509 13:04:27.928">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170509 13:04:27.928">${content} = {u'data': u'FW Progress, Baseboard Init', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170509 13:04:27.927" endtime="20170509 13:04:27.928"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:04:27.928">${state} = FW Progress, Baseboard Init</msg>
<status status="PASS" starttime="20170509 13:04:27.576" endtime="20170509 13:04:27.928"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:04:27.928">${boot_progress} = FW Progress, Baseboard Init</msg>
<status status="PASS" starttime="20170509 13:04:27.575" endtime="20170509 13:04:27.928"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170509 13:04:27.929">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status status="FAIL" starttime="20170509 13:04:27.928" endtime="20170509 13:04:27.929"></status>
</kw>
<status status="FAIL" starttime="20170509 13:04:27.575" endtime="20170509 13:04:27.929"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:04:37.934">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170509 13:04:37.934" endtime="20170509 13:04:37.935"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:04:37.935">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170509 13:04:37.935" endtime="20170509 13:04:37.935"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:04:37.936">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170509 13:04:37.935" endtime="20170509 13:04:37.936"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:04:37.936">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170509 13:04:37.936" endtime="20170509 13:04:37.936"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:04:38.126">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170509 13:04:37.937" endtime="20170509 13:04:38.126"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:04:38.126">${status} = PASS</msg>
<msg level="INFO" timestamp="20170509 13:04:38.126">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:04:37.937" endtime="20170509 13:04:38.126"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:04:38.127">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:04:38.126" endtime="20170509 13:04:38.127"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:04:38.128">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:04:38.127" endtime="20170509 13:04:38.128"></status>
</kw>
<status status="PASS" starttime="20170509 13:04:37.933" endtime="20170509 13:04:38.128"></status>
</kw>
<status status="PASS" starttime="20170509 13:04:37.933" endtime="20170509 13:04:38.128"></status>
</kw>
<status status="PASS" starttime="20170509 13:04:37.932" endtime="20170509 13:04:38.128"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:04:38.129">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" starttime="20170509 13:04:38.128" endtime="20170509 13:04:38.129"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:04:38.131">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170509 13:04:38.130" endtime="20170509 13:04:38.131"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:04:38.132">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170509 13:04:38.131" endtime="20170509 13:04:38.132"></status>
</kw>
<status status="PASS" starttime="20170509 13:04:38.131" endtime="20170509 13:04:38.132"></status>
</kw>
<status status="PASS" starttime="20170509 13:04:38.129" endtime="20170509 13:04:38.132"></status>
</kw>
<status status="PASS" starttime="20170509 13:04:38.129" endtime="20170509 13:04:38.132"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:04:38.228">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170509 13:04:38.228">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:04:38.132" endtime="20170509 13:04:38.228"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:04:38.230">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170509 13:04:38.229" endtime="20170509 13:04:38.230"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:04:38.231">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170509 13:04:38.230" endtime="20170509 13:04:38.231"></status>
</kw>
<status status="PASS" starttime="20170509 13:04:38.230" endtime="20170509 13:04:38.231"></status>
</kw>
<status status="PASS" starttime="20170509 13:04:38.229" endtime="20170509 13:04:38.231"></status>
</kw>
<status status="PASS" starttime="20170509 13:04:38.228" endtime="20170509 13:04:38.231"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:04:38.231">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:04:37.931" endtime="20170509 13:04:38.231"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:04:38.232">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:04:38.231" endtime="20170509 13:04:38.232"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:04:38.232">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170509 13:04:38.232">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170509 13:04:38.233">${content} = {u'data': u'FW Progress, Baseboard Init', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170509 13:04:38.232" endtime="20170509 13:04:38.233"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:04:38.233">${state} = FW Progress, Baseboard Init</msg>
<status status="PASS" starttime="20170509 13:04:37.931" endtime="20170509 13:04:38.233"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:04:38.233">${boot_progress} = FW Progress, Baseboard Init</msg>
<status status="PASS" starttime="20170509 13:04:37.930" endtime="20170509 13:04:38.233"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170509 13:04:38.234">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status status="FAIL" starttime="20170509 13:04:38.233" endtime="20170509 13:04:38.234"></status>
</kw>
<status status="FAIL" starttime="20170509 13:04:37.930" endtime="20170509 13:04:38.234"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:04:48.241">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170509 13:04:48.240" endtime="20170509 13:04:48.241"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:04:48.242">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170509 13:04:48.242" endtime="20170509 13:04:48.242"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:04:48.243">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170509 13:04:48.243" endtime="20170509 13:04:48.243"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:04:48.244">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170509 13:04:48.244" endtime="20170509 13:04:48.244"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:04:48.501">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170509 13:04:48.245" endtime="20170509 13:04:48.501"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:04:48.501">${status} = PASS</msg>
<msg level="INFO" timestamp="20170509 13:04:48.501">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:04:48.244" endtime="20170509 13:04:48.501"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:04:48.501">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:04:48.501" endtime="20170509 13:04:48.502"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:04:48.502">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:04:48.502" endtime="20170509 13:04:48.502"></status>
</kw>
<status status="PASS" starttime="20170509 13:04:48.238" endtime="20170509 13:04:48.503"></status>
</kw>
<status status="PASS" starttime="20170509 13:04:48.237" endtime="20170509 13:04:48.503"></status>
</kw>
<status status="PASS" starttime="20170509 13:04:48.237" endtime="20170509 13:04:48.503"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:04:48.503">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" starttime="20170509 13:04:48.503" endtime="20170509 13:04:48.503"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:04:48.505">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170509 13:04:48.505" endtime="20170509 13:04:48.505"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:04:48.506">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170509 13:04:48.506" endtime="20170509 13:04:48.506"></status>
</kw>
<status status="PASS" starttime="20170509 13:04:48.506" endtime="20170509 13:04:48.506"></status>
</kw>
<status status="PASS" starttime="20170509 13:04:48.504" endtime="20170509 13:04:48.507"></status>
</kw>
<status status="PASS" starttime="20170509 13:04:48.504" endtime="20170509 13:04:48.507"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:04:48.612">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170509 13:04:48.612">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:04:48.507" endtime="20170509 13:04:48.612"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:04:48.614">${msg} = Response code:200, Content:{
  "data": "FW Progress, Starting OS", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170509 13:04:48.614" endtime="20170509 13:04:48.614"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:04:48.615">Response code:200, Content:{
  "data": "FW Progress, Starting OS", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170509 13:04:48.615" endtime="20170509 13:04:48.615"></status>
</kw>
<status status="PASS" starttime="20170509 13:04:48.614" endtime="20170509 13:04:48.616"></status>
</kw>
<status status="PASS" starttime="20170509 13:04:48.613" endtime="20170509 13:04:48.616"></status>
</kw>
<status status="PASS" starttime="20170509 13:04:48.613" endtime="20170509 13:04:48.616"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:04:48.616">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:04:48.236" endtime="20170509 13:04:48.616"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:04:48.617">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:04:48.616" endtime="20170509 13:04:48.617"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:04:48.617">To JSON using : content={
  "data": "FW Progress, Starting OS", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170509 13:04:48.617">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170509 13:04:48.617">${content} = {u'data': u'FW Progress, Starting OS', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170509 13:04:48.617" endtime="20170509 13:04:48.617"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:04:48.618">${state} = FW Progress, Starting OS</msg>
<status status="PASS" starttime="20170509 13:04:48.235" endtime="20170509 13:04:48.618"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:04:48.618">${boot_progress} = FW Progress, Starting OS</msg>
<status status="PASS" starttime="20170509 13:04:48.235" endtime="20170509 13:04:48.618"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<status status="PASS" starttime="20170509 13:04:48.618" endtime="20170509 13:04:48.618"></status>
</kw>
<status status="PASS" starttime="20170509 13:04:48.235" endtime="20170509 13:04:48.618"></status>
</kw>
<status status="PASS" starttime="20170509 13:03:35.575" endtime="20170509 13:04:48.619"></status>
</kw>
<kw library="utils" name="Flush REST Sessions">
<doc>Removes all the active session objects</doc>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170509 13:04:48.619">Delete All Sessions</msg>
<status status="PASS" starttime="20170509 13:04:48.619" endtime="20170509 13:04:48.621"></status>
</kw>
<status status="PASS" starttime="20170509 13:04:48.619" endtime="20170509 13:04:48.621"></status>
</kw>
<status status="PASS" starttime="20170509 13:02:58.663" endtime="20170509 13:04:48.622"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:04:48.622">Repeating keyword, round 2/2.</msg>
<kw name="Host Off And On">
<doc>Verify power off and on.</doc>
<kw library="state_manager" name="Initiate Host PowerOff">
<doc>Initiate host power off.</doc>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${HOST_POWEROFF_TRANS}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:04:48.623">${args} = {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}</msg>
<status status="PASS" starttime="20170509 13:04:48.623" endtime="20170509 13:04:48.623"></status>
</kw>
<kw library="rest_client" name="Write Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>RequestedHostTransition</arg>
<arg>data=${args}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:04:48.624">${base_uri} = /xyz/openbmc_project/state/host0/</msg>
<status status="PASS" starttime="20170509 13:04:48.624" endtime="20170509 13:04:48.624"></status>
</kw>
<kw library="rest_client" name="OpenBMC Put Request">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:04:48.627">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170509 13:04:48.627" endtime="20170509 13:04:48.627"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:04:48.628">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170509 13:04:48.627" endtime="20170509 13:04:48.628"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:04:48.628">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170509 13:04:48.628" endtime="20170509 13:04:48.628"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:04:48.629">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170509 13:04:48.629" endtime="20170509 13:04:48.629"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:04:48.907">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170509 13:04:48.630" endtime="20170509 13:04:48.907"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:04:48.907">${status} = PASS</msg>
<msg level="INFO" timestamp="20170509 13:04:48.907">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:04:48.629" endtime="20170509 13:04:48.907"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:04:48.908">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:04:48.907" endtime="20170509 13:04:48.908"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:04:48.908">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:04:48.908" endtime="20170509 13:04:48.908"></status>
</kw>
<status status="PASS" starttime="20170509 13:04:48.626" endtime="20170509 13:04:48.908"></status>
</kw>
<status status="PASS" starttime="20170509 13:04:48.626" endtime="20170509 13:04:48.909"></status>
</kw>
<status status="PASS" starttime="20170509 13:04:48.625" endtime="20170509 13:04:48.909"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:04:48.909">${base_uri} = /xyz/openbmc_project/state/host0//attr/RequestedHostTransition</msg>
<status status="PASS" starttime="20170509 13:04:48.909" endtime="20170509 13:04:48.909"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:04:48.910">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170509 13:04:48.910" endtime="20170509 13:04:48.910"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" starttime="20170509 13:04:48.910" endtime="20170509 13:04:48.910"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:04:48.912">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-...</msg>
<status status="PASS" starttime="20170509 13:04:48.911" endtime="20170509 13:04:48.912"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:04:48.913">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20170509 13:04:48.913" endtime="20170509 13:04:48.913"></status>
</kw>
<status status="PASS" starttime="20170509 13:04:48.912" endtime="20170509 13:04:48.913"></status>
</kw>
<status status="PASS" starttime="20170509 13:04:48.911" endtime="20170509 13:04:48.913"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Put Request">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:04:49.112">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, data={"data": "xyz.openbmc_project.State.Host.Transition.Off"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg level="INFO" timestamp="20170509 13:04:49.113">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:04:48.913" endtime="20170509 13:04:49.113"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:04:49.114">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170509 13:04:49.113" endtime="20170509 13:04:49.114"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:04:49.115">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170509 13:04:49.114" endtime="20170509 13:04:49.115"></status>
</kw>
<status status="PASS" starttime="20170509 13:04:49.114" endtime="20170509 13:04:49.115"></status>
</kw>
<status status="PASS" starttime="20170509 13:04:49.113" endtime="20170509 13:04:49.115"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:04:49.115">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:04:48.624" endtime="20170509 13:04:49.115"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:04:49.116">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:04:49.115" endtime="20170509 13:04:49.116"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:04:49.116">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170509 13:04:49.116">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170509 13:04:49.117">${json} = {u'data': None, u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170509 13:04:49.116" endtime="20170509 13:04:49.117"></status>
</kw>
<status status="PASS" starttime="20170509 13:04:48.623" endtime="20170509 13:04:49.117"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${wait}' == '${0}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<status status="PASS" starttime="20170509 13:04:49.117" endtime="20170509 13:04:49.117"></status>
</kw>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>3 min</arg>
<arg>10 sec</arg>
<arg>Is Host Off</arg>
</arguments>
<kw library="state_manager" name="Is Host Off">
<doc>Check if host state is "Off".</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:04:49.122">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170509 13:04:49.121" endtime="20170509 13:04:49.122"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:04:49.123">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170509 13:04:49.122" endtime="20170509 13:04:49.123"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:04:49.123">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170509 13:04:49.123" endtime="20170509 13:04:49.123"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:04:49.124">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170509 13:04:49.124" endtime="20170509 13:04:49.124"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:04:50.047">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170509 13:04:49.125" endtime="20170509 13:04:50.047"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:04:50.047">${status} = PASS</msg>
<msg level="INFO" timestamp="20170509 13:04:50.047">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:04:49.124" endtime="20170509 13:04:50.047"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:04:50.048">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:04:50.047" endtime="20170509 13:04:50.048"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:04:50.049">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:04:50.048" endtime="20170509 13:04:50.049"></status>
</kw>
<status status="PASS" starttime="20170509 13:04:49.121" endtime="20170509 13:04:50.049"></status>
</kw>
<status status="PASS" starttime="20170509 13:04:49.120" endtime="20170509 13:04:50.049"></status>
</kw>
<status status="PASS" starttime="20170509 13:04:49.120" endtime="20170509 13:04:50.049"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:04:50.050">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" starttime="20170509 13:04:50.049" endtime="20170509 13:04:50.050"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:04:50.053">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170509 13:04:50.052" endtime="20170509 13:04:50.053"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:04:50.054">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170509 13:04:50.054" endtime="20170509 13:04:50.054"></status>
</kw>
<status status="PASS" starttime="20170509 13:04:50.053" endtime="20170509 13:04:50.054"></status>
</kw>
<status status="PASS" starttime="20170509 13:04:50.051" endtime="20170509 13:04:50.054"></status>
</kw>
<status status="PASS" starttime="20170509 13:04:50.050" endtime="20170509 13:04:50.055"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:04:50.505">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170509 13:04:50.505">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:04:50.055" endtime="20170509 13:04:50.505"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:04:50.507">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170509 13:04:50.506" endtime="20170509 13:04:50.507"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:04:50.508">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170509 13:04:50.508" endtime="20170509 13:04:50.508"></status>
</kw>
<status status="PASS" starttime="20170509 13:04:50.507" endtime="20170509 13:04:50.508"></status>
</kw>
<status status="PASS" starttime="20170509 13:04:50.506" endtime="20170509 13:04:50.508"></status>
</kw>
<status status="PASS" starttime="20170509 13:04:50.505" endtime="20170509 13:04:50.508"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:04:50.508">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:04:49.119" endtime="20170509 13:04:50.509"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:04:50.509">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:04:50.509" endtime="20170509 13:04:50.509"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:04:50.510">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170509 13:04:50.510">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170509 13:04:50.510">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170509 13:04:50.509" endtime="20170509 13:04:50.510"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:04:50.510">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" starttime="20170509 13:04:49.119" endtime="20170509 13:04:50.510"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:04:50.511">${host_state} = Running</msg>
<status status="PASS" starttime="20170509 13:04:49.118" endtime="20170509 13:04:50.511"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170509 13:04:50.511">Off != Running</msg>
<status status="FAIL" starttime="20170509 13:04:50.511" endtime="20170509 13:04:50.511"></status>
</kw>
<status status="FAIL" starttime="20170509 13:04:49.118" endtime="20170509 13:04:50.511"></status>
</kw>
<kw library="state_manager" name="Is Host Off">
<doc>Check if host state is "Off".</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:05:00.518">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170509 13:05:00.517" endtime="20170509 13:05:00.518"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:05:00.519">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170509 13:05:00.519" endtime="20170509 13:05:00.519"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:05:00.520">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170509 13:05:00.519" endtime="20170509 13:05:00.520"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:05:00.521">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170509 13:05:00.520" endtime="20170509 13:05:00.521"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:05:00.716">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170509 13:05:00.522" endtime="20170509 13:05:00.716"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:05:00.716">${status} = PASS</msg>
<msg level="INFO" timestamp="20170509 13:05:00.717">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:05:00.521" endtime="20170509 13:05:00.717"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:05:00.717">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:05:00.717" endtime="20170509 13:05:00.717"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:05:00.718">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:05:00.717" endtime="20170509 13:05:00.718"></status>
</kw>
<status status="PASS" starttime="20170509 13:05:00.516" endtime="20170509 13:05:00.718"></status>
</kw>
<status status="PASS" starttime="20170509 13:05:00.516" endtime="20170509 13:05:00.719"></status>
</kw>
<status status="PASS" starttime="20170509 13:05:00.515" endtime="20170509 13:05:00.719"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:05:00.719">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" starttime="20170509 13:05:00.719" endtime="20170509 13:05:00.719"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:05:00.721">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170509 13:05:00.721" endtime="20170509 13:05:00.721"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:05:00.722">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170509 13:05:00.722" endtime="20170509 13:05:00.722"></status>
</kw>
<status status="PASS" starttime="20170509 13:05:00.721" endtime="20170509 13:05:00.722"></status>
</kw>
<status status="PASS" starttime="20170509 13:05:00.720" endtime="20170509 13:05:00.723"></status>
</kw>
<status status="PASS" starttime="20170509 13:05:00.719" endtime="20170509 13:05:00.723"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:05:00.788">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170509 13:05:00.788">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:05:00.723" endtime="20170509 13:05:00.788"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:05:00.790">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170509 13:05:00.789" endtime="20170509 13:05:00.790"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:05:00.791">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170509 13:05:00.790" endtime="20170509 13:05:00.791"></status>
</kw>
<status status="PASS" starttime="20170509 13:05:00.790" endtime="20170509 13:05:00.791"></status>
</kw>
<status status="PASS" starttime="20170509 13:05:00.789" endtime="20170509 13:05:00.791"></status>
</kw>
<status status="PASS" starttime="20170509 13:05:00.788" endtime="20170509 13:05:00.791"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:05:00.791">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:05:00.514" endtime="20170509 13:05:00.791"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:05:00.792">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:05:00.792" endtime="20170509 13:05:00.792"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:05:00.792">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170509 13:05:00.793">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170509 13:05:00.793">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170509 13:05:00.792" endtime="20170509 13:05:00.793"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:05:00.793">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status status="PASS" starttime="20170509 13:05:00.513" endtime="20170509 13:05:00.793"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:05:00.793">${host_state} = Off</msg>
<status status="PASS" starttime="20170509 13:05:00.513" endtime="20170509 13:05:00.793"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<status status="PASS" starttime="20170509 13:05:00.794" endtime="20170509 13:05:00.794"></status>
</kw>
<status status="PASS" starttime="20170509 13:05:00.512" endtime="20170509 13:05:00.794"></status>
</kw>
<status status="PASS" starttime="20170509 13:04:49.117" endtime="20170509 13:05:00.794"></status>
</kw>
<status status="PASS" starttime="20170509 13:04:48.622" endtime="20170509 13:05:00.794"></status>
</kw>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>5 min</arg>
<arg>10 sec</arg>
<arg>Is OS Off</arg>
</arguments>
<kw library="utils" name="Is OS Off">
<doc>Check if boot progress is "Off".</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:05:00.799">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170509 13:05:00.798" endtime="20170509 13:05:00.799"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:05:00.800">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170509 13:05:00.799" endtime="20170509 13:05:00.800"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:05:00.800">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170509 13:05:00.800" endtime="20170509 13:05:00.800"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:05:00.801">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170509 13:05:00.801" endtime="20170509 13:05:00.801"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:05:01.006">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170509 13:05:00.802" endtime="20170509 13:05:01.006"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:05:01.006">${status} = PASS</msg>
<msg level="INFO" timestamp="20170509 13:05:01.006">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:05:00.801" endtime="20170509 13:05:01.006"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:05:01.007">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:05:01.007" endtime="20170509 13:05:01.007"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:05:01.008">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:05:01.008" endtime="20170509 13:05:01.008"></status>
</kw>
<status status="PASS" starttime="20170509 13:05:00.798" endtime="20170509 13:05:01.008"></status>
</kw>
<status status="PASS" starttime="20170509 13:05:00.797" endtime="20170509 13:05:01.008"></status>
</kw>
<status status="PASS" starttime="20170509 13:05:00.797" endtime="20170509 13:05:01.008"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:05:01.009">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" starttime="20170509 13:05:01.009" endtime="20170509 13:05:01.009"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:05:01.011">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170509 13:05:01.010" endtime="20170509 13:05:01.011"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:05:01.012">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170509 13:05:01.012" endtime="20170509 13:05:01.012"></status>
</kw>
<status status="PASS" starttime="20170509 13:05:01.011" endtime="20170509 13:05:01.012"></status>
</kw>
<status status="PASS" starttime="20170509 13:05:01.010" endtime="20170509 13:05:01.012"></status>
</kw>
<status status="PASS" starttime="20170509 13:05:01.009" endtime="20170509 13:05:01.012"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:05:01.079">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170509 13:05:01.080">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:05:01.012" endtime="20170509 13:05:01.080"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:05:01.081">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170509 13:05:01.081" endtime="20170509 13:05:01.082"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:05:01.082">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170509 13:05:01.082" endtime="20170509 13:05:01.083"></status>
</kw>
<status status="PASS" starttime="20170509 13:05:01.082" endtime="20170509 13:05:01.083"></status>
</kw>
<status status="PASS" starttime="20170509 13:05:01.081" endtime="20170509 13:05:01.083"></status>
</kw>
<status status="PASS" starttime="20170509 13:05:01.080" endtime="20170509 13:05:01.083"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:05:01.083">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:05:00.796" endtime="20170509 13:05:01.083"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:05:01.084">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:05:01.083" endtime="20170509 13:05:01.084"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:05:01.084">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170509 13:05:01.084">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170509 13:05:01.085">${content} = {u'data': u'Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170509 13:05:01.084" endtime="20170509 13:05:01.085"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:05:01.085">${state} = Off</msg>
<status status="PASS" starttime="20170509 13:05:00.796" endtime="20170509 13:05:01.085"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:05:01.085">${boot_progress} = Off</msg>
<status status="PASS" starttime="20170509 13:05:00.795" endtime="20170509 13:05:01.085"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>Off</arg>
</arguments>
<status status="PASS" starttime="20170509 13:05:01.085" endtime="20170509 13:05:01.086"></status>
</kw>
<status status="PASS" starttime="20170509 13:05:00.795" endtime="20170509 13:05:01.086"></status>
</kw>
<status status="PASS" starttime="20170509 13:05:00.794" endtime="20170509 13:05:01.086"></status>
</kw>
<kw library="state_manager" name="Initiate Host Boot">
<doc>Initiate host power on.</doc>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${HOST_POWERON_TRANS}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:05:01.087">${args} = {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}</msg>
<status status="PASS" starttime="20170509 13:05:01.086" endtime="20170509 13:05:01.087"></status>
</kw>
<kw library="rest_client" name="Write Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>RequestedHostTransition</arg>
<arg>data=${args}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:05:01.088">${base_uri} = /xyz/openbmc_project/state/host0/</msg>
<status status="PASS" starttime="20170509 13:05:01.088" endtime="20170509 13:05:01.089"></status>
</kw>
<kw library="rest_client" name="OpenBMC Put Request">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:05:01.091">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170509 13:05:01.091" endtime="20170509 13:05:01.092"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:05:01.092">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170509 13:05:01.092" endtime="20170509 13:05:01.092"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:05:01.093">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170509 13:05:01.093" endtime="20170509 13:05:01.093"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:05:01.094">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170509 13:05:01.093" endtime="20170509 13:05:01.094"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:05:01.285">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170509 13:05:01.095" endtime="20170509 13:05:01.285"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:05:01.285">${status} = PASS</msg>
<msg level="INFO" timestamp="20170509 13:05:01.285">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:05:01.094" endtime="20170509 13:05:01.285"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:05:01.286">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:05:01.285" endtime="20170509 13:05:01.286"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:05:01.286">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:05:01.286" endtime="20170509 13:05:01.286"></status>
</kw>
<status status="PASS" starttime="20170509 13:05:01.090" endtime="20170509 13:05:01.287"></status>
</kw>
<status status="PASS" starttime="20170509 13:05:01.090" endtime="20170509 13:05:01.287"></status>
</kw>
<status status="PASS" starttime="20170509 13:05:01.089" endtime="20170509 13:05:01.287"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:05:01.287">${base_uri} = /xyz/openbmc_project/state/host0//attr/RequestedHostTransition</msg>
<status status="PASS" starttime="20170509 13:05:01.287" endtime="20170509 13:05:01.287"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:05:01.288">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170509 13:05:01.288" endtime="20170509 13:05:01.288"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" starttime="20170509 13:05:01.288" endtime="20170509 13:05:01.289"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:05:01.290">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}, u'headers': {u'Content-T...</msg>
<status status="PASS" starttime="20170509 13:05:01.289" endtime="20170509 13:05:01.290"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:05:01.291">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20170509 13:05:01.291" endtime="20170509 13:05:01.291"></status>
</kw>
<status status="PASS" starttime="20170509 13:05:01.290" endtime="20170509 13:05:01.292"></status>
</kw>
<status status="PASS" starttime="20170509 13:05:01.289" endtime="20170509 13:05:01.292"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Put Request">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:05:01.519">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, data={"data": "xyz.openbmc_project.State.Host.Transition.On"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg level="INFO" timestamp="20170509 13:05:01.520">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:05:01.292" endtime="20170509 13:05:01.520"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:05:01.521">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170509 13:05:01.520" endtime="20170509 13:05:01.521"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:05:01.522">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170509 13:05:01.522" endtime="20170509 13:05:01.522"></status>
</kw>
<status status="PASS" starttime="20170509 13:05:01.521" endtime="20170509 13:05:01.522"></status>
</kw>
<status status="PASS" starttime="20170509 13:05:01.520" endtime="20170509 13:05:01.522"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:05:01.522">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:05:01.089" endtime="20170509 13:05:01.522"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:05:01.523">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:05:01.523" endtime="20170509 13:05:01.523"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:05:01.524">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170509 13:05:01.524">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170509 13:05:01.524">${json} = {u'data': None, u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170509 13:05:01.523" endtime="20170509 13:05:01.524"></status>
</kw>
<status status="PASS" starttime="20170509 13:05:01.087" endtime="20170509 13:05:01.524"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${wait}' == '${0}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<status status="PASS" starttime="20170509 13:05:01.524" endtime="20170509 13:05:01.525"></status>
</kw>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>10 min</arg>
<arg>10 sec</arg>
<arg>Is Host Running</arg>
</arguments>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:05:01.530">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170509 13:05:01.530" endtime="20170509 13:05:01.531"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:05:01.531">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170509 13:05:01.531" endtime="20170509 13:05:01.531"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:05:01.532">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170509 13:05:01.531" endtime="20170509 13:05:01.532"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:05:01.533">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170509 13:05:01.532" endtime="20170509 13:05:01.533"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:05:02.460">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170509 13:05:01.533" endtime="20170509 13:05:02.461"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:05:02.461">${status} = PASS</msg>
<msg level="INFO" timestamp="20170509 13:05:02.461">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:05:01.533" endtime="20170509 13:05:02.461"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:05:02.462">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:05:02.461" endtime="20170509 13:05:02.462"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:05:02.462">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:05:02.462" endtime="20170509 13:05:02.462"></status>
</kw>
<status status="PASS" starttime="20170509 13:05:01.529" endtime="20170509 13:05:02.462"></status>
</kw>
<status status="PASS" starttime="20170509 13:05:01.529" endtime="20170509 13:05:02.463"></status>
</kw>
<status status="PASS" starttime="20170509 13:05:01.528" endtime="20170509 13:05:02.463"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:05:02.463">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" starttime="20170509 13:05:02.463" endtime="20170509 13:05:02.463"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:05:02.465">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170509 13:05:02.465" endtime="20170509 13:05:02.465"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:05:02.466">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170509 13:05:02.466" endtime="20170509 13:05:02.466"></status>
</kw>
<status status="PASS" starttime="20170509 13:05:02.466" endtime="20170509 13:05:02.467"></status>
</kw>
<status status="PASS" starttime="20170509 13:05:02.464" endtime="20170509 13:05:02.467"></status>
</kw>
<status status="PASS" starttime="20170509 13:05:02.464" endtime="20170509 13:05:02.467"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:05:02.828">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170509 13:05:02.828">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:05:02.467" endtime="20170509 13:05:02.828"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:05:02.830">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170509 13:05:02.830" endtime="20170509 13:05:02.830"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:05:02.831">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170509 13:05:02.831" endtime="20170509 13:05:02.831"></status>
</kw>
<status status="PASS" starttime="20170509 13:05:02.830" endtime="20170509 13:05:02.832"></status>
</kw>
<status status="PASS" starttime="20170509 13:05:02.829" endtime="20170509 13:05:02.832"></status>
</kw>
<status status="PASS" starttime="20170509 13:05:02.829" endtime="20170509 13:05:02.832"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:05:02.832">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:05:01.527" endtime="20170509 13:05:02.832"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:05:02.833">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:05:02.832" endtime="20170509 13:05:02.833"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:05:02.834">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170509 13:05:02.834">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170509 13:05:02.834">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170509 13:05:02.833" endtime="20170509 13:05:02.834"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:05:02.834">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status status="PASS" starttime="20170509 13:05:01.526" endtime="20170509 13:05:02.834"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:05:02.835">${host_state} = Off</msg>
<status status="PASS" starttime="20170509 13:05:01.526" endtime="20170509 13:05:02.835"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170509 13:05:02.836">Running != Off</msg>
<status status="FAIL" starttime="20170509 13:05:02.835" endtime="20170509 13:05:02.836"></status>
</kw>
<status status="FAIL" starttime="20170509 13:05:01.525" endtime="20170509 13:05:02.836"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:05:12.841">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170509 13:05:12.841" endtime="20170509 13:05:12.842"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:05:12.842">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170509 13:05:12.842" endtime="20170509 13:05:12.842"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:05:12.843">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170509 13:05:12.842" endtime="20170509 13:05:12.843"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:05:12.844">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170509 13:05:12.843" endtime="20170509 13:05:12.844"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:05:15.278">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170509 13:05:12.844" endtime="20170509 13:05:15.278"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:05:15.279">${status} = PASS</msg>
<msg level="INFO" timestamp="20170509 13:05:15.279">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:05:12.844" endtime="20170509 13:05:15.279"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:05:15.279">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:05:15.279" endtime="20170509 13:05:15.279"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:05:15.280">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:05:15.280" endtime="20170509 13:05:15.280"></status>
</kw>
<status status="PASS" starttime="20170509 13:05:12.840" endtime="20170509 13:05:15.280"></status>
</kw>
<status status="PASS" starttime="20170509 13:05:12.840" endtime="20170509 13:05:15.280"></status>
</kw>
<status status="PASS" starttime="20170509 13:05:12.839" endtime="20170509 13:05:15.281"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:05:15.282">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" starttime="20170509 13:05:15.281" endtime="20170509 13:05:15.282"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:05:15.284">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170509 13:05:15.283" endtime="20170509 13:05:15.284"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:05:15.285">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170509 13:05:15.285" endtime="20170509 13:05:15.285"></status>
</kw>
<status status="PASS" starttime="20170509 13:05:15.284" endtime="20170509 13:05:15.285"></status>
</kw>
<status status="PASS" starttime="20170509 13:05:15.283" endtime="20170509 13:05:15.285"></status>
</kw>
<status status="PASS" starttime="20170509 13:05:15.282" endtime="20170509 13:05:15.285"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:05:15.656">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170509 13:05:15.656">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:05:15.286" endtime="20170509 13:05:15.656"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:05:15.658">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170509 13:05:15.658" endtime="20170509 13:05:15.659"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:05:15.659">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170509 13:05:15.659" endtime="20170509 13:05:15.660"></status>
</kw>
<status status="PASS" starttime="20170509 13:05:15.659" endtime="20170509 13:05:15.660"></status>
</kw>
<status status="PASS" starttime="20170509 13:05:15.657" endtime="20170509 13:05:15.660"></status>
</kw>
<status status="PASS" starttime="20170509 13:05:15.656" endtime="20170509 13:05:15.660"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:05:15.660">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:05:12.838" endtime="20170509 13:05:15.660"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:05:15.661">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:05:15.660" endtime="20170509 13:05:15.661"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:05:15.661">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170509 13:05:15.661">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170509 13:05:15.661">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170509 13:05:15.661" endtime="20170509 13:05:15.661"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:05:15.662">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status status="PASS" starttime="20170509 13:05:12.838" endtime="20170509 13:05:15.662"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:05:15.662">${host_state} = Off</msg>
<status status="PASS" starttime="20170509 13:05:12.837" endtime="20170509 13:05:15.662"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170509 13:05:15.663">Running != Off</msg>
<status status="FAIL" starttime="20170509 13:05:15.662" endtime="20170509 13:05:15.663"></status>
</kw>
<status status="FAIL" starttime="20170509 13:05:12.837" endtime="20170509 13:05:15.663"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:05:25.669">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170509 13:05:25.669" endtime="20170509 13:05:25.670"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:05:25.670">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170509 13:05:25.670" endtime="20170509 13:05:25.670"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:05:25.671">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170509 13:05:25.671" endtime="20170509 13:05:25.671"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:05:25.672">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170509 13:05:25.671" endtime="20170509 13:05:25.672"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:05:25.865">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170509 13:05:25.673" endtime="20170509 13:05:25.865"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:05:25.865">${status} = PASS</msg>
<msg level="INFO" timestamp="20170509 13:05:25.865">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:05:25.672" endtime="20170509 13:05:25.865"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:05:25.866">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:05:25.866" endtime="20170509 13:05:25.866"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:05:25.867">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:05:25.866" endtime="20170509 13:05:25.867"></status>
</kw>
<status status="PASS" starttime="20170509 13:05:25.668" endtime="20170509 13:05:25.867"></status>
</kw>
<status status="PASS" starttime="20170509 13:05:25.668" endtime="20170509 13:05:25.867"></status>
</kw>
<status status="PASS" starttime="20170509 13:05:25.667" endtime="20170509 13:05:25.867"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:05:25.868">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" starttime="20170509 13:05:25.867" endtime="20170509 13:05:25.868"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:05:25.870">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170509 13:05:25.869" endtime="20170509 13:05:25.870"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:05:25.871">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170509 13:05:25.870" endtime="20170509 13:05:25.871"></status>
</kw>
<status status="PASS" starttime="20170509 13:05:25.870" endtime="20170509 13:05:25.871"></status>
</kw>
<status status="PASS" starttime="20170509 13:05:25.868" endtime="20170509 13:05:25.871"></status>
</kw>
<status status="PASS" starttime="20170509 13:05:25.868" endtime="20170509 13:05:25.871"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:05:25.978">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170509 13:05:25.978">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:05:25.871" endtime="20170509 13:05:25.978"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:05:25.980">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170509 13:05:25.979" endtime="20170509 13:05:25.980"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:05:25.981">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170509 13:05:25.981" endtime="20170509 13:05:25.981"></status>
</kw>
<status status="PASS" starttime="20170509 13:05:25.980" endtime="20170509 13:05:25.981"></status>
</kw>
<status status="PASS" starttime="20170509 13:05:25.979" endtime="20170509 13:05:25.981"></status>
</kw>
<status status="PASS" starttime="20170509 13:05:25.979" endtime="20170509 13:05:25.981"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:05:25.982">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:05:25.667" endtime="20170509 13:05:25.982"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:05:25.982">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:05:25.982" endtime="20170509 13:05:25.982"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:05:25.983">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170509 13:05:25.983">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170509 13:05:25.983">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170509 13:05:25.982" endtime="20170509 13:05:25.983"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:05:25.983">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" starttime="20170509 13:05:25.664" endtime="20170509 13:05:25.983"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:05:25.984">${host_state} = Running</msg>
<status status="PASS" starttime="20170509 13:05:25.664" endtime="20170509 13:05:25.984"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status status="PASS" starttime="20170509 13:05:25.984" endtime="20170509 13:05:25.984"></status>
</kw>
<status status="PASS" starttime="20170509 13:05:25.663" endtime="20170509 13:05:25.984"></status>
</kw>
<status status="PASS" starttime="20170509 13:05:01.525" endtime="20170509 13:05:25.984"></status>
</kw>
<status status="PASS" starttime="20170509 13:05:01.086" endtime="20170509 13:05:25.984"></status>
</kw>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>10 min</arg>
<arg>10 sec</arg>
<arg>Is OS Starting</arg>
</arguments>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:05:26.016">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170509 13:05:25.988" endtime="20170509 13:05:26.016"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:05:26.017">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170509 13:05:26.017" endtime="20170509 13:05:26.017"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:05:26.018">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170509 13:05:26.018" endtime="20170509 13:05:26.018"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:05:26.019">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170509 13:05:26.019" endtime="20170509 13:05:26.019"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:05:26.208">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170509 13:05:26.020" endtime="20170509 13:05:26.208"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:05:26.208">${status} = PASS</msg>
<msg level="INFO" timestamp="20170509 13:05:26.208">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:05:26.020" endtime="20170509 13:05:26.208"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:05:26.209">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:05:26.209" endtime="20170509 13:05:26.209"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:05:26.210">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:05:26.209" endtime="20170509 13:05:26.210"></status>
</kw>
<status status="PASS" starttime="20170509 13:05:25.988" endtime="20170509 13:05:26.210"></status>
</kw>
<status status="PASS" starttime="20170509 13:05:25.987" endtime="20170509 13:05:26.210"></status>
</kw>
<status status="PASS" starttime="20170509 13:05:25.987" endtime="20170509 13:05:26.210"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:05:26.211">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" starttime="20170509 13:05:26.210" endtime="20170509 13:05:26.211"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:05:26.213">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170509 13:05:26.212" endtime="20170509 13:05:26.213"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:05:26.213">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170509 13:05:26.213" endtime="20170509 13:05:26.214"></status>
</kw>
<status status="PASS" starttime="20170509 13:05:26.213" endtime="20170509 13:05:26.214"></status>
</kw>
<status status="PASS" starttime="20170509 13:05:26.211" endtime="20170509 13:05:26.214"></status>
</kw>
<status status="PASS" starttime="20170509 13:05:26.211" endtime="20170509 13:05:26.214"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:05:26.282">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170509 13:05:26.282">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:05:26.214" endtime="20170509 13:05:26.282"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:05:26.284">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170509 13:05:26.283" endtime="20170509 13:05:26.284"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:05:26.285">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170509 13:05:26.285" endtime="20170509 13:05:26.285"></status>
</kw>
<status status="PASS" starttime="20170509 13:05:26.284" endtime="20170509 13:05:26.285"></status>
</kw>
<status status="PASS" starttime="20170509 13:05:26.283" endtime="20170509 13:05:26.285"></status>
</kw>
<status status="PASS" starttime="20170509 13:05:26.282" endtime="20170509 13:05:26.285"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:05:26.285">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:05:25.986" endtime="20170509 13:05:26.285"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:05:26.286">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:05:26.286" endtime="20170509 13:05:26.286"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:05:26.287">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170509 13:05:26.287">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170509 13:05:26.287">${content} = {u'data': u'Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170509 13:05:26.286" endtime="20170509 13:05:26.287"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:05:26.287">${state} = Off</msg>
<status status="PASS" starttime="20170509 13:05:25.986" endtime="20170509 13:05:26.287"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:05:26.287">${boot_progress} = Off</msg>
<status status="PASS" starttime="20170509 13:05:25.985" endtime="20170509 13:05:26.287"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170509 13:05:26.288">Off != FW Progress, Starting OS</msg>
<status status="FAIL" starttime="20170509 13:05:26.288" endtime="20170509 13:05:26.288"></status>
</kw>
<status status="FAIL" starttime="20170509 13:05:25.985" endtime="20170509 13:05:26.288"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:05:36.293">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170509 13:05:36.293" endtime="20170509 13:05:36.294"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:05:36.294">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170509 13:05:36.294" endtime="20170509 13:05:36.294"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:05:36.295">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170509 13:05:36.295" endtime="20170509 13:05:36.295"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:05:36.296">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170509 13:05:36.295" endtime="20170509 13:05:36.296"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:05:36.510">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170509 13:05:36.296" endtime="20170509 13:05:36.510"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:05:36.510">${status} = PASS</msg>
<msg level="INFO" timestamp="20170509 13:05:36.510">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:05:36.296" endtime="20170509 13:05:36.510"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:05:36.511">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:05:36.511" endtime="20170509 13:05:36.511"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:05:36.512">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:05:36.512" endtime="20170509 13:05:36.512"></status>
</kw>
<status status="PASS" starttime="20170509 13:05:36.292" endtime="20170509 13:05:36.512"></status>
</kw>
<status status="PASS" starttime="20170509 13:05:36.292" endtime="20170509 13:05:36.512"></status>
</kw>
<status status="PASS" starttime="20170509 13:05:36.291" endtime="20170509 13:05:36.512"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:05:36.513">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" starttime="20170509 13:05:36.513" endtime="20170509 13:05:36.513"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:05:36.516">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170509 13:05:36.515" endtime="20170509 13:05:36.516"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:05:36.517">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170509 13:05:36.516" endtime="20170509 13:05:36.517"></status>
</kw>
<status status="PASS" starttime="20170509 13:05:36.516" endtime="20170509 13:05:36.517"></status>
</kw>
<status status="PASS" starttime="20170509 13:05:36.514" endtime="20170509 13:05:36.517"></status>
</kw>
<status status="PASS" starttime="20170509 13:05:36.513" endtime="20170509 13:05:36.517"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:05:36.600">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170509 13:05:36.600">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:05:36.517" endtime="20170509 13:05:36.600"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:05:36.602">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170509 13:05:36.602" endtime="20170509 13:05:36.602"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:05:36.603">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170509 13:05:36.603" endtime="20170509 13:05:36.603"></status>
</kw>
<status status="PASS" starttime="20170509 13:05:36.602" endtime="20170509 13:05:36.603"></status>
</kw>
<status status="PASS" starttime="20170509 13:05:36.601" endtime="20170509 13:05:36.603"></status>
</kw>
<status status="PASS" starttime="20170509 13:05:36.601" endtime="20170509 13:05:36.603"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:05:36.604">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:05:36.290" endtime="20170509 13:05:36.604"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:05:36.604">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:05:36.604" endtime="20170509 13:05:36.604"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:05:36.605">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170509 13:05:36.605">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170509 13:05:36.605">${content} = {u'data': u'Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170509 13:05:36.605" endtime="20170509 13:05:36.605"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:05:36.605">${state} = Off</msg>
<status status="PASS" starttime="20170509 13:05:36.290" endtime="20170509 13:05:36.605"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:05:36.606">${boot_progress} = Off</msg>
<status status="PASS" starttime="20170509 13:05:36.289" endtime="20170509 13:05:36.606"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170509 13:05:36.606">Off != FW Progress, Starting OS</msg>
<status status="FAIL" starttime="20170509 13:05:36.606" endtime="20170509 13:05:36.607"></status>
</kw>
<status status="FAIL" starttime="20170509 13:05:36.289" endtime="20170509 13:05:36.607"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:05:46.612">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170509 13:05:46.612" endtime="20170509 13:05:46.613"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:05:46.614">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170509 13:05:46.613" endtime="20170509 13:05:46.614"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:05:46.614">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170509 13:05:46.614" endtime="20170509 13:05:46.614"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:05:46.615">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170509 13:05:46.614" endtime="20170509 13:05:46.615"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:05:47.178">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170509 13:05:46.616" endtime="20170509 13:05:47.179"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:05:47.179">${status} = PASS</msg>
<msg level="INFO" timestamp="20170509 13:05:47.179">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:05:46.615" endtime="20170509 13:05:47.179"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:05:47.179">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:05:47.179" endtime="20170509 13:05:47.179"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:05:47.180">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:05:47.180" endtime="20170509 13:05:47.180"></status>
</kw>
<status status="PASS" starttime="20170509 13:05:46.611" endtime="20170509 13:05:47.180"></status>
</kw>
<status status="PASS" starttime="20170509 13:05:46.611" endtime="20170509 13:05:47.181"></status>
</kw>
<status status="PASS" starttime="20170509 13:05:46.610" endtime="20170509 13:05:47.181"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:05:47.181">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" starttime="20170509 13:05:47.181" endtime="20170509 13:05:47.181"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:05:47.183">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170509 13:05:47.183" endtime="20170509 13:05:47.183"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:05:47.184">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170509 13:05:47.184" endtime="20170509 13:05:47.184"></status>
</kw>
<status status="PASS" starttime="20170509 13:05:47.183" endtime="20170509 13:05:47.184"></status>
</kw>
<status status="PASS" starttime="20170509 13:05:47.182" endtime="20170509 13:05:47.184"></status>
</kw>
<status status="PASS" starttime="20170509 13:05:47.181" endtime="20170509 13:05:47.185"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:05:47.359">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170509 13:05:47.360">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:05:47.185" endtime="20170509 13:05:47.360"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:05:47.362">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170509 13:05:47.361" endtime="20170509 13:05:47.362"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:05:47.363">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170509 13:05:47.362" endtime="20170509 13:05:47.363"></status>
</kw>
<status status="PASS" starttime="20170509 13:05:47.362" endtime="20170509 13:05:47.363"></status>
</kw>
<status status="PASS" starttime="20170509 13:05:47.360" endtime="20170509 13:05:47.363"></status>
</kw>
<status status="PASS" starttime="20170509 13:05:47.360" endtime="20170509 13:05:47.363"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:05:47.363">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:05:46.609" endtime="20170509 13:05:47.363"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:05:47.364">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:05:47.363" endtime="20170509 13:05:47.364"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:05:47.364">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170509 13:05:47.364">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170509 13:05:47.365">${content} = {u'data': u'FW Progress, Baseboard Init', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170509 13:05:47.364" endtime="20170509 13:05:47.365"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:05:47.365">${state} = FW Progress, Baseboard Init</msg>
<status status="PASS" starttime="20170509 13:05:46.609" endtime="20170509 13:05:47.365"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:05:47.365">${boot_progress} = FW Progress, Baseboard Init</msg>
<status status="PASS" starttime="20170509 13:05:46.608" endtime="20170509 13:05:47.365"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170509 13:05:47.366">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status status="FAIL" starttime="20170509 13:05:47.365" endtime="20170509 13:05:47.366"></status>
</kw>
<status status="FAIL" starttime="20170509 13:05:46.608" endtime="20170509 13:05:47.366"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:05:57.371">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170509 13:05:57.371" endtime="20170509 13:05:57.371"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:05:57.372">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170509 13:05:57.372" endtime="20170509 13:05:57.372"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:05:57.373">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170509 13:05:57.372" endtime="20170509 13:05:57.373"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:05:57.373">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170509 13:05:57.373" endtime="20170509 13:05:57.373"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:05:57.560">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170509 13:05:57.374" endtime="20170509 13:05:57.560"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:05:57.560">${status} = PASS</msg>
<msg level="INFO" timestamp="20170509 13:05:57.560">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:05:57.373" endtime="20170509 13:05:57.560"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:05:57.561">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:05:57.560" endtime="20170509 13:05:57.561"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:05:57.562">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:05:57.561" endtime="20170509 13:05:57.562"></status>
</kw>
<status status="PASS" starttime="20170509 13:05:57.370" endtime="20170509 13:05:57.562"></status>
</kw>
<status status="PASS" starttime="20170509 13:05:57.370" endtime="20170509 13:05:57.562"></status>
</kw>
<status status="PASS" starttime="20170509 13:05:57.369" endtime="20170509 13:05:57.562"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:05:57.563">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" starttime="20170509 13:05:57.562" endtime="20170509 13:05:57.563"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:05:57.565">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170509 13:05:57.564" endtime="20170509 13:05:57.565"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:05:57.566">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170509 13:05:57.565" endtime="20170509 13:05:57.566"></status>
</kw>
<status status="PASS" starttime="20170509 13:05:57.565" endtime="20170509 13:05:57.566"></status>
</kw>
<status status="PASS" starttime="20170509 13:05:57.563" endtime="20170509 13:05:57.566"></status>
</kw>
<status status="PASS" starttime="20170509 13:05:57.563" endtime="20170509 13:05:57.566"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:05:57.634">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170509 13:05:57.634">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:05:57.566" endtime="20170509 13:05:57.634"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:05:57.636">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170509 13:05:57.635" endtime="20170509 13:05:57.636"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:05:57.637">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170509 13:05:57.637" endtime="20170509 13:05:57.637"></status>
</kw>
<status status="PASS" starttime="20170509 13:05:57.636" endtime="20170509 13:05:57.637"></status>
</kw>
<status status="PASS" starttime="20170509 13:05:57.635" endtime="20170509 13:05:57.637"></status>
</kw>
<status status="PASS" starttime="20170509 13:05:57.634" endtime="20170509 13:05:57.637"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:05:57.637">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:05:57.368" endtime="20170509 13:05:57.638"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:05:57.638">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:05:57.638" endtime="20170509 13:05:57.638"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:05:57.639">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170509 13:05:57.639">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170509 13:05:57.639">${content} = {u'data': u'FW Progress, Baseboard Init', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170509 13:05:57.638" endtime="20170509 13:05:57.639"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:05:57.639">${state} = FW Progress, Baseboard Init</msg>
<status status="PASS" starttime="20170509 13:05:57.368" endtime="20170509 13:05:57.639"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:05:57.639">${boot_progress} = FW Progress, Baseboard Init</msg>
<status status="PASS" starttime="20170509 13:05:57.367" endtime="20170509 13:05:57.639"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170509 13:05:57.640">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status status="FAIL" starttime="20170509 13:05:57.640" endtime="20170509 13:05:57.640"></status>
</kw>
<status status="FAIL" starttime="20170509 13:05:57.367" endtime="20170509 13:05:57.640"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:06:07.645">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170509 13:06:07.645" endtime="20170509 13:06:07.646"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:06:07.646">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170509 13:06:07.646" endtime="20170509 13:06:07.646"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:06:07.647">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170509 13:06:07.646" endtime="20170509 13:06:07.647"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:06:07.647">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170509 13:06:07.647" endtime="20170509 13:06:07.647"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:06:07.873">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170509 13:06:07.648" endtime="20170509 13:06:07.873"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:06:07.873">${status} = PASS</msg>
<msg level="INFO" timestamp="20170509 13:06:07.873">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:06:07.648" endtime="20170509 13:06:07.873"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:06:07.874">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:06:07.873" endtime="20170509 13:06:07.874"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:06:07.874">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:06:07.874" endtime="20170509 13:06:07.875"></status>
</kw>
<status status="PASS" starttime="20170509 13:06:07.644" endtime="20170509 13:06:07.875"></status>
</kw>
<status status="PASS" starttime="20170509 13:06:07.643" endtime="20170509 13:06:07.875"></status>
</kw>
<status status="PASS" starttime="20170509 13:06:07.643" endtime="20170509 13:06:07.875"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:06:07.875">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" starttime="20170509 13:06:07.875" endtime="20170509 13:06:07.875"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:06:07.878">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170509 13:06:07.877" endtime="20170509 13:06:07.878"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:06:07.878">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170509 13:06:07.878" endtime="20170509 13:06:07.879"></status>
</kw>
<status status="PASS" starttime="20170509 13:06:07.878" endtime="20170509 13:06:07.879"></status>
</kw>
<status status="PASS" starttime="20170509 13:06:07.876" endtime="20170509 13:06:07.879"></status>
</kw>
<status status="PASS" starttime="20170509 13:06:07.876" endtime="20170509 13:06:07.879"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:06:07.945">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170509 13:06:07.945">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:06:07.879" endtime="20170509 13:06:07.945"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:06:07.947">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170509 13:06:07.947" endtime="20170509 13:06:07.947"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:06:07.948">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170509 13:06:07.948" endtime="20170509 13:06:07.948"></status>
</kw>
<status status="PASS" starttime="20170509 13:06:07.947" endtime="20170509 13:06:07.948"></status>
</kw>
<status status="PASS" starttime="20170509 13:06:07.946" endtime="20170509 13:06:07.949"></status>
</kw>
<status status="PASS" starttime="20170509 13:06:07.946" endtime="20170509 13:06:07.949"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:06:07.949">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:06:07.642" endtime="20170509 13:06:07.949"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:06:07.949">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:06:07.949" endtime="20170509 13:06:07.949"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:06:07.950">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170509 13:06:07.950">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170509 13:06:07.950">${content} = {u'data': u'FW Progress, Baseboard Init', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170509 13:06:07.950" endtime="20170509 13:06:07.950"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:06:07.950">${state} = FW Progress, Baseboard Init</msg>
<status status="PASS" starttime="20170509 13:06:07.642" endtime="20170509 13:06:07.950"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:06:07.951">${boot_progress} = FW Progress, Baseboard Init</msg>
<status status="PASS" starttime="20170509 13:06:07.641" endtime="20170509 13:06:07.951"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170509 13:06:07.951">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status status="FAIL" starttime="20170509 13:06:07.951" endtime="20170509 13:06:07.951"></status>
</kw>
<status status="FAIL" starttime="20170509 13:06:07.641" endtime="20170509 13:06:07.952"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:06:17.956">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170509 13:06:17.956" endtime="20170509 13:06:17.957"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:06:17.957">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170509 13:06:17.957" endtime="20170509 13:06:17.957"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:06:17.958">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170509 13:06:17.957" endtime="20170509 13:06:17.958"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:06:17.958">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170509 13:06:17.958" endtime="20170509 13:06:17.958"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:06:18.156">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170509 13:06:17.959" endtime="20170509 13:06:18.156"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:06:18.156">${status} = PASS</msg>
<msg level="INFO" timestamp="20170509 13:06:18.157">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:06:17.959" endtime="20170509 13:06:18.157"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:06:18.157">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:06:18.157" endtime="20170509 13:06:18.157"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:06:18.158">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:06:18.157" endtime="20170509 13:06:18.158"></status>
</kw>
<status status="PASS" starttime="20170509 13:06:17.955" endtime="20170509 13:06:18.158"></status>
</kw>
<status status="PASS" starttime="20170509 13:06:17.955" endtime="20170509 13:06:18.158"></status>
</kw>
<status status="PASS" starttime="20170509 13:06:17.954" endtime="20170509 13:06:18.158"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:06:18.159">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" starttime="20170509 13:06:18.158" endtime="20170509 13:06:18.159"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:06:18.161">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170509 13:06:18.160" endtime="20170509 13:06:18.161"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:06:18.162">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170509 13:06:18.161" endtime="20170509 13:06:18.162"></status>
</kw>
<status status="PASS" starttime="20170509 13:06:18.161" endtime="20170509 13:06:18.162"></status>
</kw>
<status status="PASS" starttime="20170509 13:06:18.160" endtime="20170509 13:06:18.162"></status>
</kw>
<status status="PASS" starttime="20170509 13:06:18.159" endtime="20170509 13:06:18.162"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:06:18.271">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170509 13:06:18.271">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:06:18.162" endtime="20170509 13:06:18.271"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:06:18.273">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170509 13:06:18.272" endtime="20170509 13:06:18.273"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:06:18.274">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170509 13:06:18.273" endtime="20170509 13:06:18.274"></status>
</kw>
<status status="PASS" starttime="20170509 13:06:18.273" endtime="20170509 13:06:18.274"></status>
</kw>
<status status="PASS" starttime="20170509 13:06:18.272" endtime="20170509 13:06:18.274"></status>
</kw>
<status status="PASS" starttime="20170509 13:06:18.271" endtime="20170509 13:06:18.274"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:06:18.274">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:06:17.954" endtime="20170509 13:06:18.274"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:06:18.275">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:06:18.274" endtime="20170509 13:06:18.275"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:06:18.275">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170509 13:06:18.275">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170509 13:06:18.276">${content} = {u'data': u'FW Progress, Baseboard Init', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170509 13:06:18.275" endtime="20170509 13:06:18.276"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:06:18.276">${state} = FW Progress, Baseboard Init</msg>
<status status="PASS" starttime="20170509 13:06:17.953" endtime="20170509 13:06:18.276"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:06:18.276">${boot_progress} = FW Progress, Baseboard Init</msg>
<status status="PASS" starttime="20170509 13:06:17.953" endtime="20170509 13:06:18.276"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170509 13:06:18.277">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status status="FAIL" starttime="20170509 13:06:18.276" endtime="20170509 13:06:18.277"></status>
</kw>
<status status="FAIL" starttime="20170509 13:06:17.952" endtime="20170509 13:06:18.277"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:06:28.282">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170509 13:06:28.281" endtime="20170509 13:06:28.282"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:06:28.283">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170509 13:06:28.282" endtime="20170509 13:06:28.283"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:06:28.283">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170509 13:06:28.283" endtime="20170509 13:06:28.283"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:06:28.284">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170509 13:06:28.284" endtime="20170509 13:06:28.284"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:06:28.468">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170509 13:06:28.285" endtime="20170509 13:06:28.468"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:06:28.468">${status} = PASS</msg>
<msg level="INFO" timestamp="20170509 13:06:28.468">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:06:28.284" endtime="20170509 13:06:28.468"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:06:28.469">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:06:28.469" endtime="20170509 13:06:28.469"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:06:28.470">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:06:28.469" endtime="20170509 13:06:28.470"></status>
</kw>
<status status="PASS" starttime="20170509 13:06:28.281" endtime="20170509 13:06:28.470"></status>
</kw>
<status status="PASS" starttime="20170509 13:06:28.280" endtime="20170509 13:06:28.470"></status>
</kw>
<status status="PASS" starttime="20170509 13:06:28.279" endtime="20170509 13:06:28.470"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:06:28.471">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" starttime="20170509 13:06:28.470" endtime="20170509 13:06:28.471"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:06:28.473">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170509 13:06:28.472" endtime="20170509 13:06:28.473"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:06:28.473">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170509 13:06:28.473" endtime="20170509 13:06:28.474"></status>
</kw>
<status status="PASS" starttime="20170509 13:06:28.473" endtime="20170509 13:06:28.474"></status>
</kw>
<status status="PASS" starttime="20170509 13:06:28.471" endtime="20170509 13:06:28.474"></status>
</kw>
<status status="PASS" starttime="20170509 13:06:28.471" endtime="20170509 13:06:28.474"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:06:28.550">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170509 13:06:28.550">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:06:28.474" endtime="20170509 13:06:28.550"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:06:28.552">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170509 13:06:28.551" endtime="20170509 13:06:28.552"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:06:28.553">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170509 13:06:28.552" endtime="20170509 13:06:28.553"></status>
</kw>
<status status="PASS" starttime="20170509 13:06:28.552" endtime="20170509 13:06:28.553"></status>
</kw>
<status status="PASS" starttime="20170509 13:06:28.550" endtime="20170509 13:06:28.553"></status>
</kw>
<status status="PASS" starttime="20170509 13:06:28.550" endtime="20170509 13:06:28.553"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:06:28.553">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:06:28.279" endtime="20170509 13:06:28.553"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:06:28.554">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:06:28.553" endtime="20170509 13:06:28.554"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:06:28.554">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170509 13:06:28.554">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170509 13:06:28.555">${content} = {u'data': u'FW Progress, Baseboard Init', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170509 13:06:28.554" endtime="20170509 13:06:28.555"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:06:28.555">${state} = FW Progress, Baseboard Init</msg>
<status status="PASS" starttime="20170509 13:06:28.278" endtime="20170509 13:06:28.555"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:06:28.555">${boot_progress} = FW Progress, Baseboard Init</msg>
<status status="PASS" starttime="20170509 13:06:28.278" endtime="20170509 13:06:28.555"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170509 13:06:28.556">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status status="FAIL" starttime="20170509 13:06:28.555" endtime="20170509 13:06:28.556"></status>
</kw>
<status status="FAIL" starttime="20170509 13:06:28.277" endtime="20170509 13:06:28.556"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:06:38.561">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170509 13:06:38.560" endtime="20170509 13:06:38.561"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:06:38.562">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170509 13:06:38.562" endtime="20170509 13:06:38.562"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:06:38.562">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170509 13:06:38.562" endtime="20170509 13:06:38.562"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:06:38.563">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170509 13:06:38.563" endtime="20170509 13:06:38.563"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:06:38.777">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170509 13:06:38.564" endtime="20170509 13:06:38.777"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:06:38.777">${status} = PASS</msg>
<msg level="INFO" timestamp="20170509 13:06:38.777">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:06:38.563" endtime="20170509 13:06:38.777"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:06:38.778">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:06:38.778" endtime="20170509 13:06:38.778"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:06:38.779">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:06:38.778" endtime="20170509 13:06:38.779"></status>
</kw>
<status status="PASS" starttime="20170509 13:06:38.560" endtime="20170509 13:06:38.779"></status>
</kw>
<status status="PASS" starttime="20170509 13:06:38.560" endtime="20170509 13:06:38.779"></status>
</kw>
<status status="PASS" starttime="20170509 13:06:38.559" endtime="20170509 13:06:38.779"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:06:38.780">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" starttime="20170509 13:06:38.780" endtime="20170509 13:06:38.780"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:06:38.782">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170509 13:06:38.781" endtime="20170509 13:06:38.782"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:06:38.783">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170509 13:06:38.783" endtime="20170509 13:06:38.783"></status>
</kw>
<status status="PASS" starttime="20170509 13:06:38.782" endtime="20170509 13:06:38.783"></status>
</kw>
<status status="PASS" starttime="20170509 13:06:38.781" endtime="20170509 13:06:38.783"></status>
</kw>
<status status="PASS" starttime="20170509 13:06:38.780" endtime="20170509 13:06:38.783"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:06:38.850">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170509 13:06:38.850">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:06:38.783" endtime="20170509 13:06:38.850"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:06:38.852">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170509 13:06:38.852" endtime="20170509 13:06:38.852"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:06:38.853">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170509 13:06:38.853" endtime="20170509 13:06:38.853"></status>
</kw>
<status status="PASS" starttime="20170509 13:06:38.852" endtime="20170509 13:06:38.853"></status>
</kw>
<status status="PASS" starttime="20170509 13:06:38.851" endtime="20170509 13:06:38.853"></status>
</kw>
<status status="PASS" starttime="20170509 13:06:38.851" endtime="20170509 13:06:38.853"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:06:38.854">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:06:38.558" endtime="20170509 13:06:38.854"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:06:38.854">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:06:38.854" endtime="20170509 13:06:38.854"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:06:38.855">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170509 13:06:38.855">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170509 13:06:38.855">${content} = {u'data': u'FW Progress, Baseboard Init', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170509 13:06:38.854" endtime="20170509 13:06:38.855"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:06:38.855">${state} = FW Progress, Baseboard Init</msg>
<status status="PASS" starttime="20170509 13:06:38.558" endtime="20170509 13:06:38.855"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:06:38.855">${boot_progress} = FW Progress, Baseboard Init</msg>
<status status="PASS" starttime="20170509 13:06:38.557" endtime="20170509 13:06:38.856"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170509 13:06:38.856">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status status="FAIL" starttime="20170509 13:06:38.856" endtime="20170509 13:06:38.856"></status>
</kw>
<status status="FAIL" starttime="20170509 13:06:38.556" endtime="20170509 13:06:38.856"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:06:48.863">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170509 13:06:48.863" endtime="20170509 13:06:48.863"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:06:48.864">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170509 13:06:48.864" endtime="20170509 13:06:48.864"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:06:48.865">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170509 13:06:48.864" endtime="20170509 13:06:48.865"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:06:48.865">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170509 13:06:48.865" endtime="20170509 13:06:48.865"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:06:49.487">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170509 13:06:48.866" endtime="20170509 13:06:49.488"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:06:49.488">${status} = PASS</msg>
<msg level="INFO" timestamp="20170509 13:06:49.488">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:06:48.865" endtime="20170509 13:06:49.488"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:06:49.489">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:06:49.488" endtime="20170509 13:06:49.489"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:06:49.489">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:06:49.489" endtime="20170509 13:06:49.490"></status>
</kw>
<status status="PASS" starttime="20170509 13:06:48.860" endtime="20170509 13:06:49.490"></status>
</kw>
<status status="PASS" starttime="20170509 13:06:48.860" endtime="20170509 13:06:49.490"></status>
</kw>
<status status="PASS" starttime="20170509 13:06:48.859" endtime="20170509 13:06:49.490"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:06:49.491">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" starttime="20170509 13:06:49.491" endtime="20170509 13:06:49.491"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:06:49.494">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170509 13:06:49.493" endtime="20170509 13:06:49.494"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:06:49.495">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170509 13:06:49.495" endtime="20170509 13:06:49.495"></status>
</kw>
<status status="PASS" starttime="20170509 13:06:49.494" endtime="20170509 13:06:49.495"></status>
</kw>
<status status="PASS" starttime="20170509 13:06:49.492" endtime="20170509 13:06:49.496"></status>
</kw>
<status status="PASS" starttime="20170509 13:06:49.491" endtime="20170509 13:06:49.496"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:06:49.670">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170509 13:06:49.670">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:06:49.496" endtime="20170509 13:06:49.670"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:06:49.672">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170509 13:06:49.671" endtime="20170509 13:06:49.672"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:06:49.673">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170509 13:06:49.673" endtime="20170509 13:06:49.673"></status>
</kw>
<status status="PASS" starttime="20170509 13:06:49.672" endtime="20170509 13:06:49.673"></status>
</kw>
<status status="PASS" starttime="20170509 13:06:49.671" endtime="20170509 13:06:49.674"></status>
</kw>
<status status="PASS" starttime="20170509 13:06:49.671" endtime="20170509 13:06:49.674"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:06:49.674">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:06:48.858" endtime="20170509 13:06:49.674"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:06:49.675">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:06:49.674" endtime="20170509 13:06:49.675"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:06:49.675">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170509 13:06:49.675">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170509 13:06:49.675">${content} = {u'data': u'FW Progress, Baseboard Init', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170509 13:06:49.675" endtime="20170509 13:06:49.675"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:06:49.676">${state} = FW Progress, Baseboard Init</msg>
<status status="PASS" starttime="20170509 13:06:48.858" endtime="20170509 13:06:49.676"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:06:49.676">${boot_progress} = FW Progress, Baseboard Init</msg>
<status status="PASS" starttime="20170509 13:06:48.858" endtime="20170509 13:06:49.676"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170509 13:06:49.676">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status status="FAIL" starttime="20170509 13:06:49.676" endtime="20170509 13:06:49.677"></status>
</kw>
<status status="FAIL" starttime="20170509 13:06:48.857" endtime="20170509 13:06:49.677"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:06:59.681">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170509 13:06:59.681" endtime="20170509 13:06:59.682"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:06:59.683">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170509 13:06:59.682" endtime="20170509 13:06:59.683"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:06:59.683">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170509 13:06:59.683" endtime="20170509 13:06:59.683"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:06:59.684">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170509 13:06:59.683" endtime="20170509 13:06:59.684"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:06:59.905">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170509 13:06:59.684" endtime="20170509 13:06:59.905"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:06:59.905">${status} = PASS</msg>
<msg level="INFO" timestamp="20170509 13:06:59.905">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:06:59.684" endtime="20170509 13:06:59.906"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:06:59.906">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:06:59.906" endtime="20170509 13:06:59.906"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:06:59.907">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:06:59.906" endtime="20170509 13:06:59.907"></status>
</kw>
<status status="PASS" starttime="20170509 13:06:59.681" endtime="20170509 13:06:59.907"></status>
</kw>
<status status="PASS" starttime="20170509 13:06:59.680" endtime="20170509 13:06:59.907"></status>
</kw>
<status status="PASS" starttime="20170509 13:06:59.680" endtime="20170509 13:06:59.908"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:06:59.908">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" starttime="20170509 13:06:59.908" endtime="20170509 13:06:59.908"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:06:59.910">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170509 13:06:59.910" endtime="20170509 13:06:59.911"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:06:59.912">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170509 13:06:59.911" endtime="20170509 13:06:59.912"></status>
</kw>
<status status="PASS" starttime="20170509 13:06:59.911" endtime="20170509 13:06:59.912"></status>
</kw>
<status status="PASS" starttime="20170509 13:06:59.909" endtime="20170509 13:06:59.912"></status>
</kw>
<status status="PASS" starttime="20170509 13:06:59.908" endtime="20170509 13:06:59.912"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:06:59.979">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170509 13:06:59.979">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:06:59.913" endtime="20170509 13:06:59.980"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:06:59.981">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170509 13:06:59.981" endtime="20170509 13:06:59.981"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:06:59.982">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170509 13:06:59.982" endtime="20170509 13:06:59.982"></status>
</kw>
<status status="PASS" starttime="20170509 13:06:59.981" endtime="20170509 13:06:59.982"></status>
</kw>
<status status="PASS" starttime="20170509 13:06:59.980" endtime="20170509 13:06:59.982"></status>
</kw>
<status status="PASS" starttime="20170509 13:06:59.980" endtime="20170509 13:06:59.982"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:06:59.983">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:06:59.679" endtime="20170509 13:06:59.983"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:06:59.983">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:06:59.983" endtime="20170509 13:06:59.983"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:06:59.984">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170509 13:06:59.984">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170509 13:06:59.984">${content} = {u'data': u'FW Progress, Baseboard Init', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170509 13:06:59.984" endtime="20170509 13:06:59.984"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:06:59.984">${state} = FW Progress, Baseboard Init</msg>
<status status="PASS" starttime="20170509 13:06:59.678" endtime="20170509 13:06:59.984"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:06:59.985">${boot_progress} = FW Progress, Baseboard Init</msg>
<status status="PASS" starttime="20170509 13:06:59.678" endtime="20170509 13:06:59.985"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170509 13:06:59.985">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status status="FAIL" starttime="20170509 13:06:59.985" endtime="20170509 13:06:59.985"></status>
</kw>
<status status="FAIL" starttime="20170509 13:06:59.677" endtime="20170509 13:06:59.985"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:07:09.990">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170509 13:07:09.990" endtime="20170509 13:07:09.991"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:07:09.991">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170509 13:07:09.991" endtime="20170509 13:07:09.991"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:07:09.992">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170509 13:07:09.992" endtime="20170509 13:07:09.992"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:07:09.992">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170509 13:07:09.992" endtime="20170509 13:07:09.993"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:07:10.214">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170509 13:07:09.993" endtime="20170509 13:07:10.214"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:07:10.214">${status} = PASS</msg>
<msg level="INFO" timestamp="20170509 13:07:10.214">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:07:09.993" endtime="20170509 13:07:10.214"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:07:10.215">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:07:10.215" endtime="20170509 13:07:10.215"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:07:10.216">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:07:10.215" endtime="20170509 13:07:10.216"></status>
</kw>
<status status="PASS" starttime="20170509 13:07:09.989" endtime="20170509 13:07:10.216"></status>
</kw>
<status status="PASS" starttime="20170509 13:07:09.989" endtime="20170509 13:07:10.216"></status>
</kw>
<status status="PASS" starttime="20170509 13:07:09.988" endtime="20170509 13:07:10.216"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:07:10.217">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" starttime="20170509 13:07:10.216" endtime="20170509 13:07:10.217"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:07:10.219">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170509 13:07:10.218" endtime="20170509 13:07:10.219"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:07:10.220">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170509 13:07:10.219" endtime="20170509 13:07:10.220"></status>
</kw>
<status status="PASS" starttime="20170509 13:07:10.219" endtime="20170509 13:07:10.220"></status>
</kw>
<status status="PASS" starttime="20170509 13:07:10.217" endtime="20170509 13:07:10.220"></status>
</kw>
<status status="PASS" starttime="20170509 13:07:10.217" endtime="20170509 13:07:10.220"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:07:10.291">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170509 13:07:10.291">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:07:10.220" endtime="20170509 13:07:10.291"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:07:10.292">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170509 13:07:10.292" endtime="20170509 13:07:10.292"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:07:10.293">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170509 13:07:10.293" endtime="20170509 13:07:10.293"></status>
</kw>
<status status="PASS" starttime="20170509 13:07:10.293" endtime="20170509 13:07:10.294"></status>
</kw>
<status status="PASS" starttime="20170509 13:07:10.291" endtime="20170509 13:07:10.294"></status>
</kw>
<status status="PASS" starttime="20170509 13:07:10.291" endtime="20170509 13:07:10.294"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:07:10.294">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:07:09.987" endtime="20170509 13:07:10.294"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:07:10.295">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:07:10.294" endtime="20170509 13:07:10.295"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:07:10.295">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170509 13:07:10.295">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170509 13:07:10.295">${content} = {u'data': u'FW Progress, Baseboard Init', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170509 13:07:10.295" endtime="20170509 13:07:10.295"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:07:10.296">${state} = FW Progress, Baseboard Init</msg>
<status status="PASS" starttime="20170509 13:07:09.987" endtime="20170509 13:07:10.296"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:07:10.296">${boot_progress} = FW Progress, Baseboard Init</msg>
<status status="PASS" starttime="20170509 13:07:09.986" endtime="20170509 13:07:10.296"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170509 13:07:10.296">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status status="FAIL" starttime="20170509 13:07:10.296" endtime="20170509 13:07:10.297"></status>
</kw>
<status status="FAIL" starttime="20170509 13:07:09.986" endtime="20170509 13:07:10.297"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:07:20.301">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170509 13:07:20.301" endtime="20170509 13:07:20.302"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:07:20.302">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170509 13:07:20.302" endtime="20170509 13:07:20.302"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:07:20.303">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170509 13:07:20.303" endtime="20170509 13:07:20.303"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:07:20.304">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170509 13:07:20.303" endtime="20170509 13:07:20.304"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:07:20.525">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170509 13:07:20.304" endtime="20170509 13:07:20.525"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:07:20.525">${status} = PASS</msg>
<msg level="INFO" timestamp="20170509 13:07:20.525">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:07:20.304" endtime="20170509 13:07:20.525"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:07:20.526">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:07:20.526" endtime="20170509 13:07:20.526"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:07:20.527">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:07:20.526" endtime="20170509 13:07:20.527"></status>
</kw>
<status status="PASS" starttime="20170509 13:07:20.301" endtime="20170509 13:07:20.527"></status>
</kw>
<status status="PASS" starttime="20170509 13:07:20.300" endtime="20170509 13:07:20.527"></status>
</kw>
<status status="PASS" starttime="20170509 13:07:20.300" endtime="20170509 13:07:20.527"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:07:20.528">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" starttime="20170509 13:07:20.527" endtime="20170509 13:07:20.528"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:07:20.530">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170509 13:07:20.529" endtime="20170509 13:07:20.530"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:07:20.531">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170509 13:07:20.530" endtime="20170509 13:07:20.531"></status>
</kw>
<status status="PASS" starttime="20170509 13:07:20.530" endtime="20170509 13:07:20.531"></status>
</kw>
<status status="PASS" starttime="20170509 13:07:20.528" endtime="20170509 13:07:20.531"></status>
</kw>
<status status="PASS" starttime="20170509 13:07:20.528" endtime="20170509 13:07:20.531"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:07:20.598">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170509 13:07:20.598">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:07:20.531" endtime="20170509 13:07:20.598"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:07:20.600">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170509 13:07:20.599" endtime="20170509 13:07:20.600"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:07:20.601">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170509 13:07:20.600" endtime="20170509 13:07:20.601"></status>
</kw>
<status status="PASS" starttime="20170509 13:07:20.600" endtime="20170509 13:07:20.601"></status>
</kw>
<status status="PASS" starttime="20170509 13:07:20.599" endtime="20170509 13:07:20.601"></status>
</kw>
<status status="PASS" starttime="20170509 13:07:20.598" endtime="20170509 13:07:20.601"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:07:20.601">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:07:20.299" endtime="20170509 13:07:20.601"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:07:20.602">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:07:20.602" endtime="20170509 13:07:20.602"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:07:20.602">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170509 13:07:20.603">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170509 13:07:20.603">${content} = {u'data': u'FW Progress, Baseboard Init', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170509 13:07:20.602" endtime="20170509 13:07:20.603"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:07:20.603">${state} = FW Progress, Baseboard Init</msg>
<status status="PASS" starttime="20170509 13:07:20.298" endtime="20170509 13:07:20.603"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:07:20.603">${boot_progress} = FW Progress, Baseboard Init</msg>
<status status="PASS" starttime="20170509 13:07:20.298" endtime="20170509 13:07:20.603"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170509 13:07:20.604">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status status="FAIL" starttime="20170509 13:07:20.603" endtime="20170509 13:07:20.604"></status>
</kw>
<status status="FAIL" starttime="20170509 13:07:20.297" endtime="20170509 13:07:20.604"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:07:30.609">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170509 13:07:30.608" endtime="20170509 13:07:30.609"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:07:30.610">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170509 13:07:30.609" endtime="20170509 13:07:30.610"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:07:30.610">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170509 13:07:30.610" endtime="20170509 13:07:30.610"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:07:30.611">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170509 13:07:30.611" endtime="20170509 13:07:30.611"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:07:30.799">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170509 13:07:30.612" endtime="20170509 13:07:30.799"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:07:30.799">${status} = PASS</msg>
<msg level="INFO" timestamp="20170509 13:07:30.799">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:07:30.611" endtime="20170509 13:07:30.799"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:07:30.800">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:07:30.799" endtime="20170509 13:07:30.800"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:07:30.800">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:07:30.800" endtime="20170509 13:07:30.800"></status>
</kw>
<status status="PASS" starttime="20170509 13:07:30.607" endtime="20170509 13:07:30.800"></status>
</kw>
<status status="PASS" starttime="20170509 13:07:30.607" endtime="20170509 13:07:30.801"></status>
</kw>
<status status="PASS" starttime="20170509 13:07:30.606" endtime="20170509 13:07:30.801"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:07:30.801">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" starttime="20170509 13:07:30.801" endtime="20170509 13:07:30.801"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:07:30.803">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170509 13:07:30.803" endtime="20170509 13:07:30.803"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:07:30.804">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170509 13:07:30.804" endtime="20170509 13:07:30.804"></status>
</kw>
<status status="PASS" starttime="20170509 13:07:30.803" endtime="20170509 13:07:30.804"></status>
</kw>
<status status="PASS" starttime="20170509 13:07:30.802" endtime="20170509 13:07:30.804"></status>
</kw>
<status status="PASS" starttime="20170509 13:07:30.801" endtime="20170509 13:07:30.804"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:07:30.886">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170509 13:07:30.886">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:07:30.805" endtime="20170509 13:07:30.887"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:07:30.888">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170509 13:07:30.888" endtime="20170509 13:07:30.888"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:07:30.889">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170509 13:07:30.889" endtime="20170509 13:07:30.890"></status>
</kw>
<status status="PASS" starttime="20170509 13:07:30.888" endtime="20170509 13:07:30.890"></status>
</kw>
<status status="PASS" starttime="20170509 13:07:30.887" endtime="20170509 13:07:30.890"></status>
</kw>
<status status="PASS" starttime="20170509 13:07:30.887" endtime="20170509 13:07:30.890"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:07:30.890">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:07:30.606" endtime="20170509 13:07:30.890"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:07:30.891">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:07:30.890" endtime="20170509 13:07:30.891"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:07:30.891">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170509 13:07:30.891">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170509 13:07:30.891">${content} = {u'data': u'FW Progress, Baseboard Init', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170509 13:07:30.891" endtime="20170509 13:07:30.891"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:07:30.892">${state} = FW Progress, Baseboard Init</msg>
<status status="PASS" starttime="20170509 13:07:30.605" endtime="20170509 13:07:30.892"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:07:30.892">${boot_progress} = FW Progress, Baseboard Init</msg>
<status status="PASS" starttime="20170509 13:07:30.605" endtime="20170509 13:07:30.892"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170509 13:07:30.893">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status status="FAIL" starttime="20170509 13:07:30.892" endtime="20170509 13:07:30.893"></status>
</kw>
<status status="FAIL" starttime="20170509 13:07:30.604" endtime="20170509 13:07:30.893"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:07:40.898">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170509 13:07:40.897" endtime="20170509 13:07:40.898"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:07:40.899">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170509 13:07:40.898" endtime="20170509 13:07:40.899"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:07:40.899">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170509 13:07:40.899" endtime="20170509 13:07:40.899"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:07:40.900">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170509 13:07:40.900" endtime="20170509 13:07:40.900"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:07:41.455">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170509 13:07:40.901" endtime="20170509 13:07:41.455"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:07:41.455">${status} = PASS</msg>
<msg level="INFO" timestamp="20170509 13:07:41.455">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:07:40.900" endtime="20170509 13:07:41.456"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:07:41.456">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:07:41.456" endtime="20170509 13:07:41.456"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:07:41.457">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:07:41.456" endtime="20170509 13:07:41.457"></status>
</kw>
<status status="PASS" starttime="20170509 13:07:40.897" endtime="20170509 13:07:41.457"></status>
</kw>
<status status="PASS" starttime="20170509 13:07:40.896" endtime="20170509 13:07:41.457"></status>
</kw>
<status status="PASS" starttime="20170509 13:07:40.896" endtime="20170509 13:07:41.457"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:07:41.458">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" starttime="20170509 13:07:41.457" endtime="20170509 13:07:41.458"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:07:41.460">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170509 13:07:41.459" endtime="20170509 13:07:41.460"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:07:41.461">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170509 13:07:41.461" endtime="20170509 13:07:41.461"></status>
</kw>
<status status="PASS" starttime="20170509 13:07:41.460" endtime="20170509 13:07:41.461"></status>
</kw>
<status status="PASS" starttime="20170509 13:07:41.459" endtime="20170509 13:07:41.461"></status>
</kw>
<status status="PASS" starttime="20170509 13:07:41.458" endtime="20170509 13:07:41.461"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:07:41.637">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170509 13:07:41.637">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:07:41.462" endtime="20170509 13:07:41.637"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:07:41.639">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170509 13:07:41.638" endtime="20170509 13:07:41.639"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:07:41.640">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170509 13:07:41.640" endtime="20170509 13:07:41.640"></status>
</kw>
<status status="PASS" starttime="20170509 13:07:41.639" endtime="20170509 13:07:41.640"></status>
</kw>
<status status="PASS" starttime="20170509 13:07:41.638" endtime="20170509 13:07:41.640"></status>
</kw>
<status status="PASS" starttime="20170509 13:07:41.637" endtime="20170509 13:07:41.640"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:07:41.640">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:07:40.895" endtime="20170509 13:07:41.640"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:07:41.641">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:07:41.641" endtime="20170509 13:07:41.641"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:07:41.642">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170509 13:07:41.642">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170509 13:07:41.642">${content} = {u'data': u'FW Progress, Baseboard Init', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170509 13:07:41.641" endtime="20170509 13:07:41.642"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:07:41.642">${state} = FW Progress, Baseboard Init</msg>
<status status="PASS" starttime="20170509 13:07:40.894" endtime="20170509 13:07:41.642"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:07:41.642">${boot_progress} = FW Progress, Baseboard Init</msg>
<status status="PASS" starttime="20170509 13:07:40.894" endtime="20170509 13:07:41.642"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170509 13:07:41.643">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status status="FAIL" starttime="20170509 13:07:41.643" endtime="20170509 13:07:41.643"></status>
</kw>
<status status="FAIL" starttime="20170509 13:07:40.893" endtime="20170509 13:07:41.643"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:07:51.650">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170509 13:07:51.649" endtime="20170509 13:07:51.650"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:07:51.651">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170509 13:07:51.651" endtime="20170509 13:07:51.651"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:07:51.652">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170509 13:07:51.651" endtime="20170509 13:07:51.652"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:07:51.653">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170509 13:07:51.652" endtime="20170509 13:07:51.653"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:07:52.265">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170509 13:07:51.654" endtime="20170509 13:07:52.265"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:07:52.266">${status} = PASS</msg>
<msg level="INFO" timestamp="20170509 13:07:52.266">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:07:51.653" endtime="20170509 13:07:52.266"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:07:52.266">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:07:52.266" endtime="20170509 13:07:52.266"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:07:52.267">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:07:52.267" endtime="20170509 13:07:52.267"></status>
</kw>
<status status="PASS" starttime="20170509 13:07:51.648" endtime="20170509 13:07:52.267"></status>
</kw>
<status status="PASS" starttime="20170509 13:07:51.647" endtime="20170509 13:07:52.267"></status>
</kw>
<status status="PASS" starttime="20170509 13:07:51.647" endtime="20170509 13:07:52.267"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:07:52.268">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" starttime="20170509 13:07:52.268" endtime="20170509 13:07:52.268"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:07:52.270">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170509 13:07:52.269" endtime="20170509 13:07:52.270"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:07:52.271">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170509 13:07:52.271" endtime="20170509 13:07:52.271"></status>
</kw>
<status status="PASS" starttime="20170509 13:07:52.270" endtime="20170509 13:07:52.271"></status>
</kw>
<status status="PASS" starttime="20170509 13:07:52.269" endtime="20170509 13:07:52.271"></status>
</kw>
<status status="PASS" starttime="20170509 13:07:52.268" endtime="20170509 13:07:52.271"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:07:52.445">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170509 13:07:52.445">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:07:52.272" endtime="20170509 13:07:52.445"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:07:52.447">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170509 13:07:52.446" endtime="20170509 13:07:52.447"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:07:52.448">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170509 13:07:52.448" endtime="20170509 13:07:52.448"></status>
</kw>
<status status="PASS" starttime="20170509 13:07:52.447" endtime="20170509 13:07:52.448"></status>
</kw>
<status status="PASS" starttime="20170509 13:07:52.446" endtime="20170509 13:07:52.448"></status>
</kw>
<status status="PASS" starttime="20170509 13:07:52.445" endtime="20170509 13:07:52.448"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:07:52.449">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:07:51.646" endtime="20170509 13:07:52.449"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:07:52.449">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:07:52.449" endtime="20170509 13:07:52.449"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:07:52.450">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170509 13:07:52.450">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170509 13:07:52.450">${content} = {u'data': u'FW Progress, Baseboard Init', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170509 13:07:52.449" endtime="20170509 13:07:52.450"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:07:52.450">${state} = FW Progress, Baseboard Init</msg>
<status status="PASS" starttime="20170509 13:07:51.645" endtime="20170509 13:07:52.450"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:07:52.451">${boot_progress} = FW Progress, Baseboard Init</msg>
<status status="PASS" starttime="20170509 13:07:51.644" endtime="20170509 13:07:52.451"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170509 13:07:52.451">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status status="FAIL" starttime="20170509 13:07:52.451" endtime="20170509 13:07:52.451"></status>
</kw>
<status status="FAIL" starttime="20170509 13:07:51.644" endtime="20170509 13:07:52.452"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:08:02.456">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170509 13:08:02.456" endtime="20170509 13:08:02.456"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:08:02.457">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170509 13:08:02.457" endtime="20170509 13:08:02.457"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:08:02.458">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170509 13:08:02.457" endtime="20170509 13:08:02.458"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:08:02.458">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170509 13:08:02.458" endtime="20170509 13:08:02.458"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:08:02.646">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170509 13:08:02.459" endtime="20170509 13:08:02.646"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:08:02.646">${status} = PASS</msg>
<msg level="INFO" timestamp="20170509 13:08:02.646">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:08:02.459" endtime="20170509 13:08:02.646"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:08:02.647">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:08:02.646" endtime="20170509 13:08:02.647"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:08:02.647">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:08:02.647" endtime="20170509 13:08:02.648"></status>
</kw>
<status status="PASS" starttime="20170509 13:08:02.455" endtime="20170509 13:08:02.648"></status>
</kw>
<status status="PASS" starttime="20170509 13:08:02.455" endtime="20170509 13:08:02.648"></status>
</kw>
<status status="PASS" starttime="20170509 13:08:02.454" endtime="20170509 13:08:02.648"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:08:02.648">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" starttime="20170509 13:08:02.648" endtime="20170509 13:08:02.648"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:08:02.651">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170509 13:08:02.650" endtime="20170509 13:08:02.651"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:08:02.651">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170509 13:08:02.651" endtime="20170509 13:08:02.652"></status>
</kw>
<status status="PASS" starttime="20170509 13:08:02.651" endtime="20170509 13:08:02.652"></status>
</kw>
<status status="PASS" starttime="20170509 13:08:02.649" endtime="20170509 13:08:02.652"></status>
</kw>
<status status="PASS" starttime="20170509 13:08:02.649" endtime="20170509 13:08:02.652"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:08:02.718">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170509 13:08:02.719">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:08:02.652" endtime="20170509 13:08:02.719"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:08:02.720">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170509 13:08:02.720" endtime="20170509 13:08:02.720"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:08:02.721">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170509 13:08:02.721" endtime="20170509 13:08:02.721"></status>
</kw>
<status status="PASS" starttime="20170509 13:08:02.720" endtime="20170509 13:08:02.721"></status>
</kw>
<status status="PASS" starttime="20170509 13:08:02.719" endtime="20170509 13:08:02.722"></status>
</kw>
<status status="PASS" starttime="20170509 13:08:02.719" endtime="20170509 13:08:02.722"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:08:02.722">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:08:02.453" endtime="20170509 13:08:02.722"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:08:02.722">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:08:02.722" endtime="20170509 13:08:02.722"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:08:02.723">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170509 13:08:02.723">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170509 13:08:02.723">${content} = {u'data': u'FW Progress, Baseboard Init', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170509 13:08:02.723" endtime="20170509 13:08:02.723"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:08:02.723">${state} = FW Progress, Baseboard Init</msg>
<status status="PASS" starttime="20170509 13:08:02.453" endtime="20170509 13:08:02.723"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:08:02.724">${boot_progress} = FW Progress, Baseboard Init</msg>
<status status="PASS" starttime="20170509 13:08:02.452" endtime="20170509 13:08:02.724"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170509 13:08:02.724">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status status="FAIL" starttime="20170509 13:08:02.724" endtime="20170509 13:08:02.724"></status>
</kw>
<status status="FAIL" starttime="20170509 13:08:02.452" endtime="20170509 13:08:02.725"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:08:12.731">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170509 13:08:12.730" endtime="20170509 13:08:12.731"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:08:12.732">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170509 13:08:12.731" endtime="20170509 13:08:12.732"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:08:12.732">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170509 13:08:12.732" endtime="20170509 13:08:12.732"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:08:12.733">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170509 13:08:12.733" endtime="20170509 13:08:12.733"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:08:12.915">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170509 13:08:12.734" endtime="20170509 13:08:12.915"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:08:12.915">${status} = PASS</msg>
<msg level="INFO" timestamp="20170509 13:08:12.915">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:08:12.733" endtime="20170509 13:08:12.915"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:08:12.916">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:08:12.916" endtime="20170509 13:08:12.916"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:08:12.917">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:08:12.916" endtime="20170509 13:08:12.917"></status>
</kw>
<status status="PASS" starttime="20170509 13:08:12.728" endtime="20170509 13:08:12.917"></status>
</kw>
<status status="PASS" starttime="20170509 13:08:12.727" endtime="20170509 13:08:12.917"></status>
</kw>
<status status="PASS" starttime="20170509 13:08:12.727" endtime="20170509 13:08:12.917"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:08:12.918">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" starttime="20170509 13:08:12.917" endtime="20170509 13:08:12.918"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:08:12.920">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170509 13:08:12.919" endtime="20170509 13:08:12.920"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:08:12.921">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170509 13:08:12.920" endtime="20170509 13:08:12.921"></status>
</kw>
<status status="PASS" starttime="20170509 13:08:12.920" endtime="20170509 13:08:12.921"></status>
</kw>
<status status="PASS" starttime="20170509 13:08:12.918" endtime="20170509 13:08:12.921"></status>
</kw>
<status status="PASS" starttime="20170509 13:08:12.918" endtime="20170509 13:08:12.921"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:08:12.987">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170509 13:08:12.987">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:08:12.921" endtime="20170509 13:08:12.987"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:08:12.989">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170509 13:08:12.988" endtime="20170509 13:08:12.989"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:08:12.990">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170509 13:08:12.990" endtime="20170509 13:08:12.990"></status>
</kw>
<status status="PASS" starttime="20170509 13:08:12.989" endtime="20170509 13:08:12.990"></status>
</kw>
<status status="PASS" starttime="20170509 13:08:12.988" endtime="20170509 13:08:12.990"></status>
</kw>
<status status="PASS" starttime="20170509 13:08:12.988" endtime="20170509 13:08:12.991"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:08:12.991">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:08:12.726" endtime="20170509 13:08:12.991"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:08:12.991">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:08:12.991" endtime="20170509 13:08:12.991"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:08:12.992">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170509 13:08:12.992">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170509 13:08:12.992">${content} = {u'data': u'FW Progress, Baseboard Init', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170509 13:08:12.992" endtime="20170509 13:08:12.992"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:08:12.993">${state} = FW Progress, Baseboard Init</msg>
<status status="PASS" starttime="20170509 13:08:12.726" endtime="20170509 13:08:12.993"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:08:12.993">${boot_progress} = FW Progress, Baseboard Init</msg>
<status status="PASS" starttime="20170509 13:08:12.725" endtime="20170509 13:08:12.993"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170509 13:08:12.993">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status status="FAIL" starttime="20170509 13:08:12.993" endtime="20170509 13:08:12.993"></status>
</kw>
<status status="FAIL" starttime="20170509 13:08:12.725" endtime="20170509 13:08:12.994"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:08:22.998">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170509 13:08:22.998" endtime="20170509 13:08:22.998"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:08:22.999">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170509 13:08:22.999" endtime="20170509 13:08:22.999"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:08:23.000">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170509 13:08:22.999" endtime="20170509 13:08:23.000"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:08:23.000">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170509 13:08:23.000" endtime="20170509 13:08:23.000"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:08:23.208">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170509 13:08:23.001" endtime="20170509 13:08:23.208"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:08:23.208">${status} = PASS</msg>
<msg level="INFO" timestamp="20170509 13:08:23.208">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:08:23.000" endtime="20170509 13:08:23.208"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:08:23.209">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:08:23.208" endtime="20170509 13:08:23.209"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:08:23.209">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:08:23.209" endtime="20170509 13:08:23.210"></status>
</kw>
<status status="PASS" starttime="20170509 13:08:22.997" endtime="20170509 13:08:23.210"></status>
</kw>
<status status="PASS" starttime="20170509 13:08:22.997" endtime="20170509 13:08:23.210"></status>
</kw>
<status status="PASS" starttime="20170509 13:08:22.996" endtime="20170509 13:08:23.210"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:08:23.211">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" starttime="20170509 13:08:23.210" endtime="20170509 13:08:23.211"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:08:23.213">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170509 13:08:23.212" endtime="20170509 13:08:23.213"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:08:23.214">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170509 13:08:23.214" endtime="20170509 13:08:23.214"></status>
</kw>
<status status="PASS" starttime="20170509 13:08:23.213" endtime="20170509 13:08:23.214"></status>
</kw>
<status status="PASS" starttime="20170509 13:08:23.211" endtime="20170509 13:08:23.214"></status>
</kw>
<status status="PASS" starttime="20170509 13:08:23.211" endtime="20170509 13:08:23.214"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:08:23.281">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170509 13:08:23.281">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:08:23.214" endtime="20170509 13:08:23.281"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:08:23.282">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170509 13:08:23.282" endtime="20170509 13:08:23.283"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:08:23.283">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170509 13:08:23.283" endtime="20170509 13:08:23.283"></status>
</kw>
<status status="PASS" starttime="20170509 13:08:23.283" endtime="20170509 13:08:23.284"></status>
</kw>
<status status="PASS" starttime="20170509 13:08:23.282" endtime="20170509 13:08:23.284"></status>
</kw>
<status status="PASS" starttime="20170509 13:08:23.281" endtime="20170509 13:08:23.284"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:08:23.284">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:08:22.995" endtime="20170509 13:08:23.284"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:08:23.285">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:08:23.284" endtime="20170509 13:08:23.285"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:08:23.285">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170509 13:08:23.285">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170509 13:08:23.285">${content} = {u'data': u'FW Progress, Baseboard Init', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170509 13:08:23.285" endtime="20170509 13:08:23.285"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:08:23.286">${state} = FW Progress, Baseboard Init</msg>
<status status="PASS" starttime="20170509 13:08:22.995" endtime="20170509 13:08:23.286"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:08:23.286">${boot_progress} = FW Progress, Baseboard Init</msg>
<status status="PASS" starttime="20170509 13:08:22.995" endtime="20170509 13:08:23.286"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170509 13:08:23.286">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status status="FAIL" starttime="20170509 13:08:23.286" endtime="20170509 13:08:23.287"></status>
</kw>
<status status="FAIL" starttime="20170509 13:08:22.994" endtime="20170509 13:08:23.287"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:08:33.291">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170509 13:08:33.291" endtime="20170509 13:08:33.292"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:08:33.292">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170509 13:08:33.292" endtime="20170509 13:08:33.292"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:08:33.293">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170509 13:08:33.293" endtime="20170509 13:08:33.293"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:08:33.294">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170509 13:08:33.293" endtime="20170509 13:08:33.294"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:08:33.500">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170509 13:08:33.294" endtime="20170509 13:08:33.500"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:08:33.500">${status} = PASS</msg>
<msg level="INFO" timestamp="20170509 13:08:33.500">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:08:33.294" endtime="20170509 13:08:33.500"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:08:33.501">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:08:33.501" endtime="20170509 13:08:33.501"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:08:33.502">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:08:33.501" endtime="20170509 13:08:33.502"></status>
</kw>
<status status="PASS" starttime="20170509 13:08:33.290" endtime="20170509 13:08:33.502"></status>
</kw>
<status status="PASS" starttime="20170509 13:08:33.290" endtime="20170509 13:08:33.502"></status>
</kw>
<status status="PASS" starttime="20170509 13:08:33.289" endtime="20170509 13:08:33.502"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:08:33.503">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" starttime="20170509 13:08:33.502" endtime="20170509 13:08:33.503"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:08:33.505">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170509 13:08:33.504" endtime="20170509 13:08:33.505"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:08:33.505">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170509 13:08:33.505" endtime="20170509 13:08:33.506"></status>
</kw>
<status status="PASS" starttime="20170509 13:08:33.505" endtime="20170509 13:08:33.506"></status>
</kw>
<status status="PASS" starttime="20170509 13:08:33.503" endtime="20170509 13:08:33.506"></status>
</kw>
<status status="PASS" starttime="20170509 13:08:33.503" endtime="20170509 13:08:33.506"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:08:33.583">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170509 13:08:33.583">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:08:33.506" endtime="20170509 13:08:33.583"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:08:33.585">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170509 13:08:33.584" endtime="20170509 13:08:33.585"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:08:33.586">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170509 13:08:33.585" endtime="20170509 13:08:33.586"></status>
</kw>
<status status="PASS" starttime="20170509 13:08:33.585" endtime="20170509 13:08:33.586"></status>
</kw>
<status status="PASS" starttime="20170509 13:08:33.584" endtime="20170509 13:08:33.586"></status>
</kw>
<status status="PASS" starttime="20170509 13:08:33.583" endtime="20170509 13:08:33.586"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:08:33.586">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:08:33.288" endtime="20170509 13:08:33.586"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:08:33.587">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:08:33.587" endtime="20170509 13:08:33.587"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:08:33.587">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170509 13:08:33.587">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170509 13:08:33.588">${content} = {u'data': u'FW Progress, Baseboard Init', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170509 13:08:33.587" endtime="20170509 13:08:33.588"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:08:33.588">${state} = FW Progress, Baseboard Init</msg>
<status status="PASS" starttime="20170509 13:08:33.288" endtime="20170509 13:08:33.588"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:08:33.588">${boot_progress} = FW Progress, Baseboard Init</msg>
<status status="PASS" starttime="20170509 13:08:33.288" endtime="20170509 13:08:33.588"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170509 13:08:33.589">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status status="FAIL" starttime="20170509 13:08:33.588" endtime="20170509 13:08:33.589"></status>
</kw>
<status status="FAIL" starttime="20170509 13:08:33.287" endtime="20170509 13:08:33.589"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:08:43.594">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170509 13:08:43.594" endtime="20170509 13:08:43.595"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:08:43.595">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170509 13:08:43.595" endtime="20170509 13:08:43.595"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:08:43.596">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170509 13:08:43.596" endtime="20170509 13:08:43.596"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:08:43.597">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170509 13:08:43.596" endtime="20170509 13:08:43.597"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:08:44.235">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170509 13:08:43.597" endtime="20170509 13:08:44.235"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:08:44.235">${status} = PASS</msg>
<msg level="INFO" timestamp="20170509 13:08:44.235">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:08:43.597" endtime="20170509 13:08:44.235"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:08:44.236">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:08:44.235" endtime="20170509 13:08:44.236"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:08:44.236">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:08:44.236" endtime="20170509 13:08:44.237"></status>
</kw>
<status status="PASS" starttime="20170509 13:08:43.593" endtime="20170509 13:08:44.237"></status>
</kw>
<status status="PASS" starttime="20170509 13:08:43.593" endtime="20170509 13:08:44.237"></status>
</kw>
<status status="PASS" starttime="20170509 13:08:43.592" endtime="20170509 13:08:44.237"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:08:44.238">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" starttime="20170509 13:08:44.237" endtime="20170509 13:08:44.238"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:08:44.240">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170509 13:08:44.239" endtime="20170509 13:08:44.240"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:08:44.241">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170509 13:08:44.241" endtime="20170509 13:08:44.241"></status>
</kw>
<status status="PASS" starttime="20170509 13:08:44.240" endtime="20170509 13:08:44.241"></status>
</kw>
<status status="PASS" starttime="20170509 13:08:44.239" endtime="20170509 13:08:44.241"></status>
</kw>
<status status="PASS" starttime="20170509 13:08:44.238" endtime="20170509 13:08:44.241"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:08:44.423">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170509 13:08:44.423">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:08:44.242" endtime="20170509 13:08:44.423"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:08:44.425">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170509 13:08:44.424" endtime="20170509 13:08:44.425"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:08:44.425">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170509 13:08:44.425" endtime="20170509 13:08:44.426"></status>
</kw>
<status status="PASS" starttime="20170509 13:08:44.425" endtime="20170509 13:08:44.426"></status>
</kw>
<status status="PASS" starttime="20170509 13:08:44.424" endtime="20170509 13:08:44.426"></status>
</kw>
<status status="PASS" starttime="20170509 13:08:44.423" endtime="20170509 13:08:44.426"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:08:44.426">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:08:43.592" endtime="20170509 13:08:44.426"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:08:44.427">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:08:44.426" endtime="20170509 13:08:44.427"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:08:44.427">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170509 13:08:44.427">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170509 13:08:44.427">${content} = {u'data': u'FW Progress, Baseboard Init', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170509 13:08:44.427" endtime="20170509 13:08:44.427"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:08:44.428">${state} = FW Progress, Baseboard Init</msg>
<status status="PASS" starttime="20170509 13:08:43.591" endtime="20170509 13:08:44.428"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:08:44.428">${boot_progress} = FW Progress, Baseboard Init</msg>
<status status="PASS" starttime="20170509 13:08:43.591" endtime="20170509 13:08:44.428"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170509 13:08:44.429">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status status="FAIL" starttime="20170509 13:08:44.428" endtime="20170509 13:08:44.429"></status>
</kw>
<status status="FAIL" starttime="20170509 13:08:43.590" endtime="20170509 13:08:44.429"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:08:54.434">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170509 13:08:54.434" endtime="20170509 13:08:54.435"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:08:54.435">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170509 13:08:54.435" endtime="20170509 13:08:54.435"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:08:54.436">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170509 13:08:54.435" endtime="20170509 13:08:54.436"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:08:54.436">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170509 13:08:54.436" endtime="20170509 13:08:54.436"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:08:54.917">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170509 13:08:54.437" endtime="20170509 13:08:54.917"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:08:54.917">${status} = PASS</msg>
<msg level="INFO" timestamp="20170509 13:08:54.917">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:08:54.437" endtime="20170509 13:08:54.917"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:08:54.918">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:08:54.917" endtime="20170509 13:08:54.918"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:08:54.918">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:08:54.918" endtime="20170509 13:08:54.919"></status>
</kw>
<status status="PASS" starttime="20170509 13:08:54.433" endtime="20170509 13:08:54.919"></status>
</kw>
<status status="PASS" starttime="20170509 13:08:54.432" endtime="20170509 13:08:54.919"></status>
</kw>
<status status="PASS" starttime="20170509 13:08:54.432" endtime="20170509 13:08:54.919"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:08:54.919">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" starttime="20170509 13:08:54.919" endtime="20170509 13:08:54.919"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:08:54.921">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170509 13:08:54.921" endtime="20170509 13:08:54.921"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:08:54.922">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170509 13:08:54.922" endtime="20170509 13:08:54.923"></status>
</kw>
<status status="PASS" starttime="20170509 13:08:54.922" endtime="20170509 13:08:54.923"></status>
</kw>
<status status="PASS" starttime="20170509 13:08:54.920" endtime="20170509 13:08:54.923"></status>
</kw>
<status status="PASS" starttime="20170509 13:08:54.920" endtime="20170509 13:08:54.923"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:08:55.065">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170509 13:08:55.066">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:08:54.923" endtime="20170509 13:08:55.066"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:08:55.067">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170509 13:08:55.067" endtime="20170509 13:08:55.068"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:08:55.069">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170509 13:08:55.068" endtime="20170509 13:08:55.069"></status>
</kw>
<status status="PASS" starttime="20170509 13:08:55.068" endtime="20170509 13:08:55.069"></status>
</kw>
<status status="PASS" starttime="20170509 13:08:55.067" endtime="20170509 13:08:55.069"></status>
</kw>
<status status="PASS" starttime="20170509 13:08:55.066" endtime="20170509 13:08:55.069"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:08:55.069">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:08:54.431" endtime="20170509 13:08:55.069"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:08:55.070">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:08:55.070" endtime="20170509 13:08:55.070"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:08:55.071">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170509 13:08:55.071">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170509 13:08:55.071">${content} = {u'data': u'FW Progress, Baseboard Init', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170509 13:08:55.070" endtime="20170509 13:08:55.071"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:08:55.071">${state} = FW Progress, Baseboard Init</msg>
<status status="PASS" starttime="20170509 13:08:54.431" endtime="20170509 13:08:55.071"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:08:55.072">${boot_progress} = FW Progress, Baseboard Init</msg>
<status status="PASS" starttime="20170509 13:08:54.430" endtime="20170509 13:08:55.072"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170509 13:08:55.072">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status status="FAIL" starttime="20170509 13:08:55.072" endtime="20170509 13:08:55.072"></status>
</kw>
<status status="FAIL" starttime="20170509 13:08:54.430" endtime="20170509 13:08:55.073"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:09:05.077">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170509 13:09:05.077" endtime="20170509 13:09:05.078"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:09:05.078">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170509 13:09:05.078" endtime="20170509 13:09:05.078"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:09:05.079">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170509 13:09:05.079" endtime="20170509 13:09:05.079"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:09:05.080">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170509 13:09:05.080" endtime="20170509 13:09:05.080"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:09:05.260">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170509 13:09:05.081" endtime="20170509 13:09:05.260"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:09:05.260">${status} = PASS</msg>
<msg level="INFO" timestamp="20170509 13:09:05.260">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:09:05.080" endtime="20170509 13:09:05.260"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:09:05.261">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:09:05.260" endtime="20170509 13:09:05.261"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:09:05.261">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:09:05.261" endtime="20170509 13:09:05.261"></status>
</kw>
<status status="PASS" starttime="20170509 13:09:05.076" endtime="20170509 13:09:05.262"></status>
</kw>
<status status="PASS" starttime="20170509 13:09:05.076" endtime="20170509 13:09:05.262"></status>
</kw>
<status status="PASS" starttime="20170509 13:09:05.075" endtime="20170509 13:09:05.262"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:09:05.262">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" starttime="20170509 13:09:05.262" endtime="20170509 13:09:05.262"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:09:05.264">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170509 13:09:05.264" endtime="20170509 13:09:05.264"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:09:05.265">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170509 13:09:05.265" endtime="20170509 13:09:05.266"></status>
</kw>
<status status="PASS" starttime="20170509 13:09:05.265" endtime="20170509 13:09:05.266"></status>
</kw>
<status status="PASS" starttime="20170509 13:09:05.263" endtime="20170509 13:09:05.266"></status>
</kw>
<status status="PASS" starttime="20170509 13:09:05.263" endtime="20170509 13:09:05.266"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:09:05.333">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170509 13:09:05.333">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:09:05.266" endtime="20170509 13:09:05.333"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:09:05.335">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170509 13:09:05.334" endtime="20170509 13:09:05.335"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:09:05.336">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170509 13:09:05.336" endtime="20170509 13:09:05.336"></status>
</kw>
<status status="PASS" starttime="20170509 13:09:05.335" endtime="20170509 13:09:05.336"></status>
</kw>
<status status="PASS" starttime="20170509 13:09:05.334" endtime="20170509 13:09:05.336"></status>
</kw>
<status status="PASS" starttime="20170509 13:09:05.334" endtime="20170509 13:09:05.336"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:09:05.337">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:09:05.075" endtime="20170509 13:09:05.337"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:09:05.337">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:09:05.337" endtime="20170509 13:09:05.337"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:09:05.338">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170509 13:09:05.338">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170509 13:09:05.338">${content} = {u'data': u'FW Progress, Baseboard Init', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170509 13:09:05.337" endtime="20170509 13:09:05.338"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:09:05.338">${state} = FW Progress, Baseboard Init</msg>
<status status="PASS" starttime="20170509 13:09:05.074" endtime="20170509 13:09:05.338"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:09:05.338">${boot_progress} = FW Progress, Baseboard Init</msg>
<status status="PASS" starttime="20170509 13:09:05.074" endtime="20170509 13:09:05.339"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170509 13:09:05.339">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status status="FAIL" starttime="20170509 13:09:05.339" endtime="20170509 13:09:05.339"></status>
</kw>
<status status="FAIL" starttime="20170509 13:09:05.073" endtime="20170509 13:09:05.339"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:09:15.345">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170509 13:09:15.344" endtime="20170509 13:09:15.345"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:09:15.346">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170509 13:09:15.345" endtime="20170509 13:09:15.346"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:09:15.347">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170509 13:09:15.346" endtime="20170509 13:09:15.347"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:09:15.348">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170509 13:09:15.347" endtime="20170509 13:09:15.348"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:09:15.527">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170509 13:09:15.348" endtime="20170509 13:09:15.527"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:09:15.527">${status} = PASS</msg>
<msg level="INFO" timestamp="20170509 13:09:15.527">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:09:15.348" endtime="20170509 13:09:15.527"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:09:15.528">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:09:15.527" endtime="20170509 13:09:15.528"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:09:15.528">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:09:15.528" endtime="20170509 13:09:15.528"></status>
</kw>
<status status="PASS" starttime="20170509 13:09:15.343" endtime="20170509 13:09:15.528"></status>
</kw>
<status status="PASS" starttime="20170509 13:09:15.343" endtime="20170509 13:09:15.529"></status>
</kw>
<status status="PASS" starttime="20170509 13:09:15.342" endtime="20170509 13:09:15.529"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:09:15.529">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" starttime="20170509 13:09:15.529" endtime="20170509 13:09:15.529"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:09:15.531">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170509 13:09:15.531" endtime="20170509 13:09:15.531"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:09:15.532">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170509 13:09:15.532" endtime="20170509 13:09:15.532"></status>
</kw>
<status status="PASS" starttime="20170509 13:09:15.531" endtime="20170509 13:09:15.532"></status>
</kw>
<status status="PASS" starttime="20170509 13:09:15.530" endtime="20170509 13:09:15.532"></status>
</kw>
<status status="PASS" starttime="20170509 13:09:15.529" endtime="20170509 13:09:15.532"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:09:15.599">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170509 13:09:15.599">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:09:15.533" endtime="20170509 13:09:15.599"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:09:15.601">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170509 13:09:15.600" endtime="20170509 13:09:15.601"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:09:15.602">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170509 13:09:15.602" endtime="20170509 13:09:15.602"></status>
</kw>
<status status="PASS" starttime="20170509 13:09:15.601" endtime="20170509 13:09:15.602"></status>
</kw>
<status status="PASS" starttime="20170509 13:09:15.600" endtime="20170509 13:09:15.602"></status>
</kw>
<status status="PASS" starttime="20170509 13:09:15.600" endtime="20170509 13:09:15.603"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:09:15.603">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:09:15.341" endtime="20170509 13:09:15.603"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:09:15.603">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:09:15.603" endtime="20170509 13:09:15.603"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:09:15.604">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170509 13:09:15.604">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170509 13:09:15.604">${content} = {u'data': u'FW Progress, Baseboard Init', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170509 13:09:15.604" endtime="20170509 13:09:15.604"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:09:15.605">${state} = FW Progress, Baseboard Init</msg>
<status status="PASS" starttime="20170509 13:09:15.341" endtime="20170509 13:09:15.605"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:09:15.605">${boot_progress} = FW Progress, Baseboard Init</msg>
<status status="PASS" starttime="20170509 13:09:15.340" endtime="20170509 13:09:15.605"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170509 13:09:15.605">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status status="FAIL" starttime="20170509 13:09:15.605" endtime="20170509 13:09:15.606"></status>
</kw>
<status status="FAIL" starttime="20170509 13:09:15.340" endtime="20170509 13:09:15.606"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:09:25.611">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170509 13:09:25.611" endtime="20170509 13:09:25.612"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:09:25.612">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170509 13:09:25.612" endtime="20170509 13:09:25.612"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:09:25.613">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170509 13:09:25.613" endtime="20170509 13:09:25.613"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:09:25.614">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170509 13:09:25.614" endtime="20170509 13:09:25.614"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:09:25.795">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170509 13:09:25.615" endtime="20170509 13:09:25.795"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:09:25.795">${status} = PASS</msg>
<msg level="INFO" timestamp="20170509 13:09:25.796">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:09:25.615" endtime="20170509 13:09:25.796"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:09:25.796">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:09:25.796" endtime="20170509 13:09:25.796"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:09:25.797">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:09:25.796" endtime="20170509 13:09:25.797"></status>
</kw>
<status status="PASS" starttime="20170509 13:09:25.610" endtime="20170509 13:09:25.797"></status>
</kw>
<status status="PASS" starttime="20170509 13:09:25.609" endtime="20170509 13:09:25.797"></status>
</kw>
<status status="PASS" starttime="20170509 13:09:25.609" endtime="20170509 13:09:25.797"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:09:25.798">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" starttime="20170509 13:09:25.797" endtime="20170509 13:09:25.798"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:09:25.800">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170509 13:09:25.799" endtime="20170509 13:09:25.800"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:09:25.801">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170509 13:09:25.801" endtime="20170509 13:09:25.801"></status>
</kw>
<status status="PASS" starttime="20170509 13:09:25.800" endtime="20170509 13:09:25.801"></status>
</kw>
<status status="PASS" starttime="20170509 13:09:25.799" endtime="20170509 13:09:25.801"></status>
</kw>
<status status="PASS" starttime="20170509 13:09:25.798" endtime="20170509 13:09:25.801"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:09:25.867">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170509 13:09:25.867">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:09:25.801" endtime="20170509 13:09:25.867"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:09:25.870">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170509 13:09:25.869" endtime="20170509 13:09:25.870"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:09:25.871">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170509 13:09:25.870" endtime="20170509 13:09:25.871"></status>
</kw>
<status status="PASS" starttime="20170509 13:09:25.870" endtime="20170509 13:09:25.871"></status>
</kw>
<status status="PASS" starttime="20170509 13:09:25.868" endtime="20170509 13:09:25.871"></status>
</kw>
<status status="PASS" starttime="20170509 13:09:25.868" endtime="20170509 13:09:25.871"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:09:25.871">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:09:25.608" endtime="20170509 13:09:25.871"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:09:25.872">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:09:25.871" endtime="20170509 13:09:25.872"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:09:25.872">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170509 13:09:25.872">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170509 13:09:25.872">${content} = {u'data': u'FW Progress, Baseboard Init', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170509 13:09:25.872" endtime="20170509 13:09:25.873"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:09:25.873">${state} = FW Progress, Baseboard Init</msg>
<status status="PASS" starttime="20170509 13:09:25.607" endtime="20170509 13:09:25.873"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:09:25.873">${boot_progress} = FW Progress, Baseboard Init</msg>
<status status="PASS" starttime="20170509 13:09:25.607" endtime="20170509 13:09:25.873"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170509 13:09:25.874">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status status="FAIL" starttime="20170509 13:09:25.873" endtime="20170509 13:09:25.874"></status>
</kw>
<status status="FAIL" starttime="20170509 13:09:25.606" endtime="20170509 13:09:25.874"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:09:35.882">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170509 13:09:35.882" endtime="20170509 13:09:35.883"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:09:35.883">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170509 13:09:35.883" endtime="20170509 13:09:35.883"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:09:35.884">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170509 13:09:35.884" endtime="20170509 13:09:35.884"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:09:35.885">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170509 13:09:35.885" endtime="20170509 13:09:35.885"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:09:36.065">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170509 13:09:35.886" endtime="20170509 13:09:36.066"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:09:36.066">${status} = PASS</msg>
<msg level="INFO" timestamp="20170509 13:09:36.066">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:09:35.885" endtime="20170509 13:09:36.066"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:09:36.067">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:09:36.066" endtime="20170509 13:09:36.067"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:09:36.067">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:09:36.067" endtime="20170509 13:09:36.067"></status>
</kw>
<status status="PASS" starttime="20170509 13:09:35.879" endtime="20170509 13:09:36.068"></status>
</kw>
<status status="PASS" starttime="20170509 13:09:35.878" endtime="20170509 13:09:36.068"></status>
</kw>
<status status="PASS" starttime="20170509 13:09:35.877" endtime="20170509 13:09:36.068"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:09:36.069">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" starttime="20170509 13:09:36.068" endtime="20170509 13:09:36.069"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:09:36.071">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170509 13:09:36.070" endtime="20170509 13:09:36.071"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:09:36.071">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170509 13:09:36.071" endtime="20170509 13:09:36.072"></status>
</kw>
<status status="PASS" starttime="20170509 13:09:36.071" endtime="20170509 13:09:36.072"></status>
</kw>
<status status="PASS" starttime="20170509 13:09:36.069" endtime="20170509 13:09:36.072"></status>
</kw>
<status status="PASS" starttime="20170509 13:09:36.069" endtime="20170509 13:09:36.072"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:09:36.138">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170509 13:09:36.139">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:09:36.072" endtime="20170509 13:09:36.139"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:09:36.141">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170509 13:09:36.140" endtime="20170509 13:09:36.141"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:09:36.142">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170509 13:09:36.141" endtime="20170509 13:09:36.142"></status>
</kw>
<status status="PASS" starttime="20170509 13:09:36.141" endtime="20170509 13:09:36.142"></status>
</kw>
<status status="PASS" starttime="20170509 13:09:36.140" endtime="20170509 13:09:36.142"></status>
</kw>
<status status="PASS" starttime="20170509 13:09:36.139" endtime="20170509 13:09:36.143"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:09:36.143">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:09:35.877" endtime="20170509 13:09:36.143"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:09:36.144">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:09:36.143" endtime="20170509 13:09:36.144"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:09:36.144">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170509 13:09:36.145">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170509 13:09:36.145">${content} = {u'data': u'FW Progress, Baseboard Init', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170509 13:09:36.144" endtime="20170509 13:09:36.145"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:09:36.145">${state} = FW Progress, Baseboard Init</msg>
<status status="PASS" starttime="20170509 13:09:35.876" endtime="20170509 13:09:36.145"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:09:36.145">${boot_progress} = FW Progress, Baseboard Init</msg>
<status status="PASS" starttime="20170509 13:09:35.875" endtime="20170509 13:09:36.145"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170509 13:09:36.146">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status status="FAIL" starttime="20170509 13:09:36.145" endtime="20170509 13:09:36.146"></status>
</kw>
<status status="FAIL" starttime="20170509 13:09:35.874" endtime="20170509 13:09:36.146"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:09:46.151">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170509 13:09:46.151" endtime="20170509 13:09:46.151"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:09:46.152">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170509 13:09:46.152" endtime="20170509 13:09:46.152"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:09:46.153">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170509 13:09:46.152" endtime="20170509 13:09:46.153"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:09:46.153">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170509 13:09:46.153" endtime="20170509 13:09:46.153"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:09:46.799">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170509 13:09:46.154" endtime="20170509 13:09:46.799"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:09:46.799">${status} = PASS</msg>
<msg level="INFO" timestamp="20170509 13:09:46.799">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:09:46.153" endtime="20170509 13:09:46.799"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:09:46.800">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:09:46.799" endtime="20170509 13:09:46.800"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:09:46.800">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:09:46.800" endtime="20170509 13:09:46.801"></status>
</kw>
<status status="PASS" starttime="20170509 13:09:46.150" endtime="20170509 13:09:46.801"></status>
</kw>
<status status="PASS" starttime="20170509 13:09:46.150" endtime="20170509 13:09:46.801"></status>
</kw>
<status status="PASS" starttime="20170509 13:09:46.149" endtime="20170509 13:09:46.801"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:09:46.802">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" starttime="20170509 13:09:46.802" endtime="20170509 13:09:46.802"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:09:46.805">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170509 13:09:46.804" endtime="20170509 13:09:46.805"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:09:46.806">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170509 13:09:46.806" endtime="20170509 13:09:46.806"></status>
</kw>
<status status="PASS" starttime="20170509 13:09:46.805" endtime="20170509 13:09:46.806"></status>
</kw>
<status status="PASS" starttime="20170509 13:09:46.803" endtime="20170509 13:09:46.806"></status>
</kw>
<status status="PASS" starttime="20170509 13:09:46.803" endtime="20170509 13:09:46.806"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:09:46.993">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170509 13:09:46.993">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:09:46.806" endtime="20170509 13:09:46.993"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:09:46.995">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170509 13:09:46.994" endtime="20170509 13:09:46.995"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:09:46.996">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170509 13:09:46.996" endtime="20170509 13:09:46.996"></status>
</kw>
<status status="PASS" starttime="20170509 13:09:46.995" endtime="20170509 13:09:46.996"></status>
</kw>
<status status="PASS" starttime="20170509 13:09:46.994" endtime="20170509 13:09:46.996"></status>
</kw>
<status status="PASS" starttime="20170509 13:09:46.993" endtime="20170509 13:09:46.996"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:09:46.996">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:09:46.148" endtime="20170509 13:09:46.996"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:09:46.997">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:09:46.997" endtime="20170509 13:09:46.997"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:09:46.998">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170509 13:09:46.998">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170509 13:09:46.998">${content} = {u'data': u'FW Progress, Baseboard Init', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170509 13:09:46.997" endtime="20170509 13:09:46.998"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:09:46.998">${state} = FW Progress, Baseboard Init</msg>
<status status="PASS" starttime="20170509 13:09:46.148" endtime="20170509 13:09:46.998"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:09:46.998">${boot_progress} = FW Progress, Baseboard Init</msg>
<status status="PASS" starttime="20170509 13:09:46.147" endtime="20170509 13:09:46.998"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170509 13:09:46.999">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status status="FAIL" starttime="20170509 13:09:46.999" endtime="20170509 13:09:46.999"></status>
</kw>
<status status="FAIL" starttime="20170509 13:09:46.147" endtime="20170509 13:09:46.999"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:09:57.004">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170509 13:09:57.004" endtime="20170509 13:09:57.004"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:09:57.005">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170509 13:09:57.005" endtime="20170509 13:09:57.005"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:09:57.006">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170509 13:09:57.005" endtime="20170509 13:09:57.006"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:09:57.006">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170509 13:09:57.006" endtime="20170509 13:09:57.006"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:09:57.190">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170509 13:09:57.007" endtime="20170509 13:09:57.190"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:09:57.190">${status} = PASS</msg>
<msg level="INFO" timestamp="20170509 13:09:57.190">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:09:57.007" endtime="20170509 13:09:57.190"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:09:57.191">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:09:57.191" endtime="20170509 13:09:57.191"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:09:57.192">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:09:57.191" endtime="20170509 13:09:57.192"></status>
</kw>
<status status="PASS" starttime="20170509 13:09:57.003" endtime="20170509 13:09:57.192"></status>
</kw>
<status status="PASS" starttime="20170509 13:09:57.002" endtime="20170509 13:09:57.192"></status>
</kw>
<status status="PASS" starttime="20170509 13:09:57.002" endtime="20170509 13:09:57.192"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:09:57.193">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" starttime="20170509 13:09:57.192" endtime="20170509 13:09:57.193"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:09:57.195">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170509 13:09:57.194" endtime="20170509 13:09:57.195"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:09:57.196">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170509 13:09:57.195" endtime="20170509 13:09:57.196"></status>
</kw>
<status status="PASS" starttime="20170509 13:09:57.195" endtime="20170509 13:09:57.196"></status>
</kw>
<status status="PASS" starttime="20170509 13:09:57.193" endtime="20170509 13:09:57.196"></status>
</kw>
<status status="PASS" starttime="20170509 13:09:57.193" endtime="20170509 13:09:57.196"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:09:57.340">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170509 13:09:57.340">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:09:57.196" endtime="20170509 13:09:57.340"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:09:57.342">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170509 13:09:57.341" endtime="20170509 13:09:57.342"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:09:57.343">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170509 13:09:57.342" endtime="20170509 13:09:57.343"></status>
</kw>
<status status="PASS" starttime="20170509 13:09:57.342" endtime="20170509 13:09:57.343"></status>
</kw>
<status status="PASS" starttime="20170509 13:09:57.341" endtime="20170509 13:09:57.343"></status>
</kw>
<status status="PASS" starttime="20170509 13:09:57.340" endtime="20170509 13:09:57.343"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:09:57.343">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:09:57.001" endtime="20170509 13:09:57.343"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:09:57.344">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:09:57.344" endtime="20170509 13:09:57.344"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:09:57.345">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170509 13:09:57.345">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170509 13:09:57.345">${content} = {u'data': u'FW Progress, Baseboard Init', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170509 13:09:57.344" endtime="20170509 13:09:57.345"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:09:57.345">${state} = FW Progress, Baseboard Init</msg>
<status status="PASS" starttime="20170509 13:09:57.001" endtime="20170509 13:09:57.345"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:09:57.345">${boot_progress} = FW Progress, Baseboard Init</msg>
<status status="PASS" starttime="20170509 13:09:57.000" endtime="20170509 13:09:57.345"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170509 13:09:57.346">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status status="FAIL" starttime="20170509 13:09:57.346" endtime="20170509 13:09:57.346"></status>
</kw>
<status status="FAIL" starttime="20170509 13:09:57.000" endtime="20170509 13:09:57.347"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:10:07.351">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170509 13:10:07.351" endtime="20170509 13:10:07.352"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:10:07.352">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170509 13:10:07.352" endtime="20170509 13:10:07.352"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:10:07.353">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170509 13:10:07.353" endtime="20170509 13:10:07.353"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:10:07.354">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170509 13:10:07.353" endtime="20170509 13:10:07.354"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:10:07.534">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170509 13:10:07.354" endtime="20170509 13:10:07.534"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:10:07.534">${status} = PASS</msg>
<msg level="INFO" timestamp="20170509 13:10:07.534">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:10:07.354" endtime="20170509 13:10:07.534"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:10:07.534">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:10:07.534" endtime="20170509 13:10:07.535"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:10:07.535">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:10:07.535" endtime="20170509 13:10:07.536"></status>
</kw>
<status status="PASS" starttime="20170509 13:10:07.350" endtime="20170509 13:10:07.536"></status>
</kw>
<status status="PASS" starttime="20170509 13:10:07.350" endtime="20170509 13:10:07.536"></status>
</kw>
<status status="PASS" starttime="20170509 13:10:07.349" endtime="20170509 13:10:07.536"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:10:07.538">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" starttime="20170509 13:10:07.536" endtime="20170509 13:10:07.538"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:10:07.541">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170509 13:10:07.540" endtime="20170509 13:10:07.541"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:10:07.541">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170509 13:10:07.541" endtime="20170509 13:10:07.542"></status>
</kw>
<status status="PASS" starttime="20170509 13:10:07.541" endtime="20170509 13:10:07.542"></status>
</kw>
<status status="PASS" starttime="20170509 13:10:07.539" endtime="20170509 13:10:07.542"></status>
</kw>
<status status="PASS" starttime="20170509 13:10:07.539" endtime="20170509 13:10:07.542"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:10:07.609">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170509 13:10:07.609">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:10:07.542" endtime="20170509 13:10:07.609"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:10:07.611">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170509 13:10:07.610" endtime="20170509 13:10:07.611"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:10:07.612">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170509 13:10:07.611" endtime="20170509 13:10:07.612"></status>
</kw>
<status status="PASS" starttime="20170509 13:10:07.611" endtime="20170509 13:10:07.612"></status>
</kw>
<status status="PASS" starttime="20170509 13:10:07.610" endtime="20170509 13:10:07.612"></status>
</kw>
<status status="PASS" starttime="20170509 13:10:07.609" endtime="20170509 13:10:07.612"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:10:07.612">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:10:07.349" endtime="20170509 13:10:07.612"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:10:07.613">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:10:07.613" endtime="20170509 13:10:07.613"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:10:07.613">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170509 13:10:07.614">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170509 13:10:07.614">${content} = {u'data': u'FW Progress, Baseboard Init', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170509 13:10:07.613" endtime="20170509 13:10:07.614"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:10:07.614">${state} = FW Progress, Baseboard Init</msg>
<status status="PASS" starttime="20170509 13:10:07.348" endtime="20170509 13:10:07.614"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:10:07.614">${boot_progress} = FW Progress, Baseboard Init</msg>
<status status="PASS" starttime="20170509 13:10:07.348" endtime="20170509 13:10:07.614"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170509 13:10:07.615">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status status="FAIL" starttime="20170509 13:10:07.614" endtime="20170509 13:10:07.615"></status>
</kw>
<status status="FAIL" starttime="20170509 13:10:07.347" endtime="20170509 13:10:07.615"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:10:17.620">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170509 13:10:17.620" endtime="20170509 13:10:17.620"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:10:17.621">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170509 13:10:17.621" endtime="20170509 13:10:17.621"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:10:17.622">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170509 13:10:17.621" endtime="20170509 13:10:17.622"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:10:17.622">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170509 13:10:17.622" endtime="20170509 13:10:17.622"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:10:17.801">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170509 13:10:17.623" endtime="20170509 13:10:17.801"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:10:17.801">${status} = PASS</msg>
<msg level="INFO" timestamp="20170509 13:10:17.801">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:10:17.623" endtime="20170509 13:10:17.801"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:10:17.802">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:10:17.801" endtime="20170509 13:10:17.802"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:10:17.802">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:10:17.802" endtime="20170509 13:10:17.803"></status>
</kw>
<status status="PASS" starttime="20170509 13:10:17.619" endtime="20170509 13:10:17.803"></status>
</kw>
<status status="PASS" starttime="20170509 13:10:17.618" endtime="20170509 13:10:17.803"></status>
</kw>
<status status="PASS" starttime="20170509 13:10:17.618" endtime="20170509 13:10:17.803"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:10:17.803">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" starttime="20170509 13:10:17.803" endtime="20170509 13:10:17.803"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:10:17.805">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170509 13:10:17.805" endtime="20170509 13:10:17.805"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:10:17.806">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170509 13:10:17.806" endtime="20170509 13:10:17.806"></status>
</kw>
<status status="PASS" starttime="20170509 13:10:17.806" endtime="20170509 13:10:17.807"></status>
</kw>
<status status="PASS" starttime="20170509 13:10:17.804" endtime="20170509 13:10:17.807"></status>
</kw>
<status status="PASS" starttime="20170509 13:10:17.804" endtime="20170509 13:10:17.807"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:10:17.873">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170509 13:10:17.873">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:10:17.807" endtime="20170509 13:10:17.873"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:10:17.875">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170509 13:10:17.874" endtime="20170509 13:10:17.875"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:10:17.876">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170509 13:10:17.876" endtime="20170509 13:10:17.876"></status>
</kw>
<status status="PASS" starttime="20170509 13:10:17.875" endtime="20170509 13:10:17.876"></status>
</kw>
<status status="PASS" starttime="20170509 13:10:17.874" endtime="20170509 13:10:17.876"></status>
</kw>
<status status="PASS" starttime="20170509 13:10:17.873" endtime="20170509 13:10:17.876"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:10:17.877">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:10:17.617" endtime="20170509 13:10:17.877"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:10:17.877">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:10:17.877" endtime="20170509 13:10:17.878"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:10:17.878">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170509 13:10:17.878">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170509 13:10:17.879">${content} = {u'data': u'FW Progress, Baseboard Init', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170509 13:10:17.878" endtime="20170509 13:10:17.879"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:10:17.879">${state} = FW Progress, Baseboard Init</msg>
<status status="PASS" starttime="20170509 13:10:17.616" endtime="20170509 13:10:17.879"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:10:17.879">${boot_progress} = FW Progress, Baseboard Init</msg>
<status status="PASS" starttime="20170509 13:10:17.616" endtime="20170509 13:10:17.879"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170509 13:10:17.880">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status status="FAIL" starttime="20170509 13:10:17.880" endtime="20170509 13:10:17.880"></status>
</kw>
<status status="FAIL" starttime="20170509 13:10:17.615" endtime="20170509 13:10:17.881"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:10:27.885">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170509 13:10:27.885" endtime="20170509 13:10:27.885"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:10:27.886">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170509 13:10:27.886" endtime="20170509 13:10:27.886"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:10:27.887">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170509 13:10:27.886" endtime="20170509 13:10:27.887"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:10:27.887">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170509 13:10:27.887" endtime="20170509 13:10:27.887"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:10:28.066">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170509 13:10:27.888" endtime="20170509 13:10:28.067"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:10:28.067">${status} = PASS</msg>
<msg level="INFO" timestamp="20170509 13:10:28.067">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:10:27.888" endtime="20170509 13:10:28.067"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:10:28.067">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:10:28.067" endtime="20170509 13:10:28.068"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:10:28.068">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:10:28.068" endtime="20170509 13:10:28.068"></status>
</kw>
<status status="PASS" starttime="20170509 13:10:27.884" endtime="20170509 13:10:28.068"></status>
</kw>
<status status="PASS" starttime="20170509 13:10:27.884" endtime="20170509 13:10:28.068"></status>
</kw>
<status status="PASS" starttime="20170509 13:10:27.883" endtime="20170509 13:10:28.069"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:10:28.069">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" starttime="20170509 13:10:28.069" endtime="20170509 13:10:28.069"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:10:28.071">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170509 13:10:28.071" endtime="20170509 13:10:28.071"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:10:28.072">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170509 13:10:28.072" endtime="20170509 13:10:28.072"></status>
</kw>
<status status="PASS" starttime="20170509 13:10:28.072" endtime="20170509 13:10:28.072"></status>
</kw>
<status status="PASS" starttime="20170509 13:10:28.070" endtime="20170509 13:10:28.073"></status>
</kw>
<status status="PASS" starttime="20170509 13:10:28.069" endtime="20170509 13:10:28.073"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:10:28.139">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170509 13:10:28.139">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:10:28.073" endtime="20170509 13:10:28.139"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:10:28.141">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170509 13:10:28.140" endtime="20170509 13:10:28.141"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:10:28.142">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170509 13:10:28.141" endtime="20170509 13:10:28.142"></status>
</kw>
<status status="PASS" starttime="20170509 13:10:28.141" endtime="20170509 13:10:28.142"></status>
</kw>
<status status="PASS" starttime="20170509 13:10:28.140" endtime="20170509 13:10:28.142"></status>
</kw>
<status status="PASS" starttime="20170509 13:10:28.139" endtime="20170509 13:10:28.142"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:10:28.142">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:10:27.883" endtime="20170509 13:10:28.142"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:10:28.143">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:10:28.142" endtime="20170509 13:10:28.143"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:10:28.143">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170509 13:10:28.143">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170509 13:10:28.144">${content} = {u'data': u'FW Progress, Baseboard Init', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170509 13:10:28.143" endtime="20170509 13:10:28.144"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:10:28.144">${state} = FW Progress, Baseboard Init</msg>
<status status="PASS" starttime="20170509 13:10:27.882" endtime="20170509 13:10:28.144"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:10:28.144">${boot_progress} = FW Progress, Baseboard Init</msg>
<status status="PASS" starttime="20170509 13:10:27.882" endtime="20170509 13:10:28.144"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170509 13:10:28.145">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status status="FAIL" starttime="20170509 13:10:28.144" endtime="20170509 13:10:28.145"></status>
</kw>
<status status="FAIL" starttime="20170509 13:10:27.881" endtime="20170509 13:10:28.145"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:10:38.151">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170509 13:10:38.150" endtime="20170509 13:10:38.151"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:10:38.152">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170509 13:10:38.151" endtime="20170509 13:10:38.152"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:10:38.152">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170509 13:10:38.152" endtime="20170509 13:10:38.152"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:10:38.153">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170509 13:10:38.153" endtime="20170509 13:10:38.153"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:10:38.376">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170509 13:10:38.154" endtime="20170509 13:10:38.376"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:10:38.376">${status} = PASS</msg>
<msg level="INFO" timestamp="20170509 13:10:38.376">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:10:38.153" endtime="20170509 13:10:38.377"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:10:38.377">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:10:38.377" endtime="20170509 13:10:38.377"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:10:38.378">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:10:38.378" endtime="20170509 13:10:38.378"></status>
</kw>
<status status="PASS" starttime="20170509 13:10:38.149" endtime="20170509 13:10:38.378"></status>
</kw>
<status status="PASS" starttime="20170509 13:10:38.149" endtime="20170509 13:10:38.378"></status>
</kw>
<status status="PASS" starttime="20170509 13:10:38.148" endtime="20170509 13:10:38.378"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:10:38.379">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" starttime="20170509 13:10:38.379" endtime="20170509 13:10:38.379"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:10:38.381">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170509 13:10:38.380" endtime="20170509 13:10:38.381"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:10:38.382">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170509 13:10:38.382" endtime="20170509 13:10:38.382"></status>
</kw>
<status status="PASS" starttime="20170509 13:10:38.381" endtime="20170509 13:10:38.382"></status>
</kw>
<status status="PASS" starttime="20170509 13:10:38.380" endtime="20170509 13:10:38.383"></status>
</kw>
<status status="PASS" starttime="20170509 13:10:38.379" endtime="20170509 13:10:38.383"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:10:38.529">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170509 13:10:38.529">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:10:38.383" endtime="20170509 13:10:38.529"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:10:38.531">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170509 13:10:38.530" endtime="20170509 13:10:38.531"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:10:38.532">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170509 13:10:38.532" endtime="20170509 13:10:38.532"></status>
</kw>
<status status="PASS" starttime="20170509 13:10:38.531" endtime="20170509 13:10:38.532"></status>
</kw>
<status status="PASS" starttime="20170509 13:10:38.530" endtime="20170509 13:10:38.533"></status>
</kw>
<status status="PASS" starttime="20170509 13:10:38.529" endtime="20170509 13:10:38.533"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:10:38.533">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:10:38.147" endtime="20170509 13:10:38.533"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:10:38.533">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:10:38.533" endtime="20170509 13:10:38.534"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:10:38.534">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170509 13:10:38.534">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170509 13:10:38.534">${content} = {u'data': u'FW Progress, Baseboard Init', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170509 13:10:38.534" endtime="20170509 13:10:38.534"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:10:38.535">${state} = FW Progress, Baseboard Init</msg>
<status status="PASS" starttime="20170509 13:10:38.147" endtime="20170509 13:10:38.535"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:10:38.535">${boot_progress} = FW Progress, Baseboard Init</msg>
<status status="PASS" starttime="20170509 13:10:38.146" endtime="20170509 13:10:38.535"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170509 13:10:38.535">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status status="FAIL" starttime="20170509 13:10:38.535" endtime="20170509 13:10:38.536"></status>
</kw>
<status status="FAIL" starttime="20170509 13:10:38.145" endtime="20170509 13:10:38.536"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:10:48.540">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170509 13:10:48.540" endtime="20170509 13:10:48.541"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:10:48.541">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170509 13:10:48.541" endtime="20170509 13:10:48.542"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:10:48.542">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170509 13:10:48.542" endtime="20170509 13:10:48.542"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:10:48.543">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170509 13:10:48.542" endtime="20170509 13:10:48.543"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:10:49.172">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170509 13:10:48.543" endtime="20170509 13:10:49.172"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:10:49.172">${status} = PASS</msg>
<msg level="INFO" timestamp="20170509 13:10:49.172">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:10:48.543" endtime="20170509 13:10:49.172"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:10:49.173">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:10:49.172" endtime="20170509 13:10:49.173"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:10:49.174">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:10:49.173" endtime="20170509 13:10:49.174"></status>
</kw>
<status status="PASS" starttime="20170509 13:10:48.540" endtime="20170509 13:10:49.174"></status>
</kw>
<status status="PASS" starttime="20170509 13:10:48.539" endtime="20170509 13:10:49.174"></status>
</kw>
<status status="PASS" starttime="20170509 13:10:48.538" endtime="20170509 13:10:49.174"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:10:49.175">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" starttime="20170509 13:10:49.175" endtime="20170509 13:10:49.175"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:10:49.177">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170509 13:10:49.177" endtime="20170509 13:10:49.177"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:10:49.178">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170509 13:10:49.178" endtime="20170509 13:10:49.178"></status>
</kw>
<status status="PASS" starttime="20170509 13:10:49.177" endtime="20170509 13:10:49.178"></status>
</kw>
<status status="PASS" starttime="20170509 13:10:49.176" endtime="20170509 13:10:49.179"></status>
</kw>
<status status="PASS" starttime="20170509 13:10:49.176" endtime="20170509 13:10:49.179"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:10:49.356">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170509 13:10:49.356">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:10:49.179" endtime="20170509 13:10:49.356"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:10:49.358">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170509 13:10:49.358" endtime="20170509 13:10:49.358"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:10:49.359">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170509 13:10:49.359" endtime="20170509 13:10:49.359"></status>
</kw>
<status status="PASS" starttime="20170509 13:10:49.358" endtime="20170509 13:10:49.359"></status>
</kw>
<status status="PASS" starttime="20170509 13:10:49.357" endtime="20170509 13:10:49.359"></status>
</kw>
<status status="PASS" starttime="20170509 13:10:49.357" endtime="20170509 13:10:49.359"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:10:49.360">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:10:48.538" endtime="20170509 13:10:49.360"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:10:49.360">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:10:49.360" endtime="20170509 13:10:49.360"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:10:49.361">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170509 13:10:49.361">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170509 13:10:49.361">${content} = {u'data': u'FW Progress, Baseboard Init', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170509 13:10:49.361" endtime="20170509 13:10:49.361"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:10:49.361">${state} = FW Progress, Baseboard Init</msg>
<status status="PASS" starttime="20170509 13:10:48.537" endtime="20170509 13:10:49.361"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:10:49.362">${boot_progress} = FW Progress, Baseboard Init</msg>
<status status="PASS" starttime="20170509 13:10:48.537" endtime="20170509 13:10:49.362"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170509 13:10:49.362">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status status="FAIL" starttime="20170509 13:10:49.362" endtime="20170509 13:10:49.362"></status>
</kw>
<status status="FAIL" starttime="20170509 13:10:48.536" endtime="20170509 13:10:49.363"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:10:59.369">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170509 13:10:59.369" endtime="20170509 13:10:59.370"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:10:59.370">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170509 13:10:59.370" endtime="20170509 13:10:59.371"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:10:59.371">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170509 13:10:59.371" endtime="20170509 13:10:59.371"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:10:59.372">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170509 13:10:59.371" endtime="20170509 13:10:59.372"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:10:59.570">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170509 13:10:59.372" endtime="20170509 13:10:59.570"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:10:59.570">${status} = PASS</msg>
<msg level="INFO" timestamp="20170509 13:10:59.570">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:10:59.372" endtime="20170509 13:10:59.570"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:10:59.570">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:10:59.570" endtime="20170509 13:10:59.571"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:10:59.571">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:10:59.571" endtime="20170509 13:10:59.571"></status>
</kw>
<status status="PASS" starttime="20170509 13:10:59.366" endtime="20170509 13:10:59.571"></status>
</kw>
<status status="PASS" starttime="20170509 13:10:59.366" endtime="20170509 13:10:59.571"></status>
</kw>
<status status="PASS" starttime="20170509 13:10:59.365" endtime="20170509 13:10:59.572"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:10:59.573">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" starttime="20170509 13:10:59.572" endtime="20170509 13:10:59.573"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:10:59.575">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170509 13:10:59.574" endtime="20170509 13:10:59.575"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:10:59.575">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170509 13:10:59.575" endtime="20170509 13:10:59.576"></status>
</kw>
<status status="PASS" starttime="20170509 13:10:59.575" endtime="20170509 13:10:59.576"></status>
</kw>
<status status="PASS" starttime="20170509 13:10:59.573" endtime="20170509 13:10:59.576"></status>
</kw>
<status status="PASS" starttime="20170509 13:10:59.573" endtime="20170509 13:10:59.576"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:10:59.644">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170509 13:10:59.644">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:10:59.576" endtime="20170509 13:10:59.644"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:10:59.646">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170509 13:10:59.645" endtime="20170509 13:10:59.646"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:10:59.647">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170509 13:10:59.646" endtime="20170509 13:10:59.647"></status>
</kw>
<status status="PASS" starttime="20170509 13:10:59.646" endtime="20170509 13:10:59.647"></status>
</kw>
<status status="PASS" starttime="20170509 13:10:59.645" endtime="20170509 13:10:59.647"></status>
</kw>
<status status="PASS" starttime="20170509 13:10:59.644" endtime="20170509 13:10:59.647"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:10:59.647">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:10:59.365" endtime="20170509 13:10:59.647"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:10:59.648">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:10:59.648" endtime="20170509 13:10:59.648"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:10:59.649">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170509 13:10:59.649">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170509 13:10:59.649">${content} = {u'data': u'FW Progress, Baseboard Init', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170509 13:10:59.648" endtime="20170509 13:10:59.649"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:10:59.649">${state} = FW Progress, Baseboard Init</msg>
<status status="PASS" starttime="20170509 13:10:59.364" endtime="20170509 13:10:59.649"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:10:59.649">${boot_progress} = FW Progress, Baseboard Init</msg>
<status status="PASS" starttime="20170509 13:10:59.364" endtime="20170509 13:10:59.649"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170509 13:10:59.650">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status status="FAIL" starttime="20170509 13:10:59.650" endtime="20170509 13:10:59.651"></status>
</kw>
<status status="FAIL" starttime="20170509 13:10:59.363" endtime="20170509 13:10:59.651"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:11:09.655">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170509 13:11:09.655" endtime="20170509 13:11:09.656"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:11:09.656">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170509 13:11:09.656" endtime="20170509 13:11:09.656"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:11:09.657">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170509 13:11:09.656" endtime="20170509 13:11:09.657"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:11:09.657">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170509 13:11:09.657" endtime="20170509 13:11:09.657"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:11:09.849">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170509 13:11:09.658" endtime="20170509 13:11:09.849"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:11:09.850">${status} = PASS</msg>
<msg level="INFO" timestamp="20170509 13:11:09.850">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:11:09.658" endtime="20170509 13:11:09.850"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:11:09.850">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:11:09.850" endtime="20170509 13:11:09.850"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:11:09.851">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:11:09.851" endtime="20170509 13:11:09.852"></status>
</kw>
<status status="PASS" starttime="20170509 13:11:09.654" endtime="20170509 13:11:09.852"></status>
</kw>
<status status="PASS" starttime="20170509 13:11:09.654" endtime="20170509 13:11:09.852"></status>
</kw>
<status status="PASS" starttime="20170509 13:11:09.653" endtime="20170509 13:11:09.852"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:11:09.853">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" starttime="20170509 13:11:09.853" endtime="20170509 13:11:09.853"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:11:09.856">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170509 13:11:09.855" endtime="20170509 13:11:09.856"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:11:09.856">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170509 13:11:09.856" endtime="20170509 13:11:09.857"></status>
</kw>
<status status="PASS" starttime="20170509 13:11:09.856" endtime="20170509 13:11:09.857"></status>
</kw>
<status status="PASS" starttime="20170509 13:11:09.854" endtime="20170509 13:11:09.857"></status>
</kw>
<status status="PASS" starttime="20170509 13:11:09.854" endtime="20170509 13:11:09.857"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:11:09.923">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170509 13:11:09.923">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:11:09.857" endtime="20170509 13:11:09.923"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:11:09.925">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170509 13:11:09.924" endtime="20170509 13:11:09.925"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:11:09.926">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170509 13:11:09.925" endtime="20170509 13:11:09.926"></status>
</kw>
<status status="PASS" starttime="20170509 13:11:09.925" endtime="20170509 13:11:09.926"></status>
</kw>
<status status="PASS" starttime="20170509 13:11:09.924" endtime="20170509 13:11:09.926"></status>
</kw>
<status status="PASS" starttime="20170509 13:11:09.923" endtime="20170509 13:11:09.926"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:11:09.926">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:11:09.653" endtime="20170509 13:11:09.926"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:11:09.927">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:11:09.927" endtime="20170509 13:11:09.927"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:11:09.927">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170509 13:11:09.927">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170509 13:11:09.928">${content} = {u'data': u'FW Progress, Baseboard Init', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170509 13:11:09.927" endtime="20170509 13:11:09.928"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:11:09.928">${state} = FW Progress, Baseboard Init</msg>
<status status="PASS" starttime="20170509 13:11:09.652" endtime="20170509 13:11:09.928"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:11:09.928">${boot_progress} = FW Progress, Baseboard Init</msg>
<status status="PASS" starttime="20170509 13:11:09.652" endtime="20170509 13:11:09.928"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170509 13:11:09.929">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status status="FAIL" starttime="20170509 13:11:09.928" endtime="20170509 13:11:09.929"></status>
</kw>
<status status="FAIL" starttime="20170509 13:11:09.651" endtime="20170509 13:11:09.929"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:11:19.934">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170509 13:11:19.933" endtime="20170509 13:11:19.934"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:11:19.935">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170509 13:11:19.935" endtime="20170509 13:11:19.935"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:11:19.936">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170509 13:11:19.935" endtime="20170509 13:11:19.936"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:11:19.936">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170509 13:11:19.936" endtime="20170509 13:11:19.936"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:11:20.123">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170509 13:11:19.937" endtime="20170509 13:11:20.123"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:11:20.123">${status} = PASS</msg>
<msg level="INFO" timestamp="20170509 13:11:20.123">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:11:19.937" endtime="20170509 13:11:20.123"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:11:20.124">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:11:20.123" endtime="20170509 13:11:20.124"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:11:20.125">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:11:20.124" endtime="20170509 13:11:20.125"></status>
</kw>
<status status="PASS" starttime="20170509 13:11:19.933" endtime="20170509 13:11:20.125"></status>
</kw>
<status status="PASS" starttime="20170509 13:11:19.932" endtime="20170509 13:11:20.125"></status>
</kw>
<status status="PASS" starttime="20170509 13:11:19.932" endtime="20170509 13:11:20.125"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:11:20.125">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" starttime="20170509 13:11:20.125" endtime="20170509 13:11:20.126"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:11:20.128">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170509 13:11:20.127" endtime="20170509 13:11:20.128"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:11:20.128">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170509 13:11:20.128" endtime="20170509 13:11:20.129"></status>
</kw>
<status status="PASS" starttime="20170509 13:11:20.128" endtime="20170509 13:11:20.129"></status>
</kw>
<status status="PASS" starttime="20170509 13:11:20.126" endtime="20170509 13:11:20.129"></status>
</kw>
<status status="PASS" starttime="20170509 13:11:20.126" endtime="20170509 13:11:20.129"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:11:20.196">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170509 13:11:20.196">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:11:20.129" endtime="20170509 13:11:20.196"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:11:20.197">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170509 13:11:20.197" endtime="20170509 13:11:20.198"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:11:20.198">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170509 13:11:20.198" endtime="20170509 13:11:20.199"></status>
</kw>
<status status="PASS" starttime="20170509 13:11:20.198" endtime="20170509 13:11:20.199"></status>
</kw>
<status status="PASS" starttime="20170509 13:11:20.197" endtime="20170509 13:11:20.199"></status>
</kw>
<status status="PASS" starttime="20170509 13:11:20.196" endtime="20170509 13:11:20.199"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:11:20.199">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:11:19.931" endtime="20170509 13:11:20.199"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:11:20.200">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:11:20.199" endtime="20170509 13:11:20.200"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:11:20.200">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170509 13:11:20.200">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170509 13:11:20.200">${content} = {u'data': u'FW Progress, Baseboard Init', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170509 13:11:20.200" endtime="20170509 13:11:20.200"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:11:20.201">${state} = FW Progress, Baseboard Init</msg>
<status status="PASS" starttime="20170509 13:11:19.930" endtime="20170509 13:11:20.201"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:11:20.201">${boot_progress} = FW Progress, Baseboard Init</msg>
<status status="PASS" starttime="20170509 13:11:19.930" endtime="20170509 13:11:20.201"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170509 13:11:20.202">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status status="FAIL" starttime="20170509 13:11:20.201" endtime="20170509 13:11:20.202"></status>
</kw>
<status status="FAIL" starttime="20170509 13:11:19.929" endtime="20170509 13:11:20.202"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:11:30.207">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170509 13:11:30.206" endtime="20170509 13:11:30.207"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:11:30.208">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170509 13:11:30.207" endtime="20170509 13:11:30.208"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:11:30.208">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170509 13:11:30.208" endtime="20170509 13:11:30.208"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:11:30.209">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170509 13:11:30.208" endtime="20170509 13:11:30.209"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:11:30.406">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170509 13:11:30.210" endtime="20170509 13:11:30.406"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:11:30.406">${status} = PASS</msg>
<msg level="INFO" timestamp="20170509 13:11:30.406">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:11:30.209" endtime="20170509 13:11:30.406"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:11:30.407">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:11:30.406" endtime="20170509 13:11:30.407"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:11:30.407">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:11:30.407" endtime="20170509 13:11:30.408"></status>
</kw>
<status status="PASS" starttime="20170509 13:11:30.206" endtime="20170509 13:11:30.408"></status>
</kw>
<status status="PASS" starttime="20170509 13:11:30.205" endtime="20170509 13:11:30.408"></status>
</kw>
<status status="PASS" starttime="20170509 13:11:30.205" endtime="20170509 13:11:30.408"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:11:30.409">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" starttime="20170509 13:11:30.408" endtime="20170509 13:11:30.409"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:11:30.411">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170509 13:11:30.410" endtime="20170509 13:11:30.411"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:11:30.412">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170509 13:11:30.411" endtime="20170509 13:11:30.412"></status>
</kw>
<status status="PASS" starttime="20170509 13:11:30.411" endtime="20170509 13:11:30.412"></status>
</kw>
<status status="PASS" starttime="20170509 13:11:30.410" endtime="20170509 13:11:30.412"></status>
</kw>
<status status="PASS" starttime="20170509 13:11:30.409" endtime="20170509 13:11:30.412"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:11:30.480">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170509 13:11:30.480">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:11:30.412" endtime="20170509 13:11:30.480"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:11:30.481">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170509 13:11:30.481" endtime="20170509 13:11:30.482"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:11:30.482">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170509 13:11:30.482" endtime="20170509 13:11:30.483"></status>
</kw>
<status status="PASS" starttime="20170509 13:11:30.482" endtime="20170509 13:11:30.483"></status>
</kw>
<status status="PASS" starttime="20170509 13:11:30.481" endtime="20170509 13:11:30.483"></status>
</kw>
<status status="PASS" starttime="20170509 13:11:30.480" endtime="20170509 13:11:30.483"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:11:30.483">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:11:30.204" endtime="20170509 13:11:30.483"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:11:30.484">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:11:30.483" endtime="20170509 13:11:30.484"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:11:30.484">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170509 13:11:30.484">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170509 13:11:30.484">${content} = {u'data': u'FW Progress, Baseboard Init', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170509 13:11:30.484" endtime="20170509 13:11:30.484"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:11:30.485">${state} = FW Progress, Baseboard Init</msg>
<status status="PASS" starttime="20170509 13:11:30.204" endtime="20170509 13:11:30.485"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:11:30.485">${boot_progress} = FW Progress, Baseboard Init</msg>
<status status="PASS" starttime="20170509 13:11:30.203" endtime="20170509 13:11:30.485"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170509 13:11:30.486">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status status="FAIL" starttime="20170509 13:11:30.485" endtime="20170509 13:11:30.486"></status>
</kw>
<status status="FAIL" starttime="20170509 13:11:30.203" endtime="20170509 13:11:30.486"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:11:40.492">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170509 13:11:40.492" endtime="20170509 13:11:40.493"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:11:40.493">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170509 13:11:40.493" endtime="20170509 13:11:40.494"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:11:40.494">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170509 13:11:40.494" endtime="20170509 13:11:40.494"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:11:40.495">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170509 13:11:40.494" endtime="20170509 13:11:40.495"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:11:40.993">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170509 13:11:40.495" endtime="20170509 13:11:40.994"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:11:40.994">${status} = PASS</msg>
<msg level="INFO" timestamp="20170509 13:11:40.994">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:11:40.495" endtime="20170509 13:11:40.994"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:11:40.994">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:11:40.994" endtime="20170509 13:11:40.995"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:11:40.995">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:11:40.995" endtime="20170509 13:11:40.995"></status>
</kw>
<status status="PASS" starttime="20170509 13:11:40.491" endtime="20170509 13:11:40.995"></status>
</kw>
<status status="PASS" starttime="20170509 13:11:40.490" endtime="20170509 13:11:40.995"></status>
</kw>
<status status="PASS" starttime="20170509 13:11:40.489" endtime="20170509 13:11:40.996"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:11:40.996">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" starttime="20170509 13:11:40.996" endtime="20170509 13:11:40.996"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:11:40.998">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170509 13:11:40.998" endtime="20170509 13:11:40.998"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:11:40.999">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170509 13:11:40.999" endtime="20170509 13:11:40.999"></status>
</kw>
<status status="PASS" starttime="20170509 13:11:40.999" endtime="20170509 13:11:41.000"></status>
</kw>
<status status="PASS" starttime="20170509 13:11:40.997" endtime="20170509 13:11:41.000"></status>
</kw>
<status status="PASS" starttime="20170509 13:11:40.996" endtime="20170509 13:11:41.000"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:11:41.124">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170509 13:11:41.124">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:11:41.000" endtime="20170509 13:11:41.124"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:11:41.126">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170509 13:11:41.126" endtime="20170509 13:11:41.126"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:11:41.128">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170509 13:11:41.127" endtime="20170509 13:11:41.128"></status>
</kw>
<status status="PASS" starttime="20170509 13:11:41.126" endtime="20170509 13:11:41.128"></status>
</kw>
<status status="PASS" starttime="20170509 13:11:41.125" endtime="20170509 13:11:41.128"></status>
</kw>
<status status="PASS" starttime="20170509 13:11:41.125" endtime="20170509 13:11:41.128"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:11:41.128">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:11:40.488" endtime="20170509 13:11:41.128"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:11:41.129">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:11:41.128" endtime="20170509 13:11:41.129"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:11:41.129">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170509 13:11:41.129">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170509 13:11:41.130">${content} = {u'data': u'FW Progress, Baseboard Init', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170509 13:11:41.129" endtime="20170509 13:11:41.130"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:11:41.130">${state} = FW Progress, Baseboard Init</msg>
<status status="PASS" starttime="20170509 13:11:40.488" endtime="20170509 13:11:41.130"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:11:41.130">${boot_progress} = FW Progress, Baseboard Init</msg>
<status status="PASS" starttime="20170509 13:11:40.487" endtime="20170509 13:11:41.130"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170509 13:11:41.131">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status status="FAIL" starttime="20170509 13:11:41.130" endtime="20170509 13:11:41.131"></status>
</kw>
<status status="FAIL" starttime="20170509 13:11:40.486" endtime="20170509 13:11:41.131"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:11:51.136">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170509 13:11:51.136" endtime="20170509 13:11:51.137"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:11:51.137">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170509 13:11:51.137" endtime="20170509 13:11:51.137"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:11:51.138">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170509 13:11:51.137" endtime="20170509 13:11:51.138"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:11:51.138">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170509 13:11:51.138" endtime="20170509 13:11:51.138"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:11:51.774">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170509 13:11:51.139" endtime="20170509 13:11:51.774"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:11:51.774">${status} = PASS</msg>
<msg level="INFO" timestamp="20170509 13:11:51.775">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:11:51.139" endtime="20170509 13:11:51.775"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:11:51.775">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:11:51.775" endtime="20170509 13:11:51.775"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:11:51.776">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:11:51.775" endtime="20170509 13:11:51.776"></status>
</kw>
<status status="PASS" starttime="20170509 13:11:51.135" endtime="20170509 13:11:51.776"></status>
</kw>
<status status="PASS" starttime="20170509 13:11:51.135" endtime="20170509 13:11:51.776"></status>
</kw>
<status status="PASS" starttime="20170509 13:11:51.134" endtime="20170509 13:11:51.776"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:11:51.777">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" starttime="20170509 13:11:51.777" endtime="20170509 13:11:51.777"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:11:51.779">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170509 13:11:51.778" endtime="20170509 13:11:51.779"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:11:51.780">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170509 13:11:51.780" endtime="20170509 13:11:51.780"></status>
</kw>
<status status="PASS" starttime="20170509 13:11:51.779" endtime="20170509 13:11:51.780"></status>
</kw>
<status status="PASS" starttime="20170509 13:11:51.778" endtime="20170509 13:11:51.780"></status>
</kw>
<status status="PASS" starttime="20170509 13:11:51.777" endtime="20170509 13:11:51.780"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:11:51.954">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170509 13:11:51.954">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:11:51.781" endtime="20170509 13:11:51.954"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:11:51.956">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170509 13:11:51.956" endtime="20170509 13:11:51.956"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:11:51.957">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170509 13:11:51.957" endtime="20170509 13:11:51.957"></status>
</kw>
<status status="PASS" starttime="20170509 13:11:51.956" endtime="20170509 13:11:51.957"></status>
</kw>
<status status="PASS" starttime="20170509 13:11:51.955" endtime="20170509 13:11:51.957"></status>
</kw>
<status status="PASS" starttime="20170509 13:11:51.955" endtime="20170509 13:11:51.957"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:11:51.958">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:11:51.133" endtime="20170509 13:11:51.958"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:11:51.958">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:11:51.958" endtime="20170509 13:11:51.958"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:11:51.959">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170509 13:11:51.959">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170509 13:11:51.959">${content} = {u'data': u'FW Progress, Baseboard Init', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170509 13:11:51.959" endtime="20170509 13:11:51.959"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:11:51.959">${state} = FW Progress, Baseboard Init</msg>
<status status="PASS" starttime="20170509 13:11:51.133" endtime="20170509 13:11:51.959"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:11:51.960">${boot_progress} = FW Progress, Baseboard Init</msg>
<status status="PASS" starttime="20170509 13:11:51.132" endtime="20170509 13:11:51.960"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170509 13:11:51.960">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status status="FAIL" starttime="20170509 13:11:51.960" endtime="20170509 13:11:51.960"></status>
</kw>
<status status="FAIL" starttime="20170509 13:11:51.132" endtime="20170509 13:11:51.961"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:12:01.966">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170509 13:12:01.966" endtime="20170509 13:12:01.966"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:12:01.967">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170509 13:12:01.967" endtime="20170509 13:12:01.967"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:12:01.968">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170509 13:12:01.967" endtime="20170509 13:12:01.968"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:12:01.968">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170509 13:12:01.968" endtime="20170509 13:12:01.968"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:12:02.152">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170509 13:12:01.969" endtime="20170509 13:12:02.152"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:12:02.152">${status} = PASS</msg>
<msg level="INFO" timestamp="20170509 13:12:02.152">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:12:01.968" endtime="20170509 13:12:02.152"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:12:02.153">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:12:02.152" endtime="20170509 13:12:02.153"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:12:02.153">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:12:02.153" endtime="20170509 13:12:02.154"></status>
</kw>
<status status="PASS" starttime="20170509 13:12:01.965" endtime="20170509 13:12:02.154"></status>
</kw>
<status status="PASS" starttime="20170509 13:12:01.964" endtime="20170509 13:12:02.154"></status>
</kw>
<status status="PASS" starttime="20170509 13:12:01.963" endtime="20170509 13:12:02.154"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:12:02.154">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" starttime="20170509 13:12:02.154" endtime="20170509 13:12:02.154"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:12:02.157">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170509 13:12:02.156" endtime="20170509 13:12:02.157"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:12:02.158">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170509 13:12:02.157" endtime="20170509 13:12:02.158"></status>
</kw>
<status status="PASS" starttime="20170509 13:12:02.157" endtime="20170509 13:12:02.158"></status>
</kw>
<status status="PASS" starttime="20170509 13:12:02.155" endtime="20170509 13:12:02.158"></status>
</kw>
<status status="PASS" starttime="20170509 13:12:02.155" endtime="20170509 13:12:02.158"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:12:02.225">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170509 13:12:02.225">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:12:02.158" endtime="20170509 13:12:02.225"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:12:02.227">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170509 13:12:02.226" endtime="20170509 13:12:02.227"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:12:02.228">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170509 13:12:02.228" endtime="20170509 13:12:02.228"></status>
</kw>
<status status="PASS" starttime="20170509 13:12:02.227" endtime="20170509 13:12:02.228"></status>
</kw>
<status status="PASS" starttime="20170509 13:12:02.226" endtime="20170509 13:12:02.228"></status>
</kw>
<status status="PASS" starttime="20170509 13:12:02.225" endtime="20170509 13:12:02.228"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:12:02.229">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:12:01.963" endtime="20170509 13:12:02.229"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:12:02.229">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:12:02.229" endtime="20170509 13:12:02.229"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:12:02.230">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170509 13:12:02.230">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170509 13:12:02.230">${content} = {u'data': u'FW Progress, Baseboard Init', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170509 13:12:02.229" endtime="20170509 13:12:02.230"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:12:02.230">${state} = FW Progress, Baseboard Init</msg>
<status status="PASS" starttime="20170509 13:12:01.962" endtime="20170509 13:12:02.230"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:12:02.230">${boot_progress} = FW Progress, Baseboard Init</msg>
<status status="PASS" starttime="20170509 13:12:01.962" endtime="20170509 13:12:02.231"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170509 13:12:02.231">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status status="FAIL" starttime="20170509 13:12:02.231" endtime="20170509 13:12:02.231"></status>
</kw>
<status status="FAIL" starttime="20170509 13:12:01.961" endtime="20170509 13:12:02.231"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:12:12.237">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170509 13:12:12.237" endtime="20170509 13:12:12.238"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:12:12.238">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170509 13:12:12.238" endtime="20170509 13:12:12.239"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:12:12.239">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170509 13:12:12.239" endtime="20170509 13:12:12.239"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:12:12.240">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170509 13:12:12.240" endtime="20170509 13:12:12.240"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:12:12.425">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170509 13:12:12.241" endtime="20170509 13:12:12.425"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:12:12.425">${status} = PASS</msg>
<msg level="INFO" timestamp="20170509 13:12:12.426">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:12:12.241" endtime="20170509 13:12:12.426"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:12:12.426">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:12:12.426" endtime="20170509 13:12:12.426"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:12:12.427">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:12:12.426" endtime="20170509 13:12:12.427"></status>
</kw>
<status status="PASS" starttime="20170509 13:12:12.236" endtime="20170509 13:12:12.427"></status>
</kw>
<status status="PASS" starttime="20170509 13:12:12.235" endtime="20170509 13:12:12.427"></status>
</kw>
<status status="PASS" starttime="20170509 13:12:12.235" endtime="20170509 13:12:12.427"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:12:12.428">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" starttime="20170509 13:12:12.428" endtime="20170509 13:12:12.428"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:12:12.430">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170509 13:12:12.429" endtime="20170509 13:12:12.430"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:12:12.431">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170509 13:12:12.431" endtime="20170509 13:12:12.431"></status>
</kw>
<status status="PASS" starttime="20170509 13:12:12.430" endtime="20170509 13:12:12.431"></status>
</kw>
<status status="PASS" starttime="20170509 13:12:12.429" endtime="20170509 13:12:12.431"></status>
</kw>
<status status="PASS" starttime="20170509 13:12:12.428" endtime="20170509 13:12:12.431"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:12:12.498">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170509 13:12:12.498">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:12:12.431" endtime="20170509 13:12:12.498"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:12:12.500">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170509 13:12:12.499" endtime="20170509 13:12:12.500"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:12:12.501">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170509 13:12:12.501" endtime="20170509 13:12:12.501"></status>
</kw>
<status status="PASS" starttime="20170509 13:12:12.500" endtime="20170509 13:12:12.501"></status>
</kw>
<status status="PASS" starttime="20170509 13:12:12.499" endtime="20170509 13:12:12.501"></status>
</kw>
<status status="PASS" starttime="20170509 13:12:12.499" endtime="20170509 13:12:12.501"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:12:12.501">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:12:12.233" endtime="20170509 13:12:12.502"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:12:12.502">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:12:12.502" endtime="20170509 13:12:12.502"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:12:12.503">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170509 13:12:12.503">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170509 13:12:12.503">${content} = {u'data': u'FW Progress, Baseboard Init', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170509 13:12:12.502" endtime="20170509 13:12:12.503"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:12:12.503">${state} = FW Progress, Baseboard Init</msg>
<status status="PASS" starttime="20170509 13:12:12.233" endtime="20170509 13:12:12.503"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:12:12.503">${boot_progress} = FW Progress, Baseboard Init</msg>
<status status="PASS" starttime="20170509 13:12:12.232" endtime="20170509 13:12:12.503"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170509 13:12:12.504">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status status="FAIL" starttime="20170509 13:12:12.504" endtime="20170509 13:12:12.504"></status>
</kw>
<status status="FAIL" starttime="20170509 13:12:12.232" endtime="20170509 13:12:12.504"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:12:22.512">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170509 13:12:22.511" endtime="20170509 13:12:22.512"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:12:22.513">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170509 13:12:22.513" endtime="20170509 13:12:22.513"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:12:22.513">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170509 13:12:22.513" endtime="20170509 13:12:22.514"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:12:22.514">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170509 13:12:22.514" endtime="20170509 13:12:22.514"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:12:22.696">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170509 13:12:22.515" endtime="20170509 13:12:22.696"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:12:22.697">${status} = PASS</msg>
<msg level="INFO" timestamp="20170509 13:12:22.697">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:12:22.514" endtime="20170509 13:12:22.697"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:12:22.697">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:12:22.697" endtime="20170509 13:12:22.697"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:12:22.698">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:12:22.698" endtime="20170509 13:12:22.698"></status>
</kw>
<status status="PASS" starttime="20170509 13:12:22.508" endtime="20170509 13:12:22.698"></status>
</kw>
<status status="PASS" starttime="20170509 13:12:22.508" endtime="20170509 13:12:22.698"></status>
</kw>
<status status="PASS" starttime="20170509 13:12:22.507" endtime="20170509 13:12:22.698"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:12:22.699">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" starttime="20170509 13:12:22.699" endtime="20170509 13:12:22.699"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:12:22.701">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170509 13:12:22.700" endtime="20170509 13:12:22.701"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:12:22.702">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170509 13:12:22.702" endtime="20170509 13:12:22.702"></status>
</kw>
<status status="PASS" starttime="20170509 13:12:22.701" endtime="20170509 13:12:22.702"></status>
</kw>
<status status="PASS" starttime="20170509 13:12:22.700" endtime="20170509 13:12:22.702"></status>
</kw>
<status status="PASS" starttime="20170509 13:12:22.699" endtime="20170509 13:12:22.702"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:12:22.770">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170509 13:12:22.770">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:12:22.703" endtime="20170509 13:12:22.770"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:12:22.772">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170509 13:12:22.771" endtime="20170509 13:12:22.772"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:12:22.773">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170509 13:12:22.773" endtime="20170509 13:12:22.773"></status>
</kw>
<status status="PASS" starttime="20170509 13:12:22.772" endtime="20170509 13:12:22.773"></status>
</kw>
<status status="PASS" starttime="20170509 13:12:22.771" endtime="20170509 13:12:22.774"></status>
</kw>
<status status="PASS" starttime="20170509 13:12:22.771" endtime="20170509 13:12:22.774"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:12:22.774">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:12:22.507" endtime="20170509 13:12:22.774"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:12:22.774">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:12:22.774" endtime="20170509 13:12:22.775"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:12:22.775">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170509 13:12:22.775">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170509 13:12:22.775">${content} = {u'data': u'FW Progress, Baseboard Init', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170509 13:12:22.775" endtime="20170509 13:12:22.775"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:12:22.775">${state} = FW Progress, Baseboard Init</msg>
<status status="PASS" starttime="20170509 13:12:22.506" endtime="20170509 13:12:22.776"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:12:22.776">${boot_progress} = FW Progress, Baseboard Init</msg>
<status status="PASS" starttime="20170509 13:12:22.506" endtime="20170509 13:12:22.776"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170509 13:12:22.776">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status status="FAIL" starttime="20170509 13:12:22.776" endtime="20170509 13:12:22.776"></status>
</kw>
<status status="FAIL" starttime="20170509 13:12:22.505" endtime="20170509 13:12:22.777"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:12:32.781">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170509 13:12:32.781" endtime="20170509 13:12:32.782"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:12:32.782">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170509 13:12:32.782" endtime="20170509 13:12:32.782"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:12:32.783">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170509 13:12:32.783" endtime="20170509 13:12:32.783"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:12:32.784">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170509 13:12:32.783" endtime="20170509 13:12:32.784"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:12:32.997">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170509 13:12:32.784" endtime="20170509 13:12:32.998"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:12:32.998">${status} = PASS</msg>
<msg level="INFO" timestamp="20170509 13:12:32.998">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:12:32.784" endtime="20170509 13:12:32.998"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:12:32.999">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:12:32.998" endtime="20170509 13:12:32.999"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:12:32.999">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:12:32.999" endtime="20170509 13:12:33.000"></status>
</kw>
<status status="PASS" starttime="20170509 13:12:32.780" endtime="20170509 13:12:33.000"></status>
</kw>
<status status="PASS" starttime="20170509 13:12:32.780" endtime="20170509 13:12:33.000"></status>
</kw>
<status status="PASS" starttime="20170509 13:12:32.779" endtime="20170509 13:12:33.000"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:12:33.001">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" starttime="20170509 13:12:33.000" endtime="20170509 13:12:33.001"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:12:33.003">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170509 13:12:33.002" endtime="20170509 13:12:33.003"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:12:33.004">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170509 13:12:33.004" endtime="20170509 13:12:33.004"></status>
</kw>
<status status="PASS" starttime="20170509 13:12:33.003" endtime="20170509 13:12:33.004"></status>
</kw>
<status status="PASS" starttime="20170509 13:12:33.002" endtime="20170509 13:12:33.004"></status>
</kw>
<status status="PASS" starttime="20170509 13:12:33.001" endtime="20170509 13:12:33.004"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:12:33.073">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170509 13:12:33.073">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:12:33.004" endtime="20170509 13:12:33.073"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:12:33.075">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170509 13:12:33.074" endtime="20170509 13:12:33.075"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:12:33.076">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170509 13:12:33.076" endtime="20170509 13:12:33.076"></status>
</kw>
<status status="PASS" starttime="20170509 13:12:33.075" endtime="20170509 13:12:33.076"></status>
</kw>
<status status="PASS" starttime="20170509 13:12:33.074" endtime="20170509 13:12:33.076"></status>
</kw>
<status status="PASS" starttime="20170509 13:12:33.073" endtime="20170509 13:12:33.076"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:12:33.076">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:12:32.779" endtime="20170509 13:12:33.076"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:12:33.077">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:12:33.077" endtime="20170509 13:12:33.077"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:12:33.078">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170509 13:12:33.078">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170509 13:12:33.078">${content} = {u'data': u'FW Progress, Baseboard Init', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170509 13:12:33.077" endtime="20170509 13:12:33.078"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:12:33.078">${state} = FW Progress, Baseboard Init</msg>
<status status="PASS" starttime="20170509 13:12:32.778" endtime="20170509 13:12:33.078"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:12:33.078">${boot_progress} = FW Progress, Baseboard Init</msg>
<status status="PASS" starttime="20170509 13:12:32.778" endtime="20170509 13:12:33.078"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170509 13:12:33.079">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status status="FAIL" starttime="20170509 13:12:33.079" endtime="20170509 13:12:33.079"></status>
</kw>
<status status="FAIL" starttime="20170509 13:12:32.777" endtime="20170509 13:12:33.079"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:12:43.086">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170509 13:12:43.086" endtime="20170509 13:12:43.087"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:12:43.088">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170509 13:12:43.087" endtime="20170509 13:12:43.088"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:12:43.088">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170509 13:12:43.088" endtime="20170509 13:12:43.088"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:12:43.089">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170509 13:12:43.089" endtime="20170509 13:12:43.089"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:12:43.683">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170509 13:12:43.090" endtime="20170509 13:12:43.683"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:12:43.684">${status} = PASS</msg>
<msg level="INFO" timestamp="20170509 13:12:43.684">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:12:43.090" endtime="20170509 13:12:43.684"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:12:43.684">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:12:43.684" endtime="20170509 13:12:43.684"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:12:43.685">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:12:43.685" endtime="20170509 13:12:43.685"></status>
</kw>
<status status="PASS" starttime="20170509 13:12:43.085" endtime="20170509 13:12:43.685"></status>
</kw>
<status status="PASS" starttime="20170509 13:12:43.084" endtime="20170509 13:12:43.685"></status>
</kw>
<status status="PASS" starttime="20170509 13:12:43.083" endtime="20170509 13:12:43.685"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:12:43.686">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" starttime="20170509 13:12:43.686" endtime="20170509 13:12:43.686"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:12:43.688">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170509 13:12:43.688" endtime="20170509 13:12:43.688"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:12:43.689">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170509 13:12:43.689" endtime="20170509 13:12:43.689"></status>
</kw>
<status status="PASS" starttime="20170509 13:12:43.689" endtime="20170509 13:12:43.690"></status>
</kw>
<status status="PASS" starttime="20170509 13:12:43.687" endtime="20170509 13:12:43.690"></status>
</kw>
<status status="PASS" starttime="20170509 13:12:43.687" endtime="20170509 13:12:43.690"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:12:43.858">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170509 13:12:43.858">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:12:43.690" endtime="20170509 13:12:43.859"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:12:43.861">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170509 13:12:43.860" endtime="20170509 13:12:43.861"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:12:43.861">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170509 13:12:43.861" endtime="20170509 13:12:43.862"></status>
</kw>
<status status="PASS" starttime="20170509 13:12:43.861" endtime="20170509 13:12:43.862"></status>
</kw>
<status status="PASS" starttime="20170509 13:12:43.859" endtime="20170509 13:12:43.862"></status>
</kw>
<status status="PASS" starttime="20170509 13:12:43.859" endtime="20170509 13:12:43.862"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:12:43.862">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:12:43.082" endtime="20170509 13:12:43.862"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:12:43.863">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:12:43.862" endtime="20170509 13:12:43.863"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:12:43.863">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170509 13:12:43.863">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170509 13:12:43.863">${content} = {u'data': u'FW Progress, Baseboard Init', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170509 13:12:43.863" endtime="20170509 13:12:43.863"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:12:43.864">${state} = FW Progress, Baseboard Init</msg>
<status status="PASS" starttime="20170509 13:12:43.082" endtime="20170509 13:12:43.864"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:12:43.864">${boot_progress} = FW Progress, Baseboard Init</msg>
<status status="PASS" starttime="20170509 13:12:43.081" endtime="20170509 13:12:43.864"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170509 13:12:43.865">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status status="FAIL" starttime="20170509 13:12:43.864" endtime="20170509 13:12:43.865"></status>
</kw>
<status status="FAIL" starttime="20170509 13:12:43.081" endtime="20170509 13:12:43.865"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:12:53.870">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170509 13:12:53.870" endtime="20170509 13:12:53.870"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:12:53.871">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170509 13:12:53.871" endtime="20170509 13:12:53.871"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:12:53.872">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170509 13:12:53.871" endtime="20170509 13:12:53.872"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:12:53.872">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170509 13:12:53.872" endtime="20170509 13:12:53.872"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:12:54.460">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170509 13:12:53.873" endtime="20170509 13:12:54.460"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:12:54.460">${status} = PASS</msg>
<msg level="INFO" timestamp="20170509 13:12:54.460">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:12:53.872" endtime="20170509 13:12:54.460"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:12:54.461">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:12:54.460" endtime="20170509 13:12:54.461"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:12:54.462">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:12:54.461" endtime="20170509 13:12:54.462"></status>
</kw>
<status status="PASS" starttime="20170509 13:12:53.869" endtime="20170509 13:12:54.462"></status>
</kw>
<status status="PASS" starttime="20170509 13:12:53.869" endtime="20170509 13:12:54.462"></status>
</kw>
<status status="PASS" starttime="20170509 13:12:53.868" endtime="20170509 13:12:54.462"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:12:54.463">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" starttime="20170509 13:12:54.462" endtime="20170509 13:12:54.463"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:12:54.465">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170509 13:12:54.464" endtime="20170509 13:12:54.465"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:12:54.466">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170509 13:12:54.465" endtime="20170509 13:12:54.466"></status>
</kw>
<status status="PASS" starttime="20170509 13:12:54.465" endtime="20170509 13:12:54.466"></status>
</kw>
<status status="PASS" starttime="20170509 13:12:54.464" endtime="20170509 13:12:54.466"></status>
</kw>
<status status="PASS" starttime="20170509 13:12:54.463" endtime="20170509 13:12:54.466"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:12:54.534">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170509 13:12:54.534">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:12:54.466" endtime="20170509 13:12:54.534"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:12:54.536">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170509 13:12:54.536" endtime="20170509 13:12:54.536"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:12:54.537">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170509 13:12:54.537" endtime="20170509 13:12:54.537"></status>
</kw>
<status status="PASS" starttime="20170509 13:12:54.536" endtime="20170509 13:12:54.537"></status>
</kw>
<status status="PASS" starttime="20170509 13:12:54.535" endtime="20170509 13:12:54.537"></status>
</kw>
<status status="PASS" starttime="20170509 13:12:54.535" endtime="20170509 13:12:54.537"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:12:54.538">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:12:53.867" endtime="20170509 13:12:54.538"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:12:54.538">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:12:54.538" endtime="20170509 13:12:54.538"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:12:54.539">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170509 13:12:54.539">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170509 13:12:54.539">${content} = {u'data': u'FW Progress, Baseboard Init', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170509 13:12:54.539" endtime="20170509 13:12:54.539"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:12:54.539">${state} = FW Progress, Baseboard Init</msg>
<status status="PASS" starttime="20170509 13:12:53.867" endtime="20170509 13:12:54.539"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:12:54.540">${boot_progress} = FW Progress, Baseboard Init</msg>
<status status="PASS" starttime="20170509 13:12:53.866" endtime="20170509 13:12:54.540"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170509 13:12:54.540">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status status="FAIL" starttime="20170509 13:12:54.540" endtime="20170509 13:12:54.540"></status>
</kw>
<status status="FAIL" starttime="20170509 13:12:53.866" endtime="20170509 13:12:54.540"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:13:04.545">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170509 13:13:04.545" endtime="20170509 13:13:04.546"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:13:04.546">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170509 13:13:04.546" endtime="20170509 13:13:04.546"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:13:04.547">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170509 13:13:04.547" endtime="20170509 13:13:04.547"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:13:04.548">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170509 13:13:04.547" endtime="20170509 13:13:04.548"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:13:04.727">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170509 13:13:04.548" endtime="20170509 13:13:04.727"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:13:04.727">${status} = PASS</msg>
<msg level="INFO" timestamp="20170509 13:13:04.727">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:13:04.548" endtime="20170509 13:13:04.728"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:13:04.728">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:13:04.728" endtime="20170509 13:13:04.728"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:13:04.729">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:13:04.728" endtime="20170509 13:13:04.729"></status>
</kw>
<status status="PASS" starttime="20170509 13:13:04.544" endtime="20170509 13:13:04.729"></status>
</kw>
<status status="PASS" starttime="20170509 13:13:04.544" endtime="20170509 13:13:04.729"></status>
</kw>
<status status="PASS" starttime="20170509 13:13:04.543" endtime="20170509 13:13:04.729"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:13:04.730">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" starttime="20170509 13:13:04.729" endtime="20170509 13:13:04.730"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:13:04.732">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170509 13:13:04.731" endtime="20170509 13:13:04.732"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:13:04.733">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170509 13:13:04.732" endtime="20170509 13:13:04.733"></status>
</kw>
<status status="PASS" starttime="20170509 13:13:04.732" endtime="20170509 13:13:04.733"></status>
</kw>
<status status="PASS" starttime="20170509 13:13:04.730" endtime="20170509 13:13:04.733"></status>
</kw>
<status status="PASS" starttime="20170509 13:13:04.730" endtime="20170509 13:13:04.733"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:13:04.801">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170509 13:13:04.801">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:13:04.733" endtime="20170509 13:13:04.801"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:13:04.802">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170509 13:13:04.802" endtime="20170509 13:13:04.803"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:13:04.804">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170509 13:13:04.803" endtime="20170509 13:13:04.804"></status>
</kw>
<status status="PASS" starttime="20170509 13:13:04.803" endtime="20170509 13:13:04.804"></status>
</kw>
<status status="PASS" starttime="20170509 13:13:04.802" endtime="20170509 13:13:04.804"></status>
</kw>
<status status="PASS" starttime="20170509 13:13:04.801" endtime="20170509 13:13:04.804"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:13:04.804">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:13:04.542" endtime="20170509 13:13:04.804"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:13:04.805">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:13:04.805" endtime="20170509 13:13:04.805"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:13:04.805">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170509 13:13:04.806">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170509 13:13:04.806">${content} = {u'data': u'FW Progress, Baseboard Init', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170509 13:13:04.805" endtime="20170509 13:13:04.806"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:13:04.806">${state} = FW Progress, Baseboard Init</msg>
<status status="PASS" starttime="20170509 13:13:04.542" endtime="20170509 13:13:04.806"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:13:04.806">${boot_progress} = FW Progress, Baseboard Init</msg>
<status status="PASS" starttime="20170509 13:13:04.542" endtime="20170509 13:13:04.806"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170509 13:13:04.807">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status status="FAIL" starttime="20170509 13:13:04.807" endtime="20170509 13:13:04.807"></status>
</kw>
<status status="FAIL" starttime="20170509 13:13:04.541" endtime="20170509 13:13:04.807"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:13:14.812">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170509 13:13:14.811" endtime="20170509 13:13:14.812"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:13:14.813">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170509 13:13:14.812" endtime="20170509 13:13:14.813"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:13:14.813">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170509 13:13:14.813" endtime="20170509 13:13:14.813"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:13:14.814">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170509 13:13:14.813" endtime="20170509 13:13:14.814"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:13:14.996">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170509 13:13:14.815" endtime="20170509 13:13:14.996"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:13:14.996">${status} = PASS</msg>
<msg level="INFO" timestamp="20170509 13:13:14.996">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:13:14.814" endtime="20170509 13:13:14.996"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:13:14.997">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:13:14.997" endtime="20170509 13:13:14.997"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:13:14.998">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:13:14.997" endtime="20170509 13:13:14.998"></status>
</kw>
<status status="PASS" starttime="20170509 13:13:14.811" endtime="20170509 13:13:14.998"></status>
</kw>
<status status="PASS" starttime="20170509 13:13:14.810" endtime="20170509 13:13:14.998"></status>
</kw>
<status status="PASS" starttime="20170509 13:13:14.810" endtime="20170509 13:13:14.998"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:13:14.999">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" starttime="20170509 13:13:14.998" endtime="20170509 13:13:14.999"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:13:15.001">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170509 13:13:15.000" endtime="20170509 13:13:15.001"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:13:15.002">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170509 13:13:15.002" endtime="20170509 13:13:15.002"></status>
</kw>
<status status="PASS" starttime="20170509 13:13:15.001" endtime="20170509 13:13:15.002"></status>
</kw>
<status status="PASS" starttime="20170509 13:13:14.999" endtime="20170509 13:13:15.002"></status>
</kw>
<status status="PASS" starttime="20170509 13:13:14.999" endtime="20170509 13:13:15.002"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:13:15.070">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170509 13:13:15.070">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:13:15.002" endtime="20170509 13:13:15.070"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:13:15.072">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170509 13:13:15.071" endtime="20170509 13:13:15.072"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:13:15.073">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170509 13:13:15.072" endtime="20170509 13:13:15.073"></status>
</kw>
<status status="PASS" starttime="20170509 13:13:15.072" endtime="20170509 13:13:15.073"></status>
</kw>
<status status="PASS" starttime="20170509 13:13:15.071" endtime="20170509 13:13:15.073"></status>
</kw>
<status status="PASS" starttime="20170509 13:13:15.070" endtime="20170509 13:13:15.073"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:13:15.073">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:13:14.809" endtime="20170509 13:13:15.073"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:13:15.074">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:13:15.073" endtime="20170509 13:13:15.074"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:13:15.074">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170509 13:13:15.074">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170509 13:13:15.075">${content} = {u'data': u'FW Progress, Baseboard Init', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170509 13:13:15.074" endtime="20170509 13:13:15.075"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:13:15.075">${state} = FW Progress, Baseboard Init</msg>
<status status="PASS" starttime="20170509 13:13:14.809" endtime="20170509 13:13:15.075"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:13:15.075">${boot_progress} = FW Progress, Baseboard Init</msg>
<status status="PASS" starttime="20170509 13:13:14.808" endtime="20170509 13:13:15.075"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170509 13:13:15.076">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status status="FAIL" starttime="20170509 13:13:15.075" endtime="20170509 13:13:15.076"></status>
</kw>
<status status="FAIL" starttime="20170509 13:13:14.808" endtime="20170509 13:13:15.076"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:13:25.082">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170509 13:13:25.081" endtime="20170509 13:13:25.082"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:13:25.083">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170509 13:13:25.083" endtime="20170509 13:13:25.083"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:13:25.084">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170509 13:13:25.083" endtime="20170509 13:13:25.084"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:13:25.085">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170509 13:13:25.084" endtime="20170509 13:13:25.085"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:13:25.279">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170509 13:13:25.086" endtime="20170509 13:13:25.279"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:13:25.279">${status} = PASS</msg>
<msg level="INFO" timestamp="20170509 13:13:25.279">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:13:25.085" endtime="20170509 13:13:25.279"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:13:25.280">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:13:25.279" endtime="20170509 13:13:25.280"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:13:25.280">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:13:25.280" endtime="20170509 13:13:25.281"></status>
</kw>
<status status="PASS" starttime="20170509 13:13:25.080" endtime="20170509 13:13:25.281"></status>
</kw>
<status status="PASS" starttime="20170509 13:13:25.080" endtime="20170509 13:13:25.281"></status>
</kw>
<status status="PASS" starttime="20170509 13:13:25.079" endtime="20170509 13:13:25.281"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:13:25.281">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" starttime="20170509 13:13:25.281" endtime="20170509 13:13:25.281"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:13:25.284">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170509 13:13:25.283" endtime="20170509 13:13:25.284"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:13:25.284">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170509 13:13:25.284" endtime="20170509 13:13:25.285"></status>
</kw>
<status status="PASS" starttime="20170509 13:13:25.284" endtime="20170509 13:13:25.285"></status>
</kw>
<status status="PASS" starttime="20170509 13:13:25.282" endtime="20170509 13:13:25.285"></status>
</kw>
<status status="PASS" starttime="20170509 13:13:25.282" endtime="20170509 13:13:25.285"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:13:25.352">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170509 13:13:25.352">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:13:25.285" endtime="20170509 13:13:25.352"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:13:25.354">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170509 13:13:25.353" endtime="20170509 13:13:25.354"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:13:25.355">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170509 13:13:25.355" endtime="20170509 13:13:25.355"></status>
</kw>
<status status="PASS" starttime="20170509 13:13:25.354" endtime="20170509 13:13:25.355"></status>
</kw>
<status status="PASS" starttime="20170509 13:13:25.353" endtime="20170509 13:13:25.355"></status>
</kw>
<status status="PASS" starttime="20170509 13:13:25.352" endtime="20170509 13:13:25.355"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:13:25.355">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:13:25.078" endtime="20170509 13:13:25.355"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:13:25.356">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:13:25.356" endtime="20170509 13:13:25.356"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:13:25.357">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170509 13:13:25.357">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170509 13:13:25.357">${content} = {u'data': u'FW Progress, Baseboard Init', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170509 13:13:25.356" endtime="20170509 13:13:25.357"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:13:25.357">${state} = FW Progress, Baseboard Init</msg>
<status status="PASS" starttime="20170509 13:13:25.078" endtime="20170509 13:13:25.357"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:13:25.357">${boot_progress} = FW Progress, Baseboard Init</msg>
<status status="PASS" starttime="20170509 13:13:25.077" endtime="20170509 13:13:25.357"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170509 13:13:25.358">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status status="FAIL" starttime="20170509 13:13:25.358" endtime="20170509 13:13:25.358"></status>
</kw>
<status status="FAIL" starttime="20170509 13:13:25.077" endtime="20170509 13:13:25.358"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:13:35.364">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170509 13:13:35.363" endtime="20170509 13:13:35.364"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:13:35.365">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170509 13:13:35.364" endtime="20170509 13:13:35.365"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:13:35.366">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170509 13:13:35.365" endtime="20170509 13:13:35.366"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:13:35.366">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170509 13:13:35.366" endtime="20170509 13:13:35.366"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:13:35.546">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170509 13:13:35.367" endtime="20170509 13:13:35.546"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:13:35.546">${status} = PASS</msg>
<msg level="INFO" timestamp="20170509 13:13:35.546">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:13:35.366" endtime="20170509 13:13:35.546"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:13:35.547">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:13:35.547" endtime="20170509 13:13:35.547"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:13:35.548">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:13:35.547" endtime="20170509 13:13:35.548"></status>
</kw>
<status status="PASS" starttime="20170509 13:13:35.363" endtime="20170509 13:13:35.548"></status>
</kw>
<status status="PASS" starttime="20170509 13:13:35.362" endtime="20170509 13:13:35.548"></status>
</kw>
<status status="PASS" starttime="20170509 13:13:35.362" endtime="20170509 13:13:35.548"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:13:35.549">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" starttime="20170509 13:13:35.548" endtime="20170509 13:13:35.549"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:13:35.551">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170509 13:13:35.550" endtime="20170509 13:13:35.551"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:13:35.552">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170509 13:13:35.552" endtime="20170509 13:13:35.552"></status>
</kw>
<status status="PASS" starttime="20170509 13:13:35.551" endtime="20170509 13:13:35.552"></status>
</kw>
<status status="PASS" starttime="20170509 13:13:35.549" endtime="20170509 13:13:35.552"></status>
</kw>
<status status="PASS" starttime="20170509 13:13:35.549" endtime="20170509 13:13:35.552"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:13:35.655">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170509 13:13:35.655">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:13:35.553" endtime="20170509 13:13:35.655"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:13:35.658">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170509 13:13:35.657" endtime="20170509 13:13:35.658"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:13:35.659">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170509 13:13:35.659" endtime="20170509 13:13:35.659"></status>
</kw>
<status status="PASS" starttime="20170509 13:13:35.658" endtime="20170509 13:13:35.659"></status>
</kw>
<status status="PASS" starttime="20170509 13:13:35.656" endtime="20170509 13:13:35.659"></status>
</kw>
<status status="PASS" starttime="20170509 13:13:35.656" endtime="20170509 13:13:35.659"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:13:35.660">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:13:35.361" endtime="20170509 13:13:35.660"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:13:35.660">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:13:35.660" endtime="20170509 13:13:35.660"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:13:35.661">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170509 13:13:35.661">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170509 13:13:35.661">${content} = {u'data': u'FW Progress, Baseboard Init', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170509 13:13:35.661" endtime="20170509 13:13:35.661"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:13:35.661">${state} = FW Progress, Baseboard Init</msg>
<status status="PASS" starttime="20170509 13:13:35.360" endtime="20170509 13:13:35.661"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:13:35.662">${boot_progress} = FW Progress, Baseboard Init</msg>
<status status="PASS" starttime="20170509 13:13:35.360" endtime="20170509 13:13:35.662"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170509 13:13:35.663">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status status="FAIL" starttime="20170509 13:13:35.662" endtime="20170509 13:13:35.663"></status>
</kw>
<status status="FAIL" starttime="20170509 13:13:35.359" endtime="20170509 13:13:35.663"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:13:45.670">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170509 13:13:45.670" endtime="20170509 13:13:45.671"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:13:45.672">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170509 13:13:45.671" endtime="20170509 13:13:45.672"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:13:45.672">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170509 13:13:45.672" endtime="20170509 13:13:45.672"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:13:45.673">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170509 13:13:45.672" endtime="20170509 13:13:45.673"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:13:46.262">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170509 13:13:45.673" endtime="20170509 13:13:46.262"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:13:46.262">${status} = PASS</msg>
<msg level="INFO" timestamp="20170509 13:13:46.262">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:13:45.673" endtime="20170509 13:13:46.262"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:13:46.263">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:13:46.262" endtime="20170509 13:13:46.263"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:13:46.263">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:13:46.263" endtime="20170509 13:13:46.264"></status>
</kw>
<status status="PASS" starttime="20170509 13:13:45.667" endtime="20170509 13:13:46.264"></status>
</kw>
<status status="PASS" starttime="20170509 13:13:45.667" endtime="20170509 13:13:46.264"></status>
</kw>
<status status="PASS" starttime="20170509 13:13:45.666" endtime="20170509 13:13:46.264"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:13:46.264">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" starttime="20170509 13:13:46.264" endtime="20170509 13:13:46.265"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:13:46.267">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170509 13:13:46.266" endtime="20170509 13:13:46.267"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:13:46.267">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170509 13:13:46.267" endtime="20170509 13:13:46.268"></status>
</kw>
<status status="PASS" starttime="20170509 13:13:46.267" endtime="20170509 13:13:46.268"></status>
</kw>
<status status="PASS" starttime="20170509 13:13:46.265" endtime="20170509 13:13:46.268"></status>
</kw>
<status status="PASS" starttime="20170509 13:13:46.265" endtime="20170509 13:13:46.268"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:13:46.445">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170509 13:13:46.445">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:13:46.268" endtime="20170509 13:13:46.445"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:13:46.447">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170509 13:13:46.447" endtime="20170509 13:13:46.447"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:13:46.448">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170509 13:13:46.448" endtime="20170509 13:13:46.448"></status>
</kw>
<status status="PASS" starttime="20170509 13:13:46.447" endtime="20170509 13:13:46.449"></status>
</kw>
<status status="PASS" starttime="20170509 13:13:46.446" endtime="20170509 13:13:46.449"></status>
</kw>
<status status="PASS" starttime="20170509 13:13:46.446" endtime="20170509 13:13:46.449"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:13:46.449">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:13:45.665" endtime="20170509 13:13:46.449"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:13:46.449">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:13:46.449" endtime="20170509 13:13:46.450"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:13:46.450">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170509 13:13:46.450">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170509 13:13:46.450">${content} = {u'data': u'FW Progress, Baseboard Init', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170509 13:13:46.450" endtime="20170509 13:13:46.450"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:13:46.451">${state} = FW Progress, Baseboard Init</msg>
<status status="PASS" starttime="20170509 13:13:45.665" endtime="20170509 13:13:46.451"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:13:46.451">${boot_progress} = FW Progress, Baseboard Init</msg>
<status status="PASS" starttime="20170509 13:13:45.664" endtime="20170509 13:13:46.451"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170509 13:13:46.452">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status status="FAIL" starttime="20170509 13:13:46.452" endtime="20170509 13:13:46.452"></status>
</kw>
<status status="FAIL" starttime="20170509 13:13:45.664" endtime="20170509 13:13:46.452"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:13:56.458">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170509 13:13:56.457" endtime="20170509 13:13:56.458"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:13:56.459">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170509 13:13:56.459" endtime="20170509 13:13:56.459"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:13:56.460">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170509 13:13:56.460" endtime="20170509 13:13:56.460"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:13:56.461">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170509 13:13:56.461" endtime="20170509 13:13:56.461"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:13:56.639">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170509 13:13:56.462" endtime="20170509 13:13:56.639"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:13:56.640">${status} = PASS</msg>
<msg level="INFO" timestamp="20170509 13:13:56.640">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:13:56.461" endtime="20170509 13:13:56.640"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:13:56.640">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:13:56.640" endtime="20170509 13:13:56.640"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:13:56.641">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:13:56.641" endtime="20170509 13:13:56.641"></status>
</kw>
<status status="PASS" starttime="20170509 13:13:56.457" endtime="20170509 13:13:56.641"></status>
</kw>
<status status="PASS" starttime="20170509 13:13:56.456" endtime="20170509 13:13:56.642"></status>
</kw>
<status status="PASS" starttime="20170509 13:13:56.455" endtime="20170509 13:13:56.642"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:13:56.642">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" starttime="20170509 13:13:56.642" endtime="20170509 13:13:56.642"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:13:56.644">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170509 13:13:56.644" endtime="20170509 13:13:56.644"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:13:56.645">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170509 13:13:56.645" endtime="20170509 13:13:56.645"></status>
</kw>
<status status="PASS" starttime="20170509 13:13:56.644" endtime="20170509 13:13:56.645"></status>
</kw>
<status status="PASS" starttime="20170509 13:13:56.643" endtime="20170509 13:13:56.645"></status>
</kw>
<status status="PASS" starttime="20170509 13:13:56.643" endtime="20170509 13:13:56.646"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:13:56.712">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170509 13:13:56.712">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:13:56.646" endtime="20170509 13:13:56.712"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:13:56.713">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170509 13:13:56.713" endtime="20170509 13:13:56.713"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:13:56.715">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170509 13:13:56.715" endtime="20170509 13:13:56.715"></status>
</kw>
<status status="PASS" starttime="20170509 13:13:56.714" endtime="20170509 13:13:56.715"></status>
</kw>
<status status="PASS" starttime="20170509 13:13:56.713" endtime="20170509 13:13:56.715"></status>
</kw>
<status status="PASS" starttime="20170509 13:13:56.712" endtime="20170509 13:13:56.715"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:13:56.716">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:13:56.454" endtime="20170509 13:13:56.716"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:13:56.716">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:13:56.716" endtime="20170509 13:13:56.716"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:13:56.717">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170509 13:13:56.717">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170509 13:13:56.717">${content} = {u'data': u'FW Progress, Baseboard Init', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170509 13:13:56.716" endtime="20170509 13:13:56.717"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:13:56.717">${state} = FW Progress, Baseboard Init</msg>
<status status="PASS" starttime="20170509 13:13:56.454" endtime="20170509 13:13:56.717"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:13:56.717">${boot_progress} = FW Progress, Baseboard Init</msg>
<status status="PASS" starttime="20170509 13:13:56.454" endtime="20170509 13:13:56.717"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170509 13:13:56.718">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status status="FAIL" starttime="20170509 13:13:56.718" endtime="20170509 13:13:56.718"></status>
</kw>
<status status="FAIL" starttime="20170509 13:13:56.453" endtime="20170509 13:13:56.718"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:14:06.725">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170509 13:14:06.724" endtime="20170509 13:14:06.725"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:14:06.726">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170509 13:14:06.726" endtime="20170509 13:14:06.726"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:14:06.727">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170509 13:14:06.726" endtime="20170509 13:14:06.727"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:14:06.728">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170509 13:14:06.727" endtime="20170509 13:14:06.728"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:14:06.931">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170509 13:14:06.729" endtime="20170509 13:14:06.931"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:14:06.932">${status} = PASS</msg>
<msg level="INFO" timestamp="20170509 13:14:06.932">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:14:06.728" endtime="20170509 13:14:06.932"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:14:06.932">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:14:06.932" endtime="20170509 13:14:06.932"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:14:06.933">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:14:06.933" endtime="20170509 13:14:06.933"></status>
</kw>
<status status="PASS" starttime="20170509 13:14:06.723" endtime="20170509 13:14:06.933"></status>
</kw>
<status status="PASS" starttime="20170509 13:14:06.722" endtime="20170509 13:14:06.933"></status>
</kw>
<status status="PASS" starttime="20170509 13:14:06.722" endtime="20170509 13:14:06.933"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:14:06.934">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" starttime="20170509 13:14:06.934" endtime="20170509 13:14:06.934"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:14:06.936">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170509 13:14:06.935" endtime="20170509 13:14:06.936"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:14:06.937">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170509 13:14:06.937" endtime="20170509 13:14:06.937"></status>
</kw>
<status status="PASS" starttime="20170509 13:14:06.936" endtime="20170509 13:14:06.937"></status>
</kw>
<status status="PASS" starttime="20170509 13:14:06.935" endtime="20170509 13:14:06.937"></status>
</kw>
<status status="PASS" starttime="20170509 13:14:06.934" endtime="20170509 13:14:06.937"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:14:07.004">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170509 13:14:07.004">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:14:06.938" endtime="20170509 13:14:07.004"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:14:07.006">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170509 13:14:07.005" endtime="20170509 13:14:07.006"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:14:07.007">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170509 13:14:07.007" endtime="20170509 13:14:07.007"></status>
</kw>
<status status="PASS" starttime="20170509 13:14:07.006" endtime="20170509 13:14:07.008"></status>
</kw>
<status status="PASS" starttime="20170509 13:14:07.005" endtime="20170509 13:14:07.008"></status>
</kw>
<status status="PASS" starttime="20170509 13:14:07.004" endtime="20170509 13:14:07.008"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:14:07.008">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:14:06.721" endtime="20170509 13:14:07.008"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:14:07.009">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:14:07.008" endtime="20170509 13:14:07.009"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:14:07.009">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170509 13:14:07.009">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170509 13:14:07.009">${content} = {u'data': u'FW Progress, Baseboard Init', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170509 13:14:07.009" endtime="20170509 13:14:07.009"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:14:07.010">${state} = FW Progress, Baseboard Init</msg>
<status status="PASS" starttime="20170509 13:14:06.720" endtime="20170509 13:14:07.010"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:14:07.010">${boot_progress} = FW Progress, Baseboard Init</msg>
<status status="PASS" starttime="20170509 13:14:06.720" endtime="20170509 13:14:07.010"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170509 13:14:07.011">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status status="FAIL" starttime="20170509 13:14:07.010" endtime="20170509 13:14:07.011"></status>
</kw>
<status status="FAIL" starttime="20170509 13:14:06.719" endtime="20170509 13:14:07.011"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:14:17.016">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170509 13:14:17.015" endtime="20170509 13:14:17.016"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:14:17.017">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170509 13:14:17.016" endtime="20170509 13:14:17.017"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:14:17.017">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170509 13:14:17.017" endtime="20170509 13:14:17.017"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:14:17.018">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170509 13:14:17.018" endtime="20170509 13:14:17.018"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:14:17.235">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170509 13:14:17.019" endtime="20170509 13:14:17.235"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:14:17.235">${status} = PASS</msg>
<msg level="INFO" timestamp="20170509 13:14:17.235">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:14:17.018" endtime="20170509 13:14:17.235"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:14:17.236">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:14:17.235" endtime="20170509 13:14:17.236"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:14:17.236">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:14:17.236" endtime="20170509 13:14:17.237"></status>
</kw>
<status status="PASS" starttime="20170509 13:14:17.015" endtime="20170509 13:14:17.237"></status>
</kw>
<status status="PASS" starttime="20170509 13:14:17.015" endtime="20170509 13:14:17.237"></status>
</kw>
<status status="PASS" starttime="20170509 13:14:17.014" endtime="20170509 13:14:17.237"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:14:17.238">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" starttime="20170509 13:14:17.238" endtime="20170509 13:14:17.238"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:14:17.240">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170509 13:14:17.239" endtime="20170509 13:14:17.240"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:14:17.241">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170509 13:14:17.241" endtime="20170509 13:14:17.241"></status>
</kw>
<status status="PASS" starttime="20170509 13:14:17.240" endtime="20170509 13:14:17.241"></status>
</kw>
<status status="PASS" starttime="20170509 13:14:17.239" endtime="20170509 13:14:17.241"></status>
</kw>
<status status="PASS" starttime="20170509 13:14:17.238" endtime="20170509 13:14:17.241"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:14:17.308">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170509 13:14:17.308">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:14:17.242" endtime="20170509 13:14:17.308"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:14:17.310">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170509 13:14:17.309" endtime="20170509 13:14:17.310"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:14:17.311">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170509 13:14:17.310" endtime="20170509 13:14:17.311"></status>
</kw>
<status status="PASS" starttime="20170509 13:14:17.310" endtime="20170509 13:14:17.311"></status>
</kw>
<status status="PASS" starttime="20170509 13:14:17.309" endtime="20170509 13:14:17.311"></status>
</kw>
<status status="PASS" starttime="20170509 13:14:17.308" endtime="20170509 13:14:17.311"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:14:17.311">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:14:17.013" endtime="20170509 13:14:17.311"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:14:17.312">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:14:17.312" endtime="20170509 13:14:17.312"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:14:17.313">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170509 13:14:17.313">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170509 13:14:17.313">${content} = {u'data': u'FW Progress, Baseboard Init', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170509 13:14:17.312" endtime="20170509 13:14:17.313"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:14:17.313">${state} = FW Progress, Baseboard Init</msg>
<status status="PASS" starttime="20170509 13:14:17.013" endtime="20170509 13:14:17.313"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:14:17.313">${boot_progress} = FW Progress, Baseboard Init</msg>
<status status="PASS" starttime="20170509 13:14:17.012" endtime="20170509 13:14:17.313"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170509 13:14:17.314">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status status="FAIL" starttime="20170509 13:14:17.314" endtime="20170509 13:14:17.314"></status>
</kw>
<status status="FAIL" starttime="20170509 13:14:17.012" endtime="20170509 13:14:17.314"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:14:27.319">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170509 13:14:27.319" endtime="20170509 13:14:27.319"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:14:27.320">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170509 13:14:27.320" endtime="20170509 13:14:27.320"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:14:27.321">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170509 13:14:27.320" endtime="20170509 13:14:27.321"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:14:27.321">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170509 13:14:27.321" endtime="20170509 13:14:27.321"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:14:27.499">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170509 13:14:27.322" endtime="20170509 13:14:27.499"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:14:27.499">${status} = PASS</msg>
<msg level="INFO" timestamp="20170509 13:14:27.499">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:14:27.321" endtime="20170509 13:14:27.499"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:14:27.500">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:14:27.500" endtime="20170509 13:14:27.500"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:14:27.501">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:14:27.501" endtime="20170509 13:14:27.501"></status>
</kw>
<status status="PASS" starttime="20170509 13:14:27.318" endtime="20170509 13:14:27.502"></status>
</kw>
<status status="PASS" starttime="20170509 13:14:27.317" endtime="20170509 13:14:27.502"></status>
</kw>
<status status="PASS" starttime="20170509 13:14:27.317" endtime="20170509 13:14:27.502"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:14:27.503">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" starttime="20170509 13:14:27.502" endtime="20170509 13:14:27.503"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:14:27.505">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170509 13:14:27.504" endtime="20170509 13:14:27.505"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:14:27.507">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170509 13:14:27.506" endtime="20170509 13:14:27.507"></status>
</kw>
<status status="PASS" starttime="20170509 13:14:27.506" endtime="20170509 13:14:27.507"></status>
</kw>
<status status="PASS" starttime="20170509 13:14:27.504" endtime="20170509 13:14:27.507"></status>
</kw>
<status status="PASS" starttime="20170509 13:14:27.503" endtime="20170509 13:14:27.507"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:14:27.596">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170509 13:14:27.596">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:14:27.507" endtime="20170509 13:14:27.596"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:14:27.597">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170509 13:14:27.597" endtime="20170509 13:14:27.597"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:14:27.599">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170509 13:14:27.598" endtime="20170509 13:14:27.599"></status>
</kw>
<status status="PASS" starttime="20170509 13:14:27.598" endtime="20170509 13:14:27.599"></status>
</kw>
<status status="PASS" starttime="20170509 13:14:27.596" endtime="20170509 13:14:27.599"></status>
</kw>
<status status="PASS" starttime="20170509 13:14:27.596" endtime="20170509 13:14:27.599"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:14:27.599">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:14:27.316" endtime="20170509 13:14:27.599"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:14:27.600">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:14:27.600" endtime="20170509 13:14:27.600"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:14:27.600">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170509 13:14:27.600">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170509 13:14:27.601">${content} = {u'data': u'FW Progress, Baseboard Init', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170509 13:14:27.600" endtime="20170509 13:14:27.601"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:14:27.601">${state} = FW Progress, Baseboard Init</msg>
<status status="PASS" starttime="20170509 13:14:27.315" endtime="20170509 13:14:27.601"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:14:27.601">${boot_progress} = FW Progress, Baseboard Init</msg>
<status status="PASS" starttime="20170509 13:14:27.315" endtime="20170509 13:14:27.601"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170509 13:14:27.602">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status status="FAIL" starttime="20170509 13:14:27.601" endtime="20170509 13:14:27.602"></status>
</kw>
<status status="FAIL" starttime="20170509 13:14:27.315" endtime="20170509 13:14:27.602"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:14:37.607">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170509 13:14:37.606" endtime="20170509 13:14:37.607"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:14:37.608">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170509 13:14:37.607" endtime="20170509 13:14:37.608"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:14:37.608">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170509 13:14:37.608" endtime="20170509 13:14:37.608"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:14:37.609">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170509 13:14:37.609" endtime="20170509 13:14:37.609"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:14:38.318">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170509 13:14:37.610" endtime="20170509 13:14:38.318"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:14:38.319">${status} = PASS</msg>
<msg level="INFO" timestamp="20170509 13:14:38.319">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:14:37.609" endtime="20170509 13:14:38.319"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:14:38.319">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:14:38.319" endtime="20170509 13:14:38.319"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:14:38.320">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:14:38.320" endtime="20170509 13:14:38.320"></status>
</kw>
<status status="PASS" starttime="20170509 13:14:37.606" endtime="20170509 13:14:38.320"></status>
</kw>
<status status="PASS" starttime="20170509 13:14:37.605" endtime="20170509 13:14:38.320"></status>
</kw>
<status status="PASS" starttime="20170509 13:14:37.605" endtime="20170509 13:14:38.321"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:14:38.321">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" starttime="20170509 13:14:38.321" endtime="20170509 13:14:38.321"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:14:38.324">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170509 13:14:38.323" endtime="20170509 13:14:38.324"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:14:38.325">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170509 13:14:38.325" endtime="20170509 13:14:38.326"></status>
</kw>
<status status="PASS" starttime="20170509 13:14:38.324" endtime="20170509 13:14:38.326"></status>
</kw>
<status status="PASS" starttime="20170509 13:14:38.322" endtime="20170509 13:14:38.326"></status>
</kw>
<status status="PASS" starttime="20170509 13:14:38.322" endtime="20170509 13:14:38.326"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:14:38.511">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170509 13:14:38.511">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:14:38.326" endtime="20170509 13:14:38.512"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:14:38.513">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170509 13:14:38.513" endtime="20170509 13:14:38.513"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:14:38.514">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170509 13:14:38.514" endtime="20170509 13:14:38.514"></status>
</kw>
<status status="PASS" starttime="20170509 13:14:38.513" endtime="20170509 13:14:38.514"></status>
</kw>
<status status="PASS" starttime="20170509 13:14:38.512" endtime="20170509 13:14:38.514"></status>
</kw>
<status status="PASS" starttime="20170509 13:14:38.512" endtime="20170509 13:14:38.515"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:14:38.515">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:14:37.604" endtime="20170509 13:14:38.515"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:14:38.515">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:14:38.515" endtime="20170509 13:14:38.515"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:14:38.516">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170509 13:14:38.516">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170509 13:14:38.516">${content} = {u'data': u'FW Progress, Baseboard Init', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170509 13:14:38.516" endtime="20170509 13:14:38.516"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:14:38.517">${state} = FW Progress, Baseboard Init</msg>
<status status="PASS" starttime="20170509 13:14:37.604" endtime="20170509 13:14:38.517"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:14:38.517">${boot_progress} = FW Progress, Baseboard Init</msg>
<status status="PASS" starttime="20170509 13:14:37.603" endtime="20170509 13:14:38.517"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170509 13:14:38.517">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status status="FAIL" starttime="20170509 13:14:38.517" endtime="20170509 13:14:38.517"></status>
</kw>
<status status="FAIL" starttime="20170509 13:14:37.603" endtime="20170509 13:14:38.518"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:14:48.523">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170509 13:14:48.522" endtime="20170509 13:14:48.523"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:14:48.524">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170509 13:14:48.523" endtime="20170509 13:14:48.524"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:14:48.524">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170509 13:14:48.524" endtime="20170509 13:14:48.524"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:14:48.525">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170509 13:14:48.525" endtime="20170509 13:14:48.525"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:14:49.127">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170509 13:14:48.526" endtime="20170509 13:14:49.127"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:14:49.127">${status} = PASS</msg>
<msg level="INFO" timestamp="20170509 13:14:49.127">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:14:48.525" endtime="20170509 13:14:49.127"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:14:49.128">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:14:49.127" endtime="20170509 13:14:49.128"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:14:49.128">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:14:49.128" endtime="20170509 13:14:49.128"></status>
</kw>
<status status="PASS" starttime="20170509 13:14:48.522" endtime="20170509 13:14:49.129"></status>
</kw>
<status status="PASS" starttime="20170509 13:14:48.521" endtime="20170509 13:14:49.129"></status>
</kw>
<status status="PASS" starttime="20170509 13:14:48.520" endtime="20170509 13:14:49.129"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:14:49.129">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" starttime="20170509 13:14:49.129" endtime="20170509 13:14:49.129"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:14:49.131">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170509 13:14:49.131" endtime="20170509 13:14:49.131"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:14:49.132">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170509 13:14:49.132" endtime="20170509 13:14:49.132"></status>
</kw>
<status status="PASS" starttime="20170509 13:14:49.132" endtime="20170509 13:14:49.133"></status>
</kw>
<status status="PASS" starttime="20170509 13:14:49.130" endtime="20170509 13:14:49.133"></status>
</kw>
<status status="PASS" starttime="20170509 13:14:49.130" endtime="20170509 13:14:49.133"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:14:49.315">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170509 13:14:49.315">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:14:49.133" endtime="20170509 13:14:49.315"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:14:49.317">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170509 13:14:49.316" endtime="20170509 13:14:49.317"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:14:49.318">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170509 13:14:49.318" endtime="20170509 13:14:49.318"></status>
</kw>
<status status="PASS" starttime="20170509 13:14:49.317" endtime="20170509 13:14:49.318"></status>
</kw>
<status status="PASS" starttime="20170509 13:14:49.316" endtime="20170509 13:14:49.319"></status>
</kw>
<status status="PASS" starttime="20170509 13:14:49.316" endtime="20170509 13:14:49.319"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:14:49.319">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:14:48.520" endtime="20170509 13:14:49.319"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:14:49.319">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:14:49.319" endtime="20170509 13:14:49.319"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:14:49.320">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170509 13:14:49.320">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170509 13:14:49.320">${content} = {u'data': u'FW Progress, Baseboard Init', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170509 13:14:49.320" endtime="20170509 13:14:49.320"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:14:49.320">${state} = FW Progress, Baseboard Init</msg>
<status status="PASS" starttime="20170509 13:14:48.519" endtime="20170509 13:14:49.320"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:14:49.321">${boot_progress} = FW Progress, Baseboard Init</msg>
<status status="PASS" starttime="20170509 13:14:48.519" endtime="20170509 13:14:49.321"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170509 13:14:49.321">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status status="FAIL" starttime="20170509 13:14:49.321" endtime="20170509 13:14:49.321"></status>
</kw>
<status status="FAIL" starttime="20170509 13:14:48.518" endtime="20170509 13:14:49.322"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:14:59.326">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170509 13:14:59.326" endtime="20170509 13:14:59.327"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:14:59.327">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170509 13:14:59.327" endtime="20170509 13:14:59.327"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:14:59.328">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170509 13:14:59.327" endtime="20170509 13:14:59.328"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:14:59.328">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170509 13:14:59.328" endtime="20170509 13:14:59.328"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:14:59.509">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170509 13:14:59.329" endtime="20170509 13:14:59.509"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:14:59.509">${status} = PASS</msg>
<msg level="INFO" timestamp="20170509 13:14:59.509">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:14:59.329" endtime="20170509 13:14:59.509"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:14:59.510">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:14:59.509" endtime="20170509 13:14:59.510"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:14:59.510">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:14:59.510" endtime="20170509 13:14:59.511"></status>
</kw>
<status status="PASS" starttime="20170509 13:14:59.325" endtime="20170509 13:14:59.511"></status>
</kw>
<status status="PASS" starttime="20170509 13:14:59.325" endtime="20170509 13:14:59.511"></status>
</kw>
<status status="PASS" starttime="20170509 13:14:59.324" endtime="20170509 13:14:59.511"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:14:59.511">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" starttime="20170509 13:14:59.511" endtime="20170509 13:14:59.511"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:14:59.513">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170509 13:14:59.513" endtime="20170509 13:14:59.513"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:14:59.514">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170509 13:14:59.514" endtime="20170509 13:14:59.514"></status>
</kw>
<status status="PASS" starttime="20170509 13:14:59.514" endtime="20170509 13:14:59.515"></status>
</kw>
<status status="PASS" starttime="20170509 13:14:59.512" endtime="20170509 13:14:59.515"></status>
</kw>
<status status="PASS" starttime="20170509 13:14:59.512" endtime="20170509 13:14:59.515"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:14:59.581">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170509 13:14:59.581">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:14:59.515" endtime="20170509 13:14:59.581"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:14:59.582">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170509 13:14:59.582" endtime="20170509 13:14:59.582"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:14:59.583">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170509 13:14:59.583" endtime="20170509 13:14:59.583"></status>
</kw>
<status status="PASS" starttime="20170509 13:14:59.583" endtime="20170509 13:14:59.584"></status>
</kw>
<status status="PASS" starttime="20170509 13:14:59.581" endtime="20170509 13:14:59.584"></status>
</kw>
<status status="PASS" starttime="20170509 13:14:59.581" endtime="20170509 13:14:59.584"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:14:59.584">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:14:59.324" endtime="20170509 13:14:59.584"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:14:59.585">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:14:59.584" endtime="20170509 13:14:59.585"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:14:59.585">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170509 13:14:59.585">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170509 13:14:59.585">${content} = {u'data': u'FW Progress, Baseboard Init', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170509 13:14:59.585" endtime="20170509 13:14:59.585"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:14:59.586">${state} = FW Progress, Baseboard Init</msg>
<status status="PASS" starttime="20170509 13:14:59.323" endtime="20170509 13:14:59.586"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:14:59.586">${boot_progress} = FW Progress, Baseboard Init</msg>
<status status="PASS" starttime="20170509 13:14:59.323" endtime="20170509 13:14:59.586"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170509 13:14:59.587">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status status="FAIL" starttime="20170509 13:14:59.586" endtime="20170509 13:14:59.587"></status>
</kw>
<status status="FAIL" starttime="20170509 13:14:59.322" endtime="20170509 13:14:59.587"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:15:09.593">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170509 13:15:09.593" endtime="20170509 13:15:09.594"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:15:09.594">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170509 13:15:09.594" endtime="20170509 13:15:09.594"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:15:09.595">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170509 13:15:09.594" endtime="20170509 13:15:09.595"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:15:09.595">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170509 13:15:09.595" endtime="20170509 13:15:09.595"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:15:09.775">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170509 13:15:09.596" endtime="20170509 13:15:09.775"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:15:09.775">${status} = PASS</msg>
<msg level="INFO" timestamp="20170509 13:15:09.775">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:15:09.596" endtime="20170509 13:15:09.775"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:15:09.776">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:15:09.775" endtime="20170509 13:15:09.776"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:15:09.776">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:15:09.776" endtime="20170509 13:15:09.776"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:09.590" endtime="20170509 13:15:09.776"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:09.590" endtime="20170509 13:15:09.777"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:09.589" endtime="20170509 13:15:09.777"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:15:09.777">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" starttime="20170509 13:15:09.777" endtime="20170509 13:15:09.777"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:15:09.779">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170509 13:15:09.779" endtime="20170509 13:15:09.779"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:15:09.780">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170509 13:15:09.780" endtime="20170509 13:15:09.780"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:09.780" endtime="20170509 13:15:09.781"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:09.778" endtime="20170509 13:15:09.781"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:09.778" endtime="20170509 13:15:09.781"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:15:09.849">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170509 13:15:09.849">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:15:09.781" endtime="20170509 13:15:09.849"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:15:09.850">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170509 13:15:09.850" endtime="20170509 13:15:09.850"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:15:09.852">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170509 13:15:09.851" endtime="20170509 13:15:09.852"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:09.851" endtime="20170509 13:15:09.852"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:09.850" endtime="20170509 13:15:09.852"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:09.849" endtime="20170509 13:15:09.852"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:15:09.852">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:15:09.589" endtime="20170509 13:15:09.852"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:15:09.853">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:15:09.853" endtime="20170509 13:15:09.853"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:15:09.853">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170509 13:15:09.854">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170509 13:15:09.854">${content} = {u'data': u'FW Progress, Baseboard Init', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170509 13:15:09.853" endtime="20170509 13:15:09.854"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:15:09.854">${state} = FW Progress, Baseboard Init</msg>
<status status="PASS" starttime="20170509 13:15:09.588" endtime="20170509 13:15:09.854"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:15:09.854">${boot_progress} = FW Progress, Baseboard Init</msg>
<status status="PASS" starttime="20170509 13:15:09.588" endtime="20170509 13:15:09.854"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170509 13:15:09.855">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status status="FAIL" starttime="20170509 13:15:09.854" endtime="20170509 13:15:09.855"></status>
</kw>
<status status="FAIL" starttime="20170509 13:15:09.587" endtime="20170509 13:15:09.855"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:15:19.859">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170509 13:15:19.859" endtime="20170509 13:15:19.860"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:15:19.860">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170509 13:15:19.860" endtime="20170509 13:15:19.860"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:15:19.861">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170509 13:15:19.861" endtime="20170509 13:15:19.861"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:15:19.862">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170509 13:15:19.861" endtime="20170509 13:15:19.862"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:15:20.049">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170509 13:15:19.862" endtime="20170509 13:15:20.049"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:15:20.050">${status} = PASS</msg>
<msg level="INFO" timestamp="20170509 13:15:20.050">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:15:19.862" endtime="20170509 13:15:20.050"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:15:20.050">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:15:20.050" endtime="20170509 13:15:20.050"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:15:20.051">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:15:20.051" endtime="20170509 13:15:20.051"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:19.859" endtime="20170509 13:15:20.052"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:19.858" endtime="20170509 13:15:20.052"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:19.858" endtime="20170509 13:15:20.052"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:15:20.052">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" starttime="20170509 13:15:20.052" endtime="20170509 13:15:20.052"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:15:20.054">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170509 13:15:20.054" endtime="20170509 13:15:20.054"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:15:20.055">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170509 13:15:20.055" endtime="20170509 13:15:20.055"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:20.054" endtime="20170509 13:15:20.055"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:20.053" endtime="20170509 13:15:20.055"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:20.053" endtime="20170509 13:15:20.056"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:15:20.123">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170509 13:15:20.123">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:15:20.056" endtime="20170509 13:15:20.123"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:15:20.125">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170509 13:15:20.124" endtime="20170509 13:15:20.125"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:15:20.125">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170509 13:15:20.125" endtime="20170509 13:15:20.126"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:20.125" endtime="20170509 13:15:20.126"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:20.124" endtime="20170509 13:15:20.126"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:20.123" endtime="20170509 13:15:20.126"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:15:20.126">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:15:19.857" endtime="20170509 13:15:20.126"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:15:20.127">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:15:20.127" endtime="20170509 13:15:20.127"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:15:20.127">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170509 13:15:20.128">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170509 13:15:20.128">${content} = {u'data': u'FW Progress, Baseboard Init', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170509 13:15:20.127" endtime="20170509 13:15:20.128"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:15:20.128">${state} = FW Progress, Baseboard Init</msg>
<status status="PASS" starttime="20170509 13:15:19.856" endtime="20170509 13:15:20.128"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:15:20.128">${boot_progress} = FW Progress, Baseboard Init</msg>
<status status="PASS" starttime="20170509 13:15:19.856" endtime="20170509 13:15:20.128"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170509 13:15:20.129">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status status="FAIL" starttime="20170509 13:15:20.129" endtime="20170509 13:15:20.129"></status>
</kw>
<status status="FAIL" starttime="20170509 13:15:19.855" endtime="20170509 13:15:20.129"></status>
</kw>
<kw library="utils" name="Is OS Starting">
<doc>Check if boot progress is OS starting.</doc>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:15:30.134">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170509 13:15:30.134" endtime="20170509 13:15:30.134"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:15:30.135">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170509 13:15:30.135" endtime="20170509 13:15:30.135"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:15:30.136">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170509 13:15:30.136" endtime="20170509 13:15:30.136"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:15:30.137">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170509 13:15:30.136" endtime="20170509 13:15:30.137"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:15:30.324">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170509 13:15:30.138" endtime="20170509 13:15:30.324"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:15:30.324">${status} = PASS</msg>
<msg level="INFO" timestamp="20170509 13:15:30.324">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:15:30.137" endtime="20170509 13:15:30.324"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:15:30.325">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:15:30.324" endtime="20170509 13:15:30.325"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:15:30.325">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:15:30.325" endtime="20170509 13:15:30.325"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:30.133" endtime="20170509 13:15:30.326"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:30.132" endtime="20170509 13:15:30.326"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:30.132" endtime="20170509 13:15:30.326"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:15:30.326">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" starttime="20170509 13:15:30.326" endtime="20170509 13:15:30.326"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:15:30.328">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170509 13:15:30.328" endtime="20170509 13:15:30.328"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:15:30.329">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" starttime="20170509 13:15:30.329" endtime="20170509 13:15:30.329"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:30.328" endtime="20170509 13:15:30.330"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:30.327" endtime="20170509 13:15:30.330"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:30.327" endtime="20170509 13:15:30.330"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:15:30.398">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170509 13:15:30.398">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:15:30.330" endtime="20170509 13:15:30.398"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:15:30.400">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170509 13:15:30.400" endtime="20170509 13:15:30.400"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:15:30.401">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170509 13:15:30.401" endtime="20170509 13:15:30.401"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:30.400" endtime="20170509 13:15:30.401"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:30.399" endtime="20170509 13:15:30.401"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:30.399" endtime="20170509 13:15:30.402"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:15:30.402">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:15:30.131" endtime="20170509 13:15:30.402"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:15:30.402">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:15:30.402" endtime="20170509 13:15:30.402"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:15:30.403">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170509 13:15:30.403">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170509 13:15:30.403">${content} = {u'data': u'FW Progress, Baseboard Init', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170509 13:15:30.403" endtime="20170509 13:15:30.403"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:15:30.403">${state} = FW Progress, Baseboard Init</msg>
<status status="PASS" starttime="20170509 13:15:30.130" endtime="20170509 13:15:30.403"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:15:30.404">${boot_progress} = FW Progress, Baseboard Init</msg>
<status status="PASS" starttime="20170509 13:15:30.130" endtime="20170509 13:15:30.404"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170509 13:15:30.404">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status status="FAIL" starttime="20170509 13:15:30.404" endtime="20170509 13:15:30.404"></status>
</kw>
<status status="FAIL" starttime="20170509 13:15:30.130" endtime="20170509 13:15:30.405"></status>
</kw>
<msg level="FAIL" timestamp="20170509 13:15:30.405">Keyword 'Is OS Starting' failed after retrying for 10 minutes. The last error was: FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status status="FAIL" starttime="20170509 13:05:25.985" endtime="20170509 13:15:30.405"></status>
</kw>
<status status="FAIL" starttime="20170509 13:04:48.622" endtime="20170509 13:15:30.405"></status>
</kw>
<status status="FAIL" starttime="20170509 13:02:58.663" endtime="20170509 13:15:30.405"></status>
</kw>
<kw type="teardown" name="Test Exit Logs">
<doc>Collect FFDC and SOL log.</doc>
<kw library="openbmc_ffdc" name="FFDC On Test Case Fail">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw library="state_manager" name="Is Host Quiesced">
<doc>Check if host state is quiesced.</doc>
<assign>
<var>${status}</var>
</assign>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:15:30.412">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170509 13:15:30.411" endtime="20170509 13:15:30.412"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:15:30.413">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170509 13:15:30.413" endtime="20170509 13:15:30.413"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:15:30.414">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170509 13:15:30.413" endtime="20170509 13:15:30.414"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:15:30.414">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170509 13:15:30.414" endtime="20170509 13:15:30.414"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:15:30.601">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170509 13:15:30.415" endtime="20170509 13:15:30.601"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:15:30.601">${status} = PASS</msg>
<msg level="INFO" timestamp="20170509 13:15:30.601">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:15:30.415" endtime="20170509 13:15:30.602"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:15:30.602">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:15:30.602" endtime="20170509 13:15:30.602"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:15:30.603">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:15:30.602" endtime="20170509 13:15:30.603"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:30.411" endtime="20170509 13:15:30.603"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:30.410" endtime="20170509 13:15:30.603"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:30.409" endtime="20170509 13:15:30.603"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:15:30.604">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" starttime="20170509 13:15:30.604" endtime="20170509 13:15:30.604"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:15:30.606">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170509 13:15:30.605" endtime="20170509 13:15:30.606"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:15:30.607">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170509 13:15:30.607" endtime="20170509 13:15:30.607"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:30.606" endtime="20170509 13:15:30.607"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:30.605" endtime="20170509 13:15:30.607"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:30.604" endtime="20170509 13:15:30.607"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:15:30.673">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170509 13:15:30.673">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:15:30.607" endtime="20170509 13:15:30.674"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:15:30.675">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170509 13:15:30.675" endtime="20170509 13:15:30.675"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:15:30.676">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170509 13:15:30.676" endtime="20170509 13:15:30.676"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:30.675" endtime="20170509 13:15:30.676"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:30.674" endtime="20170509 13:15:30.676"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:30.674" endtime="20170509 13:15:30.677"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:15:30.677">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:15:30.408" endtime="20170509 13:15:30.677"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:15:30.677">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:15:30.677" endtime="20170509 13:15:30.677"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:15:30.678">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170509 13:15:30.678">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170509 13:15:30.678">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170509 13:15:30.678" endtime="20170509 13:15:30.678"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:15:30.678">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status status="PASS" starttime="20170509 13:15:30.408" endtime="20170509 13:15:30.678"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:15:30.679">${host_state} = Quiesced</msg>
<status status="PASS" starttime="20170509 13:15:30.407" endtime="20170509 13:15:30.679"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<status status="PASS" starttime="20170509 13:15:30.679" endtime="20170509 13:15:30.680"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:15:30.680">${status} = True</msg>
<status status="PASS" starttime="20170509 13:15:30.679" endtime="20170509 13:15:30.680"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:15:30.680">${status} = True</msg>
<status status="PASS" starttime="20170509 13:15:30.407" endtime="20170509 13:15:30.680"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL' or '${status}'=='True'</arg>
<arg>FFDC</arg>
</arguments>
<kw library="openbmc_ffdc" name="Ffdc">
<doc>Gather First Failure Data Capture (FFDC).</doc>
<kw library="utils" name="Ping Host">
<arguments>
<arg>9.3.86.161</arg>
</arguments>
<kw library="BuiltIn" name="Should Not Be Empty">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:15:30.857">Length is 10</msg>
<status status="PASS" starttime="20170509 13:15:30.857" endtime="20170509 13:15:30.857"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:15:30.862">Running command 'ping -c 4 9.3.86.161 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170509 13:15:33.869">${RC} = 0</msg>
<msg level="INFO" timestamp="20170509 13:15:33.869">${output} = PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=1.55 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=0.696 ms
64 bytes from 9.3.86.161: icmp_seq...</msg>
<status status="PASS" starttime="20170509 13:15:30.858" endtime="20170509 13:15:33.869"></status>
</kw>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:15:33.872">RC: 0
Output:
PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=1.55 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=0.696 ms
64 bytes from 9.3.86.161: icmp_seq=3 ttl=62 time=0.618 ms
64 bytes from 9.3.86.161: icmp_seq=4 ttl=62 time=0.683 ms

--- 9.3.86.161 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 3000ms
rtt min/avg/max/mdev = 0.618/0.887/1.553/0.386 ms</msg>
<status status="PASS" starttime="20170509 13:15:33.871" endtime="20170509 13:15:33.872"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" starttime="20170509 13:15:33.873" endtime="20170509 13:15:33.873"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:30.856" endtime="20170509 13:15:33.873"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Get Current Time Stamp">
<doc>Get the current time stamp data</doc>
<kw library="DateTime" name="Get Current Date">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:15:33.896">${cur_time} = 2017-05-09 13:15:33:895929</msg>
<status status="PASS" starttime="20170509 13:15:33.896" endtime="20170509 13:15:33.896"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:15:33.897">${cur_time} = 20170509131533895929</msg>
<status status="PASS" starttime="20170509 13:15:33.897" endtime="20170509 13:15:33.897"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:33.895" endtime="20170509 13:15:33.897"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:15:33.898">${FFDC_TIME} = 20170509131533895929</msg>
<kw library="openbmc_ffdc_utils" name="Get Test Dir and Name">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:15:33.911">${suite_name} = TestsTestBasicPoweron</msg>
<status status="PASS" starttime="20170509 13:15:33.911" endtime="20170509 13:15:33.911"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:15:33.912">${suite_name} = 20170509131533895929_TestsTestBasicPoweron</msg>
<status status="PASS" starttime="20170509 13:15:33.911" endtime="20170509 13:15:33.912"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:15:33.912">${test_name} = PowerOnTest</msg>
<status status="PASS" starttime="20170509 13:15:33.912" endtime="20170509 13:15:33.912"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:15:33.913">${test_name} = 20170509131533895929_PowerOnTest</msg>
<status status="PASS" starttime="20170509 13:15:33.912" endtime="20170509 13:15:33.913"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:33.910" endtime="20170509 13:15:33.913"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:15:33.913">${FFDC_DIR_PATH} = /tmp/root/26619/obmc-robot/logs/20170509131533895929_TestsTestBasicPoweron/20170509131533895929_PowerOnTest/</msg>
<msg level="INFO" timestamp="20170509 13:15:33.914">${FFDC_PREFIX} = 20170509131533895929_</msg>
<msg level="INFO" timestamp="20170509 13:15:33.932">${LOG_PREFIX} = /tmp/root/26619/obmc-robot/logs/20170509131533895929_TestsTestBasicPoweron/20170509131533895929_PowerOnTest/20170509131533895929_</msg>
<kw library="OperatingSystem" name="Create Directory">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>/tmp/root/26619/obmc-robot/logs/20170509131533895929_TestsTestBasicPoweron/20170509131533895929_PowerOnTest/</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:15:33.933" html="yes">Created directory '&lt;a href="file:///tmp/root/26619/obmc-robot/logs/20170509131533895929_TestsTestBasicPoweron/20170509131533895929_PowerOnTest"&gt;/tmp/root/26619/obmc-robot/logs/20170509131533895929_TestsTestBasicPoweron/20170509131533895929_PowerOnTest&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170509 13:15:33.933" endtime="20170509 13:15:33.933"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:15:33.937">${FFDC_FILE_PATH} = /tmp/root/26619/obmc-robot/logs/20170509131533895929_TestsTestBasicPoweron/20170509131533895929_PowerOnTest/20170509131533895929_BMC_general.txt</msg>
<kw library="openbmc_ffdc_utils" name="Header Message">
<doc>Write header message to the report document manifest.</doc>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${HEADER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:15:33.956" html="yes">Appended to file '&lt;a href="file:///tmp/root/26619/obmc-robot/logs/20170509131533895929_TestsTestBasicPoweron/20170509131533895929_PowerOnTest/20170509131533895929_BMC_general.txt"&gt;/tmp/root/26619/obmc-robot/logs/20170509131533895929_TestsTestBasicPoweron/20170509131533895929_PowerOnTest/20170509131533895929_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170509 13:15:33.956" endtime="20170509 13:15:33.956"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:33.955" endtime="20170509 13:15:33.956"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:15:33.958" html="yes">Appended to file '&lt;a href="file:///tmp/root/26619/obmc-robot/logs/20170509131533895929_TestsTestBasicPoweron/20170509131533895929_PowerOnTest/20170509131533895929_BMC_general.txt"&gt;/tmp/root/26619/obmc-robot/logs/20170509131533895929_TestsTestBasicPoweron/20170509131533895929_PowerOnTest/20170509131533895929_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170509 13:15:33.957" endtime="20170509 13:15:33.958"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:33.956" endtime="20170509 13:15:33.958"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Suite File\t\t: ${SUITE_NAME} ${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:15:33.959" html="yes">Appended to file '&lt;a href="file:///tmp/root/26619/obmc-robot/logs/20170509131533895929_TestsTestBasicPoweron/20170509131533895929_PowerOnTest/20170509131533895929_BMC_general.txt"&gt;/tmp/root/26619/obmc-robot/logs/20170509131533895929_TestsTestBasicPoweron/20170509131533895929_PowerOnTest/20170509131533895929_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170509 13:15:33.959" endtime="20170509 13:15:33.959"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:33.958" endtime="20170509 13:15:33.959"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Case Name\t\t: ${TEST_NAME}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:15:33.961" html="yes">Appended to file '&lt;a href="file:///tmp/root/26619/obmc-robot/logs/20170509131533895929_TestsTestBasicPoweron/20170509131533895929_PowerOnTest/20170509131533895929_BMC_general.txt"&gt;/tmp/root/26619/obmc-robot/logs/20170509131533895929_TestsTestBasicPoweron/20170509131533895929_PowerOnTest/20170509131533895929_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170509 13:15:33.960" endtime="20170509 13:15:33.961"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:33.960" endtime="20170509 13:15:33.961"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Source File\t: ${SUITE_SOURCE}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:15:33.962" html="yes">Appended to file '&lt;a href="file:///tmp/root/26619/obmc-robot/logs/20170509131533895929_TestsTestBasicPoweron/20170509131533895929_PowerOnTest/20170509131533895929_BMC_general.txt"&gt;/tmp/root/26619/obmc-robot/logs/20170509131533895929_TestsTestBasicPoweron/20170509131533895929_PowerOnTest/20170509131533895929_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170509 13:15:33.961" endtime="20170509 13:15:33.962"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:33.961" endtime="20170509 13:15:33.962"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Failure Time Stamp\t: ${FFDC_TIME}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:15:33.963" html="yes">Appended to file '&lt;a href="file:///tmp/root/26619/obmc-robot/logs/20170509131533895929_TestsTestBasicPoweron/20170509131533895929_PowerOnTest/20170509131533895929_BMC_general.txt"&gt;/tmp/root/26619/obmc-robot/logs/20170509131533895929_TestsTestBasicPoweron/20170509131533895929_PowerOnTest/20170509131533895929_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170509 13:15:33.963" endtime="20170509 13:15:33.963"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:33.962" endtime="20170509 13:15:33.963"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Error Message\t: ${TEST_MESSAGE}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:15:33.965" html="yes">Appended to file '&lt;a href="file:///tmp/root/26619/obmc-robot/logs/20170509131533895929_TestsTestBasicPoweron/20170509131533895929_PowerOnTest/20170509131533895929_BMC_general.txt"&gt;/tmp/root/26619/obmc-robot/logs/20170509131533895929_TestsTestBasicPoweron/20170509131533895929_PowerOnTest/20170509131533895929_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170509 13:15:33.964" endtime="20170509 13:15:33.965"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:33.963" endtime="20170509 13:15:33.965"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Documentation\t:${\n}${TEST_DOCUMENTATION}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:15:33.966" html="yes">Appended to file '&lt;a href="file:///tmp/root/26619/obmc-robot/logs/20170509131533895929_TestsTestBasicPoweron/20170509131533895929_PowerOnTest/20170509131533895929_BMC_general.txt"&gt;/tmp/root/26619/obmc-robot/logs/20170509131533895929_TestsTestBasicPoweron/20170509131533895929_PowerOnTest/20170509131533895929_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170509 13:15:33.966" endtime="20170509 13:15:33.966"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:33.965" endtime="20170509 13:15:33.966"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:15:33.967" html="yes">Appended to file '&lt;a href="file:///tmp/root/26619/obmc-robot/logs/20170509131533895929_TestsTestBasicPoweron/20170509131533895929_PowerOnTest/20170509131533895929_BMC_general.txt"&gt;/tmp/root/26619/obmc-robot/logs/20170509131533895929_TestsTestBasicPoweron/20170509131533895929_PowerOnTest/20170509131533895929_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170509 13:15:33.967" endtime="20170509 13:15:33.967"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:33.966" endtime="20170509 13:15:33.967"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Test Setup Info">
<doc>BMC IP, Model and other information</doc>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:15:33.969" html="yes">Appended to file '&lt;a href="file:///tmp/root/26619/obmc-robot/logs/20170509131533895929_TestsTestBasicPoweron/20170509131533895929_PowerOnTest/20170509131533895929_BMC_general.txt"&gt;/tmp/root/26619/obmc-robot/logs/20170509131533895929_TestsTestBasicPoweron/20170509131533895929_PowerOnTest/20170509131533895929_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170509 13:15:33.968" endtime="20170509 13:15:33.969"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:33.968" endtime="20170509 13:15:33.969"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Setup Information:</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:15:33.970" html="yes">Appended to file '&lt;a href="file:///tmp/root/26619/obmc-robot/logs/20170509131533895929_TestsTestBasicPoweron/20170509131533895929_PowerOnTest/20170509131533895929_BMC_general.txt"&gt;/tmp/root/26619/obmc-robot/logs/20170509131533895929_TestsTestBasicPoweron/20170509131533895929_PowerOnTest/20170509131533895929_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170509 13:15:33.970" endtime="20170509 13:15:33.970"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:33.969" endtime="20170509 13:15:33.970"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:15:33.971" html="yes">Appended to file '&lt;a href="file:///tmp/root/26619/obmc-robot/logs/20170509131533895929_TestsTestBasicPoweron/20170509131533895929_PowerOnTest/20170509131533895929_BMC_general.txt"&gt;/tmp/root/26619/obmc-robot/logs/20170509131533895929_TestsTestBasicPoweron/20170509131533895929_PowerOnTest/20170509131533895929_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170509 13:15:33.971" endtime="20170509 13:15:33.971"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:33.970" endtime="20170509 13:15:33.971"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>OPENBMC HOST \t: ${OPENBMC_HOST}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:15:33.973" html="yes">Appended to file '&lt;a href="file:///tmp/root/26619/obmc-robot/logs/20170509131533895929_TestsTestBasicPoweron/20170509131533895929_PowerOnTest/20170509131533895929_BMC_general.txt"&gt;/tmp/root/26619/obmc-robot/logs/20170509131533895929_TestsTestBasicPoweron/20170509131533895929_PowerOnTest/20170509131533895929_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170509 13:15:33.972" endtime="20170509 13:15:33.973"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:33.972" endtime="20170509 13:15:33.973"></status>
</kw>
<kw library="utils" name="Get BMC System Model">
<doc>Get the BMC model from the device tree.</doc>
<assign>
<var>${model_name}</var>
</assign>
<kw library="connection_client" name="Open Connection And Log In">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20170509 13:15:33.975">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" starttime="20170509 13:15:33.975" endtime="20170509 13:15:33.975"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:15:33.975">${has_host} = False</msg>
<status status="PASS" starttime="20170509 13:15:33.974" endtime="20170509 13:15:33.975"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" starttime="20170509 13:15:33.976" endtime="20170509 13:15:33.976"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:33.976" endtime="20170509 13:15:33.976"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw library="connection_client" name="User input SSH and HTTPs Ports">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:15:33.978">${port_num} = 22</msg>
<status status="PASS" starttime="20170509 13:15:33.978" endtime="20170509 13:15:33.978"></status>
</kw>
<kw library="BuiltIn" name="Replace Variables">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:15:33.979">${SSH_PORT} = 22</msg>
<status status="PASS" starttime="20170509 13:15:33.978" endtime="20170509 13:15:33.979"></status>
</kw>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:15:33.979">${https_num} = 443</msg>
<status status="PASS" starttime="20170509 13:15:33.979" endtime="20170509 13:15:33.979"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:15:33.980">${AUTH_URI} = https://9.3.86.161:443</msg>
<status status="PASS" starttime="20170509 13:15:33.980" endtime="20170509 13:15:33.980"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:33.977" endtime="20170509 13:15:33.980"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:33.977" endtime="20170509 13:15:33.980"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20170509 13:15:33.981">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" starttime="20170509 13:15:33.981" endtime="20170509 13:15:33.981"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:15:33.981">${has_port} = False</msg>
<status status="PASS" starttime="20170509 13:15:33.981" endtime="20170509 13:15:33.982"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keywords">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status status="PASS" starttime="20170509 13:15:33.983" endtime="20170509 13:15:33.983"></status>
</kw>
<kw library="SSHLibrary" name="Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" starttime="20170509 13:15:33.983" endtime="20170509 13:15:33.984"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:33.982" endtime="20170509 13:15:33.984"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:33.982" endtime="20170509 13:15:33.984"></status>
</kw>
<kw library="SSHLibrary" name="Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:15:33.985">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg level="INFO" timestamp="20170509 13:15:35.632">Read output: root@witherspoon:~#</msg>
<status status="PASS" starttime="20170509 13:15:33.984" endtime="20170509 13:15:35.633"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:33.974" endtime="20170509 13:15:35.633"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:15:35.635">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg level="INFO" timestamp="20170509 13:15:35.702">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170509 13:15:35.703">${bmc_model} = Witherspoon</msg>
<msg level="INFO" timestamp="20170509 13:15:35.703">${stderr} = </msg>
<status status="PASS" starttime="20170509 13:15:35.635" endtime="20170509 13:15:35.703"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:15:35.703">Length is 0</msg>
<status status="PASS" starttime="20170509 13:15:35.703" endtime="20170509 13:15:35.703"></status>
</kw>
<kw library="BuiltIn" name="Should Not Be Empty">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:15:35.704">Length is 11</msg>
<status status="PASS" starttime="20170509 13:15:35.704" endtime="20170509 13:15:35.704"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:15:35.704">${model_name} = Witherspoon</msg>
<status status="PASS" starttime="20170509 13:15:33.973" endtime="20170509 13:15:35.704"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>SYSTEM TYPE \t: ${model_name}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:15:35.705" html="yes">Appended to file '&lt;a href="file:///tmp/root/26619/obmc-robot/logs/20170509131533895929_TestsTestBasicPoweron/20170509131533895929_PowerOnTest/20170509131533895929_BMC_general.txt"&gt;/tmp/root/26619/obmc-robot/logs/20170509131533895929_TestsTestBasicPoweron/20170509131533895929_PowerOnTest/20170509131533895929_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170509 13:15:35.705" endtime="20170509 13:15:35.706"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:35.704" endtime="20170509 13:15:35.706"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:33.967" endtime="20170509 13:15:35.706"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${MSG_INTRO}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:15:35.707" html="yes">Appended to file '&lt;a href="file:///tmp/root/26619/obmc-robot/logs/20170509131533895929_TestsTestBasicPoweron/20170509131533895929_PowerOnTest/20170509131533895929_BMC_general.txt"&gt;/tmp/root/26619/obmc-robot/logs/20170509131533895929_TestsTestBasicPoweron/20170509131533895929_PowerOnTest/20170509131533895929_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170509 13:15:35.707" endtime="20170509 13:15:35.707"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:35.706" endtime="20170509 13:15:35.707"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Ffdc Cmd Index">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:15:35.708">@{entries} = [ BMC DATA | APPLICATION DATA | DRIVER INFO ]</msg>
<status status="PASS" starttime="20170509 13:15:35.707" endtime="20170509 13:15:35.708"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC DATA">
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:15:35.709" html="yes">Appended to file '&lt;a href="file:///tmp/root/26619/obmc-robot/logs/20170509131533895929_TestsTestBasicPoweron/20170509131533895929_PowerOnTest/20170509131533895929_BMC_general.txt"&gt;/tmp/root/26619/obmc-robot/logs/20170509131533895929_TestsTestBasicPoweron/20170509131533895929_PowerOnTest/20170509131533895929_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170509 13:15:35.709" endtime="20170509 13:15:35.709"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:35.708" endtime="20170509 13:15:35.709"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:15:35.710" html="yes">Appended to file '&lt;a href="file:///tmp/root/26619/obmc-robot/logs/20170509131533895929_TestsTestBasicPoweron/20170509131533895929_PowerOnTest/20170509131533895929_BMC_general.txt"&gt;/tmp/root/26619/obmc-robot/logs/20170509131533895929_TestsTestBasicPoweron/20170509131533895929_PowerOnTest/20170509131533895929_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170509 13:15:35.710" endtime="20170509 13:15:35.711"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:35.709" endtime="20170509 13:15:35.711"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:35.708" endtime="20170509 13:15:35.711"></status>
</kw>
<kw type="foritem" name="${index} = APPLICATION DATA">
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:15:35.712" html="yes">Appended to file '&lt;a href="file:///tmp/root/26619/obmc-robot/logs/20170509131533895929_TestsTestBasicPoweron/20170509131533895929_PowerOnTest/20170509131533895929_BMC_general.txt"&gt;/tmp/root/26619/obmc-robot/logs/20170509131533895929_TestsTestBasicPoweron/20170509131533895929_PowerOnTest/20170509131533895929_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170509 13:15:35.712" endtime="20170509 13:15:35.712"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:35.711" endtime="20170509 13:15:35.712"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:15:35.714" html="yes">Appended to file '&lt;a href="file:///tmp/root/26619/obmc-robot/logs/20170509131533895929_TestsTestBasicPoweron/20170509131533895929_PowerOnTest/20170509131533895929_BMC_general.txt"&gt;/tmp/root/26619/obmc-robot/logs/20170509131533895929_TestsTestBasicPoweron/20170509131533895929_PowerOnTest/20170509131533895929_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170509 13:15:35.713" endtime="20170509 13:15:35.714"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:35.712" endtime="20170509 13:15:35.714"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:35.711" endtime="20170509 13:15:35.714"></status>
</kw>
<kw type="foritem" name="${index} = DRIVER INFO">
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:15:35.715" html="yes">Appended to file '&lt;a href="file:///tmp/root/26619/obmc-robot/logs/20170509131533895929_TestsTestBasicPoweron/20170509131533895929_PowerOnTest/20170509131533895929_BMC_general.txt"&gt;/tmp/root/26619/obmc-robot/logs/20170509131533895929_TestsTestBasicPoweron/20170509131533895929_PowerOnTest/20170509131533895929_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170509 13:15:35.715" endtime="20170509 13:15:35.715"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:35.714" endtime="20170509 13:15:35.715"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:15:35.716" html="yes">Appended to file '&lt;a href="file:///tmp/root/26619/obmc-robot/logs/20170509131533895929_TestsTestBasicPoweron/20170509131533895929_PowerOnTest/20170509131533895929_BMC_general.txt"&gt;/tmp/root/26619/obmc-robot/logs/20170509131533895929_TestsTestBasicPoweron/20170509131533895929_PowerOnTest/20170509131533895929_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170509 13:15:35.716" endtime="20170509 13:15:35.716"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:35.715" endtime="20170509 13:15:35.716"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:35.714" endtime="20170509 13:15:35.716"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:35.708" endtime="20170509 13:15:35.717"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${MSG_DETAIL}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:15:35.718" html="yes">Appended to file '&lt;a href="file:///tmp/root/26619/obmc-robot/logs/20170509131533895929_TestsTestBasicPoweron/20170509131533895929_PowerOnTest/20170509131533895929_BMC_general.txt"&gt;/tmp/root/26619/obmc-robot/logs/20170509131533895929_TestsTestBasicPoweron/20170509131533895929_PowerOnTest/20170509131533895929_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170509 13:15:35.717" endtime="20170509 13:15:35.718"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:35.717" endtime="20170509 13:15:35.718"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:33.955" endtime="20170509 13:15:35.718"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Call FFDC Methods">
<doc>Call into FFDC Keyword index list.</doc>
<arguments>
<arg>ffdc_function_list=</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Method Index">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:15:35.724">@{entries} = [ BMC LOGS ]</msg>
<status status="PASS" starttime="20170509 13:15:35.724" endtime="20170509 13:15:35.724"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC LOGS">
<kw library="openbmc_ffdc_methods" name="Method Call Keyword List">
<doc>Iterate the list through keyword index.</doc>
<arguments>
<arg>${index}</arg>
<arg>${ffdc_function_list}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Method Call">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<assign>
<var>@{method_list}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:15:35.726">@{method_list} = [ ('SEL Log', 'Collect eSEL Log') | ('Core Files', 'SCP Coredump Files') | ('FFDC Generic Report', 'BMC FFDC Manifest') | ('BMC Specific Files', 'BMC FFDC Files') | ('Get Request FFDC', 'BMC FFDC Get ...</msg>
<status status="PASS" starttime="20170509 13:15:35.726" endtime="20170509 13:15:35.726"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ffdc_function_list}' == '${EMPTY}'</arg>
<arg>Get FFDC Method Desc</arg>
<arg>${index}</arg>
<arg>ELSE</arg>
<arg>Split String</arg>
<arg>${ffdc_function_list}</arg>
<arg>separator=:</arg>
</arguments>
<assign>
<var>@{ffdc_function_list}</var>
</assign>
<kw library="openbmc_ffdc_list" name="Get Ffdc Method Desc">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<status status="PASS" starttime="20170509 13:15:35.727" endtime="20170509 13:15:35.727"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:15:35.727">@{ffdc_function_list} = [ SEL Log | Core Files | FFDC Generic Report | BMC Specific Files | Get Request FFDC | OS FFDC ]</msg>
<status status="PASS" starttime="20170509 13:15:35.726" endtime="20170509 13:15:35.727"></status>
</kw>
<kw type="for" name="${method} IN [ @{method_list} ]">
<kw type="foritem" name="${method} = ('SEL Log', 'Collect eSEL Log')">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="Collections" name="List Should Contain Value">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" starttime="20170509 13:15:35.729" endtime="20170509 13:15:35.729"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:15:35.729">${status} = PASS</msg>
<msg level="INFO" timestamp="20170509 13:15:35.730">${ret_values} = None</msg>
<status status="PASS" starttime="20170509 13:15:35.729" endtime="20170509 13:15:35.730"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" starttime="20170509 13:15:35.730" endtime="20170509 13:15:35.730"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="Collect eSEL Log">
<doc>Collect eSEL log from logging entry and convert eSEL data</doc>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${BMC_LOGGING_ENTRY}/enumerate</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:15:35.761">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170509 13:15:35.760" endtime="20170509 13:15:35.764"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:15:35.765">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170509 13:15:35.764" endtime="20170509 13:15:35.765"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:15:35.765">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170509 13:15:35.765" endtime="20170509 13:15:35.765"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:15:35.766">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170509 13:15:35.766" endtime="20170509 13:15:35.766"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:15:35.946">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170509 13:15:35.767" endtime="20170509 13:15:35.946"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:15:35.946">${status} = PASS</msg>
<msg level="INFO" timestamp="20170509 13:15:35.946">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:15:35.766" endtime="20170509 13:15:35.946"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:15:35.947">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:15:35.947" endtime="20170509 13:15:35.947"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:15:35.948">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:15:35.947" endtime="20170509 13:15:35.948"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:35.760" endtime="20170509 13:15:35.948"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:35.759" endtime="20170509 13:15:35.948"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:35.759" endtime="20170509 13:15:35.948"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:15:35.949">${base_uri} = /xyz/openbmc_project/logging/entry//enumerate</msg>
<status status="PASS" starttime="20170509 13:15:35.948" endtime="20170509 13:15:35.949"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20170509 13:15:35.949" endtime="20170509 13:15:35.949"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:15:36.181">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry//enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170509 13:15:36.182">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:15:35.950" endtime="20170509 13:15:36.182"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" starttime="20170509 13:15:36.182" endtime="20170509 13:15:36.183"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:15:36.183">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:15:35.758" endtime="20170509 13:15:36.183"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:15:36.184">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:15:36.184" endtime="20170509 13:15:36.184"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:15:36.184">${status} = True</msg>
<status status="PASS" starttime="20170509 13:15:36.183" endtime="20170509 13:15:36.184"></status>
</kw>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
</arguments>
<status status="PASS" starttime="20170509 13:15:36.185" endtime="20170509 13:15:36.185"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:15:36.186">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/logging/entry/1": {
      "AdditionalData": [
        "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 17 00 00 00 00 04 50 1d 4a 0d 00 00 00 04 50 1f e9 35 42 00 00 07 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 0e 90 00 00 0e 55 48 00 18 01 00 17 00 8a 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 17 0e 00 48 00 00 00 e0 00 00 0a 00 00 00 00 00 00 20 00 00 00 05 00 01 00 2d 00 04 00 00 00 00 00 00 00 00 42 43 38 41 31 37 30 45 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 06 00 00 00 55 00 03 b6 dc 00 00 00 00 55 44 00 4c 01 02 01 00 ee ee ee ee 54 61 72 67 65 74 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 05 00 01 00 00 00 03 00 00 00 05 00 00 00 14 0f 7a bb 7c 23 01 00 02 00 05 01 0b 5a fc d7 13 01 00 02 00 05 01 00 00 55 44 00 30 01 03 01 00 00 00 00 00 00 03 f3 b4 00 00 00 00 00 03 b6 dc 00 00 00 00 40 04 cd e4 00 00 00 00 40 04 ab 68 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 33 61 33 64 36 35 65 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00"
      ], 
      "Id": 1, 
      "Message": "org.open_power.Error.Host.Event.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Informational", 
      "Timestamp": 1494335056146, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/2": {
      "AdditionalData": [
        "ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 07 aa 00 00 50 48 00 30 01 00 07 00 00 00 00 04 bf ef 71 1f 00 00 00 04 bf f0 0c 05 42 00 00 08 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 0f 90 00 00 0f 55 48 00 18 01 00 07 00 10 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 07 05 00 48 00 00 00 e0 00 00 05 00 00 00 00 00 00 20 00 00 00 01 00 00 00 05 00 01 02 00 ff ff 01 90 00 4d 42 43 31 30 30 37 30 35 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 24 01 06 01 00 01 54 41 4b 00 00 00 06 00 00 00 00 00 00 00 00 00 00 00 0b 23 01 00 02 00 05 01 00 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 01 00 00 00 55 00 03 b6 dc 00 00 00 00 55 44 00 50 01 03 01 00 00 00 00 00 00 03 f3 b4 00 00 00 00 00 03 b6 dc 00 00 00 00 40 27 a3 b4 00 00 00 00 40 27 ac 88 00 00 00 00 40 27 ad e4 00 00 00 00 40 27 cd 28 00 00 00 00 40 27 cf 10 00 00 00 00 40 0d 40 bc 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 33 61 33 64 36 35 65 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 55 44 00 fc 01 15 31 00 01 28 00 42 49 32 43 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 f4 00 00 00 00 00 00 00 f4 00 00 00 05 00 00 00 00 00 00 00 27 31 19 d2 52 00 00 00 d1 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 27 31 1c dd 01 00 00 00 d1 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 02 00 00 00 2c 00 00 00 27 31 1c ed a1 00 00 00 d1 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 27 31 1d 20 90 00 00 00 d1 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 34 00 00 00 27 32 4a d1 5e 00 00 00 d1 00 08 43 4f 65 c9 23 ee 00 00 07 6b 00 01 00 00 00 00 00 00 00 00 00 24"
      ], 
      "Id": 2, 
      "Message": "org.open_power.Error.Host.Event.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Informational", 
      "Timestamp": 1494335059200, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/3": {
      "AdditionalData": [
        "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 17 00 00 00 00 04 51 67 ef 22 00 00 00 04 51 69 f4 cb 42 00 00 07 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 11 90 00 00 11 55 48 00 18 01 00 17 00 8a 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 17 0e 00 48 00 00 00 e0 00 00 0a 00 00 00 00 00 00 20 00 00 00 05 00 01 00 2d 00 04 00 00 00 00 00 00 00 00 42 43 38 41 31 37 30 45 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 06 00 00 00 55 00 03 b6 dc 00 00 00 00 55 44 00 4c 01 02 01 00 ee ee ee ee 54 61 72 67 65 74 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 05 00 01 00 00 00 03 00 00 00 05 00 00 00 14 0f 7a bb 7c 23 01 00 02 00 05 01 0b 5a fc d7 13 01 00 02 00 05 01 00 00 55 44 00 30 01 03 01 00 00 00 00 00 00 03 f3 b4 00 00 00 00 00 03 b6 dc 00 00 00 00 40 04 cd e4 00 00 00 00 40 04 ab 68 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 33 61 33 64 36 35 65 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00"
      ], 
      "Id": 3, 
      "Message": "org.open_power.Error.Host.Event.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Informational", 
      "Timestamp": 1494335166549, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/4": {
      "AdditionalData": [
        "ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 07 aa 00 00 50 48 00 30 01 00 07 00 00 00 00 04 c1 45 e2 d7 00 00 00 04 c1 4a 2f f1 42 00 00 08 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 12 90 00 00 12 55 48 00 18 01 00 07 00 10 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 07 05 00 48 00 00 00 e0 00 00 05 00 00 00 00 00 00 20 00 00 00 01 00 00 00 05 00 01 02 00 ff ff 01 90 00 4d 42 43 31 30 30 37 30 35 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 24 01 06 01 00 01 54 41 4b 00 00 00 06 00 00 00 00 00 00 00 00 00 00 00 08 23 01 00 02 00 05 01 00 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 01 00 00 00 55 40 0d 40 bc 00 00 00 00 55 44 00 50 01 03 01 00 00 00 00 00 00 03 f3 b4 00 00 00 00 00 03 b6 dc 00 00 00 00 40 27 a3 b4 00 00 00 00 40 27 ac 88 00 00 00 00 40 27 ad e4 00 00 00 00 40 27 cd 28 00 00 00 00 40 27 cf 10 00 00 00 00 40 0d 40 bc 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 33 61 33 64 36 35 65 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 55 44 00 fc 01 15 31 00 01 28 00 42 49 32 43 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 f4 00 00 00 00 00 00 00 f4 00 00 00 05 00 00 00 00 00 00 00 27 33 b6 51 54 00 00 00 d1 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 27 33 b9 69 dd 00 00 00 d1 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 02 00 00 00 2c 00 00 00 27 33 b9 7a a6 00 00 00 d1 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 27 33 b9 ad aa 00 00 00 d1 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 34 00 00 00 27 34 e7 a7 7b 00 00 00 d1 00 08 43 4f 65 c9 23 ee 00 00 07 6b 00 01 00 00 00 00 00 00 00 00 00 24"
      ], 
      "Id": 4, 
      "Message": "org.open_power.Error.Host.Event.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Informational", 
      "Timestamp": 1494335169608, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/5": {
      "AdditionalData": [
        "ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 07 aa 00 00 50 48 00 30 01 00 07 00 00 00 00 04 c1 45 e2 d7 00 00 00 04 c1 4a 2f f1 42 00 00 08 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 12 90 00 00 12 55 48 00 18 01 00 07 00 10 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 07 05 00 48 00 00 00 e0 00 00 05 00 00 00 00 00 00 20 00 00 00 01 00 00 00 05 00 01 02 00 ff ff 01 90 00 4d 42 43 31 30 30 37 30 35 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 24 01 06 01 00 01 54 41 4b 00 00 00 06 00 00 00 00 00 00 00 00 00 00 00 08 23 01 00 02 00 05 01 00 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 01 00 00 00 55 40 0d 40 bc 00 00 00 00 55 44 00 50 01 03 01 00 00 00 00 00 00 03 f3 b4 00 00 00 00 00 03 b6 dc 00 00 00 00 40 27 a3 b4 00 00 00 00 40 27 ac 88 00 00 00 00 40 27 ad e4 00 00 00 00 40 27 cd 28 00 00 00 00 40 27 cf 10 00 00 00 00 40 0d 40 bc 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 33 61 33 64 36 35 65 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 55 44 00 fc 01 15 31 00 01 28 00 42 49 32 43 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 f4 00 00 00 00 00 00 00 f4 00 00 00 05 00 00 00 00 00 00 00 27 33 b6 51 54 00 00 00 d1 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 27 33 b9 69 dd 00 00 00 d1 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 02 00 00 00 2c 00 00 00 27 33 b9 7a a6 00 00 00 d1 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 27 33 b9 ad aa 00 00 00 d1 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 34 00 00 00 27 34 e7 a7 7b 00 00 00 d1 00 08 43 4f 65 c9 23 ee 00 00 07 6b 00 01 00 00 00 00 00 00 00 00 00 24"
      ], 
      "Id": 5, 
      "Message": "org.open_power.Error.Host.Event.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Informational", 
      "Timestamp": 1494335175532, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/6": {
      "AdditionalData": [
        "ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 07 aa 00 00 50 48 00 30 01 00 09 00 00 00 00 05 78 7f b1 67 00 00 00 05 7a 0c ce 3a 42 00 00 0d 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 13 90 00 00 13 55 48 00 18 01 00 09 00 75 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 09 0f 00 48 00 00 00 e0 00 00 01 00 00 00 00 00 02 20 00 00 00 00 00 00 00 33 e2 1a 00 00 00 00 00 00 00 00 42 43 37 35 30 39 30 46 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 2c 01 06 01 00 01 54 41 4b 00 00 00 06 00 00 00 02 00 00 00 00 00 00 00 08 26 01 00 02 00 05 01 25 00 0b 00 24 01 00 00 00 55 44 00 0c 01 01 09 00 00 33 e2 1a 55 44 00 14 01 02 09 00 09 64 a0 0c 00 00 00 00 00 00 00 00 55 44 00 14 01 02 09 00 77 14 09 28 00 00 00 00 00 00 00 a0 55 44 00 50 01 03 01 00 00 00 00 00 00 03 f3 b4 00 00 00 00 00 03 b6 dc 00 00 00 00 40 1e c5 d4 00 00 00 00 40 1e c6 e0 00 00 00 00 40 1e c7 b4 00 00 00 00 40 42 15 40 00 00 00 00 40 10 f9 84 00 00 00 00 40 0e d3 18 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 33 61 33 64 36 35 65 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 55 44 00 cc 01 15 31 00 01 28 00 42 46 41 50 49 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 c4 00 00 00 00 00 00 00 c4 00 00 00 03 00 00 00 00 00 00 00 2d 35 14 ee 05 00 00 00 ec 00 1c 43 4f b2 95 8f fa 00 00 00 69 70 75 2e 6d 63 62 69 73 74 3a 6b 30 3a 6e 30 3a 73 30 3a 70 30 31 3a 63 30 00 00 00 00 00 00 00 00 00 00 3c 00 00 00 2d 35 1e c6 97 00 00 00 ec 00 1c 43 4f 70 49 5a 04 00 00 01 aa 70 75 2e 6d 63 62 69 73 74 3a 6b 30 3a 6e 30 3a 73 30 3a 70 30 31 3a 63 30 00 00 00 00 00 00 00 00 00 00 3c 00 00 00 2d 35 23 6a c1 00 00 00 ec 00 08 43 4f 25 60 10 27 00 00 00 90 00 00 00 00 00 00 00 01 00 00 00 24 55 44 01 84 01 15 31 00 01 28 00 42 46 41 50 49 5f 49 00 00 00 00 00 00 00 00 00 00 00 00 01 7c 00 00 00 00 00 00 01 7c 00 00 00 07 00 00 00 00 00 00 00 2a 2e 8f 14 87 00 00 00 d1 00 20 43 4f 79 5d 7d 7b 00 00 03 2c 00 00 00 00 00 00 00 14 00 00 00 00 00 00 00 df 00 00 00 00 00 00 00 14 00 00 00 00 00 00 00 00 00 00 00 3c 00 00 00 2a 2e 90 bd 3a 00 00 00 d1 00 20 43 4f 79 5d 7d 7b 00 00 03 2c 00 00 00 00 00 00 00 14 00 00 00 00 00 00 00 df 00 00 00 00 00 00 00 54 00 00 00 00 00 00 00 00 00 00 00 3c 00 00 00 2a 2e 94 23 98 00 00 00 d1 00 20 43 4f 79 5d 7d 7b 00 00 03 2c 00 00 00 00 00 00 00 32 00 00 00 00 00 00 00 e4 00 00 00 00 00 00 00 1c 00 00 00 00 00 00 00 00 00 00 00 3c 00 00 00 2a 2e 96 7e 1f 00 00 00 d1 00 20 43 4f 79 5d 7d 7b 00 00 03 2c 00 00 00 00 00 00 00 33 00 00 00 00 00 00 00 e4 00 00 00 00 00 00 00 1c 00 00 00 00 00 00 00 00 00 00 00 3c 00 00 00 2d 35 23 78 de 00 00 00 ec 00 00 43 4f 0b b1 67 60 00 00 0b b3 00 00 00 1c 00 00 00 2d 35 23 84 bb 00 00 00 ec 00 08 43 4f f6 cf 06 d1 00 00 00 78 00 00 00 00 00 33 e2 1a 00 00 00 24 00 00 00 2d 35 23 d2 7b 00 00 00 ec 00 08 43 4f e3 80 24 18 00 00 03 48 00 00 00 00 00 33 e2 1a 00 00 00 24 55 44 00 30 01 15 31 00 01 28 00 42 53 43 41 4e 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 28 00 00 00 00 00 00 00 28 00 00 00 00 00 00 00 00 55 44 00 30 01 15 31 00 01 28 00 42 46 41 50 49 5f 44 42 47 00 00 00 00 00 00 00 00 00 00 00 28 00 00 00 00 00 00 00 28 00 00 00 00 00 00 00 00"
      ], 
      "Id": 6, 
      "Message": "org.open_power.Error.Host.Event.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Informational", 
      "Timestamp": 1494335179447, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/7": {
      "AdditionalData": [
        "ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 07 aa 00 00 50 48 00 30 01 00 09 00 00 00 00 05 7a 0d 72 65 00 00 00 05 88 ff 2e c6 42 00 00 0e 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 14 90 00 00 14 55 48 00 18 01 00 09 00 75 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 09 0f 00 48 00 00 00 e0 00 00 01 00 00 00 00 00 00 20 00 00 00 00 00 00 00 59 a8 ca 00 00 00 00 00 00 00 00 42 43 37 35 30 39 30 46 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 28 01 06 01 00 01 54 41 4b 00 00 00 06 00 00 00 00 00 00 00 00 00 00 00 09 24 01 00 02 00 05 01 25 00 00 00 00 55 44 00 0c 01 01 09 00 00 59 a8 ca 55 44 00 50 01 02 01 00 ee ee ee ee 54 61 72 67 65 74 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 25 00 02 00 00 00 04 00 00 00 25 00 00 00 14 0f 7a bb 7c 24 01 00 02 00 05 01 25 00 0b 5a fc d7 14 01 00 02 00 05 01 25 00 00 00 55 44 00 30 01 03 01 00 00 00 00 00 00 03 f3 b4 00 00 00 00 00 03 b6 dc 00 00 00 00 40 1e c5 d4 00 00 00 00 40 0e d3 54 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 33 61 33 64 36 35 65 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 55 44 00 cc 01 15 31 00 01 28 00 42 46 41 50 49 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 c4 00 00 00 00 00 00 00 c4 00 00 00 03 00 00 00 00 00 00 00 2d 35 14 ee 05 00 00 00 ec 00 1c 43 4f b2 95 8f fa 00 00 00 69 70 75 2e 6d 63 62 69 73 74 3a 6b 30 3a 6e 30 3a 73 30 3a 70 30 31 3a 63 30 00 00 00 00 00 00 00 00 00 00 3c 00 00 00 2d 35 1e c6 97 00 00 00 ec 00 1c 43 4f 70 49 5a 04 00 00 01 aa 70 75 2e 6d 63 62 69 73 74 3a 6b 30 3a 6e 30 3a 73 30 3a 70 30 31 3a 63 30 00 00 00 00 00 00 00 00 00 00 3c 00 00 00 2d 35 23 6a c1 00 00 00 ec 00 08 43 4f 25 60 10 27 00 00 00 90 00 00 00 00 00 00 00 01 00 00 00 24 55 44 01 58 01 15 31 00 01 28 00 42 46 41 50 49 5f 49 00 00 00 00 00 00 00 00 00 00 00 00 01 50 00 00 00 00 00 00 01 50 00 00 00 08 00 00 00 00 00 00 00 2d 35 23 78 de 00 00 00 ec 00 00 43 4f 0b b1 67 60 00 00 0b b3 00 00 00 1c 00 00 00 2d 35 23 84 bb 00 00 00 ec 00 08 43 4f f6 cf 06 d1 00 00 00 78 00 00 00 00 00 33 e2 1a 00 00 00 24 00 00 00 2d 35 23 d2 7b 00 00 00 ec 00 08 43 4f e3 80 24 18 00 00 03 48 00 00 00 00 00 33 e2 1a 00 00 00 24 00 00 00 2d 38 2b 2e 28 00 00 00 ec 00 28 43 4f d6 1a 5a 53 00 00 00 ac 70 75 2e 6d 63 61 3a 6b 30 3a 6e 30 3a 73 30 3a 70 30 31 3a 63 31 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 a0 00 00 00 44 00 00 00 2d 38 2b 3f 9b 00 00 00 ec 00 00 43 4f 94 0a 90 3e 00 00 0b de 00 00 00 1c 00 00 00 2d 38 2b 4b 69 00 00 00 ec 00 08 43 4f f6 cf 06 d1 00 00 00 78 00 00 00 00 00 59 a8 ca 00 00 00 24 00 00 00 2d 38 2c 9a 47 00 00 00 ec 00 00 43 4f 46 4e 03 ce 00 00 00 b1 00 00 00 1c 00 00 00 2d 38 2c af b6 00 00 00 ec 00 08 43 4f e3 80 24 18 00 00 03 48 00 00 00 00 00 59 a8 ca 00 00 00 24 55 44 00 30 01 15 31 00 01 28 00 42 53 43 41 4e 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 28 00 00 00 00 00 00 00 28 00 00 00 00 00 00 00 00 55 44 00 30 01 15 31 00 01 28 00 42 46 41 50 49 5f 44 42 47 00 00 00 00 00 00 00 00 00 00 00 28 00 00 00 00 00 00 00 28 00 00 00 00 00 00 00 00 55 44 00 f4 01 15 31 00 01 28 00 42 46 41 50 49 5f 49 00 00 00 00 00 00 00 00 00 00 00 00 00 ec 00 00 00 00 00 00 00 ec 00 00 00 05 00 00 00 00 00 00 00 2d 38 2b 2e 28 00 00 00 ec 00 28 43 4f d6 1a 5a 53 00 00 00 ac 70 75 2e 6d 63 61 3a 6b 30 3a 6e 30 3a 73 30 3a 70 30 31 3a 63 31 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 a0 00 00 00 44 00 00 00 2d 38 2b 3f 9b 00 00 00 ec 00 00 43 4f 94 0a 90 3e 00 00 0b de 00 00 00 1c 00 00 00 2d 38 2b 4b 69 00 00 00 ec 00 08 43 4f f6 cf 06 d1 00 00 00 78 00 00 00 00 00 59 a8 ca 00 00 00 24 00 00 00 2d 38 2c 9a 47 00 00 00 ec 00 00 43 4f 46 4e 03 ce 00 00 00 b1 00 00 00 1c 00 00 00 2d 38 2c af b6 00 00 00 ec 00 08 43 4f e3 80 24 18 00 00 03 48 00 00 00 00 00 59 a8 ca 00 00 00 24 55 44 01 54 01 15 31 00 01 28 00 42 46 41 50 49 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 4c 00 00 00 00 00 00 01 4c 00 00 00 05 00 00 00 00 00 00 00 2d 35 0e 5b 54 00 00 00 ec 00 18 43 4f c8 28 66 4c 00 00 01 2b 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 4f 00 00 00 00 00 00 00 4f 00 00 00 34 00 00 00 2d 35 0e 6c c2 00 00 00 ec 00 38 43 4f b4 15 80 83 00 00 01 96 70 75 2e 6d 63 61 3a 6b 30 3a 6e 30 3a 73 30 3a 70 30 31 3a 63 33 00 00 80 00 10 a4 07 01 10 3f 00 00 00 00 00 00 00 4e 00 00 00 00 00 00 00 4e 00 00 00 00 00 00 00 4f 00 00 00 54 00 00 00 2d 35 14 ee 05 00 00 00 ec 00 1c 43 4f b2 95 8f fa 00 00 00 69 70 75 2e 6d 63 62 69 73 74 3a 6b 30 3a 6e 30 3a 73 30 3a 70 30 31 3a 63 30 00 00 00 00 00 00 00 00 00 00 3c 00 00 00 2d 35 1e c6 97 00 00 00 ec 00 1c 43 4f 70 49 5a 04 00 00 01 aa 70 75 2e 6d 63 62 69 73 74 3a 6b 30 3a 6e 30 3a 73 30 3a 70 30 31 3a 63 30 00 00 00 00 00 00 00 00 00 00 3c 00 00 00 2d 35 23 6a c1 00 00 00 ec 00 08 43 4f 25 60 10 27 00 00 00 90 00 00 00 00 00 00 00 01 00 00 00 24 5f ff f8 00 04 3a 04 6a ff ff f8 00 04 3a 04 6a 1f ff f8 00 02 44 02 86 2f ff f8 00 02 44 02 86 3f ff f8 00 03 1f 03 1e 4f ff f8 00 04 03 03 ff 5f ff f8 00 04 3a 04 6a ff ff f8 00 04 3a 04 6a 1f ff f8 00 02 44 02 86 2f ff f8 00 02 44 02 86 3f ff f8 00 03 1f 03 1e 4f ff f8 00 04 03 03 ff 5f ff f8 00 04 3a 04 6a ff ff f8 00 04 3a 04 6a 1f ff f8 00 02 44 02 86 2f ff f8 00 02 44 02 86 3f ff f8 00 03 1f 03 1e 4f ff f8 00 04 03 03 ff 5f ff f8 00 04 3a 04 6a ff ff f8 00 04 3a 04 6a 1f ff f8 00 02 44 02 86 2f ff f8 00 02 44 02 86 3f ff f8 00 03 1f 03 1e 4f ff f8 00 04 03 03 ff 5f ff f8 00 04 3a 04 6a ff ff f8 00 04 3a 04 6a 1f ff f8 00 02 44 02 86 2f ff f8 00 02 44 02 86 3f ff f8 00 03 1f 03 1e 4f ff f8 00 04 03 03 ff 5f ff f8 00 04 3a 04 6a ff ff f8 00 04 3a 04 6a 1f ff f8 00 02 44 02 86 2f ff f8 00 02 44 02 86 3f ff f8 00 03 1f 03 1e 4f ff f8 00 04 03 03 ff 5f ff f8 00 04 3a 04 6a ff ff f8 00 04 3a 04 6a 1f ff f8 00 02 44 02 86 2f ff f8 00 02 44 02 86 3f ff f8 00 03 1f 03 1e 4f ff f8 00 04 03 03 ff 5f ff f8 00 04 3a 04 6a ff ff f8 00 04 3a 04 6a 1f ff f8 00 02 44 02 86 2f ff f8 00 02 44 02 86 3f ff f8 00 03 1f 03 1e 4f ff f8 00 04 03 03 ff 5f ff f8 00 04 3a 04 6a ff ff f8 00 04 3a 04 6a 1f ff f8 00 02 44 02 86 2f ff f8 00 02 44 02 86"
      ], 
      "Id": 7, 
      "Message": "org.open_power.Error.Host.Event.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Informational", 
      "Timestamp": 1494335180376, 
      "associations": []
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170509 13:15:36.186">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170509 13:15:36.187">${content} = {u'data': {u'/xyz/openbmc_project/logging/entry/3': {u'associations': [], u'AdditionalData': [u'ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 17 00 00 00 00 04 51 67 ef 22 00 ...</msg>
<status status="PASS" starttime="20170509 13:15:36.185" endtime="20170509 13:15:36.187"></status>
</kw>
<kw library="Collections" name="Get Dictionary Keys">
<doc>Returns keys of the given ``dictionary``.</doc>
<arguments>
<arg>${content['data']}</arg>
</arguments>
<assign>
<var>${esel_list}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:15:36.187">${esel_list} = [u'/xyz/openbmc_project/logging/entry/1', u'/xyz/openbmc_project/logging/entry/2', u'/xyz/openbmc_project/logging/entry/3', u'/xyz/openbmc_project/logging/entry/4', u'/xyz/openbmc_project/logging/entr...</msg>
<status status="PASS" starttime="20170509 13:15:36.187" endtime="20170509 13:15:36.188"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>esel</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:15:36.188">${logpath} = /tmp/root/26619/obmc-robot/logs/20170509131533895929_TestsTestBasicPoweron/20170509131533895929_PowerOnTest/20170509131533895929_esel</msg>
<status status="PASS" starttime="20170509 13:15:36.188" endtime="20170509 13:15:36.188"></status>
</kw>
<kw library="OperatingSystem" name="Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${logpath}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:15:36.189" html="yes">Created file '&lt;a href="file:///tmp/root/26619/obmc-robot/logs/20170509131533895929_TestsTestBasicPoweron/20170509131533895929_PowerOnTest/20170509131533895929_esel"&gt;/tmp/root/26619/obmc-robot/logs/20170509131533895929_TestsTestBasicPoweron/20170509131533895929_PowerOnTest/20170509131533895929_esel&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170509 13:15:36.188" endtime="20170509 13:15:36.189"></status>
</kw>
<kw type="for" name="${entry_path} IN [ @{esel_list} ]">
<kw type="foritem" name="${entry_path} = /xyz/openbmc_project/logging/entry/1">
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:15:36.193">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170509 13:15:36.193" endtime="20170509 13:15:36.193"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:15:36.194">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170509 13:15:36.194" endtime="20170509 13:15:36.194"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:15:36.195">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170509 13:15:36.194" endtime="20170509 13:15:36.195"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:15:36.195">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170509 13:15:36.195" endtime="20170509 13:15:36.195"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:15:36.411">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170509 13:15:36.196" endtime="20170509 13:15:36.411"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:15:36.411">${status} = PASS</msg>
<msg level="INFO" timestamp="20170509 13:15:36.411">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:15:36.195" endtime="20170509 13:15:36.412"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:15:36.412">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:15:36.412" endtime="20170509 13:15:36.412"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:15:36.413">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:15:36.412" endtime="20170509 13:15:36.413"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:36.192" endtime="20170509 13:15:36.413"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:36.191" endtime="20170509 13:15:36.413"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:36.191" endtime="20170509 13:15:36.413"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:15:36.414">${base_uri} = /xyz/openbmc_project/logging/entry/1/attr/AdditionalData</msg>
<status status="PASS" starttime="20170509 13:15:36.413" endtime="20170509 13:15:36.414"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20170509 13:15:36.415" endtime="20170509 13:15:36.416"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:15:36.500">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/1/attr/AdditionalData, headers=None json=None</msg>
<msg level="INFO" timestamp="20170509 13:15:36.501">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:15:36.416" endtime="20170509 13:15:36.501"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" starttime="20170509 13:15:36.501" endtime="20170509 13:15:36.502"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:15:36.502">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:15:36.190" endtime="20170509 13:15:36.502"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:15:36.503">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:15:36.502" endtime="20170509 13:15:36.503"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:15:36.504">To JSON using : content={
  "data": [
    "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 17 00 00 00 00 04 50 1d 4a 0d 00 00 00 04 50 1f e9 35 42 00 00 07 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 0e 90 00 00 0e 55 48 00 18 01 00 17 00 8a 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 17 0e 00 48 00 00 00 e0 00 00 0a 00 00 00 00 00 00 20 00 00 00 05 00 01 00 2d 00 04 00 00 00 00 00 00 00 00 42 43 38 41 31 37 30 45 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 06 00 00 00 55 00 03 b6 dc 00 00 00 00 55 44 00 4c 01 02 01 00 ee ee ee ee 54 61 72 67 65 74 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 05 00 01 00 00 00 03 00 00 00 05 00 00 00 14 0f 7a bb 7c 23 01 00 02 00 05 01 0b 5a fc d7 13 01 00 02 00 05 01 00 00 55 44 00 30 01 03 01 00 00 00 00 00 00 03 f3 b4 00 00 00 00 00 03 b6 dc 00 00 00 00 40 04 cd e4 00 00 00 00 40 04 ab 68 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 33 61 33 64 36 35 65 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170509 13:15:36.504">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170509 13:15:36.504">${content} = {u'data': [u'ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 17 00 00 00 00 04 50 1d 4a 0d 00 00 00 04 50 1f e9 35 42 00 00 07 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 0e 90...</msg>
<status status="PASS" starttime="20170509 13:15:36.503" endtime="20170509 13:15:36.504"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:15:36.504">${esel_data} = [u'ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 17 00 00 00 00 04 50 1d 4a 0d 00 00 00 04 50 1f e9 35 42 00 00 07 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 0e 90 00 00 0e ...</msg>
<status status="PASS" starttime="20170509 13:15:36.189" endtime="20170509 13:15:36.504"></status>
</kw>
<kw library="BuiltIn" name="Get Length">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:15:36.505">Length is 1</msg>
<msg level="INFO" timestamp="20170509 13:15:36.505">${length} = 1</msg>
<status status="PASS" starttime="20170509 13:15:36.504" endtime="20170509 13:15:36.505"></status>
</kw>
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<status status="PASS" starttime="20170509 13:15:36.505" endtime="20170509 13:15:36.505"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>"${esel_data[0]}"</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:15:36.507" html="yes">Appended to file '&lt;a href="file:///tmp/root/26619/obmc-robot/logs/20170509131533895929_TestsTestBasicPoweron/20170509131533895929_PowerOnTest/20170509131533895929_esel"&gt;/tmp/root/26619/obmc-robot/logs/20170509131533895929_TestsTestBasicPoweron/20170509131533895929_PowerOnTest/20170509131533895929_esel&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170509 13:15:36.506" endtime="20170509 13:15:36.507"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:36.506" endtime="20170509 13:15:36.507"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:15:36.508" html="yes">Appended to file '&lt;a href="file:///tmp/root/26619/obmc-robot/logs/20170509131533895929_TestsTestBasicPoweron/20170509131533895929_PowerOnTest/20170509131533895929_esel"&gt;/tmp/root/26619/obmc-robot/logs/20170509131533895929_TestsTestBasicPoweron/20170509131533895929_PowerOnTest/20170509131533895929_esel&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170509 13:15:36.508" endtime="20170509 13:15:36.508"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:36.507" endtime="20170509 13:15:36.508"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:36.189" endtime="20170509 13:15:36.508"></status>
</kw>
<kw type="foritem" name="${entry_path} = /xyz/openbmc_project/logging/entry/2">
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:15:36.512">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170509 13:15:36.512" endtime="20170509 13:15:36.513"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:15:36.513">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170509 13:15:36.513" endtime="20170509 13:15:36.513"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:15:36.514">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170509 13:15:36.514" endtime="20170509 13:15:36.514"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:15:36.515">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170509 13:15:36.514" endtime="20170509 13:15:36.515"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:15:36.693">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170509 13:15:36.515" endtime="20170509 13:15:36.693"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:15:36.693">${status} = PASS</msg>
<msg level="INFO" timestamp="20170509 13:15:36.693">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:15:36.515" endtime="20170509 13:15:36.693"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:15:36.694">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:15:36.693" endtime="20170509 13:15:36.694"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:15:36.694">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:15:36.694" endtime="20170509 13:15:36.695"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:36.511" endtime="20170509 13:15:36.695"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:36.511" endtime="20170509 13:15:36.695"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:36.510" endtime="20170509 13:15:36.695"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:15:36.695">${base_uri} = /xyz/openbmc_project/logging/entry/2/attr/AdditionalData</msg>
<status status="PASS" starttime="20170509 13:15:36.695" endtime="20170509 13:15:36.695"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20170509 13:15:36.696" endtime="20170509 13:15:36.696"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:15:36.779">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/2/attr/AdditionalData, headers=None json=None</msg>
<msg level="INFO" timestamp="20170509 13:15:36.779">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:15:36.696" endtime="20170509 13:15:36.779"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" starttime="20170509 13:15:36.780" endtime="20170509 13:15:36.780"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:15:36.780">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:15:36.509" endtime="20170509 13:15:36.780"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:15:36.781">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:15:36.780" endtime="20170509 13:15:36.781"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:15:36.781">To JSON using : content={
  "data": [
    "ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 07 aa 00 00 50 48 00 30 01 00 07 00 00 00 00 04 bf ef 71 1f 00 00 00 04 bf f0 0c 05 42 00 00 08 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 0f 90 00 00 0f 55 48 00 18 01 00 07 00 10 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 07 05 00 48 00 00 00 e0 00 00 05 00 00 00 00 00 00 20 00 00 00 01 00 00 00 05 00 01 02 00 ff ff 01 90 00 4d 42 43 31 30 30 37 30 35 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 24 01 06 01 00 01 54 41 4b 00 00 00 06 00 00 00 00 00 00 00 00 00 00 00 0b 23 01 00 02 00 05 01 00 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 01 00 00 00 55 00 03 b6 dc 00 00 00 00 55 44 00 50 01 03 01 00 00 00 00 00 00 03 f3 b4 00 00 00 00 00 03 b6 dc 00 00 00 00 40 27 a3 b4 00 00 00 00 40 27 ac 88 00 00 00 00 40 27 ad e4 00 00 00 00 40 27 cd 28 00 00 00 00 40 27 cf 10 00 00 00 00 40 0d 40 bc 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 33 61 33 64 36 35 65 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 55 44 00 fc 01 15 31 00 01 28 00 42 49 32 43 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 f4 00 00 00 00 00 00 00 f4 00 00 00 05 00 00 00 00 00 00 00 27 31 19 d2 52 00 00 00 d1 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 27 31 1c dd 01 00 00 00 d1 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 02 00 00 00 2c 00 00 00 27 31 1c ed a1 00 00 00 d1 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 27 31 1d 20 90 00 00 00 d1 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 34 00 00 00 27 32 4a d1 5e 00 00 00 d1 00 08 43 4f 65 c9 23 ee 00 00 07 6b 00 01 00 00 00 00 00 00 00 00 00 24"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170509 13:15:36.782">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170509 13:15:36.782">${content} = {u'data': [u'ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 07 aa 00 00 50 48 00 30 01 00 07 00 00 00 00 04 bf ef 71 1f 00 00 00 04 bf f0 0c 05 42 00 00 08 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 0f 90...</msg>
<status status="PASS" starttime="20170509 13:15:36.781" endtime="20170509 13:15:36.782"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:15:36.782">${esel_data} = [u'ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 07 aa 00 00 50 48 00 30 01 00 07 00 00 00 00 04 bf ef 71 1f 00 00 00 04 bf f0 0c 05 42 00 00 08 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 0f 90 00 00 0f ...</msg>
<status status="PASS" starttime="20170509 13:15:36.509" endtime="20170509 13:15:36.782"></status>
</kw>
<kw library="BuiltIn" name="Get Length">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:15:36.783">Length is 1</msg>
<msg level="INFO" timestamp="20170509 13:15:36.783">${length} = 1</msg>
<status status="PASS" starttime="20170509 13:15:36.782" endtime="20170509 13:15:36.783"></status>
</kw>
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<status status="PASS" starttime="20170509 13:15:36.783" endtime="20170509 13:15:36.783"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>"${esel_data[0]}"</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:15:36.785" html="yes">Appended to file '&lt;a href="file:///tmp/root/26619/obmc-robot/logs/20170509131533895929_TestsTestBasicPoweron/20170509131533895929_PowerOnTest/20170509131533895929_esel"&gt;/tmp/root/26619/obmc-robot/logs/20170509131533895929_TestsTestBasicPoweron/20170509131533895929_PowerOnTest/20170509131533895929_esel&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170509 13:15:36.784" endtime="20170509 13:15:36.785"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:36.783" endtime="20170509 13:15:36.785"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:15:36.786" html="yes">Appended to file '&lt;a href="file:///tmp/root/26619/obmc-robot/logs/20170509131533895929_TestsTestBasicPoweron/20170509131533895929_PowerOnTest/20170509131533895929_esel"&gt;/tmp/root/26619/obmc-robot/logs/20170509131533895929_TestsTestBasicPoweron/20170509131533895929_PowerOnTest/20170509131533895929_esel&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170509 13:15:36.786" endtime="20170509 13:15:36.786"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:36.785" endtime="20170509 13:15:36.786"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:36.508" endtime="20170509 13:15:36.786"></status>
</kw>
<kw type="foritem" name="${entry_path} = /xyz/openbmc_project/logging/entry/3">
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:15:36.790">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170509 13:15:36.789" endtime="20170509 13:15:36.790"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:15:36.791">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170509 13:15:36.790" endtime="20170509 13:15:36.791"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:15:36.791">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170509 13:15:36.791" endtime="20170509 13:15:36.791"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:15:36.792">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170509 13:15:36.792" endtime="20170509 13:15:36.792"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:15:37.110">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170509 13:15:36.793" endtime="20170509 13:15:37.110"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:15:37.110">${status} = PASS</msg>
<msg level="INFO" timestamp="20170509 13:15:37.110">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:15:36.792" endtime="20170509 13:15:37.110"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:15:37.111">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:15:37.110" endtime="20170509 13:15:37.111"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:15:37.111">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:15:37.111" endtime="20170509 13:15:37.112"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:36.789" endtime="20170509 13:15:37.112"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:36.788" endtime="20170509 13:15:37.112"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:36.788" endtime="20170509 13:15:37.112"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:15:37.113">${base_uri} = /xyz/openbmc_project/logging/entry/3/attr/AdditionalData</msg>
<status status="PASS" starttime="20170509 13:15:37.112" endtime="20170509 13:15:37.113"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20170509 13:15:37.113" endtime="20170509 13:15:37.113"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:15:37.345">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/3/attr/AdditionalData, headers=None json=None</msg>
<msg level="INFO" timestamp="20170509 13:15:37.346">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:15:37.114" endtime="20170509 13:15:37.346"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" starttime="20170509 13:15:37.346" endtime="20170509 13:15:37.346"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:15:37.347">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:15:36.787" endtime="20170509 13:15:37.347"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:15:37.347">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:15:37.347" endtime="20170509 13:15:37.347"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:15:37.348">To JSON using : content={
  "data": [
    "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 17 00 00 00 00 04 51 67 ef 22 00 00 00 04 51 69 f4 cb 42 00 00 07 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 11 90 00 00 11 55 48 00 18 01 00 17 00 8a 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 17 0e 00 48 00 00 00 e0 00 00 0a 00 00 00 00 00 00 20 00 00 00 05 00 01 00 2d 00 04 00 00 00 00 00 00 00 00 42 43 38 41 31 37 30 45 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 06 00 00 00 55 00 03 b6 dc 00 00 00 00 55 44 00 4c 01 02 01 00 ee ee ee ee 54 61 72 67 65 74 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 05 00 01 00 00 00 03 00 00 00 05 00 00 00 14 0f 7a bb 7c 23 01 00 02 00 05 01 0b 5a fc d7 13 01 00 02 00 05 01 00 00 55 44 00 30 01 03 01 00 00 00 00 00 00 03 f3 b4 00 00 00 00 00 03 b6 dc 00 00 00 00 40 04 cd e4 00 00 00 00 40 04 ab 68 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 33 61 33 64 36 35 65 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170509 13:15:37.348">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170509 13:15:37.348">${content} = {u'data': [u'ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 17 00 00 00 00 04 51 67 ef 22 00 00 00 04 51 69 f4 cb 42 00 00 07 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 11 90...</msg>
<status status="PASS" starttime="20170509 13:15:37.347" endtime="20170509 13:15:37.348"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:15:37.348">${esel_data} = [u'ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 17 00 00 00 00 04 51 67 ef 22 00 00 00 04 51 69 f4 cb 42 00 00 07 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 11 90 00 00 11 ...</msg>
<status status="PASS" starttime="20170509 13:15:36.787" endtime="20170509 13:15:37.348"></status>
</kw>
<kw library="BuiltIn" name="Get Length">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:15:37.349">Length is 1</msg>
<msg level="INFO" timestamp="20170509 13:15:37.349">${length} = 1</msg>
<status status="PASS" starttime="20170509 13:15:37.349" endtime="20170509 13:15:37.349"></status>
</kw>
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<status status="PASS" starttime="20170509 13:15:37.349" endtime="20170509 13:15:37.350"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>"${esel_data[0]}"</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:15:37.351" html="yes">Appended to file '&lt;a href="file:///tmp/root/26619/obmc-robot/logs/20170509131533895929_TestsTestBasicPoweron/20170509131533895929_PowerOnTest/20170509131533895929_esel"&gt;/tmp/root/26619/obmc-robot/logs/20170509131533895929_TestsTestBasicPoweron/20170509131533895929_PowerOnTest/20170509131533895929_esel&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170509 13:15:37.350" endtime="20170509 13:15:37.351"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:37.350" endtime="20170509 13:15:37.351"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:15:37.352" html="yes">Appended to file '&lt;a href="file:///tmp/root/26619/obmc-robot/logs/20170509131533895929_TestsTestBasicPoweron/20170509131533895929_PowerOnTest/20170509131533895929_esel"&gt;/tmp/root/26619/obmc-robot/logs/20170509131533895929_TestsTestBasicPoweron/20170509131533895929_PowerOnTest/20170509131533895929_esel&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170509 13:15:37.352" endtime="20170509 13:15:37.352"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:37.351" endtime="20170509 13:15:37.352"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:36.787" endtime="20170509 13:15:37.352"></status>
</kw>
<kw type="foritem" name="${entry_path} = /xyz/openbmc_project/logging/entry/4">
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:15:37.356">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170509 13:15:37.355" endtime="20170509 13:15:37.356"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:15:37.357">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170509 13:15:37.356" endtime="20170509 13:15:37.357"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:15:37.357">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170509 13:15:37.357" endtime="20170509 13:15:37.357"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:15:37.358">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170509 13:15:37.357" endtime="20170509 13:15:37.358"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:15:38.032">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170509 13:15:37.359" endtime="20170509 13:15:38.032"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:15:38.032">${status} = PASS</msg>
<msg level="INFO" timestamp="20170509 13:15:38.032">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:15:37.358" endtime="20170509 13:15:38.032"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:15:38.033">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:15:38.033" endtime="20170509 13:15:38.033"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:15:38.034">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:15:38.033" endtime="20170509 13:15:38.034"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:37.355" endtime="20170509 13:15:38.034"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:37.354" endtime="20170509 13:15:38.034"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:37.354" endtime="20170509 13:15:38.034"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:15:38.034">${base_uri} = /xyz/openbmc_project/logging/entry/4/attr/AdditionalData</msg>
<status status="PASS" starttime="20170509 13:15:38.034" endtime="20170509 13:15:38.035"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20170509 13:15:38.035" endtime="20170509 13:15:38.035"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:15:38.207">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/4/attr/AdditionalData, headers=None json=None</msg>
<msg level="INFO" timestamp="20170509 13:15:38.207">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:15:38.035" endtime="20170509 13:15:38.207"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" starttime="20170509 13:15:38.208" endtime="20170509 13:15:38.208"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:15:38.208">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:15:37.353" endtime="20170509 13:15:38.208"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:15:38.209">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:15:38.208" endtime="20170509 13:15:38.209"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:15:38.210">To JSON using : content={
  "data": [
    "ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 07 aa 00 00 50 48 00 30 01 00 07 00 00 00 00 04 c1 45 e2 d7 00 00 00 04 c1 4a 2f f1 42 00 00 08 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 12 90 00 00 12 55 48 00 18 01 00 07 00 10 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 07 05 00 48 00 00 00 e0 00 00 05 00 00 00 00 00 00 20 00 00 00 01 00 00 00 05 00 01 02 00 ff ff 01 90 00 4d 42 43 31 30 30 37 30 35 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 24 01 06 01 00 01 54 41 4b 00 00 00 06 00 00 00 00 00 00 00 00 00 00 00 08 23 01 00 02 00 05 01 00 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 01 00 00 00 55 40 0d 40 bc 00 00 00 00 55 44 00 50 01 03 01 00 00 00 00 00 00 03 f3 b4 00 00 00 00 00 03 b6 dc 00 00 00 00 40 27 a3 b4 00 00 00 00 40 27 ac 88 00 00 00 00 40 27 ad e4 00 00 00 00 40 27 cd 28 00 00 00 00 40 27 cf 10 00 00 00 00 40 0d 40 bc 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 33 61 33 64 36 35 65 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 55 44 00 fc 01 15 31 00 01 28 00 42 49 32 43 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 f4 00 00 00 00 00 00 00 f4 00 00 00 05 00 00 00 00 00 00 00 27 33 b6 51 54 00 00 00 d1 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 27 33 b9 69 dd 00 00 00 d1 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 02 00 00 00 2c 00 00 00 27 33 b9 7a a6 00 00 00 d1 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 27 33 b9 ad aa 00 00 00 d1 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 34 00 00 00 27 34 e7 a7 7b 00 00 00 d1 00 08 43 4f 65 c9 23 ee 00 00 07 6b 00 01 00 00 00 00 00 00 00 00 00 24"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170509 13:15:38.210">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170509 13:15:38.210">${content} = {u'data': [u'ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 07 aa 00 00 50 48 00 30 01 00 07 00 00 00 00 04 c1 45 e2 d7 00 00 00 04 c1 4a 2f f1 42 00 00 08 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 12 90...</msg>
<status status="PASS" starttime="20170509 13:15:38.209" endtime="20170509 13:15:38.210"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:15:38.210">${esel_data} = [u'ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 07 aa 00 00 50 48 00 30 01 00 07 00 00 00 00 04 c1 45 e2 d7 00 00 00 04 c1 4a 2f f1 42 00 00 08 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 12 90 00 00 12 ...</msg>
<status status="PASS" starttime="20170509 13:15:37.353" endtime="20170509 13:15:38.210"></status>
</kw>
<kw library="BuiltIn" name="Get Length">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:15:38.211">Length is 1</msg>
<msg level="INFO" timestamp="20170509 13:15:38.211">${length} = 1</msg>
<status status="PASS" starttime="20170509 13:15:38.211" endtime="20170509 13:15:38.211"></status>
</kw>
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<status status="PASS" starttime="20170509 13:15:38.211" endtime="20170509 13:15:38.211"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>"${esel_data[0]}"</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:15:38.213" html="yes">Appended to file '&lt;a href="file:///tmp/root/26619/obmc-robot/logs/20170509131533895929_TestsTestBasicPoweron/20170509131533895929_PowerOnTest/20170509131533895929_esel"&gt;/tmp/root/26619/obmc-robot/logs/20170509131533895929_TestsTestBasicPoweron/20170509131533895929_PowerOnTest/20170509131533895929_esel&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170509 13:15:38.212" endtime="20170509 13:15:38.213"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:38.212" endtime="20170509 13:15:38.213"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:15:38.214" html="yes">Appended to file '&lt;a href="file:///tmp/root/26619/obmc-robot/logs/20170509131533895929_TestsTestBasicPoweron/20170509131533895929_PowerOnTest/20170509131533895929_esel"&gt;/tmp/root/26619/obmc-robot/logs/20170509131533895929_TestsTestBasicPoweron/20170509131533895929_PowerOnTest/20170509131533895929_esel&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170509 13:15:38.214" endtime="20170509 13:15:38.214"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:38.213" endtime="20170509 13:15:38.214"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:37.352" endtime="20170509 13:15:38.214"></status>
</kw>
<kw type="foritem" name="${entry_path} = /xyz/openbmc_project/logging/entry/5">
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:15:38.217">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170509 13:15:38.217" endtime="20170509 13:15:38.218"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:15:38.218">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170509 13:15:38.218" endtime="20170509 13:15:38.218"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:15:38.219">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170509 13:15:38.219" endtime="20170509 13:15:38.220"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:15:38.221">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170509 13:15:38.220" endtime="20170509 13:15:38.221"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:15:38.768">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170509 13:15:38.221" endtime="20170509 13:15:38.768"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:15:38.768">${status} = PASS</msg>
<msg level="INFO" timestamp="20170509 13:15:38.768">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:15:38.221" endtime="20170509 13:15:38.768"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:15:38.769">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:15:38.769" endtime="20170509 13:15:38.769"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:15:38.770">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:15:38.769" endtime="20170509 13:15:38.770"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:38.217" endtime="20170509 13:15:38.770"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:38.216" endtime="20170509 13:15:38.770"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:38.216" endtime="20170509 13:15:38.770"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:15:38.771">${base_uri} = /xyz/openbmc_project/logging/entry/5/attr/AdditionalData</msg>
<status status="PASS" starttime="20170509 13:15:38.770" endtime="20170509 13:15:38.771"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20170509 13:15:38.771" endtime="20170509 13:15:38.771"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:15:38.952">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/5/attr/AdditionalData, headers=None json=None</msg>
<msg level="INFO" timestamp="20170509 13:15:38.952">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:15:38.772" endtime="20170509 13:15:38.952"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" starttime="20170509 13:15:38.952" endtime="20170509 13:15:38.953"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:15:38.953">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:15:38.215" endtime="20170509 13:15:38.953"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:15:38.953">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:15:38.953" endtime="20170509 13:15:38.954"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:15:38.954">To JSON using : content={
  "data": [
    "ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 07 aa 00 00 50 48 00 30 01 00 07 00 00 00 00 04 c1 45 e2 d7 00 00 00 04 c1 4a 2f f1 42 00 00 08 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 12 90 00 00 12 55 48 00 18 01 00 07 00 10 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 07 05 00 48 00 00 00 e0 00 00 05 00 00 00 00 00 00 20 00 00 00 01 00 00 00 05 00 01 02 00 ff ff 01 90 00 4d 42 43 31 30 30 37 30 35 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 24 01 06 01 00 01 54 41 4b 00 00 00 06 00 00 00 00 00 00 00 00 00 00 00 08 23 01 00 02 00 05 01 00 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 01 00 00 00 55 40 0d 40 bc 00 00 00 00 55 44 00 50 01 03 01 00 00 00 00 00 00 03 f3 b4 00 00 00 00 00 03 b6 dc 00 00 00 00 40 27 a3 b4 00 00 00 00 40 27 ac 88 00 00 00 00 40 27 ad e4 00 00 00 00 40 27 cd 28 00 00 00 00 40 27 cf 10 00 00 00 00 40 0d 40 bc 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 33 61 33 64 36 35 65 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 55 44 00 fc 01 15 31 00 01 28 00 42 49 32 43 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 f4 00 00 00 00 00 00 00 f4 00 00 00 05 00 00 00 00 00 00 00 27 33 b6 51 54 00 00 00 d1 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 27 33 b9 69 dd 00 00 00 d1 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 02 00 00 00 2c 00 00 00 27 33 b9 7a a6 00 00 00 d1 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 27 33 b9 ad aa 00 00 00 d1 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 34 00 00 00 27 34 e7 a7 7b 00 00 00 d1 00 08 43 4f 65 c9 23 ee 00 00 07 6b 00 01 00 00 00 00 00 00 00 00 00 24"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170509 13:15:38.954">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170509 13:15:38.954">${content} = {u'data': [u'ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 07 aa 00 00 50 48 00 30 01 00 07 00 00 00 00 04 c1 45 e2 d7 00 00 00 04 c1 4a 2f f1 42 00 00 08 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 12 90...</msg>
<status status="PASS" starttime="20170509 13:15:38.954" endtime="20170509 13:15:38.954"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:15:38.955">${esel_data} = [u'ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 07 aa 00 00 50 48 00 30 01 00 07 00 00 00 00 04 c1 45 e2 d7 00 00 00 04 c1 4a 2f f1 42 00 00 08 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 12 90 00 00 12 ...</msg>
<status status="PASS" starttime="20170509 13:15:38.214" endtime="20170509 13:15:38.955"></status>
</kw>
<kw library="BuiltIn" name="Get Length">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:15:38.955">Length is 1</msg>
<msg level="INFO" timestamp="20170509 13:15:38.955">${length} = 1</msg>
<status status="PASS" starttime="20170509 13:15:38.955" endtime="20170509 13:15:38.955"></status>
</kw>
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<status status="PASS" starttime="20170509 13:15:38.956" endtime="20170509 13:15:38.956"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>"${esel_data[0]}"</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:15:38.957" html="yes">Appended to file '&lt;a href="file:///tmp/root/26619/obmc-robot/logs/20170509131533895929_TestsTestBasicPoweron/20170509131533895929_PowerOnTest/20170509131533895929_esel"&gt;/tmp/root/26619/obmc-robot/logs/20170509131533895929_TestsTestBasicPoweron/20170509131533895929_PowerOnTest/20170509131533895929_esel&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170509 13:15:38.957" endtime="20170509 13:15:38.957"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:38.956" endtime="20170509 13:15:38.957"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:15:38.958" html="yes">Appended to file '&lt;a href="file:///tmp/root/26619/obmc-robot/logs/20170509131533895929_TestsTestBasicPoweron/20170509131533895929_PowerOnTest/20170509131533895929_esel"&gt;/tmp/root/26619/obmc-robot/logs/20170509131533895929_TestsTestBasicPoweron/20170509131533895929_PowerOnTest/20170509131533895929_esel&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170509 13:15:38.958" endtime="20170509 13:15:38.958"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:38.957" endtime="20170509 13:15:38.959"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:38.214" endtime="20170509 13:15:38.959"></status>
</kw>
<kw type="foritem" name="${entry_path} = /xyz/openbmc_project/logging/entry/6">
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:15:38.962">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170509 13:15:38.962" endtime="20170509 13:15:38.963"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:15:38.964">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170509 13:15:38.963" endtime="20170509 13:15:38.964"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:15:38.964">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170509 13:15:38.964" endtime="20170509 13:15:38.965"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:15:38.965">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170509 13:15:38.965" endtime="20170509 13:15:38.965"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:15:39.379">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170509 13:15:38.966" endtime="20170509 13:15:39.379"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:15:39.379">${status} = PASS</msg>
<msg level="INFO" timestamp="20170509 13:15:39.379">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:15:38.966" endtime="20170509 13:15:39.379"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:15:39.380">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:15:39.380" endtime="20170509 13:15:39.380"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:15:39.381">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:15:39.380" endtime="20170509 13:15:39.381"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:38.961" endtime="20170509 13:15:39.381"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:38.961" endtime="20170509 13:15:39.381"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:38.960" endtime="20170509 13:15:39.381"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:15:39.382">${base_uri} = /xyz/openbmc_project/logging/entry/6/attr/AdditionalData</msg>
<status status="PASS" starttime="20170509 13:15:39.381" endtime="20170509 13:15:39.382"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20170509 13:15:39.382" endtime="20170509 13:15:39.382"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:15:39.529">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/6/attr/AdditionalData, headers=None json=None</msg>
<msg level="INFO" timestamp="20170509 13:15:39.529">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:15:39.382" endtime="20170509 13:15:39.529"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" starttime="20170509 13:15:39.529" endtime="20170509 13:15:39.530"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:15:39.530">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:15:38.959" endtime="20170509 13:15:39.530"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:15:39.530">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:15:39.530" endtime="20170509 13:15:39.531"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:15:39.531">To JSON using : content={
  "data": [
    "ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 07 aa 00 00 50 48 00 30 01 00 09 00 00 00 00 05 78 7f b1 67 00 00 00 05 7a 0c ce 3a 42 00 00 0d 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 13 90 00 00 13 55 48 00 18 01 00 09 00 75 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 09 0f 00 48 00 00 00 e0 00 00 01 00 00 00 00 00 02 20 00 00 00 00 00 00 00 33 e2 1a 00 00 00 00 00 00 00 00 42 43 37 35 30 39 30 46 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 2c 01 06 01 00 01 54 41 4b 00 00 00 06 00 00 00 02 00 00 00 00 00 00 00 08 26 01 00 02 00 05 01 25 00 0b 00 24 01 00 00 00 55 44 00 0c 01 01 09 00 00 33 e2 1a 55 44 00 14 01 02 09 00 09 64 a0 0c 00 00 00 00 00 00 00 00 55 44 00 14 01 02 09 00 77 14 09 28 00 00 00 00 00 00 00 a0 55 44 00 50 01 03 01 00 00 00 00 00 00 03 f3 b4 00 00 00 00 00 03 b6 dc 00 00 00 00 40 1e c5 d4 00 00 00 00 40 1e c6 e0 00 00 00 00 40 1e c7 b4 00 00 00 00 40 42 15 40 00 00 00 00 40 10 f9 84 00 00 00 00 40 0e d3 18 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 33 61 33 64 36 35 65 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 55 44 00 cc 01 15 31 00 01 28 00 42 46 41 50 49 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 c4 00 00 00 00 00 00 00 c4 00 00 00 03 00 00 00 00 00 00 00 2d 35 14 ee 05 00 00 00 ec 00 1c 43 4f b2 95 8f fa 00 00 00 69 70 75 2e 6d 63 62 69 73 74 3a 6b 30 3a 6e 30 3a 73 30 3a 70 30 31 3a 63 30 00 00 00 00 00 00 00 00 00 00 3c 00 00 00 2d 35 1e c6 97 00 00 00 ec 00 1c 43 4f 70 49 5a 04 00 00 01 aa 70 75 2e 6d 63 62 69 73 74 3a 6b 30 3a 6e 30 3a 73 30 3a 70 30 31 3a 63 30 00 00 00 00 00 00 00 00 00 00 3c 00 00 00 2d 35 23 6a c1 00 00 00 ec 00 08 43 4f 25 60 10 27 00 00 00 90 00 00 00 00 00 00 00 01 00 00 00 24 55 44 01 84 01 15 31 00 01 28 00 42 46 41 50 49 5f 49 00 00 00 00 00 00 00 00 00 00 00 00 01 7c 00 00 00 00 00 00 01 7c 00 00 00 07 00 00 00 00 00 00 00 2a 2e 8f 14 87 00 00 00 d1 00 20 43 4f 79 5d 7d 7b 00 00 03 2c 00 00 00 00 00 00 00 14 00 00 00 00 00 00 00 df 00 00 00 00 00 00 00 14 00 00 00 00 00 00 00 00 00 00 00 3c 00 00 00 2a 2e 90 bd 3a 00 00 00 d1 00 20 43 4f 79 5d 7d 7b 00 00 03 2c 00 00 00 00 00 00 00 14 00 00 00 00 00 00 00 df 00 00 00 00 00 00 00 54 00 00 00 00 00 00 00 00 00 00 00 3c 00 00 00 2a 2e 94 23 98 00 00 00 d1 00 20 43 4f 79 5d 7d 7b 00 00 03 2c 00 00 00 00 00 00 00 32 00 00 00 00 00 00 00 e4 00 00 00 00 00 00 00 1c 00 00 00 00 00 00 00 00 00 00 00 3c 00 00 00 2a 2e 96 7e 1f 00 00 00 d1 00 20 43 4f 79 5d 7d 7b 00 00 03 2c 00 00 00 00 00 00 00 33 00 00 00 00 00 00 00 e4 00 00 00 00 00 00 00 1c 00 00 00 00 00 00 00 00 00 00 00 3c 00 00 00 2d 35 23 78 de 00 00 00 ec 00 00 43 4f 0b b1 67 60 00 00 0b b3 00 00 00 1c 00 00 00 2d 35 23 84 bb 00 00 00 ec 00 08 43 4f f6 cf 06 d1 00 00 00 78 00 00 00 00 00 33 e2 1a 00 00 00 24 00 00 00 2d 35 23 d2 7b 00 00 00 ec 00 08 43 4f e3 80 24 18 00 00 03 48 00 00 00 00 00 33 e2 1a 00 00 00 24 55 44 00 30 01 15 31 00 01 28 00 42 53 43 41 4e 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 28 00 00 00 00 00 00 00 28 00 00 00 00 00 00 00 00 55 44 00 30 01 15 31 00 01 28 00 42 46 41 50 49 5f 44 42 47 00 00 00 00 00 00 00 00 00 00 00 28 00 00 00 00 00 00 00 28 00 00 00 00 00 00 00 00"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170509 13:15:39.531">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170509 13:15:39.531">${content} = {u'data': [u'ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 07 aa 00 00 50 48 00 30 01 00 09 00 00 00 00 05 78 7f b1 67 00 00 00 05 7a 0c ce 3a 42 00 00 0d 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 13 90...</msg>
<status status="PASS" starttime="20170509 13:15:39.531" endtime="20170509 13:15:39.531"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:15:39.532">${esel_data} = [u'ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 07 aa 00 00 50 48 00 30 01 00 09 00 00 00 00 05 78 7f b1 67 00 00 00 05 7a 0c ce 3a 42 00 00 0d 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 13 90 00 00 13 ...</msg>
<status status="PASS" starttime="20170509 13:15:38.959" endtime="20170509 13:15:39.532"></status>
</kw>
<kw library="BuiltIn" name="Get Length">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:15:39.532">Length is 1</msg>
<msg level="INFO" timestamp="20170509 13:15:39.532">${length} = 1</msg>
<status status="PASS" starttime="20170509 13:15:39.532" endtime="20170509 13:15:39.532"></status>
</kw>
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<status status="PASS" starttime="20170509 13:15:39.533" endtime="20170509 13:15:39.533"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>"${esel_data[0]}"</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:15:39.534" html="yes">Appended to file '&lt;a href="file:///tmp/root/26619/obmc-robot/logs/20170509131533895929_TestsTestBasicPoweron/20170509131533895929_PowerOnTest/20170509131533895929_esel"&gt;/tmp/root/26619/obmc-robot/logs/20170509131533895929_TestsTestBasicPoweron/20170509131533895929_PowerOnTest/20170509131533895929_esel&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170509 13:15:39.534" endtime="20170509 13:15:39.534"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:39.533" endtime="20170509 13:15:39.534"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:15:39.535" html="yes">Appended to file '&lt;a href="file:///tmp/root/26619/obmc-robot/logs/20170509131533895929_TestsTestBasicPoweron/20170509131533895929_PowerOnTest/20170509131533895929_esel"&gt;/tmp/root/26619/obmc-robot/logs/20170509131533895929_TestsTestBasicPoweron/20170509131533895929_PowerOnTest/20170509131533895929_esel&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170509 13:15:39.535" endtime="20170509 13:15:39.535"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:39.534" endtime="20170509 13:15:39.536"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:38.959" endtime="20170509 13:15:39.536"></status>
</kw>
<kw type="foritem" name="${entry_path} = /xyz/openbmc_project/logging/entry/7">
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:15:39.539">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170509 13:15:39.539" endtime="20170509 13:15:39.539"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:15:39.540">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170509 13:15:39.540" endtime="20170509 13:15:39.540"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:15:39.541">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170509 13:15:39.540" endtime="20170509 13:15:39.541"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:15:39.541">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170509 13:15:39.541" endtime="20170509 13:15:39.541"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:15:40.099">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170509 13:15:39.542" endtime="20170509 13:15:40.099"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:15:40.099">${status} = PASS</msg>
<msg level="INFO" timestamp="20170509 13:15:40.099">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:15:39.542" endtime="20170509 13:15:40.099"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:15:40.100">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:15:40.100" endtime="20170509 13:15:40.100"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:15:40.101">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:15:40.100" endtime="20170509 13:15:40.101"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:39.538" endtime="20170509 13:15:40.101"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:39.538" endtime="20170509 13:15:40.101"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:39.537" endtime="20170509 13:15:40.101"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:15:40.102">${base_uri} = /xyz/openbmc_project/logging/entry/7/attr/AdditionalData</msg>
<status status="PASS" starttime="20170509 13:15:40.101" endtime="20170509 13:15:40.102"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20170509 13:15:40.102" endtime="20170509 13:15:40.102"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:15:40.192">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/7/attr/AdditionalData, headers=None json=None</msg>
<msg level="INFO" timestamp="20170509 13:15:40.192">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:15:40.103" endtime="20170509 13:15:40.192"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" starttime="20170509 13:15:40.192" endtime="20170509 13:15:40.193"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:15:40.193">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:15:39.536" endtime="20170509 13:15:40.193"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:15:40.194">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:15:40.193" endtime="20170509 13:15:40.194"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:15:40.194">To JSON using : content={
  "data": [
    "ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 07 aa 00 00 50 48 00 30 01 00 09 00 00 00 00 05 7a 0d 72 65 00 00 00 05 88 ff 2e c6 42 00 00 0e 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 14 90 00 00 14 55 48 00 18 01 00 09 00 75 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 09 0f 00 48 00 00 00 e0 00 00 01 00 00 00 00 00 00 20 00 00 00 00 00 00 00 59 a8 ca 00 00 00 00 00 00 00 00 42 43 37 35 30 39 30 46 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 28 01 06 01 00 01 54 41 4b 00 00 00 06 00 00 00 00 00 00 00 00 00 00 00 09 24 01 00 02 00 05 01 25 00 00 00 00 55 44 00 0c 01 01 09 00 00 59 a8 ca 55 44 00 50 01 02 01 00 ee ee ee ee 54 61 72 67 65 74 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 25 00 02 00 00 00 04 00 00 00 25 00 00 00 14 0f 7a bb 7c 24 01 00 02 00 05 01 25 00 0b 5a fc d7 14 01 00 02 00 05 01 25 00 00 00 55 44 00 30 01 03 01 00 00 00 00 00 00 03 f3 b4 00 00 00 00 00 03 b6 dc 00 00 00 00 40 1e c5 d4 00 00 00 00 40 0e d3 54 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 33 61 33 64 36 35 65 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 55 44 00 cc 01 15 31 00 01 28 00 42 46 41 50 49 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 c4 00 00 00 00 00 00 00 c4 00 00 00 03 00 00 00 00 00 00 00 2d 35 14 ee 05 00 00 00 ec 00 1c 43 4f b2 95 8f fa 00 00 00 69 70 75 2e 6d 63 62 69 73 74 3a 6b 30 3a 6e 30 3a 73 30 3a 70 30 31 3a 63 30 00 00 00 00 00 00 00 00 00 00 3c 00 00 00 2d 35 1e c6 97 00 00 00 ec 00 1c 43 4f 70 49 5a 04 00 00 01 aa 70 75 2e 6d 63 62 69 73 74 3a 6b 30 3a 6e 30 3a 73 30 3a 70 30 31 3a 63 30 00 00 00 00 00 00 00 00 00 00 3c 00 00 00 2d 35 23 6a c1 00 00 00 ec 00 08 43 4f 25 60 10 27 00 00 00 90 00 00 00 00 00 00 00 01 00 00 00 24 55 44 01 58 01 15 31 00 01 28 00 42 46 41 50 49 5f 49 00 00 00 00 00 00 00 00 00 00 00 00 01 50 00 00 00 00 00 00 01 50 00 00 00 08 00 00 00 00 00 00 00 2d 35 23 78 de 00 00 00 ec 00 00 43 4f 0b b1 67 60 00 00 0b b3 00 00 00 1c 00 00 00 2d 35 23 84 bb 00 00 00 ec 00 08 43 4f f6 cf 06 d1 00 00 00 78 00 00 00 00 00 33 e2 1a 00 00 00 24 00 00 00 2d 35 23 d2 7b 00 00 00 ec 00 08 43 4f e3 80 24 18 00 00 03 48 00 00 00 00 00 33 e2 1a 00 00 00 24 00 00 00 2d 38 2b 2e 28 00 00 00 ec 00 28 43 4f d6 1a 5a 53 00 00 00 ac 70 75 2e 6d 63 61 3a 6b 30 3a 6e 30 3a 73 30 3a 70 30 31 3a 63 31 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 a0 00 00 00 44 00 00 00 2d 38 2b 3f 9b 00 00 00 ec 00 00 43 4f 94 0a 90 3e 00 00 0b de 00 00 00 1c 00 00 00 2d 38 2b 4b 69 00 00 00 ec 00 08 43 4f f6 cf 06 d1 00 00 00 78 00 00 00 00 00 59 a8 ca 00 00 00 24 00 00 00 2d 38 2c 9a 47 00 00 00 ec 00 00 43 4f 46 4e 03 ce 00 00 00 b1 00 00 00 1c 00 00 00 2d 38 2c af b6 00 00 00 ec 00 08 43 4f e3 80 24 18 00 00 03 48 00 00 00 00 00 59 a8 ca 00 00 00 24 55 44 00 30 01 15 31 00 01 28 00 42 53 43 41 4e 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 28 00 00 00 00 00 00 00 28 00 00 00 00 00 00 00 00 55 44 00 30 01 15 31 00 01 28 00 42 46 41 50 49 5f 44 42 47 00 00 00 00 00 00 00 00 00 00 00 28 00 00 00 00 00 00 00 28 00 00 00 00 00 00 00 00 55 44 00 f4 01 15 31 00 01 28 00 42 46 41 50 49 5f 49 00 00 00 00 00 00 00 00 00 00 00 00 00 ec 00 00 00 00 00 00 00 ec 00 00 00 05 00 00 00 00 00 00 00 2d 38 2b 2e 28 00 00 00 ec 00 28 43 4f d6 1a 5a 53 00 00 00 ac 70 75 2e 6d 63 61 3a 6b 30 3a 6e 30 3a 73 30 3a 70 30 31 3a 63 31 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 a0 00 00 00 44 00 00 00 2d 38 2b 3f 9b 00 00 00 ec 00 00 43 4f 94 0a 90 3e 00 00 0b de 00 00 00 1c 00 00 00 2d 38 2b 4b 69 00 00 00 ec 00 08 43 4f f6 cf 06 d1 00 00 00 78 00 00 00 00 00 59 a8 ca 00 00 00 24 00 00 00 2d 38 2c 9a 47 00 00 00 ec 00 00 43 4f 46 4e 03 ce 00 00 00 b1 00 00 00 1c 00 00 00 2d 38 2c af b6 00 00 00 ec 00 08 43 4f e3 80 24 18 00 00 03 48 00 00 00 00 00 59 a8 ca 00 00 00 24 55 44 01 54 01 15 31 00 01 28 00 42 46 41 50 49 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 4c 00 00 00 00 00 00 01 4c 00 00 00 05 00 00 00 00 00 00 00 2d 35 0e 5b 54 00 00 00 ec 00 18 43 4f c8 28 66 4c 00 00 01 2b 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 4f 00 00 00 00 00 00 00 4f 00 00 00 34 00 00 00 2d 35 0e 6c c2 00 00 00 ec 00 38 43 4f b4 15 80 83 00 00 01 96 70 75 2e 6d 63 61 3a 6b 30 3a 6e 30 3a 73 30 3a 70 30 31 3a 63 33 00 00 80 00 10 a4 07 01 10 3f 00 00 00 00 00 00 00 4e 00 00 00 00 00 00 00 4e 00 00 00 00 00 00 00 4f 00 00 00 54 00 00 00 2d 35 14 ee 05 00 00 00 ec 00 1c 43 4f b2 95 8f fa 00 00 00 69 70 75 2e 6d 63 62 69 73 74 3a 6b 30 3a 6e 30 3a 73 30 3a 70 30 31 3a 63 30 00 00 00 00 00 00 00 00 00 00 3c 00 00 00 2d 35 1e c6 97 00 00 00 ec 00 1c 43 4f 70 49 5a 04 00 00 01 aa 70 75 2e 6d 63 62 69 73 74 3a 6b 30 3a 6e 30 3a 73 30 3a 70 30 31 3a 63 30 00 00 00 00 00 00 00 00 00 00 3c 00 00 00 2d 35 23 6a c1 00 00 00 ec 00 08 43 4f 25 60 10 27 00 00 00 90 00 00 00 00 00 00 00 01 00 00 00 24 5f ff f8 00 04 3a 04 6a ff ff f8 00 04 3a 04 6a 1f ff f8 00 02 44 02 86 2f ff f8 00 02 44 02 86 3f ff f8 00 03 1f 03 1e 4f ff f8 00 04 03 03 ff 5f ff f8 00 04 3a 04 6a ff ff f8 00 04 3a 04 6a 1f ff f8 00 02 44 02 86 2f ff f8 00 02 44 02 86 3f ff f8 00 03 1f 03 1e 4f ff f8 00 04 03 03 ff 5f ff f8 00 04 3a 04 6a ff ff f8 00 04 3a 04 6a 1f ff f8 00 02 44 02 86 2f ff f8 00 02 44 02 86 3f ff f8 00 03 1f 03 1e 4f ff f8 00 04 03 03 ff 5f ff f8 00 04 3a 04 6a ff ff f8 00 04 3a 04 6a 1f ff f8 00 02 44 02 86 2f ff f8 00 02 44 02 86 3f ff f8 00 03 1f 03 1e 4f ff f8 00 04 03 03 ff 5f ff f8 00 04 3a 04 6a ff ff f8 00 04 3a 04 6a 1f ff f8 00 02 44 02 86 2f ff f8 00 02 44 02 86 3f ff f8 00 03 1f 03 1e 4f ff f8 00 04 03 03 ff 5f ff f8 00 04 3a 04 6a ff ff f8 00 04 3a 04 6a 1f ff f8 00 02 44 02 86 2f ff f8 00 02 44 02 86 3f ff f8 00 03 1f 03 1e 4f ff f8 00 04 03 03 ff 5f ff f8 00 04 3a 04 6a ff ff f8 00 04 3a 04 6a 1f ff f8 00 02 44 02 86 2f ff f8 00 02 44 02 86 3f ff f8 00 03 1f 03 1e 4f ff f8 00 04 03 03 ff 5f ff f8 00 04 3a 04 6a ff ff f8 00 04 3a 04 6a 1f ff f8 00 02 44 02 86 2f ff f8 00 02 44 02 86 3f ff f8 00 03 1f 03 1e 4f ff f8 00 04 03 03 ff 5f ff f8 00 04 3a 04 6a ff ff f8 00 04 3a 04 6a 1f ff f8 00 02 44 02 86 2f ff f8 00 02 44 02 86"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170509 13:15:40.195">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170509 13:15:40.195">${content} = {u'data': [u'ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 07 aa 00 00 50 48 00 30 01 00 09 00 00 00 00 05 7a 0d 72 65 00 00 00 05 88 ff 2e c6 42 00 00 0e 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 14 90...</msg>
<status status="PASS" starttime="20170509 13:15:40.194" endtime="20170509 13:15:40.195"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:15:40.195">${esel_data} = [u'ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 07 aa 00 00 50 48 00 30 01 00 09 00 00 00 00 05 7a 0d 72 65 00 00 00 05 88 ff 2e c6 42 00 00 0e 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 14 90 00 00 14 ...</msg>
<status status="PASS" starttime="20170509 13:15:39.536" endtime="20170509 13:15:40.195"></status>
</kw>
<kw library="BuiltIn" name="Get Length">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:15:40.196">Length is 1</msg>
<msg level="INFO" timestamp="20170509 13:15:40.196">${length} = 1</msg>
<status status="PASS" starttime="20170509 13:15:40.195" endtime="20170509 13:15:40.196"></status>
</kw>
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<status status="PASS" starttime="20170509 13:15:40.196" endtime="20170509 13:15:40.196"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>"${esel_data[0]}"</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:15:40.198" html="yes">Appended to file '&lt;a href="file:///tmp/root/26619/obmc-robot/logs/20170509131533895929_TestsTestBasicPoweron/20170509131533895929_PowerOnTest/20170509131533895929_esel"&gt;/tmp/root/26619/obmc-robot/logs/20170509131533895929_TestsTestBasicPoweron/20170509131533895929_PowerOnTest/20170509131533895929_esel&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170509 13:15:40.197" endtime="20170509 13:15:40.198"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:40.197" endtime="20170509 13:15:40.198"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:15:40.199" html="yes">Appended to file '&lt;a href="file:///tmp/root/26619/obmc-robot/logs/20170509131533895929_TestsTestBasicPoweron/20170509131533895929_PowerOnTest/20170509131533895929_esel"&gt;/tmp/root/26619/obmc-robot/logs/20170509131533895929_TestsTestBasicPoweron/20170509131533895929_PowerOnTest/20170509131533895929_esel&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170509 13:15:40.199" endtime="20170509 13:15:40.199"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:40.198" endtime="20170509 13:15:40.199"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:39.536" endtime="20170509 13:15:40.199"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:36.189" endtime="20170509 13:15:40.199"></status>
</kw>
<kw library="OperatingSystem" name="Run">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>which eSEL.pl</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:15:40.203">Running command 'which eSEL.pl 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170509 13:15:40.207">${out} = </msg>
<status status="PASS" starttime="20170509 13:15:40.199" endtime="20170509 13:15:40.207"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${out}</arg>
<arg>eSEL.pl</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Contain">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${out}</arg>
<arg>eSEL.pl</arg>
</arguments>
<msg level="FAIL" timestamp="20170509 13:15:40.214">'' does not contain 'eSEL.pl'</msg>
<status status="FAIL" starttime="20170509 13:15:40.213" endtime="20170509 13:15:40.214"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:15:40.214">${status} = False</msg>
<status status="PASS" starttime="20170509 13:15:40.210" endtime="20170509 13:15:40.214"></status>
</kw>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:15:40.214">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20170509 13:15:40.214" endtime="20170509 13:15:40.214"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:35.758" endtime="20170509 13:15:40.215"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:35.730" endtime="20170509 13:15:40.215"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:35.728" endtime="20170509 13:15:40.215"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:35.728" endtime="20170509 13:15:40.215"></status>
</kw>
<kw type="foritem" name="${method} = ('Core Files', 'SCP Coredump Files')">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="Collections" name="List Should Contain Value">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" starttime="20170509 13:15:40.217" endtime="20170509 13:15:40.217"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:15:40.217">${status} = PASS</msg>
<msg level="INFO" timestamp="20170509 13:15:40.217">${ret_values} = None</msg>
<status status="PASS" starttime="20170509 13:15:40.216" endtime="20170509 13:15:40.217"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" starttime="20170509 13:15:40.218" endtime="20170509 13:15:40.218"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="SCP Coredump Files">
<doc>Copy core dump file from BMC to local system.</doc>
<kw library="connection_client" name="Open Connection And Log In">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20170509 13:15:40.245">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" starttime="20170509 13:15:40.244" endtime="20170509 13:15:40.245"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:15:40.245">${has_host} = False</msg>
<status status="PASS" starttime="20170509 13:15:40.244" endtime="20170509 13:15:40.245"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" starttime="20170509 13:15:40.245" endtime="20170509 13:15:40.246"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:40.245" endtime="20170509 13:15:40.246"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw library="connection_client" name="User input SSH and HTTPs Ports">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:15:40.248">${port_num} = 22</msg>
<status status="PASS" starttime="20170509 13:15:40.247" endtime="20170509 13:15:40.248"></status>
</kw>
<kw library="BuiltIn" name="Replace Variables">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:15:40.248">${SSH_PORT} = 22</msg>
<status status="PASS" starttime="20170509 13:15:40.248" endtime="20170509 13:15:40.248"></status>
</kw>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:15:40.249">${https_num} = 443</msg>
<status status="PASS" starttime="20170509 13:15:40.248" endtime="20170509 13:15:40.249"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:15:40.250">${AUTH_URI} = https://9.3.86.161:443</msg>
<status status="PASS" starttime="20170509 13:15:40.249" endtime="20170509 13:15:40.250"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:40.247" endtime="20170509 13:15:40.250"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:40.246" endtime="20170509 13:15:40.250"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20170509 13:15:40.251">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" starttime="20170509 13:15:40.251" endtime="20170509 13:15:40.251"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:15:40.251">${has_port} = False</msg>
<status status="PASS" starttime="20170509 13:15:40.250" endtime="20170509 13:15:40.251"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keywords">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status status="PASS" starttime="20170509 13:15:40.252" endtime="20170509 13:15:40.253"></status>
</kw>
<kw library="SSHLibrary" name="Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" starttime="20170509 13:15:40.253" endtime="20170509 13:15:40.254"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:40.252" endtime="20170509 13:15:40.254"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:40.251" endtime="20170509 13:15:40.254"></status>
</kw>
<kw library="SSHLibrary" name="Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:15:40.254">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg level="INFO" timestamp="20170509 13:15:41.901">Read output: root@witherspoon:~#</msg>
<status status="PASS" starttime="20170509 13:15:40.254" endtime="20170509 13:15:41.902"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:40.243" endtime="20170509 13:15:41.902"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls /tmp/core_*</arg>
</arguments>
<assign>
<var>${core_files}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:15:41.902">Executing command 'ls /tmp/core_*'.</msg>
<msg level="INFO" timestamp="20170509 13:15:42.294">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170509 13:15:42.294">${core_files} = /tmp/core_phosphor-hwmon-.1591</msg>
<status status="PASS" starttime="20170509 13:15:41.902" endtime="20170509 13:15:42.294"></status>
</kw>
<kw library="String" name="Split String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${core_files}</arg>
</arguments>
<assign>
<var>@{core_list}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:15:42.295">@{core_list} = [ /tmp/core_phosphor-hwmon-.1591 ]</msg>
<status status="PASS" starttime="20170509 13:15:42.294" endtime="20170509 13:15:42.295"></status>
</kw>
<kw library="connection_client" name="Open Connection for SCP">
<kw library="BuiltIn" name="Import Library">
<doc>Imports a library with the given name and optional arguments.</doc>
<arguments>
<arg>SCPLibrary</arg>
<arg>WITH NAME</arg>
<arg>scp</arg>
</arguments>
<status status="PASS" starttime="20170509 13:15:42.295" endtime="20170509 13:15:42.302"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' == '${EMPTY}'</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw library="scp" name="Open Connection">
<doc>Opens a new SCP connection to the given host.</doc>
<arguments>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<status status="PASS" starttime="20170509 13:15:42.303" endtime="20170509 13:15:43.743"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:42.303" endtime="20170509 13:15:43.743"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:42.302" endtime="20170509 13:15:43.743"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:42.295" endtime="20170509 13:15:43.743"></status>
</kw>
<kw type="for" name="${index} IN [ @{core_list} ]">
<kw type="foritem" name="${index} = /tmp/core_phosphor-hwmon-.1591">
<kw library="scp" name="Get File">
<doc>Downloads a file from the remote machine to the local machine.</doc>
<arguments>
<arg>${index}</arg>
<arg>${LOG_PREFIX}${index.lstrip("/tmp/")}</arg>
</arguments>
<status status="PASS" starttime="20170509 13:15:43.744" endtime="20170509 13:15:45.100"></status>
</kw>
<kw library="utils" name="Execute Command On BMC">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>rm ${index}</arg>
</arguments>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:15:45.101">Executing command 'rm /tmp/core_phosphor-hwmon-.1591'.</msg>
<msg level="INFO" timestamp="20170509 13:15:45.424">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170509 13:15:45.424">${stdout} = </msg>
<msg level="INFO" timestamp="20170509 13:15:45.424">${stderr} = </msg>
<status status="PASS" starttime="20170509 13:15:45.101" endtime="20170509 13:15:45.424"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:15:45.425">Length is 0</msg>
<status status="PASS" starttime="20170509 13:15:45.425" endtime="20170509 13:15:45.425"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:45.100" endtime="20170509 13:15:45.425"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:43.744" endtime="20170509 13:15:45.425"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:43.743" endtime="20170509 13:15:45.425"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:40.243" endtime="20170509 13:15:45.425"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:40.218" endtime="20170509 13:15:45.425"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:40.215" endtime="20170509 13:15:45.426"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:40.215" endtime="20170509 13:15:45.426"></status>
</kw>
<kw type="foritem" name="${method} = ('FFDC Generic Report', 'BMC FFDC Manifest')">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="Collections" name="List Should Contain Value">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" starttime="20170509 13:15:45.427" endtime="20170509 13:15:45.427"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:15:45.428">${status} = PASS</msg>
<msg level="INFO" timestamp="20170509 13:15:45.428">${ret_values} = None</msg>
<status status="PASS" starttime="20170509 13:15:45.427" endtime="20170509 13:15:45.428"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" starttime="20170509 13:15:45.428" endtime="20170509 13:15:45.428"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="BMC FFDC Manifest">
<doc>Get the commands index for the FFDC_BMC_CMD,</doc>
<kw library="connection_client" name="Open Connection And Log In">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20170509 13:15:45.453">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" starttime="20170509 13:15:45.453" endtime="20170509 13:15:45.454"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:15:45.454">${has_host} = False</msg>
<status status="PASS" starttime="20170509 13:15:45.453" endtime="20170509 13:15:45.454"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" starttime="20170509 13:15:45.454" endtime="20170509 13:15:45.455"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:45.454" endtime="20170509 13:15:45.455"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw library="connection_client" name="User input SSH and HTTPs Ports">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:15:45.456">${port_num} = 22</msg>
<status status="PASS" starttime="20170509 13:15:45.456" endtime="20170509 13:15:45.456"></status>
</kw>
<kw library="BuiltIn" name="Replace Variables">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:15:45.457">${SSH_PORT} = 22</msg>
<status status="PASS" starttime="20170509 13:15:45.457" endtime="20170509 13:15:45.457"></status>
</kw>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:15:45.457">${https_num} = 443</msg>
<status status="PASS" starttime="20170509 13:15:45.457" endtime="20170509 13:15:45.458"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:15:45.458">${AUTH_URI} = https://9.3.86.161:443</msg>
<status status="PASS" starttime="20170509 13:15:45.458" endtime="20170509 13:15:45.463"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:45.456" endtime="20170509 13:15:45.463"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:45.455" endtime="20170509 13:15:45.463"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20170509 13:15:45.464">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" starttime="20170509 13:15:45.464" endtime="20170509 13:15:45.464"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:15:45.464">${has_port} = False</msg>
<status status="PASS" starttime="20170509 13:15:45.463" endtime="20170509 13:15:45.464"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keywords">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status status="PASS" starttime="20170509 13:15:45.466" endtime="20170509 13:15:45.466"></status>
</kw>
<kw library="SSHLibrary" name="Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" starttime="20170509 13:15:45.466" endtime="20170509 13:15:45.467"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:45.465" endtime="20170509 13:15:45.467"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:45.465" endtime="20170509 13:15:45.467"></status>
</kw>
<kw library="SSHLibrary" name="Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:15:45.467">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg level="INFO" timestamp="20170509 13:15:48.029">Read output: root@witherspoon:~#</msg>
<status status="PASS" starttime="20170509 13:15:45.467" endtime="20170509 13:15:48.030"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:45.452" endtime="20170509 13:15:48.030"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Ffdc Cmd Index">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:15:48.031">@{entries} = [ BMC DATA | APPLICATION DATA | DRIVER INFO ]</msg>
<status status="PASS" starttime="20170509 13:15:48.030" endtime="20170509 13:15:48.031"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC DATA">
<kw library="openbmc_ffdc_methods" name="Iterate BMC Command List Pairs">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Bmc Cmd">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:15:48.032">@{cmd_list} = [ ('BMC File System Disk Space Usage', 'df -hT') | ('BMC OS', 'uname -a') | ('BMC Uptime', 'uptime') ]</msg>
<status status="PASS" starttime="20170509 13:15:48.032" endtime="20170509 13:15:48.032"></status>
</kw>
<kw library="BuiltIn" name="Set Suite Variable">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:15:48.036">${ENTRY_INDEX} = BMC DATA</msg>
<status status="PASS" starttime="20170509 13:15:48.032" endtime="20170509 13:15:48.036"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC File System Disk Space Usage', 'df -hT')">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:15:48.041" html="yes">Appended to file '&lt;a href="file:///tmp/root/26619/obmc-robot/logs/20170509131533895929_TestsTestBasicPoweron/20170509131533895929_PowerOnTest/20170509131533895929_BMC_general.txt"&gt;/tmp/root/26619/obmc-robot/logs/20170509131533895929_TestsTestBasicPoweron/20170509131533895929_PowerOnTest/20170509131533895929_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170509 13:15:48.040" endtime="20170509 13:15:48.041"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:48.039" endtime="20170509 13:15:48.041"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:15:48.042" html="yes">Appended to file '&lt;a href="file:///tmp/root/26619/obmc-robot/logs/20170509131533895929_TestsTestBasicPoweron/20170509131533895929_PowerOnTest/20170509131533895929_BMC_general.txt"&gt;/tmp/root/26619/obmc-robot/logs/20170509131533895929_TestsTestBasicPoweron/20170509131533895929_PowerOnTest/20170509131533895929_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170509 13:15:48.042" endtime="20170509 13:15:48.042"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:48.041" endtime="20170509 13:15:48.042"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:15:48.044" html="yes">Appended to file '&lt;a href="file:///tmp/root/26619/obmc-robot/logs/20170509131533895929_TestsTestBasicPoweron/20170509131533895929_PowerOnTest/20170509131533895929_BMC_general.txt"&gt;/tmp/root/26619/obmc-robot/logs/20170509131533895929_TestsTestBasicPoweron/20170509131533895929_PowerOnTest/20170509131533895929_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170509 13:15:48.043" endtime="20170509 13:15:48.044"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:48.043" endtime="20170509 13:15:48.044"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:15:48.045" html="yes">Appended to file '&lt;a href="file:///tmp/root/26619/obmc-robot/logs/20170509131533895929_TestsTestBasicPoweron/20170509131533895929_PowerOnTest/20170509131533895929_BMC_general.txt"&gt;/tmp/root/26619/obmc-robot/logs/20170509131533895929_TestsTestBasicPoweron/20170509131533895929_PowerOnTest/20170509131533895929_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170509 13:15:48.044" endtime="20170509 13:15:48.045"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:48.044" endtime="20170509 13:15:48.045"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:48.039" endtime="20170509 13:15:48.045"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:48.038" endtime="20170509 13:15:48.045"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:15:48.046">Executing command 'df -hT'.</msg>
<msg level="INFO" timestamp="20170509 13:15:48.409">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170509 13:15:48.409">${stdout} = Filesystem           Type            Size      Used Available Use% Mounted on
dev                  devtmpfs      210.1M         0    210.1M   0% /dev
tmpfs                tmpfs         211.4M     13.9...</msg>
<msg level="INFO" timestamp="20170509 13:15:48.410">${stderr} = </msg>
<status status="PASS" starttime="20170509 13:15:48.045" endtime="20170509 13:15:48.410"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:15:48.415" html="yes">Appended to file '&lt;a href="file:///tmp/root/26619/obmc-robot/logs/20170509131533895929_TestsTestBasicPoweron/20170509131533895929_PowerOnTest/20170509131533895929_BMC_general.txt"&gt;/tmp/root/26619/obmc-robot/logs/20170509131533895929_TestsTestBasicPoweron/20170509131533895929_PowerOnTest/20170509131533895929_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170509 13:15:48.415" endtime="20170509 13:15:48.415"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:48.414" endtime="20170509 13:15:48.415"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:48.410" endtime="20170509 13:15:48.416"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:48.037" endtime="20170509 13:15:48.416"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:48.037" endtime="20170509 13:15:48.416"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC OS', 'uname -a')">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:15:48.419" html="yes">Appended to file '&lt;a href="file:///tmp/root/26619/obmc-robot/logs/20170509131533895929_TestsTestBasicPoweron/20170509131533895929_PowerOnTest/20170509131533895929_BMC_general.txt"&gt;/tmp/root/26619/obmc-robot/logs/20170509131533895929_TestsTestBasicPoweron/20170509131533895929_PowerOnTest/20170509131533895929_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170509 13:15:48.419" endtime="20170509 13:15:48.419"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:48.418" endtime="20170509 13:15:48.420"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:15:48.421" html="yes">Appended to file '&lt;a href="file:///tmp/root/26619/obmc-robot/logs/20170509131533895929_TestsTestBasicPoweron/20170509131533895929_PowerOnTest/20170509131533895929_BMC_general.txt"&gt;/tmp/root/26619/obmc-robot/logs/20170509131533895929_TestsTestBasicPoweron/20170509131533895929_PowerOnTest/20170509131533895929_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170509 13:15:48.420" endtime="20170509 13:15:48.421"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:48.420" endtime="20170509 13:15:48.421"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:15:48.422" html="yes">Appended to file '&lt;a href="file:///tmp/root/26619/obmc-robot/logs/20170509131533895929_TestsTestBasicPoweron/20170509131533895929_PowerOnTest/20170509131533895929_BMC_general.txt"&gt;/tmp/root/26619/obmc-robot/logs/20170509131533895929_TestsTestBasicPoweron/20170509131533895929_PowerOnTest/20170509131533895929_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170509 13:15:48.422" endtime="20170509 13:15:48.422"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:48.421" endtime="20170509 13:15:48.422"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:15:48.424" html="yes">Appended to file '&lt;a href="file:///tmp/root/26619/obmc-robot/logs/20170509131533895929_TestsTestBasicPoweron/20170509131533895929_PowerOnTest/20170509131533895929_BMC_general.txt"&gt;/tmp/root/26619/obmc-robot/logs/20170509131533895929_TestsTestBasicPoweron/20170509131533895929_PowerOnTest/20170509131533895929_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170509 13:15:48.423" endtime="20170509 13:15:48.424"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:48.423" endtime="20170509 13:15:48.424"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:48.417" endtime="20170509 13:15:48.424"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:48.417" endtime="20170509 13:15:48.424"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:15:48.425">Executing command 'uname -a'.</msg>
<msg level="INFO" timestamp="20170509 13:15:48.916">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170509 13:15:48.916">${stdout} = Linux witherspoon 4.7.10-15c30d4deb0a01f398230395dc0d9af4be92d856 #1 Tue May 9 12:32:59 UTC 2017 armv6l GNU/Linux</msg>
<msg level="INFO" timestamp="20170509 13:15:48.916">${stderr} = </msg>
<status status="PASS" starttime="20170509 13:15:48.424" endtime="20170509 13:15:48.916"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:15:48.923" html="yes">Appended to file '&lt;a href="file:///tmp/root/26619/obmc-robot/logs/20170509131533895929_TestsTestBasicPoweron/20170509131533895929_PowerOnTest/20170509131533895929_BMC_general.txt"&gt;/tmp/root/26619/obmc-robot/logs/20170509131533895929_TestsTestBasicPoweron/20170509131533895929_PowerOnTest/20170509131533895929_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170509 13:15:48.922" endtime="20170509 13:15:48.923"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:48.921" endtime="20170509 13:15:48.923"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:48.916" endtime="20170509 13:15:48.923"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:48.416" endtime="20170509 13:15:48.923"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:48.416" endtime="20170509 13:15:48.923"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC Uptime', 'uptime')">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:15:48.926" html="yes">Appended to file '&lt;a href="file:///tmp/root/26619/obmc-robot/logs/20170509131533895929_TestsTestBasicPoweron/20170509131533895929_PowerOnTest/20170509131533895929_BMC_general.txt"&gt;/tmp/root/26619/obmc-robot/logs/20170509131533895929_TestsTestBasicPoweron/20170509131533895929_PowerOnTest/20170509131533895929_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170509 13:15:48.926" endtime="20170509 13:15:48.926"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:48.925" endtime="20170509 13:15:48.926"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:15:48.928" html="yes">Appended to file '&lt;a href="file:///tmp/root/26619/obmc-robot/logs/20170509131533895929_TestsTestBasicPoweron/20170509131533895929_PowerOnTest/20170509131533895929_BMC_general.txt"&gt;/tmp/root/26619/obmc-robot/logs/20170509131533895929_TestsTestBasicPoweron/20170509131533895929_PowerOnTest/20170509131533895929_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170509 13:15:48.927" endtime="20170509 13:15:48.928"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:48.927" endtime="20170509 13:15:48.928"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:15:48.929" html="yes">Appended to file '&lt;a href="file:///tmp/root/26619/obmc-robot/logs/20170509131533895929_TestsTestBasicPoweron/20170509131533895929_PowerOnTest/20170509131533895929_BMC_general.txt"&gt;/tmp/root/26619/obmc-robot/logs/20170509131533895929_TestsTestBasicPoweron/20170509131533895929_PowerOnTest/20170509131533895929_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170509 13:15:48.928" endtime="20170509 13:15:48.929"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:48.928" endtime="20170509 13:15:48.929"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:15:48.930" html="yes">Appended to file '&lt;a href="file:///tmp/root/26619/obmc-robot/logs/20170509131533895929_TestsTestBasicPoweron/20170509131533895929_PowerOnTest/20170509131533895929_BMC_general.txt"&gt;/tmp/root/26619/obmc-robot/logs/20170509131533895929_TestsTestBasicPoweron/20170509131533895929_PowerOnTest/20170509131533895929_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170509 13:15:48.930" endtime="20170509 13:15:48.930"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:48.929" endtime="20170509 13:15:48.930"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:48.925" endtime="20170509 13:15:48.930"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:48.924" endtime="20170509 13:15:48.931"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:15:48.931">Executing command 'uptime'.</msg>
<msg level="INFO" timestamp="20170509 13:15:49.411">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170509 13:15:49.411">${stdout} =  13:15:53 up 27 min,  load average: 1.03, 1.15, 1.16</msg>
<msg level="INFO" timestamp="20170509 13:15:49.411">${stderr} = </msg>
<status status="PASS" starttime="20170509 13:15:48.931" endtime="20170509 13:15:49.411"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:15:49.419" html="yes">Appended to file '&lt;a href="file:///tmp/root/26619/obmc-robot/logs/20170509131533895929_TestsTestBasicPoweron/20170509131533895929_PowerOnTest/20170509131533895929_BMC_general.txt"&gt;/tmp/root/26619/obmc-robot/logs/20170509131533895929_TestsTestBasicPoweron/20170509131533895929_PowerOnTest/20170509131533895929_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170509 13:15:49.418" endtime="20170509 13:15:49.419"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:49.418" endtime="20170509 13:15:49.419"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:49.411" endtime="20170509 13:15:49.419"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:48.923" endtime="20170509 13:15:49.419"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:48.923" endtime="20170509 13:15:49.419"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:48.037" endtime="20170509 13:15:49.420"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:48.031" endtime="20170509 13:15:49.420"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:48.031" endtime="20170509 13:15:49.420"></status>
</kw>
<kw type="foritem" name="${index} = APPLICATION DATA">
<kw library="openbmc_ffdc_methods" name="Iterate BMC Command List Pairs">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Bmc Cmd">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:15:49.421">@{cmd_list} = [ ('BMC state', '/usr/sbin/obmcutil  state') ]</msg>
<status status="PASS" starttime="20170509 13:15:49.420" endtime="20170509 13:15:49.421"></status>
</kw>
<kw library="BuiltIn" name="Set Suite Variable">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:15:49.421">${ENTRY_INDEX} = APPLICATION DATA</msg>
<status status="PASS" starttime="20170509 13:15:49.421" endtime="20170509 13:15:49.421"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC state', '/usr/sbin/obmcutil  state')">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:15:49.425" html="yes">Appended to file '&lt;a href="file:///tmp/root/26619/obmc-robot/logs/20170509131533895929_TestsTestBasicPoweron/20170509131533895929_PowerOnTest/20170509131533895929_BMC_general.txt"&gt;/tmp/root/26619/obmc-robot/logs/20170509131533895929_TestsTestBasicPoweron/20170509131533895929_PowerOnTest/20170509131533895929_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170509 13:15:49.425" endtime="20170509 13:15:49.425"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:49.424" endtime="20170509 13:15:49.426"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:15:49.427" html="yes">Appended to file '&lt;a href="file:///tmp/root/26619/obmc-robot/logs/20170509131533895929_TestsTestBasicPoweron/20170509131533895929_PowerOnTest/20170509131533895929_BMC_general.txt"&gt;/tmp/root/26619/obmc-robot/logs/20170509131533895929_TestsTestBasicPoweron/20170509131533895929_PowerOnTest/20170509131533895929_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170509 13:15:49.426" endtime="20170509 13:15:49.427"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:49.426" endtime="20170509 13:15:49.427"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:15:49.428" html="yes">Appended to file '&lt;a href="file:///tmp/root/26619/obmc-robot/logs/20170509131533895929_TestsTestBasicPoweron/20170509131533895929_PowerOnTest/20170509131533895929_BMC_general.txt"&gt;/tmp/root/26619/obmc-robot/logs/20170509131533895929_TestsTestBasicPoweron/20170509131533895929_PowerOnTest/20170509131533895929_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170509 13:15:49.428" endtime="20170509 13:15:49.428"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:49.427" endtime="20170509 13:15:49.428"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:15:49.429" html="yes">Appended to file '&lt;a href="file:///tmp/root/26619/obmc-robot/logs/20170509131533895929_TestsTestBasicPoweron/20170509131533895929_PowerOnTest/20170509131533895929_BMC_general.txt"&gt;/tmp/root/26619/obmc-robot/logs/20170509131533895929_TestsTestBasicPoweron/20170509131533895929_PowerOnTest/20170509131533895929_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170509 13:15:49.429" endtime="20170509 13:15:49.429"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:49.428" endtime="20170509 13:15:49.430"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:49.423" endtime="20170509 13:15:49.430"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:49.423" endtime="20170509 13:15:49.430"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:15:49.430">Executing command '/usr/sbin/obmcutil  state'.</msg>
<msg level="INFO" timestamp="20170509 13:15:51.142">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170509 13:15:51.143">${stdout} = CurrentBMCState:    xyz.openbmc_project.State.BMC.BMCState.Ready
CurrentPowerState:  xyz.openbmc_project.State.Chassis.PowerState.On
CurrentHostState:   xyz.openbmc_project.State.Host.HostState.Quiesc...</msg>
<msg level="INFO" timestamp="20170509 13:15:51.143">${stderr} = </msg>
<status status="PASS" starttime="20170509 13:15:49.430" endtime="20170509 13:15:51.143"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:15:51.151" html="yes">Appended to file '&lt;a href="file:///tmp/root/26619/obmc-robot/logs/20170509131533895929_TestsTestBasicPoweron/20170509131533895929_PowerOnTest/20170509131533895929_BMC_general.txt"&gt;/tmp/root/26619/obmc-robot/logs/20170509131533895929_TestsTestBasicPoweron/20170509131533895929_PowerOnTest/20170509131533895929_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170509 13:15:51.150" endtime="20170509 13:15:51.151"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:51.149" endtime="20170509 13:15:51.151"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:51.143" endtime="20170509 13:15:51.151"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:49.422" endtime="20170509 13:15:51.151"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:49.422" endtime="20170509 13:15:51.151"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:49.422" endtime="20170509 13:15:51.151"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:49.420" endtime="20170509 13:15:51.152"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:49.420" endtime="20170509 13:15:51.152"></status>
</kw>
<kw type="foritem" name="${index} = DRIVER INFO">
<kw library="openbmc_ffdc_methods" name="Iterate BMC Command List Pairs">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Bmc Cmd">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:15:51.153">@{cmd_list} = [ ('Build Info', 'cat /etc/version') | ('FW Level', 'cat /etc/os-release') ]</msg>
<status status="PASS" starttime="20170509 13:15:51.152" endtime="20170509 13:15:51.153"></status>
</kw>
<kw library="BuiltIn" name="Set Suite Variable">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:15:51.153">${ENTRY_INDEX} = DRIVER INFO</msg>
<status status="PASS" starttime="20170509 13:15:51.153" endtime="20170509 13:15:51.153"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('Build Info', 'cat /etc/version')">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:15:51.156" html="yes">Appended to file '&lt;a href="file:///tmp/root/26619/obmc-robot/logs/20170509131533895929_TestsTestBasicPoweron/20170509131533895929_PowerOnTest/20170509131533895929_BMC_general.txt"&gt;/tmp/root/26619/obmc-robot/logs/20170509131533895929_TestsTestBasicPoweron/20170509131533895929_PowerOnTest/20170509131533895929_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170509 13:15:51.156" endtime="20170509 13:15:51.156"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:51.155" endtime="20170509 13:15:51.157"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:15:51.158" html="yes">Appended to file '&lt;a href="file:///tmp/root/26619/obmc-robot/logs/20170509131533895929_TestsTestBasicPoweron/20170509131533895929_PowerOnTest/20170509131533895929_BMC_general.txt"&gt;/tmp/root/26619/obmc-robot/logs/20170509131533895929_TestsTestBasicPoweron/20170509131533895929_PowerOnTest/20170509131533895929_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170509 13:15:51.157" endtime="20170509 13:15:51.158"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:51.157" endtime="20170509 13:15:51.158"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:15:51.159" html="yes">Appended to file '&lt;a href="file:///tmp/root/26619/obmc-robot/logs/20170509131533895929_TestsTestBasicPoweron/20170509131533895929_PowerOnTest/20170509131533895929_BMC_general.txt"&gt;/tmp/root/26619/obmc-robot/logs/20170509131533895929_TestsTestBasicPoweron/20170509131533895929_PowerOnTest/20170509131533895929_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170509 13:15:51.159" endtime="20170509 13:15:51.160"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:51.158" endtime="20170509 13:15:51.160"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:15:51.161" html="yes">Appended to file '&lt;a href="file:///tmp/root/26619/obmc-robot/logs/20170509131533895929_TestsTestBasicPoweron/20170509131533895929_PowerOnTest/20170509131533895929_BMC_general.txt"&gt;/tmp/root/26619/obmc-robot/logs/20170509131533895929_TestsTestBasicPoweron/20170509131533895929_PowerOnTest/20170509131533895929_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170509 13:15:51.160" endtime="20170509 13:15:51.161"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:51.160" endtime="20170509 13:15:51.161"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:51.155" endtime="20170509 13:15:51.161"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:51.155" endtime="20170509 13:15:51.161"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:15:51.162">Executing command 'cat /etc/version'.</msg>
<msg level="INFO" timestamp="20170509 13:15:51.653">Command exited with return code 1.</msg>
<msg level="INFO" timestamp="20170509 13:15:51.653">${stdout} = </msg>
<msg level="INFO" timestamp="20170509 13:15:51.653">${stderr} = cat: can't open '/etc/version': No such file or directory</msg>
<status status="PASS" starttime="20170509 13:15:51.161" endtime="20170509 13:15:51.653"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:15:51.659" html="yes">Appended to file '&lt;a href="file:///tmp/root/26619/obmc-robot/logs/20170509131533895929_TestsTestBasicPoweron/20170509131533895929_PowerOnTest/20170509131533895929_BMC_general.txt"&gt;/tmp/root/26619/obmc-robot/logs/20170509131533895929_TestsTestBasicPoweron/20170509131533895929_PowerOnTest/20170509131533895929_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170509 13:15:51.658" endtime="20170509 13:15:51.659"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:51.657" endtime="20170509 13:15:51.659"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:51.653" endtime="20170509 13:15:51.659"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:51.154" endtime="20170509 13:15:51.659"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:51.154" endtime="20170509 13:15:51.659"></status>
</kw>
<kw type="foritem" name="${cmd} = ('FW Level', 'cat /etc/os-release')">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:15:51.662" html="yes">Appended to file '&lt;a href="file:///tmp/root/26619/obmc-robot/logs/20170509131533895929_TestsTestBasicPoweron/20170509131533895929_PowerOnTest/20170509131533895929_BMC_general.txt"&gt;/tmp/root/26619/obmc-robot/logs/20170509131533895929_TestsTestBasicPoweron/20170509131533895929_PowerOnTest/20170509131533895929_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170509 13:15:51.662" endtime="20170509 13:15:51.662"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:51.661" endtime="20170509 13:15:51.662"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:15:51.663" html="yes">Appended to file '&lt;a href="file:///tmp/root/26619/obmc-robot/logs/20170509131533895929_TestsTestBasicPoweron/20170509131533895929_PowerOnTest/20170509131533895929_BMC_general.txt"&gt;/tmp/root/26619/obmc-robot/logs/20170509131533895929_TestsTestBasicPoweron/20170509131533895929_PowerOnTest/20170509131533895929_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170509 13:15:51.663" endtime="20170509 13:15:51.663"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:51.662" endtime="20170509 13:15:51.664"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:15:51.665" html="yes">Appended to file '&lt;a href="file:///tmp/root/26619/obmc-robot/logs/20170509131533895929_TestsTestBasicPoweron/20170509131533895929_PowerOnTest/20170509131533895929_BMC_general.txt"&gt;/tmp/root/26619/obmc-robot/logs/20170509131533895929_TestsTestBasicPoweron/20170509131533895929_PowerOnTest/20170509131533895929_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170509 13:15:51.664" endtime="20170509 13:15:51.665"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:51.664" endtime="20170509 13:15:51.665"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:15:51.666" html="yes">Appended to file '&lt;a href="file:///tmp/root/26619/obmc-robot/logs/20170509131533895929_TestsTestBasicPoweron/20170509131533895929_PowerOnTest/20170509131533895929_BMC_general.txt"&gt;/tmp/root/26619/obmc-robot/logs/20170509131533895929_TestsTestBasicPoweron/20170509131533895929_PowerOnTest/20170509131533895929_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170509 13:15:51.665" endtime="20170509 13:15:51.666"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:51.665" endtime="20170509 13:15:51.666"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:51.661" endtime="20170509 13:15:51.666"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:51.660" endtime="20170509 13:15:51.666"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:15:51.667">Executing command 'cat /etc/os-release'.</msg>
<msg level="INFO" timestamp="20170509 13:15:52.169">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170509 13:15:52.170">${stdout} = ID="openbmc-phosphor"
NAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"
VERSION="v1.99.5-1"
VERSION_ID="v1.99.5-1-ge31f3d3"
PRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC Project Re...</msg>
<msg level="INFO" timestamp="20170509 13:15:52.170">${stderr} = </msg>
<status status="PASS" starttime="20170509 13:15:51.666" endtime="20170509 13:15:52.170"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:15:52.175" html="yes">Appended to file '&lt;a href="file:///tmp/root/26619/obmc-robot/logs/20170509131533895929_TestsTestBasicPoweron/20170509131533895929_PowerOnTest/20170509131533895929_BMC_general.txt"&gt;/tmp/root/26619/obmc-robot/logs/20170509131533895929_TestsTestBasicPoweron/20170509131533895929_PowerOnTest/20170509131533895929_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170509 13:15:52.175" endtime="20170509 13:15:52.176"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:52.174" endtime="20170509 13:15:52.176"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:52.170" endtime="20170509 13:15:52.176"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:51.659" endtime="20170509 13:15:52.176"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:51.659" endtime="20170509 13:15:52.176"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:51.153" endtime="20170509 13:15:52.176"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:51.152" endtime="20170509 13:15:52.176"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:51.152" endtime="20170509 13:15:52.176"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:48.031" endtime="20170509 13:15:52.176"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:45.452" endtime="20170509 13:15:52.176"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:45.428" endtime="20170509 13:15:52.176"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:45.426" endtime="20170509 13:15:52.176"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:45.426" endtime="20170509 13:15:52.176"></status>
</kw>
<kw type="foritem" name="${method} = ('BMC Specific Files', 'BMC FFDC Files')">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="Collections" name="List Should Contain Value">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" starttime="20170509 13:15:52.178" endtime="20170509 13:15:52.178"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:15:52.178">${status} = PASS</msg>
<msg level="INFO" timestamp="20170509 13:15:52.178">${ret_values} = None</msg>
<status status="PASS" starttime="20170509 13:15:52.178" endtime="20170509 13:15:52.178"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" starttime="20170509 13:15:52.179" endtime="20170509 13:15:52.179"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="BMC FFDC Files">
<doc>Get the command list and iterate</doc>
<kw library="connection_client" name="Open Connection And Log In">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20170509 13:15:52.206">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" starttime="20170509 13:15:52.205" endtime="20170509 13:15:52.206"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:15:52.206">${has_host} = False</msg>
<status status="PASS" starttime="20170509 13:15:52.205" endtime="20170509 13:15:52.206"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" starttime="20170509 13:15:52.206" endtime="20170509 13:15:52.207"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:52.206" endtime="20170509 13:15:52.207"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw library="connection_client" name="User input SSH and HTTPs Ports">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:15:52.208">${port_num} = 22</msg>
<status status="PASS" starttime="20170509 13:15:52.208" endtime="20170509 13:15:52.208"></status>
</kw>
<kw library="BuiltIn" name="Replace Variables">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:15:52.209">${SSH_PORT} = 22</msg>
<status status="PASS" starttime="20170509 13:15:52.209" endtime="20170509 13:15:52.209"></status>
</kw>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:15:52.210">${https_num} = 443</msg>
<status status="PASS" starttime="20170509 13:15:52.209" endtime="20170509 13:15:52.210"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:15:52.210">${AUTH_URI} = https://9.3.86.161:443</msg>
<status status="PASS" starttime="20170509 13:15:52.210" endtime="20170509 13:15:52.210"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:52.208" endtime="20170509 13:15:52.211"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:52.207" endtime="20170509 13:15:52.211"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20170509 13:15:52.212">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" starttime="20170509 13:15:52.211" endtime="20170509 13:15:52.212"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:15:52.212">${has_port} = False</msg>
<status status="PASS" starttime="20170509 13:15:52.211" endtime="20170509 13:15:52.212"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keywords">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status status="PASS" starttime="20170509 13:15:52.213" endtime="20170509 13:15:52.213"></status>
</kw>
<kw library="SSHLibrary" name="Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" starttime="20170509 13:15:52.214" endtime="20170509 13:15:52.214"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:52.213" endtime="20170509 13:15:52.214"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:52.212" endtime="20170509 13:15:52.214"></status>
</kw>
<kw library="SSHLibrary" name="Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:15:52.215">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg level="INFO" timestamp="20170509 13:15:54.901">Read output: root@witherspoon:~#</msg>
<status status="PASS" starttime="20170509 13:15:52.214" endtime="20170509 13:15:54.901"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:52.204" endtime="20170509 13:15:54.902"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Ffdc File Index">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:15:54.902">@{entries} = [ BMC FILES ]</msg>
<status status="PASS" starttime="20170509 13:15:54.902" endtime="20170509 13:15:54.902"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC FILES">
<kw library="openbmc_ffdc_methods" name="Create File and Write Data">
<doc>Create files to current FFDC log directory,</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Bmc File">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:15:54.904">@{cmd_list} = [ ('BMC_meminfo', 'cat /proc/meminfo') | ('BMC_journalctl', 'journalctl --no-pager') | ('BMC_dmesg', 'dmesg') | ('BMC_procinfo', 'cat /proc/cpuinfo') | ('BMC_proc_list', 'top -n 1 -b') ]</msg>
<status status="PASS" starttime="20170509 13:15:54.904" endtime="20170509 13:15:54.904"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC_meminfo', 'cat /proc/meminfo')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:15:54.905">${logpath} = /tmp/root/26619/obmc-robot/logs/20170509131533895929_TestsTestBasicPoweron/20170509131533895929_PowerOnTest/20170509131533895929_BMC_meminfo.txt</msg>
<status status="PASS" starttime="20170509 13:15:54.905" endtime="20170509 13:15:54.905"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" starttime="20170509 13:15:54.907" endtime="20170509 13:15:54.907"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:15:54.908">Executing command 'cat /proc/meminfo'.</msg>
<msg level="INFO" timestamp="20170509 13:15:54.964">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170509 13:15:54.964">${stdout} = MemTotal:         432932 kB
MemFree:          270668 kB
MemAvailable:     311904 kB
Buffers:           10432 kB
Cached:            49444 kB
SwapCached:            0 kB
Active:           114636 kB
Inac...</msg>
<msg level="INFO" timestamp="20170509 13:15:54.965">${stderr} = </msg>
<status status="PASS" starttime="20170509 13:15:54.907" endtime="20170509 13:15:54.965"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:15:54.972" html="yes">Appended to file '&lt;a href="file:///tmp/root/26619/obmc-robot/logs/20170509131533895929_TestsTestBasicPoweron/20170509131533895929_PowerOnTest/20170509131533895929_BMC_meminfo.txt"&gt;/tmp/root/26619/obmc-robot/logs/20170509131533895929_TestsTestBasicPoweron/20170509131533895929_PowerOnTest/20170509131533895929_BMC_meminfo.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170509 13:15:54.971" endtime="20170509 13:15:54.972"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:54.970" endtime="20170509 13:15:54.972"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:54.965" endtime="20170509 13:15:54.972"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:54.905" endtime="20170509 13:15:54.972"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:54.904" endtime="20170509 13:15:54.972"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_journalctl', 'journalctl --no-pager')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:15:54.973">${logpath} = /tmp/root/26619/obmc-robot/logs/20170509131533895929_TestsTestBasicPoweron/20170509131533895929_PowerOnTest/20170509131533895929_BMC_journalctl.txt</msg>
<status status="PASS" starttime="20170509 13:15:54.972" endtime="20170509 13:15:54.973"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" starttime="20170509 13:15:54.974" endtime="20170509 13:15:54.974"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:15:54.975">Executing command 'journalctl --no-pager'.</msg>
<msg level="INFO" timestamp="20170509 13:16:00.360">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170509 13:16:00.364">${stdout} = -- Logs begin at Tue 2017-05-09 12:49:02 UTC, end at Tue 2017-05-09 13:15:58 UTC. --
May 09 12:49:02 witherspoon kernel: Booting Linux on physical CPU 0x0
May 09 12:49:02 witherspoon kernel: Linux ver...</msg>
<msg level="INFO" timestamp="20170509 13:16:00.364">${stderr} = </msg>
<status status="PASS" starttime="20170509 13:15:54.974" endtime="20170509 13:16:00.364"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:16:00.377" html="yes">Appended to file '&lt;a href="file:///tmp/root/26619/obmc-robot/logs/20170509131533895929_TestsTestBasicPoweron/20170509131533895929_PowerOnTest/20170509131533895929_BMC_journalctl.txt"&gt;/tmp/root/26619/obmc-robot/logs/20170509131533895929_TestsTestBasicPoweron/20170509131533895929_PowerOnTest/20170509131533895929_BMC_journalctl.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170509 13:16:00.374" endtime="20170509 13:16:00.377"></status>
</kw>
<status status="PASS" starttime="20170509 13:16:00.371" endtime="20170509 13:16:00.377"></status>
</kw>
<status status="PASS" starttime="20170509 13:16:00.364" endtime="20170509 13:16:00.377"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:54.973" endtime="20170509 13:16:00.377"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:54.972" endtime="20170509 13:16:00.377"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_dmesg', 'dmesg')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:16:00.378">${logpath} = /tmp/root/26619/obmc-robot/logs/20170509131533895929_TestsTestBasicPoweron/20170509131533895929_PowerOnTest/20170509131533895929_BMC_dmesg.txt</msg>
<status status="PASS" starttime="20170509 13:16:00.378" endtime="20170509 13:16:00.378"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" starttime="20170509 13:16:00.379" endtime="20170509 13:16:00.380"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:16:00.381">Executing command 'dmesg'.</msg>
<msg level="INFO" timestamp="20170509 13:16:00.470">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170509 13:16:00.471">${stdout} = rtc-rv8803 11-0032: An alarm maybe have been missed.
rtc-rv8803 11-0032: rtc core: registered rx8900 as rtc0
at24 11-0051: 8192 byte 24c64 EEPROM, writable, 1 bytes/write
i2c_aspeed i2c-11: i2c bus 11...</msg>
<msg level="INFO" timestamp="20170509 13:16:00.471">${stderr} = </msg>
<status status="PASS" starttime="20170509 13:16:00.380" endtime="20170509 13:16:00.471"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:16:00.478" html="yes">Appended to file '&lt;a href="file:///tmp/root/26619/obmc-robot/logs/20170509131533895929_TestsTestBasicPoweron/20170509131533895929_PowerOnTest/20170509131533895929_BMC_dmesg.txt"&gt;/tmp/root/26619/obmc-robot/logs/20170509131533895929_TestsTestBasicPoweron/20170509131533895929_PowerOnTest/20170509131533895929_BMC_dmesg.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170509 13:16:00.477" endtime="20170509 13:16:00.478"></status>
</kw>
<status status="PASS" starttime="20170509 13:16:00.476" endtime="20170509 13:16:00.478"></status>
</kw>
<status status="PASS" starttime="20170509 13:16:00.471" endtime="20170509 13:16:00.478"></status>
</kw>
<status status="PASS" starttime="20170509 13:16:00.378" endtime="20170509 13:16:00.478"></status>
</kw>
<status status="PASS" starttime="20170509 13:16:00.377" endtime="20170509 13:16:00.478"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_procinfo', 'cat /proc/cpuinfo')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:16:00.479">${logpath} = /tmp/root/26619/obmc-robot/logs/20170509131533895929_TestsTestBasicPoweron/20170509131533895929_PowerOnTest/20170509131533895929_BMC_procinfo.txt</msg>
<status status="PASS" starttime="20170509 13:16:00.478" endtime="20170509 13:16:00.479"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" starttime="20170509 13:16:00.480" endtime="20170509 13:16:00.480"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:16:00.481">Executing command 'cat /proc/cpuinfo'.</msg>
<msg level="INFO" timestamp="20170509 13:16:00.555">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170509 13:16:00.555">${stdout} = processor	: 0
model name	: ARMv6-compatible processor rev 7 (v6l)
BogoMIPS	: 789.70
Features	: half thumb fastmult edsp java tls 
CPU implementer	: 0x41
CPU architecture: 7
CPU variant	: 0x0
CPU part	...</msg>
<msg level="INFO" timestamp="20170509 13:16:00.555">${stderr} = </msg>
<status status="PASS" starttime="20170509 13:16:00.480" endtime="20170509 13:16:00.555"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:16:00.561" html="yes">Appended to file '&lt;a href="file:///tmp/root/26619/obmc-robot/logs/20170509131533895929_TestsTestBasicPoweron/20170509131533895929_PowerOnTest/20170509131533895929_BMC_procinfo.txt"&gt;/tmp/root/26619/obmc-robot/logs/20170509131533895929_TestsTestBasicPoweron/20170509131533895929_PowerOnTest/20170509131533895929_BMC_procinfo.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170509 13:16:00.561" endtime="20170509 13:16:00.561"></status>
</kw>
<status status="PASS" starttime="20170509 13:16:00.560" endtime="20170509 13:16:00.561"></status>
</kw>
<status status="PASS" starttime="20170509 13:16:00.556" endtime="20170509 13:16:00.561"></status>
</kw>
<status status="PASS" starttime="20170509 13:16:00.479" endtime="20170509 13:16:00.562"></status>
</kw>
<status status="PASS" starttime="20170509 13:16:00.478" endtime="20170509 13:16:00.562"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_proc_list', 'top -n 1 -b')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:16:00.562">${logpath} = /tmp/root/26619/obmc-robot/logs/20170509131533895929_TestsTestBasicPoweron/20170509131533895929_PowerOnTest/20170509131533895929_BMC_proc_list.txt</msg>
<status status="PASS" starttime="20170509 13:16:00.562" endtime="20170509 13:16:00.562"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" starttime="20170509 13:16:00.563" endtime="20170509 13:16:00.564"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:16:00.564">Executing command 'top -n 1 -b'.</msg>
<msg level="INFO" timestamp="20170509 13:16:00.882">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170509 13:16:00.882">${stdout} = Mem: 162264K used, 270668K free, 14628K shrd, 10432K buff, 49452K cached
CPU:   0% usr  23% sys   0% nic  76% idle   0% io   0% irq   0% sirq
Load average: 1.03 1.15 1.16 1/130 2442
  PID  PPID USER  ...</msg>
<msg level="INFO" timestamp="20170509 13:16:00.883">${stderr} = </msg>
<status status="PASS" starttime="20170509 13:16:00.564" endtime="20170509 13:16:00.883"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:16:00.888" html="yes">Appended to file '&lt;a href="file:///tmp/root/26619/obmc-robot/logs/20170509131533895929_TestsTestBasicPoweron/20170509131533895929_PowerOnTest/20170509131533895929_BMC_proc_list.txt"&gt;/tmp/root/26619/obmc-robot/logs/20170509131533895929_TestsTestBasicPoweron/20170509131533895929_PowerOnTest/20170509131533895929_BMC_proc_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170509 13:16:00.888" endtime="20170509 13:16:00.888"></status>
</kw>
<status status="PASS" starttime="20170509 13:16:00.887" endtime="20170509 13:16:00.889"></status>
</kw>
<status status="PASS" starttime="20170509 13:16:00.883" endtime="20170509 13:16:00.889"></status>
</kw>
<status status="PASS" starttime="20170509 13:16:00.563" endtime="20170509 13:16:00.889"></status>
</kw>
<status status="PASS" starttime="20170509 13:16:00.562" endtime="20170509 13:16:00.889"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:54.904" endtime="20170509 13:16:00.889"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:54.903" endtime="20170509 13:16:00.889"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:54.903" endtime="20170509 13:16:00.889"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:54.902" endtime="20170509 13:16:00.889"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:52.204" endtime="20170509 13:16:00.889"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:52.179" endtime="20170509 13:16:00.889"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:52.177" endtime="20170509 13:16:00.889"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:52.177" endtime="20170509 13:16:00.889"></status>
</kw>
<kw type="foritem" name="${method} = ('Get Request FFDC', 'BMC FFDC Get Requests')">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="Collections" name="List Should Contain Value">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" starttime="20170509 13:16:00.891" endtime="20170509 13:16:00.891"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:16:00.891">${status} = PASS</msg>
<msg level="INFO" timestamp="20170509 13:16:00.891">${ret_values} = None</msg>
<status status="PASS" starttime="20170509 13:16:00.890" endtime="20170509 13:16:00.891"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" starttime="20170509 13:16:00.892" endtime="20170509 13:16:00.892"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="BMC FFDC Get Requests">
<doc>Get the command list and iterate</doc>
<kw library="connection_client" name="Open Connection And Log In">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20170509 13:16:00.918">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" starttime="20170509 13:16:00.917" endtime="20170509 13:16:00.918"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:16:00.918">${has_host} = False</msg>
<status status="PASS" starttime="20170509 13:16:00.917" endtime="20170509 13:16:00.918"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" starttime="20170509 13:16:00.919" endtime="20170509 13:16:00.920"></status>
</kw>
<status status="PASS" starttime="20170509 13:16:00.918" endtime="20170509 13:16:00.920"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw library="connection_client" name="User input SSH and HTTPs Ports">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:16:00.922">${port_num} = 22</msg>
<status status="PASS" starttime="20170509 13:16:00.921" endtime="20170509 13:16:00.922"></status>
</kw>
<kw library="BuiltIn" name="Replace Variables">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:16:00.923">${SSH_PORT} = 22</msg>
<status status="PASS" starttime="20170509 13:16:00.923" endtime="20170509 13:16:00.923"></status>
</kw>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:16:00.924">${https_num} = 443</msg>
<status status="PASS" starttime="20170509 13:16:00.923" endtime="20170509 13:16:00.924"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:16:00.925">${AUTH_URI} = https://9.3.86.161:443</msg>
<status status="PASS" starttime="20170509 13:16:00.924" endtime="20170509 13:16:00.925"></status>
</kw>
<status status="PASS" starttime="20170509 13:16:00.921" endtime="20170509 13:16:00.925"></status>
</kw>
<status status="PASS" starttime="20170509 13:16:00.920" endtime="20170509 13:16:00.925"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20170509 13:16:00.927">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" starttime="20170509 13:16:00.926" endtime="20170509 13:16:00.927"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:16:00.927">${has_port} = False</msg>
<status status="PASS" starttime="20170509 13:16:00.926" endtime="20170509 13:16:00.927"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keywords">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status status="PASS" starttime="20170509 13:16:00.929" endtime="20170509 13:16:00.929"></status>
</kw>
<kw library="SSHLibrary" name="Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" starttime="20170509 13:16:00.929" endtime="20170509 13:16:00.930"></status>
</kw>
<status status="PASS" starttime="20170509 13:16:00.928" endtime="20170509 13:16:00.930"></status>
</kw>
<status status="PASS" starttime="20170509 13:16:00.927" endtime="20170509 13:16:00.930"></status>
</kw>
<kw library="SSHLibrary" name="Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:16:00.930">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg level="INFO" timestamp="20170509 13:16:02.577">Read output: root@witherspoon:~#</msg>
<status status="PASS" starttime="20170509 13:16:00.930" endtime="20170509 13:16:02.578"></status>
</kw>
<status status="PASS" starttime="20170509 13:16:00.916" endtime="20170509 13:16:02.578"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Ffdc Get Request Index">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:16:02.579">@{entries} = [ GET REQUESTS ]</msg>
<status status="PASS" starttime="20170509 13:16:02.578" endtime="20170509 13:16:02.579"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = GET REQUESTS">
<kw library="openbmc_ffdc_methods" name="Log FFDC Get Requests">
<doc>Create file in current FFDC log directory.</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Get Request">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:16:02.581">@{cmd_list} = [ ('BMC_elog', '/xyz/openbmc_project/logging/entry/enumerate') | ('BMC_record_log', '/org/openbmc/control/led/enumerate') | ('BMC_sensor_list', '/org/openbmc/sensors/enumerate') | ('BMC_inventory', '/...</msg>
<status status="PASS" starttime="20170509 13:16:02.580" endtime="20170509 13:16:02.581"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC_elog', '/xyz/openbmc_project/logging/entry/enumerate')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:16:02.582">${logpath} = /tmp/root/26619/obmc-robot/logs/20170509131533895929_TestsTestBasicPoweron/20170509131533895929_PowerOnTest/20170509131533895929_BMC_elog.txt</msg>
<status status="PASS" starttime="20170509 13:16:02.581" endtime="20170509 13:16:02.582"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:16:02.586">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170509 13:16:02.586" endtime="20170509 13:16:02.587"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:16:02.587">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170509 13:16:02.587" endtime="20170509 13:16:02.588"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:16:02.588">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170509 13:16:02.588" endtime="20170509 13:16:02.588"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:16:02.589">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170509 13:16:02.589" endtime="20170509 13:16:02.589"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:16:02.769">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170509 13:16:02.590" endtime="20170509 13:16:02.769"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:16:02.769">${status} = PASS</msg>
<msg level="INFO" timestamp="20170509 13:16:02.769">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:16:02.590" endtime="20170509 13:16:02.769"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:16:02.770">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:16:02.770" endtime="20170509 13:16:02.770"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:16:02.771">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:16:02.770" endtime="20170509 13:16:02.771"></status>
</kw>
<status status="PASS" starttime="20170509 13:16:02.585" endtime="20170509 13:16:02.771"></status>
</kw>
<status status="PASS" starttime="20170509 13:16:02.584" endtime="20170509 13:16:02.771"></status>
</kw>
<status status="PASS" starttime="20170509 13:16:02.583" endtime="20170509 13:16:02.771"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:16:02.772">${base_uri} = /xyz/openbmc_project/logging/entry/enumerate</msg>
<status status="PASS" starttime="20170509 13:16:02.771" endtime="20170509 13:16:02.772"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20170509 13:16:02.772" endtime="20170509 13:16:02.772"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:16:02.995">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170509 13:16:02.995">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:16:02.773" endtime="20170509 13:16:02.995"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" starttime="20170509 13:16:02.995" endtime="20170509 13:16:02.996"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:16:02.996">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:16:02.582" endtime="20170509 13:16:02.996"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:16:02.997">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:16:02.997" endtime="20170509 13:16:02.997"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:16:02.997">${status} = True</msg>
<status status="PASS" starttime="20170509 13:16:02.996" endtime="20170509 13:16:02.997"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" starttime="20170509 13:16:02.998" endtime="20170509 13:16:02.998"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:16:02.999">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/logging/entry/1": {
      "AdditionalData": [
        "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 17 00 00 00 00 04 50 1d 4a 0d 00 00 00 04 50 1f e9 35 42 00 00 07 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 0e 90 00 00 0e 55 48 00 18 01 00 17 00 8a 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 17 0e 00 48 00 00 00 e0 00 00 0a 00 00 00 00 00 00 20 00 00 00 05 00 01 00 2d 00 04 00 00 00 00 00 00 00 00 42 43 38 41 31 37 30 45 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 06 00 00 00 55 00 03 b6 dc 00 00 00 00 55 44 00 4c 01 02 01 00 ee ee ee ee 54 61 72 67 65 74 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 05 00 01 00 00 00 03 00 00 00 05 00 00 00 14 0f 7a bb 7c 23 01 00 02 00 05 01 0b 5a fc d7 13 01 00 02 00 05 01 00 00 55 44 00 30 01 03 01 00 00 00 00 00 00 03 f3 b4 00 00 00 00 00 03 b6 dc 00 00 00 00 40 04 cd e4 00 00 00 00 40 04 ab 68 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 33 61 33 64 36 35 65 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00"
      ], 
      "Id": 1, 
      "Message": "org.open_power.Error.Host.Event.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Informational", 
      "Timestamp": 1494335056146, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/2": {
      "AdditionalData": [
        "ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 07 aa 00 00 50 48 00 30 01 00 07 00 00 00 00 04 bf ef 71 1f 00 00 00 04 bf f0 0c 05 42 00 00 08 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 0f 90 00 00 0f 55 48 00 18 01 00 07 00 10 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 07 05 00 48 00 00 00 e0 00 00 05 00 00 00 00 00 00 20 00 00 00 01 00 00 00 05 00 01 02 00 ff ff 01 90 00 4d 42 43 31 30 30 37 30 35 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 24 01 06 01 00 01 54 41 4b 00 00 00 06 00 00 00 00 00 00 00 00 00 00 00 0b 23 01 00 02 00 05 01 00 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 01 00 00 00 55 00 03 b6 dc 00 00 00 00 55 44 00 50 01 03 01 00 00 00 00 00 00 03 f3 b4 00 00 00 00 00 03 b6 dc 00 00 00 00 40 27 a3 b4 00 00 00 00 40 27 ac 88 00 00 00 00 40 27 ad e4 00 00 00 00 40 27 cd 28 00 00 00 00 40 27 cf 10 00 00 00 00 40 0d 40 bc 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 33 61 33 64 36 35 65 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 55 44 00 fc 01 15 31 00 01 28 00 42 49 32 43 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 f4 00 00 00 00 00 00 00 f4 00 00 00 05 00 00 00 00 00 00 00 27 31 19 d2 52 00 00 00 d1 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 27 31 1c dd 01 00 00 00 d1 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 02 00 00 00 2c 00 00 00 27 31 1c ed a1 00 00 00 d1 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 27 31 1d 20 90 00 00 00 d1 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 34 00 00 00 27 32 4a d1 5e 00 00 00 d1 00 08 43 4f 65 c9 23 ee 00 00 07 6b 00 01 00 00 00 00 00 00 00 00 00 24"
      ], 
      "Id": 2, 
      "Message": "org.open_power.Error.Host.Event.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Informational", 
      "Timestamp": 1494335059200, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/3": {
      "AdditionalData": [
        "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 17 00 00 00 00 04 51 67 ef 22 00 00 00 04 51 69 f4 cb 42 00 00 07 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 11 90 00 00 11 55 48 00 18 01 00 17 00 8a 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 17 0e 00 48 00 00 00 e0 00 00 0a 00 00 00 00 00 00 20 00 00 00 05 00 01 00 2d 00 04 00 00 00 00 00 00 00 00 42 43 38 41 31 37 30 45 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 06 00 00 00 55 00 03 b6 dc 00 00 00 00 55 44 00 4c 01 02 01 00 ee ee ee ee 54 61 72 67 65 74 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 05 00 01 00 00 00 03 00 00 00 05 00 00 00 14 0f 7a bb 7c 23 01 00 02 00 05 01 0b 5a fc d7 13 01 00 02 00 05 01 00 00 55 44 00 30 01 03 01 00 00 00 00 00 00 03 f3 b4 00 00 00 00 00 03 b6 dc 00 00 00 00 40 04 cd e4 00 00 00 00 40 04 ab 68 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 33 61 33 64 36 35 65 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00"
      ], 
      "Id": 3, 
      "Message": "org.open_power.Error.Host.Event.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Informational", 
      "Timestamp": 1494335166549, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/4": {
      "AdditionalData": [
        "ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 07 aa 00 00 50 48 00 30 01 00 07 00 00 00 00 04 c1 45 e2 d7 00 00 00 04 c1 4a 2f f1 42 00 00 08 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 12 90 00 00 12 55 48 00 18 01 00 07 00 10 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 07 05 00 48 00 00 00 e0 00 00 05 00 00 00 00 00 00 20 00 00 00 01 00 00 00 05 00 01 02 00 ff ff 01 90 00 4d 42 43 31 30 30 37 30 35 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 24 01 06 01 00 01 54 41 4b 00 00 00 06 00 00 00 00 00 00 00 00 00 00 00 08 23 01 00 02 00 05 01 00 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 01 00 00 00 55 40 0d 40 bc 00 00 00 00 55 44 00 50 01 03 01 00 00 00 00 00 00 03 f3 b4 00 00 00 00 00 03 b6 dc 00 00 00 00 40 27 a3 b4 00 00 00 00 40 27 ac 88 00 00 00 00 40 27 ad e4 00 00 00 00 40 27 cd 28 00 00 00 00 40 27 cf 10 00 00 00 00 40 0d 40 bc 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 33 61 33 64 36 35 65 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 55 44 00 fc 01 15 31 00 01 28 00 42 49 32 43 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 f4 00 00 00 00 00 00 00 f4 00 00 00 05 00 00 00 00 00 00 00 27 33 b6 51 54 00 00 00 d1 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 27 33 b9 69 dd 00 00 00 d1 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 02 00 00 00 2c 00 00 00 27 33 b9 7a a6 00 00 00 d1 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 27 33 b9 ad aa 00 00 00 d1 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 34 00 00 00 27 34 e7 a7 7b 00 00 00 d1 00 08 43 4f 65 c9 23 ee 00 00 07 6b 00 01 00 00 00 00 00 00 00 00 00 24"
      ], 
      "Id": 4, 
      "Message": "org.open_power.Error.Host.Event.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Informational", 
      "Timestamp": 1494335169608, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/5": {
      "AdditionalData": [
        "ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 07 aa 00 00 50 48 00 30 01 00 07 00 00 00 00 04 c1 45 e2 d7 00 00 00 04 c1 4a 2f f1 42 00 00 08 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 12 90 00 00 12 55 48 00 18 01 00 07 00 10 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 07 05 00 48 00 00 00 e0 00 00 05 00 00 00 00 00 00 20 00 00 00 01 00 00 00 05 00 01 02 00 ff ff 01 90 00 4d 42 43 31 30 30 37 30 35 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 24 01 06 01 00 01 54 41 4b 00 00 00 06 00 00 00 00 00 00 00 00 00 00 00 08 23 01 00 02 00 05 01 00 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 01 00 00 00 55 40 0d 40 bc 00 00 00 00 55 44 00 50 01 03 01 00 00 00 00 00 00 03 f3 b4 00 00 00 00 00 03 b6 dc 00 00 00 00 40 27 a3 b4 00 00 00 00 40 27 ac 88 00 00 00 00 40 27 ad e4 00 00 00 00 40 27 cd 28 00 00 00 00 40 27 cf 10 00 00 00 00 40 0d 40 bc 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 33 61 33 64 36 35 65 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 55 44 00 fc 01 15 31 00 01 28 00 42 49 32 43 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 f4 00 00 00 00 00 00 00 f4 00 00 00 05 00 00 00 00 00 00 00 27 33 b6 51 54 00 00 00 d1 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 27 33 b9 69 dd 00 00 00 d1 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 02 00 00 00 2c 00 00 00 27 33 b9 7a a6 00 00 00 d1 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 27 33 b9 ad aa 00 00 00 d1 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 34 00 00 00 27 34 e7 a7 7b 00 00 00 d1 00 08 43 4f 65 c9 23 ee 00 00 07 6b 00 01 00 00 00 00 00 00 00 00 00 24"
      ], 
      "Id": 5, 
      "Message": "org.open_power.Error.Host.Event.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Informational", 
      "Timestamp": 1494335175532, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/6": {
      "AdditionalData": [
        "ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 07 aa 00 00 50 48 00 30 01 00 09 00 00 00 00 05 78 7f b1 67 00 00 00 05 7a 0c ce 3a 42 00 00 0d 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 13 90 00 00 13 55 48 00 18 01 00 09 00 75 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 09 0f 00 48 00 00 00 e0 00 00 01 00 00 00 00 00 02 20 00 00 00 00 00 00 00 33 e2 1a 00 00 00 00 00 00 00 00 42 43 37 35 30 39 30 46 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 2c 01 06 01 00 01 54 41 4b 00 00 00 06 00 00 00 02 00 00 00 00 00 00 00 08 26 01 00 02 00 05 01 25 00 0b 00 24 01 00 00 00 55 44 00 0c 01 01 09 00 00 33 e2 1a 55 44 00 14 01 02 09 00 09 64 a0 0c 00 00 00 00 00 00 00 00 55 44 00 14 01 02 09 00 77 14 09 28 00 00 00 00 00 00 00 a0 55 44 00 50 01 03 01 00 00 00 00 00 00 03 f3 b4 00 00 00 00 00 03 b6 dc 00 00 00 00 40 1e c5 d4 00 00 00 00 40 1e c6 e0 00 00 00 00 40 1e c7 b4 00 00 00 00 40 42 15 40 00 00 00 00 40 10 f9 84 00 00 00 00 40 0e d3 18 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 33 61 33 64 36 35 65 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 55 44 00 cc 01 15 31 00 01 28 00 42 46 41 50 49 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 c4 00 00 00 00 00 00 00 c4 00 00 00 03 00 00 00 00 00 00 00 2d 35 14 ee 05 00 00 00 ec 00 1c 43 4f b2 95 8f fa 00 00 00 69 70 75 2e 6d 63 62 69 73 74 3a 6b 30 3a 6e 30 3a 73 30 3a 70 30 31 3a 63 30 00 00 00 00 00 00 00 00 00 00 3c 00 00 00 2d 35 1e c6 97 00 00 00 ec 00 1c 43 4f 70 49 5a 04 00 00 01 aa 70 75 2e 6d 63 62 69 73 74 3a 6b 30 3a 6e 30 3a 73 30 3a 70 30 31 3a 63 30 00 00 00 00 00 00 00 00 00 00 3c 00 00 00 2d 35 23 6a c1 00 00 00 ec 00 08 43 4f 25 60 10 27 00 00 00 90 00 00 00 00 00 00 00 01 00 00 00 24 55 44 01 84 01 15 31 00 01 28 00 42 46 41 50 49 5f 49 00 00 00 00 00 00 00 00 00 00 00 00 01 7c 00 00 00 00 00 00 01 7c 00 00 00 07 00 00 00 00 00 00 00 2a 2e 8f 14 87 00 00 00 d1 00 20 43 4f 79 5d 7d 7b 00 00 03 2c 00 00 00 00 00 00 00 14 00 00 00 00 00 00 00 df 00 00 00 00 00 00 00 14 00 00 00 00 00 00 00 00 00 00 00 3c 00 00 00 2a 2e 90 bd 3a 00 00 00 d1 00 20 43 4f 79 5d 7d 7b 00 00 03 2c 00 00 00 00 00 00 00 14 00 00 00 00 00 00 00 df 00 00 00 00 00 00 00 54 00 00 00 00 00 00 00 00 00 00 00 3c 00 00 00 2a 2e 94 23 98 00 00 00 d1 00 20 43 4f 79 5d 7d 7b 00 00 03 2c 00 00 00 00 00 00 00 32 00 00 00 00 00 00 00 e4 00 00 00 00 00 00 00 1c 00 00 00 00 00 00 00 00 00 00 00 3c 00 00 00 2a 2e 96 7e 1f 00 00 00 d1 00 20 43 4f 79 5d 7d 7b 00 00 03 2c 00 00 00 00 00 00 00 33 00 00 00 00 00 00 00 e4 00 00 00 00 00 00 00 1c 00 00 00 00 00 00 00 00 00 00 00 3c 00 00 00 2d 35 23 78 de 00 00 00 ec 00 00 43 4f 0b b1 67 60 00 00 0b b3 00 00 00 1c 00 00 00 2d 35 23 84 bb 00 00 00 ec 00 08 43 4f f6 cf 06 d1 00 00 00 78 00 00 00 00 00 33 e2 1a 00 00 00 24 00 00 00 2d 35 23 d2 7b 00 00 00 ec 00 08 43 4f e3 80 24 18 00 00 03 48 00 00 00 00 00 33 e2 1a 00 00 00 24 55 44 00 30 01 15 31 00 01 28 00 42 53 43 41 4e 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 28 00 00 00 00 00 00 00 28 00 00 00 00 00 00 00 00 55 44 00 30 01 15 31 00 01 28 00 42 46 41 50 49 5f 44 42 47 00 00 00 00 00 00 00 00 00 00 00 28 00 00 00 00 00 00 00 28 00 00 00 00 00 00 00 00"
      ], 
      "Id": 6, 
      "Message": "org.open_power.Error.Host.Event.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Informational", 
      "Timestamp": 1494335179447, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/7": {
      "AdditionalData": [
        "ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 07 aa 00 00 50 48 00 30 01 00 09 00 00 00 00 05 7a 0d 72 65 00 00 00 05 88 ff 2e c6 42 00 00 0e 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 14 90 00 00 14 55 48 00 18 01 00 09 00 75 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 09 0f 00 48 00 00 00 e0 00 00 01 00 00 00 00 00 00 20 00 00 00 00 00 00 00 59 a8 ca 00 00 00 00 00 00 00 00 42 43 37 35 30 39 30 46 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 28 01 06 01 00 01 54 41 4b 00 00 00 06 00 00 00 00 00 00 00 00 00 00 00 09 24 01 00 02 00 05 01 25 00 00 00 00 55 44 00 0c 01 01 09 00 00 59 a8 ca 55 44 00 50 01 02 01 00 ee ee ee ee 54 61 72 67 65 74 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 25 00 02 00 00 00 04 00 00 00 25 00 00 00 14 0f 7a bb 7c 24 01 00 02 00 05 01 25 00 0b 5a fc d7 14 01 00 02 00 05 01 25 00 00 00 55 44 00 30 01 03 01 00 00 00 00 00 00 03 f3 b4 00 00 00 00 00 03 b6 dc 00 00 00 00 40 1e c5 d4 00 00 00 00 40 0e d3 54 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 33 61 33 64 36 35 65 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 55 44 00 cc 01 15 31 00 01 28 00 42 46 41 50 49 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 c4 00 00 00 00 00 00 00 c4 00 00 00 03 00 00 00 00 00 00 00 2d 35 14 ee 05 00 00 00 ec 00 1c 43 4f b2 95 8f fa 00 00 00 69 70 75 2e 6d 63 62 69 73 74 3a 6b 30 3a 6e 30 3a 73 30 3a 70 30 31 3a 63 30 00 00 00 00 00 00 00 00 00 00 3c 00 00 00 2d 35 1e c6 97 00 00 00 ec 00 1c 43 4f 70 49 5a 04 00 00 01 aa 70 75 2e 6d 63 62 69 73 74 3a 6b 30 3a 6e 30 3a 73 30 3a 70 30 31 3a 63 30 00 00 00 00 00 00 00 00 00 00 3c 00 00 00 2d 35 23 6a c1 00 00 00 ec 00 08 43 4f 25 60 10 27 00 00 00 90 00 00 00 00 00 00 00 01 00 00 00 24 55 44 01 58 01 15 31 00 01 28 00 42 46 41 50 49 5f 49 00 00 00 00 00 00 00 00 00 00 00 00 01 50 00 00 00 00 00 00 01 50 00 00 00 08 00 00 00 00 00 00 00 2d 35 23 78 de 00 00 00 ec 00 00 43 4f 0b b1 67 60 00 00 0b b3 00 00 00 1c 00 00 00 2d 35 23 84 bb 00 00 00 ec 00 08 43 4f f6 cf 06 d1 00 00 00 78 00 00 00 00 00 33 e2 1a 00 00 00 24 00 00 00 2d 35 23 d2 7b 00 00 00 ec 00 08 43 4f e3 80 24 18 00 00 03 48 00 00 00 00 00 33 e2 1a 00 00 00 24 00 00 00 2d 38 2b 2e 28 00 00 00 ec 00 28 43 4f d6 1a 5a 53 00 00 00 ac 70 75 2e 6d 63 61 3a 6b 30 3a 6e 30 3a 73 30 3a 70 30 31 3a 63 31 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 a0 00 00 00 44 00 00 00 2d 38 2b 3f 9b 00 00 00 ec 00 00 43 4f 94 0a 90 3e 00 00 0b de 00 00 00 1c 00 00 00 2d 38 2b 4b 69 00 00 00 ec 00 08 43 4f f6 cf 06 d1 00 00 00 78 00 00 00 00 00 59 a8 ca 00 00 00 24 00 00 00 2d 38 2c 9a 47 00 00 00 ec 00 00 43 4f 46 4e 03 ce 00 00 00 b1 00 00 00 1c 00 00 00 2d 38 2c af b6 00 00 00 ec 00 08 43 4f e3 80 24 18 00 00 03 48 00 00 00 00 00 59 a8 ca 00 00 00 24 55 44 00 30 01 15 31 00 01 28 00 42 53 43 41 4e 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 28 00 00 00 00 00 00 00 28 00 00 00 00 00 00 00 00 55 44 00 30 01 15 31 00 01 28 00 42 46 41 50 49 5f 44 42 47 00 00 00 00 00 00 00 00 00 00 00 28 00 00 00 00 00 00 00 28 00 00 00 00 00 00 00 00 55 44 00 f4 01 15 31 00 01 28 00 42 46 41 50 49 5f 49 00 00 00 00 00 00 00 00 00 00 00 00 00 ec 00 00 00 00 00 00 00 ec 00 00 00 05 00 00 00 00 00 00 00 2d 38 2b 2e 28 00 00 00 ec 00 28 43 4f d6 1a 5a 53 00 00 00 ac 70 75 2e 6d 63 61 3a 6b 30 3a 6e 30 3a 73 30 3a 70 30 31 3a 63 31 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 a0 00 00 00 44 00 00 00 2d 38 2b 3f 9b 00 00 00 ec 00 00 43 4f 94 0a 90 3e 00 00 0b de 00 00 00 1c 00 00 00 2d 38 2b 4b 69 00 00 00 ec 00 08 43 4f f6 cf 06 d1 00 00 00 78 00 00 00 00 00 59 a8 ca 00 00 00 24 00 00 00 2d 38 2c 9a 47 00 00 00 ec 00 00 43 4f 46 4e 03 ce 00 00 00 b1 00 00 00 1c 00 00 00 2d 38 2c af b6 00 00 00 ec 00 08 43 4f e3 80 24 18 00 00 03 48 00 00 00 00 00 59 a8 ca 00 00 00 24 55 44 01 54 01 15 31 00 01 28 00 42 46 41 50 49 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 4c 00 00 00 00 00 00 01 4c 00 00 00 05 00 00 00 00 00 00 00 2d 35 0e 5b 54 00 00 00 ec 00 18 43 4f c8 28 66 4c 00 00 01 2b 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 4f 00 00 00 00 00 00 00 4f 00 00 00 34 00 00 00 2d 35 0e 6c c2 00 00 00 ec 00 38 43 4f b4 15 80 83 00 00 01 96 70 75 2e 6d 63 61 3a 6b 30 3a 6e 30 3a 73 30 3a 70 30 31 3a 63 33 00 00 80 00 10 a4 07 01 10 3f 00 00 00 00 00 00 00 4e 00 00 00 00 00 00 00 4e 00 00 00 00 00 00 00 4f 00 00 00 54 00 00 00 2d 35 14 ee 05 00 00 00 ec 00 1c 43 4f b2 95 8f fa 00 00 00 69 70 75 2e 6d 63 62 69 73 74 3a 6b 30 3a 6e 30 3a 73 30 3a 70 30 31 3a 63 30 00 00 00 00 00 00 00 00 00 00 3c 00 00 00 2d 35 1e c6 97 00 00 00 ec 00 1c 43 4f 70 49 5a 04 00 00 01 aa 70 75 2e 6d 63 62 69 73 74 3a 6b 30 3a 6e 30 3a 73 30 3a 70 30 31 3a 63 30 00 00 00 00 00 00 00 00 00 00 3c 00 00 00 2d 35 23 6a c1 00 00 00 ec 00 08 43 4f 25 60 10 27 00 00 00 90 00 00 00 00 00 00 00 01 00 00 00 24 5f ff f8 00 04 3a 04 6a ff ff f8 00 04 3a 04 6a 1f ff f8 00 02 44 02 86 2f ff f8 00 02 44 02 86 3f ff f8 00 03 1f 03 1e 4f ff f8 00 04 03 03 ff 5f ff f8 00 04 3a 04 6a ff ff f8 00 04 3a 04 6a 1f ff f8 00 02 44 02 86 2f ff f8 00 02 44 02 86 3f ff f8 00 03 1f 03 1e 4f ff f8 00 04 03 03 ff 5f ff f8 00 04 3a 04 6a ff ff f8 00 04 3a 04 6a 1f ff f8 00 02 44 02 86 2f ff f8 00 02 44 02 86 3f ff f8 00 03 1f 03 1e 4f ff f8 00 04 03 03 ff 5f ff f8 00 04 3a 04 6a ff ff f8 00 04 3a 04 6a 1f ff f8 00 02 44 02 86 2f ff f8 00 02 44 02 86 3f ff f8 00 03 1f 03 1e 4f ff f8 00 04 03 03 ff 5f ff f8 00 04 3a 04 6a ff ff f8 00 04 3a 04 6a 1f ff f8 00 02 44 02 86 2f ff f8 00 02 44 02 86 3f ff f8 00 03 1f 03 1e 4f ff f8 00 04 03 03 ff 5f ff f8 00 04 3a 04 6a ff ff f8 00 04 3a 04 6a 1f ff f8 00 02 44 02 86 2f ff f8 00 02 44 02 86 3f ff f8 00 03 1f 03 1e 4f ff f8 00 04 03 03 ff 5f ff f8 00 04 3a 04 6a ff ff f8 00 04 3a 04 6a 1f ff f8 00 02 44 02 86 2f ff f8 00 02 44 02 86 3f ff f8 00 03 1f 03 1e 4f ff f8 00 04 03 03 ff 5f ff f8 00 04 3a 04 6a ff ff f8 00 04 3a 04 6a 1f ff f8 00 02 44 02 86 2f ff f8 00 02 44 02 86 3f ff f8 00 03 1f 03 1e 4f ff f8 00 04 03 03 ff 5f ff f8 00 04 3a 04 6a ff ff f8 00 04 3a 04 6a 1f ff f8 00 02 44 02 86 2f ff f8 00 02 44 02 86"
      ], 
      "Id": 7, 
      "Message": "org.open_power.Error.Host.Event.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Informational", 
      "Timestamp": 1494335180376, 
      "associations": []
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170509 13:16:03.000">To JSON using : pretty_print=True </msg>
<msg level="INFO" timestamp="20170509 13:16:03.000">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/logging/entry/1": {
            "AdditionalData": [
                "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 17 00 00 00 00...</msg>
<status status="PASS" starttime="20170509 13:16:02.998" endtime="20170509 13:16:03.000"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:16:03.002" html="yes">Appended to file '&lt;a href="file:///tmp/root/26619/obmc-robot/logs/20170509131533895929_TestsTestBasicPoweron/20170509131533895929_PowerOnTest/20170509131533895929_BMC_elog.txt"&gt;/tmp/root/26619/obmc-robot/logs/20170509131533895929_TestsTestBasicPoweron/20170509131533895929_PowerOnTest/20170509131533895929_BMC_elog.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170509 13:16:03.001" endtime="20170509 13:16:03.002"></status>
</kw>
<status status="PASS" starttime="20170509 13:16:03.000" endtime="20170509 13:16:03.002"></status>
</kw>
<status status="PASS" starttime="20170509 13:16:02.581" endtime="20170509 13:16:03.002"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_record_log', '/org/openbmc/control/led/enumerate')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:16:03.003">${logpath} = /tmp/root/26619/obmc-robot/logs/20170509131533895929_TestsTestBasicPoweron/20170509131533895929_PowerOnTest/20170509131533895929_BMC_record_log.txt</msg>
<status status="PASS" starttime="20170509 13:16:03.003" endtime="20170509 13:16:03.003"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:16:03.006">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170509 13:16:03.006" endtime="20170509 13:16:03.007"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:16:03.007">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170509 13:16:03.007" endtime="20170509 13:16:03.007"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:16:03.008">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170509 13:16:03.007" endtime="20170509 13:16:03.008"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:16:03.008">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170509 13:16:03.008" endtime="20170509 13:16:03.008"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:16:03.195">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170509 13:16:03.009" endtime="20170509 13:16:03.195"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:16:03.195">${status} = PASS</msg>
<msg level="INFO" timestamp="20170509 13:16:03.195">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:16:03.009" endtime="20170509 13:16:03.195"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:16:03.196">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:16:03.196" endtime="20170509 13:16:03.196"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:16:03.197">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:16:03.196" endtime="20170509 13:16:03.197"></status>
</kw>
<status status="PASS" starttime="20170509 13:16:03.005" endtime="20170509 13:16:03.197"></status>
</kw>
<status status="PASS" starttime="20170509 13:16:03.005" endtime="20170509 13:16:03.197"></status>
</kw>
<status status="PASS" starttime="20170509 13:16:03.004" endtime="20170509 13:16:03.197"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:16:03.198">${base_uri} = /org/openbmc/control/led/enumerate</msg>
<status status="PASS" starttime="20170509 13:16:03.197" endtime="20170509 13:16:03.198"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20170509 13:16:03.198" endtime="20170509 13:16:03.198"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:16:03.240">Get Request using : alias=openbmc, uri=/org/openbmc/control/led/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170509 13:16:03.240">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" starttime="20170509 13:16:03.199" endtime="20170509 13:16:03.241"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" starttime="20170509 13:16:03.241" endtime="20170509 13:16:03.241"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:16:03.241">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" starttime="20170509 13:16:03.003" endtime="20170509 13:16:03.241"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:16:03.242">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20170509 13:16:03.243">404 != 200</msg>
<status status="FAIL" starttime="20170509 13:16:03.242" endtime="20170509 13:16:03.243"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:16:03.243">${status} = False</msg>
<status status="PASS" starttime="20170509 13:16:03.242" endtime="20170509 13:16:03.243"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw library="BuiltIn" name="Continue For Loop">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg level="INFO" timestamp="20170509 13:16:03.244">Continuing for loop from the next iteration.</msg>
<status status="PASS" starttime="20170509 13:16:03.244" endtime="20170509 13:16:03.244"></status>
</kw>
<status status="PASS" starttime="20170509 13:16:03.243" endtime="20170509 13:16:03.244"></status>
</kw>
<status status="PASS" starttime="20170509 13:16:03.002" endtime="20170509 13:16:03.244"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_sensor_list', '/org/openbmc/sensors/enumerate')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:16:03.245">${logpath} = /tmp/root/26619/obmc-robot/logs/20170509131533895929_TestsTestBasicPoweron/20170509131533895929_PowerOnTest/20170509131533895929_BMC_sensor_list.txt</msg>
<status status="PASS" starttime="20170509 13:16:03.244" endtime="20170509 13:16:03.245"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:16:03.248">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170509 13:16:03.247" endtime="20170509 13:16:03.248"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:16:03.249">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170509 13:16:03.248" endtime="20170509 13:16:03.249"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:16:03.250">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170509 13:16:03.249" endtime="20170509 13:16:03.250"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:16:03.250">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170509 13:16:03.250" endtime="20170509 13:16:03.251"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:16:03.431">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170509 13:16:03.251" endtime="20170509 13:16:03.431"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:16:03.431">${status} = PASS</msg>
<msg level="INFO" timestamp="20170509 13:16:03.431">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:16:03.251" endtime="20170509 13:16:03.431"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:16:03.432">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:16:03.432" endtime="20170509 13:16:03.432"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:16:03.433">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:16:03.432" endtime="20170509 13:16:03.433"></status>
</kw>
<status status="PASS" starttime="20170509 13:16:03.247" endtime="20170509 13:16:03.433"></status>
</kw>
<status status="PASS" starttime="20170509 13:16:03.246" endtime="20170509 13:16:03.433"></status>
</kw>
<status status="PASS" starttime="20170509 13:16:03.245" endtime="20170509 13:16:03.433"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:16:03.434">${base_uri} = /org/openbmc/sensors/enumerate</msg>
<status status="PASS" starttime="20170509 13:16:03.433" endtime="20170509 13:16:03.434"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20170509 13:16:03.434" endtime="20170509 13:16:03.434"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:16:03.681">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170509 13:16:03.681">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:16:03.435" endtime="20170509 13:16:03.681"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" starttime="20170509 13:16:03.682" endtime="20170509 13:16:03.682"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:16:03.682">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:16:03.245" endtime="20170509 13:16:03.682"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:16:03.683">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:16:03.683" endtime="20170509 13:16:03.683"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:16:03.683">${status} = True</msg>
<status status="PASS" starttime="20170509 13:16:03.682" endtime="20170509 13:16:03.683"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" starttime="20170509 13:16:03.684" endtime="20170509 13:16:03.684"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:16:03.685">To JSON using : content={
  "data": {
    "/org/openbmc/sensors/host/BootCount": {
      "error": 0, 
      "units": "", 
      "value": 2
    }, 
    "/org/openbmc/sensors/host/BootProgress": {
      "error": 0, 
      "units": "", 
      "value": "FW Progress, Baseboard Init"
    }, 
    "/org/openbmc/sensors/host/OperatingSystemStatus": {
      "error": 0, 
      "units": "", 
      "value": "Off"
    }, 
    "/org/openbmc/sensors/host/PowerSupplyDerating": {
      "error": 0, 
      "units": "", 
      "value": 10
    }, 
    "/org/openbmc/sensors/host/PowerSupplyRedundancy": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/TurboAllowed": {
      "error": 0, 
      "units": "", 
      "value": 0
    }, 
    "/org/openbmc/sensors/host/cpu0/OccStatus": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/cpu1/OccStatus": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/powercap": {
      "error": 0, 
      "units": "", 
      "value": 0
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170509 13:16:03.685">To JSON using : pretty_print=True </msg>
<msg level="INFO" timestamp="20170509 13:16:03.685">${jsondata} = {
    "data": {
        "/org/openbmc/sensors/host/BootCount": {
            "error": 0,
            "units": "",
            "value": 2
        },
        "/org/openbmc/sensors/host/BootProgress": {
...</msg>
<status status="PASS" starttime="20170509 13:16:03.684" endtime="20170509 13:16:03.685"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:16:03.686" html="yes">Appended to file '&lt;a href="file:///tmp/root/26619/obmc-robot/logs/20170509131533895929_TestsTestBasicPoweron/20170509131533895929_PowerOnTest/20170509131533895929_BMC_sensor_list.txt"&gt;/tmp/root/26619/obmc-robot/logs/20170509131533895929_TestsTestBasicPoweron/20170509131533895929_PowerOnTest/20170509131533895929_BMC_sensor_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170509 13:16:03.686" endtime="20170509 13:16:03.687"></status>
</kw>
<status status="PASS" starttime="20170509 13:16:03.685" endtime="20170509 13:16:03.687"></status>
</kw>
<status status="PASS" starttime="20170509 13:16:03.244" endtime="20170509 13:16:03.687"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_inventory', '/xyz/openbmc_project/inventory/enumerate')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:16:03.689">${logpath} = /tmp/root/26619/obmc-robot/logs/20170509131533895929_TestsTestBasicPoweron/20170509131533895929_PowerOnTest/20170509131533895929_BMC_inventory.txt</msg>
<status status="PASS" starttime="20170509 13:16:03.687" endtime="20170509 13:16:03.689"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:16:03.692">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170509 13:16:03.691" endtime="20170509 13:16:03.692"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:16:03.693">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170509 13:16:03.692" endtime="20170509 13:16:03.693"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:16:03.694">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170509 13:16:03.693" endtime="20170509 13:16:03.694"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:16:03.695">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170509 13:16:03.694" endtime="20170509 13:16:03.695"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:16:03.874">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170509 13:16:03.696" endtime="20170509 13:16:03.874"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:16:03.874">${status} = PASS</msg>
<msg level="INFO" timestamp="20170509 13:16:03.874">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:16:03.695" endtime="20170509 13:16:03.875"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:16:03.875">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:16:03.875" endtime="20170509 13:16:03.875"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:16:03.876">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:16:03.875" endtime="20170509 13:16:03.876"></status>
</kw>
<status status="PASS" starttime="20170509 13:16:03.691" endtime="20170509 13:16:03.876"></status>
</kw>
<status status="PASS" starttime="20170509 13:16:03.690" endtime="20170509 13:16:03.876"></status>
</kw>
<status status="PASS" starttime="20170509 13:16:03.690" endtime="20170509 13:16:03.876"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:16:03.877">${base_uri} = /xyz/openbmc_project/inventory/enumerate</msg>
<status status="PASS" starttime="20170509 13:16:03.876" endtime="20170509 13:16:03.877"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20170509 13:16:03.877" endtime="20170509 13:16:03.877"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:16:05.542">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/inventory/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170509 13:16:05.542">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:16:03.878" endtime="20170509 13:16:05.542"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" starttime="20170509 13:16:05.542" endtime="20170509 13:16:05.542"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:16:05.543">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:16:03.689" endtime="20170509 13:16:05.543"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:16:05.544">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:16:05.543" endtime="20170509 13:16:05.544"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:16:05.544">${status} = True</msg>
<status status="PASS" starttime="20170509 13:16:05.543" endtime="20170509 13:16:05.544"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" starttime="20170509 13:16:05.544" endtime="20170509 13:16:05.544"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:16:05.548">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/inventory/createme3": {
      "ExampleProperty1": "foo"
    }, 
    "/xyz/openbmc_project/inventory/system": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 0, 
      "Manufacturer": "", 
      "Model": "2", 
      "PartNumber": "0000000000000000", 
      "Present": 1, 
      "PrettyName": "", 
      "SerialNumber": "0000000000000000"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard": {
      "BuildDate": "", 
      "Manufacturer": "0000000000000000", 
      "Model": "", 
      "PartNumber": "0000000", 
      "Present": 0, 
      "PrettyName": "SYSTEM PLANAR   ", 
      "SerialNumber": "000000000000"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc": {
      "BuildDate": "", 
      "FieldReplaceable": 0, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01DH051", 
      "Present": 1, 
      "PrettyName": "BMC PLANAR  ", 
      "SerialNumber": "000000000000"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc/ethernet": {
      "FieldReplaceable": 0, 
      "MACAddress": "00:00:00:00:00:00", 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01HL322", 
      "Present": 1, 
      "PrettyName": "PROCESSOR MODULE", 
      "SerialNumber": "YA3933775622", 
      "Version": "10"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core0": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core1": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core10": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core11": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core12": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core13": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core14": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core15": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core16": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core17": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core18": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core19": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core2": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core20": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core21": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core22": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core23": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core3": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core4": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core5": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core6": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core7": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core8": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core9": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01HL322", 
      "Present": 1, 
      "PrettyName": "PROCESSOR MODULE", 
      "SerialNumber": "YA3933775618", 
      "Version": "10"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core0": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core1": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core10": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core11": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core12": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core13": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core14": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core15": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core16": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core17": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core18": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core19": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core2": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core20": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core21": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core22": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core23": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core3": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core4": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core5": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core6": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core7": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core8": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core9": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm0": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db196b", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm1": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db196a", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm10": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db17ef", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm11": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db1801", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm12": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db1983", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm13": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db1824", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm14": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db1907", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm15": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db18d0", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm2": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db196c", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm3": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db196d", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm4": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db1971", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm5": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db17e7", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm6": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db1973", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm7": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db1970", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm8": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db17ec", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm9": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 0, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db17ed", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan0": {
      "Present": 1, 
      "PrettyName": "fan0"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan1": {
      "Present": 1, 
      "PrettyName": "fan1"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan2": {
      "Present": 1, 
      "PrettyName": "fan2"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan3": {
      "Present": 1, 
      "PrettyName": "fan3"
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170509 13:16:05.548">To JSON using : pretty_print=True </msg>
<msg level="INFO" timestamp="20170509 13:16:05.549">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/inventory/createme3": {
            "ExampleProperty1": "foo"
        },
        "/xyz/openbmc_project/inventory/system": {
            "BuildDate": "",
 ...</msg>
<status status="PASS" starttime="20170509 13:16:05.545" endtime="20170509 13:16:05.549"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:16:05.550" html="yes">Appended to file '&lt;a href="file:///tmp/root/26619/obmc-robot/logs/20170509131533895929_TestsTestBasicPoweron/20170509131533895929_PowerOnTest/20170509131533895929_BMC_inventory.txt"&gt;/tmp/root/26619/obmc-robot/logs/20170509131533895929_TestsTestBasicPoweron/20170509131533895929_PowerOnTest/20170509131533895929_BMC_inventory.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170509 13:16:05.550" endtime="20170509 13:16:05.550"></status>
</kw>
<status status="PASS" starttime="20170509 13:16:05.549" endtime="20170509 13:16:05.550"></status>
</kw>
<status status="PASS" starttime="20170509 13:16:03.687" endtime="20170509 13:16:05.551"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_led', '/org/openbmc/records/events/enumerate')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:16:05.551">${logpath} = /tmp/root/26619/obmc-robot/logs/20170509131533895929_TestsTestBasicPoweron/20170509131533895929_PowerOnTest/20170509131533895929_BMC_led.txt</msg>
<status status="PASS" starttime="20170509 13:16:05.551" endtime="20170509 13:16:05.551"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:16:05.554">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170509 13:16:05.554" endtime="20170509 13:16:05.554"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:16:05.555">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170509 13:16:05.554" endtime="20170509 13:16:05.555"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:16:05.556">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170509 13:16:05.555" endtime="20170509 13:16:05.556"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:16:05.557">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170509 13:16:05.556" endtime="20170509 13:16:05.557"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:16:05.769">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170509 13:16:05.558" endtime="20170509 13:16:05.769"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:16:05.769">${status} = PASS</msg>
<msg level="INFO" timestamp="20170509 13:16:05.769">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:16:05.557" endtime="20170509 13:16:05.769"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:16:05.770">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:16:05.769" endtime="20170509 13:16:05.770"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:16:05.770">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:16:05.770" endtime="20170509 13:16:05.771"></status>
</kw>
<status status="PASS" starttime="20170509 13:16:05.553" endtime="20170509 13:16:05.771"></status>
</kw>
<status status="PASS" starttime="20170509 13:16:05.553" endtime="20170509 13:16:05.771"></status>
</kw>
<status status="PASS" starttime="20170509 13:16:05.552" endtime="20170509 13:16:05.771"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:16:05.771">${base_uri} = /org/openbmc/records/events/enumerate</msg>
<status status="PASS" starttime="20170509 13:16:05.771" endtime="20170509 13:16:05.772"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20170509 13:16:05.772" endtime="20170509 13:16:05.772"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:16:05.855">Get Request using : alias=openbmc, uri=/org/openbmc/records/events/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170509 13:16:05.855">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:16:05.772" endtime="20170509 13:16:05.855"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" starttime="20170509 13:16:05.855" endtime="20170509 13:16:05.855"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:16:05.856">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:16:05.551" endtime="20170509 13:16:05.856"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:16:05.857">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:16:05.856" endtime="20170509 13:16:05.857"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:16:05.857">${status} = True</msg>
<status status="PASS" starttime="20170509 13:16:05.856" endtime="20170509 13:16:05.857"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" starttime="20170509 13:16:05.857" endtime="20170509 13:16:05.857"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:16:05.858">To JSON using : content={
  "data": {}, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170509 13:16:05.858">To JSON using : pretty_print=True </msg>
<msg level="INFO" timestamp="20170509 13:16:05.858">${jsondata} = {
    "data": {},
    "message": "200 OK",
    "status": "ok"
}</msg>
<status status="PASS" starttime="20170509 13:16:05.858" endtime="20170509 13:16:05.858"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:16:05.860" html="yes">Appended to file '&lt;a href="file:///tmp/root/26619/obmc-robot/logs/20170509131533895929_TestsTestBasicPoweron/20170509131533895929_PowerOnTest/20170509131533895929_BMC_led.txt"&gt;/tmp/root/26619/obmc-robot/logs/20170509131533895929_TestsTestBasicPoweron/20170509131533895929_PowerOnTest/20170509131533895929_BMC_led.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170509 13:16:05.859" endtime="20170509 13:16:05.860"></status>
</kw>
<status status="PASS" starttime="20170509 13:16:05.858" endtime="20170509 13:16:05.860"></status>
</kw>
<status status="PASS" starttime="20170509 13:16:05.551" endtime="20170509 13:16:05.860"></status>
</kw>
<status status="PASS" starttime="20170509 13:16:02.581" endtime="20170509 13:16:05.860"></status>
</kw>
<status status="PASS" starttime="20170509 13:16:02.579" endtime="20170509 13:16:05.860"></status>
</kw>
<status status="PASS" starttime="20170509 13:16:02.579" endtime="20170509 13:16:05.860"></status>
</kw>
<status status="PASS" starttime="20170509 13:16:02.579" endtime="20170509 13:16:05.861"></status>
</kw>
<status status="PASS" starttime="20170509 13:16:00.915" endtime="20170509 13:16:05.861"></status>
</kw>
<status status="PASS" starttime="20170509 13:16:00.892" endtime="20170509 13:16:05.861"></status>
</kw>
<status status="PASS" starttime="20170509 13:16:00.890" endtime="20170509 13:16:05.861"></status>
</kw>
<status status="PASS" starttime="20170509 13:16:00.890" endtime="20170509 13:16:05.861"></status>
</kw>
<kw type="foritem" name="${method} = ('OS FFDC', 'OS FFDC Files')">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="Collections" name="List Should Contain Value">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" starttime="20170509 13:16:05.862" endtime="20170509 13:16:05.863"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:16:05.863">${status} = PASS</msg>
<msg level="INFO" timestamp="20170509 13:16:05.863">${ret_values} = None</msg>
<status status="PASS" starttime="20170509 13:16:05.862" endtime="20170509 13:16:05.863"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" starttime="20170509 13:16:05.863" endtime="20170509 13:16:05.863"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="OS FFDC Files">
<doc>Get the command list and iterate</doc>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${OS_HOST}' == '${EMPTY}'</arg>
<arg>No OS Host Provided</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:16:05.888">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20170509 13:16:05.888" endtime="20170509 13:16:05.888"></status>
</kw>
<status status="PASS" starttime="20170509 13:16:05.887" endtime="20170509 13:16:05.888"></status>
</kw>
<status status="PASS" starttime="20170509 13:16:05.864" endtime="20170509 13:16:05.888"></status>
</kw>
<status status="PASS" starttime="20170509 13:16:05.861" endtime="20170509 13:16:05.888"></status>
</kw>
<status status="PASS" starttime="20170509 13:16:05.861" endtime="20170509 13:16:05.888"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:35.728" endtime="20170509 13:16:05.889"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:35.725" endtime="20170509 13:16:05.889"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:35.725" endtime="20170509 13:16:05.889"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:35.725" endtime="20170509 13:16:05.889"></status>
</kw>
<kw library="SSHLibrary" name="Close All Connections">
<doc>Closes all open connections.</doc>
<status status="PASS" starttime="20170509 13:16:05.889" endtime="20170509 13:16:05.963"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:35.724" endtime="20170509 13:16:05.963"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:30.682" endtime="20170509 13:16:05.964"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:30.680" endtime="20170509 13:16:05.964"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}'=='True'</arg>
<arg>Recover Quiesced Host</arg>
</arguments>
<kw library="state_manager" name="Recover Quiesced Host">
<doc>Recover host from quisced state.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Is Host Quiesced</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="state_manager" name="Is Host Quiesced">
<doc>Check if host state is quiesced.</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:16:05.969">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170509 13:16:05.969" endtime="20170509 13:16:05.970"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:16:05.970">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170509 13:16:05.970" endtime="20170509 13:16:05.970"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:16:05.971">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170509 13:16:05.970" endtime="20170509 13:16:05.971"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:16:05.971">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170509 13:16:05.971" endtime="20170509 13:16:05.971"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:16:06.438">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170509 13:16:05.972" endtime="20170509 13:16:06.438"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:16:06.438">${status} = PASS</msg>
<msg level="INFO" timestamp="20170509 13:16:06.438">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:16:05.972" endtime="20170509 13:16:06.438"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:16:06.439">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:16:06.439" endtime="20170509 13:16:06.439"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:16:06.440">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:16:06.439" endtime="20170509 13:16:06.440"></status>
</kw>
<status status="PASS" starttime="20170509 13:16:05.968" endtime="20170509 13:16:06.440"></status>
</kw>
<status status="PASS" starttime="20170509 13:16:05.968" endtime="20170509 13:16:06.440"></status>
</kw>
<status status="PASS" starttime="20170509 13:16:05.967" endtime="20170509 13:16:06.440"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:16:06.441">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" starttime="20170509 13:16:06.441" endtime="20170509 13:16:06.441"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:16:06.444">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170509 13:16:06.443" endtime="20170509 13:16:06.444"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:16:06.446">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170509 13:16:06.445" endtime="20170509 13:16:06.446"></status>
</kw>
<status status="PASS" starttime="20170509 13:16:06.445" endtime="20170509 13:16:06.446"></status>
</kw>
<status status="PASS" starttime="20170509 13:16:06.442" endtime="20170509 13:16:06.446"></status>
</kw>
<status status="PASS" starttime="20170509 13:16:06.442" endtime="20170509 13:16:06.446"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:16:06.509">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170509 13:16:06.509">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:16:06.446" endtime="20170509 13:16:06.509"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:16:06.511">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170509 13:16:06.511" endtime="20170509 13:16:06.511"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:16:06.512">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170509 13:16:06.512" endtime="20170509 13:16:06.512"></status>
</kw>
<status status="PASS" starttime="20170509 13:16:06.511" endtime="20170509 13:16:06.512"></status>
</kw>
<status status="PASS" starttime="20170509 13:16:06.510" endtime="20170509 13:16:06.512"></status>
</kw>
<status status="PASS" starttime="20170509 13:16:06.510" endtime="20170509 13:16:06.512"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:16:06.513">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:16:05.967" endtime="20170509 13:16:06.513"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:16:06.513">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:16:06.513" endtime="20170509 13:16:06.513"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:16:06.514">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170509 13:16:06.514">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170509 13:16:06.514">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170509 13:16:06.514" endtime="20170509 13:16:06.514"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:16:06.514">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status status="PASS" starttime="20170509 13:16:05.966" endtime="20170509 13:16:06.514"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:16:06.515">${host_state} = Quiesced</msg>
<status status="PASS" starttime="20170509 13:16:05.966" endtime="20170509 13:16:06.515"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<status status="PASS" starttime="20170509 13:16:06.515" endtime="20170509 13:16:06.516"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:16:06.516">${status} = True</msg>
<status status="PASS" starttime="20170509 13:16:06.515" endtime="20170509 13:16:06.516"></status>
</kw>
<status status="PASS" starttime="20170509 13:16:05.965" endtime="20170509 13:16:06.516"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:16:06.516">${resp} = True</msg>
<status status="PASS" starttime="20170509 13:16:05.965" endtime="20170509 13:16:06.516"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${resp}' == 'True'</arg>
<arg>Run Keywords</arg>
<arg>Initiate Host PowerOff</arg>
<arg>AND</arg>
<arg>Log</arg>
<arg>HOST is recovered from quiesced state</arg>
</arguments>
<kw library="BuiltIn" name="Run Keywords">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Initiate Host PowerOff</arg>
<arg>AND</arg>
<arg>Log</arg>
<arg>HOST is recovered from quiesced state</arg>
</arguments>
<kw library="state_manager" name="Initiate Host PowerOff">
<doc>Initiate host power off.</doc>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${HOST_POWEROFF_TRANS}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:16:06.518">${args} = {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}</msg>
<status status="PASS" starttime="20170509 13:16:06.517" endtime="20170509 13:16:06.518"></status>
</kw>
<kw library="rest_client" name="Write Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>RequestedHostTransition</arg>
<arg>data=${args}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:16:06.519">${base_uri} = /xyz/openbmc_project/state/host0/</msg>
<status status="PASS" starttime="20170509 13:16:06.519" endtime="20170509 13:16:06.519"></status>
</kw>
<kw library="rest_client" name="OpenBMC Put Request">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:16:06.522">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170509 13:16:06.522" endtime="20170509 13:16:06.523"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:16:06.523">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170509 13:16:06.523" endtime="20170509 13:16:06.523"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:16:06.524">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170509 13:16:06.523" endtime="20170509 13:16:06.524"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:16:06.524">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170509 13:16:06.524" endtime="20170509 13:16:06.524"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:16:06.703">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170509 13:16:06.525" endtime="20170509 13:16:06.703"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:16:06.703">${status} = PASS</msg>
<msg level="INFO" timestamp="20170509 13:16:06.703">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:16:06.525" endtime="20170509 13:16:06.703"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:16:06.704">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:16:06.703" endtime="20170509 13:16:06.704"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:16:06.704">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:16:06.704" endtime="20170509 13:16:06.704"></status>
</kw>
<status status="PASS" starttime="20170509 13:16:06.521" endtime="20170509 13:16:06.705"></status>
</kw>
<status status="PASS" starttime="20170509 13:16:06.521" endtime="20170509 13:16:06.705"></status>
</kw>
<status status="PASS" starttime="20170509 13:16:06.520" endtime="20170509 13:16:06.705"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:16:06.705">${base_uri} = /xyz/openbmc_project/state/host0//attr/RequestedHostTransition</msg>
<status status="PASS" starttime="20170509 13:16:06.705" endtime="20170509 13:16:06.705"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:16:06.706">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170509 13:16:06.706" endtime="20170509 13:16:06.706"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" starttime="20170509 13:16:06.706" endtime="20170509 13:16:06.707"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:16:06.709">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-...</msg>
<status status="PASS" starttime="20170509 13:16:06.708" endtime="20170509 13:16:06.709"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:16:06.710">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20170509 13:16:06.710" endtime="20170509 13:16:06.710"></status>
</kw>
<status status="PASS" starttime="20170509 13:16:06.709" endtime="20170509 13:16:06.710"></status>
</kw>
<status status="PASS" starttime="20170509 13:16:06.707" endtime="20170509 13:16:06.710"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Put Request">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:16:06.928">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, data={"data": "xyz.openbmc_project.State.Host.Transition.Off"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg level="INFO" timestamp="20170509 13:16:06.929">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:16:06.711" endtime="20170509 13:16:06.929"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:16:06.930">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170509 13:16:06.929" endtime="20170509 13:16:06.930"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:16:06.931">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170509 13:16:06.931" endtime="20170509 13:16:06.931"></status>
</kw>
<status status="PASS" starttime="20170509 13:16:06.930" endtime="20170509 13:16:06.931"></status>
</kw>
<status status="PASS" starttime="20170509 13:16:06.929" endtime="20170509 13:16:06.931"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:16:06.932">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:16:06.519" endtime="20170509 13:16:06.932"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:16:06.932">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:16:06.932" endtime="20170509 13:16:06.932"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:16:06.933">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170509 13:16:06.933">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170509 13:16:06.933">${json} = {u'data': None, u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170509 13:16:06.933" endtime="20170509 13:16:06.933"></status>
</kw>
<status status="PASS" starttime="20170509 13:16:06.518" endtime="20170509 13:16:06.933"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${wait}' == '${0}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<status status="PASS" starttime="20170509 13:16:06.933" endtime="20170509 13:16:06.934"></status>
</kw>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>3 min</arg>
<arg>10 sec</arg>
<arg>Is Host Off</arg>
</arguments>
<kw library="state_manager" name="Is Host Off">
<doc>Check if host state is "Off".</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:16:06.938">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170509 13:16:06.938" endtime="20170509 13:16:06.939"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:16:06.939">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170509 13:16:06.939" endtime="20170509 13:16:06.939"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:16:06.940">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170509 13:16:06.939" endtime="20170509 13:16:06.940"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:16:06.940">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170509 13:16:06.940" endtime="20170509 13:16:06.940"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:16:07.988">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170509 13:16:06.941" endtime="20170509 13:16:07.988"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:16:07.988">${status} = PASS</msg>
<msg level="INFO" timestamp="20170509 13:16:07.988">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:16:06.941" endtime="20170509 13:16:07.988"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:16:07.989">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:16:07.988" endtime="20170509 13:16:07.989"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:16:07.989">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:16:07.989" endtime="20170509 13:16:07.989"></status>
</kw>
<status status="PASS" starttime="20170509 13:16:06.937" endtime="20170509 13:16:07.990"></status>
</kw>
<status status="PASS" starttime="20170509 13:16:06.937" endtime="20170509 13:16:07.990"></status>
</kw>
<status status="PASS" starttime="20170509 13:16:06.936" endtime="20170509 13:16:07.990"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:16:07.990">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" starttime="20170509 13:16:07.990" endtime="20170509 13:16:07.990"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:16:07.993">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170509 13:16:07.992" endtime="20170509 13:16:07.993"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:16:07.994">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170509 13:16:07.994" endtime="20170509 13:16:07.994"></status>
</kw>
<status status="PASS" starttime="20170509 13:16:07.993" endtime="20170509 13:16:07.995"></status>
</kw>
<status status="PASS" starttime="20170509 13:16:07.991" endtime="20170509 13:16:07.995"></status>
</kw>
<status status="PASS" starttime="20170509 13:16:07.991" endtime="20170509 13:16:07.995"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:16:08.696">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170509 13:16:08.697">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:16:07.995" endtime="20170509 13:16:08.697"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:16:08.698">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170509 13:16:08.698" endtime="20170509 13:16:08.699"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:16:08.699">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170509 13:16:08.699" endtime="20170509 13:16:08.700"></status>
</kw>
<status status="PASS" starttime="20170509 13:16:08.699" endtime="20170509 13:16:08.700"></status>
</kw>
<status status="PASS" starttime="20170509 13:16:08.697" endtime="20170509 13:16:08.700"></status>
</kw>
<status status="PASS" starttime="20170509 13:16:08.697" endtime="20170509 13:16:08.700"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:16:08.700">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:16:06.936" endtime="20170509 13:16:08.700"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:16:08.701">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:16:08.700" endtime="20170509 13:16:08.701"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:16:08.701">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170509 13:16:08.701">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170509 13:16:08.701">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170509 13:16:08.701" endtime="20170509 13:16:08.701"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:16:08.702">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status status="PASS" starttime="20170509 13:16:06.935" endtime="20170509 13:16:08.702"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:16:08.702">${host_state} = Quiesced</msg>
<status status="PASS" starttime="20170509 13:16:06.935" endtime="20170509 13:16:08.702"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170509 13:16:08.703">Off != Quiesced</msg>
<status status="FAIL" starttime="20170509 13:16:08.702" endtime="20170509 13:16:08.703"></status>
</kw>
<status status="FAIL" starttime="20170509 13:16:06.934" endtime="20170509 13:16:08.703"></status>
</kw>
<kw library="state_manager" name="Is Host Off">
<doc>Check if host state is "Off".</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:16:18.708">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170509 13:16:18.708" endtime="20170509 13:16:18.709"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:16:18.710">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170509 13:16:18.709" endtime="20170509 13:16:18.710"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:16:18.711">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170509 13:16:18.710" endtime="20170509 13:16:18.711"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:16:18.711">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170509 13:16:18.711" endtime="20170509 13:16:18.712"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:16:20.149">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170509 13:16:18.712" endtime="20170509 13:16:20.150"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:16:20.150">${status} = PASS</msg>
<msg level="INFO" timestamp="20170509 13:16:20.150">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:16:18.712" endtime="20170509 13:16:20.150"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:16:20.150">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:16:20.150" endtime="20170509 13:16:20.151"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:16:20.151">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:16:20.151" endtime="20170509 13:16:20.151"></status>
</kw>
<status status="PASS" starttime="20170509 13:16:18.707" endtime="20170509 13:16:20.151"></status>
</kw>
<status status="PASS" starttime="20170509 13:16:18.706" endtime="20170509 13:16:20.151"></status>
</kw>
<status status="PASS" starttime="20170509 13:16:18.706" endtime="20170509 13:16:20.152"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:16:20.152">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" starttime="20170509 13:16:20.152" endtime="20170509 13:16:20.152"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:16:20.154">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170509 13:16:20.153" endtime="20170509 13:16:20.154"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:16:20.155">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170509 13:16:20.155" endtime="20170509 13:16:20.155"></status>
</kw>
<status status="PASS" starttime="20170509 13:16:20.154" endtime="20170509 13:16:20.155"></status>
</kw>
<status status="PASS" starttime="20170509 13:16:20.153" endtime="20170509 13:16:20.156"></status>
</kw>
<status status="PASS" starttime="20170509 13:16:20.152" endtime="20170509 13:16:20.156"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:16:25.902">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170509 13:16:25.903">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:16:20.156" endtime="20170509 13:16:25.903"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:16:25.905">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170509 13:16:25.904" endtime="20170509 13:16:25.905"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:16:25.906">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170509 13:16:25.906" endtime="20170509 13:16:25.906"></status>
</kw>
<status status="PASS" starttime="20170509 13:16:25.905" endtime="20170509 13:16:25.907"></status>
</kw>
<status status="PASS" starttime="20170509 13:16:25.904" endtime="20170509 13:16:25.907"></status>
</kw>
<status status="PASS" starttime="20170509 13:16:25.903" endtime="20170509 13:16:25.907"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:16:25.907">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170509 13:16:18.705" endtime="20170509 13:16:25.907"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:16:25.908">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170509 13:16:25.907" endtime="20170509 13:16:25.908"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:16:25.908">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170509 13:16:25.908">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170509 13:16:25.908">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170509 13:16:25.908" endtime="20170509 13:16:25.908"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:16:25.909">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status status="PASS" starttime="20170509 13:16:18.705" endtime="20170509 13:16:25.909"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:16:25.909">${host_state} = Off</msg>
<status status="PASS" starttime="20170509 13:16:18.704" endtime="20170509 13:16:25.909"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<status status="PASS" starttime="20170509 13:16:25.909" endtime="20170509 13:16:25.910"></status>
</kw>
<status status="PASS" starttime="20170509 13:16:18.704" endtime="20170509 13:16:25.910"></status>
</kw>
<status status="PASS" starttime="20170509 13:16:06.934" endtime="20170509 13:16:25.910"></status>
</kw>
<status status="PASS" starttime="20170509 13:16:06.517" endtime="20170509 13:16:25.910"></status>
</kw>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>HOST is recovered from quiesced state</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:16:25.910">HOST is recovered from quiesced state</msg>
<status status="PASS" starttime="20170509 13:16:25.910" endtime="20170509 13:16:25.911"></status>
</kw>
<status status="PASS" starttime="20170509 13:16:06.517" endtime="20170509 13:16:25.911"></status>
</kw>
<status status="PASS" starttime="20170509 13:16:06.516" endtime="20170509 13:16:25.911"></status>
</kw>
<status status="PASS" starttime="20170509 13:16:05.965" endtime="20170509 13:16:25.911"></status>
</kw>
<status status="PASS" starttime="20170509 13:16:05.964" endtime="20170509 13:16:25.911"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Log Test Case Status">
<doc>Test case execution result history.</doc>
<kw library="BuiltIn" name="Get Variable Value">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH_STYLE}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH_STYLE}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:16:25.920">${FFDC_DIR_PATH_STYLE} = </msg>
<status status="PASS" starttime="20170509 13:16:25.911" endtime="20170509 13:16:25.920"></status>
</kw>
<kw library="BuiltIn" name="Get Variable Value">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:16:25.920">${FFDC_DIR_PATH} = /tmp/root/26619/obmc-robot/logs/20170509131533895929_TestsTestBasicPoweron/20170509131533895929_PowerOnTest/</msg>
<status status="PASS" starttime="20170509 13:16:25.920" endtime="20170509 13:16:25.920"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH}' == '${EMPTY}'</arg>
<arg>Set FFDC Defaults</arg>
</arguments>
<status status="PASS" starttime="20170509 13:16:25.921" endtime="20170509 13:16:25.921"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH_STYLE}' == '${1}'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${FFDC_LOG_PATH}</arg>
<arg>${FFDC_DIR_PATH}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${TEST_HISTORY}</arg>
<arg>${FFDC_DIR_PATH}test_history.txt</arg>
</arguments>
<status status="PASS" starttime="20170509 13:16:25.921" endtime="20170509 13:16:25.922"></status>
</kw>
<kw library="OperatingSystem" name="Create Directory">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:16:25.922" html="yes">Directory '&lt;a href="file:///tmp/root/26619/obmc-robot/logs"&gt;/tmp/root/26619/obmc-robot/logs&lt;/a&gt;' already exists.</msg>
<status status="PASS" starttime="20170509 13:16:25.922" endtime="20170509 13:16:25.922"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw library="OperatingSystem" name="File Should Exist">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:16:25.923" html="yes">File '&lt;a href="file:///tmp/root/26619/obmc-robot/logs/test_history.txt"&gt;/tmp/root/26619/obmc-robot/logs/test_history.txt&lt;/a&gt;' exists.</msg>
<status status="PASS" starttime="20170509 13:16:25.923" endtime="20170509 13:16:25.923"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:16:25.924">${exist} = True</msg>
<status status="PASS" starttime="20170509 13:16:25.923" endtime="20170509 13:16:25.924"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<status status="PASS" starttime="20170509 13:16:25.924" endtime="20170509 13:16:25.924"></status>
</kw>
<kw library="gen_robot_print" name="Rpvars">
<arguments>
<arg>TEST_HISTORY</arg>
</arguments>
<status status="PASS" starttime="20170509 13:16:25.925" endtime="20170509 13:16:25.925"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Get Current Time Stamp">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw library="DateTime" name="Get Current Date">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:16:25.926">${cur_time} = 2017-05-09 13:16:25:925952</msg>
<status status="PASS" starttime="20170509 13:16:25.926" endtime="20170509 13:16:25.926"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:16:25.927">${cur_time} = 20170509131625925952</msg>
<status status="PASS" starttime="20170509 13:16:25.926" endtime="20170509 13:16:25.927"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:16:25.927">${cur_time} = 20170509131625925952</msg>
<status status="PASS" starttime="20170509 13:16:25.925" endtime="20170509 13:16:25.927"></status>
</kw>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:16:25.928" html="yes">Appended to file '&lt;a href="file:///tmp/root/26619/obmc-robot/logs/test_history.txt"&gt;/tmp/root/26619/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170509 13:16:25.927" endtime="20170509 13:16:25.928"></status>
</kw>
<status status="PASS" starttime="20170509 13:16:25.911" endtime="20170509 13:16:25.928"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:30.406" endtime="20170509 13:16:25.928"></status>
</kw>
<kw library="utils" name="Stop SOL Console Logging">
<doc>Stop system console logging and return log output.</doc>
<assign>
<var>${sol_log}</var>
</assign>
<kw library="utils" name="Create OS Console File Path">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:16:25.930">${default_file_path} = /tmp/9.3.86.161_os_console</msg>
<status status="PASS" starttime="20170509 13:16:25.930" endtime="20170509 13:16:25.930"></status>
</kw>
<kw library="BuiltIn" name="Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:16:25.931">${log_file_path} = /tmp/9.3.86.161_os_console</msg>
<status status="PASS" starttime="20170509 13:16:25.930" endtime="20170509 13:16:25.931"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:16:25.931">${log_file_path} = /tmp/9.3.86.161_os_console</msg>
<status status="PASS" starttime="20170509 13:16:25.929" endtime="20170509 13:16:25.931"></status>
</kw>
<kw library="utils" name="Create OS Console Command String">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${search_string}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:16:25.932">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status status="PASS" starttime="20170509 13:16:25.931" endtime="20170509 13:16:25.932"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" starttime="20170509 13:16:25.932" endtime="20170509 13:16:25.942"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:16:25.949">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170509 13:16:25.952">${rc} = 0</msg>
<msg level="INFO" timestamp="20170509 13:16:25.952">${output} = /tmp/root/26619/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status status="PASS" starttime="20170509 13:16:25.943" endtime="20170509 13:16:25.952"></status>
</kw>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status status="PASS" starttime="20170509 13:16:25.954" endtime="20170509 13:16:25.963"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${output}\n</arg>
</arguments>
<status status="PASS" starttime="20170509 13:16:25.964" endtime="20170509 13:16:25.964"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>ssh_pw ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:16:25.965">${cmd_buf} = ssh_pw 0penBmc -p 2200 root@9.3.86.161</msg>
<status status="PASS" starttime="20170509 13:16:25.965" endtime="20170509 13:16:25.965"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:16:25.965">${search_string} = ssh_pw 0penBmc -p 2200 root@9.3.86.161</msg>
<status status="PASS" starttime="20170509 13:16:25.931" endtime="20170509 13:16:25.966"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>echo $(ps -ef | egrep '${search_string}'</arg>
<arg>| egrep -v grep | cut -c10-14)</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:16:25.966">${cmd_buf} = echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 root@9.3.86.161' | egrep -v grep | cut -c10-14)</msg>
<status status="PASS" starttime="20170509 13:16:25.966" endtime="20170509 13:16:25.966"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" starttime="20170509 13:16:25.966" endtime="20170509 13:16:25.977"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${os_con_pid}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:16:25.982">Running command 'echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 root@9.3.86.161' | egrep -v grep | cut -c10-14) 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170509 13:16:26.001">${rc} = 0</msg>
<msg level="INFO" timestamp="20170509 13:16:26.001">${os_con_pid} = 179</msg>
<status status="PASS" starttime="20170509 13:16:25.977" endtime="20170509 13:16:26.001"></status>
</kw>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>os_con_pid</arg>
</arguments>
<status status="PASS" starttime="20170509 13:16:26.003" endtime="20170509 13:16:26.011"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>kill -9 ${os_con_pid}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:16:26.012">${cmd_buf} = kill -9 179</msg>
<status status="PASS" starttime="20170509 13:16:26.011" endtime="20170509 13:16:26.012"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpissuing</arg>
<arg>${cmd_buf}</arg>
</arguments>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" starttime="20170509 13:16:26.013" endtime="20170509 13:16:26.020"></status>
</kw>
<status status="PASS" starttime="20170509 13:16:26.013" endtime="20170509 13:16:26.020"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Run And Return Rc And Output</arg>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:16:26.025">Running command 'kill -9 179 2&gt;&amp;1'.</msg>
<status status="PASS" starttime="20170509 13:16:26.021" endtime="20170509 13:16:26.028"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:16:26.029">${rc} = 0</msg>
<msg level="INFO" timestamp="20170509 13:16:26.029">${output} = </msg>
<status status="PASS" starttime="20170509 13:16:26.021" endtime="20170509 13:16:26.029"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpvars</arg>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status status="PASS" starttime="20170509 13:16:26.032" endtime="20170509 13:16:26.041"></status>
</kw>
<status status="PASS" starttime="20170509 13:16:26.031" endtime="20170509 13:16:26.041"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>cat ${log_file_path} 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:16:26.042">${cmd_buf} = cat /tmp/9.3.86.161_os_console 2&gt;&amp;1</msg>
<status status="PASS" starttime="20170509 13:16:26.041" endtime="20170509 13:16:26.042"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" starttime="20170509 13:16:26.042" endtime="20170509 13:16:26.052"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170509 13:16:26.057">Running command 'cat /tmp/9.3.86.161_os_console 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170509 13:16:26.060">${rc} = 0</msg>
<msg level="INFO" timestamp="20170509 13:16:26.060">${output} = spawn ssh -p 2200 root@9.3.86.161
The authenticity of host '[9.3.86.161]:2200 ([9.3.86.161]:2200)' can't be established.
RSA key fingerprint is SHA256:ZIQ9EwwDVn5VT8G4YjbFDwg5zd11CmKi9jXhPu077c4.
Are ...</msg>
<status status="PASS" starttime="20170509 13:16:26.053" endtime="20170509 13:16:26.060"></status>
</kw>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>rc</arg>
</arguments>
<status status="PASS" starttime="20170509 13:16:26.062" endtime="20170509 13:16:26.071"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${targ_file_path}' != '${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<status status="PASS" starttime="20170509 13:16:26.072" endtime="20170509 13:16:26.072"></status>
</kw>
<msg level="INFO" timestamp="20170509 13:16:26.073">${sol_log} = spawn ssh -p 2200 root@9.3.86.161
The authenticity of host '[9.3.86.161]:2200 ([9.3.86.161]:2200)' can't be established.
RSA key fingerprint is SHA256:ZIQ9EwwDVn5VT8G4YjbFDwg5zd11CmKi9jXhPu077c4.
Are ...</msg>
<status status="PASS" starttime="20170509 13:16:25.928" endtime="20170509 13:16:26.073"></status>
</kw>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${sol_log}</arg>
</arguments>
<msg level="INFO" timestamp="20170509 13:16:26.073">spawn ssh -p 2200 root@9.3.86.161
The authenticity of host '[9.3.86.161]:2200 ([9.3.86.161]:2200)' can't be established.
RSA key fingerprint is SHA256:ZIQ9EwwDVn5VT8G4YjbFDwg5zd11CmKi9jXhPu077c4.
Are you sure you want to continue connecting (yes/no)? yes
Warning: Permanently added '[9.3.86.161]:2200' (RSA) to the list of known hosts.
root@9.3.86.161's password: 


--== Welcome to Hostboot hostboot-3a3d65e/hbicore.bin ==--

  4.37966|secure|SecureROM invalid - skipping functionality
 11.98672|ISTEP  6. 5
 12.67096|ISTEP  6. 6
 12.67185|ISTEP  6. 7
 13.43646|HWAS|PRESENT&gt; DIMM[03]=FFFF000000000000
 13.43647|HWAS|PRESENT&gt; Proc[05]=C000000000000000
 13.74035|ISTEP  6. 8
 13.79239|SECURE|Security Access Bit&gt; 0x0000000000000000
 13.79240|SECURE|Secure Mode Disable (via Jumper)&gt; 0xC000000000000000
 13.79256|ISTEP  6. 9
 14.42801|ISTEP  6.10
 14.47992|ISTEP  6.11
 14.48039|ISTEP  6.12
 14.73524|ISTEP  7. 2
 16.75114|ISTEP  7. 3
 17.39502|ISTEP  7. 4
 20.20942|ISTEP  7. 5
 20.28798|ISTEP  8. 1
 20.71833|ISTEP  8. 2
 20.77068|ISTEP  8. 3
 20.84846|ISTEP  8. 4
 31.25546|ISTEP  8. 5
 31.28092|ISTEP  8. 6
 31.28409|ISTEP  8. 7
 31.46993|ISTEP  8. 8
 31.49545|ISTEP  8. 9
 31.62258|ISTEP  8.10
 31.62399|ISTEP  8.11
 31.62490|ISTEP  8.12
 32.10278|ISTEP  8.13
 35.79316|ISTEP  8.14
 35.79506|ISTEP  8.15
 35.79639|ISTEP  8.16
 36.06012|ISTEP  8.17
 36.35611|================================================
 36.35612|Error reported by istep (0x1700) PLID 0x9000000E
 36.38141|  No valid PCIE IOP configuration found.  All PHBs on this PEC will be disabled.
 36.38142|  ModuleId   0x0a MOD_COMPUTE_PCIE_CONFIG_ATTRS
 36.38142|  ReasonCode 0x170e RC_INVALID_CONFIGURATION
 36.38143|  UserData1  Target processor chip's HUID : 0x00050001002d0004
 36.38144|  UserData2  Target PEC HUID : 0x0000000000000000
 36.40668|------------------------------------------------
 36.40669|  Callout type             : Procedure Callout
 36.40670|  Procedure                : EPUB_PRC_HB_CODE
 36.40671|  Priority                 : SRCI_PRIORITY_HIGH
 36.40671|------------------------------------------------
 36.40672|  Hostboot Build ID: hostboot-3a3d65e/hbicore.bin
 36.40673|================================================
 37.40841|ISTEP  8.18
 37.40992|ISTEP  8.19
 37.42460|ISTEP  8.20
 37.43280|ISTEP  9. 1
 37.56092|ISTEP  9. 2
 38.67599|ISTEP  9. 3
 38.70162|ISTEP  9. 4
 39.04497|ISTEP  9. 5
 39.07099|ISTEP  9. 6
 39.12399|ISTEP  9. 7
 39.21400|ISTEP  9. 8
 39.24513|ISTEP 10. 1
 39.82136|ISTEP 10. 2
 39.91983|================================================
 39.91984|Error reported by i2c (0x0700) PLID 0x9000000F
 39.94550|  Timed out waiting for command complete.
 39.94551|  ModuleId   0x05 I2C_WAIT_FOR_CMD_COMP
 39.94552|  ReasonCode 0x0705 I2C_CMD_COMP_TIMEOUT
 39.97200|  UserData1  Status Register Value : 0x0001000000050001
 39.97201|  UserData2  Master Target : 0x0200ffff0190004d
 39.97202|------------------------------------------------
 39.97202|  Callout type             : Hardware Callout
 39.97203|  CPU id                   : 11
 39.97204|  Target                   : Physical:/Sys0/Node0/Proc1
 39.97205|  Deconfig State           : NO_DECONFIG
 39.97206|  GARD Error Type          : GARD_NULL
 39.97207|  Priority                 : SRCI_PRIORITY_HIGH
 39.97208|------------------------------------------------
 39.97209|  Callout type             : Procedure Callout
 39.97209|  Procedure                : EPUB_PRC_HB_CODE
 39.97210|  Priority                 : SRCI_PRIORITY_LOW
 39.97211|------------------------------------------------
 39.97212|  Hostboot Build ID: hostboot-3a3d65e/hbicore.bin
 39.97213|================================================
 42.70750|ISTEP 10. 3
 42.70987|ISTEP 11. 1
 42.73695|ISTEP 12. 1
 42.78903|ISTEP 13. 1
 42.94422|ISTEP 13. 2
 43.05560|ISTEP 13. 3
 43.12514|ISTEP 13. 4
 43.14954|ISTEP 13. 6
 43.35845|ISTEP 13. 7
 43.36034|ISTEP 13. 8
 45.25892|ISTEP 13. 9
 45.82514|ISTEP 13.10
 47.05097|ISTEP 13.11
 47.93064|ISTEP 13.12
 47.93354|ISTEP 13.13
 48.04960|ISTEP 14. 1
 65.53813|ISTEP 14. 2
 65.66931|ISTEP 14. 3
 65.80307|ISTEP 14. 4
 65.80699|ISTEP 14. 5
 66.16925|ISTEP 14. 6
 66.22670|ISTEP 14. 7
 66.23182|ISTEP 15. 1
 70.39739|ISTEP 15. 2
 70.42503|ISTEP 15. 3
 70.48376|ISTEP 15. 4
 70.64455|ISTEP 16. 1
  0.03074|ISTEP 16. 2
 72.76966|ISTEP 16. 3
 72.80813|ISTEP 16. 4
 72.92283|ISTEP 16. 5
 72.96352|ISTEP 18.11
 73.84137|ISTEP 18.12
 73.83213|ISTEP 20. 1
 75.82331|ISTEP 20. 2
 79.19422|ISTEP 21. 1


--== Welcome to Hostboot hostboot-3a3d65e/hbicore.bin ==--

  4.37967|secure|SecureROM invalid - skipping functionality
 12.01885|ISTEP  6. 5
 12.70218|ISTEP  6. 6
 12.70282|ISTEP  6. 7
 13.46897|HWAS|PRESENT&gt; DIMM[03]=FFFF000000000000
 13.46899|HWAS|PRESENT&gt; Proc[05]=C000000000000000
 13.77403|ISTEP  6. 8
 13.82606|SECURE|Security Access Bit&gt; 0x0000000000000000
 13.82607|SECURE|Secure Mode Disable (via Jumper)&gt; 0xC000000000000000
 13.82623|ISTEP  6. 9
 14.46237|ISTEP  6.10
 14.51307|ISTEP  6.11
 14.51380|ISTEP  6.12
 14.76829|ISTEP  7. 2
 16.78286|ISTEP  7. 3
 17.42541|ISTEP  7. 4
 20.24299|ISTEP  7. 5
 20.32161|ISTEP  8. 1
 20.75158|ISTEP  8. 2
 20.80334|ISTEP  8. 3
 20.88141|ISTEP  8. 4
 31.28918|ISTEP  8. 5
 31.31464|ISTEP  8. 6
 31.31798|ISTEP  8. 7
 31.50354|ISTEP  8. 8
 31.52903|ISTEP  8. 9
 31.65622|ISTEP  8.10
 31.65798|ISTEP  8.11
 31.65849|ISTEP  8.12
 32.13433|ISTEP  8.13
 35.83678|ISTEP  8.14
 35.83883|ISTEP  8.15
 35.84018|ISTEP  8.16
 36.10245|ISTEP  8.17
 36.39950|================================================
 36.39951|Error reported by istep (0x1700) PLID 0x90000011
 36.42504|  No valid PCIE IOP configuration found.  All PHBs on this PEC will be disabled.
 36.42505|  ModuleId   0x0a MOD_COMPUTE_PCIE_CONFIG_ATTRS
 36.42506|  ReasonCode 0x170e RC_INVALID_CONFIGURATION
 36.42507|  UserData1  Target processor chip's HUID : 0x00050001002d0004
 36.42507|  UserData2  Target PEC HUID : 0x0000000000000000
 36.45040|------------------------------------------------
 36.45041|  Callout type             : Procedure Callout
 36.45041|  Procedure                : EPUB_PRC_HB_CODE
 36.45042|  Priority                 : SRCI_PRIORITY_HIGH
 36.45043|------------------------------------------------
 36.45044|  Hostboot Build ID: hostboot-3a3d65e/hbicore.bin
 36.45045|================================================
 37.45429|ISTEP  8.18
 37.45581|ISTEP  8.19
 37.47049|ISTEP  8.20
 37.47869|ISTEP  9. 1
 37.60451|ISTEP  9. 2
 38.71871|ISTEP  9. 3
 38.74428|ISTEP  9. 4
 39.08698|ISTEP  9. 5
 39.11369|ISTEP  9. 6
 39.16667|ISTEP  9. 7
 39.25596|ISTEP  9. 8
 39.28678|ISTEP 10. 1
 39.86519|ISTEP 10. 2
 39.96368|================================================
 39.96369|Error reported by i2c (0x0700) PLID 0x90000012
 39.98949|  Timed out waiting for command complete.
 39.98950|  ModuleId   0x05 I2C_WAIT_FOR_CMD_COMP
 39.98951|  ReasonCode 0x0705 I2C_CMD_COMP_TIMEOUT
 40.01539|  UserData1  Status Register Value : 0x0001000000050001
 40.01540|  UserData2  Master Target : 0x0200ffff0190004d
 40.01541|------------------------------------------------
 40.01541|  Callout type             : Hardware Callout
 40.01542|  CPU id                   : 8
 40.01544|  Target                   : Physical:/Sys0/Node0/Proc1
 40.01545|  Deconfig State           : NO_DECONFIG
 40.01546|  GARD Error Type          : GARD_NULL
 40.01547|  Priority                 : SRCI_PRIORITY_HIGH
 40.01548|------------------------------------------------
 40.01549|  Callout type             : Procedure Callout
 40.01549|  Procedure                : EPUB_PRC_HB_CODE
 40.01550|  Priority                 : SRCI_PRIORITY_LOW
 40.01551|------------------------------------------------
 40.01552|  Hostboot Build ID: hostboot-3a3d65e/hbicore.bin
 40.01553|================================================
 42.81657|ISTEP 10. 3
 42.81891|ISTEP 11. 1
 42.84602|ISTEP 12. 1
 42.89954|ISTEP 13. 1
 43.05577|ISTEP 13. 2
 43.16182|ISTEP 13. 3
 43.23705|ISTEP 13. 4
 43.26139|ISTEP 13. 6
 43.47226|ISTEP 13. 7
 43.47387|ISTEP 13. 8
 45.37587|ISTEP 13. 9
 45.96975|================================================
 45.96975|Error reported by hwpf (0x0900) PLID 0x90000013
 45.99547|  HW Procedure generated error. See User Data.
 45.99548|  ModuleId   0x01 MOD_FAPI2_RC_TO_ERRL
 45.99549|  ReasonCode 0x090f RC_HWP_GENERATED_ERROR
 45.99550|  UserData1  RC value from HWP : 0x000000000033e21a
 45.99550|  UserData2  &lt;unused&gt; : 0x0000000000000000
 45.99551|------------------------------------------------
 46.04762|  HwpReturnCode              : RC_MSS_DDR_PHY_RESET_PORT_FIR
 46.04764|  HWP Error description      : The port noted has set an error bit during PHY reset
 46.04765|------------------------------------------------
 46.09962|  HwpReturnCode              : RC_MSS_DDR_PHY_RESET_PORT_FIR
 46.12578|  FFDC                       : CAL_FIR
 46.17673|    00000000 00000000 
 46.17674|------------------------------------------------
 46.28130|  HwpReturnCode              : RC_MSS_DDR_PHY_RESET_PORT_FIR
 46.28131|  FFDC                       : PHY_FIR
 46.28132|    00000000 000000A0 
 46.28132|------------------------------------------------
 46.28133|  Callout type             : Hardware Callout
 46.28134|  CPU id                   : 8
 46.28136|  Target                   : Physical:/Sys0/Node0/Proc1/MCBIST0/MCS0/MCA1
 46.28137|  Deconfig State           : DELAYED_DECONFIG
 46.28138|  GARD Error Type          : GARD_NULL
 46.28139|  Priority                 : SRCI_PRIORITY_HIGH
 46.28140|------------------------------------------------
 46.28141|  Hostboot Build ID: hostboot-3a3d65e/hbicore.bin
 46.28142|================================================
 46.43239|================================================
 46.43240|Error reported by hwpf (0x0900) PLID 0x90000014
 46.43241|  HW Procedure generated error. See User Data.
 46.43242|  ModuleId   0x01 MOD_FAPI2_RC_TO_ERRL
 46.43242|  ReasonCode 0x090f RC_HWP_GENERATED_ERROR
 46.43243|  UserData1  RC value from HWP : 0x000000000059a8ca
 46.43244|  UserData2  &lt;unused&gt; : 0x0000000000000000
 46.43245|------------------------------------------------
 46.45848|  HwpReturnCode              : RC_MSS_DDR_PHY_RESET_PORT_FIRS_REPORTED
 46.45850|  HWP Error description      : One or more ports noted a set error bit during PHY reset
 46.45850|------------------------------------------------
 46.45851|  Callout type             : Hardware Callout
 46.45852|  CPU id                   : 9
 46.45853|  Target                   : Physical:/Sys0/Node0/Proc1/MCBIST0
 46.45854|  Deconfig State           : NO_DECONFIG
 46.45855|  GARD Error Type          : GARD_NULL
 46.45856|  Priority                 : SRCI_PRIORITY_HIGH
 46.45856|------------------------------------------------
 46.45857|  Hostboot Build ID: hostboot-3a3d65e/hbicore.bin
 46.45858|================================================
 46.73293|System shutting down with error status 0x90000014
 46.73298|================================================
 46.73299|Error reported by istep (0x1700) PLID 0x90000014
 46.75881|  IStep failed, see other log(s) with the same PLID for reason.
 46.75882|  ModuleId   0x01 MOD_REPORTING_ERROR
 46.75883|  ReasonCode 0x1703 RC_FAILURE
 46.75884|  UserData1  eid of first error : 0x900000140000090f
 46.75884|  UserData2  Reason code of first error : 0x0000000100000d09
 46.75885|------------------------------------------------
 46.75886|  mss_ddr_phy_reset
 46.75886|------------------------------------------------
 46.75887|  Callout type             : Procedure Callout
 46.75888|  Procedure                : EPUB_PRC_HB_CODE
 46.75889|  Priority                 : SRCI_PRIORITY_LOW
 46.75889|------------------------------------------------
 46.75890|  Hostboot Build ID: hostboot-3a3d65e/hbicore.bin
 46.75891|================================================</msg>
<status status="PASS" starttime="20170509 13:16:26.073" endtime="20170509 13:16:26.074"></status>
</kw>
<status status="PASS" starttime="20170509 13:15:30.406" endtime="20170509 13:16:26.074"></status>
</kw>
<doc>Power off and on.</doc>
<tags>
<tag>chassisboot</tag>
<tag>Power_On_Test</tag>
</tags>
<status status="FAIL" starttime="20170509 13:02:58.523" critical="yes" endtime="20170509 13:16:26.074">Keyword 'Is OS Starting' failed after retrying for 10 minutes. The last error was: FW Progress, Baseboard Init != FW Progress, Starting OS</status>
</test>
<doc>Test power on for HW CI.</doc>
<status status="FAIL" starttime="20170509 13:02:58.491" endtime="20170509 13:16:26.076"></status>
</suite>
<doc>Set metadata for test suite.</doc>
<status status="FAIL" starttime="20170509 13:02:48.883" endtime="20170509 13:16:26.079"></status>
</suite>
<statistics>
<total>
<stat fail="1" pass="1">Critical Tests</stat>
<stat fail="1" pass="1">All Tests</stat>
</total>
<tag>
<stat fail="1" pass="0">chassisboot</stat>
<stat fail="1" pass="0">Power_On_Test</stat>
<stat fail="0" pass="1">Test_SSL_Connection</stat>
</tag>
<suite>
<stat fail="1" id="s1" name="Tests" pass="1">Tests</stat>
<stat fail="0" id="s1-s1" name="Security" pass="1">Tests.Security</stat>
<stat fail="0" id="s1-s1-s1" name="Test Ssl" pass="1">Tests.Security.Test Ssl</stat>
<stat fail="1" id="s1-s2" name="Test Basic Poweron" pass="0">Tests.Test Basic Poweron</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
